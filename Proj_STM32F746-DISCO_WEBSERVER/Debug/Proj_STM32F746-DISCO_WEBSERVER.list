
Proj_STM32F746-DISCO_WEBSERVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000482c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  080049fc  080049fc  000149fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800505c  0800505c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800505c  0800505c  0001505c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005064  08005064  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005064  08005064  00015064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005068  08005068  00015068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800506c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000080  080050ec  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  080050ec  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c006  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d0f  00000000  00000000  0002c0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000820  00000000  00000000  0002ddc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000798  00000000  00000000  0002e5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025598  00000000  00000000  0002ed80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b7f6  00000000  00000000  00054318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e65a8  00000000  00000000  0005fb0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001460b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023d4  00000000  00000000  00146108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080049e4 	.word	0x080049e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	080049e4 	.word	0x080049e4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <ESP_Init>:


/*****************************************************************************************************************************************/

void ESP_Init (char *SSID, char *PASSWD)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b098      	sub	sp, #96	; 0x60
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 80005ee:	f000 fa5f 	bl	8000ab0 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n", wifi_uart);
 80005f2:	495d      	ldr	r1, [pc, #372]	; (8000768 <ESP_Init+0x184>)
 80005f4:	485d      	ldr	r0, [pc, #372]	; (800076c <ESP_Init+0x188>)
 80005f6:	f000 fc78 	bl	8000eea <Uart_sendstring>
	Uart_sendstring("RESETTING.", pc_uart);
 80005fa:	495d      	ldr	r1, [pc, #372]	; (8000770 <ESP_Init+0x18c>)
 80005fc:	485d      	ldr	r0, [pc, #372]	; (8000774 <ESP_Init+0x190>)
 80005fe:	f000 fc74 	bl	8000eea <Uart_sendstring>
	for (int i=0; i<5; i++)
 8000602:	2300      	movs	r3, #0
 8000604:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000606:	e00a      	b.n	800061e <ESP_Init+0x3a>
	{
		Uart_sendstring(".", pc_uart);
 8000608:	4959      	ldr	r1, [pc, #356]	; (8000770 <ESP_Init+0x18c>)
 800060a:	485b      	ldr	r0, [pc, #364]	; (8000778 <ESP_Init+0x194>)
 800060c:	f000 fc6d 	bl	8000eea <Uart_sendstring>
		HAL_Delay(1000);
 8000610:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000614:	f001 f948 	bl	80018a8 <HAL_Delay>
	for (int i=0; i<5; i++)
 8000618:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800061a:	3301      	adds	r3, #1
 800061c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800061e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000620:	2b04      	cmp	r3, #4
 8000622:	ddf1      	ble.n	8000608 <ESP_Init+0x24>
	}

	/********* AT **********/
	Uart_sendstring("AT\r\n", wifi_uart);
 8000624:	4950      	ldr	r1, [pc, #320]	; (8000768 <ESP_Init+0x184>)
 8000626:	4855      	ldr	r0, [pc, #340]	; (800077c <ESP_Init+0x198>)
 8000628:	f000 fc5f 	bl	8000eea <Uart_sendstring>
	while(!(Wait_for("AT\r\r\n\r\nOK\r\n", wifi_uart)));
 800062c:	bf00      	nop
 800062e:	494e      	ldr	r1, [pc, #312]	; (8000768 <ESP_Init+0x184>)
 8000630:	4853      	ldr	r0, [pc, #332]	; (8000780 <ESP_Init+0x19c>)
 8000632:	f000 fceb 	bl	800100c <Wait_for>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d0f8      	beq.n	800062e <ESP_Init+0x4a>
	Uart_sendstring("AT---->OK\n\n", pc_uart);
 800063c:	494c      	ldr	r1, [pc, #304]	; (8000770 <ESP_Init+0x18c>)
 800063e:	4851      	ldr	r0, [pc, #324]	; (8000784 <ESP_Init+0x1a0>)
 8000640:	f000 fc53 	bl	8000eea <Uart_sendstring>


	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n", wifi_uart);
 8000644:	4948      	ldr	r1, [pc, #288]	; (8000768 <ESP_Init+0x184>)
 8000646:	4850      	ldr	r0, [pc, #320]	; (8000788 <ESP_Init+0x1a4>)
 8000648:	f000 fc4f 	bl	8000eea <Uart_sendstring>
	while (!(Wait_for("AT+CWMODE=1\r\r\n\r\nOK\r\n", wifi_uart)));
 800064c:	bf00      	nop
 800064e:	4946      	ldr	r1, [pc, #280]	; (8000768 <ESP_Init+0x184>)
 8000650:	484e      	ldr	r0, [pc, #312]	; (800078c <ESP_Init+0x1a8>)
 8000652:	f000 fcdb 	bl	800100c <Wait_for>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d0f8      	beq.n	800064e <ESP_Init+0x6a>
	Uart_sendstring("CW MODE---->1\n\n", pc_uart);
 800065c:	4944      	ldr	r1, [pc, #272]	; (8000770 <ESP_Init+0x18c>)
 800065e:	484c      	ldr	r0, [pc, #304]	; (8000790 <ESP_Init+0x1ac>)
 8000660:	f000 fc43 	bl	8000eea <Uart_sendstring>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	Uart_sendstring("connecting... to the provided AP\n", pc_uart);
 8000664:	4942      	ldr	r1, [pc, #264]	; (8000770 <ESP_Init+0x18c>)
 8000666:	484b      	ldr	r0, [pc, #300]	; (8000794 <ESP_Init+0x1b0>)
 8000668:	f000 fc3f 	bl	8000eea <Uart_sendstring>
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 800066c:	f107 0008 	add.w	r0, r7, #8
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	4948      	ldr	r1, [pc, #288]	; (8000798 <ESP_Init+0x1b4>)
 8000676:	f003 fd39 	bl	80040ec <siprintf>
	Uart_sendstring(data, wifi_uart);
 800067a:	f107 0308 	add.w	r3, r7, #8
 800067e:	493a      	ldr	r1, [pc, #232]	; (8000768 <ESP_Init+0x184>)
 8000680:	4618      	mov	r0, r3
 8000682:	f000 fc32 	bl	8000eea <Uart_sendstring>
	while (!(Wait_for("WIFI GOT IP\r\n\r\nOK\r\n", wifi_uart)));
 8000686:	bf00      	nop
 8000688:	4937      	ldr	r1, [pc, #220]	; (8000768 <ESP_Init+0x184>)
 800068a:	4844      	ldr	r0, [pc, #272]	; (800079c <ESP_Init+0x1b8>)
 800068c:	f000 fcbe 	bl	800100c <Wait_for>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d0f8      	beq.n	8000688 <ESP_Init+0xa4>
	sprintf (data, "Connected to,\"%s\"\n\n", SSID);
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	4940      	ldr	r1, [pc, #256]	; (80007a0 <ESP_Init+0x1bc>)
 800069e:	4618      	mov	r0, r3
 80006a0:	f003 fd24 	bl	80040ec <siprintf>
	Uart_sendstring(data,pc_uart);
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	4931      	ldr	r1, [pc, #196]	; (8000770 <ESP_Init+0x18c>)
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fc1d 	bl	8000eea <Uart_sendstring>


	/********* AT+CIFSR **********/
	Uart_sendstring("AT+CIFSR\r\n", wifi_uart);
 80006b0:	492d      	ldr	r1, [pc, #180]	; (8000768 <ESP_Init+0x184>)
 80006b2:	483c      	ldr	r0, [pc, #240]	; (80007a4 <ESP_Init+0x1c0>)
 80006b4:	f000 fc19 	bl	8000eea <Uart_sendstring>
	while (!(Wait_for("CIFSR:STAIP,\"", wifi_uart)));
 80006b8:	bf00      	nop
 80006ba:	492b      	ldr	r1, [pc, #172]	; (8000768 <ESP_Init+0x184>)
 80006bc:	483a      	ldr	r0, [pc, #232]	; (80007a8 <ESP_Init+0x1c4>)
 80006be:	f000 fca5 	bl	800100c <Wait_for>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d0f8      	beq.n	80006ba <ESP_Init+0xd6>
	while (!(Copy_upto("\"",buffer, wifi_uart)));
 80006c8:	bf00      	nop
 80006ca:	4a27      	ldr	r2, [pc, #156]	; (8000768 <ESP_Init+0x184>)
 80006cc:	4937      	ldr	r1, [pc, #220]	; (80007ac <ESP_Init+0x1c8>)
 80006ce:	4838      	ldr	r0, [pc, #224]	; (80007b0 <ESP_Init+0x1cc>)
 80006d0:	f000 fc22 	bl	8000f18 <Copy_upto>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d0f7      	beq.n	80006ca <ESP_Init+0xe6>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 80006da:	bf00      	nop
 80006dc:	4922      	ldr	r1, [pc, #136]	; (8000768 <ESP_Init+0x184>)
 80006de:	4835      	ldr	r0, [pc, #212]	; (80007b4 <ESP_Init+0x1d0>)
 80006e0:	f000 fc94 	bl	800100c <Wait_for>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d0f8      	beq.n	80006dc <ESP_Init+0xf8>
	int len = strlen (buffer);
 80006ea:	4830      	ldr	r0, [pc, #192]	; (80007ac <ESP_Init+0x1c8>)
 80006ec:	f7ff fd9a 	bl	8000224 <strlen>
 80006f0:	4603      	mov	r3, r0
 80006f2:	65bb      	str	r3, [r7, #88]	; 0x58
	buffer[len-1] = '\0';
 80006f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006f6:	3b01      	subs	r3, #1
 80006f8:	4a2c      	ldr	r2, [pc, #176]	; (80007ac <ESP_Init+0x1c8>)
 80006fa:	2100      	movs	r1, #0
 80006fc:	54d1      	strb	r1, [r2, r3]
	sprintf (data, "IP ADDR: %s\n\n", buffer);
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	4a2a      	ldr	r2, [pc, #168]	; (80007ac <ESP_Init+0x1c8>)
 8000704:	492c      	ldr	r1, [pc, #176]	; (80007b8 <ESP_Init+0x1d4>)
 8000706:	4618      	mov	r0, r3
 8000708:	f003 fcf0 	bl	80040ec <siprintf>
	Uart_sendstring(data, pc_uart);
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	4917      	ldr	r1, [pc, #92]	; (8000770 <ESP_Init+0x18c>)
 8000712:	4618      	mov	r0, r3
 8000714:	f000 fbe9 	bl	8000eea <Uart_sendstring>


	Uart_sendstring("AT+CIPMUX=1\r\n", wifi_uart);
 8000718:	4913      	ldr	r1, [pc, #76]	; (8000768 <ESP_Init+0x184>)
 800071a:	4828      	ldr	r0, [pc, #160]	; (80007bc <ESP_Init+0x1d8>)
 800071c:	f000 fbe5 	bl	8000eea <Uart_sendstring>
	while (!(Wait_for("AT+CIPMUX=1\r\r\n\r\nOK\r\n", wifi_uart)));
 8000720:	bf00      	nop
 8000722:	4911      	ldr	r1, [pc, #68]	; (8000768 <ESP_Init+0x184>)
 8000724:	4826      	ldr	r0, [pc, #152]	; (80007c0 <ESP_Init+0x1dc>)
 8000726:	f000 fc71 	bl	800100c <Wait_for>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d0f8      	beq.n	8000722 <ESP_Init+0x13e>
	Uart_sendstring("CIPMUX---->OK\n\n", pc_uart);
 8000730:	490f      	ldr	r1, [pc, #60]	; (8000770 <ESP_Init+0x18c>)
 8000732:	4824      	ldr	r0, [pc, #144]	; (80007c4 <ESP_Init+0x1e0>)
 8000734:	f000 fbd9 	bl	8000eea <Uart_sendstring>

	Uart_sendstring("AT+CIPSERVER=1,80\r\n", wifi_uart);
 8000738:	490b      	ldr	r1, [pc, #44]	; (8000768 <ESP_Init+0x184>)
 800073a:	4823      	ldr	r0, [pc, #140]	; (80007c8 <ESP_Init+0x1e4>)
 800073c:	f000 fbd5 	bl	8000eea <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8000740:	bf00      	nop
 8000742:	4909      	ldr	r1, [pc, #36]	; (8000768 <ESP_Init+0x184>)
 8000744:	481b      	ldr	r0, [pc, #108]	; (80007b4 <ESP_Init+0x1d0>)
 8000746:	f000 fc61 	bl	800100c <Wait_for>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d0f8      	beq.n	8000742 <ESP_Init+0x15e>
	Uart_sendstring("CIPSERVER---->OK\n\n", pc_uart);
 8000750:	4907      	ldr	r1, [pc, #28]	; (8000770 <ESP_Init+0x18c>)
 8000752:	481e      	ldr	r0, [pc, #120]	; (80007cc <ESP_Init+0x1e8>)
 8000754:	f000 fbc9 	bl	8000eea <Uart_sendstring>

	Uart_sendstring("Now Connect to the IP ADRESS\n\n", pc_uart);
 8000758:	4905      	ldr	r1, [pc, #20]	; (8000770 <ESP_Init+0x18c>)
 800075a:	481d      	ldr	r0, [pc, #116]	; (80007d0 <ESP_Init+0x1ec>)
 800075c:	f000 fbc5 	bl	8000eea <Uart_sendstring>

}
 8000760:	bf00      	nop
 8000762:	3760      	adds	r7, #96	; 0x60
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000268 	.word	0x20000268
 800076c:	08004e00 	.word	0x08004e00
 8000770:	200001e0 	.word	0x200001e0
 8000774:	08004e0c 	.word	0x08004e0c
 8000778:	08004e18 	.word	0x08004e18
 800077c:	08004e1c 	.word	0x08004e1c
 8000780:	08004e24 	.word	0x08004e24
 8000784:	08004e30 	.word	0x08004e30
 8000788:	08004e3c 	.word	0x08004e3c
 800078c:	08004e4c 	.word	0x08004e4c
 8000790:	08004e64 	.word	0x08004e64
 8000794:	08004e74 	.word	0x08004e74
 8000798:	08004e98 	.word	0x08004e98
 800079c:	08004eb0 	.word	0x08004eb0
 80007a0:	08004ec4 	.word	0x08004ec4
 80007a4:	08004ed8 	.word	0x08004ed8
 80007a8:	08004ee4 	.word	0x08004ee4
 80007ac:	2000009c 	.word	0x2000009c
 80007b0:	08004ef4 	.word	0x08004ef4
 80007b4:	08004ef8 	.word	0x08004ef8
 80007b8:	08004f00 	.word	0x08004f00
 80007bc:	08004f10 	.word	0x08004f10
 80007c0:	08004f20 	.word	0x08004f20
 80007c4:	08004f38 	.word	0x08004f38
 80007c8:	08004f48 	.word	0x08004f48
 80007cc:	08004f5c 	.word	0x08004f5c
 80007d0:	08004f70 	.word	0x08004f70

080007d4 <Server_Send>:




int Server_Send (char *str, int Link_ID)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b098      	sub	sp, #96	; 0x60
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
	int len = strlen (str);
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f7ff fd20 	bl	8000224 <strlen>
 80007e4:	4603      	mov	r3, r0
 80007e6:	65fb      	str	r3, [r7, #92]	; 0x5c
	char data[80];
	sprintf (data, "AT+CIPSEND=%d,%d\r\n", Link_ID, len);
 80007e8:	f107 000c 	add.w	r0, r7, #12
 80007ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007ee:	683a      	ldr	r2, [r7, #0]
 80007f0:	491a      	ldr	r1, [pc, #104]	; (800085c <Server_Send+0x88>)
 80007f2:	f003 fc7b 	bl	80040ec <siprintf>
	Uart_sendstring(data, wifi_uart);
 80007f6:	f107 030c 	add.w	r3, r7, #12
 80007fa:	4919      	ldr	r1, [pc, #100]	; (8000860 <Server_Send+0x8c>)
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 fb74 	bl	8000eea <Uart_sendstring>
	while (!(Wait_for(">", wifi_uart)));
 8000802:	bf00      	nop
 8000804:	4916      	ldr	r1, [pc, #88]	; (8000860 <Server_Send+0x8c>)
 8000806:	4817      	ldr	r0, [pc, #92]	; (8000864 <Server_Send+0x90>)
 8000808:	f000 fc00 	bl	800100c <Wait_for>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d0f8      	beq.n	8000804 <Server_Send+0x30>
	Uart_sendstring (str, wifi_uart);
 8000812:	4913      	ldr	r1, [pc, #76]	; (8000860 <Server_Send+0x8c>)
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f000 fb68 	bl	8000eea <Uart_sendstring>
	while (!(Wait_for("SEND OK", wifi_uart)));
 800081a:	bf00      	nop
 800081c:	4910      	ldr	r1, [pc, #64]	; (8000860 <Server_Send+0x8c>)
 800081e:	4812      	ldr	r0, [pc, #72]	; (8000868 <Server_Send+0x94>)
 8000820:	f000 fbf4 	bl	800100c <Wait_for>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d0f8      	beq.n	800081c <Server_Send+0x48>
	sprintf (data, "AT+CIPCLOSE=5\r\n");
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	490f      	ldr	r1, [pc, #60]	; (800086c <Server_Send+0x98>)
 8000830:	4618      	mov	r0, r3
 8000832:	f003 fc5b 	bl	80040ec <siprintf>
	Uart_sendstring(data, wifi_uart);
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	4909      	ldr	r1, [pc, #36]	; (8000860 <Server_Send+0x8c>)
 800083c:	4618      	mov	r0, r3
 800083e:	f000 fb54 	bl	8000eea <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8000842:	bf00      	nop
 8000844:	4906      	ldr	r1, [pc, #24]	; (8000860 <Server_Send+0x8c>)
 8000846:	480a      	ldr	r0, [pc, #40]	; (8000870 <Server_Send+0x9c>)
 8000848:	f000 fbe0 	bl	800100c <Wait_for>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d0f8      	beq.n	8000844 <Server_Send+0x70>
	return 1;
 8000852:	2301      	movs	r3, #1
}
 8000854:	4618      	mov	r0, r3
 8000856:	3760      	adds	r7, #96	; 0x60
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	08004f90 	.word	0x08004f90
 8000860:	20000268 	.word	0x20000268
 8000864:	08004fa4 	.word	0x08004fa4
 8000868:	08004fa8 	.word	0x08004fa8
 800086c:	08004fb0 	.word	0x08004fb0
 8000870:	08004ef8 	.word	0x08004ef8

08000874 <Server_Handle>:

void Server_Handle (char *str, int Link_ID)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 800087a:	af00      	add	r7, sp, #0
 800087c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000880:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000884:	6018      	str	r0, [r3, #0]
 8000886:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800088a:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800088e:	6019      	str	r1, [r3, #0]
	char datatosend[1024] = {0};
 8000890:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000894:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	3304      	adds	r3, #4
 800089e:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f003 fc19 	bl	80040dc <memset>
	if (!(strcmp (str, "/ledon")))
 80008aa:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80008ae:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80008b2:	493f      	ldr	r1, [pc, #252]	; (80009b0 <Server_Handle+0x13c>)
 80008b4:	6818      	ldr	r0, [r3, #0]
 80008b6:	f7ff fcab 	bl	8000210 <strcmp>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d122      	bne.n	8000906 <Server_Handle+0x92>
	{
		sprintf (datatosend, Basic_inclusion);
 80008c0:	4b3c      	ldr	r3, [pc, #240]	; (80009b4 <Server_Handle+0x140>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	f107 0308 	add.w	r3, r7, #8
 80008c8:	4611      	mov	r1, r2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f003 fc0e 	bl	80040ec <siprintf>
		strcat(datatosend, LED_ON);
 80008d0:	4b39      	ldr	r3, [pc, #228]	; (80009b8 <Server_Handle+0x144>)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	f107 0308 	add.w	r3, r7, #8
 80008d8:	4611      	mov	r1, r2
 80008da:	4618      	mov	r0, r3
 80008dc:	f003 fc26 	bl	800412c <strcat>
		strcat(datatosend, Terminate);
 80008e0:	4b36      	ldr	r3, [pc, #216]	; (80009bc <Server_Handle+0x148>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	f107 0308 	add.w	r3, r7, #8
 80008e8:	4611      	mov	r1, r2
 80008ea:	4618      	mov	r0, r3
 80008ec:	f003 fc1e 	bl	800412c <strcat>
		Server_Send(datatosend, Link_ID);
 80008f0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80008f4:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80008f8:	f107 0208 	add.w	r2, r7, #8
 80008fc:	6819      	ldr	r1, [r3, #0]
 80008fe:	4610      	mov	r0, r2
 8000900:	f7ff ff68 	bl	80007d4 <Server_Send>
		strcat(datatosend, LED_OFF);
		strcat(datatosend, Terminate);
		Server_Send(datatosend, Link_ID);
	}

}
 8000904:	e04f      	b.n	80009a6 <Server_Handle+0x132>
	else if (!(strcmp (str, "/ledoff")))
 8000906:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800090a:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800090e:	492c      	ldr	r1, [pc, #176]	; (80009c0 <Server_Handle+0x14c>)
 8000910:	6818      	ldr	r0, [r3, #0]
 8000912:	f7ff fc7d 	bl	8000210 <strcmp>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d122      	bne.n	8000962 <Server_Handle+0xee>
		sprintf (datatosend, Basic_inclusion);
 800091c:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <Server_Handle+0x140>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	f107 0308 	add.w	r3, r7, #8
 8000924:	4611      	mov	r1, r2
 8000926:	4618      	mov	r0, r3
 8000928:	f003 fbe0 	bl	80040ec <siprintf>
		strcat(datatosend, LED_OFF);
 800092c:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <Server_Handle+0x150>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	f107 0308 	add.w	r3, r7, #8
 8000934:	4611      	mov	r1, r2
 8000936:	4618      	mov	r0, r3
 8000938:	f003 fbf8 	bl	800412c <strcat>
		strcat(datatosend, Terminate);
 800093c:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <Server_Handle+0x148>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	f107 0308 	add.w	r3, r7, #8
 8000944:	4611      	mov	r1, r2
 8000946:	4618      	mov	r0, r3
 8000948:	f003 fbf0 	bl	800412c <strcat>
		Server_Send(datatosend, Link_ID);
 800094c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000950:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8000954:	f107 0208 	add.w	r2, r7, #8
 8000958:	6819      	ldr	r1, [r3, #0]
 800095a:	4610      	mov	r0, r2
 800095c:	f7ff ff3a 	bl	80007d4 <Server_Send>
}
 8000960:	e021      	b.n	80009a6 <Server_Handle+0x132>
		sprintf (datatosend, Basic_inclusion);
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <Server_Handle+0x140>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	4611      	mov	r1, r2
 800096c:	4618      	mov	r0, r3
 800096e:	f003 fbbd 	bl	80040ec <siprintf>
		strcat(datatosend, LED_OFF);
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <Server_Handle+0x150>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	f107 0308 	add.w	r3, r7, #8
 800097a:	4611      	mov	r1, r2
 800097c:	4618      	mov	r0, r3
 800097e:	f003 fbd5 	bl	800412c <strcat>
		strcat(datatosend, Terminate);
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <Server_Handle+0x148>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	f107 0308 	add.w	r3, r7, #8
 800098a:	4611      	mov	r1, r2
 800098c:	4618      	mov	r0, r3
 800098e:	f003 fbcd 	bl	800412c <strcat>
		Server_Send(datatosend, Link_ID);
 8000992:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000996:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800099a:	f107 0208 	add.w	r2, r7, #8
 800099e:	6819      	ldr	r1, [r3, #0]
 80009a0:	4610      	mov	r0, r2
 80009a2:	f7ff ff17 	bl	80007d4 <Server_Send>
}
 80009a6:	bf00      	nop
 80009a8:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	08004fc0 	.word	0x08004fc0
 80009b4:	20000000 	.word	0x20000000
 80009b8:	20000004 	.word	0x20000004
 80009bc:	2000000c 	.word	0x2000000c
 80009c0:	08004fc8 	.word	0x08004fc8
 80009c4:	20000008 	.word	0x20000008

080009c8 <Server_Start>:

void Server_Start (void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b092      	sub	sp, #72	; 0x48
 80009cc:	af00      	add	r7, sp, #0
	char buftocopyinto[64] = {0};
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	223c      	movs	r2, #60	; 0x3c
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f003 fb7e 	bl	80040dc <memset>
	char Link_ID;
	while (!(Get_after("+IPD,", 1, &Link_ID, wifi_uart)));
 80009e0:	bf00      	nop
 80009e2:	1dfa      	adds	r2, r7, #7
 80009e4:	4b2a      	ldr	r3, [pc, #168]	; (8000a90 <Server_Start+0xc8>)
 80009e6:	2101      	movs	r1, #1
 80009e8:	482a      	ldr	r0, [pc, #168]	; (8000a94 <Server_Start+0xcc>)
 80009ea:	f000 fa4f 	bl	8000e8c <Get_after>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d0f6      	beq.n	80009e2 <Server_Start+0x1a>
	Link_ID -= 48;
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	3b30      	subs	r3, #48	; 0x30
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	71fb      	strb	r3, [r7, #7]
	while (!(Copy_upto(" HTTP/1.1", buftocopyinto, wifi_uart)));
 80009fc:	bf00      	nop
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	4a23      	ldr	r2, [pc, #140]	; (8000a90 <Server_Start+0xc8>)
 8000a04:	4619      	mov	r1, r3
 8000a06:	4824      	ldr	r0, [pc, #144]	; (8000a98 <Server_Start+0xd0>)
 8000a08:	f000 fa86 	bl	8000f18 <Copy_upto>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d0f5      	beq.n	80009fe <Server_Start+0x36>
	if (Look_for("/ledon", buftocopyinto) == 1)
 8000a12:	f107 0308 	add.w	r3, r7, #8
 8000a16:	4619      	mov	r1, r3
 8000a18:	4820      	ldr	r0, [pc, #128]	; (8000a9c <Server_Start+0xd4>)
 8000a1a:	f000 f8b0 	bl	8000b7e <Look_for>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d10a      	bne.n	8000a3a <Server_Start+0x72>
	{
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, 1);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2102      	movs	r1, #2
 8000a28:	481d      	ldr	r0, [pc, #116]	; (8000aa0 <Server_Start+0xd8>)
 8000a2a:	f001 fab1 	bl	8001f90 <HAL_GPIO_WritePin>
		Server_Handle("/ledon",Link_ID);
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	4619      	mov	r1, r3
 8000a32:	481a      	ldr	r0, [pc, #104]	; (8000a9c <Server_Start+0xd4>)
 8000a34:	f7ff ff1e 	bl	8000874 <Server_Handle>
	else
	{
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, 0);
		Server_Handle("/ ", Link_ID);
	}
}
 8000a38:	e026      	b.n	8000a88 <Server_Start+0xc0>
	else if (Look_for("/ledoff", buftocopyinto) == 1)
 8000a3a:	f107 0308 	add.w	r3, r7, #8
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4818      	ldr	r0, [pc, #96]	; (8000aa4 <Server_Start+0xdc>)
 8000a42:	f000 f89c 	bl	8000b7e <Look_for>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d10a      	bne.n	8000a62 <Server_Start+0x9a>
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, 0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2102      	movs	r1, #2
 8000a50:	4813      	ldr	r0, [pc, #76]	; (8000aa0 <Server_Start+0xd8>)
 8000a52:	f001 fa9d 	bl	8001f90 <HAL_GPIO_WritePin>
		Server_Handle("/ledoff",Link_ID);
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4812      	ldr	r0, [pc, #72]	; (8000aa4 <Server_Start+0xdc>)
 8000a5c:	f7ff ff0a 	bl	8000874 <Server_Handle>
}
 8000a60:	e012      	b.n	8000a88 <Server_Start+0xc0>
	else if (Look_for("/favicon.ico", buftocopyinto) == 1);
 8000a62:	f107 0308 	add.w	r3, r7, #8
 8000a66:	4619      	mov	r1, r3
 8000a68:	480f      	ldr	r0, [pc, #60]	; (8000aa8 <Server_Start+0xe0>)
 8000a6a:	f000 f888 	bl	8000b7e <Look_for>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d009      	beq.n	8000a88 <Server_Start+0xc0>
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2102      	movs	r1, #2
 8000a78:	4809      	ldr	r0, [pc, #36]	; (8000aa0 <Server_Start+0xd8>)
 8000a7a:	f001 fa89 	bl	8001f90 <HAL_GPIO_WritePin>
		Server_Handle("/ ", Link_ID);
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	4619      	mov	r1, r3
 8000a82:	480a      	ldr	r0, [pc, #40]	; (8000aac <Server_Start+0xe4>)
 8000a84:	f7ff fef6 	bl	8000874 <Server_Handle>
}
 8000a88:	bf00      	nop
 8000a8a:	3748      	adds	r7, #72	; 0x48
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000268 	.word	0x20000268
 8000a94:	08004fd0 	.word	0x08004fd0
 8000a98:	08004fd8 	.word	0x08004fd8
 8000a9c:	08004fc0 	.word	0x08004fc0
 8000aa0:	40022000 	.word	0x40022000
 8000aa4:	08004fc8 	.word	0x08004fc8
 8000aa8:	08004fe4 	.word	0x08004fe4
 8000aac:	08004ff4 	.word	0x08004ff4

08000ab0 <Ringbuf_init>:

void store_char (unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 8000ab4:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <Ringbuf_init+0x68>)
 8000ab6:	4a19      	ldr	r2, [pc, #100]	; (8000b1c <Ringbuf_init+0x6c>)
 8000ab8:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <Ringbuf_init+0x70>)
 8000abc:	4a19      	ldr	r2, [pc, #100]	; (8000b24 <Ringbuf_init+0x74>)
 8000abe:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 8000ac0:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <Ringbuf_init+0x78>)
 8000ac2:	4a1a      	ldr	r2, [pc, #104]	; (8000b2c <Ringbuf_init+0x7c>)
 8000ac4:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <Ringbuf_init+0x80>)
 8000ac8:	4a1a      	ldr	r2, [pc, #104]	; (8000b34 <Ringbuf_init+0x84>)
 8000aca:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 8000acc:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <Ringbuf_init+0x88>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	689a      	ldr	r2, [r3, #8]
 8000ad2:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <Ringbuf_init+0x88>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f042 0201 	orr.w	r2, r2, #1
 8000ada:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_ERR);
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <Ringbuf_init+0x8c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	689a      	ldr	r2, [r3, #8]
 8000ae2:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <Ringbuf_init+0x8c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f042 0201 	orr.w	r2, r2, #1
 8000aea:	609a      	str	r2, [r3, #8]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <Ringbuf_init+0x88>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <Ringbuf_init+0x88>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f042 0220 	orr.w	r2, r2, #32
 8000afa:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <Ringbuf_init+0x8c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <Ringbuf_init+0x8c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f042 0220 	orr.w	r2, r2, #32
 8000b0a:	601a      	str	r2, [r3, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	200001d0 	.word	0x200001d0
 8000b1c:	200000b0 	.word	0x200000b0
 8000b20:	200001d4 	.word	0x200001d4
 8000b24:	200000f8 	.word	0x200000f8
 8000b28:	200001d8 	.word	0x200001d8
 8000b2c:	20000140 	.word	0x20000140
 8000b30:	200001dc 	.word	0x200001dc
 8000b34:	20000188 	.word	0x20000188
 8000b38:	20000268 	.word	0x20000268
 8000b3c:	200001e0 	.word	0x200001e0

08000b40 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	6039      	str	r1, [r7, #0]
 8000b4a:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	3301      	adds	r3, #1
 8000b52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b56:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d007      	beq.n	8000b72 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	683a      	ldr	r2, [r7, #0]
 8000b68:	79f9      	ldrb	r1, [r7, #7]
 8000b6a:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000b6c:	68fa      	ldr	r2, [r7, #12]
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8000b72:	bf00      	nop
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <Look_for>:


int Look_for (char *str, char *buffertolookinto)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b086      	sub	sp, #24
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	6039      	str	r1, [r7, #0]
	int stringlength = strlen (str);
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff fb4b 	bl	8000224 <strlen>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	60fb      	str	r3, [r7, #12]
	int bufferlength = strlen (buffertolookinto);
 8000b92:	6838      	ldr	r0, [r7, #0]
 8000b94:	f7ff fb46 	bl	8000224 <strlen>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	60bb      	str	r3, [r7, #8]
	int so_far = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	613b      	str	r3, [r7, #16]
repeat:
	while (str[so_far] != buffertolookinto[indx]) indx++;
 8000ba4:	e002      	b.n	8000bac <Look_for+0x2e>
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	781a      	ldrb	r2, [r3, #0]
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	6839      	ldr	r1, [r7, #0]
 8000bb8:	440b      	add	r3, r1
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d1f2      	bne.n	8000ba6 <Look_for+0x28>
	if (str[so_far] == buffertolookinto[indx]){
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	781a      	ldrb	r2, [r3, #0]
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	6839      	ldr	r1, [r7, #0]
 8000bcc:	440b      	add	r3, r1
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d111      	bne.n	8000bf8 <Look_for+0x7a>
	while (str[so_far] == buffertolookinto[indx])
 8000bd4:	e005      	b.n	8000be2 <Look_for+0x64>
	{
		so_far++;
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
		indx++;
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	3301      	adds	r3, #1
 8000be0:	613b      	str	r3, [r7, #16]
	while (str[so_far] == buffertolookinto[indx])
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	4413      	add	r3, r2
 8000be8:	781a      	ldrb	r2, [r3, #0]
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	6839      	ldr	r1, [r7, #0]
 8000bee:	440b      	add	r3, r1
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d0ef      	beq.n	8000bd6 <Look_for+0x58>
 8000bf6:	e008      	b.n	8000c0a <Look_for+0x8c>
	}
	}

	else
		{
			so_far =0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
			if (indx >= bufferlength) return -1;
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	dbcf      	blt.n	8000ba4 <Look_for+0x26>
 8000c04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c08:	e007      	b.n	8000c1a <Look_for+0x9c>
			goto repeat;
		}

	if (so_far == stringlength) return 1;
 8000c0a:	697a      	ldr	r2, [r7, #20]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d101      	bne.n	8000c16 <Look_for+0x98>
 8000c12:	2301      	movs	r3, #1
 8000c14:	e001      	b.n	8000c1a <Look_for+0x9c>
	else return -1;
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <Uart_peek>:
	}
}


int Uart_peek(UART_HandleTypeDef *uart)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a19      	ldr	r2, [pc, #100]	; (8000c94 <Uart_peek+0x70>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d111      	bne.n	8000c58 <Uart_peek+0x34>
	{
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8000c34:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <Uart_peek+0x74>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <Uart_peek+0x74>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d102      	bne.n	8000c4a <Uart_peek+0x26>
		  {
		    return -1;
 8000c44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c48:	e01e      	b.n	8000c88 <Uart_peek+0x64>
		  }
		  else
		  {
		    return _rx_buffer1->buffer[_rx_buffer1->tail];
 8000c4a:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <Uart_peek+0x74>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <Uart_peek+0x74>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c54:	5cd3      	ldrb	r3, [r2, r3]
 8000c56:	e017      	b.n	8000c88 <Uart_peek+0x64>
		  }
	}

	else if (uart == pc_uart)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a10      	ldr	r2, [pc, #64]	; (8000c9c <Uart_peek+0x78>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d111      	bne.n	8000c84 <Uart_peek+0x60>
	{
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <Uart_peek+0x7c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <Uart_peek+0x7c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d102      	bne.n	8000c76 <Uart_peek+0x52>
		  {
		    return -1;
 8000c70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c74:	e008      	b.n	8000c88 <Uart_peek+0x64>
		  }
		  else
		  {
		    return _rx_buffer2->buffer[_rx_buffer2->tail];
 8000c76:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <Uart_peek+0x7c>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <Uart_peek+0x7c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c80:	5cd3      	ldrb	r3, [r2, r3]
 8000c82:	e001      	b.n	8000c88 <Uart_peek+0x64>
		  }
	}

	return -1;
 8000c84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	20000268 	.word	0x20000268
 8000c98:	200001d0 	.word	0x200001d0
 8000c9c:	200001e0 	.word	0x200001e0
 8000ca0:	200001d8 	.word	0x200001d8

08000ca4 <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a24      	ldr	r2, [pc, #144]	; (8000d40 <Uart_read+0x9c>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d11c      	bne.n	8000cee <Uart_read+0x4a>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8000cb4:	4b23      	ldr	r3, [pc, #140]	; (8000d44 <Uart_read+0xa0>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cba:	4b22      	ldr	r3, [pc, #136]	; (8000d44 <Uart_read+0xa0>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d102      	bne.n	8000cca <Uart_read+0x26>
		  {
		    return -1;
 8000cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cc8:	e034      	b.n	8000d34 <Uart_read+0x90>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 8000cca:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <Uart_read+0xa0>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <Uart_read+0xa0>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd4:	5cd3      	ldrb	r3, [r2, r3]
 8000cd6:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8000cd8:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <Uart_read+0xa0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	1c5a      	adds	r2, r3, #1
 8000ce0:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <Uart_read+0xa0>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000ce8:	645a      	str	r2, [r3, #68]	; 0x44
		    return c;
 8000cea:	7bbb      	ldrb	r3, [r7, #14]
 8000cec:	e022      	b.n	8000d34 <Uart_read+0x90>
		  }
	}

	else if (uart == pc_uart)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a15      	ldr	r2, [pc, #84]	; (8000d48 <Uart_read+0xa4>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d11c      	bne.n	8000d30 <Uart_read+0x8c>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <Uart_read+0xa8>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cfc:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <Uart_read+0xa8>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d102      	bne.n	8000d0c <Uart_read+0x68>
		  {
		    return -1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d0a:	e013      	b.n	8000d34 <Uart_read+0x90>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <Uart_read+0xa8>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <Uart_read+0xa8>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	5cd3      	ldrb	r3, [r2, r3]
 8000d18:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <Uart_read+0xa8>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d20:	1c5a      	adds	r2, r3, #1
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <Uart_read+0xa8>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000d2a:	645a      	str	r2, [r3, #68]	; 0x44
		    return c;
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
 8000d2e:	e001      	b.n	8000d34 <Uart_read+0x90>
		  }
	}

	else return -1;
 8000d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	20000268 	.word	0x20000268
 8000d44:	200001d0 	.word	0x200001d0
 8000d48:	200001e0 	.word	0x200001e0
 8000d4c:	200001d8 	.word	0x200001d8

08000d50 <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
	if (c>=0)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	db4c      	blt.n	8000dfa <Uart_write+0xaa>
	{
		if (uart == device_uart){
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	4a29      	ldr	r2, [pc, #164]	; (8000e08 <Uart_write+0xb8>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d122      	bne.n	8000dae <Uart_write+0x5e>
		int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8000d68:	4b28      	ldr	r3, [pc, #160]	; (8000e0c <Uart_write+0xbc>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	3301      	adds	r3, #1
 8000d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d74:	60bb      	str	r3, [r7, #8]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer1->tail);
 8000d76:	bf00      	nop
 8000d78:	4b24      	ldr	r3, [pc, #144]	; (8000e0c <Uart_write+0xbc>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d0f9      	beq.n	8000d78 <Uart_write+0x28>

		_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 8000d84:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <Uart_write+0xbc>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b20      	ldr	r3, [pc, #128]	; (8000e0c <Uart_write+0xbc>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	b2c9      	uxtb	r1, r1
 8000d92:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = i;
 8000d94:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <Uart_write+0xbc>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	68ba      	ldr	r2, [r7, #8]
 8000d9a:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <Uart_write+0xb8>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <Uart_write+0xb8>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000daa:	601a      	str	r2, [r3, #0]
			_tx_buffer2->head = i;

			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
			}
	}
}
 8000dac:	e025      	b.n	8000dfa <Uart_write+0xaa>
		else if (uart == pc_uart){
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	4a17      	ldr	r2, [pc, #92]	; (8000e10 <Uart_write+0xc0>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d121      	bne.n	8000dfa <Uart_write+0xaa>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <Uart_write+0xc4>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000dc2:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 8000dc4:	bf00      	nop
 8000dc6:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <Uart_write+0xc4>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d0f9      	beq.n	8000dc6 <Uart_write+0x76>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <Uart_write+0xc4>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <Uart_write+0xc4>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	6879      	ldr	r1, [r7, #4]
 8000dde:	b2c9      	uxtb	r1, r1
 8000de0:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <Uart_write+0xc4>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <Uart_write+0xc0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <Uart_write+0xc0>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000df8:	601a      	str	r2, [r3, #0]
}
 8000dfa:	bf00      	nop
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000268 	.word	0x20000268
 8000e0c:	200001d4 	.word	0x200001d4
 8000e10:	200001e0 	.word	0x200001e0
 8000e14:	200001dc 	.word	0x200001dc

08000e18 <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a16      	ldr	r2, [pc, #88]	; (8000e7c <IsDataAvailable+0x64>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d10e      	bne.n	8000e46 <IsDataAvailable+0x2e>
 8000e28:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <IsDataAvailable+0x68>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <IsDataAvailable+0x68>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	3340      	adds	r3, #64	; 0x40
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e44:	e014      	b.n	8000e70 <IsDataAvailable+0x58>
	else if (uart == pc_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a0e      	ldr	r2, [pc, #56]	; (8000e84 <IsDataAvailable+0x6c>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d10e      	bne.n	8000e6c <IsDataAvailable+0x54>
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <IsDataAvailable+0x70>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <IsDataAvailable+0x70>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	3340      	adds	r3, #64	; 0x40
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e6a:	e001      	b.n	8000e70 <IsDataAvailable+0x58>
	return -1;
 8000e6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	20000268 	.word	0x20000268
 8000e80:	200001d0 	.word	0x200001d0
 8000e84:	200001e0 	.word	0x200001e0
 8000e88:	200001d8 	.word	0x200001d8

08000e8c <Get_after>:



int Get_after (char *string, uint8_t numberofchars, char *buffertosave, UART_HandleTypeDef *uart)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	607a      	str	r2, [r7, #4]
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	72fb      	strb	r3, [r7, #11]

	while (Wait_for(string, uart) != 1);
 8000e9c:	bf00      	nop
 8000e9e:	6839      	ldr	r1, [r7, #0]
 8000ea0:	68f8      	ldr	r0, [r7, #12]
 8000ea2:	f000 f8b3 	bl	800100c <Wait_for>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d1f8      	bne.n	8000e9e <Get_after+0x12>
	for (int indx=0; indx<numberofchars; indx++)
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	e012      	b.n	8000ed8 <Get_after+0x4c>
	{
		while (!(IsDataAvailable(uart)));
 8000eb2:	bf00      	nop
 8000eb4:	6838      	ldr	r0, [r7, #0]
 8000eb6:	f7ff ffaf 	bl	8000e18 <IsDataAvailable>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d0f9      	beq.n	8000eb4 <Get_after+0x28>
		buffertosave[indx] = Uart_read(uart);
 8000ec0:	6838      	ldr	r0, [r7, #0]
 8000ec2:	f7ff feef 	bl	8000ca4 <Uart_read>
 8000ec6:	4601      	mov	r1, r0
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	b2ca      	uxtb	r2, r1
 8000ed0:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	7afb      	ldrb	r3, [r7, #11]
 8000eda:	697a      	ldr	r2, [r7, #20]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	dbe8      	blt.n	8000eb2 <Get_after+0x26>
	}
	return 1;
 8000ee0:	2301      	movs	r3, #1
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <Uart_sendstring>:

void Uart_sendstring (const char *s, UART_HandleTypeDef *uart)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
 8000ef2:	6039      	str	r1, [r7, #0]
	while(*s!='\0') Uart_write(*s++, uart);
 8000ef4:	e007      	b.n	8000f06 <Uart_sendstring+0x1c>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	1c5a      	adds	r2, r3, #1
 8000efa:	607a      	str	r2, [r7, #4]
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	6839      	ldr	r1, [r7, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff25 	bl	8000d50 <Uart_write>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1f3      	bne.n	8000ef6 <Uart_sendstring+0xc>
}
 8000f0e:	bf00      	nop
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <Copy_upto>:
  while(*s) Uart_write(*s++, uart);
}


int Copy_upto (char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
	int so_far =0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 8000f28:	68f8      	ldr	r0, [r7, #12]
 8000f2a:	f7ff f97b 	bl	8000224 <strlen>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61bb      	str	r3, [r7, #24]

again:
	while (!IsDataAvailable(uart));
 8000f36:	bf00      	nop
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff ff6d 	bl	8000e18 <IsDataAvailable>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d0f9      	beq.n	8000f38 <Copy_upto+0x20>
	while (Uart_peek(uart) != string[so_far])
 8000f44:	e01c      	b.n	8000f80 <Copy_upto+0x68>
		{
			buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 8000f46:	4b30      	ldr	r3, [pc, #192]	; (8001008 <Copy_upto+0xf0>)
 8000f48:	6819      	ldr	r1, [r3, #0]
 8000f4a:	4b2f      	ldr	r3, [pc, #188]	; (8001008 <Copy_upto+0xf0>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	68b8      	ldr	r0, [r7, #8]
 8000f54:	4403      	add	r3, r0
 8000f56:	5c8a      	ldrb	r2, [r1, r2]
 8000f58:	701a      	strb	r2, [r3, #0]
			_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8000f5a:	4b2b      	ldr	r3, [pc, #172]	; (8001008 <Copy_upto+0xf0>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f60:	1c5a      	adds	r2, r3, #1
 8000f62:	4b29      	ldr	r3, [pc, #164]	; (8001008 <Copy_upto+0xf0>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000f6a:	645a      	str	r2, [r3, #68]	; 0x44
			indx++;
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	61bb      	str	r3, [r7, #24]
			while (!IsDataAvailable(uart));
 8000f72:	bf00      	nop
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ff4f 	bl	8000e18 <IsDataAvailable>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0f9      	beq.n	8000f74 <Copy_upto+0x5c>
	while (Uart_peek(uart) != string[so_far])
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff fe4f 	bl	8000c24 <Uart_peek>
 8000f86:	4601      	mov	r1, r0
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	4299      	cmp	r1, r3
 8000f92:	d1d8      	bne.n	8000f46 <Copy_upto+0x2e>

		}
	while (Uart_peek(uart) == string [so_far])
 8000f94:	e01b      	b.n	8000fce <Copy_upto+0xb6>
	{
		so_far++;
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = Uart_read(uart);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff fe81 	bl	8000ca4 <Uart_read>
 8000fa2:	4601      	mov	r1, r0
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	1c5a      	adds	r2, r3, #1
 8000fa8:	61ba      	str	r2, [r7, #24]
 8000faa:	461a      	mov	r2, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	4413      	add	r3, r2
 8000fb0:	b2ca      	uxtb	r2, r1
 8000fb2:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d101      	bne.n	8000fc0 <Copy_upto+0xa8>
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e01f      	b.n	8001000 <Copy_upto+0xe8>
		while (!IsDataAvailable(uart));
 8000fc0:	bf00      	nop
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ff28 	bl	8000e18 <IsDataAvailable>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0f9      	beq.n	8000fc2 <Copy_upto+0xaa>
	while (Uart_peek(uart) == string [so_far])
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff fe28 	bl	8000c24 <Uart_peek>
 8000fd4:	4601      	mov	r1, r0
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	4413      	add	r3, r2
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	4299      	cmp	r1, r3
 8000fe0:	d0d9      	beq.n	8000f96 <Copy_upto+0x7e>
	}

	if (so_far != len)
 8000fe2:	69fa      	ldr	r2, [r7, #28]
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d002      	beq.n	8000ff0 <Copy_upto+0xd8>
	{
		so_far = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
		goto again;
 8000fee:	e7a2      	b.n	8000f36 <Copy_upto+0x1e>
	}

	if (so_far == len) return 1;
 8000ff0:	69fa      	ldr	r2, [r7, #28]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d101      	bne.n	8000ffc <Copy_upto+0xe4>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e001      	b.n	8001000 <Copy_upto+0xe8>
	else return -1;
 8000ffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

}
 8001000:	4618      	mov	r0, r3
 8001002:	3720      	adds	r7, #32
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	200001d0 	.word	0x200001d0

0800100c <Wait_for>:


int Wait_for (char *string,UART_HandleTypeDef *uart)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff f902 	bl	8000224 <strlen>
 8001020:	4603      	mov	r3, r0
 8001022:	60bb      	str	r3, [r7, #8]

again_device:
	while (!IsDataAvailable(uart));
 8001024:	bf00      	nop
 8001026:	6838      	ldr	r0, [r7, #0]
 8001028:	f7ff fef6 	bl	8000e18 <IsDataAvailable>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0f9      	beq.n	8001026 <Wait_for+0x1a>
	if (Uart_peek(uart) != string[so_far])
 8001032:	6838      	ldr	r0, [r7, #0]
 8001034:	f7ff fdf6 	bl	8000c24 <Uart_peek>
 8001038:	4601      	mov	r1, r0
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	4413      	add	r3, r2
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	4299      	cmp	r1, r3
 8001044:	d01c      	beq.n	8001080 <Wait_for+0x74>
	{
		 _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE ;
 8001046:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <Wait_for+0xb0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104c:	1c5a      	adds	r2, r3, #1
 800104e:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <Wait_for+0xb0>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001056:	645a      	str	r2, [r3, #68]	; 0x44
		goto again_device;
 8001058:	e7e4      	b.n	8001024 <Wait_for+0x18>

	}
	while (Uart_peek(uart) == string [so_far])
	{
		so_far++;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	3301      	adds	r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
		Uart_read(uart);
 8001060:	6838      	ldr	r0, [r7, #0]
 8001062:	f7ff fe1f 	bl	8000ca4 <Uart_read>
		if (so_far == len) return 1;
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	429a      	cmp	r2, r3
 800106c:	d101      	bne.n	8001072 <Wait_for+0x66>
 800106e:	2301      	movs	r3, #1
 8001070:	e01f      	b.n	80010b2 <Wait_for+0xa6>
		while (!IsDataAvailable(uart));
 8001072:	bf00      	nop
 8001074:	6838      	ldr	r0, [r7, #0]
 8001076:	f7ff fecf 	bl	8000e18 <IsDataAvailable>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d0f9      	beq.n	8001074 <Wait_for+0x68>
	while (Uart_peek(uart) == string [so_far])
 8001080:	6838      	ldr	r0, [r7, #0]
 8001082:	f7ff fdcf 	bl	8000c24 <Uart_peek>
 8001086:	4601      	mov	r1, r0
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4299      	cmp	r1, r3
 8001092:	d0e2      	beq.n	800105a <Wait_for+0x4e>
	}

	if (so_far != len)
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	429a      	cmp	r2, r3
 800109a:	d002      	beq.n	80010a2 <Wait_for+0x96>
	{
		so_far = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]
		goto again_device;
 80010a0:	e7c0      	b.n	8001024 <Wait_for+0x18>
	}

	if (so_far == len) return 1;
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d101      	bne.n	80010ae <Wait_for+0xa2>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e001      	b.n	80010b2 <Wait_for+0xa6>
	else return -1;
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200001d0 	.word	0x200001d0

080010c0 <Uart_isr>:

void Uart_isr (UART_HandleTypeDef *huart)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	f003 0320 	and.w	r3, r3, #32
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d023      	beq.n	800112a <Uart_isr+0x6a>
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	f003 0320 	and.w	r3, r3, #32
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d01e      	beq.n	800112a <Uart_isr+0x6a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->ISR;                       /* Read status register */
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	69db      	ldr	r3, [r3, #28]
        unsigned char c = huart->Instance->RDR;     /* Read data register */
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f8:	73fb      	strb	r3, [r7, #15]
        if (huart == device_uart)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a3a      	ldr	r2, [pc, #232]	; (80011e8 <Uart_isr+0x128>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d107      	bne.n	8001112 <Uart_isr+0x52>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 8001102:	4b3a      	ldr	r3, [pc, #232]	; (80011ec <Uart_isr+0x12c>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	4611      	mov	r1, r2
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fd18 	bl	8000b40 <store_char>
        else if (huart == pc_uart)
        {
           	store_char (c, _rx_buffer2);  // store data in buffer
        }

        return;
 8001110:	e063      	b.n	80011da <Uart_isr+0x11a>
        else if (huart == pc_uart)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a36      	ldr	r2, [pc, #216]	; (80011f0 <Uart_isr+0x130>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d15f      	bne.n	80011da <Uart_isr+0x11a>
           	store_char (c, _rx_buffer2);  // store data in buffer
 800111a:	4b36      	ldr	r3, [pc, #216]	; (80011f4 <Uart_isr+0x134>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	4611      	mov	r1, r2
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fd0c 	bl	8000b40 <store_char>
        return;
 8001128:	e057      	b.n	80011da <Uart_isr+0x11a>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001130:	2b00      	cmp	r3, #0
 8001132:	d055      	beq.n	80011e0 <Uart_isr+0x120>
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113a:	2b00      	cmp	r3, #0
 800113c:	d050      	beq.n	80011e0 <Uart_isr+0x120>
    {
    	if (huart == device_uart){
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a29      	ldr	r2, [pc, #164]	; (80011e8 <Uart_isr+0x128>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d122      	bne.n	800118c <Uart_isr+0xcc>
    	if(tx_buffer1.head == tx_buffer1.tail)
 8001146:	4b2c      	ldr	r3, [pc, #176]	; (80011f8 <Uart_isr+0x138>)
 8001148:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800114a:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <Uart_isr+0x138>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	429a      	cmp	r2, r3
 8001150:	d108      	bne.n	8001164 <Uart_isr+0xa4>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001160:	601a      	str	r2, [r3, #0]
        	      huart->Instance->ISR;
        	      huart->Instance->TDR = c;

        	    }
        	}
    	return;
 8001162:	e03c      	b.n	80011de <Uart_isr+0x11e>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8001164:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <Uart_isr+0x138>)
 8001166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001168:	4a23      	ldr	r2, [pc, #140]	; (80011f8 <Uart_isr+0x138>)
 800116a:	5cd3      	ldrb	r3, [r2, r3]
 800116c:	737b      	strb	r3, [r7, #13]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 800116e:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <Uart_isr+0x138>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	3301      	adds	r3, #1
 8001174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001178:	4a1f      	ldr	r2, [pc, #124]	; (80011f8 <Uart_isr+0x138>)
 800117a:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->ISR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	69db      	ldr	r3, [r3, #28]
    	      huart->Instance->TDR = c;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	7b7a      	ldrb	r2, [r7, #13]
 8001188:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 800118a:	e028      	b.n	80011de <Uart_isr+0x11e>
    	else if (huart == pc_uart){
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a18      	ldr	r2, [pc, #96]	; (80011f0 <Uart_isr+0x130>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d124      	bne.n	80011de <Uart_isr+0x11e>
        	if(tx_buffer2.head == tx_buffer2.tail)
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <Uart_isr+0x13c>)
 8001196:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001198:	4b18      	ldr	r3, [pc, #96]	; (80011fc <Uart_isr+0x13c>)
 800119a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119c:	429a      	cmp	r2, r3
 800119e:	d108      	bne.n	80011b2 <Uart_isr+0xf2>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011ae:	601a      	str	r2, [r3, #0]
    	return;
 80011b0:	e015      	b.n	80011de <Uart_isr+0x11e>
        	      unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <Uart_isr+0x13c>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	4a11      	ldr	r2, [pc, #68]	; (80011fc <Uart_isr+0x13c>)
 80011b8:	5cd3      	ldrb	r3, [r2, r3]
 80011ba:	73bb      	strb	r3, [r7, #14]
        	      tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <Uart_isr+0x13c>)
 80011be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c0:	3301      	adds	r3, #1
 80011c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011c6:	4a0d      	ldr	r2, [pc, #52]	; (80011fc <Uart_isr+0x13c>)
 80011c8:	6453      	str	r3, [r2, #68]	; 0x44
        	      huart->Instance->ISR;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	69db      	ldr	r3, [r3, #28]
        	      huart->Instance->TDR = c;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	7bba      	ldrb	r2, [r7, #14]
 80011d6:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 80011d8:	e001      	b.n	80011de <Uart_isr+0x11e>
        return;
 80011da:	bf00      	nop
 80011dc:	e000      	b.n	80011e0 <Uart_isr+0x120>
    	return;
 80011de:	bf00      	nop
    }
}
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000268 	.word	0x20000268
 80011ec:	200001d0 	.word	0x200001d0
 80011f0:	200001e0 	.word	0x200001e0
 80011f4:	200001d8 	.word	0x200001d8
 80011f8:	200000f8 	.word	0x200000f8
 80011fc:	20000188 	.word	0x20000188

08001200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001204:	f000 faf3 	bl	80017ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001208:	f000 f812 	bl	8001230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800120c:	f000 f8d8 	bl	80013c0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001210:	f000 f876 	bl	8001300 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001214:	f000 f8a4 	bl	8001360 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  ESP_Init("delameta", "bilano1407");
 8001218:	4903      	ldr	r1, [pc, #12]	; (8001228 <main+0x28>)
 800121a:	4804      	ldr	r0, [pc, #16]	; (800122c <main+0x2c>)
 800121c:	f7ff f9e2 	bl	80005e4 <ESP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Server_Start();
 8001220:	f7ff fbd2 	bl	80009c8 <Server_Start>
 8001224:	e7fc      	b.n	8001220 <main+0x20>
 8001226:	bf00      	nop
 8001228:	08004ff8 	.word	0x08004ff8
 800122c:	08005004 	.word	0x08005004

08001230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b094      	sub	sp, #80	; 0x50
 8001234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001236:	f107 0320 	add.w	r3, r7, #32
 800123a:	2230      	movs	r2, #48	; 0x30
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f002 ff4c 	bl	80040dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001244:	f107 030c 	add.w	r3, r7, #12
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001254:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <SystemClock_Config+0xc8>)
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	4a27      	ldr	r2, [pc, #156]	; (80012f8 <SystemClock_Config+0xc8>)
 800125a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125e:	6413      	str	r3, [r2, #64]	; 0x40
 8001260:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <SystemClock_Config+0xc8>)
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800126c:	4b23      	ldr	r3, [pc, #140]	; (80012fc <SystemClock_Config+0xcc>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001274:	4a21      	ldr	r2, [pc, #132]	; (80012fc <SystemClock_Config+0xcc>)
 8001276:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <SystemClock_Config+0xcc>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001288:	2302      	movs	r3, #2
 800128a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800128c:	2301      	movs	r3, #1
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001290:	2310      	movs	r3, #16
 8001292:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001294:	2302      	movs	r3, #2
 8001296:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001298:	2300      	movs	r3, #0
 800129a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800129c:	2308      	movs	r3, #8
 800129e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80012a0:	2332      	movs	r3, #50	; 0x32
 80012a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012a4:	2302      	movs	r3, #2
 80012a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80012a8:	2309      	movs	r3, #9
 80012aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ac:	f107 0320 	add.w	r3, r7, #32
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 fe87 	bl	8001fc4 <HAL_RCC_OscConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80012bc:	f000 f8e2 	bl	8001484 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c0:	230f      	movs	r3, #15
 80012c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c4:	2302      	movs	r3, #2
 80012c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	2101      	movs	r1, #1
 80012de:	4618      	mov	r0, r3
 80012e0:	f001 f914 	bl	800250c <HAL_RCC_ClockConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80012ea:	f000 f8cb 	bl	8001484 <Error_Handler>
  }
}
 80012ee:	bf00      	nop
 80012f0:	3750      	adds	r7, #80	; 0x50
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40007000 	.word	0x40007000

08001300 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001304:	4b14      	ldr	r3, [pc, #80]	; (8001358 <MX_USART1_UART_Init+0x58>)
 8001306:	4a15      	ldr	r2, [pc, #84]	; (800135c <MX_USART1_UART_Init+0x5c>)
 8001308:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <MX_USART1_UART_Init+0x58>)
 800130c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001310:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_USART1_UART_Init+0x58>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <MX_USART1_UART_Init+0x58>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_USART1_UART_Init+0x58>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_USART1_UART_Init+0x58>)
 8001326:	220c      	movs	r2, #12
 8001328:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <MX_USART1_UART_Init+0x58>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_USART1_UART_Init+0x58>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <MX_USART1_UART_Init+0x58>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_USART1_UART_Init+0x58>)
 800133e:	2200      	movs	r2, #0
 8001340:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <MX_USART1_UART_Init+0x58>)
 8001344:	f001 feb8 	bl	80030b8 <HAL_UART_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800134e:	f000 f899 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200001e0 	.word	0x200001e0
 800135c:	40011000 	.word	0x40011000

08001360 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <MX_USART6_UART_Init+0x58>)
 8001366:	4a15      	ldr	r2, [pc, #84]	; (80013bc <MX_USART6_UART_Init+0x5c>)
 8001368:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800136a:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <MX_USART6_UART_Init+0x58>)
 800136c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001370:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_USART6_UART_Init+0x58>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <MX_USART6_UART_Init+0x58>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <MX_USART6_UART_Init+0x58>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <MX_USART6_UART_Init+0x58>)
 8001386:	220c      	movs	r2, #12
 8001388:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <MX_USART6_UART_Init+0x58>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_USART6_UART_Init+0x58>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001396:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <MX_USART6_UART_Init+0x58>)
 8001398:	2200      	movs	r2, #0
 800139a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <MX_USART6_UART_Init+0x58>)
 800139e:	2200      	movs	r2, #0
 80013a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_USART6_UART_Init+0x58>)
 80013a4:	f001 fe88 	bl	80030b8 <HAL_UART_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80013ae:	f000 f869 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000268 	.word	0x20000268
 80013bc:	40011400 	.word	0x40011400

080013c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	; 0x28
 80013c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	4b29      	ldr	r3, [pc, #164]	; (800147c <MX_GPIO_Init+0xbc>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a28      	ldr	r2, [pc, #160]	; (800147c <MX_GPIO_Init+0xbc>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b26      	ldr	r3, [pc, #152]	; (800147c <MX_GPIO_Init+0xbc>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	4b23      	ldr	r3, [pc, #140]	; (800147c <MX_GPIO_Init+0xbc>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a22      	ldr	r2, [pc, #136]	; (800147c <MX_GPIO_Init+0xbc>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b20      	ldr	r3, [pc, #128]	; (800147c <MX_GPIO_Init+0xbc>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001406:	4b1d      	ldr	r3, [pc, #116]	; (800147c <MX_GPIO_Init+0xbc>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a1c      	ldr	r2, [pc, #112]	; (800147c <MX_GPIO_Init+0xbc>)
 800140c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b1a      	ldr	r3, [pc, #104]	; (800147c <MX_GPIO_Init+0xbc>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800141e:	4b17      	ldr	r3, [pc, #92]	; (800147c <MX_GPIO_Init+0xbc>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a16      	ldr	r2, [pc, #88]	; (800147c <MX_GPIO_Init+0xbc>)
 8001424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b14      	ldr	r3, [pc, #80]	; (800147c <MX_GPIO_Init+0xbc>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <MX_GPIO_Init+0xbc>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a10      	ldr	r2, [pc, #64]	; (800147c <MX_GPIO_Init+0xbc>)
 800143c:	f043 0304 	orr.w	r3, r3, #4
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <MX_GPIO_Init+0xbc>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	2102      	movs	r1, #2
 8001452:	480b      	ldr	r0, [pc, #44]	; (8001480 <MX_GPIO_Init+0xc0>)
 8001454:	f000 fd9c 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001458:	2302      	movs	r3, #2
 800145a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145c:	2301      	movs	r3, #1
 800145e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	2300      	movs	r3, #0
 8001466:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4619      	mov	r1, r3
 800146e:	4804      	ldr	r0, [pc, #16]	; (8001480 <MX_GPIO_Init+0xc0>)
 8001470:	f000 fbe2 	bl	8001c38 <HAL_GPIO_Init>

}
 8001474:	bf00      	nop
 8001476:	3728      	adds	r7, #40	; 0x28
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40023800 	.word	0x40023800
 8001480:	40022000 	.word	0x40022000

08001484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001488:	b672      	cpsid	i
}
 800148a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800148c:	e7fe      	b.n	800148c <Error_Handler+0x8>
	...

08001490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001496:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <HAL_MspInit+0x44>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <HAL_MspInit+0x44>)
 800149c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a0:	6413      	str	r3, [r2, #64]	; 0x40
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <HAL_MspInit+0x44>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HAL_MspInit+0x44>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	4a08      	ldr	r2, [pc, #32]	; (80014d4 <HAL_MspInit+0x44>)
 80014b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_MspInit+0x44>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800

080014d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b0ae      	sub	sp, #184	; 0xb8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f0:	f107 0320 	add.w	r3, r7, #32
 80014f4:	2284      	movs	r2, #132	; 0x84
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f002 fdef 	bl	80040dc <memset>
  if(huart->Instance==USART1)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a5b      	ldr	r2, [pc, #364]	; (8001670 <HAL_UART_MspInit+0x198>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d165      	bne.n	80015d4 <HAL_UART_MspInit+0xfc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001508:	2340      	movs	r3, #64	; 0x40
 800150a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800150c:	2300      	movs	r3, #0
 800150e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001510:	f107 0320 	add.w	r3, r7, #32
 8001514:	4618      	mov	r0, r3
 8001516:	f001 f9df 	bl	80028d8 <HAL_RCCEx_PeriphCLKConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001520:	f7ff ffb0 	bl	8001484 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001524:	4b53      	ldr	r3, [pc, #332]	; (8001674 <HAL_UART_MspInit+0x19c>)
 8001526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001528:	4a52      	ldr	r2, [pc, #328]	; (8001674 <HAL_UART_MspInit+0x19c>)
 800152a:	f043 0310 	orr.w	r3, r3, #16
 800152e:	6453      	str	r3, [r2, #68]	; 0x44
 8001530:	4b50      	ldr	r3, [pc, #320]	; (8001674 <HAL_UART_MspInit+0x19c>)
 8001532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001534:	f003 0310 	and.w	r3, r3, #16
 8001538:	61fb      	str	r3, [r7, #28]
 800153a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153c:	4b4d      	ldr	r3, [pc, #308]	; (8001674 <HAL_UART_MspInit+0x19c>)
 800153e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001540:	4a4c      	ldr	r2, [pc, #304]	; (8001674 <HAL_UART_MspInit+0x19c>)
 8001542:	f043 0302 	orr.w	r3, r3, #2
 8001546:	6313      	str	r3, [r2, #48]	; 0x30
 8001548:	4b4a      	ldr	r3, [pc, #296]	; (8001674 <HAL_UART_MspInit+0x19c>)
 800154a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	61bb      	str	r3, [r7, #24]
 8001552:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001554:	4b47      	ldr	r3, [pc, #284]	; (8001674 <HAL_UART_MspInit+0x19c>)
 8001556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001558:	4a46      	ldr	r2, [pc, #280]	; (8001674 <HAL_UART_MspInit+0x19c>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	6313      	str	r3, [r2, #48]	; 0x30
 8001560:	4b44      	ldr	r3, [pc, #272]	; (8001674 <HAL_UART_MspInit+0x19c>)
 8001562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157e:	2303      	movs	r3, #3
 8001580:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001584:	2307      	movs	r3, #7
 8001586:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800158e:	4619      	mov	r1, r3
 8001590:	4839      	ldr	r0, [pc, #228]	; (8001678 <HAL_UART_MspInit+0x1a0>)
 8001592:	f000 fb51 	bl	8001c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001596:	f44f 7300 	mov.w	r3, #512	; 0x200
 800159a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015aa:	2303      	movs	r3, #3
 80015ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015b0:	2307      	movs	r3, #7
 80015b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015ba:	4619      	mov	r1, r3
 80015bc:	482f      	ldr	r0, [pc, #188]	; (800167c <HAL_UART_MspInit+0x1a4>)
 80015be:	f000 fb3b 	bl	8001c38 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	2025      	movs	r0, #37	; 0x25
 80015c8:	f000 fa6d 	bl	8001aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015cc:	2025      	movs	r0, #37	; 0x25
 80015ce:	f000 fa86 	bl	8001ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80015d2:	e048      	b.n	8001666 <HAL_UART_MspInit+0x18e>
  else if(huart->Instance==USART6)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a29      	ldr	r2, [pc, #164]	; (8001680 <HAL_UART_MspInit+0x1a8>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d143      	bne.n	8001666 <HAL_UART_MspInit+0x18e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80015de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015e2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80015e4:	2300      	movs	r3, #0
 80015e6:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e8:	f107 0320 	add.w	r3, r7, #32
 80015ec:	4618      	mov	r0, r3
 80015ee:	f001 f973 	bl	80028d8 <HAL_RCCEx_PeriphCLKConfig>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <HAL_UART_MspInit+0x124>
      Error_Handler();
 80015f8:	f7ff ff44 	bl	8001484 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80015fc:	4b1d      	ldr	r3, [pc, #116]	; (8001674 <HAL_UART_MspInit+0x19c>)
 80015fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001600:	4a1c      	ldr	r2, [pc, #112]	; (8001674 <HAL_UART_MspInit+0x19c>)
 8001602:	f043 0320 	orr.w	r3, r3, #32
 8001606:	6453      	str	r3, [r2, #68]	; 0x44
 8001608:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <HAL_UART_MspInit+0x19c>)
 800160a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160c:	f003 0320 	and.w	r3, r3, #32
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001614:	4b17      	ldr	r3, [pc, #92]	; (8001674 <HAL_UART_MspInit+0x19c>)
 8001616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001618:	4a16      	ldr	r2, [pc, #88]	; (8001674 <HAL_UART_MspInit+0x19c>)
 800161a:	f043 0304 	orr.w	r3, r3, #4
 800161e:	6313      	str	r3, [r2, #48]	; 0x30
 8001620:	4b14      	ldr	r3, [pc, #80]	; (8001674 <HAL_UART_MspInit+0x19c>)
 8001622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800162c:	23c0      	movs	r3, #192	; 0xc0
 800162e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001644:	2308      	movs	r3, #8
 8001646:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800164a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800164e:	4619      	mov	r1, r3
 8001650:	480c      	ldr	r0, [pc, #48]	; (8001684 <HAL_UART_MspInit+0x1ac>)
 8001652:	f000 faf1 	bl	8001c38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2100      	movs	r1, #0
 800165a:	2047      	movs	r0, #71	; 0x47
 800165c:	f000 fa23 	bl	8001aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001660:	2047      	movs	r0, #71	; 0x47
 8001662:	f000 fa3c 	bl	8001ade <HAL_NVIC_EnableIRQ>
}
 8001666:	bf00      	nop
 8001668:	37b8      	adds	r7, #184	; 0xb8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40011000 	.word	0x40011000
 8001674:	40023800 	.word	0x40023800
 8001678:	40020400 	.word	0x40020400
 800167c:	40020000 	.word	0x40020000
 8001680:	40011400 	.word	0x40011400
 8001684:	40020800 	.word	0x40020800

08001688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800168c:	e7fe      	b.n	800168c <NMI_Handler+0x4>

0800168e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001692:	e7fe      	b.n	8001692 <HardFault_Handler+0x4>

08001694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <MemManage_Handler+0x4>

0800169a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <BusFault_Handler+0x4>

080016a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <UsageFault_Handler+0x4>

080016a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d4:	f000 f8c8 	bl	8001868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}

080016dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr (&huart1);
 80016e0:	4803      	ldr	r0, [pc, #12]	; (80016f0 <USART1_IRQHandler+0x14>)
 80016e2:	f7ff fced 	bl	80010c0 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016e6:	4802      	ldr	r0, [pc, #8]	; (80016f0 <USART1_IRQHandler+0x14>)
 80016e8:	f001 fd34 	bl	8003154 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200001e0 	.word	0x200001e0

080016f4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	Uart_isr (&huart6);
 80016f8:	4803      	ldr	r0, [pc, #12]	; (8001708 <USART6_IRQHandler+0x14>)
 80016fa:	f7ff fce1 	bl	80010c0 <Uart_isr>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80016fe:	4802      	ldr	r0, [pc, #8]	; (8001708 <USART6_IRQHandler+0x14>)
 8001700:	f001 fd28 	bl	8003154 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000268 	.word	0x20000268

0800170c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001714:	4a14      	ldr	r2, [pc, #80]	; (8001768 <_sbrk+0x5c>)
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <_sbrk+0x60>)
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001720:	4b13      	ldr	r3, [pc, #76]	; (8001770 <_sbrk+0x64>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d102      	bne.n	800172e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <_sbrk+0x64>)
 800172a:	4a12      	ldr	r2, [pc, #72]	; (8001774 <_sbrk+0x68>)
 800172c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <_sbrk+0x64>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	429a      	cmp	r2, r3
 800173a:	d207      	bcs.n	800174c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800173c:	f002 fca4 	bl	8004088 <__errno>
 8001740:	4603      	mov	r3, r0
 8001742:	220c      	movs	r2, #12
 8001744:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001746:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800174a:	e009      	b.n	8001760 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800174c:	4b08      	ldr	r3, [pc, #32]	; (8001770 <_sbrk+0x64>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001752:	4b07      	ldr	r3, [pc, #28]	; (8001770 <_sbrk+0x64>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	4a05      	ldr	r2, [pc, #20]	; (8001770 <_sbrk+0x64>)
 800175c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800175e:	68fb      	ldr	r3, [r7, #12]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20050000 	.word	0x20050000
 800176c:	00000400 	.word	0x00000400
 8001770:	200002f0 	.word	0x200002f0
 8001774:	20000308 	.word	0x20000308

08001778 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <SystemInit+0x20>)
 800177e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001782:	4a05      	ldr	r2, [pc, #20]	; (8001798 <SystemInit+0x20>)
 8001784:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001788:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800179c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017a0:	480d      	ldr	r0, [pc, #52]	; (80017d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017a2:	490e      	ldr	r1, [pc, #56]	; (80017dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017a4:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a8:	e002      	b.n	80017b0 <LoopCopyDataInit>

080017aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ae:	3304      	adds	r3, #4

080017b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b4:	d3f9      	bcc.n	80017aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b6:	4a0b      	ldr	r2, [pc, #44]	; (80017e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017b8:	4c0b      	ldr	r4, [pc, #44]	; (80017e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017bc:	e001      	b.n	80017c2 <LoopFillZerobss>

080017be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c0:	3204      	adds	r2, #4

080017c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c4:	d3fb      	bcc.n	80017be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017c6:	f7ff ffd7 	bl	8001778 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ca:	f002 fc63 	bl	8004094 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ce:	f7ff fd17 	bl	8001200 <main>
  bx  lr    
 80017d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017d4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80017d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017dc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80017e0:	0800506c 	.word	0x0800506c
  ldr r2, =_sbss
 80017e4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80017e8:	20000308 	.word	0x20000308

080017ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017ec:	e7fe      	b.n	80017ec <ADC_IRQHandler>

080017ee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f2:	2003      	movs	r0, #3
 80017f4:	f000 f94c 	bl	8001a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017f8:	200f      	movs	r0, #15
 80017fa:	f000 f805 	bl	8001808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017fe:	f7ff fe47 	bl	8001490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	bd80      	pop	{r7, pc}

08001808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_InitTick+0x54>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_InitTick+0x58>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	4619      	mov	r1, r3
 800181a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800181e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001822:	fbb2 f3f3 	udiv	r3, r2, r3
 8001826:	4618      	mov	r0, r3
 8001828:	f000 f967 	bl	8001afa <HAL_SYSTICK_Config>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e00e      	b.n	8001854 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b0f      	cmp	r3, #15
 800183a:	d80a      	bhi.n	8001852 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800183c:	2200      	movs	r2, #0
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001844:	f000 f92f 	bl	8001aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001848:	4a06      	ldr	r2, [pc, #24]	; (8001864 <HAL_InitTick+0x5c>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800184e:	2300      	movs	r3, #0
 8001850:	e000      	b.n	8001854 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000010 	.word	0x20000010
 8001860:	20000018 	.word	0x20000018
 8001864:	20000014 	.word	0x20000014

08001868 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_IncTick+0x20>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	461a      	mov	r2, r3
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_IncTick+0x24>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4413      	add	r3, r2
 8001878:	4a04      	ldr	r2, [pc, #16]	; (800188c <HAL_IncTick+0x24>)
 800187a:	6013      	str	r3, [r2, #0]
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20000018 	.word	0x20000018
 800188c:	200002f4 	.word	0x200002f4

08001890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return uwTick;
 8001894:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <HAL_GetTick+0x14>)
 8001896:	681b      	ldr	r3, [r3, #0]
}
 8001898:	4618      	mov	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	200002f4 	.word	0x200002f4

080018a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b0:	f7ff ffee 	bl	8001890 <HAL_GetTick>
 80018b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018c0:	d005      	beq.n	80018ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018c2:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <HAL_Delay+0x44>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	461a      	mov	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4413      	add	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ce:	bf00      	nop
 80018d0:	f7ff ffde 	bl	8001890 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d8f7      	bhi.n	80018d0 <HAL_Delay+0x28>
  {
  }
}
 80018e0:	bf00      	nop
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000018 	.word	0x20000018

080018f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <__NVIC_SetPriorityGrouping+0x40>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800190c:	4013      	ands	r3, r2
 800190e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <__NVIC_SetPriorityGrouping+0x44>)
 800191a:	4313      	orrs	r3, r2
 800191c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800191e:	4a04      	ldr	r2, [pc, #16]	; (8001930 <__NVIC_SetPriorityGrouping+0x40>)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	60d3      	str	r3, [r2, #12]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000ed00 	.word	0xe000ed00
 8001934:	05fa0000 	.word	0x05fa0000

08001938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800193c:	4b04      	ldr	r3, [pc, #16]	; (8001950 <__NVIC_GetPriorityGrouping+0x18>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	0a1b      	lsrs	r3, r3, #8
 8001942:	f003 0307 	and.w	r3, r3, #7
}
 8001946:	4618      	mov	r0, r3
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	2b00      	cmp	r3, #0
 8001964:	db0b      	blt.n	800197e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	f003 021f 	and.w	r2, r3, #31
 800196c:	4907      	ldr	r1, [pc, #28]	; (800198c <__NVIC_EnableIRQ+0x38>)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	095b      	lsrs	r3, r3, #5
 8001974:	2001      	movs	r0, #1
 8001976:	fa00 f202 	lsl.w	r2, r0, r2
 800197a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000e100 	.word	0xe000e100

08001990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	6039      	str	r1, [r7, #0]
 800199a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	db0a      	blt.n	80019ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	490c      	ldr	r1, [pc, #48]	; (80019dc <__NVIC_SetPriority+0x4c>)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	0112      	lsls	r2, r2, #4
 80019b0:	b2d2      	uxtb	r2, r2
 80019b2:	440b      	add	r3, r1
 80019b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b8:	e00a      	b.n	80019d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	4908      	ldr	r1, [pc, #32]	; (80019e0 <__NVIC_SetPriority+0x50>)
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	3b04      	subs	r3, #4
 80019c8:	0112      	lsls	r2, r2, #4
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	440b      	add	r3, r1
 80019ce:	761a      	strb	r2, [r3, #24]
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000e100 	.word	0xe000e100
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b089      	sub	sp, #36	; 0x24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f1c3 0307 	rsb	r3, r3, #7
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	bf28      	it	cs
 8001a02:	2304      	movcs	r3, #4
 8001a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	2b06      	cmp	r3, #6
 8001a0c:	d902      	bls.n	8001a14 <NVIC_EncodePriority+0x30>
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3b03      	subs	r3, #3
 8001a12:	e000      	b.n	8001a16 <NVIC_EncodePriority+0x32>
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43da      	mvns	r2, r3
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	401a      	ands	r2, r3
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	fa01 f303 	lsl.w	r3, r1, r3
 8001a36:	43d9      	mvns	r1, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a3c:	4313      	orrs	r3, r2
         );
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3724      	adds	r7, #36	; 0x24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
	...

08001a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a5c:	d301      	bcc.n	8001a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e00f      	b.n	8001a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a62:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <SysTick_Config+0x40>)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6a:	210f      	movs	r1, #15
 8001a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a70:	f7ff ff8e 	bl	8001990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <SysTick_Config+0x40>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7a:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <SysTick_Config+0x40>)
 8001a7c:	2207      	movs	r2, #7
 8001a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	e000e010 	.word	0xe000e010

08001a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ff29 	bl	80018f0 <__NVIC_SetPriorityGrouping>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	4603      	mov	r3, r0
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
 8001ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab8:	f7ff ff3e 	bl	8001938 <__NVIC_GetPriorityGrouping>
 8001abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	68b9      	ldr	r1, [r7, #8]
 8001ac2:	6978      	ldr	r0, [r7, #20]
 8001ac4:	f7ff ff8e 	bl	80019e4 <NVIC_EncodePriority>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ace:	4611      	mov	r1, r2
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff5d 	bl	8001990 <__NVIC_SetPriority>
}
 8001ad6:	bf00      	nop
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff31 	bl	8001954 <__NVIC_EnableIRQ>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff ffa2 	bl	8001a4c <SysTick_Config>
 8001b08:	4603      	mov	r3, r0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b084      	sub	sp, #16
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b20:	f7ff feb6 	bl	8001890 <HAL_GetTick>
 8001b24:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d008      	beq.n	8001b44 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2280      	movs	r2, #128	; 0x80
 8001b36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e052      	b.n	8001bea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0216 	bic.w	r2, r2, #22
 8001b52:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695a      	ldr	r2, [r3, #20]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b62:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d103      	bne.n	8001b74 <HAL_DMA_Abort+0x62>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d007      	beq.n	8001b84 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0208 	bic.w	r2, r2, #8
 8001b82:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0201 	bic.w	r2, r2, #1
 8001b92:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b94:	e013      	b.n	8001bbe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b96:	f7ff fe7b 	bl	8001890 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b05      	cmp	r3, #5
 8001ba2:	d90c      	bls.n	8001bbe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2203      	movs	r2, #3
 8001bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e015      	b.n	8001bea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1e4      	bne.n	8001b96 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd0:	223f      	movs	r2, #63	; 0x3f
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d004      	beq.n	8001c10 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2280      	movs	r2, #128	; 0x80
 8001c0a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e00c      	b.n	8001c2a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2205      	movs	r2, #5
 8001c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0201 	bic.w	r2, r2, #1
 8001c26:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b089      	sub	sp, #36	; 0x24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
 8001c56:	e175      	b.n	8001f44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c58:	2201      	movs	r2, #1
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	f040 8164 	bne.w	8001f3e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d005      	beq.n	8001c8e <HAL_GPIO_Init+0x56>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d130      	bne.n	8001cf0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	2203      	movs	r2, #3
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	091b      	lsrs	r3, r3, #4
 8001cda:	f003 0201 	and.w	r2, r3, #1
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	d017      	beq.n	8001d2c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	2203      	movs	r2, #3
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d123      	bne.n	8001d80 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	08da      	lsrs	r2, r3, #3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3208      	adds	r2, #8
 8001d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	220f      	movs	r2, #15
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	691a      	ldr	r2, [r3, #16]
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	08da      	lsrs	r2, r3, #3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3208      	adds	r2, #8
 8001d7a:	69b9      	ldr	r1, [r7, #24]
 8001d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 0203 	and.w	r2, r3, #3
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 80be 	beq.w	8001f3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc2:	4b66      	ldr	r3, [pc, #408]	; (8001f5c <HAL_GPIO_Init+0x324>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	4a65      	ldr	r2, [pc, #404]	; (8001f5c <HAL_GPIO_Init+0x324>)
 8001dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dce:	4b63      	ldr	r3, [pc, #396]	; (8001f5c <HAL_GPIO_Init+0x324>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001dda:	4a61      	ldr	r2, [pc, #388]	; (8001f60 <HAL_GPIO_Init+0x328>)
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	089b      	lsrs	r3, r3, #2
 8001de0:	3302      	adds	r3, #2
 8001de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	220f      	movs	r2, #15
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43db      	mvns	r3, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a58      	ldr	r2, [pc, #352]	; (8001f64 <HAL_GPIO_Init+0x32c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d037      	beq.n	8001e76 <HAL_GPIO_Init+0x23e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a57      	ldr	r2, [pc, #348]	; (8001f68 <HAL_GPIO_Init+0x330>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d031      	beq.n	8001e72 <HAL_GPIO_Init+0x23a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a56      	ldr	r2, [pc, #344]	; (8001f6c <HAL_GPIO_Init+0x334>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d02b      	beq.n	8001e6e <HAL_GPIO_Init+0x236>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a55      	ldr	r2, [pc, #340]	; (8001f70 <HAL_GPIO_Init+0x338>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d025      	beq.n	8001e6a <HAL_GPIO_Init+0x232>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a54      	ldr	r2, [pc, #336]	; (8001f74 <HAL_GPIO_Init+0x33c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d01f      	beq.n	8001e66 <HAL_GPIO_Init+0x22e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a53      	ldr	r2, [pc, #332]	; (8001f78 <HAL_GPIO_Init+0x340>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d019      	beq.n	8001e62 <HAL_GPIO_Init+0x22a>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a52      	ldr	r2, [pc, #328]	; (8001f7c <HAL_GPIO_Init+0x344>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d013      	beq.n	8001e5e <HAL_GPIO_Init+0x226>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a51      	ldr	r2, [pc, #324]	; (8001f80 <HAL_GPIO_Init+0x348>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d00d      	beq.n	8001e5a <HAL_GPIO_Init+0x222>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a50      	ldr	r2, [pc, #320]	; (8001f84 <HAL_GPIO_Init+0x34c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d007      	beq.n	8001e56 <HAL_GPIO_Init+0x21e>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a4f      	ldr	r2, [pc, #316]	; (8001f88 <HAL_GPIO_Init+0x350>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d101      	bne.n	8001e52 <HAL_GPIO_Init+0x21a>
 8001e4e:	2309      	movs	r3, #9
 8001e50:	e012      	b.n	8001e78 <HAL_GPIO_Init+0x240>
 8001e52:	230a      	movs	r3, #10
 8001e54:	e010      	b.n	8001e78 <HAL_GPIO_Init+0x240>
 8001e56:	2308      	movs	r3, #8
 8001e58:	e00e      	b.n	8001e78 <HAL_GPIO_Init+0x240>
 8001e5a:	2307      	movs	r3, #7
 8001e5c:	e00c      	b.n	8001e78 <HAL_GPIO_Init+0x240>
 8001e5e:	2306      	movs	r3, #6
 8001e60:	e00a      	b.n	8001e78 <HAL_GPIO_Init+0x240>
 8001e62:	2305      	movs	r3, #5
 8001e64:	e008      	b.n	8001e78 <HAL_GPIO_Init+0x240>
 8001e66:	2304      	movs	r3, #4
 8001e68:	e006      	b.n	8001e78 <HAL_GPIO_Init+0x240>
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e004      	b.n	8001e78 <HAL_GPIO_Init+0x240>
 8001e6e:	2302      	movs	r3, #2
 8001e70:	e002      	b.n	8001e78 <HAL_GPIO_Init+0x240>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <HAL_GPIO_Init+0x240>
 8001e76:	2300      	movs	r3, #0
 8001e78:	69fa      	ldr	r2, [r7, #28]
 8001e7a:	f002 0203 	and.w	r2, r2, #3
 8001e7e:	0092      	lsls	r2, r2, #2
 8001e80:	4093      	lsls	r3, r2
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e88:	4935      	ldr	r1, [pc, #212]	; (8001f60 <HAL_GPIO_Init+0x328>)
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	089b      	lsrs	r3, r3, #2
 8001e8e:	3302      	adds	r3, #2
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e96:	4b3d      	ldr	r3, [pc, #244]	; (8001f8c <HAL_GPIO_Init+0x354>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eba:	4a34      	ldr	r2, [pc, #208]	; (8001f8c <HAL_GPIO_Init+0x354>)
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ec0:	4b32      	ldr	r3, [pc, #200]	; (8001f8c <HAL_GPIO_Init+0x354>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ee4:	4a29      	ldr	r2, [pc, #164]	; (8001f8c <HAL_GPIO_Init+0x354>)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eea:	4b28      	ldr	r3, [pc, #160]	; (8001f8c <HAL_GPIO_Init+0x354>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f0e:	4a1f      	ldr	r2, [pc, #124]	; (8001f8c <HAL_GPIO_Init+0x354>)
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f14:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <HAL_GPIO_Init+0x354>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f38:	4a14      	ldr	r2, [pc, #80]	; (8001f8c <HAL_GPIO_Init+0x354>)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3301      	adds	r3, #1
 8001f42:	61fb      	str	r3, [r7, #28]
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	2b0f      	cmp	r3, #15
 8001f48:	f67f ae86 	bls.w	8001c58 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f4c:	bf00      	nop
 8001f4e:	bf00      	nop
 8001f50:	3724      	adds	r7, #36	; 0x24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40013800 	.word	0x40013800
 8001f64:	40020000 	.word	0x40020000
 8001f68:	40020400 	.word	0x40020400
 8001f6c:	40020800 	.word	0x40020800
 8001f70:	40020c00 	.word	0x40020c00
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40021400 	.word	0x40021400
 8001f7c:	40021800 	.word	0x40021800
 8001f80:	40021c00 	.word	0x40021c00
 8001f84:	40022000 	.word	0x40022000
 8001f88:	40022400 	.word	0x40022400
 8001f8c:	40013c00 	.word	0x40013c00

08001f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	807b      	strh	r3, [r7, #2]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fa0:	787b      	ldrb	r3, [r7, #1]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fa6:	887a      	ldrh	r2, [r7, #2]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001fac:	e003      	b.n	8001fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001fae:	887b      	ldrh	r3, [r7, #2]
 8001fb0:	041a      	lsls	r2, r3, #16
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	619a      	str	r2, [r3, #24]
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e291      	b.n	80024fe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 8087 	beq.w	80020f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fe8:	4b96      	ldr	r3, [pc, #600]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 030c 	and.w	r3, r3, #12
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d00c      	beq.n	800200e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ff4:	4b93      	ldr	r3, [pc, #588]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 030c 	and.w	r3, r3, #12
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d112      	bne.n	8002026 <HAL_RCC_OscConfig+0x62>
 8002000:	4b90      	ldr	r3, [pc, #576]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002008:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800200c:	d10b      	bne.n	8002026 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200e:	4b8d      	ldr	r3, [pc, #564]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d06c      	beq.n	80020f4 <HAL_RCC_OscConfig+0x130>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d168      	bne.n	80020f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e26b      	b.n	80024fe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800202e:	d106      	bne.n	800203e <HAL_RCC_OscConfig+0x7a>
 8002030:	4b84      	ldr	r3, [pc, #528]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a83      	ldr	r2, [pc, #524]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 8002036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	e02e      	b.n	800209c <HAL_RCC_OscConfig+0xd8>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10c      	bne.n	8002060 <HAL_RCC_OscConfig+0x9c>
 8002046:	4b7f      	ldr	r3, [pc, #508]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a7e      	ldr	r2, [pc, #504]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 800204c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	4b7c      	ldr	r3, [pc, #496]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a7b      	ldr	r2, [pc, #492]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 8002058:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	e01d      	b.n	800209c <HAL_RCC_OscConfig+0xd8>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002068:	d10c      	bne.n	8002084 <HAL_RCC_OscConfig+0xc0>
 800206a:	4b76      	ldr	r3, [pc, #472]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a75      	ldr	r2, [pc, #468]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 8002070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	4b73      	ldr	r3, [pc, #460]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a72      	ldr	r2, [pc, #456]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 800207c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	e00b      	b.n	800209c <HAL_RCC_OscConfig+0xd8>
 8002084:	4b6f      	ldr	r3, [pc, #444]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a6e      	ldr	r2, [pc, #440]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 800208a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	4b6c      	ldr	r3, [pc, #432]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a6b      	ldr	r2, [pc, #428]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 8002096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800209a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d013      	beq.n	80020cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7ff fbf4 	bl	8001890 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ac:	f7ff fbf0 	bl	8001890 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b64      	cmp	r3, #100	; 0x64
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e21f      	b.n	80024fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	4b61      	ldr	r3, [pc, #388]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0xe8>
 80020ca:	e014      	b.n	80020f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020cc:	f7ff fbe0 	bl	8001890 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d4:	f7ff fbdc 	bl	8001890 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b64      	cmp	r3, #100	; 0x64
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e20b      	b.n	80024fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e6:	4b57      	ldr	r3, [pc, #348]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x110>
 80020f2:	e000      	b.n	80020f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d069      	beq.n	80021d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002102:	4b50      	ldr	r3, [pc, #320]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00b      	beq.n	8002126 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800210e:	4b4d      	ldr	r3, [pc, #308]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b08      	cmp	r3, #8
 8002118:	d11c      	bne.n	8002154 <HAL_RCC_OscConfig+0x190>
 800211a:	4b4a      	ldr	r3, [pc, #296]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d116      	bne.n	8002154 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002126:	4b47      	ldr	r3, [pc, #284]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d005      	beq.n	800213e <HAL_RCC_OscConfig+0x17a>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d001      	beq.n	800213e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e1df      	b.n	80024fe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213e:	4b41      	ldr	r3, [pc, #260]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	493d      	ldr	r1, [pc, #244]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 800214e:	4313      	orrs	r3, r2
 8002150:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002152:	e040      	b.n	80021d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d023      	beq.n	80021a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800215c:	4b39      	ldr	r3, [pc, #228]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a38      	ldr	r2, [pc, #224]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002168:	f7ff fb92 	bl	8001890 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002170:	f7ff fb8e 	bl	8001890 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e1bd      	b.n	80024fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002182:	4b30      	ldr	r3, [pc, #192]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218e:	4b2d      	ldr	r3, [pc, #180]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4929      	ldr	r1, [pc, #164]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]
 80021a2:	e018      	b.n	80021d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a4:	4b27      	ldr	r3, [pc, #156]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a26      	ldr	r2, [pc, #152]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 80021aa:	f023 0301 	bic.w	r3, r3, #1
 80021ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b0:	f7ff fb6e 	bl	8001890 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b8:	f7ff fb6a 	bl	8001890 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e199      	b.n	80024fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ca:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d038      	beq.n	8002254 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d019      	beq.n	800221e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ea:	4b16      	ldr	r3, [pc, #88]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 80021ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ee:	4a15      	ldr	r2, [pc, #84]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f6:	f7ff fb4b 	bl	8001890 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021fe:	f7ff fb47 	bl	8001890 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e176      	b.n	80024fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 8002212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x23a>
 800221c:	e01a      	b.n	8002254 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800221e:	4b09      	ldr	r3, [pc, #36]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 8002220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002222:	4a08      	ldr	r2, [pc, #32]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 8002224:	f023 0301 	bic.w	r3, r3, #1
 8002228:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222a:	f7ff fb31 	bl	8001890 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002230:	e00a      	b.n	8002248 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002232:	f7ff fb2d 	bl	8001890 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d903      	bls.n	8002248 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e15c      	b.n	80024fe <HAL_RCC_OscConfig+0x53a>
 8002244:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002248:	4b91      	ldr	r3, [pc, #580]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 800224a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1ee      	bne.n	8002232 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 80a4 	beq.w	80023aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002262:	4b8b      	ldr	r3, [pc, #556]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10d      	bne.n	800228a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800226e:	4b88      	ldr	r3, [pc, #544]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	4a87      	ldr	r2, [pc, #540]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 8002274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002278:	6413      	str	r3, [r2, #64]	; 0x40
 800227a:	4b85      	ldr	r3, [pc, #532]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002282:	60bb      	str	r3, [r7, #8]
 8002284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002286:	2301      	movs	r3, #1
 8002288:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800228a:	4b82      	ldr	r3, [pc, #520]	; (8002494 <HAL_RCC_OscConfig+0x4d0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002292:	2b00      	cmp	r3, #0
 8002294:	d118      	bne.n	80022c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002296:	4b7f      	ldr	r3, [pc, #508]	; (8002494 <HAL_RCC_OscConfig+0x4d0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a7e      	ldr	r2, [pc, #504]	; (8002494 <HAL_RCC_OscConfig+0x4d0>)
 800229c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022a2:	f7ff faf5 	bl	8001890 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022aa:	f7ff faf1 	bl	8001890 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b64      	cmp	r3, #100	; 0x64
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e120      	b.n	80024fe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022bc:	4b75      	ldr	r3, [pc, #468]	; (8002494 <HAL_RCC_OscConfig+0x4d0>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0f0      	beq.n	80022aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d106      	bne.n	80022de <HAL_RCC_OscConfig+0x31a>
 80022d0:	4b6f      	ldr	r3, [pc, #444]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 80022d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d4:	4a6e      	ldr	r2, [pc, #440]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	6713      	str	r3, [r2, #112]	; 0x70
 80022dc:	e02d      	b.n	800233a <HAL_RCC_OscConfig+0x376>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10c      	bne.n	8002300 <HAL_RCC_OscConfig+0x33c>
 80022e6:	4b6a      	ldr	r3, [pc, #424]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 80022e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ea:	4a69      	ldr	r2, [pc, #420]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 80022ec:	f023 0301 	bic.w	r3, r3, #1
 80022f0:	6713      	str	r3, [r2, #112]	; 0x70
 80022f2:	4b67      	ldr	r3, [pc, #412]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 80022f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f6:	4a66      	ldr	r2, [pc, #408]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 80022f8:	f023 0304 	bic.w	r3, r3, #4
 80022fc:	6713      	str	r3, [r2, #112]	; 0x70
 80022fe:	e01c      	b.n	800233a <HAL_RCC_OscConfig+0x376>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2b05      	cmp	r3, #5
 8002306:	d10c      	bne.n	8002322 <HAL_RCC_OscConfig+0x35e>
 8002308:	4b61      	ldr	r3, [pc, #388]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 800230a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230c:	4a60      	ldr	r2, [pc, #384]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 800230e:	f043 0304 	orr.w	r3, r3, #4
 8002312:	6713      	str	r3, [r2, #112]	; 0x70
 8002314:	4b5e      	ldr	r3, [pc, #376]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 8002316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002318:	4a5d      	ldr	r2, [pc, #372]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	6713      	str	r3, [r2, #112]	; 0x70
 8002320:	e00b      	b.n	800233a <HAL_RCC_OscConfig+0x376>
 8002322:	4b5b      	ldr	r3, [pc, #364]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 8002324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002326:	4a5a      	ldr	r2, [pc, #360]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 8002328:	f023 0301 	bic.w	r3, r3, #1
 800232c:	6713      	str	r3, [r2, #112]	; 0x70
 800232e:	4b58      	ldr	r3, [pc, #352]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 8002330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002332:	4a57      	ldr	r2, [pc, #348]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 8002334:	f023 0304 	bic.w	r3, r3, #4
 8002338:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d015      	beq.n	800236e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002342:	f7ff faa5 	bl	8001890 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002348:	e00a      	b.n	8002360 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234a:	f7ff faa1 	bl	8001890 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	f241 3288 	movw	r2, #5000	; 0x1388
 8002358:	4293      	cmp	r3, r2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e0ce      	b.n	80024fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002360:	4b4b      	ldr	r3, [pc, #300]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 8002362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0ee      	beq.n	800234a <HAL_RCC_OscConfig+0x386>
 800236c:	e014      	b.n	8002398 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236e:	f7ff fa8f 	bl	8001890 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002374:	e00a      	b.n	800238c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002376:	f7ff fa8b 	bl	8001890 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	f241 3288 	movw	r2, #5000	; 0x1388
 8002384:	4293      	cmp	r3, r2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e0b8      	b.n	80024fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800238c:	4b40      	ldr	r3, [pc, #256]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 800238e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1ee      	bne.n	8002376 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002398:	7dfb      	ldrb	r3, [r7, #23]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d105      	bne.n	80023aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800239e:	4b3c      	ldr	r3, [pc, #240]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	4a3b      	ldr	r2, [pc, #236]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 80023a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 80a4 	beq.w	80024fc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023b4:	4b36      	ldr	r3, [pc, #216]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 030c 	and.w	r3, r3, #12
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d06b      	beq.n	8002498 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d149      	bne.n	800245c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c8:	4b31      	ldr	r3, [pc, #196]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a30      	ldr	r2, [pc, #192]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 80023ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d4:	f7ff fa5c 	bl	8001890 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023dc:	f7ff fa58 	bl	8001890 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e087      	b.n	80024fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ee:	4b28      	ldr	r3, [pc, #160]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69da      	ldr	r2, [r3, #28]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	019b      	lsls	r3, r3, #6
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002410:	085b      	lsrs	r3, r3, #1
 8002412:	3b01      	subs	r3, #1
 8002414:	041b      	lsls	r3, r3, #16
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241c:	061b      	lsls	r3, r3, #24
 800241e:	4313      	orrs	r3, r2
 8002420:	4a1b      	ldr	r2, [pc, #108]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 8002422:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002426:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002428:	4b19      	ldr	r3, [pc, #100]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a18      	ldr	r2, [pc, #96]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 800242e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002434:	f7ff fa2c 	bl	8001890 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243c:	f7ff fa28 	bl	8001890 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e057      	b.n	80024fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244e:	4b10      	ldr	r3, [pc, #64]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0f0      	beq.n	800243c <HAL_RCC_OscConfig+0x478>
 800245a:	e04f      	b.n	80024fc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a0b      	ldr	r2, [pc, #44]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 8002462:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002468:	f7ff fa12 	bl	8001890 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002470:	f7ff fa0e 	bl	8001890 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e03d      	b.n	80024fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002482:	4b03      	ldr	r3, [pc, #12]	; (8002490 <HAL_RCC_OscConfig+0x4cc>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f0      	bne.n	8002470 <HAL_RCC_OscConfig+0x4ac>
 800248e:	e035      	b.n	80024fc <HAL_RCC_OscConfig+0x538>
 8002490:	40023800 	.word	0x40023800
 8002494:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002498:	4b1b      	ldr	r3, [pc, #108]	; (8002508 <HAL_RCC_OscConfig+0x544>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d028      	beq.n	80024f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d121      	bne.n	80024f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024be:	429a      	cmp	r2, r3
 80024c0:	d11a      	bne.n	80024f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024c8:	4013      	ands	r3, r2
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024ce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d111      	bne.n	80024f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024de:	085b      	lsrs	r3, r3, #1
 80024e0:	3b01      	subs	r3, #1
 80024e2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d107      	bne.n	80024f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d001      	beq.n	80024fc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e000      	b.n	80024fe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40023800 	.word	0x40023800

0800250c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e0d0      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002524:	4b6a      	ldr	r3, [pc, #424]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 030f 	and.w	r3, r3, #15
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d910      	bls.n	8002554 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002532:	4b67      	ldr	r3, [pc, #412]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 020f 	bic.w	r2, r3, #15
 800253a:	4965      	ldr	r1, [pc, #404]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	4313      	orrs	r3, r2
 8002540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002542:	4b63      	ldr	r3, [pc, #396]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d001      	beq.n	8002554 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0b8      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d020      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800256c:	4b59      	ldr	r3, [pc, #356]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	4a58      	ldr	r2, [pc, #352]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002572:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002576:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002584:	4b53      	ldr	r3, [pc, #332]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	4a52      	ldr	r2, [pc, #328]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 800258a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800258e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002590:	4b50      	ldr	r3, [pc, #320]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	494d      	ldr	r1, [pc, #308]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d040      	beq.n	8002630 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d107      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b6:	4b47      	ldr	r3, [pc, #284]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d115      	bne.n	80025ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e07f      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d107      	bne.n	80025de <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ce:	4b41      	ldr	r3, [pc, #260]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d109      	bne.n	80025ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e073      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025de:	4b3d      	ldr	r3, [pc, #244]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e06b      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ee:	4b39      	ldr	r3, [pc, #228]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f023 0203 	bic.w	r2, r3, #3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	4936      	ldr	r1, [pc, #216]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002600:	f7ff f946 	bl	8001890 <HAL_GetTick>
 8002604:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002606:	e00a      	b.n	800261e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002608:	f7ff f942 	bl	8001890 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f241 3288 	movw	r2, #5000	; 0x1388
 8002616:	4293      	cmp	r3, r2
 8002618:	d901      	bls.n	800261e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e053      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261e:	4b2d      	ldr	r3, [pc, #180]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 020c 	and.w	r2, r3, #12
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	429a      	cmp	r2, r3
 800262e:	d1eb      	bne.n	8002608 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002630:	4b27      	ldr	r3, [pc, #156]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 030f 	and.w	r3, r3, #15
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d210      	bcs.n	8002660 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263e:	4b24      	ldr	r3, [pc, #144]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f023 020f 	bic.w	r2, r3, #15
 8002646:	4922      	ldr	r1, [pc, #136]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	4313      	orrs	r3, r2
 800264c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264e:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e032      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800266c:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4916      	ldr	r1, [pc, #88]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 800267a:	4313      	orrs	r3, r2
 800267c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d009      	beq.n	800269e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800268a:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	490e      	ldr	r1, [pc, #56]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 800269a:	4313      	orrs	r3, r2
 800269c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800269e:	f000 f821 	bl	80026e4 <HAL_RCC_GetSysClockFreq>
 80026a2:	4602      	mov	r2, r0
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	490a      	ldr	r1, [pc, #40]	; (80026d8 <HAL_RCC_ClockConfig+0x1cc>)
 80026b0:	5ccb      	ldrb	r3, [r1, r3]
 80026b2:	fa22 f303 	lsr.w	r3, r2, r3
 80026b6:	4a09      	ldr	r2, [pc, #36]	; (80026dc <HAL_RCC_ClockConfig+0x1d0>)
 80026b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026ba:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <HAL_RCC_ClockConfig+0x1d4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff f8a2 	bl	8001808 <HAL_InitTick>

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40023c00 	.word	0x40023c00
 80026d4:	40023800 	.word	0x40023800
 80026d8:	08005010 	.word	0x08005010
 80026dc:	20000010 	.word	0x20000010
 80026e0:	20000014 	.word	0x20000014

080026e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026e8:	b090      	sub	sp, #64	; 0x40
 80026ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	637b      	str	r3, [r7, #52]	; 0x34
 80026f0:	2300      	movs	r3, #0
 80026f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026f4:	2300      	movs	r3, #0
 80026f6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026fc:	4b59      	ldr	r3, [pc, #356]	; (8002864 <HAL_RCC_GetSysClockFreq+0x180>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 030c 	and.w	r3, r3, #12
 8002704:	2b08      	cmp	r3, #8
 8002706:	d00d      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0x40>
 8002708:	2b08      	cmp	r3, #8
 800270a:	f200 80a1 	bhi.w	8002850 <HAL_RCC_GetSysClockFreq+0x16c>
 800270e:	2b00      	cmp	r3, #0
 8002710:	d002      	beq.n	8002718 <HAL_RCC_GetSysClockFreq+0x34>
 8002712:	2b04      	cmp	r3, #4
 8002714:	d003      	beq.n	800271e <HAL_RCC_GetSysClockFreq+0x3a>
 8002716:	e09b      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002718:	4b53      	ldr	r3, [pc, #332]	; (8002868 <HAL_RCC_GetSysClockFreq+0x184>)
 800271a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800271c:	e09b      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800271e:	4b53      	ldr	r3, [pc, #332]	; (800286c <HAL_RCC_GetSysClockFreq+0x188>)
 8002720:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002722:	e098      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002724:	4b4f      	ldr	r3, [pc, #316]	; (8002864 <HAL_RCC_GetSysClockFreq+0x180>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800272c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800272e:	4b4d      	ldr	r3, [pc, #308]	; (8002864 <HAL_RCC_GetSysClockFreq+0x180>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d028      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800273a:	4b4a      	ldr	r3, [pc, #296]	; (8002864 <HAL_RCC_GetSysClockFreq+0x180>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	099b      	lsrs	r3, r3, #6
 8002740:	2200      	movs	r2, #0
 8002742:	623b      	str	r3, [r7, #32]
 8002744:	627a      	str	r2, [r7, #36]	; 0x24
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800274c:	2100      	movs	r1, #0
 800274e:	4b47      	ldr	r3, [pc, #284]	; (800286c <HAL_RCC_GetSysClockFreq+0x188>)
 8002750:	fb03 f201 	mul.w	r2, r3, r1
 8002754:	2300      	movs	r3, #0
 8002756:	fb00 f303 	mul.w	r3, r0, r3
 800275a:	4413      	add	r3, r2
 800275c:	4a43      	ldr	r2, [pc, #268]	; (800286c <HAL_RCC_GetSysClockFreq+0x188>)
 800275e:	fba0 1202 	umull	r1, r2, r0, r2
 8002762:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002764:	460a      	mov	r2, r1
 8002766:	62ba      	str	r2, [r7, #40]	; 0x28
 8002768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800276a:	4413      	add	r3, r2
 800276c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800276e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002770:	2200      	movs	r2, #0
 8002772:	61bb      	str	r3, [r7, #24]
 8002774:	61fa      	str	r2, [r7, #28]
 8002776:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800277a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800277e:	f7fd fdaf 	bl	80002e0 <__aeabi_uldivmod>
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	4613      	mov	r3, r2
 8002788:	63fb      	str	r3, [r7, #60]	; 0x3c
 800278a:	e053      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800278c:	4b35      	ldr	r3, [pc, #212]	; (8002864 <HAL_RCC_GetSysClockFreq+0x180>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	099b      	lsrs	r3, r3, #6
 8002792:	2200      	movs	r2, #0
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	617a      	str	r2, [r7, #20]
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800279e:	f04f 0b00 	mov.w	fp, #0
 80027a2:	4652      	mov	r2, sl
 80027a4:	465b      	mov	r3, fp
 80027a6:	f04f 0000 	mov.w	r0, #0
 80027aa:	f04f 0100 	mov.w	r1, #0
 80027ae:	0159      	lsls	r1, r3, #5
 80027b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027b4:	0150      	lsls	r0, r2, #5
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	ebb2 080a 	subs.w	r8, r2, sl
 80027be:	eb63 090b 	sbc.w	r9, r3, fp
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027d6:	ebb2 0408 	subs.w	r4, r2, r8
 80027da:	eb63 0509 	sbc.w	r5, r3, r9
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	00eb      	lsls	r3, r5, #3
 80027e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027ec:	00e2      	lsls	r2, r4, #3
 80027ee:	4614      	mov	r4, r2
 80027f0:	461d      	mov	r5, r3
 80027f2:	eb14 030a 	adds.w	r3, r4, sl
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	eb45 030b 	adc.w	r3, r5, fp
 80027fc:	607b      	str	r3, [r7, #4]
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	f04f 0300 	mov.w	r3, #0
 8002806:	e9d7 4500 	ldrd	r4, r5, [r7]
 800280a:	4629      	mov	r1, r5
 800280c:	028b      	lsls	r3, r1, #10
 800280e:	4621      	mov	r1, r4
 8002810:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002814:	4621      	mov	r1, r4
 8002816:	028a      	lsls	r2, r1, #10
 8002818:	4610      	mov	r0, r2
 800281a:	4619      	mov	r1, r3
 800281c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800281e:	2200      	movs	r2, #0
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	60fa      	str	r2, [r7, #12]
 8002824:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002828:	f7fd fd5a 	bl	80002e0 <__aeabi_uldivmod>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4613      	mov	r3, r2
 8002832:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002834:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <HAL_RCC_GetSysClockFreq+0x180>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	0c1b      	lsrs	r3, r3, #16
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	3301      	adds	r3, #1
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002844:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002848:	fbb2 f3f3 	udiv	r3, r2, r3
 800284c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800284e:	e002      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_RCC_GetSysClockFreq+0x184>)
 8002852:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002854:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002858:	4618      	mov	r0, r3
 800285a:	3740      	adds	r7, #64	; 0x40
 800285c:	46bd      	mov	sp, r7
 800285e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800
 8002868:	00f42400 	.word	0x00f42400
 800286c:	017d7840 	.word	0x017d7840

08002870 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002874:	4b03      	ldr	r3, [pc, #12]	; (8002884 <HAL_RCC_GetHCLKFreq+0x14>)
 8002876:	681b      	ldr	r3, [r3, #0]
}
 8002878:	4618      	mov	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	20000010 	.word	0x20000010

08002888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800288c:	f7ff fff0 	bl	8002870 <HAL_RCC_GetHCLKFreq>
 8002890:	4602      	mov	r2, r0
 8002892:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	0a9b      	lsrs	r3, r3, #10
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	4903      	ldr	r1, [pc, #12]	; (80028ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800289e:	5ccb      	ldrb	r3, [r1, r3]
 80028a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40023800 	.word	0x40023800
 80028ac:	08005020 	.word	0x08005020

080028b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028b4:	f7ff ffdc 	bl	8002870 <HAL_RCC_GetHCLKFreq>
 80028b8:	4602      	mov	r2, r0
 80028ba:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	0b5b      	lsrs	r3, r3, #13
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	4903      	ldr	r1, [pc, #12]	; (80028d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028c6:	5ccb      	ldrb	r3, [r1, r3]
 80028c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40023800 	.word	0x40023800
 80028d4:	08005020 	.word	0x08005020

080028d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80028f0:	2300      	movs	r3, #0
 80028f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d012      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002900:	4b69      	ldr	r3, [pc, #420]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	4a68      	ldr	r2, [pc, #416]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002906:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800290a:	6093      	str	r3, [r2, #8]
 800290c:	4b66      	ldr	r3, [pc, #408]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002914:	4964      	ldr	r1, [pc, #400]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002916:	4313      	orrs	r3, r2
 8002918:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002922:	2301      	movs	r3, #1
 8002924:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d017      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002932:	4b5d      	ldr	r3, [pc, #372]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002938:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002940:	4959      	ldr	r1, [pc, #356]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002942:	4313      	orrs	r3, r2
 8002944:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002950:	d101      	bne.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002952:	2301      	movs	r3, #1
 8002954:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800295e:	2301      	movs	r3, #1
 8002960:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d017      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800296e:	4b4e      	ldr	r3, [pc, #312]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002970:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002974:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	494a      	ldr	r1, [pc, #296]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800298c:	d101      	bne.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800298e:	2301      	movs	r3, #1
 8002990:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800299a:	2301      	movs	r3, #1
 800299c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80029aa:	2301      	movs	r3, #1
 80029ac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0320 	and.w	r3, r3, #32
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 808b 	beq.w	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80029bc:	4b3a      	ldr	r3, [pc, #232]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	4a39      	ldr	r2, [pc, #228]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c6:	6413      	str	r3, [r2, #64]	; 0x40
 80029c8:	4b37      	ldr	r3, [pc, #220]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029d4:	4b35      	ldr	r3, [pc, #212]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a34      	ldr	r2, [pc, #208]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029e0:	f7fe ff56 	bl	8001890 <HAL_GetTick>
 80029e4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e8:	f7fe ff52 	bl	8001890 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b64      	cmp	r3, #100	; 0x64
 80029f4:	d901      	bls.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e357      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029fa:	4b2c      	ldr	r3, [pc, #176]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f0      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a06:	4b28      	ldr	r3, [pc, #160]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a0e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d035      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d02e      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a24:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a2c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a2e:	4b1e      	ldr	r3, [pc, #120]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a32:	4a1d      	ldr	r2, [pc, #116]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a38:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a3a:	4b1b      	ldr	r3, [pc, #108]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3e:	4a1a      	ldr	r2, [pc, #104]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a44:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002a46:	4a18      	ldr	r2, [pc, #96]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a4c:	4b16      	ldr	r3, [pc, #88]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d114      	bne.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a58:	f7fe ff1a 	bl	8001890 <HAL_GetTick>
 8002a5c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5e:	e00a      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a60:	f7fe ff16 	bl	8001890 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e319      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a76:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0ee      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a8e:	d111      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a9c:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a9e:	400b      	ands	r3, r1
 8002aa0:	4901      	ldr	r1, [pc, #4]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
 8002aa6:	e00b      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40007000 	.word	0x40007000
 8002ab0:	0ffffcff 	.word	0x0ffffcff
 8002ab4:	4baa      	ldr	r3, [pc, #680]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	4aa9      	ldr	r2, [pc, #676]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002abe:	6093      	str	r3, [r2, #8]
 8002ac0:	4ba7      	ldr	r3, [pc, #668]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ac2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002acc:	49a4      	ldr	r1, [pc, #656]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0310 	and.w	r3, r3, #16
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d010      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ade:	4ba0      	ldr	r3, [pc, #640]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ae4:	4a9e      	ldr	r2, [pc, #632]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002aee:	4b9c      	ldr	r3, [pc, #624]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002af0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	4999      	ldr	r1, [pc, #612]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00a      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b0c:	4b94      	ldr	r3, [pc, #592]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b1a:	4991      	ldr	r1, [pc, #580]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00a      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b2e:	4b8c      	ldr	r3, [pc, #560]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b3c:	4988      	ldr	r1, [pc, #544]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00a      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b50:	4b83      	ldr	r3, [pc, #524]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b5e:	4980      	ldr	r1, [pc, #512]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b72:	4b7b      	ldr	r3, [pc, #492]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b80:	4977      	ldr	r1, [pc, #476]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00a      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b94:	4b72      	ldr	r3, [pc, #456]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9a:	f023 0203 	bic.w	r2, r3, #3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba2:	496f      	ldr	r1, [pc, #444]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bb6:	4b6a      	ldr	r3, [pc, #424]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bbc:	f023 020c 	bic.w	r2, r3, #12
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc4:	4966      	ldr	r1, [pc, #408]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00a      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bd8:	4b61      	ldr	r3, [pc, #388]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bde:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be6:	495e      	ldr	r1, [pc, #376]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bfa:	4b59      	ldr	r3, [pc, #356]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c00:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c08:	4955      	ldr	r1, [pc, #340]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00a      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c1c:	4b50      	ldr	r3, [pc, #320]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2a:	494d      	ldr	r1, [pc, #308]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00a      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002c3e:	4b48      	ldr	r3, [pc, #288]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c44:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4c:	4944      	ldr	r1, [pc, #272]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00a      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c60:	4b3f      	ldr	r3, [pc, #252]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6e:	493c      	ldr	r1, [pc, #240]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00a      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c82:	4b37      	ldr	r3, [pc, #220]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c90:	4933      	ldr	r1, [pc, #204]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00a      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ca4:	4b2e      	ldr	r3, [pc, #184]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002caa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cb2:	492b      	ldr	r1, [pc, #172]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d011      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002cc6:	4b26      	ldr	r3, [pc, #152]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ccc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cd4:	4922      	ldr	r1, [pc, #136]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ce0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ce4:	d101      	bne.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d06:	4b16      	ldr	r3, [pc, #88]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d14:	4912      	ldr	r1, [pc, #72]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00b      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d28:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d38:	4909      	ldr	r1, [pc, #36]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d006      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 80d9 	beq.w	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d54:	4b02      	ldr	r3, [pc, #8]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a01      	ldr	r2, [pc, #4]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d5e:	e001      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002d60:	40023800 	.word	0x40023800
 8002d64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d66:	f7fe fd93 	bl	8001890 <HAL_GetTick>
 8002d6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d6e:	f7fe fd8f 	bl	8001890 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b64      	cmp	r3, #100	; 0x64
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e194      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d80:	4b6c      	ldr	r3, [pc, #432]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1f0      	bne.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d021      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d11d      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002da0:	4b64      	ldr	r3, [pc, #400]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002da6:	0c1b      	lsrs	r3, r3, #16
 8002da8:	f003 0303 	and.w	r3, r3, #3
 8002dac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002dae:	4b61      	ldr	r3, [pc, #388]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002db4:	0e1b      	lsrs	r3, r3, #24
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	019a      	lsls	r2, r3, #6
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	041b      	lsls	r3, r3, #16
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	061b      	lsls	r3, r3, #24
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	071b      	lsls	r3, r3, #28
 8002dd4:	4957      	ldr	r1, [pc, #348]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d004      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002df0:	d00a      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d02e      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e06:	d129      	bne.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e08:	4b4a      	ldr	r3, [pc, #296]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e0e:	0c1b      	lsrs	r3, r3, #16
 8002e10:	f003 0303 	and.w	r3, r3, #3
 8002e14:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e16:	4b47      	ldr	r3, [pc, #284]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e1c:	0f1b      	lsrs	r3, r3, #28
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	019a      	lsls	r2, r3, #6
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	041b      	lsls	r3, r3, #16
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	061b      	lsls	r3, r3, #24
 8002e36:	431a      	orrs	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	071b      	lsls	r3, r3, #28
 8002e3c:	493d      	ldr	r1, [pc, #244]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e44:	4b3b      	ldr	r3, [pc, #236]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e4a:	f023 021f 	bic.w	r2, r3, #31
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	3b01      	subs	r3, #1
 8002e54:	4937      	ldr	r1, [pc, #220]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d01d      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e68:	4b32      	ldr	r3, [pc, #200]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e6e:	0e1b      	lsrs	r3, r3, #24
 8002e70:	f003 030f 	and.w	r3, r3, #15
 8002e74:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e76:	4b2f      	ldr	r3, [pc, #188]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e7c:	0f1b      	lsrs	r3, r3, #28
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	019a      	lsls	r2, r3, #6
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	041b      	lsls	r3, r3, #16
 8002e90:	431a      	orrs	r2, r3
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	061b      	lsls	r3, r3, #24
 8002e96:	431a      	orrs	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	071b      	lsls	r3, r3, #28
 8002e9c:	4925      	ldr	r1, [pc, #148]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d011      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	019a      	lsls	r2, r3, #6
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	041b      	lsls	r3, r3, #16
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	061b      	lsls	r3, r3, #24
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	071b      	lsls	r3, r3, #28
 8002ecc:	4919      	ldr	r1, [pc, #100]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ed4:	4b17      	ldr	r3, [pc, #92]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a16      	ldr	r2, [pc, #88]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eda:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ede:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ee0:	f7fe fcd6 	bl	8001890 <HAL_GetTick>
 8002ee4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ee8:	f7fe fcd2 	bl	8001890 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b64      	cmp	r3, #100	; 0x64
 8002ef4:	d901      	bls.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e0d7      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002efa:	4b0e      	ldr	r3, [pc, #56]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	f040 80cd 	bne.w	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f0e:	4b09      	ldr	r3, [pc, #36]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a08      	ldr	r2, [pc, #32]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f1a:	f7fe fcb9 	bl	8001890 <HAL_GetTick>
 8002f1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f20:	e00a      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f22:	f7fe fcb5 	bl	8001890 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b64      	cmp	r3, #100	; 0x64
 8002f2e:	d903      	bls.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e0ba      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002f34:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f38:	4b5e      	ldr	r3, [pc, #376]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f44:	d0ed      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d009      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d02e      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d12a      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f6e:	4b51      	ldr	r3, [pc, #324]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f74:	0c1b      	lsrs	r3, r3, #16
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f7c:	4b4d      	ldr	r3, [pc, #308]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f82:	0f1b      	lsrs	r3, r3, #28
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	019a      	lsls	r2, r3, #6
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	041b      	lsls	r3, r3, #16
 8002f94:	431a      	orrs	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	061b      	lsls	r3, r3, #24
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	071b      	lsls	r3, r3, #28
 8002fa2:	4944      	ldr	r1, [pc, #272]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002faa:	4b42      	ldr	r3, [pc, #264]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fb0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	021b      	lsls	r3, r3, #8
 8002fbc:	493d      	ldr	r1, [pc, #244]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d022      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fd8:	d11d      	bne.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fda:	4b36      	ldr	r3, [pc, #216]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe0:	0e1b      	lsrs	r3, r3, #24
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fe8:	4b32      	ldr	r3, [pc, #200]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fee:	0f1b      	lsrs	r3, r3, #28
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	019a      	lsls	r2, r3, #6
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	041b      	lsls	r3, r3, #16
 8003002:	431a      	orrs	r2, r3
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	061b      	lsls	r3, r3, #24
 8003008:	431a      	orrs	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	071b      	lsls	r3, r3, #28
 800300e:	4929      	ldr	r1, [pc, #164]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003010:	4313      	orrs	r3, r2
 8003012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0308 	and.w	r3, r3, #8
 800301e:	2b00      	cmp	r3, #0
 8003020:	d028      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003022:	4b24      	ldr	r3, [pc, #144]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003028:	0e1b      	lsrs	r3, r3, #24
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003030:	4b20      	ldr	r3, [pc, #128]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003036:	0c1b      	lsrs	r3, r3, #16
 8003038:	f003 0303 	and.w	r3, r3, #3
 800303c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	019a      	lsls	r2, r3, #6
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	041b      	lsls	r3, r3, #16
 8003048:	431a      	orrs	r2, r3
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	061b      	lsls	r3, r3, #24
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	071b      	lsls	r3, r3, #28
 8003056:	4917      	ldr	r1, [pc, #92]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003058:	4313      	orrs	r3, r2
 800305a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800305e:	4b15      	ldr	r3, [pc, #84]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003064:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306c:	4911      	ldr	r1, [pc, #68]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800306e:	4313      	orrs	r3, r2
 8003070:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003074:	4b0f      	ldr	r3, [pc, #60]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a0e      	ldr	r2, [pc, #56]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800307a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800307e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003080:	f7fe fc06 	bl	8001890 <HAL_GetTick>
 8003084:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003086:	e008      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003088:	f7fe fc02 	bl	8001890 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b64      	cmp	r3, #100	; 0x64
 8003094:	d901      	bls.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e007      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800309a:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030a6:	d1ef      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3720      	adds	r7, #32
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800

080030b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e040      	b.n	800314c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fe f9fc 	bl	80014d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2224      	movs	r2, #36	; 0x24
 80030e4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0201 	bic.w	r2, r2, #1
 80030f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fb1e 	bl	8003738 <UART_SetConfig>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e022      	b.n	800314c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	2b00      	cmp	r3, #0
 800310c:	d002      	beq.n	8003114 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fd76 	bl	8003c00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003122:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003132:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 fdfd 	bl	8003d44 <UART_CheckIdleState>
 800314a:	4603      	mov	r3, r0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b0ba      	sub	sp, #232	; 0xe8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800317a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800317e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003182:	4013      	ands	r3, r2
 8003184:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003188:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d115      	bne.n	80031bc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00f      	beq.n	80031bc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800319c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031a0:	f003 0320 	and.w	r3, r3, #32
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d009      	beq.n	80031bc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 8297 	beq.w	80036e0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	4798      	blx	r3
      }
      return;
 80031ba:	e291      	b.n	80036e0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80031bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 8117 	beq.w	80033f4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80031c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80031d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80031d6:	4b85      	ldr	r3, [pc, #532]	; (80033ec <HAL_UART_IRQHandler+0x298>)
 80031d8:	4013      	ands	r3, r2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 810a 	beq.w	80033f4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80031e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d011      	beq.n	8003210 <HAL_UART_IRQHandler+0xbc>
 80031ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00b      	beq.n	8003210 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2201      	movs	r2, #1
 80031fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003206:	f043 0201 	orr.w	r2, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d011      	beq.n	8003240 <HAL_UART_IRQHandler+0xec>
 800321c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00b      	beq.n	8003240 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2202      	movs	r2, #2
 800322e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003236:	f043 0204 	orr.w	r2, r3, #4
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	d011      	beq.n	8003270 <HAL_UART_IRQHandler+0x11c>
 800324c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00b      	beq.n	8003270 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2204      	movs	r2, #4
 800325e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003266:	f043 0202 	orr.w	r2, r3, #2
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003274:	f003 0308 	and.w	r3, r3, #8
 8003278:	2b00      	cmp	r3, #0
 800327a:	d017      	beq.n	80032ac <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800327c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003280:	f003 0320 	and.w	r3, r3, #32
 8003284:	2b00      	cmp	r3, #0
 8003286:	d105      	bne.n	8003294 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800328c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00b      	beq.n	80032ac <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2208      	movs	r2, #8
 800329a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032a2:	f043 0208 	orr.w	r2, r3, #8
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80032ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d012      	beq.n	80032de <HAL_UART_IRQHandler+0x18a>
 80032b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00c      	beq.n	80032de <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032d4:	f043 0220 	orr.w	r2, r3, #32
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 81fd 	beq.w	80036e4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80032ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ee:	f003 0320 	and.w	r3, r3, #32
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00d      	beq.n	8003312 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032fa:	f003 0320 	and.w	r3, r3, #32
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d007      	beq.n	8003312 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003318:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003326:	2b40      	cmp	r3, #64	; 0x40
 8003328:	d005      	beq.n	8003336 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800332a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800332e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003332:	2b00      	cmp	r3, #0
 8003334:	d04f      	beq.n	80033d6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fe01 	bl	8003f3e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003346:	2b40      	cmp	r3, #64	; 0x40
 8003348:	d141      	bne.n	80033ce <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	3308      	adds	r3, #8
 8003350:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003354:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003358:	e853 3f00 	ldrex	r3, [r3]
 800335c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003360:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003364:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003368:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3308      	adds	r3, #8
 8003372:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003376:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800337a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003382:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003386:	e841 2300 	strex	r3, r2, [r1]
 800338a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800338e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1d9      	bne.n	800334a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800339a:	2b00      	cmp	r3, #0
 800339c:	d013      	beq.n	80033c6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a2:	4a13      	ldr	r2, [pc, #76]	; (80033f0 <HAL_UART_IRQHandler+0x29c>)
 80033a4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fe fc21 	bl	8001bf2 <HAL_DMA_Abort_IT>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d017      	beq.n	80033e6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80033c0:	4610      	mov	r0, r2
 80033c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c4:	e00f      	b.n	80033e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f9a0 	bl	800370c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033cc:	e00b      	b.n	80033e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f99c 	bl	800370c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d4:	e007      	b.n	80033e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f998 	bl	800370c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80033e4:	e17e      	b.n	80036e4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e6:	bf00      	nop
    return;
 80033e8:	e17c      	b.n	80036e4 <HAL_UART_IRQHandler+0x590>
 80033ea:	bf00      	nop
 80033ec:	04000120 	.word	0x04000120
 80033f0:	08004007 	.word	0x08004007

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	f040 814c 	bne.w	8003696 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80033fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003402:	f003 0310 	and.w	r3, r3, #16
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 8145 	beq.w	8003696 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800340c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003410:	f003 0310 	and.w	r3, r3, #16
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 813e 	beq.w	8003696 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2210      	movs	r2, #16
 8003420:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342c:	2b40      	cmp	r3, #64	; 0x40
 800342e:	f040 80b6 	bne.w	800359e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800343e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 8150 	beq.w	80036e8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800344e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003452:	429a      	cmp	r2, r3
 8003454:	f080 8148 	bcs.w	80036e8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800345e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800346c:	f000 8086 	beq.w	800357c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003478:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800347c:	e853 3f00 	ldrex	r3, [r3]
 8003480:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003484:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800348c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	461a      	mov	r2, r3
 8003496:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800349a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800349e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80034a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80034aa:	e841 2300 	strex	r3, r2, [r1]
 80034ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80034b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1da      	bne.n	8003470 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	3308      	adds	r3, #8
 80034c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034c4:	e853 3f00 	ldrex	r3, [r3]
 80034c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80034ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034cc:	f023 0301 	bic.w	r3, r3, #1
 80034d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	3308      	adds	r3, #8
 80034da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80034e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80034e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034ea:	e841 2300 	strex	r3, r2, [r1]
 80034ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80034f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1e1      	bne.n	80034ba <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	3308      	adds	r3, #8
 80034fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003500:	e853 3f00 	ldrex	r3, [r3]
 8003504:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003508:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800350c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3308      	adds	r3, #8
 8003516:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800351a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800351c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003520:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003522:	e841 2300 	strex	r3, r2, [r1]
 8003526:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1e3      	bne.n	80034f6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2220      	movs	r2, #32
 8003532:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003544:	e853 3f00 	ldrex	r3, [r3]
 8003548:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800354a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800354c:	f023 0310 	bic.w	r3, r3, #16
 8003550:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	461a      	mov	r2, r3
 800355a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800355e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003560:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003562:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003564:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003566:	e841 2300 	strex	r3, r2, [r1]
 800356a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800356c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1e4      	bne.n	800353c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003576:	4618      	mov	r0, r3
 8003578:	f7fe facb 	bl	8001b12 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2202      	movs	r2, #2
 8003580:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800358e:	b29b      	uxth	r3, r3
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	b29b      	uxth	r3, r3
 8003594:	4619      	mov	r1, r3
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f8c2 	bl	8003720 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800359c:	e0a4      	b.n	80036e8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 8096 	beq.w	80036ec <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80035c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 8091 	beq.w	80036ec <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d2:	e853 3f00 	ldrex	r3, [r3]
 80035d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	461a      	mov	r2, r3
 80035e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80035ec:	647b      	str	r3, [r7, #68]	; 0x44
 80035ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035f4:	e841 2300 	strex	r3, r2, [r1]
 80035f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1e4      	bne.n	80035ca <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3308      	adds	r3, #8
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	e853 3f00 	ldrex	r3, [r3]
 800360e:	623b      	str	r3, [r7, #32]
   return(result);
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	f023 0301 	bic.w	r3, r3, #1
 8003616:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	3308      	adds	r3, #8
 8003620:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003624:	633a      	str	r2, [r7, #48]	; 0x30
 8003626:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003628:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800362a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800362c:	e841 2300 	strex	r3, r2, [r1]
 8003630:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1e3      	bne.n	8003600 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2220      	movs	r2, #32
 800363c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	e853 3f00 	ldrex	r3, [r3]
 8003658:	60fb      	str	r3, [r7, #12]
   return(result);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f023 0310 	bic.w	r3, r3, #16
 8003660:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	461a      	mov	r2, r3
 800366a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800366e:	61fb      	str	r3, [r7, #28]
 8003670:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003672:	69b9      	ldr	r1, [r7, #24]
 8003674:	69fa      	ldr	r2, [r7, #28]
 8003676:	e841 2300 	strex	r3, r2, [r1]
 800367a:	617b      	str	r3, [r7, #20]
   return(result);
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1e4      	bne.n	800364c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2202      	movs	r2, #2
 8003686:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003688:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800368c:	4619      	mov	r1, r3
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f846 	bl	8003720 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003694:	e02a      	b.n	80036ec <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800369a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00e      	beq.n	80036c0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80036a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d008      	beq.n	80036c0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d01c      	beq.n	80036f0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	4798      	blx	r3
    }
    return;
 80036be:	e017      	b.n	80036f0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80036c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d012      	beq.n	80036f2 <HAL_UART_IRQHandler+0x59e>
 80036cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00c      	beq.n	80036f2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 fcaa 	bl	8004032 <UART_EndTransmit_IT>
    return;
 80036de:	e008      	b.n	80036f2 <HAL_UART_IRQHandler+0x59e>
      return;
 80036e0:	bf00      	nop
 80036e2:	e006      	b.n	80036f2 <HAL_UART_IRQHandler+0x59e>
    return;
 80036e4:	bf00      	nop
 80036e6:	e004      	b.n	80036f2 <HAL_UART_IRQHandler+0x59e>
      return;
 80036e8:	bf00      	nop
 80036ea:	e002      	b.n	80036f2 <HAL_UART_IRQHandler+0x59e>
      return;
 80036ec:	bf00      	nop
 80036ee:	e000      	b.n	80036f2 <HAL_UART_IRQHandler+0x59e>
    return;
 80036f0:	bf00      	nop
  }

}
 80036f2:	37e8      	adds	r7, #232	; 0xe8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	431a      	orrs	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	4313      	orrs	r3, r2
 800375a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	4ba6      	ldr	r3, [pc, #664]	; (80039fc <UART_SetConfig+0x2c4>)
 8003764:	4013      	ands	r3, r2
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6812      	ldr	r2, [r2, #0]
 800376a:	6979      	ldr	r1, [r7, #20]
 800376c:	430b      	orrs	r3, r1
 800376e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	4313      	orrs	r3, r2
 8003794:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a94      	ldr	r2, [pc, #592]	; (8003a00 <UART_SetConfig+0x2c8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d120      	bne.n	80037f6 <UART_SetConfig+0xbe>
 80037b4:	4b93      	ldr	r3, [pc, #588]	; (8003a04 <UART_SetConfig+0x2cc>)
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d816      	bhi.n	80037f0 <UART_SetConfig+0xb8>
 80037c2:	a201      	add	r2, pc, #4	; (adr r2, 80037c8 <UART_SetConfig+0x90>)
 80037c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c8:	080037d9 	.word	0x080037d9
 80037cc:	080037e5 	.word	0x080037e5
 80037d0:	080037df 	.word	0x080037df
 80037d4:	080037eb 	.word	0x080037eb
 80037d8:	2301      	movs	r3, #1
 80037da:	77fb      	strb	r3, [r7, #31]
 80037dc:	e150      	b.n	8003a80 <UART_SetConfig+0x348>
 80037de:	2302      	movs	r3, #2
 80037e0:	77fb      	strb	r3, [r7, #31]
 80037e2:	e14d      	b.n	8003a80 <UART_SetConfig+0x348>
 80037e4:	2304      	movs	r3, #4
 80037e6:	77fb      	strb	r3, [r7, #31]
 80037e8:	e14a      	b.n	8003a80 <UART_SetConfig+0x348>
 80037ea:	2308      	movs	r3, #8
 80037ec:	77fb      	strb	r3, [r7, #31]
 80037ee:	e147      	b.n	8003a80 <UART_SetConfig+0x348>
 80037f0:	2310      	movs	r3, #16
 80037f2:	77fb      	strb	r3, [r7, #31]
 80037f4:	e144      	b.n	8003a80 <UART_SetConfig+0x348>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a83      	ldr	r2, [pc, #524]	; (8003a08 <UART_SetConfig+0x2d0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d132      	bne.n	8003866 <UART_SetConfig+0x12e>
 8003800:	4b80      	ldr	r3, [pc, #512]	; (8003a04 <UART_SetConfig+0x2cc>)
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003806:	f003 030c 	and.w	r3, r3, #12
 800380a:	2b0c      	cmp	r3, #12
 800380c:	d828      	bhi.n	8003860 <UART_SetConfig+0x128>
 800380e:	a201      	add	r2, pc, #4	; (adr r2, 8003814 <UART_SetConfig+0xdc>)
 8003810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003814:	08003849 	.word	0x08003849
 8003818:	08003861 	.word	0x08003861
 800381c:	08003861 	.word	0x08003861
 8003820:	08003861 	.word	0x08003861
 8003824:	08003855 	.word	0x08003855
 8003828:	08003861 	.word	0x08003861
 800382c:	08003861 	.word	0x08003861
 8003830:	08003861 	.word	0x08003861
 8003834:	0800384f 	.word	0x0800384f
 8003838:	08003861 	.word	0x08003861
 800383c:	08003861 	.word	0x08003861
 8003840:	08003861 	.word	0x08003861
 8003844:	0800385b 	.word	0x0800385b
 8003848:	2300      	movs	r3, #0
 800384a:	77fb      	strb	r3, [r7, #31]
 800384c:	e118      	b.n	8003a80 <UART_SetConfig+0x348>
 800384e:	2302      	movs	r3, #2
 8003850:	77fb      	strb	r3, [r7, #31]
 8003852:	e115      	b.n	8003a80 <UART_SetConfig+0x348>
 8003854:	2304      	movs	r3, #4
 8003856:	77fb      	strb	r3, [r7, #31]
 8003858:	e112      	b.n	8003a80 <UART_SetConfig+0x348>
 800385a:	2308      	movs	r3, #8
 800385c:	77fb      	strb	r3, [r7, #31]
 800385e:	e10f      	b.n	8003a80 <UART_SetConfig+0x348>
 8003860:	2310      	movs	r3, #16
 8003862:	77fb      	strb	r3, [r7, #31]
 8003864:	e10c      	b.n	8003a80 <UART_SetConfig+0x348>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a68      	ldr	r2, [pc, #416]	; (8003a0c <UART_SetConfig+0x2d4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d120      	bne.n	80038b2 <UART_SetConfig+0x17a>
 8003870:	4b64      	ldr	r3, [pc, #400]	; (8003a04 <UART_SetConfig+0x2cc>)
 8003872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003876:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800387a:	2b30      	cmp	r3, #48	; 0x30
 800387c:	d013      	beq.n	80038a6 <UART_SetConfig+0x16e>
 800387e:	2b30      	cmp	r3, #48	; 0x30
 8003880:	d814      	bhi.n	80038ac <UART_SetConfig+0x174>
 8003882:	2b20      	cmp	r3, #32
 8003884:	d009      	beq.n	800389a <UART_SetConfig+0x162>
 8003886:	2b20      	cmp	r3, #32
 8003888:	d810      	bhi.n	80038ac <UART_SetConfig+0x174>
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <UART_SetConfig+0x15c>
 800388e:	2b10      	cmp	r3, #16
 8003890:	d006      	beq.n	80038a0 <UART_SetConfig+0x168>
 8003892:	e00b      	b.n	80038ac <UART_SetConfig+0x174>
 8003894:	2300      	movs	r3, #0
 8003896:	77fb      	strb	r3, [r7, #31]
 8003898:	e0f2      	b.n	8003a80 <UART_SetConfig+0x348>
 800389a:	2302      	movs	r3, #2
 800389c:	77fb      	strb	r3, [r7, #31]
 800389e:	e0ef      	b.n	8003a80 <UART_SetConfig+0x348>
 80038a0:	2304      	movs	r3, #4
 80038a2:	77fb      	strb	r3, [r7, #31]
 80038a4:	e0ec      	b.n	8003a80 <UART_SetConfig+0x348>
 80038a6:	2308      	movs	r3, #8
 80038a8:	77fb      	strb	r3, [r7, #31]
 80038aa:	e0e9      	b.n	8003a80 <UART_SetConfig+0x348>
 80038ac:	2310      	movs	r3, #16
 80038ae:	77fb      	strb	r3, [r7, #31]
 80038b0:	e0e6      	b.n	8003a80 <UART_SetConfig+0x348>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a56      	ldr	r2, [pc, #344]	; (8003a10 <UART_SetConfig+0x2d8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d120      	bne.n	80038fe <UART_SetConfig+0x1c6>
 80038bc:	4b51      	ldr	r3, [pc, #324]	; (8003a04 <UART_SetConfig+0x2cc>)
 80038be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038c6:	2bc0      	cmp	r3, #192	; 0xc0
 80038c8:	d013      	beq.n	80038f2 <UART_SetConfig+0x1ba>
 80038ca:	2bc0      	cmp	r3, #192	; 0xc0
 80038cc:	d814      	bhi.n	80038f8 <UART_SetConfig+0x1c0>
 80038ce:	2b80      	cmp	r3, #128	; 0x80
 80038d0:	d009      	beq.n	80038e6 <UART_SetConfig+0x1ae>
 80038d2:	2b80      	cmp	r3, #128	; 0x80
 80038d4:	d810      	bhi.n	80038f8 <UART_SetConfig+0x1c0>
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d002      	beq.n	80038e0 <UART_SetConfig+0x1a8>
 80038da:	2b40      	cmp	r3, #64	; 0x40
 80038dc:	d006      	beq.n	80038ec <UART_SetConfig+0x1b4>
 80038de:	e00b      	b.n	80038f8 <UART_SetConfig+0x1c0>
 80038e0:	2300      	movs	r3, #0
 80038e2:	77fb      	strb	r3, [r7, #31]
 80038e4:	e0cc      	b.n	8003a80 <UART_SetConfig+0x348>
 80038e6:	2302      	movs	r3, #2
 80038e8:	77fb      	strb	r3, [r7, #31]
 80038ea:	e0c9      	b.n	8003a80 <UART_SetConfig+0x348>
 80038ec:	2304      	movs	r3, #4
 80038ee:	77fb      	strb	r3, [r7, #31]
 80038f0:	e0c6      	b.n	8003a80 <UART_SetConfig+0x348>
 80038f2:	2308      	movs	r3, #8
 80038f4:	77fb      	strb	r3, [r7, #31]
 80038f6:	e0c3      	b.n	8003a80 <UART_SetConfig+0x348>
 80038f8:	2310      	movs	r3, #16
 80038fa:	77fb      	strb	r3, [r7, #31]
 80038fc:	e0c0      	b.n	8003a80 <UART_SetConfig+0x348>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a44      	ldr	r2, [pc, #272]	; (8003a14 <UART_SetConfig+0x2dc>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d125      	bne.n	8003954 <UART_SetConfig+0x21c>
 8003908:	4b3e      	ldr	r3, [pc, #248]	; (8003a04 <UART_SetConfig+0x2cc>)
 800390a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003912:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003916:	d017      	beq.n	8003948 <UART_SetConfig+0x210>
 8003918:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800391c:	d817      	bhi.n	800394e <UART_SetConfig+0x216>
 800391e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003922:	d00b      	beq.n	800393c <UART_SetConfig+0x204>
 8003924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003928:	d811      	bhi.n	800394e <UART_SetConfig+0x216>
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <UART_SetConfig+0x1fe>
 800392e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003932:	d006      	beq.n	8003942 <UART_SetConfig+0x20a>
 8003934:	e00b      	b.n	800394e <UART_SetConfig+0x216>
 8003936:	2300      	movs	r3, #0
 8003938:	77fb      	strb	r3, [r7, #31]
 800393a:	e0a1      	b.n	8003a80 <UART_SetConfig+0x348>
 800393c:	2302      	movs	r3, #2
 800393e:	77fb      	strb	r3, [r7, #31]
 8003940:	e09e      	b.n	8003a80 <UART_SetConfig+0x348>
 8003942:	2304      	movs	r3, #4
 8003944:	77fb      	strb	r3, [r7, #31]
 8003946:	e09b      	b.n	8003a80 <UART_SetConfig+0x348>
 8003948:	2308      	movs	r3, #8
 800394a:	77fb      	strb	r3, [r7, #31]
 800394c:	e098      	b.n	8003a80 <UART_SetConfig+0x348>
 800394e:	2310      	movs	r3, #16
 8003950:	77fb      	strb	r3, [r7, #31]
 8003952:	e095      	b.n	8003a80 <UART_SetConfig+0x348>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a2f      	ldr	r2, [pc, #188]	; (8003a18 <UART_SetConfig+0x2e0>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d125      	bne.n	80039aa <UART_SetConfig+0x272>
 800395e:	4b29      	ldr	r3, [pc, #164]	; (8003a04 <UART_SetConfig+0x2cc>)
 8003960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003964:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003968:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800396c:	d017      	beq.n	800399e <UART_SetConfig+0x266>
 800396e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003972:	d817      	bhi.n	80039a4 <UART_SetConfig+0x26c>
 8003974:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003978:	d00b      	beq.n	8003992 <UART_SetConfig+0x25a>
 800397a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800397e:	d811      	bhi.n	80039a4 <UART_SetConfig+0x26c>
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <UART_SetConfig+0x254>
 8003984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003988:	d006      	beq.n	8003998 <UART_SetConfig+0x260>
 800398a:	e00b      	b.n	80039a4 <UART_SetConfig+0x26c>
 800398c:	2301      	movs	r3, #1
 800398e:	77fb      	strb	r3, [r7, #31]
 8003990:	e076      	b.n	8003a80 <UART_SetConfig+0x348>
 8003992:	2302      	movs	r3, #2
 8003994:	77fb      	strb	r3, [r7, #31]
 8003996:	e073      	b.n	8003a80 <UART_SetConfig+0x348>
 8003998:	2304      	movs	r3, #4
 800399a:	77fb      	strb	r3, [r7, #31]
 800399c:	e070      	b.n	8003a80 <UART_SetConfig+0x348>
 800399e:	2308      	movs	r3, #8
 80039a0:	77fb      	strb	r3, [r7, #31]
 80039a2:	e06d      	b.n	8003a80 <UART_SetConfig+0x348>
 80039a4:	2310      	movs	r3, #16
 80039a6:	77fb      	strb	r3, [r7, #31]
 80039a8:	e06a      	b.n	8003a80 <UART_SetConfig+0x348>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a1b      	ldr	r2, [pc, #108]	; (8003a1c <UART_SetConfig+0x2e4>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d138      	bne.n	8003a26 <UART_SetConfig+0x2ee>
 80039b4:	4b13      	ldr	r3, [pc, #76]	; (8003a04 <UART_SetConfig+0x2cc>)
 80039b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80039be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039c2:	d017      	beq.n	80039f4 <UART_SetConfig+0x2bc>
 80039c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039c8:	d82a      	bhi.n	8003a20 <UART_SetConfig+0x2e8>
 80039ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ce:	d00b      	beq.n	80039e8 <UART_SetConfig+0x2b0>
 80039d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039d4:	d824      	bhi.n	8003a20 <UART_SetConfig+0x2e8>
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <UART_SetConfig+0x2aa>
 80039da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039de:	d006      	beq.n	80039ee <UART_SetConfig+0x2b6>
 80039e0:	e01e      	b.n	8003a20 <UART_SetConfig+0x2e8>
 80039e2:	2300      	movs	r3, #0
 80039e4:	77fb      	strb	r3, [r7, #31]
 80039e6:	e04b      	b.n	8003a80 <UART_SetConfig+0x348>
 80039e8:	2302      	movs	r3, #2
 80039ea:	77fb      	strb	r3, [r7, #31]
 80039ec:	e048      	b.n	8003a80 <UART_SetConfig+0x348>
 80039ee:	2304      	movs	r3, #4
 80039f0:	77fb      	strb	r3, [r7, #31]
 80039f2:	e045      	b.n	8003a80 <UART_SetConfig+0x348>
 80039f4:	2308      	movs	r3, #8
 80039f6:	77fb      	strb	r3, [r7, #31]
 80039f8:	e042      	b.n	8003a80 <UART_SetConfig+0x348>
 80039fa:	bf00      	nop
 80039fc:	efff69f3 	.word	0xefff69f3
 8003a00:	40011000 	.word	0x40011000
 8003a04:	40023800 	.word	0x40023800
 8003a08:	40004400 	.word	0x40004400
 8003a0c:	40004800 	.word	0x40004800
 8003a10:	40004c00 	.word	0x40004c00
 8003a14:	40005000 	.word	0x40005000
 8003a18:	40011400 	.word	0x40011400
 8003a1c:	40007800 	.word	0x40007800
 8003a20:	2310      	movs	r3, #16
 8003a22:	77fb      	strb	r3, [r7, #31]
 8003a24:	e02c      	b.n	8003a80 <UART_SetConfig+0x348>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a72      	ldr	r2, [pc, #456]	; (8003bf4 <UART_SetConfig+0x4bc>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d125      	bne.n	8003a7c <UART_SetConfig+0x344>
 8003a30:	4b71      	ldr	r3, [pc, #452]	; (8003bf8 <UART_SetConfig+0x4c0>)
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a36:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a3a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a3e:	d017      	beq.n	8003a70 <UART_SetConfig+0x338>
 8003a40:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a44:	d817      	bhi.n	8003a76 <UART_SetConfig+0x33e>
 8003a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a4a:	d00b      	beq.n	8003a64 <UART_SetConfig+0x32c>
 8003a4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a50:	d811      	bhi.n	8003a76 <UART_SetConfig+0x33e>
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <UART_SetConfig+0x326>
 8003a56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a5a:	d006      	beq.n	8003a6a <UART_SetConfig+0x332>
 8003a5c:	e00b      	b.n	8003a76 <UART_SetConfig+0x33e>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	77fb      	strb	r3, [r7, #31]
 8003a62:	e00d      	b.n	8003a80 <UART_SetConfig+0x348>
 8003a64:	2302      	movs	r3, #2
 8003a66:	77fb      	strb	r3, [r7, #31]
 8003a68:	e00a      	b.n	8003a80 <UART_SetConfig+0x348>
 8003a6a:	2304      	movs	r3, #4
 8003a6c:	77fb      	strb	r3, [r7, #31]
 8003a6e:	e007      	b.n	8003a80 <UART_SetConfig+0x348>
 8003a70:	2308      	movs	r3, #8
 8003a72:	77fb      	strb	r3, [r7, #31]
 8003a74:	e004      	b.n	8003a80 <UART_SetConfig+0x348>
 8003a76:	2310      	movs	r3, #16
 8003a78:	77fb      	strb	r3, [r7, #31]
 8003a7a:	e001      	b.n	8003a80 <UART_SetConfig+0x348>
 8003a7c:	2310      	movs	r3, #16
 8003a7e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a88:	d15b      	bne.n	8003b42 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003a8a:	7ffb      	ldrb	r3, [r7, #31]
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d828      	bhi.n	8003ae2 <UART_SetConfig+0x3aa>
 8003a90:	a201      	add	r2, pc, #4	; (adr r2, 8003a98 <UART_SetConfig+0x360>)
 8003a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a96:	bf00      	nop
 8003a98:	08003abd 	.word	0x08003abd
 8003a9c:	08003ac5 	.word	0x08003ac5
 8003aa0:	08003acd 	.word	0x08003acd
 8003aa4:	08003ae3 	.word	0x08003ae3
 8003aa8:	08003ad3 	.word	0x08003ad3
 8003aac:	08003ae3 	.word	0x08003ae3
 8003ab0:	08003ae3 	.word	0x08003ae3
 8003ab4:	08003ae3 	.word	0x08003ae3
 8003ab8:	08003adb 	.word	0x08003adb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003abc:	f7fe fee4 	bl	8002888 <HAL_RCC_GetPCLK1Freq>
 8003ac0:	61b8      	str	r0, [r7, #24]
        break;
 8003ac2:	e013      	b.n	8003aec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ac4:	f7fe fef4 	bl	80028b0 <HAL_RCC_GetPCLK2Freq>
 8003ac8:	61b8      	str	r0, [r7, #24]
        break;
 8003aca:	e00f      	b.n	8003aec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003acc:	4b4b      	ldr	r3, [pc, #300]	; (8003bfc <UART_SetConfig+0x4c4>)
 8003ace:	61bb      	str	r3, [r7, #24]
        break;
 8003ad0:	e00c      	b.n	8003aec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ad2:	f7fe fe07 	bl	80026e4 <HAL_RCC_GetSysClockFreq>
 8003ad6:	61b8      	str	r0, [r7, #24]
        break;
 8003ad8:	e008      	b.n	8003aec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ade:	61bb      	str	r3, [r7, #24]
        break;
 8003ae0:	e004      	b.n	8003aec <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	77bb      	strb	r3, [r7, #30]
        break;
 8003aea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d074      	beq.n	8003bdc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	005a      	lsls	r2, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	085b      	lsrs	r3, r3, #1
 8003afc:	441a      	add	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	2b0f      	cmp	r3, #15
 8003b0c:	d916      	bls.n	8003b3c <UART_SetConfig+0x404>
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b14:	d212      	bcs.n	8003b3c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	f023 030f 	bic.w	r3, r3, #15
 8003b1e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	085b      	lsrs	r3, r3, #1
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	89fb      	ldrh	r3, [r7, #14]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	89fa      	ldrh	r2, [r7, #14]
 8003b38:	60da      	str	r2, [r3, #12]
 8003b3a:	e04f      	b.n	8003bdc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	77bb      	strb	r3, [r7, #30]
 8003b40:	e04c      	b.n	8003bdc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b42:	7ffb      	ldrb	r3, [r7, #31]
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d828      	bhi.n	8003b9a <UART_SetConfig+0x462>
 8003b48:	a201      	add	r2, pc, #4	; (adr r2, 8003b50 <UART_SetConfig+0x418>)
 8003b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4e:	bf00      	nop
 8003b50:	08003b75 	.word	0x08003b75
 8003b54:	08003b7d 	.word	0x08003b7d
 8003b58:	08003b85 	.word	0x08003b85
 8003b5c:	08003b9b 	.word	0x08003b9b
 8003b60:	08003b8b 	.word	0x08003b8b
 8003b64:	08003b9b 	.word	0x08003b9b
 8003b68:	08003b9b 	.word	0x08003b9b
 8003b6c:	08003b9b 	.word	0x08003b9b
 8003b70:	08003b93 	.word	0x08003b93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b74:	f7fe fe88 	bl	8002888 <HAL_RCC_GetPCLK1Freq>
 8003b78:	61b8      	str	r0, [r7, #24]
        break;
 8003b7a:	e013      	b.n	8003ba4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b7c:	f7fe fe98 	bl	80028b0 <HAL_RCC_GetPCLK2Freq>
 8003b80:	61b8      	str	r0, [r7, #24]
        break;
 8003b82:	e00f      	b.n	8003ba4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b84:	4b1d      	ldr	r3, [pc, #116]	; (8003bfc <UART_SetConfig+0x4c4>)
 8003b86:	61bb      	str	r3, [r7, #24]
        break;
 8003b88:	e00c      	b.n	8003ba4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b8a:	f7fe fdab 	bl	80026e4 <HAL_RCC_GetSysClockFreq>
 8003b8e:	61b8      	str	r0, [r7, #24]
        break;
 8003b90:	e008      	b.n	8003ba4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b96:	61bb      	str	r3, [r7, #24]
        break;
 8003b98:	e004      	b.n	8003ba4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	77bb      	strb	r3, [r7, #30]
        break;
 8003ba2:	bf00      	nop
    }

    if (pclk != 0U)
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d018      	beq.n	8003bdc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	085a      	lsrs	r2, r3, #1
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	441a      	add	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bbc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	2b0f      	cmp	r3, #15
 8003bc2:	d909      	bls.n	8003bd8 <UART_SetConfig+0x4a0>
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bca:	d205      	bcs.n	8003bd8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	60da      	str	r2, [r3, #12]
 8003bd6:	e001      	b.n	8003bdc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003be8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3720      	adds	r7, #32
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40007c00 	.word	0x40007c00
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	00f42400 	.word	0x00f42400

08003c00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00a      	beq.n	8003c2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00a      	beq.n	8003c6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	f003 0310 	and.w	r3, r3, #16
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00a      	beq.n	8003cb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	f003 0320 	and.w	r3, r3, #32
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d01a      	beq.n	8003d16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cfe:	d10a      	bne.n	8003d16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	605a      	str	r2, [r3, #4]
  }
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af02      	add	r7, sp, #8
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d54:	f7fd fd9c 	bl	8001890 <HAL_GetTick>
 8003d58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0308 	and.w	r3, r3, #8
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d10e      	bne.n	8003d86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f81b 	bl	8003db2 <UART_WaitOnFlagUntilTimeout>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e011      	b.n	8003daa <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b09c      	sub	sp, #112	; 0x70
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	603b      	str	r3, [r7, #0]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dc2:	e0a7      	b.n	8003f14 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dca:	f000 80a3 	beq.w	8003f14 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dce:	f7fd fd5f 	bl	8001890 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d302      	bcc.n	8003de4 <UART_WaitOnFlagUntilTimeout+0x32>
 8003dde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d13f      	bne.n	8003e64 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dec:	e853 3f00 	ldrex	r3, [r3]
 8003df0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003df4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003df8:	667b      	str	r3, [r7, #100]	; 0x64
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e04:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003e08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e0a:	e841 2300 	strex	r3, r2, [r1]
 8003e0e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1e6      	bne.n	8003de4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3308      	adds	r3, #8
 8003e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e20:	e853 3f00 	ldrex	r3, [r3]
 8003e24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e28:	f023 0301 	bic.w	r3, r3, #1
 8003e2c:	663b      	str	r3, [r7, #96]	; 0x60
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3308      	adds	r3, #8
 8003e34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e36:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e3e:	e841 2300 	strex	r3, r2, [r1]
 8003e42:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1e5      	bne.n	8003e16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e068      	b.n	8003f36 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d050      	beq.n	8003f14 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e80:	d148      	bne.n	8003f14 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e8a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e94:	e853 3f00 	ldrex	r3, [r3]
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ea0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eaa:	637b      	str	r3, [r7, #52]	; 0x34
 8003eac:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003eb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003eb2:	e841 2300 	strex	r3, r2, [r1]
 8003eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1e6      	bne.n	8003e8c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3308      	adds	r3, #8
 8003ec4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	e853 3f00 	ldrex	r3, [r3]
 8003ecc:	613b      	str	r3, [r7, #16]
   return(result);
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f023 0301 	bic.w	r3, r3, #1
 8003ed4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3308      	adds	r3, #8
 8003edc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ede:	623a      	str	r2, [r7, #32]
 8003ee0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee2:	69f9      	ldr	r1, [r7, #28]
 8003ee4:	6a3a      	ldr	r2, [r7, #32]
 8003ee6:	e841 2300 	strex	r3, r2, [r1]
 8003eea:	61bb      	str	r3, [r7, #24]
   return(result);
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1e5      	bne.n	8003ebe <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e010      	b.n	8003f36 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	69da      	ldr	r2, [r3, #28]
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	bf0c      	ite	eq
 8003f24:	2301      	moveq	r3, #1
 8003f26:	2300      	movne	r3, #0
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	79fb      	ldrb	r3, [r7, #7]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	f43f af48 	beq.w	8003dc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3770      	adds	r7, #112	; 0x70
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b095      	sub	sp, #84	; 0x54
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f4e:	e853 3f00 	ldrex	r3, [r3]
 8003f52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	461a      	mov	r2, r3
 8003f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f64:	643b      	str	r3, [r7, #64]	; 0x40
 8003f66:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f6c:	e841 2300 	strex	r3, r2, [r1]
 8003f70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1e6      	bne.n	8003f46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3308      	adds	r3, #8
 8003f7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	e853 3f00 	ldrex	r3, [r3]
 8003f86:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f023 0301 	bic.w	r3, r3, #1
 8003f8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3308      	adds	r3, #8
 8003f96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fa0:	e841 2300 	strex	r3, r2, [r1]
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1e5      	bne.n	8003f78 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d118      	bne.n	8003fe6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	e853 3f00 	ldrex	r3, [r3]
 8003fc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	f023 0310 	bic.w	r3, r3, #16
 8003fc8:	647b      	str	r3, [r7, #68]	; 0x44
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fd2:	61bb      	str	r3, [r7, #24]
 8003fd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd6:	6979      	ldr	r1, [r7, #20]
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	e841 2300 	strex	r3, r2, [r1]
 8003fde:	613b      	str	r3, [r7, #16]
   return(result);
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1e6      	bne.n	8003fb4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003ffa:	bf00      	nop
 8003ffc:	3754      	adds	r7, #84	; 0x54
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b084      	sub	sp, #16
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004012:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f7ff fb71 	bl	800370c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800402a:	bf00      	nop
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b088      	sub	sp, #32
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	e853 3f00 	ldrex	r3, [r3]
 8004046:	60bb      	str	r3, [r7, #8]
   return(result);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800404e:	61fb      	str	r3, [r7, #28]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	461a      	mov	r2, r3
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	61bb      	str	r3, [r7, #24]
 800405a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405c:	6979      	ldr	r1, [r7, #20]
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	e841 2300 	strex	r3, r2, [r1]
 8004064:	613b      	str	r3, [r7, #16]
   return(result);
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1e6      	bne.n	800403a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2220      	movs	r2, #32
 8004070:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7ff fb3d 	bl	80036f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800407e:	bf00      	nop
 8004080:	3720      	adds	r7, #32
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <__errno>:
 8004088:	4b01      	ldr	r3, [pc, #4]	; (8004090 <__errno+0x8>)
 800408a:	6818      	ldr	r0, [r3, #0]
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	2000001c 	.word	0x2000001c

08004094 <__libc_init_array>:
 8004094:	b570      	push	{r4, r5, r6, lr}
 8004096:	4d0d      	ldr	r5, [pc, #52]	; (80040cc <__libc_init_array+0x38>)
 8004098:	4c0d      	ldr	r4, [pc, #52]	; (80040d0 <__libc_init_array+0x3c>)
 800409a:	1b64      	subs	r4, r4, r5
 800409c:	10a4      	asrs	r4, r4, #2
 800409e:	2600      	movs	r6, #0
 80040a0:	42a6      	cmp	r6, r4
 80040a2:	d109      	bne.n	80040b8 <__libc_init_array+0x24>
 80040a4:	4d0b      	ldr	r5, [pc, #44]	; (80040d4 <__libc_init_array+0x40>)
 80040a6:	4c0c      	ldr	r4, [pc, #48]	; (80040d8 <__libc_init_array+0x44>)
 80040a8:	f000 fc9c 	bl	80049e4 <_init>
 80040ac:	1b64      	subs	r4, r4, r5
 80040ae:	10a4      	asrs	r4, r4, #2
 80040b0:	2600      	movs	r6, #0
 80040b2:	42a6      	cmp	r6, r4
 80040b4:	d105      	bne.n	80040c2 <__libc_init_array+0x2e>
 80040b6:	bd70      	pop	{r4, r5, r6, pc}
 80040b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040bc:	4798      	blx	r3
 80040be:	3601      	adds	r6, #1
 80040c0:	e7ee      	b.n	80040a0 <__libc_init_array+0xc>
 80040c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040c6:	4798      	blx	r3
 80040c8:	3601      	adds	r6, #1
 80040ca:	e7f2      	b.n	80040b2 <__libc_init_array+0x1e>
 80040cc:	08005064 	.word	0x08005064
 80040d0:	08005064 	.word	0x08005064
 80040d4:	08005064 	.word	0x08005064
 80040d8:	08005068 	.word	0x08005068

080040dc <memset>:
 80040dc:	4402      	add	r2, r0
 80040de:	4603      	mov	r3, r0
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d100      	bne.n	80040e6 <memset+0xa>
 80040e4:	4770      	bx	lr
 80040e6:	f803 1b01 	strb.w	r1, [r3], #1
 80040ea:	e7f9      	b.n	80040e0 <memset+0x4>

080040ec <siprintf>:
 80040ec:	b40e      	push	{r1, r2, r3}
 80040ee:	b500      	push	{lr}
 80040f0:	b09c      	sub	sp, #112	; 0x70
 80040f2:	ab1d      	add	r3, sp, #116	; 0x74
 80040f4:	9002      	str	r0, [sp, #8]
 80040f6:	9006      	str	r0, [sp, #24]
 80040f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80040fc:	4809      	ldr	r0, [pc, #36]	; (8004124 <siprintf+0x38>)
 80040fe:	9107      	str	r1, [sp, #28]
 8004100:	9104      	str	r1, [sp, #16]
 8004102:	4909      	ldr	r1, [pc, #36]	; (8004128 <siprintf+0x3c>)
 8004104:	f853 2b04 	ldr.w	r2, [r3], #4
 8004108:	9105      	str	r1, [sp, #20]
 800410a:	6800      	ldr	r0, [r0, #0]
 800410c:	9301      	str	r3, [sp, #4]
 800410e:	a902      	add	r1, sp, #8
 8004110:	f000 f876 	bl	8004200 <_svfiprintf_r>
 8004114:	9b02      	ldr	r3, [sp, #8]
 8004116:	2200      	movs	r2, #0
 8004118:	701a      	strb	r2, [r3, #0]
 800411a:	b01c      	add	sp, #112	; 0x70
 800411c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004120:	b003      	add	sp, #12
 8004122:	4770      	bx	lr
 8004124:	2000001c 	.word	0x2000001c
 8004128:	ffff0208 	.word	0xffff0208

0800412c <strcat>:
 800412c:	b510      	push	{r4, lr}
 800412e:	4602      	mov	r2, r0
 8004130:	7814      	ldrb	r4, [r2, #0]
 8004132:	4613      	mov	r3, r2
 8004134:	3201      	adds	r2, #1
 8004136:	2c00      	cmp	r4, #0
 8004138:	d1fa      	bne.n	8004130 <strcat+0x4>
 800413a:	3b01      	subs	r3, #1
 800413c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004140:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004144:	2a00      	cmp	r2, #0
 8004146:	d1f9      	bne.n	800413c <strcat+0x10>
 8004148:	bd10      	pop	{r4, pc}

0800414a <__ssputs_r>:
 800414a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800414e:	688e      	ldr	r6, [r1, #8]
 8004150:	429e      	cmp	r6, r3
 8004152:	4682      	mov	sl, r0
 8004154:	460c      	mov	r4, r1
 8004156:	4690      	mov	r8, r2
 8004158:	461f      	mov	r7, r3
 800415a:	d838      	bhi.n	80041ce <__ssputs_r+0x84>
 800415c:	898a      	ldrh	r2, [r1, #12]
 800415e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004162:	d032      	beq.n	80041ca <__ssputs_r+0x80>
 8004164:	6825      	ldr	r5, [r4, #0]
 8004166:	6909      	ldr	r1, [r1, #16]
 8004168:	eba5 0901 	sub.w	r9, r5, r1
 800416c:	6965      	ldr	r5, [r4, #20]
 800416e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004172:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004176:	3301      	adds	r3, #1
 8004178:	444b      	add	r3, r9
 800417a:	106d      	asrs	r5, r5, #1
 800417c:	429d      	cmp	r5, r3
 800417e:	bf38      	it	cc
 8004180:	461d      	movcc	r5, r3
 8004182:	0553      	lsls	r3, r2, #21
 8004184:	d531      	bpl.n	80041ea <__ssputs_r+0xa0>
 8004186:	4629      	mov	r1, r5
 8004188:	f000 fb62 	bl	8004850 <_malloc_r>
 800418c:	4606      	mov	r6, r0
 800418e:	b950      	cbnz	r0, 80041a6 <__ssputs_r+0x5c>
 8004190:	230c      	movs	r3, #12
 8004192:	f8ca 3000 	str.w	r3, [sl]
 8004196:	89a3      	ldrh	r3, [r4, #12]
 8004198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800419c:	81a3      	strh	r3, [r4, #12]
 800419e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041a6:	6921      	ldr	r1, [r4, #16]
 80041a8:	464a      	mov	r2, r9
 80041aa:	f000 fabd 	bl	8004728 <memcpy>
 80041ae:	89a3      	ldrh	r3, [r4, #12]
 80041b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041b8:	81a3      	strh	r3, [r4, #12]
 80041ba:	6126      	str	r6, [r4, #16]
 80041bc:	6165      	str	r5, [r4, #20]
 80041be:	444e      	add	r6, r9
 80041c0:	eba5 0509 	sub.w	r5, r5, r9
 80041c4:	6026      	str	r6, [r4, #0]
 80041c6:	60a5      	str	r5, [r4, #8]
 80041c8:	463e      	mov	r6, r7
 80041ca:	42be      	cmp	r6, r7
 80041cc:	d900      	bls.n	80041d0 <__ssputs_r+0x86>
 80041ce:	463e      	mov	r6, r7
 80041d0:	6820      	ldr	r0, [r4, #0]
 80041d2:	4632      	mov	r2, r6
 80041d4:	4641      	mov	r1, r8
 80041d6:	f000 fab5 	bl	8004744 <memmove>
 80041da:	68a3      	ldr	r3, [r4, #8]
 80041dc:	1b9b      	subs	r3, r3, r6
 80041de:	60a3      	str	r3, [r4, #8]
 80041e0:	6823      	ldr	r3, [r4, #0]
 80041e2:	4433      	add	r3, r6
 80041e4:	6023      	str	r3, [r4, #0]
 80041e6:	2000      	movs	r0, #0
 80041e8:	e7db      	b.n	80041a2 <__ssputs_r+0x58>
 80041ea:	462a      	mov	r2, r5
 80041ec:	f000 fba4 	bl	8004938 <_realloc_r>
 80041f0:	4606      	mov	r6, r0
 80041f2:	2800      	cmp	r0, #0
 80041f4:	d1e1      	bne.n	80041ba <__ssputs_r+0x70>
 80041f6:	6921      	ldr	r1, [r4, #16]
 80041f8:	4650      	mov	r0, sl
 80041fa:	f000 fabd 	bl	8004778 <_free_r>
 80041fe:	e7c7      	b.n	8004190 <__ssputs_r+0x46>

08004200 <_svfiprintf_r>:
 8004200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004204:	4698      	mov	r8, r3
 8004206:	898b      	ldrh	r3, [r1, #12]
 8004208:	061b      	lsls	r3, r3, #24
 800420a:	b09d      	sub	sp, #116	; 0x74
 800420c:	4607      	mov	r7, r0
 800420e:	460d      	mov	r5, r1
 8004210:	4614      	mov	r4, r2
 8004212:	d50e      	bpl.n	8004232 <_svfiprintf_r+0x32>
 8004214:	690b      	ldr	r3, [r1, #16]
 8004216:	b963      	cbnz	r3, 8004232 <_svfiprintf_r+0x32>
 8004218:	2140      	movs	r1, #64	; 0x40
 800421a:	f000 fb19 	bl	8004850 <_malloc_r>
 800421e:	6028      	str	r0, [r5, #0]
 8004220:	6128      	str	r0, [r5, #16]
 8004222:	b920      	cbnz	r0, 800422e <_svfiprintf_r+0x2e>
 8004224:	230c      	movs	r3, #12
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800422c:	e0d1      	b.n	80043d2 <_svfiprintf_r+0x1d2>
 800422e:	2340      	movs	r3, #64	; 0x40
 8004230:	616b      	str	r3, [r5, #20]
 8004232:	2300      	movs	r3, #0
 8004234:	9309      	str	r3, [sp, #36]	; 0x24
 8004236:	2320      	movs	r3, #32
 8004238:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800423c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004240:	2330      	movs	r3, #48	; 0x30
 8004242:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80043ec <_svfiprintf_r+0x1ec>
 8004246:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800424a:	f04f 0901 	mov.w	r9, #1
 800424e:	4623      	mov	r3, r4
 8004250:	469a      	mov	sl, r3
 8004252:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004256:	b10a      	cbz	r2, 800425c <_svfiprintf_r+0x5c>
 8004258:	2a25      	cmp	r2, #37	; 0x25
 800425a:	d1f9      	bne.n	8004250 <_svfiprintf_r+0x50>
 800425c:	ebba 0b04 	subs.w	fp, sl, r4
 8004260:	d00b      	beq.n	800427a <_svfiprintf_r+0x7a>
 8004262:	465b      	mov	r3, fp
 8004264:	4622      	mov	r2, r4
 8004266:	4629      	mov	r1, r5
 8004268:	4638      	mov	r0, r7
 800426a:	f7ff ff6e 	bl	800414a <__ssputs_r>
 800426e:	3001      	adds	r0, #1
 8004270:	f000 80aa 	beq.w	80043c8 <_svfiprintf_r+0x1c8>
 8004274:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004276:	445a      	add	r2, fp
 8004278:	9209      	str	r2, [sp, #36]	; 0x24
 800427a:	f89a 3000 	ldrb.w	r3, [sl]
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 80a2 	beq.w	80043c8 <_svfiprintf_r+0x1c8>
 8004284:	2300      	movs	r3, #0
 8004286:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800428a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800428e:	f10a 0a01 	add.w	sl, sl, #1
 8004292:	9304      	str	r3, [sp, #16]
 8004294:	9307      	str	r3, [sp, #28]
 8004296:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800429a:	931a      	str	r3, [sp, #104]	; 0x68
 800429c:	4654      	mov	r4, sl
 800429e:	2205      	movs	r2, #5
 80042a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042a4:	4851      	ldr	r0, [pc, #324]	; (80043ec <_svfiprintf_r+0x1ec>)
 80042a6:	f7fb ffcb 	bl	8000240 <memchr>
 80042aa:	9a04      	ldr	r2, [sp, #16]
 80042ac:	b9d8      	cbnz	r0, 80042e6 <_svfiprintf_r+0xe6>
 80042ae:	06d0      	lsls	r0, r2, #27
 80042b0:	bf44      	itt	mi
 80042b2:	2320      	movmi	r3, #32
 80042b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042b8:	0711      	lsls	r1, r2, #28
 80042ba:	bf44      	itt	mi
 80042bc:	232b      	movmi	r3, #43	; 0x2b
 80042be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042c2:	f89a 3000 	ldrb.w	r3, [sl]
 80042c6:	2b2a      	cmp	r3, #42	; 0x2a
 80042c8:	d015      	beq.n	80042f6 <_svfiprintf_r+0xf6>
 80042ca:	9a07      	ldr	r2, [sp, #28]
 80042cc:	4654      	mov	r4, sl
 80042ce:	2000      	movs	r0, #0
 80042d0:	f04f 0c0a 	mov.w	ip, #10
 80042d4:	4621      	mov	r1, r4
 80042d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042da:	3b30      	subs	r3, #48	; 0x30
 80042dc:	2b09      	cmp	r3, #9
 80042de:	d94e      	bls.n	800437e <_svfiprintf_r+0x17e>
 80042e0:	b1b0      	cbz	r0, 8004310 <_svfiprintf_r+0x110>
 80042e2:	9207      	str	r2, [sp, #28]
 80042e4:	e014      	b.n	8004310 <_svfiprintf_r+0x110>
 80042e6:	eba0 0308 	sub.w	r3, r0, r8
 80042ea:	fa09 f303 	lsl.w	r3, r9, r3
 80042ee:	4313      	orrs	r3, r2
 80042f0:	9304      	str	r3, [sp, #16]
 80042f2:	46a2      	mov	sl, r4
 80042f4:	e7d2      	b.n	800429c <_svfiprintf_r+0x9c>
 80042f6:	9b03      	ldr	r3, [sp, #12]
 80042f8:	1d19      	adds	r1, r3, #4
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	9103      	str	r1, [sp, #12]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	bfbb      	ittet	lt
 8004302:	425b      	neglt	r3, r3
 8004304:	f042 0202 	orrlt.w	r2, r2, #2
 8004308:	9307      	strge	r3, [sp, #28]
 800430a:	9307      	strlt	r3, [sp, #28]
 800430c:	bfb8      	it	lt
 800430e:	9204      	strlt	r2, [sp, #16]
 8004310:	7823      	ldrb	r3, [r4, #0]
 8004312:	2b2e      	cmp	r3, #46	; 0x2e
 8004314:	d10c      	bne.n	8004330 <_svfiprintf_r+0x130>
 8004316:	7863      	ldrb	r3, [r4, #1]
 8004318:	2b2a      	cmp	r3, #42	; 0x2a
 800431a:	d135      	bne.n	8004388 <_svfiprintf_r+0x188>
 800431c:	9b03      	ldr	r3, [sp, #12]
 800431e:	1d1a      	adds	r2, r3, #4
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	9203      	str	r2, [sp, #12]
 8004324:	2b00      	cmp	r3, #0
 8004326:	bfb8      	it	lt
 8004328:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800432c:	3402      	adds	r4, #2
 800432e:	9305      	str	r3, [sp, #20]
 8004330:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80043fc <_svfiprintf_r+0x1fc>
 8004334:	7821      	ldrb	r1, [r4, #0]
 8004336:	2203      	movs	r2, #3
 8004338:	4650      	mov	r0, sl
 800433a:	f7fb ff81 	bl	8000240 <memchr>
 800433e:	b140      	cbz	r0, 8004352 <_svfiprintf_r+0x152>
 8004340:	2340      	movs	r3, #64	; 0x40
 8004342:	eba0 000a 	sub.w	r0, r0, sl
 8004346:	fa03 f000 	lsl.w	r0, r3, r0
 800434a:	9b04      	ldr	r3, [sp, #16]
 800434c:	4303      	orrs	r3, r0
 800434e:	3401      	adds	r4, #1
 8004350:	9304      	str	r3, [sp, #16]
 8004352:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004356:	4826      	ldr	r0, [pc, #152]	; (80043f0 <_svfiprintf_r+0x1f0>)
 8004358:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800435c:	2206      	movs	r2, #6
 800435e:	f7fb ff6f 	bl	8000240 <memchr>
 8004362:	2800      	cmp	r0, #0
 8004364:	d038      	beq.n	80043d8 <_svfiprintf_r+0x1d8>
 8004366:	4b23      	ldr	r3, [pc, #140]	; (80043f4 <_svfiprintf_r+0x1f4>)
 8004368:	bb1b      	cbnz	r3, 80043b2 <_svfiprintf_r+0x1b2>
 800436a:	9b03      	ldr	r3, [sp, #12]
 800436c:	3307      	adds	r3, #7
 800436e:	f023 0307 	bic.w	r3, r3, #7
 8004372:	3308      	adds	r3, #8
 8004374:	9303      	str	r3, [sp, #12]
 8004376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004378:	4433      	add	r3, r6
 800437a:	9309      	str	r3, [sp, #36]	; 0x24
 800437c:	e767      	b.n	800424e <_svfiprintf_r+0x4e>
 800437e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004382:	460c      	mov	r4, r1
 8004384:	2001      	movs	r0, #1
 8004386:	e7a5      	b.n	80042d4 <_svfiprintf_r+0xd4>
 8004388:	2300      	movs	r3, #0
 800438a:	3401      	adds	r4, #1
 800438c:	9305      	str	r3, [sp, #20]
 800438e:	4619      	mov	r1, r3
 8004390:	f04f 0c0a 	mov.w	ip, #10
 8004394:	4620      	mov	r0, r4
 8004396:	f810 2b01 	ldrb.w	r2, [r0], #1
 800439a:	3a30      	subs	r2, #48	; 0x30
 800439c:	2a09      	cmp	r2, #9
 800439e:	d903      	bls.n	80043a8 <_svfiprintf_r+0x1a8>
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0c5      	beq.n	8004330 <_svfiprintf_r+0x130>
 80043a4:	9105      	str	r1, [sp, #20]
 80043a6:	e7c3      	b.n	8004330 <_svfiprintf_r+0x130>
 80043a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80043ac:	4604      	mov	r4, r0
 80043ae:	2301      	movs	r3, #1
 80043b0:	e7f0      	b.n	8004394 <_svfiprintf_r+0x194>
 80043b2:	ab03      	add	r3, sp, #12
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	462a      	mov	r2, r5
 80043b8:	4b0f      	ldr	r3, [pc, #60]	; (80043f8 <_svfiprintf_r+0x1f8>)
 80043ba:	a904      	add	r1, sp, #16
 80043bc:	4638      	mov	r0, r7
 80043be:	f3af 8000 	nop.w
 80043c2:	1c42      	adds	r2, r0, #1
 80043c4:	4606      	mov	r6, r0
 80043c6:	d1d6      	bne.n	8004376 <_svfiprintf_r+0x176>
 80043c8:	89ab      	ldrh	r3, [r5, #12]
 80043ca:	065b      	lsls	r3, r3, #25
 80043cc:	f53f af2c 	bmi.w	8004228 <_svfiprintf_r+0x28>
 80043d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043d2:	b01d      	add	sp, #116	; 0x74
 80043d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043d8:	ab03      	add	r3, sp, #12
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	462a      	mov	r2, r5
 80043de:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <_svfiprintf_r+0x1f8>)
 80043e0:	a904      	add	r1, sp, #16
 80043e2:	4638      	mov	r0, r7
 80043e4:	f000 f87a 	bl	80044dc <_printf_i>
 80043e8:	e7eb      	b.n	80043c2 <_svfiprintf_r+0x1c2>
 80043ea:	bf00      	nop
 80043ec:	08005028 	.word	0x08005028
 80043f0:	08005032 	.word	0x08005032
 80043f4:	00000000 	.word	0x00000000
 80043f8:	0800414b 	.word	0x0800414b
 80043fc:	0800502e 	.word	0x0800502e

08004400 <_printf_common>:
 8004400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004404:	4616      	mov	r6, r2
 8004406:	4699      	mov	r9, r3
 8004408:	688a      	ldr	r2, [r1, #8]
 800440a:	690b      	ldr	r3, [r1, #16]
 800440c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004410:	4293      	cmp	r3, r2
 8004412:	bfb8      	it	lt
 8004414:	4613      	movlt	r3, r2
 8004416:	6033      	str	r3, [r6, #0]
 8004418:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800441c:	4607      	mov	r7, r0
 800441e:	460c      	mov	r4, r1
 8004420:	b10a      	cbz	r2, 8004426 <_printf_common+0x26>
 8004422:	3301      	adds	r3, #1
 8004424:	6033      	str	r3, [r6, #0]
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	0699      	lsls	r1, r3, #26
 800442a:	bf42      	ittt	mi
 800442c:	6833      	ldrmi	r3, [r6, #0]
 800442e:	3302      	addmi	r3, #2
 8004430:	6033      	strmi	r3, [r6, #0]
 8004432:	6825      	ldr	r5, [r4, #0]
 8004434:	f015 0506 	ands.w	r5, r5, #6
 8004438:	d106      	bne.n	8004448 <_printf_common+0x48>
 800443a:	f104 0a19 	add.w	sl, r4, #25
 800443e:	68e3      	ldr	r3, [r4, #12]
 8004440:	6832      	ldr	r2, [r6, #0]
 8004442:	1a9b      	subs	r3, r3, r2
 8004444:	42ab      	cmp	r3, r5
 8004446:	dc26      	bgt.n	8004496 <_printf_common+0x96>
 8004448:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800444c:	1e13      	subs	r3, r2, #0
 800444e:	6822      	ldr	r2, [r4, #0]
 8004450:	bf18      	it	ne
 8004452:	2301      	movne	r3, #1
 8004454:	0692      	lsls	r2, r2, #26
 8004456:	d42b      	bmi.n	80044b0 <_printf_common+0xb0>
 8004458:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800445c:	4649      	mov	r1, r9
 800445e:	4638      	mov	r0, r7
 8004460:	47c0      	blx	r8
 8004462:	3001      	adds	r0, #1
 8004464:	d01e      	beq.n	80044a4 <_printf_common+0xa4>
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	68e5      	ldr	r5, [r4, #12]
 800446a:	6832      	ldr	r2, [r6, #0]
 800446c:	f003 0306 	and.w	r3, r3, #6
 8004470:	2b04      	cmp	r3, #4
 8004472:	bf08      	it	eq
 8004474:	1aad      	subeq	r5, r5, r2
 8004476:	68a3      	ldr	r3, [r4, #8]
 8004478:	6922      	ldr	r2, [r4, #16]
 800447a:	bf0c      	ite	eq
 800447c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004480:	2500      	movne	r5, #0
 8004482:	4293      	cmp	r3, r2
 8004484:	bfc4      	itt	gt
 8004486:	1a9b      	subgt	r3, r3, r2
 8004488:	18ed      	addgt	r5, r5, r3
 800448a:	2600      	movs	r6, #0
 800448c:	341a      	adds	r4, #26
 800448e:	42b5      	cmp	r5, r6
 8004490:	d11a      	bne.n	80044c8 <_printf_common+0xc8>
 8004492:	2000      	movs	r0, #0
 8004494:	e008      	b.n	80044a8 <_printf_common+0xa8>
 8004496:	2301      	movs	r3, #1
 8004498:	4652      	mov	r2, sl
 800449a:	4649      	mov	r1, r9
 800449c:	4638      	mov	r0, r7
 800449e:	47c0      	blx	r8
 80044a0:	3001      	adds	r0, #1
 80044a2:	d103      	bne.n	80044ac <_printf_common+0xac>
 80044a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044ac:	3501      	adds	r5, #1
 80044ae:	e7c6      	b.n	800443e <_printf_common+0x3e>
 80044b0:	18e1      	adds	r1, r4, r3
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	2030      	movs	r0, #48	; 0x30
 80044b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044ba:	4422      	add	r2, r4
 80044bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044c4:	3302      	adds	r3, #2
 80044c6:	e7c7      	b.n	8004458 <_printf_common+0x58>
 80044c8:	2301      	movs	r3, #1
 80044ca:	4622      	mov	r2, r4
 80044cc:	4649      	mov	r1, r9
 80044ce:	4638      	mov	r0, r7
 80044d0:	47c0      	blx	r8
 80044d2:	3001      	adds	r0, #1
 80044d4:	d0e6      	beq.n	80044a4 <_printf_common+0xa4>
 80044d6:	3601      	adds	r6, #1
 80044d8:	e7d9      	b.n	800448e <_printf_common+0x8e>
	...

080044dc <_printf_i>:
 80044dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044e0:	7e0f      	ldrb	r7, [r1, #24]
 80044e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044e4:	2f78      	cmp	r7, #120	; 0x78
 80044e6:	4691      	mov	r9, r2
 80044e8:	4680      	mov	r8, r0
 80044ea:	460c      	mov	r4, r1
 80044ec:	469a      	mov	sl, r3
 80044ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80044f2:	d807      	bhi.n	8004504 <_printf_i+0x28>
 80044f4:	2f62      	cmp	r7, #98	; 0x62
 80044f6:	d80a      	bhi.n	800450e <_printf_i+0x32>
 80044f8:	2f00      	cmp	r7, #0
 80044fa:	f000 80d8 	beq.w	80046ae <_printf_i+0x1d2>
 80044fe:	2f58      	cmp	r7, #88	; 0x58
 8004500:	f000 80a3 	beq.w	800464a <_printf_i+0x16e>
 8004504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004508:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800450c:	e03a      	b.n	8004584 <_printf_i+0xa8>
 800450e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004512:	2b15      	cmp	r3, #21
 8004514:	d8f6      	bhi.n	8004504 <_printf_i+0x28>
 8004516:	a101      	add	r1, pc, #4	; (adr r1, 800451c <_printf_i+0x40>)
 8004518:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800451c:	08004575 	.word	0x08004575
 8004520:	08004589 	.word	0x08004589
 8004524:	08004505 	.word	0x08004505
 8004528:	08004505 	.word	0x08004505
 800452c:	08004505 	.word	0x08004505
 8004530:	08004505 	.word	0x08004505
 8004534:	08004589 	.word	0x08004589
 8004538:	08004505 	.word	0x08004505
 800453c:	08004505 	.word	0x08004505
 8004540:	08004505 	.word	0x08004505
 8004544:	08004505 	.word	0x08004505
 8004548:	08004695 	.word	0x08004695
 800454c:	080045b9 	.word	0x080045b9
 8004550:	08004677 	.word	0x08004677
 8004554:	08004505 	.word	0x08004505
 8004558:	08004505 	.word	0x08004505
 800455c:	080046b7 	.word	0x080046b7
 8004560:	08004505 	.word	0x08004505
 8004564:	080045b9 	.word	0x080045b9
 8004568:	08004505 	.word	0x08004505
 800456c:	08004505 	.word	0x08004505
 8004570:	0800467f 	.word	0x0800467f
 8004574:	682b      	ldr	r3, [r5, #0]
 8004576:	1d1a      	adds	r2, r3, #4
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	602a      	str	r2, [r5, #0]
 800457c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004580:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004584:	2301      	movs	r3, #1
 8004586:	e0a3      	b.n	80046d0 <_printf_i+0x1f4>
 8004588:	6820      	ldr	r0, [r4, #0]
 800458a:	6829      	ldr	r1, [r5, #0]
 800458c:	0606      	lsls	r6, r0, #24
 800458e:	f101 0304 	add.w	r3, r1, #4
 8004592:	d50a      	bpl.n	80045aa <_printf_i+0xce>
 8004594:	680e      	ldr	r6, [r1, #0]
 8004596:	602b      	str	r3, [r5, #0]
 8004598:	2e00      	cmp	r6, #0
 800459a:	da03      	bge.n	80045a4 <_printf_i+0xc8>
 800459c:	232d      	movs	r3, #45	; 0x2d
 800459e:	4276      	negs	r6, r6
 80045a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045a4:	485e      	ldr	r0, [pc, #376]	; (8004720 <_printf_i+0x244>)
 80045a6:	230a      	movs	r3, #10
 80045a8:	e019      	b.n	80045de <_printf_i+0x102>
 80045aa:	680e      	ldr	r6, [r1, #0]
 80045ac:	602b      	str	r3, [r5, #0]
 80045ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80045b2:	bf18      	it	ne
 80045b4:	b236      	sxthne	r6, r6
 80045b6:	e7ef      	b.n	8004598 <_printf_i+0xbc>
 80045b8:	682b      	ldr	r3, [r5, #0]
 80045ba:	6820      	ldr	r0, [r4, #0]
 80045bc:	1d19      	adds	r1, r3, #4
 80045be:	6029      	str	r1, [r5, #0]
 80045c0:	0601      	lsls	r1, r0, #24
 80045c2:	d501      	bpl.n	80045c8 <_printf_i+0xec>
 80045c4:	681e      	ldr	r6, [r3, #0]
 80045c6:	e002      	b.n	80045ce <_printf_i+0xf2>
 80045c8:	0646      	lsls	r6, r0, #25
 80045ca:	d5fb      	bpl.n	80045c4 <_printf_i+0xe8>
 80045cc:	881e      	ldrh	r6, [r3, #0]
 80045ce:	4854      	ldr	r0, [pc, #336]	; (8004720 <_printf_i+0x244>)
 80045d0:	2f6f      	cmp	r7, #111	; 0x6f
 80045d2:	bf0c      	ite	eq
 80045d4:	2308      	moveq	r3, #8
 80045d6:	230a      	movne	r3, #10
 80045d8:	2100      	movs	r1, #0
 80045da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045de:	6865      	ldr	r5, [r4, #4]
 80045e0:	60a5      	str	r5, [r4, #8]
 80045e2:	2d00      	cmp	r5, #0
 80045e4:	bfa2      	ittt	ge
 80045e6:	6821      	ldrge	r1, [r4, #0]
 80045e8:	f021 0104 	bicge.w	r1, r1, #4
 80045ec:	6021      	strge	r1, [r4, #0]
 80045ee:	b90e      	cbnz	r6, 80045f4 <_printf_i+0x118>
 80045f0:	2d00      	cmp	r5, #0
 80045f2:	d04d      	beq.n	8004690 <_printf_i+0x1b4>
 80045f4:	4615      	mov	r5, r2
 80045f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80045fa:	fb03 6711 	mls	r7, r3, r1, r6
 80045fe:	5dc7      	ldrb	r7, [r0, r7]
 8004600:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004604:	4637      	mov	r7, r6
 8004606:	42bb      	cmp	r3, r7
 8004608:	460e      	mov	r6, r1
 800460a:	d9f4      	bls.n	80045f6 <_printf_i+0x11a>
 800460c:	2b08      	cmp	r3, #8
 800460e:	d10b      	bne.n	8004628 <_printf_i+0x14c>
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	07de      	lsls	r6, r3, #31
 8004614:	d508      	bpl.n	8004628 <_printf_i+0x14c>
 8004616:	6923      	ldr	r3, [r4, #16]
 8004618:	6861      	ldr	r1, [r4, #4]
 800461a:	4299      	cmp	r1, r3
 800461c:	bfde      	ittt	le
 800461e:	2330      	movle	r3, #48	; 0x30
 8004620:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004624:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004628:	1b52      	subs	r2, r2, r5
 800462a:	6122      	str	r2, [r4, #16]
 800462c:	f8cd a000 	str.w	sl, [sp]
 8004630:	464b      	mov	r3, r9
 8004632:	aa03      	add	r2, sp, #12
 8004634:	4621      	mov	r1, r4
 8004636:	4640      	mov	r0, r8
 8004638:	f7ff fee2 	bl	8004400 <_printf_common>
 800463c:	3001      	adds	r0, #1
 800463e:	d14c      	bne.n	80046da <_printf_i+0x1fe>
 8004640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004644:	b004      	add	sp, #16
 8004646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800464a:	4835      	ldr	r0, [pc, #212]	; (8004720 <_printf_i+0x244>)
 800464c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004650:	6829      	ldr	r1, [r5, #0]
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	f851 6b04 	ldr.w	r6, [r1], #4
 8004658:	6029      	str	r1, [r5, #0]
 800465a:	061d      	lsls	r5, r3, #24
 800465c:	d514      	bpl.n	8004688 <_printf_i+0x1ac>
 800465e:	07df      	lsls	r7, r3, #31
 8004660:	bf44      	itt	mi
 8004662:	f043 0320 	orrmi.w	r3, r3, #32
 8004666:	6023      	strmi	r3, [r4, #0]
 8004668:	b91e      	cbnz	r6, 8004672 <_printf_i+0x196>
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	f023 0320 	bic.w	r3, r3, #32
 8004670:	6023      	str	r3, [r4, #0]
 8004672:	2310      	movs	r3, #16
 8004674:	e7b0      	b.n	80045d8 <_printf_i+0xfc>
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	f043 0320 	orr.w	r3, r3, #32
 800467c:	6023      	str	r3, [r4, #0]
 800467e:	2378      	movs	r3, #120	; 0x78
 8004680:	4828      	ldr	r0, [pc, #160]	; (8004724 <_printf_i+0x248>)
 8004682:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004686:	e7e3      	b.n	8004650 <_printf_i+0x174>
 8004688:	0659      	lsls	r1, r3, #25
 800468a:	bf48      	it	mi
 800468c:	b2b6      	uxthmi	r6, r6
 800468e:	e7e6      	b.n	800465e <_printf_i+0x182>
 8004690:	4615      	mov	r5, r2
 8004692:	e7bb      	b.n	800460c <_printf_i+0x130>
 8004694:	682b      	ldr	r3, [r5, #0]
 8004696:	6826      	ldr	r6, [r4, #0]
 8004698:	6961      	ldr	r1, [r4, #20]
 800469a:	1d18      	adds	r0, r3, #4
 800469c:	6028      	str	r0, [r5, #0]
 800469e:	0635      	lsls	r5, r6, #24
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	d501      	bpl.n	80046a8 <_printf_i+0x1cc>
 80046a4:	6019      	str	r1, [r3, #0]
 80046a6:	e002      	b.n	80046ae <_printf_i+0x1d2>
 80046a8:	0670      	lsls	r0, r6, #25
 80046aa:	d5fb      	bpl.n	80046a4 <_printf_i+0x1c8>
 80046ac:	8019      	strh	r1, [r3, #0]
 80046ae:	2300      	movs	r3, #0
 80046b0:	6123      	str	r3, [r4, #16]
 80046b2:	4615      	mov	r5, r2
 80046b4:	e7ba      	b.n	800462c <_printf_i+0x150>
 80046b6:	682b      	ldr	r3, [r5, #0]
 80046b8:	1d1a      	adds	r2, r3, #4
 80046ba:	602a      	str	r2, [r5, #0]
 80046bc:	681d      	ldr	r5, [r3, #0]
 80046be:	6862      	ldr	r2, [r4, #4]
 80046c0:	2100      	movs	r1, #0
 80046c2:	4628      	mov	r0, r5
 80046c4:	f7fb fdbc 	bl	8000240 <memchr>
 80046c8:	b108      	cbz	r0, 80046ce <_printf_i+0x1f2>
 80046ca:	1b40      	subs	r0, r0, r5
 80046cc:	6060      	str	r0, [r4, #4]
 80046ce:	6863      	ldr	r3, [r4, #4]
 80046d0:	6123      	str	r3, [r4, #16]
 80046d2:	2300      	movs	r3, #0
 80046d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046d8:	e7a8      	b.n	800462c <_printf_i+0x150>
 80046da:	6923      	ldr	r3, [r4, #16]
 80046dc:	462a      	mov	r2, r5
 80046de:	4649      	mov	r1, r9
 80046e0:	4640      	mov	r0, r8
 80046e2:	47d0      	blx	sl
 80046e4:	3001      	adds	r0, #1
 80046e6:	d0ab      	beq.n	8004640 <_printf_i+0x164>
 80046e8:	6823      	ldr	r3, [r4, #0]
 80046ea:	079b      	lsls	r3, r3, #30
 80046ec:	d413      	bmi.n	8004716 <_printf_i+0x23a>
 80046ee:	68e0      	ldr	r0, [r4, #12]
 80046f0:	9b03      	ldr	r3, [sp, #12]
 80046f2:	4298      	cmp	r0, r3
 80046f4:	bfb8      	it	lt
 80046f6:	4618      	movlt	r0, r3
 80046f8:	e7a4      	b.n	8004644 <_printf_i+0x168>
 80046fa:	2301      	movs	r3, #1
 80046fc:	4632      	mov	r2, r6
 80046fe:	4649      	mov	r1, r9
 8004700:	4640      	mov	r0, r8
 8004702:	47d0      	blx	sl
 8004704:	3001      	adds	r0, #1
 8004706:	d09b      	beq.n	8004640 <_printf_i+0x164>
 8004708:	3501      	adds	r5, #1
 800470a:	68e3      	ldr	r3, [r4, #12]
 800470c:	9903      	ldr	r1, [sp, #12]
 800470e:	1a5b      	subs	r3, r3, r1
 8004710:	42ab      	cmp	r3, r5
 8004712:	dcf2      	bgt.n	80046fa <_printf_i+0x21e>
 8004714:	e7eb      	b.n	80046ee <_printf_i+0x212>
 8004716:	2500      	movs	r5, #0
 8004718:	f104 0619 	add.w	r6, r4, #25
 800471c:	e7f5      	b.n	800470a <_printf_i+0x22e>
 800471e:	bf00      	nop
 8004720:	08005039 	.word	0x08005039
 8004724:	0800504a 	.word	0x0800504a

08004728 <memcpy>:
 8004728:	440a      	add	r2, r1
 800472a:	4291      	cmp	r1, r2
 800472c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004730:	d100      	bne.n	8004734 <memcpy+0xc>
 8004732:	4770      	bx	lr
 8004734:	b510      	push	{r4, lr}
 8004736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800473a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800473e:	4291      	cmp	r1, r2
 8004740:	d1f9      	bne.n	8004736 <memcpy+0xe>
 8004742:	bd10      	pop	{r4, pc}

08004744 <memmove>:
 8004744:	4288      	cmp	r0, r1
 8004746:	b510      	push	{r4, lr}
 8004748:	eb01 0402 	add.w	r4, r1, r2
 800474c:	d902      	bls.n	8004754 <memmove+0x10>
 800474e:	4284      	cmp	r4, r0
 8004750:	4623      	mov	r3, r4
 8004752:	d807      	bhi.n	8004764 <memmove+0x20>
 8004754:	1e43      	subs	r3, r0, #1
 8004756:	42a1      	cmp	r1, r4
 8004758:	d008      	beq.n	800476c <memmove+0x28>
 800475a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800475e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004762:	e7f8      	b.n	8004756 <memmove+0x12>
 8004764:	4402      	add	r2, r0
 8004766:	4601      	mov	r1, r0
 8004768:	428a      	cmp	r2, r1
 800476a:	d100      	bne.n	800476e <memmove+0x2a>
 800476c:	bd10      	pop	{r4, pc}
 800476e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004772:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004776:	e7f7      	b.n	8004768 <memmove+0x24>

08004778 <_free_r>:
 8004778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800477a:	2900      	cmp	r1, #0
 800477c:	d044      	beq.n	8004808 <_free_r+0x90>
 800477e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004782:	9001      	str	r0, [sp, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	f1a1 0404 	sub.w	r4, r1, #4
 800478a:	bfb8      	it	lt
 800478c:	18e4      	addlt	r4, r4, r3
 800478e:	f000 f913 	bl	80049b8 <__malloc_lock>
 8004792:	4a1e      	ldr	r2, [pc, #120]	; (800480c <_free_r+0x94>)
 8004794:	9801      	ldr	r0, [sp, #4]
 8004796:	6813      	ldr	r3, [r2, #0]
 8004798:	b933      	cbnz	r3, 80047a8 <_free_r+0x30>
 800479a:	6063      	str	r3, [r4, #4]
 800479c:	6014      	str	r4, [r2, #0]
 800479e:	b003      	add	sp, #12
 80047a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047a4:	f000 b90e 	b.w	80049c4 <__malloc_unlock>
 80047a8:	42a3      	cmp	r3, r4
 80047aa:	d908      	bls.n	80047be <_free_r+0x46>
 80047ac:	6825      	ldr	r5, [r4, #0]
 80047ae:	1961      	adds	r1, r4, r5
 80047b0:	428b      	cmp	r3, r1
 80047b2:	bf01      	itttt	eq
 80047b4:	6819      	ldreq	r1, [r3, #0]
 80047b6:	685b      	ldreq	r3, [r3, #4]
 80047b8:	1949      	addeq	r1, r1, r5
 80047ba:	6021      	streq	r1, [r4, #0]
 80047bc:	e7ed      	b.n	800479a <_free_r+0x22>
 80047be:	461a      	mov	r2, r3
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	b10b      	cbz	r3, 80047c8 <_free_r+0x50>
 80047c4:	42a3      	cmp	r3, r4
 80047c6:	d9fa      	bls.n	80047be <_free_r+0x46>
 80047c8:	6811      	ldr	r1, [r2, #0]
 80047ca:	1855      	adds	r5, r2, r1
 80047cc:	42a5      	cmp	r5, r4
 80047ce:	d10b      	bne.n	80047e8 <_free_r+0x70>
 80047d0:	6824      	ldr	r4, [r4, #0]
 80047d2:	4421      	add	r1, r4
 80047d4:	1854      	adds	r4, r2, r1
 80047d6:	42a3      	cmp	r3, r4
 80047d8:	6011      	str	r1, [r2, #0]
 80047da:	d1e0      	bne.n	800479e <_free_r+0x26>
 80047dc:	681c      	ldr	r4, [r3, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	6053      	str	r3, [r2, #4]
 80047e2:	4421      	add	r1, r4
 80047e4:	6011      	str	r1, [r2, #0]
 80047e6:	e7da      	b.n	800479e <_free_r+0x26>
 80047e8:	d902      	bls.n	80047f0 <_free_r+0x78>
 80047ea:	230c      	movs	r3, #12
 80047ec:	6003      	str	r3, [r0, #0]
 80047ee:	e7d6      	b.n	800479e <_free_r+0x26>
 80047f0:	6825      	ldr	r5, [r4, #0]
 80047f2:	1961      	adds	r1, r4, r5
 80047f4:	428b      	cmp	r3, r1
 80047f6:	bf04      	itt	eq
 80047f8:	6819      	ldreq	r1, [r3, #0]
 80047fa:	685b      	ldreq	r3, [r3, #4]
 80047fc:	6063      	str	r3, [r4, #4]
 80047fe:	bf04      	itt	eq
 8004800:	1949      	addeq	r1, r1, r5
 8004802:	6021      	streq	r1, [r4, #0]
 8004804:	6054      	str	r4, [r2, #4]
 8004806:	e7ca      	b.n	800479e <_free_r+0x26>
 8004808:	b003      	add	sp, #12
 800480a:	bd30      	pop	{r4, r5, pc}
 800480c:	200002f8 	.word	0x200002f8

08004810 <sbrk_aligned>:
 8004810:	b570      	push	{r4, r5, r6, lr}
 8004812:	4e0e      	ldr	r6, [pc, #56]	; (800484c <sbrk_aligned+0x3c>)
 8004814:	460c      	mov	r4, r1
 8004816:	6831      	ldr	r1, [r6, #0]
 8004818:	4605      	mov	r5, r0
 800481a:	b911      	cbnz	r1, 8004822 <sbrk_aligned+0x12>
 800481c:	f000 f8bc 	bl	8004998 <_sbrk_r>
 8004820:	6030      	str	r0, [r6, #0]
 8004822:	4621      	mov	r1, r4
 8004824:	4628      	mov	r0, r5
 8004826:	f000 f8b7 	bl	8004998 <_sbrk_r>
 800482a:	1c43      	adds	r3, r0, #1
 800482c:	d00a      	beq.n	8004844 <sbrk_aligned+0x34>
 800482e:	1cc4      	adds	r4, r0, #3
 8004830:	f024 0403 	bic.w	r4, r4, #3
 8004834:	42a0      	cmp	r0, r4
 8004836:	d007      	beq.n	8004848 <sbrk_aligned+0x38>
 8004838:	1a21      	subs	r1, r4, r0
 800483a:	4628      	mov	r0, r5
 800483c:	f000 f8ac 	bl	8004998 <_sbrk_r>
 8004840:	3001      	adds	r0, #1
 8004842:	d101      	bne.n	8004848 <sbrk_aligned+0x38>
 8004844:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004848:	4620      	mov	r0, r4
 800484a:	bd70      	pop	{r4, r5, r6, pc}
 800484c:	200002fc 	.word	0x200002fc

08004850 <_malloc_r>:
 8004850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004854:	1ccd      	adds	r5, r1, #3
 8004856:	f025 0503 	bic.w	r5, r5, #3
 800485a:	3508      	adds	r5, #8
 800485c:	2d0c      	cmp	r5, #12
 800485e:	bf38      	it	cc
 8004860:	250c      	movcc	r5, #12
 8004862:	2d00      	cmp	r5, #0
 8004864:	4607      	mov	r7, r0
 8004866:	db01      	blt.n	800486c <_malloc_r+0x1c>
 8004868:	42a9      	cmp	r1, r5
 800486a:	d905      	bls.n	8004878 <_malloc_r+0x28>
 800486c:	230c      	movs	r3, #12
 800486e:	603b      	str	r3, [r7, #0]
 8004870:	2600      	movs	r6, #0
 8004872:	4630      	mov	r0, r6
 8004874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004878:	4e2e      	ldr	r6, [pc, #184]	; (8004934 <_malloc_r+0xe4>)
 800487a:	f000 f89d 	bl	80049b8 <__malloc_lock>
 800487e:	6833      	ldr	r3, [r6, #0]
 8004880:	461c      	mov	r4, r3
 8004882:	bb34      	cbnz	r4, 80048d2 <_malloc_r+0x82>
 8004884:	4629      	mov	r1, r5
 8004886:	4638      	mov	r0, r7
 8004888:	f7ff ffc2 	bl	8004810 <sbrk_aligned>
 800488c:	1c43      	adds	r3, r0, #1
 800488e:	4604      	mov	r4, r0
 8004890:	d14d      	bne.n	800492e <_malloc_r+0xde>
 8004892:	6834      	ldr	r4, [r6, #0]
 8004894:	4626      	mov	r6, r4
 8004896:	2e00      	cmp	r6, #0
 8004898:	d140      	bne.n	800491c <_malloc_r+0xcc>
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	4631      	mov	r1, r6
 800489e:	4638      	mov	r0, r7
 80048a0:	eb04 0803 	add.w	r8, r4, r3
 80048a4:	f000 f878 	bl	8004998 <_sbrk_r>
 80048a8:	4580      	cmp	r8, r0
 80048aa:	d13a      	bne.n	8004922 <_malloc_r+0xd2>
 80048ac:	6821      	ldr	r1, [r4, #0]
 80048ae:	3503      	adds	r5, #3
 80048b0:	1a6d      	subs	r5, r5, r1
 80048b2:	f025 0503 	bic.w	r5, r5, #3
 80048b6:	3508      	adds	r5, #8
 80048b8:	2d0c      	cmp	r5, #12
 80048ba:	bf38      	it	cc
 80048bc:	250c      	movcc	r5, #12
 80048be:	4629      	mov	r1, r5
 80048c0:	4638      	mov	r0, r7
 80048c2:	f7ff ffa5 	bl	8004810 <sbrk_aligned>
 80048c6:	3001      	adds	r0, #1
 80048c8:	d02b      	beq.n	8004922 <_malloc_r+0xd2>
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	442b      	add	r3, r5
 80048ce:	6023      	str	r3, [r4, #0]
 80048d0:	e00e      	b.n	80048f0 <_malloc_r+0xa0>
 80048d2:	6822      	ldr	r2, [r4, #0]
 80048d4:	1b52      	subs	r2, r2, r5
 80048d6:	d41e      	bmi.n	8004916 <_malloc_r+0xc6>
 80048d8:	2a0b      	cmp	r2, #11
 80048da:	d916      	bls.n	800490a <_malloc_r+0xba>
 80048dc:	1961      	adds	r1, r4, r5
 80048de:	42a3      	cmp	r3, r4
 80048e0:	6025      	str	r5, [r4, #0]
 80048e2:	bf18      	it	ne
 80048e4:	6059      	strne	r1, [r3, #4]
 80048e6:	6863      	ldr	r3, [r4, #4]
 80048e8:	bf08      	it	eq
 80048ea:	6031      	streq	r1, [r6, #0]
 80048ec:	5162      	str	r2, [r4, r5]
 80048ee:	604b      	str	r3, [r1, #4]
 80048f0:	4638      	mov	r0, r7
 80048f2:	f104 060b 	add.w	r6, r4, #11
 80048f6:	f000 f865 	bl	80049c4 <__malloc_unlock>
 80048fa:	f026 0607 	bic.w	r6, r6, #7
 80048fe:	1d23      	adds	r3, r4, #4
 8004900:	1af2      	subs	r2, r6, r3
 8004902:	d0b6      	beq.n	8004872 <_malloc_r+0x22>
 8004904:	1b9b      	subs	r3, r3, r6
 8004906:	50a3      	str	r3, [r4, r2]
 8004908:	e7b3      	b.n	8004872 <_malloc_r+0x22>
 800490a:	6862      	ldr	r2, [r4, #4]
 800490c:	42a3      	cmp	r3, r4
 800490e:	bf0c      	ite	eq
 8004910:	6032      	streq	r2, [r6, #0]
 8004912:	605a      	strne	r2, [r3, #4]
 8004914:	e7ec      	b.n	80048f0 <_malloc_r+0xa0>
 8004916:	4623      	mov	r3, r4
 8004918:	6864      	ldr	r4, [r4, #4]
 800491a:	e7b2      	b.n	8004882 <_malloc_r+0x32>
 800491c:	4634      	mov	r4, r6
 800491e:	6876      	ldr	r6, [r6, #4]
 8004920:	e7b9      	b.n	8004896 <_malloc_r+0x46>
 8004922:	230c      	movs	r3, #12
 8004924:	603b      	str	r3, [r7, #0]
 8004926:	4638      	mov	r0, r7
 8004928:	f000 f84c 	bl	80049c4 <__malloc_unlock>
 800492c:	e7a1      	b.n	8004872 <_malloc_r+0x22>
 800492e:	6025      	str	r5, [r4, #0]
 8004930:	e7de      	b.n	80048f0 <_malloc_r+0xa0>
 8004932:	bf00      	nop
 8004934:	200002f8 	.word	0x200002f8

08004938 <_realloc_r>:
 8004938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800493c:	4680      	mov	r8, r0
 800493e:	4614      	mov	r4, r2
 8004940:	460e      	mov	r6, r1
 8004942:	b921      	cbnz	r1, 800494e <_realloc_r+0x16>
 8004944:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004948:	4611      	mov	r1, r2
 800494a:	f7ff bf81 	b.w	8004850 <_malloc_r>
 800494e:	b92a      	cbnz	r2, 800495c <_realloc_r+0x24>
 8004950:	f7ff ff12 	bl	8004778 <_free_r>
 8004954:	4625      	mov	r5, r4
 8004956:	4628      	mov	r0, r5
 8004958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800495c:	f000 f838 	bl	80049d0 <_malloc_usable_size_r>
 8004960:	4284      	cmp	r4, r0
 8004962:	4607      	mov	r7, r0
 8004964:	d802      	bhi.n	800496c <_realloc_r+0x34>
 8004966:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800496a:	d812      	bhi.n	8004992 <_realloc_r+0x5a>
 800496c:	4621      	mov	r1, r4
 800496e:	4640      	mov	r0, r8
 8004970:	f7ff ff6e 	bl	8004850 <_malloc_r>
 8004974:	4605      	mov	r5, r0
 8004976:	2800      	cmp	r0, #0
 8004978:	d0ed      	beq.n	8004956 <_realloc_r+0x1e>
 800497a:	42bc      	cmp	r4, r7
 800497c:	4622      	mov	r2, r4
 800497e:	4631      	mov	r1, r6
 8004980:	bf28      	it	cs
 8004982:	463a      	movcs	r2, r7
 8004984:	f7ff fed0 	bl	8004728 <memcpy>
 8004988:	4631      	mov	r1, r6
 800498a:	4640      	mov	r0, r8
 800498c:	f7ff fef4 	bl	8004778 <_free_r>
 8004990:	e7e1      	b.n	8004956 <_realloc_r+0x1e>
 8004992:	4635      	mov	r5, r6
 8004994:	e7df      	b.n	8004956 <_realloc_r+0x1e>
	...

08004998 <_sbrk_r>:
 8004998:	b538      	push	{r3, r4, r5, lr}
 800499a:	4d06      	ldr	r5, [pc, #24]	; (80049b4 <_sbrk_r+0x1c>)
 800499c:	2300      	movs	r3, #0
 800499e:	4604      	mov	r4, r0
 80049a0:	4608      	mov	r0, r1
 80049a2:	602b      	str	r3, [r5, #0]
 80049a4:	f7fc feb2 	bl	800170c <_sbrk>
 80049a8:	1c43      	adds	r3, r0, #1
 80049aa:	d102      	bne.n	80049b2 <_sbrk_r+0x1a>
 80049ac:	682b      	ldr	r3, [r5, #0]
 80049ae:	b103      	cbz	r3, 80049b2 <_sbrk_r+0x1a>
 80049b0:	6023      	str	r3, [r4, #0]
 80049b2:	bd38      	pop	{r3, r4, r5, pc}
 80049b4:	20000300 	.word	0x20000300

080049b8 <__malloc_lock>:
 80049b8:	4801      	ldr	r0, [pc, #4]	; (80049c0 <__malloc_lock+0x8>)
 80049ba:	f000 b811 	b.w	80049e0 <__retarget_lock_acquire_recursive>
 80049be:	bf00      	nop
 80049c0:	20000304 	.word	0x20000304

080049c4 <__malloc_unlock>:
 80049c4:	4801      	ldr	r0, [pc, #4]	; (80049cc <__malloc_unlock+0x8>)
 80049c6:	f000 b80c 	b.w	80049e2 <__retarget_lock_release_recursive>
 80049ca:	bf00      	nop
 80049cc:	20000304 	.word	0x20000304

080049d0 <_malloc_usable_size_r>:
 80049d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049d4:	1f18      	subs	r0, r3, #4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	bfbc      	itt	lt
 80049da:	580b      	ldrlt	r3, [r1, r0]
 80049dc:	18c0      	addlt	r0, r0, r3
 80049de:	4770      	bx	lr

080049e0 <__retarget_lock_acquire_recursive>:
 80049e0:	4770      	bx	lr

080049e2 <__retarget_lock_release_recursive>:
 80049e2:	4770      	bx	lr

080049e4 <_init>:
 80049e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e6:	bf00      	nop
 80049e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ea:	bc08      	pop	{r3}
 80049ec:	469e      	mov	lr, r3
 80049ee:	4770      	bx	lr

080049f0 <_fini>:
 80049f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f2:	bf00      	nop
 80049f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049f6:	bc08      	pop	{r3}
 80049f8:	469e      	mov	lr, r3
 80049fa:	4770      	bx	lr
