
Proj_STM32F746DISCO_Payment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005be4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dcc  08005db4  08005db4  00015db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b80  08006b80  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006b80  08006b80  00016b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b88  08006b88  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b88  08006b88  00016b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b8c  08006b8c  00016b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006b90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000598  20000078  08006c08  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000610  08006c08  00020610  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121f4  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026b7  00000000  00000000  0003229c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  00034958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d18  00000000  00000000  00035778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e21  00000000  00000000  00036490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012eb9  00000000  00000000  0005d2b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebd29  00000000  00000000  0007016a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015be93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e00  00000000  00000000  0015bee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005d9c 	.word	0x08005d9c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08005d9c 	.word	0x08005d9c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af02      	add	r7, sp, #8
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	f023 030f 	bic.w	r3, r3, #15
 80005c4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	011b      	lsls	r3, r3, #4
 80005ca:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	f043 030c 	orr.w	r3, r3, #12
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	f043 0308 	orr.w	r3, r3, #8
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80005e0:	7bbb      	ldrb	r3, [r7, #14]
 80005e2:	f043 030c 	orr.w	r3, r3, #12
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80005ea:	7bbb      	ldrb	r3, [r7, #14]
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005f4:	f107 0208 	add.w	r2, r7, #8
 80005f8:	2364      	movs	r3, #100	; 0x64
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2304      	movs	r3, #4
 80005fe:	214e      	movs	r1, #78	; 0x4e
 8000600:	4803      	ldr	r0, [pc, #12]	; (8000610 <lcd_send_cmd+0x5c>)
 8000602:	f001 ff79 	bl	80024f8 <HAL_I2C_Master_Transmit>
}
 8000606:	bf00      	nop
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000094 	.word	0x20000094

08000614 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af02      	add	r7, sp, #8
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	f023 030f 	bic.w	r3, r3, #15
 8000624:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	011b      	lsls	r3, r3, #4
 800062a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	f043 030d 	orr.w	r3, r3, #13
 8000632:	b2db      	uxtb	r3, r3
 8000634:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000636:	7bfb      	ldrb	r3, [r7, #15]
 8000638:	f043 0309 	orr.w	r3, r3, #9
 800063c:	b2db      	uxtb	r3, r3
 800063e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000640:	7bbb      	ldrb	r3, [r7, #14]
 8000642:	f043 030d 	orr.w	r3, r3, #13
 8000646:	b2db      	uxtb	r3, r3
 8000648:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 800064a:	7bbb      	ldrb	r3, [r7, #14]
 800064c:	f043 0309 	orr.w	r3, r3, #9
 8000650:	b2db      	uxtb	r3, r3
 8000652:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000654:	f107 0208 	add.w	r2, r7, #8
 8000658:	2364      	movs	r3, #100	; 0x64
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	2304      	movs	r3, #4
 800065e:	214e      	movs	r1, #78	; 0x4e
 8000660:	4803      	ldr	r0, [pc, #12]	; (8000670 <lcd_send_data+0x5c>)
 8000662:	f001 ff49 	bl	80024f8 <HAL_I2C_Master_Transmit>
}
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000094 	.word	0x20000094

08000674 <lcd_init>:
		lcd_send_data (' ');
	}
}

void lcd_init (void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000678:	2032      	movs	r0, #50	; 0x32
 800067a:	f001 fb1f 	bl	8001cbc <HAL_Delay>
	lcd_send_cmd (0x30);
 800067e:	2030      	movs	r0, #48	; 0x30
 8000680:	f7ff ff98 	bl	80005b4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000684:	2005      	movs	r0, #5
 8000686:	f001 fb19 	bl	8001cbc <HAL_Delay>
	lcd_send_cmd (0x30);
 800068a:	2030      	movs	r0, #48	; 0x30
 800068c:	f7ff ff92 	bl	80005b4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000690:	2001      	movs	r0, #1
 8000692:	f001 fb13 	bl	8001cbc <HAL_Delay>
	lcd_send_cmd (0x30);
 8000696:	2030      	movs	r0, #48	; 0x30
 8000698:	f7ff ff8c 	bl	80005b4 <lcd_send_cmd>
	HAL_Delay(10);
 800069c:	200a      	movs	r0, #10
 800069e:	f001 fb0d 	bl	8001cbc <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80006a2:	2020      	movs	r0, #32
 80006a4:	f7ff ff86 	bl	80005b4 <lcd_send_cmd>
	HAL_Delay(10);
 80006a8:	200a      	movs	r0, #10
 80006aa:	f001 fb07 	bl	8001cbc <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80006ae:	2028      	movs	r0, #40	; 0x28
 80006b0:	f7ff ff80 	bl	80005b4 <lcd_send_cmd>
	HAL_Delay(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f001 fb01 	bl	8001cbc <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80006ba:	2008      	movs	r0, #8
 80006bc:	f7ff ff7a 	bl	80005b4 <lcd_send_cmd>
	HAL_Delay(1);
 80006c0:	2001      	movs	r0, #1
 80006c2:	f001 fafb 	bl	8001cbc <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80006c6:	2001      	movs	r0, #1
 80006c8:	f7ff ff74 	bl	80005b4 <lcd_send_cmd>
	HAL_Delay(1);
 80006cc:	2001      	movs	r0, #1
 80006ce:	f001 faf5 	bl	8001cbc <HAL_Delay>
	HAL_Delay(1);
 80006d2:	2001      	movs	r0, #1
 80006d4:	f001 faf2 	bl	8001cbc <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80006d8:	2006      	movs	r0, #6
 80006da:	f7ff ff6b 	bl	80005b4 <lcd_send_cmd>
	HAL_Delay(1);
 80006de:	2001      	movs	r0, #1
 80006e0:	f001 faec 	bl	8001cbc <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80006e4:	200c      	movs	r0, #12
 80006e6:	f7ff ff65 	bl	80005b4 <lcd_send_cmd>
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}

080006ee <lcd_send_string>:

void lcd_send_string (char *str)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b082      	sub	sp, #8
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80006f6:	e006      	b.n	8000706 <lcd_send_string+0x18>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	1c5a      	adds	r2, r3, #1
 80006fc:	607a      	str	r2, [r7, #4]
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ff87 	bl	8000614 <lcd_send_data>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d1f4      	bne.n	80006f8 <lcd_send_string+0xa>
}
 800070e:	bf00      	nop
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <decToBcd>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//convert normal decimal numbers to binary code decimal
uint8_t decToBcd(int val){
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	return (uint8_t) ((val/10*16) + (val%10));
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4a0f      	ldr	r2, [pc, #60]	; (8000760 <decToBcd+0x48>)
 8000724:	fb82 1203 	smull	r1, r2, r2, r3
 8000728:	1092      	asrs	r2, r2, #2
 800072a:	17db      	asrs	r3, r3, #31
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	b2db      	uxtb	r3, r3
 8000730:	011b      	lsls	r3, r3, #4
 8000732:	b2d8      	uxtb	r0, r3
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <decToBcd+0x48>)
 8000738:	fb83 1302 	smull	r1, r3, r3, r2
 800073c:	1099      	asrs	r1, r3, #2
 800073e:	17d3      	asrs	r3, r2, #31
 8000740:	1ac9      	subs	r1, r1, r3
 8000742:	460b      	mov	r3, r1
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	440b      	add	r3, r1
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	1ad1      	subs	r1, r2, r3
 800074c:	b2cb      	uxtb	r3, r1
 800074e:	4403      	add	r3, r0
 8000750:	b2db      	uxtb	r3, r3
}
 8000752:	4618      	mov	r0, r3
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	66666667 	.word	0x66666667

08000764 <bcdToDec>:
//convert binary codec decimal to normal decimal
int bcdToDec(uint8_t val){
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
	return (int) ((val/16*10) + (val%16));
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	091b      	lsrs	r3, r3, #4
 8000772:	b2db      	uxtb	r3, r3
 8000774:	461a      	mov	r2, r3
 8000776:	4613      	mov	r3, r2
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	4413      	add	r3, r2
 800077c:	005b      	lsls	r3, r3, #1
 800077e:	461a      	mov	r2, r3
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	f003 030f 	and.w	r3, r3, #15
 8000786:	4413      	add	r3, r2
}
 8000788:	4618      	mov	r0, r3
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <setTime>:
}WAKTU;

WAKTU time;

//fungsi set
void setTime (uint8_t det, uint8_t mnt, uint8_t jm, uint8_t dow, uint8_t dom, uint8_t bulan, uint8_t thn ){
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b089      	sub	sp, #36	; 0x24
 8000798:	af04      	add	r7, sp, #16
 800079a:	4604      	mov	r4, r0
 800079c:	4608      	mov	r0, r1
 800079e:	4611      	mov	r1, r2
 80007a0:	461a      	mov	r2, r3
 80007a2:	4623      	mov	r3, r4
 80007a4:	71fb      	strb	r3, [r7, #7]
 80007a6:	4603      	mov	r3, r0
 80007a8:	71bb      	strb	r3, [r7, #6]
 80007aa:	460b      	mov	r3, r1
 80007ac:	717b      	strb	r3, [r7, #5]
 80007ae:	4613      	mov	r3, r2
 80007b0:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[7];
	set_time[0] = decToBcd(det);
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ffaf 	bl	8000718 <decToBcd>
 80007ba:	4603      	mov	r3, r0
 80007bc:	723b      	strb	r3, [r7, #8]
	set_time[1] = decToBcd(mnt);
 80007be:	79bb      	ldrb	r3, [r7, #6]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ffa9 	bl	8000718 <decToBcd>
 80007c6:	4603      	mov	r3, r0
 80007c8:	727b      	strb	r3, [r7, #9]
	set_time[2] = decToBcd(jm);
 80007ca:	797b      	ldrb	r3, [r7, #5]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ffa3 	bl	8000718 <decToBcd>
 80007d2:	4603      	mov	r3, r0
 80007d4:	72bb      	strb	r3, [r7, #10]
	set_time[3] = decToBcd(dow);
 80007d6:	793b      	ldrb	r3, [r7, #4]
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ff9d 	bl	8000718 <decToBcd>
 80007de:	4603      	mov	r3, r0
 80007e0:	72fb      	strb	r3, [r7, #11]
	set_time[4] = decToBcd(dom);
 80007e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ff96 	bl	8000718 <decToBcd>
 80007ec:	4603      	mov	r3, r0
 80007ee:	733b      	strb	r3, [r7, #12]
	set_time[5] = decToBcd(bulan);
 80007f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff8f 	bl	8000718 <decToBcd>
 80007fa:	4603      	mov	r3, r0
 80007fc:	737b      	strb	r3, [r7, #13]
	set_time[6] = decToBcd(thn);
 80007fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff88 	bl	8000718 <decToBcd>
 8000808:	4603      	mov	r3, r0
 800080a:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00,1, set_time, 7, 1000);
 800080c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000810:	9302      	str	r3, [sp, #8]
 8000812:	2307      	movs	r3, #7
 8000814:	9301      	str	r3, [sp, #4]
 8000816:	f107 0308 	add.w	r3, r7, #8
 800081a:	9300      	str	r3, [sp, #0]
 800081c:	2301      	movs	r3, #1
 800081e:	2200      	movs	r2, #0
 8000820:	21d0      	movs	r1, #208	; 0xd0
 8000822:	4803      	ldr	r0, [pc, #12]	; (8000830 <setTime+0x9c>)
 8000824:	f001 ff5c 	bl	80026e0 <HAL_I2C_Mem_Write>
}
 8000828:	bf00      	nop
 800082a:	3714      	adds	r7, #20
 800082c:	46bd      	mov	sp, r7
 800082e:	bd90      	pop	{r4, r7, pc}
 8000830:	20000094 	.word	0x20000094

08000834 <getTime>:

void getTime(void){
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 800083a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800083e:	9302      	str	r3, [sp, #8]
 8000840:	2307      	movs	r3, #7
 8000842:	9301      	str	r3, [sp, #4]
 8000844:	463b      	mov	r3, r7
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	2301      	movs	r3, #1
 800084a:	2200      	movs	r2, #0
 800084c:	21d0      	movs	r1, #208	; 0xd0
 800084e:	481f      	ldr	r0, [pc, #124]	; (80008cc <getTime+0x98>)
 8000850:	f002 f85a 	bl	8002908 <HAL_I2C_Mem_Read>
	time.detik	=bcdToDec(get_time[0]);
 8000854:	783b      	ldrb	r3, [r7, #0]
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff ff84 	bl	8000764 <bcdToDec>
 800085c:	4603      	mov	r3, r0
 800085e:	b2da      	uxtb	r2, r3
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <getTime+0x9c>)
 8000862:	701a      	strb	r2, [r3, #0]
	time.menit	=bcdToDec(get_time[1]);
 8000864:	787b      	ldrb	r3, [r7, #1]
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff ff7c 	bl	8000764 <bcdToDec>
 800086c:	4603      	mov	r3, r0
 800086e:	b2da      	uxtb	r2, r3
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <getTime+0x9c>)
 8000872:	705a      	strb	r2, [r3, #1]
	time.jam	=bcdToDec(get_time[2]);
 8000874:	78bb      	ldrb	r3, [r7, #2]
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ff74 	bl	8000764 <bcdToDec>
 800087c:	4603      	mov	r3, r0
 800087e:	b2da      	uxtb	r2, r3
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <getTime+0x9c>)
 8000882:	709a      	strb	r2, [r3, #2]
	time.dow	=bcdToDec(get_time[3]);
 8000884:	78fb      	ldrb	r3, [r7, #3]
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff ff6c 	bl	8000764 <bcdToDec>
 800088c:	4603      	mov	r3, r0
 800088e:	b2da      	uxtb	r2, r3
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <getTime+0x9c>)
 8000892:	70da      	strb	r2, [r3, #3]
	time.dom	=bcdToDec(get_time[4]);
 8000894:	793b      	ldrb	r3, [r7, #4]
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff ff64 	bl	8000764 <bcdToDec>
 800089c:	4603      	mov	r3, r0
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <getTime+0x9c>)
 80008a2:	711a      	strb	r2, [r3, #4]
	time.bulan	=bcdToDec(get_time[5]);
 80008a4:	797b      	ldrb	r3, [r7, #5]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff ff5c 	bl	8000764 <bcdToDec>
 80008ac:	4603      	mov	r3, r0
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <getTime+0x9c>)
 80008b2:	715a      	strb	r2, [r3, #5]
	time.tahun	=bcdToDec(get_time[6]);
 80008b4:	79bb      	ldrb	r3, [r7, #6]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ff54 	bl	8000764 <bcdToDec>
 80008bc:	4603      	mov	r3, r0
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	4b03      	ldr	r3, [pc, #12]	; (80008d0 <getTime+0x9c>)
 80008c2:	719a      	strb	r2, [r3, #6]

}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000094 	.word	0x20000094
 80008d0:	200001e8 	.word	0x200001e8

080008d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008da:	f001 f992 	bl	8001c02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008de:	f000 f865 	bl	80009ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e2:	f000 f97d 	bl	8000be0 <MX_GPIO_Init>
  MX_SPI2_Init();
 80008e6:	f000 f90d 	bl	8000b04 <MX_SPI2_Init>
  MX_USART6_UART_Init();
 80008ea:	f000 f949 	bl	8000b80 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 80008ee:	f000 f8c9 	bl	8000a84 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80008f2:	f7ff febf 	bl	8000674 <lcd_init>
  lcd_init();
 80008f6:	f7ff febd 	bl	8000674 <lcd_init>

  setTime(00, 57, 15, 6, 1, 8, 22);
 80008fa:	2316      	movs	r3, #22
 80008fc:	9302      	str	r3, [sp, #8]
 80008fe:	2308      	movs	r3, #8
 8000900:	9301      	str	r3, [sp, #4]
 8000902:	2301      	movs	r3, #1
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	2306      	movs	r3, #6
 8000908:	220f      	movs	r2, #15
 800090a:	2139      	movs	r1, #57	; 0x39
 800090c:	2000      	movs	r0, #0
 800090e:	f7ff ff41 	bl	8000794 <setTime>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  getTime();
 8000912:	f7ff ff8f 	bl	8000834 <getTime>
	  sprintf(buffer, "%02d:%02d:%02d", time.jam,time.menit,time.detik);
 8000916:	4b20      	ldr	r3, [pc, #128]	; (8000998 <main+0xc4>)
 8000918:	789b      	ldrb	r3, [r3, #2]
 800091a:	461a      	mov	r2, r3
 800091c:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <main+0xc4>)
 800091e:	785b      	ldrb	r3, [r3, #1]
 8000920:	4619      	mov	r1, r3
 8000922:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <main+0xc4>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	9300      	str	r3, [sp, #0]
 8000928:	460b      	mov	r3, r1
 800092a:	491c      	ldr	r1, [pc, #112]	; (800099c <main+0xc8>)
 800092c:	481c      	ldr	r0, [pc, #112]	; (80009a0 <main+0xcc>)
 800092e:	f004 fdc7 	bl	80054c0 <siprintf>
	  lcd_send_cmd(0x80|0x00);//line1
 8000932:	2080      	movs	r0, #128	; 0x80
 8000934:	f7ff fe3e 	bl	80005b4 <lcd_send_cmd>
	  lcd_send_string(buffer);
 8000938:	4819      	ldr	r0, [pc, #100]	; (80009a0 <main+0xcc>)
 800093a:	f7ff fed8 	bl	80006ee <lcd_send_string>
	  SSD1306_GotoXY (0,0);
 800093e:	2100      	movs	r1, #0
 8000940:	2000      	movs	r0, #0
 8000942:	f000 fe2d 	bl	80015a0 <SSD1306_GotoXY>
	  SSD1306_Puts (buffer, &Font_11x18, 1);
 8000946:	2201      	movs	r2, #1
 8000948:	4916      	ldr	r1, [pc, #88]	; (80009a4 <main+0xd0>)
 800094a:	4815      	ldr	r0, [pc, #84]	; (80009a0 <main+0xcc>)
 800094c:	f000 febe 	bl	80016cc <SSD1306_Puts>

	  sprintf(buffer, "%02d/%02d/20%02d", time.dow,time.bulan,time.tahun);
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <main+0xc4>)
 8000952:	78db      	ldrb	r3, [r3, #3]
 8000954:	461a      	mov	r2, r3
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <main+0xc4>)
 8000958:	795b      	ldrb	r3, [r3, #5]
 800095a:	4619      	mov	r1, r3
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <main+0xc4>)
 800095e:	799b      	ldrb	r3, [r3, #6]
 8000960:	9300      	str	r3, [sp, #0]
 8000962:	460b      	mov	r3, r1
 8000964:	4910      	ldr	r1, [pc, #64]	; (80009a8 <main+0xd4>)
 8000966:	480e      	ldr	r0, [pc, #56]	; (80009a0 <main+0xcc>)
 8000968:	f004 fdaa 	bl	80054c0 <siprintf>
	  lcd_send_cmd(0x80|0x40);//line2
 800096c:	20c0      	movs	r0, #192	; 0xc0
 800096e:	f7ff fe21 	bl	80005b4 <lcd_send_cmd>
	  lcd_send_string(buffer);
 8000972:	480b      	ldr	r0, [pc, #44]	; (80009a0 <main+0xcc>)
 8000974:	f7ff febb 	bl	80006ee <lcd_send_string>
	  SSD1306_GotoXY (10, 30);
 8000978:	211e      	movs	r1, #30
 800097a:	200a      	movs	r0, #10
 800097c:	f000 fe10 	bl	80015a0 <SSD1306_GotoXY>
	  SSD1306_Puts (buffer, &Font_11x18, 1);
 8000980:	2201      	movs	r2, #1
 8000982:	4908      	ldr	r1, [pc, #32]	; (80009a4 <main+0xd0>)
 8000984:	4806      	ldr	r0, [pc, #24]	; (80009a0 <main+0xcc>)
 8000986:	f000 fea1 	bl	80016cc <SSD1306_Puts>

	  SSD1306_UpdateScreen(); //display
 800098a:	f000 fd7b 	bl	8001484 <SSD1306_UpdateScreen>

	  HAL_Delay(400);
 800098e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000992:	f001 f993 	bl	8001cbc <HAL_Delay>
	  getTime();
 8000996:	e7bc      	b.n	8000912 <main+0x3e>
 8000998:	200001e8 	.word	0x200001e8
 800099c:	08005db4 	.word	0x08005db4
 80009a0:	200001d4 	.word	0x200001d4
 80009a4:	20000000 	.word	0x20000000
 80009a8:	08005dc4 	.word	0x08005dc4

080009ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b094      	sub	sp, #80	; 0x50
 80009b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b2:	f107 0320 	add.w	r3, r7, #32
 80009b6:	2230      	movs	r2, #48	; 0x30
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f004 fd78 	bl	80054b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d0:	4b2a      	ldr	r3, [pc, #168]	; (8000a7c <SystemClock_Config+0xd0>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	4a29      	ldr	r2, [pc, #164]	; (8000a7c <SystemClock_Config+0xd0>)
 80009d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009da:	6413      	str	r3, [r2, #64]	; 0x40
 80009dc:	4b27      	ldr	r3, [pc, #156]	; (8000a7c <SystemClock_Config+0xd0>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009e8:	4b25      	ldr	r3, [pc, #148]	; (8000a80 <SystemClock_Config+0xd4>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a24      	ldr	r2, [pc, #144]	; (8000a80 <SystemClock_Config+0xd4>)
 80009ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009f2:	6013      	str	r3, [r2, #0]
 80009f4:	4b22      	ldr	r3, [pc, #136]	; (8000a80 <SystemClock_Config+0xd4>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a00:	2302      	movs	r3, #2
 8000a02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a04:	2301      	movs	r3, #1
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a08:	2310      	movs	r3, #16
 8000a0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a10:	2300      	movs	r3, #0
 8000a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a14:	2308      	movs	r3, #8
 8000a16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000a18:	23d8      	movs	r3, #216	; 0xd8
 8000a1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000a20:	2309      	movs	r3, #9
 8000a22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a24:	f107 0320 	add.w	r3, r7, #32
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f002 fc09 	bl	8003240 <HAL_RCC_OscConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a34:	f000 fd20 	bl	8001478 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a38:	f002 fbb2 	bl	80031a0 <HAL_PWREx_EnableOverDrive>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a42:	f000 fd19 	bl	8001478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a46:	230f      	movs	r3, #15
 8000a48:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a52:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a5e:	f107 030c 	add.w	r3, r7, #12
 8000a62:	2107      	movs	r1, #7
 8000a64:	4618      	mov	r0, r3
 8000a66:	f002 fe8f 	bl	8003788 <HAL_RCC_ClockConfig>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000a70:	f000 fd02 	bl	8001478 <Error_Handler>
  }
}
 8000a74:	bf00      	nop
 8000a76:	3750      	adds	r7, #80	; 0x50
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40007000 	.word	0x40007000

08000a84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <MX_I2C1_Init+0x74>)
 8000a8a:	4a1c      	ldr	r2, [pc, #112]	; (8000afc <MX_I2C1_Init+0x78>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <MX_I2C1_Init+0x74>)
 8000a90:	4a1b      	ldr	r2, [pc, #108]	; (8000b00 <MX_I2C1_Init+0x7c>)
 8000a92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <MX_I2C1_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_I2C1_Init+0x74>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_I2C1_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_I2C1_Init+0x74>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_I2C1_Init+0x74>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_I2C1_Init+0x74>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_I2C1_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000abe:	480e      	ldr	r0, [pc, #56]	; (8000af8 <MX_I2C1_Init+0x74>)
 8000ac0:	f001 fc8a 	bl	80023d8 <HAL_I2C_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000aca:	f000 fcd5 	bl	8001478 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4809      	ldr	r0, [pc, #36]	; (8000af8 <MX_I2C1_Init+0x74>)
 8000ad2:	f002 facd 	bl	8003070 <HAL_I2CEx_ConfigAnalogFilter>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000adc:	f000 fccc 	bl	8001478 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_I2C1_Init+0x74>)
 8000ae4:	f002 fb0f 	bl	8003106 <HAL_I2CEx_ConfigDigitalFilter>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000aee:	f000 fcc3 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000094 	.word	0x20000094
 8000afc:	40005400 	.word	0x40005400
 8000b00:	6000030d 	.word	0x6000030d

08000b04 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <MX_SPI2_Init+0x74>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	; (8000b7c <MX_SPI2_Init+0x78>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <MX_SPI2_Init+0x74>)
 8000b10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b14:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b16:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <MX_SPI2_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b1c:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <MX_SPI2_Init+0x74>)
 8000b1e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b22:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_SPI2_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b2a:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <MX_SPI2_Init+0x74>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_SPI2_Init+0x74>)
 8000b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b36:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_SPI2_Init+0x74>)
 8000b3a:	2220      	movs	r2, #32
 8000b3c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_SPI2_Init+0x74>)
 8000b40:	2280      	movs	r2, #128	; 0x80
 8000b42:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_SPI2_Init+0x74>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <MX_SPI2_Init+0x74>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_SPI2_Init+0x74>)
 8000b52:	2207      	movs	r2, #7
 8000b54:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <MX_SPI2_Init+0x74>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_SPI2_Init+0x74>)
 8000b5e:	2208      	movs	r2, #8
 8000b60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_SPI2_Init+0x74>)
 8000b64:	f003 fbe6 	bl	8004334 <HAL_SPI_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000b6e:	f000 fc83 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200000e8 	.word	0x200000e8
 8000b7c:	40003800 	.word	0x40003800

08000b80 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b84:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <MX_USART6_UART_Init+0x58>)
 8000b86:	4a15      	ldr	r2, [pc, #84]	; (8000bdc <MX_USART6_UART_Init+0x5c>)
 8000b88:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000b8a:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <MX_USART6_UART_Init+0x58>)
 8000b8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b90:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_USART6_UART_Init+0x58>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b98:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <MX_USART6_UART_Init+0x58>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_USART6_UART_Init+0x58>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_USART6_UART_Init+0x58>)
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <MX_USART6_UART_Init+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_USART6_UART_Init+0x58>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <MX_USART6_UART_Init+0x58>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <MX_USART6_UART_Init+0x58>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000bc2:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_USART6_UART_Init+0x58>)
 8000bc4:	f003 fc61 	bl	800448a <HAL_UART_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000bce:	f000 fc53 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	2000014c 	.word	0x2000014c
 8000bdc:	40011400 	.word	0x40011400

08000be0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b090      	sub	sp, #64	; 0x40
 8000be4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bf6:	4bae      	ldr	r3, [pc, #696]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4aad      	ldr	r2, [pc, #692]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000bfc:	f043 0310 	orr.w	r3, r3, #16
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4bab      	ldr	r3, [pc, #684]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0310 	and.w	r3, r3, #16
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c0e:	4ba8      	ldr	r3, [pc, #672]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4aa7      	ldr	r2, [pc, #668]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4ba5      	ldr	r3, [pc, #660]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
 8000c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	4ba2      	ldr	r3, [pc, #648]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4aa1      	ldr	r2, [pc, #644]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b9f      	ldr	r3, [pc, #636]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	623b      	str	r3, [r7, #32]
 8000c3c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3e:	4b9c      	ldr	r3, [pc, #624]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a9b      	ldr	r2, [pc, #620]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000c44:	f043 0308 	orr.w	r3, r3, #8
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b99      	ldr	r3, [pc, #612]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0308 	and.w	r3, r3, #8
 8000c52:	61fb      	str	r3, [r7, #28]
 8000c54:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	4b96      	ldr	r3, [pc, #600]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a95      	ldr	r2, [pc, #596]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b93      	ldr	r3, [pc, #588]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	61bb      	str	r3, [r7, #24]
 8000c6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	4b90      	ldr	r3, [pc, #576]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a8f      	ldr	r2, [pc, #572]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b8d      	ldr	r3, [pc, #564]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c86:	4b8a      	ldr	r3, [pc, #552]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a89      	ldr	r2, [pc, #548]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000c8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b87      	ldr	r3, [pc, #540]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c9e:	4b84      	ldr	r3, [pc, #528]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a83      	ldr	r2, [pc, #524]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b81      	ldr	r3, [pc, #516]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000cb6:	4b7e      	ldr	r3, [pc, #504]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a7d      	ldr	r2, [pc, #500]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000cbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b7b      	ldr	r3, [pc, #492]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cce:	4b78      	ldr	r3, [pc, #480]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a77      	ldr	r2, [pc, #476]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000cd4:	f043 0320 	orr.w	r3, r3, #32
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b75      	ldr	r3, [pc, #468]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0320 	and.w	r3, r3, #32
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ce6:	4b72      	ldr	r3, [pc, #456]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a71      	ldr	r2, [pc, #452]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b6f      	ldr	r3, [pc, #444]	; (8000eb0 <MX_GPIO_Init+0x2d0>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	2120      	movs	r1, #32
 8000d02:	486c      	ldr	r0, [pc, #432]	; (8000eb4 <MX_GPIO_Init+0x2d4>)
 8000d04:	f001 fb4e 	bl	80023a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|SS_Pin, GPIO_PIN_RESET);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	210d      	movs	r1, #13
 8000d0c:	486a      	ldr	r0, [pc, #424]	; (8000eb8 <MX_GPIO_Init+0x2d8>)
 8000d0e:	f001 fb49 	bl	80023a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000d12:	2201      	movs	r2, #1
 8000d14:	2108      	movs	r1, #8
 8000d16:	4869      	ldr	r0, [pc, #420]	; (8000ebc <MX_GPIO_Init+0x2dc>)
 8000d18:	f001 fb44 	bl	80023a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d22:	4865      	ldr	r0, [pc, #404]	; (8000eb8 <MX_GPIO_Init+0x2d8>)
 8000d24:	f001 fb3e 	bl	80023a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d2e:	4864      	ldr	r0, [pc, #400]	; (8000ec0 <MX_GPIO_Init+0x2e0>)
 8000d30:	f001 fb38 	bl	80023a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d3a:	4862      	ldr	r0, [pc, #392]	; (8000ec4 <MX_GPIO_Init+0x2e4>)
 8000d3c:	f001 fb32 	bl	80023a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	21c8      	movs	r1, #200	; 0xc8
 8000d44:	4860      	ldr	r0, [pc, #384]	; (8000ec8 <MX_GPIO_Init+0x2e8>)
 8000d46:	f001 fb2d 	bl	80023a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000d4a:	2310      	movs	r3, #16
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d5a:	230e      	movs	r3, #14
 8000d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d62:	4619      	mov	r1, r3
 8000d64:	4859      	ldr	r0, [pc, #356]	; (8000ecc <MX_GPIO_Init+0x2ec>)
 8000d66:	f001 f971 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000d6a:	2308      	movs	r3, #8
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4853      	ldr	r0, [pc, #332]	; (8000ecc <MX_GPIO_Init+0x2ec>)
 8000d7e:	f001 f965 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000d82:	2304      	movs	r3, #4
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d92:	2309      	movs	r3, #9
 8000d94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	484b      	ldr	r0, [pc, #300]	; (8000ecc <MX_GPIO_Init+0x2ec>)
 8000d9e:	f001 f955 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000da2:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db0:	2303      	movs	r3, #3
 8000db2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000db4:	230b      	movs	r3, #11
 8000db6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000db8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4842      	ldr	r0, [pc, #264]	; (8000ec8 <MX_GPIO_Init+0x2e8>)
 8000dc0:	f001 f944 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000dc4:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dd6:	230c      	movs	r3, #12
 8000dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dde:	4619      	mov	r1, r3
 8000de0:	483a      	ldr	r0, [pc, #232]	; (8000ecc <MX_GPIO_Init+0x2ec>)
 8000de2:	f001 f933 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000de6:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	2303      	movs	r3, #3
 8000df6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000df8:	230a      	movs	r3, #10
 8000dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e00:	4619      	mov	r1, r3
 8000e02:	4833      	ldr	r0, [pc, #204]	; (8000ed0 <MX_GPIO_Init+0x2f0>)
 8000e04:	f001 f922 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000e08:	2310      	movs	r3, #16
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e20:	4619      	mov	r1, r3
 8000e22:	482b      	ldr	r0, [pc, #172]	; (8000ed0 <MX_GPIO_Init+0x2f0>)
 8000e24:	f001 f912 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000e38:	2308      	movs	r3, #8
 8000e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000e3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e40:	4619      	mov	r1, r3
 8000e42:	481c      	ldr	r0, [pc, #112]	; (8000eb4 <MX_GPIO_Init+0x2d4>)
 8000e44:	f001 f902 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000e48:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e56:	2303      	movs	r3, #3
 8000e58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e5a:	230c      	movs	r3, #12
 8000e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e62:	4619      	mov	r1, r3
 8000e64:	481b      	ldr	r0, [pc, #108]	; (8000ed4 <MX_GPIO_Init+0x2f4>)
 8000e66:	f001 f8f1 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e84:	4619      	mov	r1, r3
 8000e86:	480f      	ldr	r0, [pc, #60]	; (8000ec4 <MX_GPIO_Init+0x2e4>)
 8000e88:	f001 f8e0 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000e8c:	2360      	movs	r3, #96	; 0x60
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e9c:	230d      	movs	r3, #13
 8000e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ea0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4809      	ldr	r0, [pc, #36]	; (8000ecc <MX_GPIO_Init+0x2ec>)
 8000ea8:	f001 f8d0 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000eac:	2380      	movs	r3, #128	; 0x80
 8000eae:	e013      	b.n	8000ed8 <MX_GPIO_Init+0x2f8>
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020c00 	.word	0x40020c00
 8000eb8:	40022000 	.word	0x40022000
 8000ebc:	40022800 	.word	0x40022800
 8000ec0:	40021c00 	.word	0x40021c00
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	40021800 	.word	0x40021800
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40020400 	.word	0x40020400
 8000ed4:	40020800 	.word	0x40020800
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ee6:	2307      	movs	r3, #7
 8000ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000eea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eee:	4619      	mov	r1, r3
 8000ef0:	48bc      	ldr	r0, [pc, #752]	; (80011e4 <MX_GPIO_Init+0x604>)
 8000ef2:	f001 f8ab 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000ef6:	2340      	movs	r3, #64	; 0x40
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f02:	2303      	movs	r3, #3
 8000f04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f06:	230a      	movs	r3, #10
 8000f08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f0e:	4619      	mov	r1, r3
 8000f10:	48b4      	ldr	r0, [pc, #720]	; (80011e4 <MX_GPIO_Init+0x604>)
 8000f12:	f001 f89b 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000f16:	f248 1333 	movw	r3, #33075	; 0x8133
 8000f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f24:	2303      	movs	r3, #3
 8000f26:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f28:	230c      	movs	r3, #12
 8000f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f30:	4619      	mov	r1, r3
 8000f32:	48ad      	ldr	r0, [pc, #692]	; (80011e8 <MX_GPIO_Init+0x608>)
 8000f34:	f001 f88a 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000f38:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f4a:	230e      	movs	r3, #14
 8000f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000f4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f52:	4619      	mov	r1, r3
 8000f54:	48a5      	ldr	r0, [pc, #660]	; (80011ec <MX_GPIO_Init+0x60c>)
 8000f56:	f001 f879 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f60:	2300      	movs	r3, #0
 8000f62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	489f      	ldr	r0, [pc, #636]	; (80011ec <MX_GPIO_Init+0x60c>)
 8000f70:	f001 f86c 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000f74:	2340      	movs	r3, #64	; 0x40
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f78:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f86:	4619      	mov	r1, r3
 8000f88:	4899      	ldr	r0, [pc, #612]	; (80011f0 <MX_GPIO_Init+0x610>)
 8000f8a:	f001 f85f 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000f8e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000fa0:	230c      	movs	r3, #12
 8000fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4891      	ldr	r0, [pc, #580]	; (80011f0 <MX_GPIO_Init+0x610>)
 8000fac:	f001 f84e 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000fb0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fc2:	230a      	movs	r3, #10
 8000fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4889      	ldr	r0, [pc, #548]	; (80011f4 <MX_GPIO_Init+0x614>)
 8000fce:	f001 f83d 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000fd2:	23f0      	movs	r3, #240	; 0xf0
 8000fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000fe2:	230a      	movs	r3, #10
 8000fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000fe6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fea:	4619      	mov	r1, r3
 8000fec:	4882      	ldr	r0, [pc, #520]	; (80011f8 <MX_GPIO_Init+0x618>)
 8000fee:	f001 f82d 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000ff2:	23f7      	movs	r3, #247	; 0xf7
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001002:	230e      	movs	r3, #14
 8001004:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001006:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800100a:	4619      	mov	r1, r3
 800100c:	487b      	ldr	r0, [pc, #492]	; (80011fc <MX_GPIO_Init+0x61c>)
 800100e:	f001 f81d 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001024:	2309      	movs	r3, #9
 8001026:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800102c:	4619      	mov	r1, r3
 800102e:	486e      	ldr	r0, [pc, #440]	; (80011e8 <MX_GPIO_Init+0x608>)
 8001030:	f001 f80c 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001034:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001046:	230a      	movs	r3, #10
 8001048:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800104a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800104e:	4619      	mov	r1, r3
 8001050:	4865      	ldr	r0, [pc, #404]	; (80011e8 <MX_GPIO_Init+0x608>)
 8001052:	f000 fffb 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001056:	2320      	movs	r3, #32
 8001058:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	2301      	movs	r3, #1
 800105c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800106a:	4619      	mov	r1, r3
 800106c:	4860      	ldr	r0, [pc, #384]	; (80011f0 <MX_GPIO_Init+0x610>)
 800106e:	f000 ffed 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001072:	2308      	movs	r3, #8
 8001074:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001082:	230d      	movs	r3, #13
 8001084:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001086:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800108a:	4619      	mov	r1, r3
 800108c:	4858      	ldr	r0, [pc, #352]	; (80011f0 <MX_GPIO_Init+0x610>)
 800108e:	f000 ffdd 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin SS_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin|SS_Pin;
 8001092:	f241 030d 	movw	r3, #4109	; 0x100d
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80010a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010a8:	4619      	mov	r1, r3
 80010aa:	4853      	ldr	r0, [pc, #332]	; (80011f8 <MX_GPIO_Init+0x618>)
 80010ac:	f000 ffce 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80010b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b6:	2300      	movs	r3, #0
 80010b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80010be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010c2:	4619      	mov	r1, r3
 80010c4:	484e      	ldr	r0, [pc, #312]	; (8001200 <MX_GPIO_Init+0x620>)
 80010c6:	f000 ffc1 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80010ca:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d8:	2303      	movs	r3, #3
 80010da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010dc:	230c      	movs	r3, #12
 80010de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010e4:	4619      	mov	r1, r3
 80010e6:	4847      	ldr	r0, [pc, #284]	; (8001204 <MX_GPIO_Init+0x624>)
 80010e8:	f000 ffb0 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80010ec:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2300      	movs	r3, #0
 80010fc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010fe:	230e      	movs	r3, #14
 8001100:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001102:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001106:	4619      	mov	r1, r3
 8001108:	483b      	ldr	r0, [pc, #236]	; (80011f8 <MX_GPIO_Init+0x618>)
 800110a:	f000 ff9f 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800110e:	2308      	movs	r3, #8
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001122:	4619      	mov	r1, r3
 8001124:	4835      	ldr	r0, [pc, #212]	; (80011fc <MX_GPIO_Init+0x61c>)
 8001126:	f000 ff91 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800112a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800113c:	230d      	movs	r3, #13
 800113e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001140:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001144:	4619      	mov	r1, r3
 8001146:	4828      	ldr	r0, [pc, #160]	; (80011e8 <MX_GPIO_Init+0x608>)
 8001148:	f000 ff80 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800114c:	2310      	movs	r3, #16
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001150:	2300      	movs	r3, #0
 8001152:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800115c:	4619      	mov	r1, r3
 800115e:	4824      	ldr	r0, [pc, #144]	; (80011f0 <MX_GPIO_Init+0x610>)
 8001160:	f000 ff74 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001164:	2304      	movs	r3, #4
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001174:	230c      	movs	r3, #12
 8001176:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001178:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800117c:	4619      	mov	r1, r3
 800117e:	481c      	ldr	r0, [pc, #112]	; (80011f0 <MX_GPIO_Init+0x610>)
 8001180:	f000 ff64 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001184:	f248 0304 	movw	r3, #32772	; 0x8004
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800118a:	2300      	movs	r3, #0
 800118c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001192:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001196:	4619      	mov	r1, r3
 8001198:	481b      	ldr	r0, [pc, #108]	; (8001208 <MX_GPIO_Init+0x628>)
 800119a:	f000 ff57 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800119e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80011b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011b4:	4619      	mov	r1, r3
 80011b6:	4814      	ldr	r0, [pc, #80]	; (8001208 <MX_GPIO_Init+0x628>)
 80011b8:	f000 ff48 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80011bc:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011ce:	230d      	movs	r3, #13
 80011d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011d6:	4619      	mov	r1, r3
 80011d8:	480b      	ldr	r0, [pc, #44]	; (8001208 <MX_GPIO_Init+0x628>)
 80011da:	f000 ff37 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 80011de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011e2:	e013      	b.n	800120c <MX_GPIO_Init+0x62c>
 80011e4:	40020400 	.word	0x40020400
 80011e8:	40021800 	.word	0x40021800
 80011ec:	40022400 	.word	0x40022400
 80011f0:	40020c00 	.word	0x40020c00
 80011f4:	40020000 	.word	0x40020000
 80011f8:	40022000 	.word	0x40022000
 80011fc:	40022800 	.word	0x40022800
 8001200:	40020800 	.word	0x40020800
 8001204:	40021400 	.word	0x40021400
 8001208:	40021c00 	.word	0x40021c00
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800121a:	2307      	movs	r3, #7
 800121c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800121e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001222:	4619      	mov	r1, r3
 8001224:	488c      	ldr	r0, [pc, #560]	; (8001458 <MX_GPIO_Init+0x878>)
 8001226:	f000 ff11 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 800122a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001230:	2301      	movs	r3, #1
 8001232:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 800123c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001240:	4619      	mov	r1, r3
 8001242:	4885      	ldr	r0, [pc, #532]	; (8001458 <MX_GPIO_Init+0x878>)
 8001244:	f000 ff02 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800124c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800124e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001252:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001258:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800125c:	4619      	mov	r1, r3
 800125e:	487f      	ldr	r0, [pc, #508]	; (800145c <MX_GPIO_Init+0x87c>)
 8001260:	f000 fef4 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001264:	2310      	movs	r3, #16
 8001266:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001270:	2303      	movs	r3, #3
 8001272:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001274:	230a      	movs	r3, #10
 8001276:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001278:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800127c:	4619      	mov	r1, r3
 800127e:	4878      	ldr	r0, [pc, #480]	; (8001460 <MX_GPIO_Init+0x880>)
 8001280:	f000 fee4 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001284:	2328      	movs	r3, #40	; 0x28
 8001286:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001290:	2303      	movs	r3, #3
 8001292:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001294:	230c      	movs	r3, #12
 8001296:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001298:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800129c:	4619      	mov	r1, r3
 800129e:	4870      	ldr	r0, [pc, #448]	; (8001460 <MX_GPIO_Init+0x880>)
 80012a0:	f000 fed4 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80012a4:	23c8      	movs	r3, #200	; 0xc8
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012b8:	4619      	mov	r1, r3
 80012ba:	486a      	ldr	r0, [pc, #424]	; (8001464 <MX_GPIO_Init+0x884>)
 80012bc:	f000 fec6 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80012c0:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c6:	2303      	movs	r3, #3
 80012c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012d2:	4619      	mov	r1, r3
 80012d4:	4864      	ldr	r0, [pc, #400]	; (8001468 <MX_GPIO_Init+0x888>)
 80012d6:	f000 feb9 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80012da:	2308      	movs	r3, #8
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e6:	2303      	movs	r3, #3
 80012e8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012ea:	230c      	movs	r3, #12
 80012ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80012ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012f2:	4619      	mov	r1, r3
 80012f4:	485d      	ldr	r0, [pc, #372]	; (800146c <MX_GPIO_Init+0x88c>)
 80012f6:	f000 fea9 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80012fa:	2305      	movs	r3, #5
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001306:	2303      	movs	r3, #3
 8001308:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800130a:	230a      	movs	r3, #10
 800130c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001312:	4619      	mov	r1, r3
 8001314:	4855      	ldr	r0, [pc, #340]	; (800146c <MX_GPIO_Init+0x88c>)
 8001316:	f000 fe99 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800131a:	2332      	movs	r3, #50	; 0x32
 800131c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	2302      	movs	r3, #2
 8001320:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001326:	2303      	movs	r3, #3
 8001328:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800132a:	230b      	movs	r3, #11
 800132c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001332:	4619      	mov	r1, r3
 8001334:	484d      	ldr	r0, [pc, #308]	; (800146c <MX_GPIO_Init+0x88c>)
 8001336:	f000 fe89 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800133a:	2304      	movs	r3, #4
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001346:	2303      	movs	r3, #3
 8001348:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800134a:	2309      	movs	r3, #9
 800134c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001352:	4619      	mov	r1, r3
 8001354:	4846      	ldr	r0, [pc, #280]	; (8001470 <MX_GPIO_Init+0x890>)
 8001356:	f000 fe79 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800135a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001368:	2303      	movs	r3, #3
 800136a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800136c:	2309      	movs	r3, #9
 800136e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001370:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001374:	4619      	mov	r1, r3
 8001376:	483f      	ldr	r0, [pc, #252]	; (8001474 <MX_GPIO_Init+0x894>)
 8001378:	f000 fe68 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800137c:	2304      	movs	r3, #4
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001380:	2300      	movs	r3, #0
 8001382:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001388:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800138c:	4619      	mov	r1, r3
 800138e:	4835      	ldr	r0, [pc, #212]	; (8001464 <MX_GPIO_Init+0x884>)
 8001390:	f000 fe5c 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001394:	2386      	movs	r3, #134	; 0x86
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a0:	2303      	movs	r3, #3
 80013a2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013a4:	230b      	movs	r3, #11
 80013a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013ac:	4619      	mov	r1, r3
 80013ae:	482a      	ldr	r0, [pc, #168]	; (8001458 <MX_GPIO_Init+0x878>)
 80013b0:	f000 fe4c 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80013b4:	2301      	movs	r3, #1
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b8:	2303      	movs	r3, #3
 80013ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80013c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013c4:	4619      	mov	r1, r3
 80013c6:	4824      	ldr	r0, [pc, #144]	; (8001458 <MX_GPIO_Init+0x878>)
 80013c8:	f000 fe40 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80013cc:	2350      	movs	r3, #80	; 0x50
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2300      	movs	r3, #0
 80013da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80013dc:	230d      	movs	r3, #13
 80013de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013e4:	4619      	mov	r1, r3
 80013e6:	481c      	ldr	r0, [pc, #112]	; (8001458 <MX_GPIO_Init+0x878>)
 80013e8:	f000 fe30 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80013ec:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80013f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013f2:	2312      	movs	r3, #18
 80013f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013f6:	2301      	movs	r3, #1
 80013f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013fe:	2304      	movs	r3, #4
 8001400:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001402:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001406:	4619      	mov	r1, r3
 8001408:	4815      	ldr	r0, [pc, #84]	; (8001460 <MX_GPIO_Init+0x880>)
 800140a:	f000 fe1f 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800140e:	2328      	movs	r3, #40	; 0x28
 8001410:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141a:	2303      	movs	r3, #3
 800141c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800141e:	230a      	movs	r3, #10
 8001420:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001426:	4619      	mov	r1, r3
 8001428:	480b      	ldr	r0, [pc, #44]	; (8001458 <MX_GPIO_Init+0x878>)
 800142a:	f000 fe0f 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800142e:	2340      	movs	r3, #64	; 0x40
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800143e:	2309      	movs	r3, #9
 8001440:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001442:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001446:	4619      	mov	r1, r3
 8001448:	4805      	ldr	r0, [pc, #20]	; (8001460 <MX_GPIO_Init+0x880>)
 800144a:	f000 fdff 	bl	800204c <HAL_GPIO_Init>

}
 800144e:	bf00      	nop
 8001450:	3740      	adds	r7, #64	; 0x40
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40020000 	.word	0x40020000
 800145c:	40022000 	.word	0x40022000
 8001460:	40021c00 	.word	0x40021c00
 8001464:	40021800 	.word	0x40021800
 8001468:	40021400 	.word	0x40021400
 800146c:	40020800 	.word	0x40020800
 8001470:	40020400 	.word	0x40020400
 8001474:	40020c00 	.word	0x40020c00

08001478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800147c:	b672      	cpsid	i
}
 800147e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001480:	e7fe      	b.n	8001480 <Error_Handler+0x8>
	...

08001484 <SSD1306_UpdateScreen>:
	
	/* Return OK */
	return 1;
}

void SSD1306_UpdateScreen(void) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800148a:	2300      	movs	r3, #0
 800148c:	71fb      	strb	r3, [r7, #7]
 800148e:	e01d      	b.n	80014cc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	3b50      	subs	r3, #80	; 0x50
 8001494:	b2db      	uxtb	r3, r3
 8001496:	461a      	mov	r2, r3
 8001498:	2100      	movs	r1, #0
 800149a:	2078      	movs	r0, #120	; 0x78
 800149c:	f000 f9a2 	bl	80017e4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2100      	movs	r1, #0
 80014a4:	2078      	movs	r0, #120	; 0x78
 80014a6:	f000 f99d 	bl	80017e4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80014aa:	2210      	movs	r2, #16
 80014ac:	2100      	movs	r1, #0
 80014ae:	2078      	movs	r0, #120	; 0x78
 80014b0:	f000 f998 	bl	80017e4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	01db      	lsls	r3, r3, #7
 80014b8:	4a08      	ldr	r2, [pc, #32]	; (80014dc <SSD1306_UpdateScreen+0x58>)
 80014ba:	441a      	add	r2, r3
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	2140      	movs	r1, #64	; 0x40
 80014c0:	2078      	movs	r0, #120	; 0x78
 80014c2:	f000 f929 	bl	8001718 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	3301      	adds	r3, #1
 80014ca:	71fb      	strb	r3, [r7, #7]
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	2b07      	cmp	r3, #7
 80014d0:	d9de      	bls.n	8001490 <SSD1306_UpdateScreen+0xc>
	}
}
 80014d2:	bf00      	nop
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	200001f0 	.word	0x200001f0

080014e0 <SSD1306_DrawPixel>:
void SSD1306_Fill(SSD1306_COLOR_t color) {
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
}

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	80fb      	strh	r3, [r7, #6]
 80014ea:	460b      	mov	r3, r1
 80014ec:	80bb      	strh	r3, [r7, #4]
 80014ee:	4613      	mov	r3, r2
 80014f0:	70fb      	strb	r3, [r7, #3]
	if (
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	2b7f      	cmp	r3, #127	; 0x7f
 80014f6:	d848      	bhi.n	800158a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80014f8:	88bb      	ldrh	r3, [r7, #4]
 80014fa:	2b3f      	cmp	r3, #63	; 0x3f
 80014fc:	d845      	bhi.n	800158a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80014fe:	4b26      	ldr	r3, [pc, #152]	; (8001598 <SSD1306_DrawPixel+0xb8>)
 8001500:	791b      	ldrb	r3, [r3, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d006      	beq.n	8001514 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001506:	78fb      	ldrb	r3, [r7, #3]
 8001508:	2b00      	cmp	r3, #0
 800150a:	bf0c      	ite	eq
 800150c:	2301      	moveq	r3, #1
 800150e:	2300      	movne	r3, #0
 8001510:	b2db      	uxtb	r3, r3
 8001512:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001514:	78fb      	ldrb	r3, [r7, #3]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d11a      	bne.n	8001550 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800151a:	88fa      	ldrh	r2, [r7, #6]
 800151c:	88bb      	ldrh	r3, [r7, #4]
 800151e:	08db      	lsrs	r3, r3, #3
 8001520:	b298      	uxth	r0, r3
 8001522:	4603      	mov	r3, r0
 8001524:	01db      	lsls	r3, r3, #7
 8001526:	4413      	add	r3, r2
 8001528:	4a1c      	ldr	r2, [pc, #112]	; (800159c <SSD1306_DrawPixel+0xbc>)
 800152a:	5cd3      	ldrb	r3, [r2, r3]
 800152c:	b25a      	sxtb	r2, r3
 800152e:	88bb      	ldrh	r3, [r7, #4]
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	2101      	movs	r1, #1
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	b25b      	sxtb	r3, r3
 800153c:	4313      	orrs	r3, r2
 800153e:	b259      	sxtb	r1, r3
 8001540:	88fa      	ldrh	r2, [r7, #6]
 8001542:	4603      	mov	r3, r0
 8001544:	01db      	lsls	r3, r3, #7
 8001546:	4413      	add	r3, r2
 8001548:	b2c9      	uxtb	r1, r1
 800154a:	4a14      	ldr	r2, [pc, #80]	; (800159c <SSD1306_DrawPixel+0xbc>)
 800154c:	54d1      	strb	r1, [r2, r3]
 800154e:	e01d      	b.n	800158c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001550:	88fa      	ldrh	r2, [r7, #6]
 8001552:	88bb      	ldrh	r3, [r7, #4]
 8001554:	08db      	lsrs	r3, r3, #3
 8001556:	b298      	uxth	r0, r3
 8001558:	4603      	mov	r3, r0
 800155a:	01db      	lsls	r3, r3, #7
 800155c:	4413      	add	r3, r2
 800155e:	4a0f      	ldr	r2, [pc, #60]	; (800159c <SSD1306_DrawPixel+0xbc>)
 8001560:	5cd3      	ldrb	r3, [r2, r3]
 8001562:	b25a      	sxtb	r2, r3
 8001564:	88bb      	ldrh	r3, [r7, #4]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	2101      	movs	r1, #1
 800156c:	fa01 f303 	lsl.w	r3, r1, r3
 8001570:	b25b      	sxtb	r3, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	b25b      	sxtb	r3, r3
 8001576:	4013      	ands	r3, r2
 8001578:	b259      	sxtb	r1, r3
 800157a:	88fa      	ldrh	r2, [r7, #6]
 800157c:	4603      	mov	r3, r0
 800157e:	01db      	lsls	r3, r3, #7
 8001580:	4413      	add	r3, r2
 8001582:	b2c9      	uxtb	r1, r1
 8001584:	4a05      	ldr	r2, [pc, #20]	; (800159c <SSD1306_DrawPixel+0xbc>)
 8001586:	54d1      	strb	r1, [r2, r3]
 8001588:	e000      	b.n	800158c <SSD1306_DrawPixel+0xac>
		return;
 800158a:	bf00      	nop
	}
}
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	200005f0 	.word	0x200005f0
 800159c:	200001f0 	.word	0x200001f0

080015a0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	460a      	mov	r2, r1
 80015aa:	80fb      	strh	r3, [r7, #6]
 80015ac:	4613      	mov	r3, r2
 80015ae:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80015b0:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <SSD1306_GotoXY+0x28>)
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80015b6:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <SSD1306_GotoXY+0x28>)
 80015b8:	88bb      	ldrh	r3, [r7, #4]
 80015ba:	8053      	strh	r3, [r2, #2]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	200005f0 	.word	0x200005f0

080015cc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	71fb      	strb	r3, [r7, #7]
 80015d8:	4613      	mov	r3, r2
 80015da:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80015dc:	4b3a      	ldr	r3, [pc, #232]	; (80016c8 <SSD1306_Putc+0xfc>)
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	4413      	add	r3, r2
	if (
 80015e8:	2b7f      	cmp	r3, #127	; 0x7f
 80015ea:	dc07      	bgt.n	80015fc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80015ec:	4b36      	ldr	r3, [pc, #216]	; (80016c8 <SSD1306_Putc+0xfc>)
 80015ee:	885b      	ldrh	r3, [r3, #2]
 80015f0:	461a      	mov	r2, r3
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	785b      	ldrb	r3, [r3, #1]
 80015f6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80015f8:	2b3f      	cmp	r3, #63	; 0x3f
 80015fa:	dd01      	ble.n	8001600 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	e05e      	b.n	80016be <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	e04b      	b.n	800169e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	3b20      	subs	r3, #32
 800160e:	6839      	ldr	r1, [r7, #0]
 8001610:	7849      	ldrb	r1, [r1, #1]
 8001612:	fb01 f303 	mul.w	r3, r1, r3
 8001616:	4619      	mov	r1, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	440b      	add	r3, r1
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	4413      	add	r3, r2
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001624:	2300      	movs	r3, #0
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	e030      	b.n	800168c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d010      	beq.n	800165c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800163a:	4b23      	ldr	r3, [pc, #140]	; (80016c8 <SSD1306_Putc+0xfc>)
 800163c:	881a      	ldrh	r2, [r3, #0]
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	b29b      	uxth	r3, r3
 8001642:	4413      	add	r3, r2
 8001644:	b298      	uxth	r0, r3
 8001646:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <SSD1306_Putc+0xfc>)
 8001648:	885a      	ldrh	r2, [r3, #2]
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	b29b      	uxth	r3, r3
 800164e:	4413      	add	r3, r2
 8001650:	b29b      	uxth	r3, r3
 8001652:	79ba      	ldrb	r2, [r7, #6]
 8001654:	4619      	mov	r1, r3
 8001656:	f7ff ff43 	bl	80014e0 <SSD1306_DrawPixel>
 800165a:	e014      	b.n	8001686 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800165c:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <SSD1306_Putc+0xfc>)
 800165e:	881a      	ldrh	r2, [r3, #0]
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	b29b      	uxth	r3, r3
 8001664:	4413      	add	r3, r2
 8001666:	b298      	uxth	r0, r3
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <SSD1306_Putc+0xfc>)
 800166a:	885a      	ldrh	r2, [r3, #2]
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	b29b      	uxth	r3, r3
 8001670:	4413      	add	r3, r2
 8001672:	b299      	uxth	r1, r3
 8001674:	79bb      	ldrb	r3, [r7, #6]
 8001676:	2b00      	cmp	r3, #0
 8001678:	bf0c      	ite	eq
 800167a:	2301      	moveq	r3, #1
 800167c:	2300      	movne	r3, #0
 800167e:	b2db      	uxtb	r3, r3
 8001680:	461a      	mov	r2, r3
 8001682:	f7ff ff2d 	bl	80014e0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	3301      	adds	r3, #1
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	4293      	cmp	r3, r2
 8001696:	d3c8      	bcc.n	800162a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	3301      	adds	r3, #1
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	785b      	ldrb	r3, [r3, #1]
 80016a2:	461a      	mov	r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d3ad      	bcc.n	8001606 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80016aa:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <SSD1306_Putc+0xfc>)
 80016ac:	881a      	ldrh	r2, [r3, #0]
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	4413      	add	r3, r2
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	4b03      	ldr	r3, [pc, #12]	; (80016c8 <SSD1306_Putc+0xfc>)
 80016ba:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80016bc:	79fb      	ldrb	r3, [r7, #7]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200005f0 	.word	0x200005f0

080016cc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	4613      	mov	r3, r2
 80016d8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80016da:	e012      	b.n	8001702 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	79fa      	ldrb	r2, [r7, #7]
 80016e2:	68b9      	ldr	r1, [r7, #8]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff71 	bl	80015cc <SSD1306_Putc>
 80016ea:	4603      	mov	r3, r0
 80016ec:	461a      	mov	r2, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d002      	beq.n	80016fc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	e008      	b.n	800170e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	3301      	adds	r3, #1
 8001700:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1e8      	bne.n	80016dc <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	781b      	ldrb	r3, [r3, #0]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b0c7      	sub	sp, #284	; 0x11c
 800171c:	af02      	add	r7, sp, #8
 800171e:	4604      	mov	r4, r0
 8001720:	4608      	mov	r0, r1
 8001722:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001726:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800172a:	600a      	str	r2, [r1, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001732:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001736:	4622      	mov	r2, r4
 8001738:	701a      	strb	r2, [r3, #0]
 800173a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800173e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001742:	4602      	mov	r2, r0
 8001744:	701a      	strb	r2, [r3, #0]
 8001746:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800174a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800174e:	460a      	mov	r2, r1
 8001750:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001752:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001756:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800175a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800175e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001762:	7812      	ldrb	r2, [r2, #0]
 8001764:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001766:	2300      	movs	r3, #0
 8001768:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800176c:	e015      	b.n	800179a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800176e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001772:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001776:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	441a      	add	r2, r3
 800177e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001782:	3301      	adds	r3, #1
 8001784:	7811      	ldrb	r1, [r2, #0]
 8001786:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800178a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800178e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001790:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001794:	3301      	adds	r3, #1
 8001796:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800179a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800179e:	b29b      	uxth	r3, r3
 80017a0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80017a4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80017a8:	8812      	ldrh	r2, [r2, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d8df      	bhi.n	800176e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80017ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80017b2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	b299      	uxth	r1, r3
 80017ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80017be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	3301      	adds	r3, #1
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	f107 020c 	add.w	r2, r7, #12
 80017cc:	200a      	movs	r0, #10
 80017ce:	9000      	str	r0, [sp, #0]
 80017d0:	4803      	ldr	r0, [pc, #12]	; (80017e0 <ssd1306_I2C_WriteMulti+0xc8>)
 80017d2:	f000 fe91 	bl	80024f8 <HAL_I2C_Master_Transmit>
}
 80017d6:	bf00      	nop
 80017d8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd90      	pop	{r4, r7, pc}
 80017e0:	20000094 	.word	0x20000094

080017e4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af02      	add	r7, sp, #8
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
 80017ee:	460b      	mov	r3, r1
 80017f0:	71bb      	strb	r3, [r7, #6]
 80017f2:	4613      	mov	r3, r2
 80017f4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80017f6:	79bb      	ldrb	r3, [r7, #6]
 80017f8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80017fa:	797b      	ldrb	r3, [r7, #5]
 80017fc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	b299      	uxth	r1, r3
 8001802:	f107 020c 	add.w	r2, r7, #12
 8001806:	230a      	movs	r3, #10
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	2302      	movs	r3, #2
 800180c:	4803      	ldr	r0, [pc, #12]	; (800181c <ssd1306_I2C_Write+0x38>)
 800180e:	f000 fe73 	bl	80024f8 <HAL_I2C_Master_Transmit>
}
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000094 	.word	0x20000094

08001820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <HAL_MspInit+0x44>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	4a0e      	ldr	r2, [pc, #56]	; (8001864 <HAL_MspInit+0x44>)
 800182c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001830:	6413      	str	r3, [r2, #64]	; 0x40
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <HAL_MspInit+0x44>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <HAL_MspInit+0x44>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	4a08      	ldr	r2, [pc, #32]	; (8001864 <HAL_MspInit+0x44>)
 8001844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001848:	6453      	str	r3, [r2, #68]	; 0x44
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_MspInit+0x44>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800

08001868 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b0aa      	sub	sp, #168	; 0xa8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001880:	f107 0310 	add.w	r3, r7, #16
 8001884:	2284      	movs	r2, #132	; 0x84
 8001886:	2100      	movs	r1, #0
 8001888:	4618      	mov	r0, r3
 800188a:	f003 fe11 	bl	80054b0 <memset>
  if(hi2c->Instance==I2C1)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a22      	ldr	r2, [pc, #136]	; (800191c <HAL_I2C_MspInit+0xb4>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d13c      	bne.n	8001912 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001898:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800189c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800189e:	2300      	movs	r3, #0
 80018a0:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018a2:	f107 0310 	add.w	r3, r7, #16
 80018a6:	4618      	mov	r0, r3
 80018a8:	f002 f954 	bl	8003b54 <HAL_RCCEx_PeriphCLKConfig>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80018b2:	f7ff fde1 	bl	8001478 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b6:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <HAL_I2C_MspInit+0xb8>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a19      	ldr	r2, [pc, #100]	; (8001920 <HAL_I2C_MspInit+0xb8>)
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b17      	ldr	r3, [pc, #92]	; (8001920 <HAL_I2C_MspInit+0xb8>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018d6:	2312      	movs	r3, #18
 80018d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e2:	2303      	movs	r3, #3
 80018e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018e8:	2304      	movs	r3, #4
 80018ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80018f2:	4619      	mov	r1, r3
 80018f4:	480b      	ldr	r0, [pc, #44]	; (8001924 <HAL_I2C_MspInit+0xbc>)
 80018f6:	f000 fba9 	bl	800204c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <HAL_I2C_MspInit+0xb8>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	4a08      	ldr	r2, [pc, #32]	; (8001920 <HAL_I2C_MspInit+0xb8>)
 8001900:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001904:	6413      	str	r3, [r2, #64]	; 0x40
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_I2C_MspInit+0xb8>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001912:	bf00      	nop
 8001914:	37a8      	adds	r7, #168	; 0xa8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40005400 	.word	0x40005400
 8001920:	40023800 	.word	0x40023800
 8001924:	40020400 	.word	0x40020400

08001928 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a25      	ldr	r2, [pc, #148]	; (80019dc <HAL_SPI_MspInit+0xb4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d144      	bne.n	80019d4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800194a:	4b25      	ldr	r3, [pc, #148]	; (80019e0 <HAL_SPI_MspInit+0xb8>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	4a24      	ldr	r2, [pc, #144]	; (80019e0 <HAL_SPI_MspInit+0xb8>)
 8001950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001954:	6413      	str	r3, [r2, #64]	; 0x40
 8001956:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <HAL_SPI_MspInit+0xb8>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001962:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <HAL_SPI_MspInit+0xb8>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a1e      	ldr	r2, [pc, #120]	; (80019e0 <HAL_SPI_MspInit+0xb8>)
 8001968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b1c      	ldr	r3, [pc, #112]	; (80019e0 <HAL_SPI_MspInit+0xb8>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197a:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <HAL_SPI_MspInit+0xb8>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a18      	ldr	r2, [pc, #96]	; (80019e0 <HAL_SPI_MspInit+0xb8>)
 8001980:	f043 0302 	orr.w	r3, r3, #2
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <HAL_SPI_MspInit+0xb8>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001992:	2302      	movs	r3, #2
 8001994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199e:	2303      	movs	r3, #3
 80019a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019a2:	2305      	movs	r3, #5
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	4619      	mov	r1, r3
 80019ac:	480d      	ldr	r0, [pc, #52]	; (80019e4 <HAL_SPI_MspInit+0xbc>)
 80019ae:	f000 fb4d 	bl	800204c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80019b2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80019b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b8:	2302      	movs	r3, #2
 80019ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c0:	2303      	movs	r3, #3
 80019c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019c4:	2305      	movs	r3, #5
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	4619      	mov	r1, r3
 80019ce:	4806      	ldr	r0, [pc, #24]	; (80019e8 <HAL_SPI_MspInit+0xc0>)
 80019d0:	f000 fb3c 	bl	800204c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80019d4:	bf00      	nop
 80019d6:	3728      	adds	r7, #40	; 0x28
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40003800 	.word	0x40003800
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40022000 	.word	0x40022000
 80019e8:	40020400 	.word	0x40020400

080019ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b0aa      	sub	sp, #168	; 0xa8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a04:	f107 0310 	add.w	r3, r7, #16
 8001a08:	2284      	movs	r2, #132	; 0x84
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f003 fd4f 	bl	80054b0 <memset>
  if(huart->Instance==USART6)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a25      	ldr	r2, [pc, #148]	; (8001aac <HAL_UART_MspInit+0xc0>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d143      	bne.n	8001aa4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001a1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a20:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001a22:	2300      	movs	r3, #0
 8001a24:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a26:	f107 0310 	add.w	r3, r7, #16
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f002 f892 	bl	8003b54 <HAL_RCCEx_PeriphCLKConfig>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a36:	f7ff fd1f 	bl	8001478 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <HAL_UART_MspInit+0xc4>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	4a1c      	ldr	r2, [pc, #112]	; (8001ab0 <HAL_UART_MspInit+0xc4>)
 8001a40:	f043 0320 	orr.w	r3, r3, #32
 8001a44:	6453      	str	r3, [r2, #68]	; 0x44
 8001a46:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <HAL_UART_MspInit+0xc4>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	f003 0320 	and.w	r3, r3, #32
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a52:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <HAL_UART_MspInit+0xc4>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a16      	ldr	r2, [pc, #88]	; (8001ab0 <HAL_UART_MspInit+0xc4>)
 8001a58:	f043 0304 	orr.w	r3, r3, #4
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <HAL_UART_MspInit+0xc4>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
    /**USART6 GPIO Configuration
    PC7     ------> USART6_RX
    PC6     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001a6a:	23c0      	movs	r3, #192	; 0xc0
 8001a6c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001a82:	2308      	movs	r3, #8
 8001a84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a88:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4809      	ldr	r0, [pc, #36]	; (8001ab4 <HAL_UART_MspInit+0xc8>)
 8001a90:	f000 fadc 	bl	800204c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2100      	movs	r1, #0
 8001a98:	2047      	movs	r0, #71	; 0x47
 8001a9a:	f000 fa0e 	bl	8001eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001a9e:	2047      	movs	r0, #71	; 0x47
 8001aa0:	f000 fa27 	bl	8001ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001aa4:	bf00      	nop
 8001aa6:	37a8      	adds	r7, #168	; 0xa8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40011400 	.word	0x40011400
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40020800 	.word	0x40020800

08001ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <NMI_Handler+0x4>

08001abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac2:	e7fe      	b.n	8001ac2 <HardFault_Handler+0x4>

08001ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <MemManage_Handler+0x4>

08001aca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ace:	e7fe      	b.n	8001ace <BusFault_Handler+0x4>

08001ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <UsageFault_Handler+0x4>

08001ad6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b04:	f000 f8ba 	bl	8001c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001b10:	4802      	ldr	r0, [pc, #8]	; (8001b1c <USART6_IRQHandler+0x10>)
 8001b12:	f002 fd09 	bl	8004528 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	2000014c 	.word	0x2000014c

08001b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b28:	4a14      	ldr	r2, [pc, #80]	; (8001b7c <_sbrk+0x5c>)
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <_sbrk+0x60>)
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b34:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <_sbrk+0x64>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d102      	bne.n	8001b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <_sbrk+0x64>)
 8001b3e:	4a12      	ldr	r2, [pc, #72]	; (8001b88 <_sbrk+0x68>)
 8001b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b42:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <_sbrk+0x64>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d207      	bcs.n	8001b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b50:	f003 fc84 	bl	800545c <__errno>
 8001b54:	4603      	mov	r3, r0
 8001b56:	220c      	movs	r2, #12
 8001b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b5e:	e009      	b.n	8001b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <_sbrk+0x64>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b66:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <_sbrk+0x64>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	4a05      	ldr	r2, [pc, #20]	; (8001b84 <_sbrk+0x64>)
 8001b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b72:	68fb      	ldr	r3, [r7, #12]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20050000 	.word	0x20050000
 8001b80:	00000400 	.word	0x00000400
 8001b84:	200005f8 	.word	0x200005f8
 8001b88:	20000610 	.word	0x20000610

08001b8c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <SystemInit+0x20>)
 8001b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b96:	4a05      	ldr	r2, [pc, #20]	; (8001bac <SystemInit+0x20>)
 8001b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001be8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bb4:	480d      	ldr	r0, [pc, #52]	; (8001bec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bb6:	490e      	ldr	r1, [pc, #56]	; (8001bf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bb8:	4a0e      	ldr	r2, [pc, #56]	; (8001bf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bbc:	e002      	b.n	8001bc4 <LoopCopyDataInit>

08001bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bc2:	3304      	adds	r3, #4

08001bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc8:	d3f9      	bcc.n	8001bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bca:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bcc:	4c0b      	ldr	r4, [pc, #44]	; (8001bfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd0:	e001      	b.n	8001bd6 <LoopFillZerobss>

08001bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd4:	3204      	adds	r2, #4

08001bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd8:	d3fb      	bcc.n	8001bd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bda:	f7ff ffd7 	bl	8001b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bde:	f003 fc43 	bl	8005468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001be2:	f7fe fe77 	bl	80008d4 <main>
  bx  lr    
 8001be6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001be8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001bf4:	08006b90 	.word	0x08006b90
  ldr r2, =_sbss
 8001bf8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001bfc:	20000610 	.word	0x20000610

08001c00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c00:	e7fe      	b.n	8001c00 <ADC_IRQHandler>

08001c02 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c06:	2003      	movs	r0, #3
 8001c08:	f000 f94c 	bl	8001ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0c:	200f      	movs	r0, #15
 8001c0e:	f000 f805 	bl	8001c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c12:	f7ff fe05 	bl	8001820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <HAL_InitTick+0x54>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_InitTick+0x58>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 f967 	bl	8001f0e <HAL_SYSTICK_Config>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e00e      	b.n	8001c68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b0f      	cmp	r3, #15
 8001c4e:	d80a      	bhi.n	8001c66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c50:	2200      	movs	r2, #0
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c58:	f000 f92f 	bl	8001eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c5c:	4a06      	ldr	r2, [pc, #24]	; (8001c78 <HAL_InitTick+0x5c>)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	e000      	b.n	8001c68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20000008 	.word	0x20000008
 8001c74:	20000010 	.word	0x20000010
 8001c78:	2000000c 	.word	0x2000000c

08001c7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_IncTick+0x20>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	461a      	mov	r2, r3
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_IncTick+0x24>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <HAL_IncTick+0x24>)
 8001c8e:	6013      	str	r3, [r2, #0]
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	20000010 	.word	0x20000010
 8001ca0:	200005fc 	.word	0x200005fc

08001ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <HAL_GetTick+0x14>)
 8001caa:	681b      	ldr	r3, [r3, #0]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	200005fc 	.word	0x200005fc

08001cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc4:	f7ff ffee 	bl	8001ca4 <HAL_GetTick>
 8001cc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cd4:	d005      	beq.n	8001ce2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <HAL_Delay+0x44>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4413      	add	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ce2:	bf00      	nop
 8001ce4:	f7ff ffde 	bl	8001ca4 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d8f7      	bhi.n	8001ce4 <HAL_Delay+0x28>
  {
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000010 	.word	0x20000010

08001d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <__NVIC_SetPriorityGrouping+0x40>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d20:	4013      	ands	r3, r2
 8001d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d32:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <__NVIC_SetPriorityGrouping+0x40>)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	60d3      	str	r3, [r2, #12]
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00
 8001d48:	05fa0000 	.word	0x05fa0000

08001d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d50:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <__NVIC_GetPriorityGrouping+0x18>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	f003 0307 	and.w	r3, r3, #7
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	db0b      	blt.n	8001d92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	f003 021f 	and.w	r2, r3, #31
 8001d80:	4907      	ldr	r1, [pc, #28]	; (8001da0 <__NVIC_EnableIRQ+0x38>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	095b      	lsrs	r3, r3, #5
 8001d88:	2001      	movs	r0, #1
 8001d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000e100 	.word	0xe000e100

08001da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	6039      	str	r1, [r7, #0]
 8001dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	db0a      	blt.n	8001dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	490c      	ldr	r1, [pc, #48]	; (8001df0 <__NVIC_SetPriority+0x4c>)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	0112      	lsls	r2, r2, #4
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dcc:	e00a      	b.n	8001de4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4908      	ldr	r1, [pc, #32]	; (8001df4 <__NVIC_SetPriority+0x50>)
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	3b04      	subs	r3, #4
 8001ddc:	0112      	lsls	r2, r2, #4
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	440b      	add	r3, r1
 8001de2:	761a      	strb	r2, [r3, #24]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000e100 	.word	0xe000e100
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b089      	sub	sp, #36	; 0x24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f1c3 0307 	rsb	r3, r3, #7
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	bf28      	it	cs
 8001e16:	2304      	movcs	r3, #4
 8001e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	2b06      	cmp	r3, #6
 8001e20:	d902      	bls.n	8001e28 <NVIC_EncodePriority+0x30>
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3b03      	subs	r3, #3
 8001e26:	e000      	b.n	8001e2a <NVIC_EncodePriority+0x32>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43da      	mvns	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	43d9      	mvns	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	4313      	orrs	r3, r2
         );
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3724      	adds	r7, #36	; 0x24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e70:	d301      	bcc.n	8001e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00f      	b.n	8001e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e76:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <SysTick_Config+0x40>)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7e:	210f      	movs	r1, #15
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e84:	f7ff ff8e 	bl	8001da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <SysTick_Config+0x40>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8e:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <SysTick_Config+0x40>)
 8001e90:	2207      	movs	r2, #7
 8001e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	e000e010 	.word	0xe000e010

08001ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ff29 	bl	8001d04 <__NVIC_SetPriorityGrouping>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b086      	sub	sp, #24
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
 8001ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ecc:	f7ff ff3e 	bl	8001d4c <__NVIC_GetPriorityGrouping>
 8001ed0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	6978      	ldr	r0, [r7, #20]
 8001ed8:	f7ff ff8e 	bl	8001df8 <NVIC_EncodePriority>
 8001edc:	4602      	mov	r2, r0
 8001ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ff5d 	bl	8001da4 <__NVIC_SetPriority>
}
 8001eea:	bf00      	nop
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	4603      	mov	r3, r0
 8001efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff31 	bl	8001d68 <__NVIC_EnableIRQ>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff ffa2 	bl	8001e60 <SysTick_Config>
 8001f1c:	4603      	mov	r3, r0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b084      	sub	sp, #16
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f32:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f34:	f7ff feb6 	bl	8001ca4 <HAL_GetTick>
 8001f38:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d008      	beq.n	8001f58 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2280      	movs	r2, #128	; 0x80
 8001f4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e052      	b.n	8001ffe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0216 	bic.w	r2, r2, #22
 8001f66:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	695a      	ldr	r2, [r3, #20]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f76:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d103      	bne.n	8001f88 <HAL_DMA_Abort+0x62>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d007      	beq.n	8001f98 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0208 	bic.w	r2, r2, #8
 8001f96:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0201 	bic.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fa8:	e013      	b.n	8001fd2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001faa:	f7ff fe7b 	bl	8001ca4 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b05      	cmp	r3, #5
 8001fb6:	d90c      	bls.n	8001fd2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e015      	b.n	8001ffe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1e4      	bne.n	8001faa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe4:	223f      	movs	r2, #63	; 0x3f
 8001fe6:	409a      	lsls	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d004      	beq.n	8002024 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2280      	movs	r2, #128	; 0x80
 800201e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e00c      	b.n	800203e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2205      	movs	r2, #5
 8002028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0201 	bic.w	r2, r2, #1
 800203a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
	...

0800204c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800204c:	b480      	push	{r7}
 800204e:	b089      	sub	sp, #36	; 0x24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002062:	2300      	movs	r3, #0
 8002064:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
 800206a:	e175      	b.n	8002358 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800206c:	2201      	movs	r2, #1
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	4013      	ands	r3, r2
 800207e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	429a      	cmp	r2, r3
 8002086:	f040 8164 	bne.w	8002352 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	2b01      	cmp	r3, #1
 8002094:	d005      	beq.n	80020a2 <HAL_GPIO_Init+0x56>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d130      	bne.n	8002104 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	2203      	movs	r2, #3
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020d8:	2201      	movs	r2, #1
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	f003 0201 	and.w	r2, r3, #1
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	2b03      	cmp	r3, #3
 800210e:	d017      	beq.n	8002140 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	2203      	movs	r2, #3
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d123      	bne.n	8002194 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	08da      	lsrs	r2, r3, #3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3208      	adds	r2, #8
 8002154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	220f      	movs	r2, #15
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	691a      	ldr	r2, [r3, #16]
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	08da      	lsrs	r2, r3, #3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3208      	adds	r2, #8
 800218e:	69b9      	ldr	r1, [r7, #24]
 8002190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	2203      	movs	r2, #3
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0203 	and.w	r2, r3, #3
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 80be 	beq.w	8002352 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d6:	4b66      	ldr	r3, [pc, #408]	; (8002370 <HAL_GPIO_Init+0x324>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	4a65      	ldr	r2, [pc, #404]	; (8002370 <HAL_GPIO_Init+0x324>)
 80021dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e0:	6453      	str	r3, [r2, #68]	; 0x44
 80021e2:	4b63      	ldr	r3, [pc, #396]	; (8002370 <HAL_GPIO_Init+0x324>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80021ee:	4a61      	ldr	r2, [pc, #388]	; (8002374 <HAL_GPIO_Init+0x328>)
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	089b      	lsrs	r3, r3, #2
 80021f4:	3302      	adds	r3, #2
 80021f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	220f      	movs	r2, #15
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4013      	ands	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a58      	ldr	r2, [pc, #352]	; (8002378 <HAL_GPIO_Init+0x32c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d037      	beq.n	800228a <HAL_GPIO_Init+0x23e>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a57      	ldr	r2, [pc, #348]	; (800237c <HAL_GPIO_Init+0x330>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d031      	beq.n	8002286 <HAL_GPIO_Init+0x23a>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a56      	ldr	r2, [pc, #344]	; (8002380 <HAL_GPIO_Init+0x334>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d02b      	beq.n	8002282 <HAL_GPIO_Init+0x236>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a55      	ldr	r2, [pc, #340]	; (8002384 <HAL_GPIO_Init+0x338>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d025      	beq.n	800227e <HAL_GPIO_Init+0x232>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a54      	ldr	r2, [pc, #336]	; (8002388 <HAL_GPIO_Init+0x33c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d01f      	beq.n	800227a <HAL_GPIO_Init+0x22e>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a53      	ldr	r2, [pc, #332]	; (800238c <HAL_GPIO_Init+0x340>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d019      	beq.n	8002276 <HAL_GPIO_Init+0x22a>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a52      	ldr	r2, [pc, #328]	; (8002390 <HAL_GPIO_Init+0x344>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d013      	beq.n	8002272 <HAL_GPIO_Init+0x226>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a51      	ldr	r2, [pc, #324]	; (8002394 <HAL_GPIO_Init+0x348>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d00d      	beq.n	800226e <HAL_GPIO_Init+0x222>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a50      	ldr	r2, [pc, #320]	; (8002398 <HAL_GPIO_Init+0x34c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d007      	beq.n	800226a <HAL_GPIO_Init+0x21e>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a4f      	ldr	r2, [pc, #316]	; (800239c <HAL_GPIO_Init+0x350>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d101      	bne.n	8002266 <HAL_GPIO_Init+0x21a>
 8002262:	2309      	movs	r3, #9
 8002264:	e012      	b.n	800228c <HAL_GPIO_Init+0x240>
 8002266:	230a      	movs	r3, #10
 8002268:	e010      	b.n	800228c <HAL_GPIO_Init+0x240>
 800226a:	2308      	movs	r3, #8
 800226c:	e00e      	b.n	800228c <HAL_GPIO_Init+0x240>
 800226e:	2307      	movs	r3, #7
 8002270:	e00c      	b.n	800228c <HAL_GPIO_Init+0x240>
 8002272:	2306      	movs	r3, #6
 8002274:	e00a      	b.n	800228c <HAL_GPIO_Init+0x240>
 8002276:	2305      	movs	r3, #5
 8002278:	e008      	b.n	800228c <HAL_GPIO_Init+0x240>
 800227a:	2304      	movs	r3, #4
 800227c:	e006      	b.n	800228c <HAL_GPIO_Init+0x240>
 800227e:	2303      	movs	r3, #3
 8002280:	e004      	b.n	800228c <HAL_GPIO_Init+0x240>
 8002282:	2302      	movs	r3, #2
 8002284:	e002      	b.n	800228c <HAL_GPIO_Init+0x240>
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <HAL_GPIO_Init+0x240>
 800228a:	2300      	movs	r3, #0
 800228c:	69fa      	ldr	r2, [r7, #28]
 800228e:	f002 0203 	and.w	r2, r2, #3
 8002292:	0092      	lsls	r2, r2, #2
 8002294:	4093      	lsls	r3, r2
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800229c:	4935      	ldr	r1, [pc, #212]	; (8002374 <HAL_GPIO_Init+0x328>)
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	089b      	lsrs	r3, r3, #2
 80022a2:	3302      	adds	r3, #2
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022aa:	4b3d      	ldr	r3, [pc, #244]	; (80023a0 <HAL_GPIO_Init+0x354>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ce:	4a34      	ldr	r2, [pc, #208]	; (80023a0 <HAL_GPIO_Init+0x354>)
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022d4:	4b32      	ldr	r3, [pc, #200]	; (80023a0 <HAL_GPIO_Init+0x354>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022f8:	4a29      	ldr	r2, [pc, #164]	; (80023a0 <HAL_GPIO_Init+0x354>)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022fe:	4b28      	ldr	r3, [pc, #160]	; (80023a0 <HAL_GPIO_Init+0x354>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002322:	4a1f      	ldr	r2, [pc, #124]	; (80023a0 <HAL_GPIO_Init+0x354>)
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002328:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <HAL_GPIO_Init+0x354>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800234c:	4a14      	ldr	r2, [pc, #80]	; (80023a0 <HAL_GPIO_Init+0x354>)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3301      	adds	r3, #1
 8002356:	61fb      	str	r3, [r7, #28]
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	2b0f      	cmp	r3, #15
 800235c:	f67f ae86 	bls.w	800206c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	3724      	adds	r7, #36	; 0x24
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40023800 	.word	0x40023800
 8002374:	40013800 	.word	0x40013800
 8002378:	40020000 	.word	0x40020000
 800237c:	40020400 	.word	0x40020400
 8002380:	40020800 	.word	0x40020800
 8002384:	40020c00 	.word	0x40020c00
 8002388:	40021000 	.word	0x40021000
 800238c:	40021400 	.word	0x40021400
 8002390:	40021800 	.word	0x40021800
 8002394:	40021c00 	.word	0x40021c00
 8002398:	40022000 	.word	0x40022000
 800239c:	40022400 	.word	0x40022400
 80023a0:	40013c00 	.word	0x40013c00

080023a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	807b      	strh	r3, [r7, #2]
 80023b0:	4613      	mov	r3, r2
 80023b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023b4:	787b      	ldrb	r3, [r7, #1]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ba:	887a      	ldrh	r2, [r7, #2]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80023c0:	e003      	b.n	80023ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80023c2:	887b      	ldrh	r3, [r7, #2]
 80023c4:	041a      	lsls	r2, r3, #16
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	619a      	str	r2, [r3, #24]
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
	...

080023d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e07f      	b.n	80024ea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d106      	bne.n	8002404 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff fa32 	bl	8001868 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2224      	movs	r2, #36	; 0x24
 8002408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0201 	bic.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002428:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002438:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d107      	bne.n	8002452 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	e006      	b.n	8002460 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800245e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d104      	bne.n	8002472 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002470:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4b1d      	ldr	r3, [pc, #116]	; (80024f4 <HAL_I2C_Init+0x11c>)
 800247e:	430b      	orrs	r3, r1
 8002480:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002490:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691a      	ldr	r2, [r3, #16]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69d9      	ldr	r1, [r3, #28]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a1a      	ldr	r2, [r3, #32]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0201 	orr.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2220      	movs	r2, #32
 80024d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	02008000 	.word	0x02008000

080024f8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	607a      	str	r2, [r7, #4]
 8002502:	461a      	mov	r2, r3
 8002504:	460b      	mov	r3, r1
 8002506:	817b      	strh	r3, [r7, #10]
 8002508:	4613      	mov	r3, r2
 800250a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b20      	cmp	r3, #32
 8002516:	f040 80da 	bne.w	80026ce <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_I2C_Master_Transmit+0x30>
 8002524:	2302      	movs	r3, #2
 8002526:	e0d3      	b.n	80026d0 <HAL_I2C_Master_Transmit+0x1d8>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002530:	f7ff fbb8 	bl	8001ca4 <HAL_GetTick>
 8002534:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	2319      	movs	r3, #25
 800253c:	2201      	movs	r2, #1
 800253e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 fbc6 	bl	8002cd4 <I2C_WaitOnFlagUntilTimeout>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e0be      	b.n	80026d0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2221      	movs	r2, #33	; 0x21
 8002556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2210      	movs	r2, #16
 800255e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	893a      	ldrh	r2, [r7, #8]
 8002572:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257e:	b29b      	uxth	r3, r3
 8002580:	2bff      	cmp	r3, #255	; 0xff
 8002582:	d90e      	bls.n	80025a2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	22ff      	movs	r2, #255	; 0xff
 8002588:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258e:	b2da      	uxtb	r2, r3
 8002590:	8979      	ldrh	r1, [r7, #10]
 8002592:	4b51      	ldr	r3, [pc, #324]	; (80026d8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 fd36 	bl	800300c <I2C_TransferConfig>
 80025a0:	e06c      	b.n	800267c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	8979      	ldrh	r1, [r7, #10]
 80025b4:	4b48      	ldr	r3, [pc, #288]	; (80026d8 <HAL_I2C_Master_Transmit+0x1e0>)
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 fd25 	bl	800300c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80025c2:	e05b      	b.n	800267c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	6a39      	ldr	r1, [r7, #32]
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 fbc3 	bl	8002d54 <I2C_WaitOnTXISFlagUntilTimeout>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e07b      	b.n	80026d0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	781a      	ldrb	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260c:	b29b      	uxth	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d034      	beq.n	800267c <HAL_I2C_Master_Transmit+0x184>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002616:	2b00      	cmp	r3, #0
 8002618:	d130      	bne.n	800267c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	2200      	movs	r2, #0
 8002622:	2180      	movs	r1, #128	; 0x80
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 fb55 	bl	8002cd4 <I2C_WaitOnFlagUntilTimeout>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e04d      	b.n	80026d0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002638:	b29b      	uxth	r3, r3
 800263a:	2bff      	cmp	r3, #255	; 0xff
 800263c:	d90e      	bls.n	800265c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	22ff      	movs	r2, #255	; 0xff
 8002642:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002648:	b2da      	uxtb	r2, r3
 800264a:	8979      	ldrh	r1, [r7, #10]
 800264c:	2300      	movs	r3, #0
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 fcd9 	bl	800300c <I2C_TransferConfig>
 800265a:	e00f      	b.n	800267c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266a:	b2da      	uxtb	r2, r3
 800266c:	8979      	ldrh	r1, [r7, #10]
 800266e:	2300      	movs	r3, #0
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 fcc8 	bl	800300c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002680:	b29b      	uxth	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d19e      	bne.n	80025c4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	6a39      	ldr	r1, [r7, #32]
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 fba2 	bl	8002dd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e01a      	b.n	80026d0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2220      	movs	r2, #32
 80026a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6859      	ldr	r1, [r3, #4]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <HAL_I2C_Master_Transmit+0x1e4>)
 80026ae:	400b      	ands	r3, r1
 80026b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2220      	movs	r2, #32
 80026b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	e000      	b.n	80026d0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80026ce:	2302      	movs	r3, #2
  }
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	80002000 	.word	0x80002000
 80026dc:	fe00e800 	.word	0xfe00e800

080026e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af02      	add	r7, sp, #8
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	4608      	mov	r0, r1
 80026ea:	4611      	mov	r1, r2
 80026ec:	461a      	mov	r2, r3
 80026ee:	4603      	mov	r3, r0
 80026f0:	817b      	strh	r3, [r7, #10]
 80026f2:	460b      	mov	r3, r1
 80026f4:	813b      	strh	r3, [r7, #8]
 80026f6:	4613      	mov	r3, r2
 80026f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b20      	cmp	r3, #32
 8002704:	f040 80f9 	bne.w	80028fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <HAL_I2C_Mem_Write+0x34>
 800270e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002710:	2b00      	cmp	r3, #0
 8002712:	d105      	bne.n	8002720 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f44f 7200 	mov.w	r2, #512	; 0x200
 800271a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0ed      	b.n	80028fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <HAL_I2C_Mem_Write+0x4e>
 800272a:	2302      	movs	r3, #2
 800272c:	e0e6      	b.n	80028fc <HAL_I2C_Mem_Write+0x21c>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002736:	f7ff fab5 	bl	8001ca4 <HAL_GetTick>
 800273a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	2319      	movs	r3, #25
 8002742:	2201      	movs	r2, #1
 8002744:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 fac3 	bl	8002cd4 <I2C_WaitOnFlagUntilTimeout>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0d1      	b.n	80028fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2221      	movs	r2, #33	; 0x21
 800275c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2240      	movs	r2, #64	; 0x40
 8002764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6a3a      	ldr	r2, [r7, #32]
 8002772:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002778:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002780:	88f8      	ldrh	r0, [r7, #6]
 8002782:	893a      	ldrh	r2, [r7, #8]
 8002784:	8979      	ldrh	r1, [r7, #10]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	9301      	str	r3, [sp, #4]
 800278a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	4603      	mov	r3, r0
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 f9d3 	bl	8002b3c <I2C_RequestMemoryWrite>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0a9      	b.n	80028fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	2bff      	cmp	r3, #255	; 0xff
 80027b0:	d90e      	bls.n	80027d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	22ff      	movs	r2, #255	; 0xff
 80027b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	8979      	ldrh	r1, [r7, #10]
 80027c0:	2300      	movs	r3, #0
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 fc1f 	bl	800300c <I2C_TransferConfig>
 80027ce:	e00f      	b.n	80027f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	8979      	ldrh	r1, [r7, #10]
 80027e2:	2300      	movs	r3, #0
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 fc0e 	bl	800300c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 faad 	bl	8002d54 <I2C_WaitOnTXISFlagUntilTimeout>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e07b      	b.n	80028fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	781a      	ldrb	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281e:	b29b      	uxth	r3, r3
 8002820:	3b01      	subs	r3, #1
 8002822:	b29a      	uxth	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282c:	3b01      	subs	r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002838:	b29b      	uxth	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d034      	beq.n	80028a8 <HAL_I2C_Mem_Write+0x1c8>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002842:	2b00      	cmp	r3, #0
 8002844:	d130      	bne.n	80028a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284c:	2200      	movs	r2, #0
 800284e:	2180      	movs	r1, #128	; 0x80
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 fa3f 	bl	8002cd4 <I2C_WaitOnFlagUntilTimeout>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e04d      	b.n	80028fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002864:	b29b      	uxth	r3, r3
 8002866:	2bff      	cmp	r3, #255	; 0xff
 8002868:	d90e      	bls.n	8002888 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	22ff      	movs	r2, #255	; 0xff
 800286e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002874:	b2da      	uxtb	r2, r3
 8002876:	8979      	ldrh	r1, [r7, #10]
 8002878:	2300      	movs	r3, #0
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 fbc3 	bl	800300c <I2C_TransferConfig>
 8002886:	e00f      	b.n	80028a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002896:	b2da      	uxtb	r2, r3
 8002898:	8979      	ldrh	r1, [r7, #10]
 800289a:	2300      	movs	r3, #0
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 fbb2 	bl	800300c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d19e      	bne.n	80027f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 fa8c 	bl	8002dd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e01a      	b.n	80028fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2220      	movs	r2, #32
 80028cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6859      	ldr	r1, [r3, #4]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <HAL_I2C_Mem_Write+0x224>)
 80028da:	400b      	ands	r3, r1
 80028dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2220      	movs	r2, #32
 80028e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	e000      	b.n	80028fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80028fa:	2302      	movs	r3, #2
  }
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	fe00e800 	.word	0xfe00e800

08002908 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b088      	sub	sp, #32
 800290c:	af02      	add	r7, sp, #8
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	4608      	mov	r0, r1
 8002912:	4611      	mov	r1, r2
 8002914:	461a      	mov	r2, r3
 8002916:	4603      	mov	r3, r0
 8002918:	817b      	strh	r3, [r7, #10]
 800291a:	460b      	mov	r3, r1
 800291c:	813b      	strh	r3, [r7, #8]
 800291e:	4613      	mov	r3, r2
 8002920:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b20      	cmp	r3, #32
 800292c:	f040 80fd 	bne.w	8002b2a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d002      	beq.n	800293c <HAL_I2C_Mem_Read+0x34>
 8002936:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002938:	2b00      	cmp	r3, #0
 800293a:	d105      	bne.n	8002948 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002942:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0f1      	b.n	8002b2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_I2C_Mem_Read+0x4e>
 8002952:	2302      	movs	r3, #2
 8002954:	e0ea      	b.n	8002b2c <HAL_I2C_Mem_Read+0x224>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800295e:	f7ff f9a1 	bl	8001ca4 <HAL_GetTick>
 8002962:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	2319      	movs	r3, #25
 800296a:	2201      	movs	r2, #1
 800296c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 f9af 	bl	8002cd4 <I2C_WaitOnFlagUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e0d5      	b.n	8002b2c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2222      	movs	r2, #34	; 0x22
 8002984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2240      	movs	r2, #64	; 0x40
 800298c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a3a      	ldr	r2, [r7, #32]
 800299a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80029a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029a8:	88f8      	ldrh	r0, [r7, #6]
 80029aa:	893a      	ldrh	r2, [r7, #8]
 80029ac:	8979      	ldrh	r1, [r7, #10]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	9301      	str	r3, [sp, #4]
 80029b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	4603      	mov	r3, r0
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 f913 	bl	8002be4 <I2C_RequestMemoryRead>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0ad      	b.n	8002b2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2bff      	cmp	r3, #255	; 0xff
 80029d8:	d90e      	bls.n	80029f8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	22ff      	movs	r2, #255	; 0xff
 80029de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	8979      	ldrh	r1, [r7, #10]
 80029e8:	4b52      	ldr	r3, [pc, #328]	; (8002b34 <HAL_I2C_Mem_Read+0x22c>)
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 fb0b 	bl	800300c <I2C_TransferConfig>
 80029f6:	e00f      	b.n	8002a18 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	8979      	ldrh	r1, [r7, #10]
 8002a0a:	4b4a      	ldr	r3, [pc, #296]	; (8002b34 <HAL_I2C_Mem_Read+0x22c>)
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 fafa 	bl	800300c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2104      	movs	r1, #4
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 f956 	bl	8002cd4 <I2C_WaitOnFlagUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e07c      	b.n	8002b2c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d034      	beq.n	8002ad8 <HAL_I2C_Mem_Read+0x1d0>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d130      	bne.n	8002ad8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2180      	movs	r1, #128	; 0x80
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f927 	bl	8002cd4 <I2C_WaitOnFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e04d      	b.n	8002b2c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	2bff      	cmp	r3, #255	; 0xff
 8002a98:	d90e      	bls.n	8002ab8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	22ff      	movs	r2, #255	; 0xff
 8002a9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	8979      	ldrh	r1, [r7, #10]
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 faab 	bl	800300c <I2C_TransferConfig>
 8002ab6:	e00f      	b.n	8002ad8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	8979      	ldrh	r1, [r7, #10]
 8002aca:	2300      	movs	r3, #0
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 fa9a 	bl	800300c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d19a      	bne.n	8002a18 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 f974 	bl	8002dd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e01a      	b.n	8002b2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2220      	movs	r2, #32
 8002afc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6859      	ldr	r1, [r3, #4]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <HAL_I2C_Mem_Read+0x230>)
 8002b0a:	400b      	ands	r3, r1
 8002b0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2220      	movs	r2, #32
 8002b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	e000      	b.n	8002b2c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002b2a:	2302      	movs	r3, #2
  }
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	80002400 	.word	0x80002400
 8002b38:	fe00e800 	.word	0xfe00e800

08002b3c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af02      	add	r7, sp, #8
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	4608      	mov	r0, r1
 8002b46:	4611      	mov	r1, r2
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	817b      	strh	r3, [r7, #10]
 8002b4e:	460b      	mov	r3, r1
 8002b50:	813b      	strh	r3, [r7, #8]
 8002b52:	4613      	mov	r3, r2
 8002b54:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b56:	88fb      	ldrh	r3, [r7, #6]
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	8979      	ldrh	r1, [r7, #10]
 8002b5c:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <I2C_RequestMemoryWrite+0xa4>)
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 fa51 	bl	800300c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b6a:	69fa      	ldr	r2, [r7, #28]
 8002b6c:	69b9      	ldr	r1, [r7, #24]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f8f0 	bl	8002d54 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e02c      	b.n	8002bd8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b7e:	88fb      	ldrh	r3, [r7, #6]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d105      	bne.n	8002b90 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b84:	893b      	ldrh	r3, [r7, #8]
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	629a      	str	r2, [r3, #40]	; 0x28
 8002b8e:	e015      	b.n	8002bbc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b90:	893b      	ldrh	r3, [r7, #8]
 8002b92:	0a1b      	lsrs	r3, r3, #8
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b9e:	69fa      	ldr	r2, [r7, #28]
 8002ba0:	69b9      	ldr	r1, [r7, #24]
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 f8d6 	bl	8002d54 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e012      	b.n	8002bd8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bb2:	893b      	ldrh	r3, [r7, #8]
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	2180      	movs	r1, #128	; 0x80
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f884 	bl	8002cd4 <I2C_WaitOnFlagUntilTimeout>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	80002000 	.word	0x80002000

08002be4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af02      	add	r7, sp, #8
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	4608      	mov	r0, r1
 8002bee:	4611      	mov	r1, r2
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	817b      	strh	r3, [r7, #10]
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	813b      	strh	r3, [r7, #8]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002bfe:	88fb      	ldrh	r3, [r7, #6]
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	8979      	ldrh	r1, [r7, #10]
 8002c04:	4b20      	ldr	r3, [pc, #128]	; (8002c88 <I2C_RequestMemoryRead+0xa4>)
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	2300      	movs	r3, #0
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 f9fe 	bl	800300c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c10:	69fa      	ldr	r2, [r7, #28]
 8002c12:	69b9      	ldr	r1, [r7, #24]
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f000 f89d 	bl	8002d54 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e02c      	b.n	8002c7e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c24:	88fb      	ldrh	r3, [r7, #6]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d105      	bne.n	8002c36 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c2a:	893b      	ldrh	r3, [r7, #8]
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	629a      	str	r2, [r3, #40]	; 0x28
 8002c34:	e015      	b.n	8002c62 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c36:	893b      	ldrh	r3, [r7, #8]
 8002c38:	0a1b      	lsrs	r3, r3, #8
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c44:	69fa      	ldr	r2, [r7, #28]
 8002c46:	69b9      	ldr	r1, [r7, #24]
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 f883 	bl	8002d54 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e012      	b.n	8002c7e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c58:	893b      	ldrh	r3, [r7, #8]
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	2140      	movs	r1, #64	; 0x40
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 f831 	bl	8002cd4 <I2C_WaitOnFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e000      	b.n	8002c7e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	80002000 	.word	0x80002000

08002c8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d103      	bne.n	8002caa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d007      	beq.n	8002cc8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699a      	ldr	r2, [r3, #24]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0201 	orr.w	r2, r2, #1
 8002cc6:	619a      	str	r2, [r3, #24]
  }
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ce4:	e022      	b.n	8002d2c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cec:	d01e      	beq.n	8002d2c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cee:	f7fe ffd9 	bl	8001ca4 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d302      	bcc.n	8002d04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d113      	bne.n	8002d2c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d08:	f043 0220 	orr.w	r2, r3, #32
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e00f      	b.n	8002d4c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699a      	ldr	r2, [r3, #24]
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	4013      	ands	r3, r2
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	bf0c      	ite	eq
 8002d3c:	2301      	moveq	r3, #1
 8002d3e:	2300      	movne	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	461a      	mov	r2, r3
 8002d44:	79fb      	ldrb	r3, [r7, #7]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d0cd      	beq.n	8002ce6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d60:	e02c      	b.n	8002dbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68b9      	ldr	r1, [r7, #8]
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 f870 	bl	8002e4c <I2C_IsErrorOccurred>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e02a      	b.n	8002dcc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d7c:	d01e      	beq.n	8002dbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7e:	f7fe ff91 	bl	8001ca4 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d302      	bcc.n	8002d94 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d113      	bne.n	8002dbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d98:	f043 0220 	orr.w	r2, r3, #32
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e007      	b.n	8002dcc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d1cb      	bne.n	8002d62 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002de0:	e028      	b.n	8002e34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 f830 	bl	8002e4c <I2C_IsErrorOccurred>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e026      	b.n	8002e44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df6:	f7fe ff55 	bl	8001ca4 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d302      	bcc.n	8002e0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d113      	bne.n	8002e34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e10:	f043 0220 	orr.w	r2, r3, #32
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e007      	b.n	8002e44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	f003 0320 	and.w	r3, r3, #32
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	d1cf      	bne.n	8002de2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b08a      	sub	sp, #40	; 0x28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d068      	beq.n	8002f4a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2210      	movs	r2, #16
 8002e7e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e80:	e049      	b.n	8002f16 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e88:	d045      	beq.n	8002f16 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e8a:	f7fe ff0b 	bl	8001ca4 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d302      	bcc.n	8002ea0 <I2C_IsErrorOccurred+0x54>
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d13a      	bne.n	8002f16 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eaa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002eb2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ec2:	d121      	bne.n	8002f08 <I2C_IsErrorOccurred+0xbc>
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002eca:	d01d      	beq.n	8002f08 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002ecc:	7cfb      	ldrb	r3, [r7, #19]
 8002ece:	2b20      	cmp	r3, #32
 8002ed0:	d01a      	beq.n	8002f08 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ee0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ee2:	f7fe fedf 	bl	8001ca4 <HAL_GetTick>
 8002ee6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ee8:	e00e      	b.n	8002f08 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002eea:	f7fe fedb 	bl	8001ca4 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b19      	cmp	r3, #25
 8002ef6:	d907      	bls.n	8002f08 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	f043 0320 	orr.w	r3, r3, #32
 8002efe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002f06:	e006      	b.n	8002f16 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f003 0320 	and.w	r3, r3, #32
 8002f12:	2b20      	cmp	r3, #32
 8002f14:	d1e9      	bne.n	8002eea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	f003 0320 	and.w	r3, r3, #32
 8002f20:	2b20      	cmp	r3, #32
 8002f22:	d003      	beq.n	8002f2c <I2C_IsErrorOccurred+0xe0>
 8002f24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0aa      	beq.n	8002e82 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d103      	bne.n	8002f3c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	f043 0304 	orr.w	r3, r3, #4
 8002f42:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00b      	beq.n	8002f74 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
 8002f5e:	f043 0301 	orr.w	r3, r3, #1
 8002f62:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00b      	beq.n	8002f96 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	f043 0308 	orr.w	r3, r3, #8
 8002f84:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00b      	beq.n	8002fb8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	f043 0302 	orr.w	r3, r3, #2
 8002fa6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d01c      	beq.n	8002ffa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f7ff fe63 	bl	8002c8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6859      	ldr	r1, [r3, #4]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <I2C_IsErrorOccurred+0x1bc>)
 8002fd2:	400b      	ands	r3, r1
 8002fd4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002ffa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3728      	adds	r7, #40	; 0x28
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	fe00e800 	.word	0xfe00e800

0800300c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	607b      	str	r3, [r7, #4]
 8003016:	460b      	mov	r3, r1
 8003018:	817b      	strh	r3, [r7, #10]
 800301a:	4613      	mov	r3, r2
 800301c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800301e:	897b      	ldrh	r3, [r7, #10]
 8003020:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003024:	7a7b      	ldrb	r3, [r7, #9]
 8003026:	041b      	lsls	r3, r3, #16
 8003028:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800302c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	4313      	orrs	r3, r2
 8003036:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800303a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	0d5b      	lsrs	r3, r3, #21
 8003046:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800304a:	4b08      	ldr	r3, [pc, #32]	; (800306c <I2C_TransferConfig+0x60>)
 800304c:	430b      	orrs	r3, r1
 800304e:	43db      	mvns	r3, r3
 8003050:	ea02 0103 	and.w	r1, r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	430a      	orrs	r2, r1
 800305c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800305e:	bf00      	nop
 8003060:	371c      	adds	r7, #28
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	03ff63ff 	.word	0x03ff63ff

08003070 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b20      	cmp	r3, #32
 8003084:	d138      	bne.n	80030f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003090:	2302      	movs	r3, #2
 8003092:	e032      	b.n	80030fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2224      	movs	r2, #36	; 0x24
 80030a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0201 	bic.w	r2, r2, #1
 80030b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6819      	ldr	r1, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030f4:	2300      	movs	r3, #0
 80030f6:	e000      	b.n	80030fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030f8:	2302      	movs	r3, #2
  }
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003106:	b480      	push	{r7}
 8003108:	b085      	sub	sp, #20
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b20      	cmp	r3, #32
 800311a:	d139      	bne.n	8003190 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003122:	2b01      	cmp	r3, #1
 8003124:	d101      	bne.n	800312a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003126:	2302      	movs	r3, #2
 8003128:	e033      	b.n	8003192 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2224      	movs	r2, #36	; 0x24
 8003136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0201 	bic.w	r2, r2, #1
 8003148:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003158:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	021b      	lsls	r3, r3, #8
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	4313      	orrs	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0201 	orr.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	e000      	b.n	8003192 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003190:	2302      	movs	r3, #2
  }
}
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
	...

080031a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80031a6:	2300      	movs	r3, #0
 80031a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80031aa:	4b23      	ldr	r3, [pc, #140]	; (8003238 <HAL_PWREx_EnableOverDrive+0x98>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	4a22      	ldr	r2, [pc, #136]	; (8003238 <HAL_PWREx_EnableOverDrive+0x98>)
 80031b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b4:	6413      	str	r3, [r2, #64]	; 0x40
 80031b6:	4b20      	ldr	r3, [pc, #128]	; (8003238 <HAL_PWREx_EnableOverDrive+0x98>)
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031be:	603b      	str	r3, [r7, #0]
 80031c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80031c2:	4b1e      	ldr	r3, [pc, #120]	; (800323c <HAL_PWREx_EnableOverDrive+0x9c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a1d      	ldr	r2, [pc, #116]	; (800323c <HAL_PWREx_EnableOverDrive+0x9c>)
 80031c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031cc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031ce:	f7fe fd69 	bl	8001ca4 <HAL_GetTick>
 80031d2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031d4:	e009      	b.n	80031ea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031d6:	f7fe fd65 	bl	8001ca4 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031e4:	d901      	bls.n	80031ea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e022      	b.n	8003230 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031ea:	4b14      	ldr	r3, [pc, #80]	; (800323c <HAL_PWREx_EnableOverDrive+0x9c>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f6:	d1ee      	bne.n	80031d6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80031f8:	4b10      	ldr	r3, [pc, #64]	; (800323c <HAL_PWREx_EnableOverDrive+0x9c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a0f      	ldr	r2, [pc, #60]	; (800323c <HAL_PWREx_EnableOverDrive+0x9c>)
 80031fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003202:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003204:	f7fe fd4e 	bl	8001ca4 <HAL_GetTick>
 8003208:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800320a:	e009      	b.n	8003220 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800320c:	f7fe fd4a 	bl	8001ca4 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800321a:	d901      	bls.n	8003220 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e007      	b.n	8003230 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003220:	4b06      	ldr	r3, [pc, #24]	; (800323c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003228:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800322c:	d1ee      	bne.n	800320c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40023800 	.word	0x40023800
 800323c:	40007000 	.word	0x40007000

08003240 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003248:	2300      	movs	r3, #0
 800324a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e291      	b.n	800377a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 8087 	beq.w	8003372 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003264:	4b96      	ldr	r3, [pc, #600]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 030c 	and.w	r3, r3, #12
 800326c:	2b04      	cmp	r3, #4
 800326e:	d00c      	beq.n	800328a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003270:	4b93      	ldr	r3, [pc, #588]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 030c 	and.w	r3, r3, #12
 8003278:	2b08      	cmp	r3, #8
 800327a:	d112      	bne.n	80032a2 <HAL_RCC_OscConfig+0x62>
 800327c:	4b90      	ldr	r3, [pc, #576]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003284:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003288:	d10b      	bne.n	80032a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800328a:	4b8d      	ldr	r3, [pc, #564]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d06c      	beq.n	8003370 <HAL_RCC_OscConfig+0x130>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d168      	bne.n	8003370 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e26b      	b.n	800377a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032aa:	d106      	bne.n	80032ba <HAL_RCC_OscConfig+0x7a>
 80032ac:	4b84      	ldr	r3, [pc, #528]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a83      	ldr	r2, [pc, #524]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 80032b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b6:	6013      	str	r3, [r2, #0]
 80032b8:	e02e      	b.n	8003318 <HAL_RCC_OscConfig+0xd8>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10c      	bne.n	80032dc <HAL_RCC_OscConfig+0x9c>
 80032c2:	4b7f      	ldr	r3, [pc, #508]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a7e      	ldr	r2, [pc, #504]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 80032c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	4b7c      	ldr	r3, [pc, #496]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a7b      	ldr	r2, [pc, #492]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 80032d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	e01d      	b.n	8003318 <HAL_RCC_OscConfig+0xd8>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032e4:	d10c      	bne.n	8003300 <HAL_RCC_OscConfig+0xc0>
 80032e6:	4b76      	ldr	r3, [pc, #472]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a75      	ldr	r2, [pc, #468]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 80032ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	4b73      	ldr	r3, [pc, #460]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a72      	ldr	r2, [pc, #456]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 80032f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	e00b      	b.n	8003318 <HAL_RCC_OscConfig+0xd8>
 8003300:	4b6f      	ldr	r3, [pc, #444]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a6e      	ldr	r2, [pc, #440]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 8003306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	4b6c      	ldr	r3, [pc, #432]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a6b      	ldr	r2, [pc, #428]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 8003312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d013      	beq.n	8003348 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003320:	f7fe fcc0 	bl	8001ca4 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003328:	f7fe fcbc 	bl	8001ca4 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b64      	cmp	r3, #100	; 0x64
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e21f      	b.n	800377a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333a:	4b61      	ldr	r3, [pc, #388]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f0      	beq.n	8003328 <HAL_RCC_OscConfig+0xe8>
 8003346:	e014      	b.n	8003372 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003348:	f7fe fcac 	bl	8001ca4 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003350:	f7fe fca8 	bl	8001ca4 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b64      	cmp	r3, #100	; 0x64
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e20b      	b.n	800377a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003362:	4b57      	ldr	r3, [pc, #348]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0x110>
 800336e:	e000      	b.n	8003372 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d069      	beq.n	8003452 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800337e:	4b50      	ldr	r3, [pc, #320]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 030c 	and.w	r3, r3, #12
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00b      	beq.n	80033a2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800338a:	4b4d      	ldr	r3, [pc, #308]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 030c 	and.w	r3, r3, #12
 8003392:	2b08      	cmp	r3, #8
 8003394:	d11c      	bne.n	80033d0 <HAL_RCC_OscConfig+0x190>
 8003396:	4b4a      	ldr	r3, [pc, #296]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d116      	bne.n	80033d0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033a2:	4b47      	ldr	r3, [pc, #284]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d005      	beq.n	80033ba <HAL_RCC_OscConfig+0x17a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d001      	beq.n	80033ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e1df      	b.n	800377a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ba:	4b41      	ldr	r3, [pc, #260]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	493d      	ldr	r1, [pc, #244]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ce:	e040      	b.n	8003452 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d023      	beq.n	8003420 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033d8:	4b39      	ldr	r3, [pc, #228]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a38      	ldr	r2, [pc, #224]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 80033de:	f043 0301 	orr.w	r3, r3, #1
 80033e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e4:	f7fe fc5e 	bl	8001ca4 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ec:	f7fe fc5a 	bl	8001ca4 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e1bd      	b.n	800377a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fe:	4b30      	ldr	r3, [pc, #192]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800340a:	4b2d      	ldr	r3, [pc, #180]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	4929      	ldr	r1, [pc, #164]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 800341a:	4313      	orrs	r3, r2
 800341c:	600b      	str	r3, [r1, #0]
 800341e:	e018      	b.n	8003452 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003420:	4b27      	ldr	r3, [pc, #156]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a26      	ldr	r2, [pc, #152]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 8003426:	f023 0301 	bic.w	r3, r3, #1
 800342a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342c:	f7fe fc3a 	bl	8001ca4 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003434:	f7fe fc36 	bl	8001ca4 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e199      	b.n	800377a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003446:	4b1e      	ldr	r3, [pc, #120]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b00      	cmp	r3, #0
 800345c:	d038      	beq.n	80034d0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d019      	beq.n	800349a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003466:	4b16      	ldr	r3, [pc, #88]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 8003468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800346a:	4a15      	ldr	r2, [pc, #84]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003472:	f7fe fc17 	bl	8001ca4 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800347a:	f7fe fc13 	bl	8001ca4 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e176      	b.n	800377a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800348c:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 800348e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0f0      	beq.n	800347a <HAL_RCC_OscConfig+0x23a>
 8003498:	e01a      	b.n	80034d0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800349a:	4b09      	ldr	r3, [pc, #36]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 800349c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800349e:	4a08      	ldr	r2, [pc, #32]	; (80034c0 <HAL_RCC_OscConfig+0x280>)
 80034a0:	f023 0301 	bic.w	r3, r3, #1
 80034a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a6:	f7fe fbfd 	bl	8001ca4 <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ac:	e00a      	b.n	80034c4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ae:	f7fe fbf9 	bl	8001ca4 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d903      	bls.n	80034c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e15c      	b.n	800377a <HAL_RCC_OscConfig+0x53a>
 80034c0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c4:	4b91      	ldr	r3, [pc, #580]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 80034c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1ee      	bne.n	80034ae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 80a4 	beq.w	8003626 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034de:	4b8b      	ldr	r3, [pc, #556]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10d      	bne.n	8003506 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ea:	4b88      	ldr	r3, [pc, #544]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	4a87      	ldr	r2, [pc, #540]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 80034f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034f4:	6413      	str	r3, [r2, #64]	; 0x40
 80034f6:	4b85      	ldr	r3, [pc, #532]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fe:	60bb      	str	r3, [r7, #8]
 8003500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003502:	2301      	movs	r3, #1
 8003504:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003506:	4b82      	ldr	r3, [pc, #520]	; (8003710 <HAL_RCC_OscConfig+0x4d0>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350e:	2b00      	cmp	r3, #0
 8003510:	d118      	bne.n	8003544 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003512:	4b7f      	ldr	r3, [pc, #508]	; (8003710 <HAL_RCC_OscConfig+0x4d0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a7e      	ldr	r2, [pc, #504]	; (8003710 <HAL_RCC_OscConfig+0x4d0>)
 8003518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800351c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800351e:	f7fe fbc1 	bl	8001ca4 <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003526:	f7fe fbbd 	bl	8001ca4 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b64      	cmp	r3, #100	; 0x64
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e120      	b.n	800377a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003538:	4b75      	ldr	r3, [pc, #468]	; (8003710 <HAL_RCC_OscConfig+0x4d0>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0f0      	beq.n	8003526 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d106      	bne.n	800355a <HAL_RCC_OscConfig+0x31a>
 800354c:	4b6f      	ldr	r3, [pc, #444]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 800354e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003550:	4a6e      	ldr	r2, [pc, #440]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 8003552:	f043 0301 	orr.w	r3, r3, #1
 8003556:	6713      	str	r3, [r2, #112]	; 0x70
 8003558:	e02d      	b.n	80035b6 <HAL_RCC_OscConfig+0x376>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10c      	bne.n	800357c <HAL_RCC_OscConfig+0x33c>
 8003562:	4b6a      	ldr	r3, [pc, #424]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 8003564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003566:	4a69      	ldr	r2, [pc, #420]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 8003568:	f023 0301 	bic.w	r3, r3, #1
 800356c:	6713      	str	r3, [r2, #112]	; 0x70
 800356e:	4b67      	ldr	r3, [pc, #412]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 8003570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003572:	4a66      	ldr	r2, [pc, #408]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 8003574:	f023 0304 	bic.w	r3, r3, #4
 8003578:	6713      	str	r3, [r2, #112]	; 0x70
 800357a:	e01c      	b.n	80035b6 <HAL_RCC_OscConfig+0x376>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b05      	cmp	r3, #5
 8003582:	d10c      	bne.n	800359e <HAL_RCC_OscConfig+0x35e>
 8003584:	4b61      	ldr	r3, [pc, #388]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 8003586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003588:	4a60      	ldr	r2, [pc, #384]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 800358a:	f043 0304 	orr.w	r3, r3, #4
 800358e:	6713      	str	r3, [r2, #112]	; 0x70
 8003590:	4b5e      	ldr	r3, [pc, #376]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 8003592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003594:	4a5d      	ldr	r2, [pc, #372]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	6713      	str	r3, [r2, #112]	; 0x70
 800359c:	e00b      	b.n	80035b6 <HAL_RCC_OscConfig+0x376>
 800359e:	4b5b      	ldr	r3, [pc, #364]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 80035a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a2:	4a5a      	ldr	r2, [pc, #360]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 80035a4:	f023 0301 	bic.w	r3, r3, #1
 80035a8:	6713      	str	r3, [r2, #112]	; 0x70
 80035aa:	4b58      	ldr	r3, [pc, #352]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 80035ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ae:	4a57      	ldr	r2, [pc, #348]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 80035b0:	f023 0304 	bic.w	r3, r3, #4
 80035b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d015      	beq.n	80035ea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035be:	f7fe fb71 	bl	8001ca4 <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c4:	e00a      	b.n	80035dc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c6:	f7fe fb6d 	bl	8001ca4 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e0ce      	b.n	800377a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035dc:	4b4b      	ldr	r3, [pc, #300]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 80035de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0ee      	beq.n	80035c6 <HAL_RCC_OscConfig+0x386>
 80035e8:	e014      	b.n	8003614 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ea:	f7fe fb5b 	bl	8001ca4 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035f0:	e00a      	b.n	8003608 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035f2:	f7fe fb57 	bl	8001ca4 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003600:	4293      	cmp	r3, r2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e0b8      	b.n	800377a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003608:	4b40      	ldr	r3, [pc, #256]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 800360a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1ee      	bne.n	80035f2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003614:	7dfb      	ldrb	r3, [r7, #23]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d105      	bne.n	8003626 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800361a:	4b3c      	ldr	r3, [pc, #240]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	4a3b      	ldr	r2, [pc, #236]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 8003620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003624:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 80a4 	beq.w	8003778 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003630:	4b36      	ldr	r3, [pc, #216]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 030c 	and.w	r3, r3, #12
 8003638:	2b08      	cmp	r3, #8
 800363a:	d06b      	beq.n	8003714 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	2b02      	cmp	r3, #2
 8003642:	d149      	bne.n	80036d8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003644:	4b31      	ldr	r3, [pc, #196]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a30      	ldr	r2, [pc, #192]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 800364a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800364e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003650:	f7fe fb28 	bl	8001ca4 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003658:	f7fe fb24 	bl	8001ca4 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e087      	b.n	800377a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366a:	4b28      	ldr	r3, [pc, #160]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	69da      	ldr	r2, [r3, #28]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	019b      	lsls	r3, r3, #6
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368c:	085b      	lsrs	r3, r3, #1
 800368e:	3b01      	subs	r3, #1
 8003690:	041b      	lsls	r3, r3, #16
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003698:	061b      	lsls	r3, r3, #24
 800369a:	4313      	orrs	r3, r2
 800369c:	4a1b      	ldr	r2, [pc, #108]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 800369e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036a2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036a4:	4b19      	ldr	r3, [pc, #100]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a18      	ldr	r2, [pc, #96]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 80036aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b0:	f7fe faf8 	bl	8001ca4 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b8:	f7fe faf4 	bl	8001ca4 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e057      	b.n	800377a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ca:	4b10      	ldr	r3, [pc, #64]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0f0      	beq.n	80036b8 <HAL_RCC_OscConfig+0x478>
 80036d6:	e04f      	b.n	8003778 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d8:	4b0c      	ldr	r3, [pc, #48]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a0b      	ldr	r2, [pc, #44]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 80036de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fe fade 	bl	8001ca4 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ec:	f7fe fada 	bl	8001ca4 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e03d      	b.n	800377a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fe:	4b03      	ldr	r3, [pc, #12]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x4ac>
 800370a:	e035      	b.n	8003778 <HAL_RCC_OscConfig+0x538>
 800370c:	40023800 	.word	0x40023800
 8003710:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003714:	4b1b      	ldr	r3, [pc, #108]	; (8003784 <HAL_RCC_OscConfig+0x544>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d028      	beq.n	8003774 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800372c:	429a      	cmp	r2, r3
 800372e:	d121      	bne.n	8003774 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800373a:	429a      	cmp	r2, r3
 800373c:	d11a      	bne.n	8003774 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003744:	4013      	ands	r3, r2
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800374a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800374c:	4293      	cmp	r3, r2
 800374e:	d111      	bne.n	8003774 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375a:	085b      	lsrs	r3, r3, #1
 800375c:	3b01      	subs	r3, #1
 800375e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003760:	429a      	cmp	r2, r3
 8003762:	d107      	bne.n	8003774 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003770:	429a      	cmp	r2, r3
 8003772:	d001      	beq.n	8003778 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e000      	b.n	800377a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	40023800 	.word	0x40023800

08003788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e0d0      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037a0:	4b6a      	ldr	r3, [pc, #424]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 030f 	and.w	r3, r3, #15
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d910      	bls.n	80037d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ae:	4b67      	ldr	r3, [pc, #412]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f023 020f 	bic.w	r2, r3, #15
 80037b6:	4965      	ldr	r1, [pc, #404]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037be:	4b63      	ldr	r3, [pc, #396]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d001      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0b8      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d020      	beq.n	800381e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037e8:	4b59      	ldr	r3, [pc, #356]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	4a58      	ldr	r2, [pc, #352]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 80037ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003800:	4b53      	ldr	r3, [pc, #332]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	4a52      	ldr	r2, [pc, #328]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 8003806:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800380a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800380c:	4b50      	ldr	r3, [pc, #320]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	494d      	ldr	r1, [pc, #308]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 800381a:	4313      	orrs	r3, r2
 800381c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d040      	beq.n	80038ac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d107      	bne.n	8003842 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003832:	4b47      	ldr	r3, [pc, #284]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d115      	bne.n	800386a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e07f      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d107      	bne.n	800385a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384a:	4b41      	ldr	r3, [pc, #260]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d109      	bne.n	800386a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e073      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385a:	4b3d      	ldr	r3, [pc, #244]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e06b      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800386a:	4b39      	ldr	r3, [pc, #228]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f023 0203 	bic.w	r2, r3, #3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	4936      	ldr	r1, [pc, #216]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 8003878:	4313      	orrs	r3, r2
 800387a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800387c:	f7fe fa12 	bl	8001ca4 <HAL_GetTick>
 8003880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003882:	e00a      	b.n	800389a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003884:	f7fe fa0e 	bl	8001ca4 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003892:	4293      	cmp	r3, r2
 8003894:	d901      	bls.n	800389a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e053      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389a:	4b2d      	ldr	r3, [pc, #180]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 020c 	and.w	r2, r3, #12
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d1eb      	bne.n	8003884 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038ac:	4b27      	ldr	r3, [pc, #156]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 030f 	and.w	r3, r3, #15
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d210      	bcs.n	80038dc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ba:	4b24      	ldr	r3, [pc, #144]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f023 020f 	bic.w	r2, r3, #15
 80038c2:	4922      	ldr	r1, [pc, #136]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ca:	4b20      	ldr	r3, [pc, #128]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d001      	beq.n	80038dc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e032      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d008      	beq.n	80038fa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e8:	4b19      	ldr	r3, [pc, #100]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	4916      	ldr	r1, [pc, #88]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d009      	beq.n	800391a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003906:	4b12      	ldr	r3, [pc, #72]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	490e      	ldr	r1, [pc, #56]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 8003916:	4313      	orrs	r3, r2
 8003918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800391a:	f000 f821 	bl	8003960 <HAL_RCC_GetSysClockFreq>
 800391e:	4602      	mov	r2, r0
 8003920:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	091b      	lsrs	r3, r3, #4
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	490a      	ldr	r1, [pc, #40]	; (8003954 <HAL_RCC_ClockConfig+0x1cc>)
 800392c:	5ccb      	ldrb	r3, [r1, r3]
 800392e:	fa22 f303 	lsr.w	r3, r2, r3
 8003932:	4a09      	ldr	r2, [pc, #36]	; (8003958 <HAL_RCC_ClockConfig+0x1d0>)
 8003934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003936:	4b09      	ldr	r3, [pc, #36]	; (800395c <HAL_RCC_ClockConfig+0x1d4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f7fe f96e 	bl	8001c1c <HAL_InitTick>

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	40023c00 	.word	0x40023c00
 8003950:	40023800 	.word	0x40023800
 8003954:	08006b34 	.word	0x08006b34
 8003958:	20000008 	.word	0x20000008
 800395c:	2000000c 	.word	0x2000000c

08003960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003964:	b090      	sub	sp, #64	; 0x40
 8003966:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003968:	2300      	movs	r3, #0
 800396a:	637b      	str	r3, [r7, #52]	; 0x34
 800396c:	2300      	movs	r3, #0
 800396e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003970:	2300      	movs	r3, #0
 8003972:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003974:	2300      	movs	r3, #0
 8003976:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003978:	4b59      	ldr	r3, [pc, #356]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 030c 	and.w	r3, r3, #12
 8003980:	2b08      	cmp	r3, #8
 8003982:	d00d      	beq.n	80039a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003984:	2b08      	cmp	r3, #8
 8003986:	f200 80a1 	bhi.w	8003acc <HAL_RCC_GetSysClockFreq+0x16c>
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <HAL_RCC_GetSysClockFreq+0x34>
 800398e:	2b04      	cmp	r3, #4
 8003990:	d003      	beq.n	800399a <HAL_RCC_GetSysClockFreq+0x3a>
 8003992:	e09b      	b.n	8003acc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003994:	4b53      	ldr	r3, [pc, #332]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003996:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003998:	e09b      	b.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800399a:	4b53      	ldr	r3, [pc, #332]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x188>)
 800399c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800399e:	e098      	b.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039a0:	4b4f      	ldr	r3, [pc, #316]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039a8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80039aa:	4b4d      	ldr	r3, [pc, #308]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d028      	beq.n	8003a08 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039b6:	4b4a      	ldr	r3, [pc, #296]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	099b      	lsrs	r3, r3, #6
 80039bc:	2200      	movs	r2, #0
 80039be:	623b      	str	r3, [r7, #32]
 80039c0:	627a      	str	r2, [r7, #36]	; 0x24
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039c8:	2100      	movs	r1, #0
 80039ca:	4b47      	ldr	r3, [pc, #284]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x188>)
 80039cc:	fb03 f201 	mul.w	r2, r3, r1
 80039d0:	2300      	movs	r3, #0
 80039d2:	fb00 f303 	mul.w	r3, r0, r3
 80039d6:	4413      	add	r3, r2
 80039d8:	4a43      	ldr	r2, [pc, #268]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x188>)
 80039da:	fba0 1202 	umull	r1, r2, r0, r2
 80039de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039e0:	460a      	mov	r2, r1
 80039e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80039e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039e6:	4413      	add	r3, r2
 80039e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ec:	2200      	movs	r2, #0
 80039ee:	61bb      	str	r3, [r7, #24]
 80039f0:	61fa      	str	r2, [r7, #28]
 80039f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80039fa:	f7fc fc59 	bl	80002b0 <__aeabi_uldivmod>
 80039fe:	4602      	mov	r2, r0
 8003a00:	460b      	mov	r3, r1
 8003a02:	4613      	mov	r3, r2
 8003a04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a06:	e053      	b.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a08:	4b35      	ldr	r3, [pc, #212]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	099b      	lsrs	r3, r3, #6
 8003a0e:	2200      	movs	r2, #0
 8003a10:	613b      	str	r3, [r7, #16]
 8003a12:	617a      	str	r2, [r7, #20]
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a1a:	f04f 0b00 	mov.w	fp, #0
 8003a1e:	4652      	mov	r2, sl
 8003a20:	465b      	mov	r3, fp
 8003a22:	f04f 0000 	mov.w	r0, #0
 8003a26:	f04f 0100 	mov.w	r1, #0
 8003a2a:	0159      	lsls	r1, r3, #5
 8003a2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a30:	0150      	lsls	r0, r2, #5
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	ebb2 080a 	subs.w	r8, r2, sl
 8003a3a:	eb63 090b 	sbc.w	r9, r3, fp
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	f04f 0300 	mov.w	r3, #0
 8003a46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a52:	ebb2 0408 	subs.w	r4, r2, r8
 8003a56:	eb63 0509 	sbc.w	r5, r3, r9
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	f04f 0300 	mov.w	r3, #0
 8003a62:	00eb      	lsls	r3, r5, #3
 8003a64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a68:	00e2      	lsls	r2, r4, #3
 8003a6a:	4614      	mov	r4, r2
 8003a6c:	461d      	mov	r5, r3
 8003a6e:	eb14 030a 	adds.w	r3, r4, sl
 8003a72:	603b      	str	r3, [r7, #0]
 8003a74:	eb45 030b 	adc.w	r3, r5, fp
 8003a78:	607b      	str	r3, [r7, #4]
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	f04f 0300 	mov.w	r3, #0
 8003a82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a86:	4629      	mov	r1, r5
 8003a88:	028b      	lsls	r3, r1, #10
 8003a8a:	4621      	mov	r1, r4
 8003a8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a90:	4621      	mov	r1, r4
 8003a92:	028a      	lsls	r2, r1, #10
 8003a94:	4610      	mov	r0, r2
 8003a96:	4619      	mov	r1, r3
 8003a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	60fa      	str	r2, [r7, #12]
 8003aa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003aa4:	f7fc fc04 	bl	80002b0 <__aeabi_uldivmod>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4613      	mov	r3, r2
 8003aae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ab0:	4b0b      	ldr	r3, [pc, #44]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	0c1b      	lsrs	r3, r3, #16
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	3301      	adds	r3, #1
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003ac0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003aca:	e002      	b.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003acc:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ace:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3740      	adds	r7, #64	; 0x40
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ade:	bf00      	nop
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	00f42400 	.word	0x00f42400
 8003ae8:	017d7840 	.word	0x017d7840

08003aec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003af0:	4b03      	ldr	r3, [pc, #12]	; (8003b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003af2:	681b      	ldr	r3, [r3, #0]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	20000008 	.word	0x20000008

08003b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b08:	f7ff fff0 	bl	8003aec <HAL_RCC_GetHCLKFreq>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	0a9b      	lsrs	r3, r3, #10
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	4903      	ldr	r1, [pc, #12]	; (8003b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b1a:	5ccb      	ldrb	r3, [r1, r3]
 8003b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40023800 	.word	0x40023800
 8003b28:	08006b44 	.word	0x08006b44

08003b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b30:	f7ff ffdc 	bl	8003aec <HAL_RCC_GetHCLKFreq>
 8003b34:	4602      	mov	r2, r0
 8003b36:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	0b5b      	lsrs	r3, r3, #13
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	4903      	ldr	r1, [pc, #12]	; (8003b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b42:	5ccb      	ldrb	r3, [r1, r3]
 8003b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	08006b44 	.word	0x08006b44

08003b54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003b60:	2300      	movs	r3, #0
 8003b62:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003b64:	2300      	movs	r3, #0
 8003b66:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d012      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b7c:	4b69      	ldr	r3, [pc, #420]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	4a68      	ldr	r2, [pc, #416]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b86:	6093      	str	r3, [r2, #8]
 8003b88:	4b66      	ldr	r3, [pc, #408]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b90:	4964      	ldr	r1, [pc, #400]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d017      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bae:	4b5d      	ldr	r3, [pc, #372]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bbc:	4959      	ldr	r1, [pc, #356]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bcc:	d101      	bne.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d017      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bea:	4b4e      	ldr	r3, [pc, #312]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bf0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf8:	494a      	ldr	r1, [pc, #296]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c08:	d101      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003c16:	2301      	movs	r3, #1
 8003c18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003c26:	2301      	movs	r3, #1
 8003c28:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0320 	and.w	r3, r3, #32
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 808b 	beq.w	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c38:	4b3a      	ldr	r3, [pc, #232]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	4a39      	ldr	r2, [pc, #228]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c42:	6413      	str	r3, [r2, #64]	; 0x40
 8003c44:	4b37      	ldr	r3, [pc, #220]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c4c:	60bb      	str	r3, [r7, #8]
 8003c4e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c50:	4b35      	ldr	r3, [pc, #212]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a34      	ldr	r2, [pc, #208]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c5c:	f7fe f822 	bl	8001ca4 <HAL_GetTick>
 8003c60:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c64:	f7fe f81e 	bl	8001ca4 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b64      	cmp	r3, #100	; 0x64
 8003c70:	d901      	bls.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e357      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c76:	4b2c      	ldr	r3, [pc, #176]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0f0      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c82:	4b28      	ldr	r3, [pc, #160]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c8a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d035      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d02e      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ca0:	4b20      	ldr	r3, [pc, #128]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003caa:	4b1e      	ldr	r3, [pc, #120]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cae:	4a1d      	ldr	r2, [pc, #116]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cb6:	4b1b      	ldr	r3, [pc, #108]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cba:	4a1a      	ldr	r2, [pc, #104]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cc0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003cc2:	4a18      	ldr	r2, [pc, #96]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003cc8:	4b16      	ldr	r3, [pc, #88]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d114      	bne.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd4:	f7fd ffe6 	bl	8001ca4 <HAL_GetTick>
 8003cd8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cda:	e00a      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cdc:	f7fd ffe2 	bl	8001ca4 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e319      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf2:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0ee      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d0a:	d111      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003d0c:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d18:	4b04      	ldr	r3, [pc, #16]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d1a:	400b      	ands	r3, r1
 8003d1c:	4901      	ldr	r1, [pc, #4]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	608b      	str	r3, [r1, #8]
 8003d22:	e00b      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003d24:	40023800 	.word	0x40023800
 8003d28:	40007000 	.word	0x40007000
 8003d2c:	0ffffcff 	.word	0x0ffffcff
 8003d30:	4baa      	ldr	r3, [pc, #680]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	4aa9      	ldr	r2, [pc, #676]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d36:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d3a:	6093      	str	r3, [r2, #8]
 8003d3c:	4ba7      	ldr	r3, [pc, #668]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d48:	49a4      	ldr	r1, [pc, #656]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0310 	and.w	r3, r3, #16
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d010      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d5a:	4ba0      	ldr	r3, [pc, #640]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d60:	4a9e      	ldr	r2, [pc, #632]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003d6a:	4b9c      	ldr	r3, [pc, #624]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d6c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d74:	4999      	ldr	r1, [pc, #612]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00a      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d88:	4b94      	ldr	r3, [pc, #592]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d96:	4991      	ldr	r1, [pc, #580]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003daa:	4b8c      	ldr	r3, [pc, #560]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003db8:	4988      	ldr	r1, [pc, #544]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dcc:	4b83      	ldr	r3, [pc, #524]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dda:	4980      	ldr	r1, [pc, #512]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dee:	4b7b      	ldr	r3, [pc, #492]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfc:	4977      	ldr	r1, [pc, #476]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e10:	4b72      	ldr	r3, [pc, #456]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e16:	f023 0203 	bic.w	r2, r3, #3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1e:	496f      	ldr	r1, [pc, #444]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e32:	4b6a      	ldr	r3, [pc, #424]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e38:	f023 020c 	bic.w	r2, r3, #12
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e40:	4966      	ldr	r1, [pc, #408]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e54:	4b61      	ldr	r3, [pc, #388]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e62:	495e      	ldr	r1, [pc, #376]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e76:	4b59      	ldr	r3, [pc, #356]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e84:	4955      	ldr	r1, [pc, #340]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00a      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e98:	4b50      	ldr	r3, [pc, #320]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea6:	494d      	ldr	r1, [pc, #308]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003eba:	4b48      	ldr	r3, [pc, #288]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec8:	4944      	ldr	r1, [pc, #272]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00a      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003edc:	4b3f      	ldr	r3, [pc, #252]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eea:	493c      	ldr	r1, [pc, #240]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003efe:	4b37      	ldr	r3, [pc, #220]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f0c:	4933      	ldr	r1, [pc, #204]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00a      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f20:	4b2e      	ldr	r3, [pc, #184]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f26:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f2e:	492b      	ldr	r1, [pc, #172]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d011      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f42:	4b26      	ldr	r3, [pc, #152]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f48:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f50:	4922      	ldr	r1, [pc, #136]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f60:	d101      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003f62:	2301      	movs	r3, #1
 8003f64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003f72:	2301      	movs	r3, #1
 8003f74:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f82:	4b16      	ldr	r3, [pc, #88]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f88:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f90:	4912      	ldr	r1, [pc, #72]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00b      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fa4:	4b0d      	ldr	r3, [pc, #52]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003faa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fb4:	4909      	ldr	r1, [pc, #36]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d006      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 80d9 	beq.w	8004182 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003fd0:	4b02      	ldr	r3, [pc, #8]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a01      	ldr	r2, [pc, #4]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fda:	e001      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fe2:	f7fd fe5f 	bl	8001ca4 <HAL_GetTick>
 8003fe6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fe8:	e008      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fea:	f7fd fe5b 	bl	8001ca4 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b64      	cmp	r3, #100	; 0x64
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e194      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ffc:	4b6c      	ldr	r3, [pc, #432]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1f0      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	d021      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004018:	2b00      	cmp	r3, #0
 800401a:	d11d      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800401c:	4b64      	ldr	r3, [pc, #400]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800401e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004022:	0c1b      	lsrs	r3, r3, #16
 8004024:	f003 0303 	and.w	r3, r3, #3
 8004028:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800402a:	4b61      	ldr	r3, [pc, #388]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800402c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004030:	0e1b      	lsrs	r3, r3, #24
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	019a      	lsls	r2, r3, #6
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	041b      	lsls	r3, r3, #16
 8004042:	431a      	orrs	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	061b      	lsls	r3, r3, #24
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	071b      	lsls	r3, r3, #28
 8004050:	4957      	ldr	r1, [pc, #348]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d004      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004068:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800406c:	d00a      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004076:	2b00      	cmp	r3, #0
 8004078:	d02e      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004082:	d129      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004084:	4b4a      	ldr	r3, [pc, #296]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004086:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800408a:	0c1b      	lsrs	r3, r3, #16
 800408c:	f003 0303 	and.w	r3, r3, #3
 8004090:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004092:	4b47      	ldr	r3, [pc, #284]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004098:	0f1b      	lsrs	r3, r3, #28
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	019a      	lsls	r2, r3, #6
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	041b      	lsls	r3, r3, #16
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	061b      	lsls	r3, r3, #24
 80040b2:	431a      	orrs	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	071b      	lsls	r3, r3, #28
 80040b8:	493d      	ldr	r1, [pc, #244]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80040c0:	4b3b      	ldr	r3, [pc, #236]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040c6:	f023 021f 	bic.w	r2, r3, #31
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	3b01      	subs	r3, #1
 80040d0:	4937      	ldr	r1, [pc, #220]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d01d      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040e4:	4b32      	ldr	r3, [pc, #200]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ea:	0e1b      	lsrs	r3, r3, #24
 80040ec:	f003 030f 	and.w	r3, r3, #15
 80040f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040f2:	4b2f      	ldr	r3, [pc, #188]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040f8:	0f1b      	lsrs	r3, r3, #28
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	019a      	lsls	r2, r3, #6
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	041b      	lsls	r3, r3, #16
 800410c:	431a      	orrs	r2, r3
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	061b      	lsls	r3, r3, #24
 8004112:	431a      	orrs	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	071b      	lsls	r3, r3, #28
 8004118:	4925      	ldr	r1, [pc, #148]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d011      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	019a      	lsls	r2, r3, #6
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	041b      	lsls	r3, r3, #16
 8004138:	431a      	orrs	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	061b      	lsls	r3, r3, #24
 8004140:	431a      	orrs	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	071b      	lsls	r3, r3, #28
 8004148:	4919      	ldr	r1, [pc, #100]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004150:	4b17      	ldr	r3, [pc, #92]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a16      	ldr	r2, [pc, #88]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004156:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800415a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800415c:	f7fd fda2 	bl	8001ca4 <HAL_GetTick>
 8004160:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004162:	e008      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004164:	f7fd fd9e 	bl	8001ca4 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b64      	cmp	r3, #100	; 0x64
 8004170:	d901      	bls.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e0d7      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004176:	4b0e      	ldr	r3, [pc, #56]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0f0      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	2b01      	cmp	r3, #1
 8004186:	f040 80cd 	bne.w	8004324 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800418a:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a08      	ldr	r2, [pc, #32]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004190:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004194:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004196:	f7fd fd85 	bl	8001ca4 <HAL_GetTick>
 800419a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800419c:	e00a      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800419e:	f7fd fd81 	bl	8001ca4 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b64      	cmp	r3, #100	; 0x64
 80041aa:	d903      	bls.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e0ba      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80041b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041b4:	4b5e      	ldr	r3, [pc, #376]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041c0:	d0ed      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d009      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d02e      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d12a      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041ea:	4b51      	ldr	r3, [pc, #324]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f0:	0c1b      	lsrs	r3, r3, #16
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80041f8:	4b4d      	ldr	r3, [pc, #308]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fe:	0f1b      	lsrs	r3, r3, #28
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	019a      	lsls	r2, r3, #6
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	041b      	lsls	r3, r3, #16
 8004210:	431a      	orrs	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	061b      	lsls	r3, r3, #24
 8004218:	431a      	orrs	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	071b      	lsls	r3, r3, #28
 800421e:	4944      	ldr	r1, [pc, #272]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004220:	4313      	orrs	r3, r2
 8004222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004226:	4b42      	ldr	r3, [pc, #264]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800422c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004234:	3b01      	subs	r3, #1
 8004236:	021b      	lsls	r3, r3, #8
 8004238:	493d      	ldr	r1, [pc, #244]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800423a:	4313      	orrs	r3, r2
 800423c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d022      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004250:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004254:	d11d      	bne.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004256:	4b36      	ldr	r3, [pc, #216]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425c:	0e1b      	lsrs	r3, r3, #24
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004264:	4b32      	ldr	r3, [pc, #200]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426a:	0f1b      	lsrs	r3, r3, #28
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	019a      	lsls	r2, r3, #6
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	041b      	lsls	r3, r3, #16
 800427e:	431a      	orrs	r2, r3
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	061b      	lsls	r3, r3, #24
 8004284:	431a      	orrs	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	071b      	lsls	r3, r3, #28
 800428a:	4929      	ldr	r1, [pc, #164]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0308 	and.w	r3, r3, #8
 800429a:	2b00      	cmp	r3, #0
 800429c:	d028      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800429e:	4b24      	ldr	r3, [pc, #144]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a4:	0e1b      	lsrs	r3, r3, #24
 80042a6:	f003 030f 	and.w	r3, r3, #15
 80042aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80042ac:	4b20      	ldr	r3, [pc, #128]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b2:	0c1b      	lsrs	r3, r3, #16
 80042b4:	f003 0303 	and.w	r3, r3, #3
 80042b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	019a      	lsls	r2, r3, #6
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	041b      	lsls	r3, r3, #16
 80042c4:	431a      	orrs	r2, r3
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	061b      	lsls	r3, r3, #24
 80042ca:	431a      	orrs	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	071b      	lsls	r3, r3, #28
 80042d2:	4917      	ldr	r1, [pc, #92]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80042da:	4b15      	ldr	r3, [pc, #84]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e8:	4911      	ldr	r1, [pc, #68]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80042f0:	4b0f      	ldr	r3, [pc, #60]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a0e      	ldr	r2, [pc, #56]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042fc:	f7fd fcd2 	bl	8001ca4 <HAL_GetTick>
 8004300:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004302:	e008      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004304:	f7fd fcce 	bl	8001ca4 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b64      	cmp	r3, #100	; 0x64
 8004310:	d901      	bls.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e007      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004316:	4b06      	ldr	r3, [pc, #24]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800431e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004322:	d1ef      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3720      	adds	r7, #32
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	40023800 	.word	0x40023800

08004334 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e09d      	b.n	8004482 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	2b00      	cmp	r3, #0
 800434c:	d108      	bne.n	8004360 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004356:	d009      	beq.n	800436c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	61da      	str	r2, [r3, #28]
 800435e:	e005      	b.n	800436c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d106      	bne.n	800438c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7fd face 	bl	8001928 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043ac:	d902      	bls.n	80043b4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80043ae:	2300      	movs	r3, #0
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	e002      	b.n	80043ba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80043b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043b8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80043c2:	d007      	beq.n	80043d4 <HAL_SPI_Init+0xa0>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043cc:	d002      	beq.n	80043d4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043e4:	431a      	orrs	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	431a      	orrs	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800440c:	431a      	orrs	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004416:	ea42 0103 	orr.w	r1, r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	0c1b      	lsrs	r3, r3, #16
 8004430:	f003 0204 	and.w	r2, r3, #4
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	f003 0310 	and.w	r3, r3, #16
 800443c:	431a      	orrs	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004450:	ea42 0103 	orr.w	r1, r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69da      	ldr	r2, [r3, #28]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004470:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b082      	sub	sp, #8
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e040      	b.n	800451e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d106      	bne.n	80044b2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7fd fa9d 	bl	80019ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2224      	movs	r2, #36	; 0x24
 80044b6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0201 	bic.w	r2, r2, #1
 80044c6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 fb1f 	bl	8004b0c <UART_SetConfig>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d101      	bne.n	80044d8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e022      	b.n	800451e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d002      	beq.n	80044e6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 fd77 	bl	8004fd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004504:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f042 0201 	orr.w	r2, r2, #1
 8004514:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 fdfe 	bl	8005118 <UART_CheckIdleState>
 800451c:	4603      	mov	r3, r0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b0ba      	sub	sp, #232	; 0xe8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800454e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004552:	f640 030f 	movw	r3, #2063	; 0x80f
 8004556:	4013      	ands	r3, r2
 8004558:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800455c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004560:	2b00      	cmp	r3, #0
 8004562:	d115      	bne.n	8004590 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004568:	f003 0320 	and.w	r3, r3, #32
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00f      	beq.n	8004590 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004574:	f003 0320 	and.w	r3, r3, #32
 8004578:	2b00      	cmp	r3, #0
 800457a:	d009      	beq.n	8004590 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 8297 	beq.w	8004ab4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	4798      	blx	r3
      }
      return;
 800458e:	e291      	b.n	8004ab4 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004590:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 8117 	beq.w	80047c8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800459a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d106      	bne.n	80045b4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80045a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80045aa:	4b85      	ldr	r3, [pc, #532]	; (80047c0 <HAL_UART_IRQHandler+0x298>)
 80045ac:	4013      	ands	r3, r2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f000 810a 	beq.w	80047c8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80045b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d011      	beq.n	80045e4 <HAL_UART_IRQHandler+0xbc>
 80045c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00b      	beq.n	80045e4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2201      	movs	r2, #1
 80045d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045da:	f043 0201 	orr.w	r2, r3, #1
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d011      	beq.n	8004614 <HAL_UART_IRQHandler+0xec>
 80045f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00b      	beq.n	8004614 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2202      	movs	r2, #2
 8004602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800460a:	f043 0204 	orr.w	r2, r3, #4
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b00      	cmp	r3, #0
 800461e:	d011      	beq.n	8004644 <HAL_UART_IRQHandler+0x11c>
 8004620:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00b      	beq.n	8004644 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2204      	movs	r2, #4
 8004632:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800463a:	f043 0202 	orr.w	r2, r3, #2
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004648:	f003 0308 	and.w	r3, r3, #8
 800464c:	2b00      	cmp	r3, #0
 800464e:	d017      	beq.n	8004680 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b00      	cmp	r3, #0
 800465a:	d105      	bne.n	8004668 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800465c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004660:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00b      	beq.n	8004680 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2208      	movs	r2, #8
 800466e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004676:	f043 0208 	orr.w	r2, r3, #8
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004688:	2b00      	cmp	r3, #0
 800468a:	d012      	beq.n	80046b2 <HAL_UART_IRQHandler+0x18a>
 800468c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004690:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00c      	beq.n	80046b2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046a8:	f043 0220 	orr.w	r2, r3, #32
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 81fd 	beq.w	8004ab8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80046be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c2:	f003 0320 	and.w	r3, r3, #32
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00d      	beq.n	80046e6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d007      	beq.n	80046e6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fa:	2b40      	cmp	r3, #64	; 0x40
 80046fc:	d005      	beq.n	800470a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004702:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004706:	2b00      	cmp	r3, #0
 8004708:	d04f      	beq.n	80047aa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fe01 	bl	8005312 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471a:	2b40      	cmp	r3, #64	; 0x40
 800471c:	d141      	bne.n	80047a2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	3308      	adds	r3, #8
 8004724:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004728:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800472c:	e853 3f00 	ldrex	r3, [r3]
 8004730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004734:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800473c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	3308      	adds	r3, #8
 8004746:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800474a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800474e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004752:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004756:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800475a:	e841 2300 	strex	r3, r2, [r1]
 800475e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004762:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1d9      	bne.n	800471e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800476e:	2b00      	cmp	r3, #0
 8004770:	d013      	beq.n	800479a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004776:	4a13      	ldr	r2, [pc, #76]	; (80047c4 <HAL_UART_IRQHandler+0x29c>)
 8004778:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800477e:	4618      	mov	r0, r3
 8004780:	f7fd fc41 	bl	8002006 <HAL_DMA_Abort_IT>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d017      	beq.n	80047ba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800478e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004794:	4610      	mov	r0, r2
 8004796:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004798:	e00f      	b.n	80047ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f9a0 	bl	8004ae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a0:	e00b      	b.n	80047ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f99c 	bl	8004ae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a8:	e007      	b.n	80047ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f998 	bl	8004ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80047b8:	e17e      	b.n	8004ab8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ba:	bf00      	nop
    return;
 80047bc:	e17c      	b.n	8004ab8 <HAL_UART_IRQHandler+0x590>
 80047be:	bf00      	nop
 80047c0:	04000120 	.word	0x04000120
 80047c4:	080053db 	.word	0x080053db

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	f040 814c 	bne.w	8004a6a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80047d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047d6:	f003 0310 	and.w	r3, r3, #16
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 8145 	beq.w	8004a6a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80047e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047e4:	f003 0310 	and.w	r3, r3, #16
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 813e 	beq.w	8004a6a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2210      	movs	r2, #16
 80047f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004800:	2b40      	cmp	r3, #64	; 0x40
 8004802:	f040 80b6 	bne.w	8004972 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004812:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 8150 	beq.w	8004abc <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004822:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004826:	429a      	cmp	r2, r3
 8004828:	f080 8148 	bcs.w	8004abc <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004832:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004840:	f000 8086 	beq.w	8004950 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004850:	e853 3f00 	ldrex	r3, [r3]
 8004854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004858:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800485c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004860:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	461a      	mov	r2, r3
 800486a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800486e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004872:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004876:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800487a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800487e:	e841 2300 	strex	r3, r2, [r1]
 8004882:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004886:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1da      	bne.n	8004844 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	3308      	adds	r3, #8
 8004894:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800489e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048a0:	f023 0301 	bic.w	r3, r3, #1
 80048a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	3308      	adds	r3, #8
 80048ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80048b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048be:	e841 2300 	strex	r3, r2, [r1]
 80048c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1e1      	bne.n	800488e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3308      	adds	r3, #8
 80048d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048d4:	e853 3f00 	ldrex	r3, [r3]
 80048d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3308      	adds	r3, #8
 80048ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048f6:	e841 2300 	strex	r3, r2, [r1]
 80048fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1e3      	bne.n	80048ca <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2220      	movs	r2, #32
 8004906:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004918:	e853 3f00 	ldrex	r3, [r3]
 800491c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800491e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004920:	f023 0310 	bic.w	r3, r3, #16
 8004924:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	461a      	mov	r2, r3
 800492e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004932:	65bb      	str	r3, [r7, #88]	; 0x58
 8004934:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004936:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004938:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800493a:	e841 2300 	strex	r3, r2, [r1]
 800493e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1e4      	bne.n	8004910 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800494a:	4618      	mov	r0, r3
 800494c:	f7fd faeb 	bl	8001f26 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004962:	b29b      	uxth	r3, r3
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	b29b      	uxth	r3, r3
 8004968:	4619      	mov	r1, r3
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f8c2 	bl	8004af4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004970:	e0a4      	b.n	8004abc <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800497e:	b29b      	uxth	r3, r3
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800498c:	b29b      	uxth	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 8096 	beq.w	8004ac0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8004994:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 8091 	beq.w	8004ac0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a6:	e853 3f00 	ldrex	r3, [r3]
 80049aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	461a      	mov	r2, r3
 80049bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049c0:	647b      	str	r3, [r7, #68]	; 0x44
 80049c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049c8:	e841 2300 	strex	r3, r2, [r1]
 80049cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1e4      	bne.n	800499e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3308      	adds	r3, #8
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	e853 3f00 	ldrex	r3, [r3]
 80049e2:	623b      	str	r3, [r7, #32]
   return(result);
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	f023 0301 	bic.w	r3, r3, #1
 80049ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3308      	adds	r3, #8
 80049f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80049f8:	633a      	str	r2, [r7, #48]	; 0x30
 80049fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a00:	e841 2300 	strex	r3, r2, [r1]
 8004a04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1e3      	bne.n	80049d4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	e853 3f00 	ldrex	r3, [r3]
 8004a2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f023 0310 	bic.w	r3, r3, #16
 8004a34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a42:	61fb      	str	r3, [r7, #28]
 8004a44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a46:	69b9      	ldr	r1, [r7, #24]
 8004a48:	69fa      	ldr	r2, [r7, #28]
 8004a4a:	e841 2300 	strex	r3, r2, [r1]
 8004a4e:	617b      	str	r3, [r7, #20]
   return(result);
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1e4      	bne.n	8004a20 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2202      	movs	r2, #2
 8004a5a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a60:	4619      	mov	r1, r3
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f846 	bl	8004af4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a68:	e02a      	b.n	8004ac0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00e      	beq.n	8004a94 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d008      	beq.n	8004a94 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d01c      	beq.n	8004ac4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	4798      	blx	r3
    }
    return;
 8004a92:	e017      	b.n	8004ac4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d012      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x59e>
 8004aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00c      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 fcaa 	bl	8005406 <UART_EndTransmit_IT>
    return;
 8004ab2:	e008      	b.n	8004ac6 <HAL_UART_IRQHandler+0x59e>
      return;
 8004ab4:	bf00      	nop
 8004ab6:	e006      	b.n	8004ac6 <HAL_UART_IRQHandler+0x59e>
    return;
 8004ab8:	bf00      	nop
 8004aba:	e004      	b.n	8004ac6 <HAL_UART_IRQHandler+0x59e>
      return;
 8004abc:	bf00      	nop
 8004abe:	e002      	b.n	8004ac6 <HAL_UART_IRQHandler+0x59e>
      return;
 8004ac0:	bf00      	nop
 8004ac2:	e000      	b.n	8004ac6 <HAL_UART_IRQHandler+0x59e>
    return;
 8004ac4:	bf00      	nop
  }

}
 8004ac6:	37e8      	adds	r7, #232	; 0xe8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	460b      	mov	r3, r1
 8004afe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b088      	sub	sp, #32
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b14:	2300      	movs	r3, #0
 8004b16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	431a      	orrs	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	431a      	orrs	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	4ba6      	ldr	r3, [pc, #664]	; (8004dd0 <UART_SetConfig+0x2c4>)
 8004b38:	4013      	ands	r3, r2
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6812      	ldr	r2, [r2, #0]
 8004b3e:	6979      	ldr	r1, [r7, #20]
 8004b40:	430b      	orrs	r3, r1
 8004b42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68da      	ldr	r2, [r3, #12]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a94      	ldr	r2, [pc, #592]	; (8004dd4 <UART_SetConfig+0x2c8>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d120      	bne.n	8004bca <UART_SetConfig+0xbe>
 8004b88:	4b93      	ldr	r3, [pc, #588]	; (8004dd8 <UART_SetConfig+0x2cc>)
 8004b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8e:	f003 0303 	and.w	r3, r3, #3
 8004b92:	2b03      	cmp	r3, #3
 8004b94:	d816      	bhi.n	8004bc4 <UART_SetConfig+0xb8>
 8004b96:	a201      	add	r2, pc, #4	; (adr r2, 8004b9c <UART_SetConfig+0x90>)
 8004b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9c:	08004bad 	.word	0x08004bad
 8004ba0:	08004bb9 	.word	0x08004bb9
 8004ba4:	08004bb3 	.word	0x08004bb3
 8004ba8:	08004bbf 	.word	0x08004bbf
 8004bac:	2301      	movs	r3, #1
 8004bae:	77fb      	strb	r3, [r7, #31]
 8004bb0:	e150      	b.n	8004e54 <UART_SetConfig+0x348>
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	77fb      	strb	r3, [r7, #31]
 8004bb6:	e14d      	b.n	8004e54 <UART_SetConfig+0x348>
 8004bb8:	2304      	movs	r3, #4
 8004bba:	77fb      	strb	r3, [r7, #31]
 8004bbc:	e14a      	b.n	8004e54 <UART_SetConfig+0x348>
 8004bbe:	2308      	movs	r3, #8
 8004bc0:	77fb      	strb	r3, [r7, #31]
 8004bc2:	e147      	b.n	8004e54 <UART_SetConfig+0x348>
 8004bc4:	2310      	movs	r3, #16
 8004bc6:	77fb      	strb	r3, [r7, #31]
 8004bc8:	e144      	b.n	8004e54 <UART_SetConfig+0x348>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a83      	ldr	r2, [pc, #524]	; (8004ddc <UART_SetConfig+0x2d0>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d132      	bne.n	8004c3a <UART_SetConfig+0x12e>
 8004bd4:	4b80      	ldr	r3, [pc, #512]	; (8004dd8 <UART_SetConfig+0x2cc>)
 8004bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bda:	f003 030c 	and.w	r3, r3, #12
 8004bde:	2b0c      	cmp	r3, #12
 8004be0:	d828      	bhi.n	8004c34 <UART_SetConfig+0x128>
 8004be2:	a201      	add	r2, pc, #4	; (adr r2, 8004be8 <UART_SetConfig+0xdc>)
 8004be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be8:	08004c1d 	.word	0x08004c1d
 8004bec:	08004c35 	.word	0x08004c35
 8004bf0:	08004c35 	.word	0x08004c35
 8004bf4:	08004c35 	.word	0x08004c35
 8004bf8:	08004c29 	.word	0x08004c29
 8004bfc:	08004c35 	.word	0x08004c35
 8004c00:	08004c35 	.word	0x08004c35
 8004c04:	08004c35 	.word	0x08004c35
 8004c08:	08004c23 	.word	0x08004c23
 8004c0c:	08004c35 	.word	0x08004c35
 8004c10:	08004c35 	.word	0x08004c35
 8004c14:	08004c35 	.word	0x08004c35
 8004c18:	08004c2f 	.word	0x08004c2f
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	77fb      	strb	r3, [r7, #31]
 8004c20:	e118      	b.n	8004e54 <UART_SetConfig+0x348>
 8004c22:	2302      	movs	r3, #2
 8004c24:	77fb      	strb	r3, [r7, #31]
 8004c26:	e115      	b.n	8004e54 <UART_SetConfig+0x348>
 8004c28:	2304      	movs	r3, #4
 8004c2a:	77fb      	strb	r3, [r7, #31]
 8004c2c:	e112      	b.n	8004e54 <UART_SetConfig+0x348>
 8004c2e:	2308      	movs	r3, #8
 8004c30:	77fb      	strb	r3, [r7, #31]
 8004c32:	e10f      	b.n	8004e54 <UART_SetConfig+0x348>
 8004c34:	2310      	movs	r3, #16
 8004c36:	77fb      	strb	r3, [r7, #31]
 8004c38:	e10c      	b.n	8004e54 <UART_SetConfig+0x348>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a68      	ldr	r2, [pc, #416]	; (8004de0 <UART_SetConfig+0x2d4>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d120      	bne.n	8004c86 <UART_SetConfig+0x17a>
 8004c44:	4b64      	ldr	r3, [pc, #400]	; (8004dd8 <UART_SetConfig+0x2cc>)
 8004c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c4e:	2b30      	cmp	r3, #48	; 0x30
 8004c50:	d013      	beq.n	8004c7a <UART_SetConfig+0x16e>
 8004c52:	2b30      	cmp	r3, #48	; 0x30
 8004c54:	d814      	bhi.n	8004c80 <UART_SetConfig+0x174>
 8004c56:	2b20      	cmp	r3, #32
 8004c58:	d009      	beq.n	8004c6e <UART_SetConfig+0x162>
 8004c5a:	2b20      	cmp	r3, #32
 8004c5c:	d810      	bhi.n	8004c80 <UART_SetConfig+0x174>
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <UART_SetConfig+0x15c>
 8004c62:	2b10      	cmp	r3, #16
 8004c64:	d006      	beq.n	8004c74 <UART_SetConfig+0x168>
 8004c66:	e00b      	b.n	8004c80 <UART_SetConfig+0x174>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	77fb      	strb	r3, [r7, #31]
 8004c6c:	e0f2      	b.n	8004e54 <UART_SetConfig+0x348>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	77fb      	strb	r3, [r7, #31]
 8004c72:	e0ef      	b.n	8004e54 <UART_SetConfig+0x348>
 8004c74:	2304      	movs	r3, #4
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	e0ec      	b.n	8004e54 <UART_SetConfig+0x348>
 8004c7a:	2308      	movs	r3, #8
 8004c7c:	77fb      	strb	r3, [r7, #31]
 8004c7e:	e0e9      	b.n	8004e54 <UART_SetConfig+0x348>
 8004c80:	2310      	movs	r3, #16
 8004c82:	77fb      	strb	r3, [r7, #31]
 8004c84:	e0e6      	b.n	8004e54 <UART_SetConfig+0x348>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a56      	ldr	r2, [pc, #344]	; (8004de4 <UART_SetConfig+0x2d8>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d120      	bne.n	8004cd2 <UART_SetConfig+0x1c6>
 8004c90:	4b51      	ldr	r3, [pc, #324]	; (8004dd8 <UART_SetConfig+0x2cc>)
 8004c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c9a:	2bc0      	cmp	r3, #192	; 0xc0
 8004c9c:	d013      	beq.n	8004cc6 <UART_SetConfig+0x1ba>
 8004c9e:	2bc0      	cmp	r3, #192	; 0xc0
 8004ca0:	d814      	bhi.n	8004ccc <UART_SetConfig+0x1c0>
 8004ca2:	2b80      	cmp	r3, #128	; 0x80
 8004ca4:	d009      	beq.n	8004cba <UART_SetConfig+0x1ae>
 8004ca6:	2b80      	cmp	r3, #128	; 0x80
 8004ca8:	d810      	bhi.n	8004ccc <UART_SetConfig+0x1c0>
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <UART_SetConfig+0x1a8>
 8004cae:	2b40      	cmp	r3, #64	; 0x40
 8004cb0:	d006      	beq.n	8004cc0 <UART_SetConfig+0x1b4>
 8004cb2:	e00b      	b.n	8004ccc <UART_SetConfig+0x1c0>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	77fb      	strb	r3, [r7, #31]
 8004cb8:	e0cc      	b.n	8004e54 <UART_SetConfig+0x348>
 8004cba:	2302      	movs	r3, #2
 8004cbc:	77fb      	strb	r3, [r7, #31]
 8004cbe:	e0c9      	b.n	8004e54 <UART_SetConfig+0x348>
 8004cc0:	2304      	movs	r3, #4
 8004cc2:	77fb      	strb	r3, [r7, #31]
 8004cc4:	e0c6      	b.n	8004e54 <UART_SetConfig+0x348>
 8004cc6:	2308      	movs	r3, #8
 8004cc8:	77fb      	strb	r3, [r7, #31]
 8004cca:	e0c3      	b.n	8004e54 <UART_SetConfig+0x348>
 8004ccc:	2310      	movs	r3, #16
 8004cce:	77fb      	strb	r3, [r7, #31]
 8004cd0:	e0c0      	b.n	8004e54 <UART_SetConfig+0x348>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a44      	ldr	r2, [pc, #272]	; (8004de8 <UART_SetConfig+0x2dc>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d125      	bne.n	8004d28 <UART_SetConfig+0x21c>
 8004cdc:	4b3e      	ldr	r3, [pc, #248]	; (8004dd8 <UART_SetConfig+0x2cc>)
 8004cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ce6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cea:	d017      	beq.n	8004d1c <UART_SetConfig+0x210>
 8004cec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cf0:	d817      	bhi.n	8004d22 <UART_SetConfig+0x216>
 8004cf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cf6:	d00b      	beq.n	8004d10 <UART_SetConfig+0x204>
 8004cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cfc:	d811      	bhi.n	8004d22 <UART_SetConfig+0x216>
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <UART_SetConfig+0x1fe>
 8004d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d06:	d006      	beq.n	8004d16 <UART_SetConfig+0x20a>
 8004d08:	e00b      	b.n	8004d22 <UART_SetConfig+0x216>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	77fb      	strb	r3, [r7, #31]
 8004d0e:	e0a1      	b.n	8004e54 <UART_SetConfig+0x348>
 8004d10:	2302      	movs	r3, #2
 8004d12:	77fb      	strb	r3, [r7, #31]
 8004d14:	e09e      	b.n	8004e54 <UART_SetConfig+0x348>
 8004d16:	2304      	movs	r3, #4
 8004d18:	77fb      	strb	r3, [r7, #31]
 8004d1a:	e09b      	b.n	8004e54 <UART_SetConfig+0x348>
 8004d1c:	2308      	movs	r3, #8
 8004d1e:	77fb      	strb	r3, [r7, #31]
 8004d20:	e098      	b.n	8004e54 <UART_SetConfig+0x348>
 8004d22:	2310      	movs	r3, #16
 8004d24:	77fb      	strb	r3, [r7, #31]
 8004d26:	e095      	b.n	8004e54 <UART_SetConfig+0x348>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a2f      	ldr	r2, [pc, #188]	; (8004dec <UART_SetConfig+0x2e0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d125      	bne.n	8004d7e <UART_SetConfig+0x272>
 8004d32:	4b29      	ldr	r3, [pc, #164]	; (8004dd8 <UART_SetConfig+0x2cc>)
 8004d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d40:	d017      	beq.n	8004d72 <UART_SetConfig+0x266>
 8004d42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d46:	d817      	bhi.n	8004d78 <UART_SetConfig+0x26c>
 8004d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d4c:	d00b      	beq.n	8004d66 <UART_SetConfig+0x25a>
 8004d4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d52:	d811      	bhi.n	8004d78 <UART_SetConfig+0x26c>
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <UART_SetConfig+0x254>
 8004d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d5c:	d006      	beq.n	8004d6c <UART_SetConfig+0x260>
 8004d5e:	e00b      	b.n	8004d78 <UART_SetConfig+0x26c>
 8004d60:	2301      	movs	r3, #1
 8004d62:	77fb      	strb	r3, [r7, #31]
 8004d64:	e076      	b.n	8004e54 <UART_SetConfig+0x348>
 8004d66:	2302      	movs	r3, #2
 8004d68:	77fb      	strb	r3, [r7, #31]
 8004d6a:	e073      	b.n	8004e54 <UART_SetConfig+0x348>
 8004d6c:	2304      	movs	r3, #4
 8004d6e:	77fb      	strb	r3, [r7, #31]
 8004d70:	e070      	b.n	8004e54 <UART_SetConfig+0x348>
 8004d72:	2308      	movs	r3, #8
 8004d74:	77fb      	strb	r3, [r7, #31]
 8004d76:	e06d      	b.n	8004e54 <UART_SetConfig+0x348>
 8004d78:	2310      	movs	r3, #16
 8004d7a:	77fb      	strb	r3, [r7, #31]
 8004d7c:	e06a      	b.n	8004e54 <UART_SetConfig+0x348>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a1b      	ldr	r2, [pc, #108]	; (8004df0 <UART_SetConfig+0x2e4>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d138      	bne.n	8004dfa <UART_SetConfig+0x2ee>
 8004d88:	4b13      	ldr	r3, [pc, #76]	; (8004dd8 <UART_SetConfig+0x2cc>)
 8004d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004d92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d96:	d017      	beq.n	8004dc8 <UART_SetConfig+0x2bc>
 8004d98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d9c:	d82a      	bhi.n	8004df4 <UART_SetConfig+0x2e8>
 8004d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004da2:	d00b      	beq.n	8004dbc <UART_SetConfig+0x2b0>
 8004da4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004da8:	d824      	bhi.n	8004df4 <UART_SetConfig+0x2e8>
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <UART_SetConfig+0x2aa>
 8004dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db2:	d006      	beq.n	8004dc2 <UART_SetConfig+0x2b6>
 8004db4:	e01e      	b.n	8004df4 <UART_SetConfig+0x2e8>
 8004db6:	2300      	movs	r3, #0
 8004db8:	77fb      	strb	r3, [r7, #31]
 8004dba:	e04b      	b.n	8004e54 <UART_SetConfig+0x348>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	77fb      	strb	r3, [r7, #31]
 8004dc0:	e048      	b.n	8004e54 <UART_SetConfig+0x348>
 8004dc2:	2304      	movs	r3, #4
 8004dc4:	77fb      	strb	r3, [r7, #31]
 8004dc6:	e045      	b.n	8004e54 <UART_SetConfig+0x348>
 8004dc8:	2308      	movs	r3, #8
 8004dca:	77fb      	strb	r3, [r7, #31]
 8004dcc:	e042      	b.n	8004e54 <UART_SetConfig+0x348>
 8004dce:	bf00      	nop
 8004dd0:	efff69f3 	.word	0xefff69f3
 8004dd4:	40011000 	.word	0x40011000
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	40004400 	.word	0x40004400
 8004de0:	40004800 	.word	0x40004800
 8004de4:	40004c00 	.word	0x40004c00
 8004de8:	40005000 	.word	0x40005000
 8004dec:	40011400 	.word	0x40011400
 8004df0:	40007800 	.word	0x40007800
 8004df4:	2310      	movs	r3, #16
 8004df6:	77fb      	strb	r3, [r7, #31]
 8004df8:	e02c      	b.n	8004e54 <UART_SetConfig+0x348>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a72      	ldr	r2, [pc, #456]	; (8004fc8 <UART_SetConfig+0x4bc>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d125      	bne.n	8004e50 <UART_SetConfig+0x344>
 8004e04:	4b71      	ldr	r3, [pc, #452]	; (8004fcc <UART_SetConfig+0x4c0>)
 8004e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e0a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004e0e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e12:	d017      	beq.n	8004e44 <UART_SetConfig+0x338>
 8004e14:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e18:	d817      	bhi.n	8004e4a <UART_SetConfig+0x33e>
 8004e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e1e:	d00b      	beq.n	8004e38 <UART_SetConfig+0x32c>
 8004e20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e24:	d811      	bhi.n	8004e4a <UART_SetConfig+0x33e>
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <UART_SetConfig+0x326>
 8004e2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e2e:	d006      	beq.n	8004e3e <UART_SetConfig+0x332>
 8004e30:	e00b      	b.n	8004e4a <UART_SetConfig+0x33e>
 8004e32:	2300      	movs	r3, #0
 8004e34:	77fb      	strb	r3, [r7, #31]
 8004e36:	e00d      	b.n	8004e54 <UART_SetConfig+0x348>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	77fb      	strb	r3, [r7, #31]
 8004e3c:	e00a      	b.n	8004e54 <UART_SetConfig+0x348>
 8004e3e:	2304      	movs	r3, #4
 8004e40:	77fb      	strb	r3, [r7, #31]
 8004e42:	e007      	b.n	8004e54 <UART_SetConfig+0x348>
 8004e44:	2308      	movs	r3, #8
 8004e46:	77fb      	strb	r3, [r7, #31]
 8004e48:	e004      	b.n	8004e54 <UART_SetConfig+0x348>
 8004e4a:	2310      	movs	r3, #16
 8004e4c:	77fb      	strb	r3, [r7, #31]
 8004e4e:	e001      	b.n	8004e54 <UART_SetConfig+0x348>
 8004e50:	2310      	movs	r3, #16
 8004e52:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e5c:	d15b      	bne.n	8004f16 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004e5e:	7ffb      	ldrb	r3, [r7, #31]
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d828      	bhi.n	8004eb6 <UART_SetConfig+0x3aa>
 8004e64:	a201      	add	r2, pc, #4	; (adr r2, 8004e6c <UART_SetConfig+0x360>)
 8004e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6a:	bf00      	nop
 8004e6c:	08004e91 	.word	0x08004e91
 8004e70:	08004e99 	.word	0x08004e99
 8004e74:	08004ea1 	.word	0x08004ea1
 8004e78:	08004eb7 	.word	0x08004eb7
 8004e7c:	08004ea7 	.word	0x08004ea7
 8004e80:	08004eb7 	.word	0x08004eb7
 8004e84:	08004eb7 	.word	0x08004eb7
 8004e88:	08004eb7 	.word	0x08004eb7
 8004e8c:	08004eaf 	.word	0x08004eaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e90:	f7fe fe38 	bl	8003b04 <HAL_RCC_GetPCLK1Freq>
 8004e94:	61b8      	str	r0, [r7, #24]
        break;
 8004e96:	e013      	b.n	8004ec0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e98:	f7fe fe48 	bl	8003b2c <HAL_RCC_GetPCLK2Freq>
 8004e9c:	61b8      	str	r0, [r7, #24]
        break;
 8004e9e:	e00f      	b.n	8004ec0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ea0:	4b4b      	ldr	r3, [pc, #300]	; (8004fd0 <UART_SetConfig+0x4c4>)
 8004ea2:	61bb      	str	r3, [r7, #24]
        break;
 8004ea4:	e00c      	b.n	8004ec0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ea6:	f7fe fd5b 	bl	8003960 <HAL_RCC_GetSysClockFreq>
 8004eaa:	61b8      	str	r0, [r7, #24]
        break;
 8004eac:	e008      	b.n	8004ec0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eb2:	61bb      	str	r3, [r7, #24]
        break;
 8004eb4:	e004      	b.n	8004ec0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	77bb      	strb	r3, [r7, #30]
        break;
 8004ebe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d074      	beq.n	8004fb0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	005a      	lsls	r2, r3, #1
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	085b      	lsrs	r3, r3, #1
 8004ed0:	441a      	add	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eda:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	2b0f      	cmp	r3, #15
 8004ee0:	d916      	bls.n	8004f10 <UART_SetConfig+0x404>
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee8:	d212      	bcs.n	8004f10 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	f023 030f 	bic.w	r3, r3, #15
 8004ef2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	085b      	lsrs	r3, r3, #1
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	89fb      	ldrh	r3, [r7, #14]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	89fa      	ldrh	r2, [r7, #14]
 8004f0c:	60da      	str	r2, [r3, #12]
 8004f0e:	e04f      	b.n	8004fb0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	77bb      	strb	r3, [r7, #30]
 8004f14:	e04c      	b.n	8004fb0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f16:	7ffb      	ldrb	r3, [r7, #31]
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d828      	bhi.n	8004f6e <UART_SetConfig+0x462>
 8004f1c:	a201      	add	r2, pc, #4	; (adr r2, 8004f24 <UART_SetConfig+0x418>)
 8004f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f22:	bf00      	nop
 8004f24:	08004f49 	.word	0x08004f49
 8004f28:	08004f51 	.word	0x08004f51
 8004f2c:	08004f59 	.word	0x08004f59
 8004f30:	08004f6f 	.word	0x08004f6f
 8004f34:	08004f5f 	.word	0x08004f5f
 8004f38:	08004f6f 	.word	0x08004f6f
 8004f3c:	08004f6f 	.word	0x08004f6f
 8004f40:	08004f6f 	.word	0x08004f6f
 8004f44:	08004f67 	.word	0x08004f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f48:	f7fe fddc 	bl	8003b04 <HAL_RCC_GetPCLK1Freq>
 8004f4c:	61b8      	str	r0, [r7, #24]
        break;
 8004f4e:	e013      	b.n	8004f78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f50:	f7fe fdec 	bl	8003b2c <HAL_RCC_GetPCLK2Freq>
 8004f54:	61b8      	str	r0, [r7, #24]
        break;
 8004f56:	e00f      	b.n	8004f78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f58:	4b1d      	ldr	r3, [pc, #116]	; (8004fd0 <UART_SetConfig+0x4c4>)
 8004f5a:	61bb      	str	r3, [r7, #24]
        break;
 8004f5c:	e00c      	b.n	8004f78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f5e:	f7fe fcff 	bl	8003960 <HAL_RCC_GetSysClockFreq>
 8004f62:	61b8      	str	r0, [r7, #24]
        break;
 8004f64:	e008      	b.n	8004f78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f6a:	61bb      	str	r3, [r7, #24]
        break;
 8004f6c:	e004      	b.n	8004f78 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	77bb      	strb	r3, [r7, #30]
        break;
 8004f76:	bf00      	nop
    }

    if (pclk != 0U)
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d018      	beq.n	8004fb0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	085a      	lsrs	r2, r3, #1
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	441a      	add	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	2b0f      	cmp	r3, #15
 8004f96:	d909      	bls.n	8004fac <UART_SetConfig+0x4a0>
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f9e:	d205      	bcs.n	8004fac <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	60da      	str	r2, [r3, #12]
 8004faa:	e001      	b.n	8004fb0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004fbc:	7fbb      	ldrb	r3, [r7, #30]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3720      	adds	r7, #32
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	40007c00 	.word	0x40007c00
 8004fcc:	40023800 	.word	0x40023800
 8004fd0:	00f42400 	.word	0x00f42400

08004fd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00a      	beq.n	8004ffe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00a      	beq.n	8005020 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	430a      	orrs	r2, r1
 800501e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00a      	beq.n	8005042 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005046:	f003 0308 	and.w	r3, r3, #8
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	f003 0310 	and.w	r3, r3, #16
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00a      	beq.n	8005086 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	f003 0320 	and.w	r3, r3, #32
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00a      	beq.n	80050a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d01a      	beq.n	80050ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050d2:	d10a      	bne.n	80050ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	430a      	orrs	r2, r1
 800510a:	605a      	str	r2, [r3, #4]
  }
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af02      	add	r7, sp, #8
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005128:	f7fc fdbc 	bl	8001ca4 <HAL_GetTick>
 800512c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0308 	and.w	r3, r3, #8
 8005138:	2b08      	cmp	r3, #8
 800513a:	d10e      	bne.n	800515a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800513c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f81b 	bl	8005186 <UART_WaitOnFlagUntilTimeout>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e011      	b.n	800517e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2220      	movs	r2, #32
 800515e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2220      	movs	r2, #32
 8005164:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b09c      	sub	sp, #112	; 0x70
 800518a:	af00      	add	r7, sp, #0
 800518c:	60f8      	str	r0, [r7, #12]
 800518e:	60b9      	str	r1, [r7, #8]
 8005190:	603b      	str	r3, [r7, #0]
 8005192:	4613      	mov	r3, r2
 8005194:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005196:	e0a7      	b.n	80052e8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005198:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800519a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800519e:	f000 80a3 	beq.w	80052e8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051a2:	f7fc fd7f 	bl	8001ca4 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d302      	bcc.n	80051b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80051b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d13f      	bne.n	8005238 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051c0:	e853 3f00 	ldrex	r3, [r3]
 80051c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80051c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051cc:	667b      	str	r3, [r7, #100]	; 0x64
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	461a      	mov	r2, r3
 80051d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051d8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80051de:	e841 2300 	strex	r3, r2, [r1]
 80051e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80051e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1e6      	bne.n	80051b8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	3308      	adds	r3, #8
 80051f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f4:	e853 3f00 	ldrex	r3, [r3]
 80051f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fc:	f023 0301 	bic.w	r3, r3, #1
 8005200:	663b      	str	r3, [r7, #96]	; 0x60
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	3308      	adds	r3, #8
 8005208:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800520a:	64ba      	str	r2, [r7, #72]	; 0x48
 800520c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005210:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005212:	e841 2300 	strex	r3, r2, [r1]
 8005216:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1e5      	bne.n	80051ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2220      	movs	r2, #32
 8005222:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2220      	movs	r2, #32
 8005228:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e068      	b.n	800530a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0304 	and.w	r3, r3, #4
 8005242:	2b00      	cmp	r3, #0
 8005244:	d050      	beq.n	80052e8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005250:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005254:	d148      	bne.n	80052e8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800525e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005268:	e853 3f00 	ldrex	r3, [r3]
 800526c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005274:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	461a      	mov	r2, r3
 800527c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800527e:	637b      	str	r3, [r7, #52]	; 0x34
 8005280:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005282:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005284:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005286:	e841 2300 	strex	r3, r2, [r1]
 800528a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800528c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1e6      	bne.n	8005260 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	3308      	adds	r3, #8
 8005298:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	e853 3f00 	ldrex	r3, [r3]
 80052a0:	613b      	str	r3, [r7, #16]
   return(result);
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	f023 0301 	bic.w	r3, r3, #1
 80052a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3308      	adds	r3, #8
 80052b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052b2:	623a      	str	r2, [r7, #32]
 80052b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b6:	69f9      	ldr	r1, [r7, #28]
 80052b8:	6a3a      	ldr	r2, [r7, #32]
 80052ba:	e841 2300 	strex	r3, r2, [r1]
 80052be:	61bb      	str	r3, [r7, #24]
   return(result);
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1e5      	bne.n	8005292 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2220      	movs	r2, #32
 80052ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e010      	b.n	800530a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	69da      	ldr	r2, [r3, #28]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	4013      	ands	r3, r2
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	bf0c      	ite	eq
 80052f8:	2301      	moveq	r3, #1
 80052fa:	2300      	movne	r3, #0
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	461a      	mov	r2, r3
 8005300:	79fb      	ldrb	r3, [r7, #7]
 8005302:	429a      	cmp	r2, r3
 8005304:	f43f af48 	beq.w	8005198 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3770      	adds	r7, #112	; 0x70
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005312:	b480      	push	{r7}
 8005314:	b095      	sub	sp, #84	; 0x54
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005322:	e853 3f00 	ldrex	r3, [r3]
 8005326:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800532e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	461a      	mov	r2, r3
 8005336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005338:	643b      	str	r3, [r7, #64]	; 0x40
 800533a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800533e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005340:	e841 2300 	strex	r3, r2, [r1]
 8005344:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1e6      	bne.n	800531a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3308      	adds	r3, #8
 8005352:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	e853 3f00 	ldrex	r3, [r3]
 800535a:	61fb      	str	r3, [r7, #28]
   return(result);
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	f023 0301 	bic.w	r3, r3, #1
 8005362:	64bb      	str	r3, [r7, #72]	; 0x48
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	3308      	adds	r3, #8
 800536a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800536c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800536e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005370:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005374:	e841 2300 	strex	r3, r2, [r1]
 8005378:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1e5      	bne.n	800534c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005384:	2b01      	cmp	r3, #1
 8005386:	d118      	bne.n	80053ba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	e853 3f00 	ldrex	r3, [r3]
 8005394:	60bb      	str	r3, [r7, #8]
   return(result);
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	f023 0310 	bic.w	r3, r3, #16
 800539c:	647b      	str	r3, [r7, #68]	; 0x44
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	461a      	mov	r2, r3
 80053a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053a6:	61bb      	str	r3, [r7, #24]
 80053a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053aa:	6979      	ldr	r1, [r7, #20]
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	e841 2300 	strex	r3, r2, [r1]
 80053b2:	613b      	str	r3, [r7, #16]
   return(result);
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1e6      	bne.n	8005388 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2220      	movs	r2, #32
 80053be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80053ce:	bf00      	nop
 80053d0:	3754      	adds	r7, #84	; 0x54
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b084      	sub	sp, #16
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f7ff fb71 	bl	8004ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053fe:	bf00      	nop
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b088      	sub	sp, #32
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	e853 3f00 	ldrex	r3, [r3]
 800541a:	60bb      	str	r3, [r7, #8]
   return(result);
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005422:	61fb      	str	r3, [r7, #28]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	461a      	mov	r2, r3
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	61bb      	str	r3, [r7, #24]
 800542e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005430:	6979      	ldr	r1, [r7, #20]
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	e841 2300 	strex	r3, r2, [r1]
 8005438:	613b      	str	r3, [r7, #16]
   return(result);
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1e6      	bne.n	800540e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2220      	movs	r2, #32
 8005444:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7ff fb3d 	bl	8004acc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005452:	bf00      	nop
 8005454:	3720      	adds	r7, #32
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
	...

0800545c <__errno>:
 800545c:	4b01      	ldr	r3, [pc, #4]	; (8005464 <__errno+0x8>)
 800545e:	6818      	ldr	r0, [r3, #0]
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	20000014 	.word	0x20000014

08005468 <__libc_init_array>:
 8005468:	b570      	push	{r4, r5, r6, lr}
 800546a:	4d0d      	ldr	r5, [pc, #52]	; (80054a0 <__libc_init_array+0x38>)
 800546c:	4c0d      	ldr	r4, [pc, #52]	; (80054a4 <__libc_init_array+0x3c>)
 800546e:	1b64      	subs	r4, r4, r5
 8005470:	10a4      	asrs	r4, r4, #2
 8005472:	2600      	movs	r6, #0
 8005474:	42a6      	cmp	r6, r4
 8005476:	d109      	bne.n	800548c <__libc_init_array+0x24>
 8005478:	4d0b      	ldr	r5, [pc, #44]	; (80054a8 <__libc_init_array+0x40>)
 800547a:	4c0c      	ldr	r4, [pc, #48]	; (80054ac <__libc_init_array+0x44>)
 800547c:	f000 fc8e 	bl	8005d9c <_init>
 8005480:	1b64      	subs	r4, r4, r5
 8005482:	10a4      	asrs	r4, r4, #2
 8005484:	2600      	movs	r6, #0
 8005486:	42a6      	cmp	r6, r4
 8005488:	d105      	bne.n	8005496 <__libc_init_array+0x2e>
 800548a:	bd70      	pop	{r4, r5, r6, pc}
 800548c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005490:	4798      	blx	r3
 8005492:	3601      	adds	r6, #1
 8005494:	e7ee      	b.n	8005474 <__libc_init_array+0xc>
 8005496:	f855 3b04 	ldr.w	r3, [r5], #4
 800549a:	4798      	blx	r3
 800549c:	3601      	adds	r6, #1
 800549e:	e7f2      	b.n	8005486 <__libc_init_array+0x1e>
 80054a0:	08006b88 	.word	0x08006b88
 80054a4:	08006b88 	.word	0x08006b88
 80054a8:	08006b88 	.word	0x08006b88
 80054ac:	08006b8c 	.word	0x08006b8c

080054b0 <memset>:
 80054b0:	4402      	add	r2, r0
 80054b2:	4603      	mov	r3, r0
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d100      	bne.n	80054ba <memset+0xa>
 80054b8:	4770      	bx	lr
 80054ba:	f803 1b01 	strb.w	r1, [r3], #1
 80054be:	e7f9      	b.n	80054b4 <memset+0x4>

080054c0 <siprintf>:
 80054c0:	b40e      	push	{r1, r2, r3}
 80054c2:	b500      	push	{lr}
 80054c4:	b09c      	sub	sp, #112	; 0x70
 80054c6:	ab1d      	add	r3, sp, #116	; 0x74
 80054c8:	9002      	str	r0, [sp, #8]
 80054ca:	9006      	str	r0, [sp, #24]
 80054cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054d0:	4809      	ldr	r0, [pc, #36]	; (80054f8 <siprintf+0x38>)
 80054d2:	9107      	str	r1, [sp, #28]
 80054d4:	9104      	str	r1, [sp, #16]
 80054d6:	4909      	ldr	r1, [pc, #36]	; (80054fc <siprintf+0x3c>)
 80054d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80054dc:	9105      	str	r1, [sp, #20]
 80054de:	6800      	ldr	r0, [r0, #0]
 80054e0:	9301      	str	r3, [sp, #4]
 80054e2:	a902      	add	r1, sp, #8
 80054e4:	f000 f868 	bl	80055b8 <_svfiprintf_r>
 80054e8:	9b02      	ldr	r3, [sp, #8]
 80054ea:	2200      	movs	r2, #0
 80054ec:	701a      	strb	r2, [r3, #0]
 80054ee:	b01c      	add	sp, #112	; 0x70
 80054f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80054f4:	b003      	add	sp, #12
 80054f6:	4770      	bx	lr
 80054f8:	20000014 	.word	0x20000014
 80054fc:	ffff0208 	.word	0xffff0208

08005500 <__ssputs_r>:
 8005500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005504:	688e      	ldr	r6, [r1, #8]
 8005506:	429e      	cmp	r6, r3
 8005508:	4682      	mov	sl, r0
 800550a:	460c      	mov	r4, r1
 800550c:	4690      	mov	r8, r2
 800550e:	461f      	mov	r7, r3
 8005510:	d838      	bhi.n	8005584 <__ssputs_r+0x84>
 8005512:	898a      	ldrh	r2, [r1, #12]
 8005514:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005518:	d032      	beq.n	8005580 <__ssputs_r+0x80>
 800551a:	6825      	ldr	r5, [r4, #0]
 800551c:	6909      	ldr	r1, [r1, #16]
 800551e:	eba5 0901 	sub.w	r9, r5, r1
 8005522:	6965      	ldr	r5, [r4, #20]
 8005524:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005528:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800552c:	3301      	adds	r3, #1
 800552e:	444b      	add	r3, r9
 8005530:	106d      	asrs	r5, r5, #1
 8005532:	429d      	cmp	r5, r3
 8005534:	bf38      	it	cc
 8005536:	461d      	movcc	r5, r3
 8005538:	0553      	lsls	r3, r2, #21
 800553a:	d531      	bpl.n	80055a0 <__ssputs_r+0xa0>
 800553c:	4629      	mov	r1, r5
 800553e:	f000 fb63 	bl	8005c08 <_malloc_r>
 8005542:	4606      	mov	r6, r0
 8005544:	b950      	cbnz	r0, 800555c <__ssputs_r+0x5c>
 8005546:	230c      	movs	r3, #12
 8005548:	f8ca 3000 	str.w	r3, [sl]
 800554c:	89a3      	ldrh	r3, [r4, #12]
 800554e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005552:	81a3      	strh	r3, [r4, #12]
 8005554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800555c:	6921      	ldr	r1, [r4, #16]
 800555e:	464a      	mov	r2, r9
 8005560:	f000 fabe 	bl	8005ae0 <memcpy>
 8005564:	89a3      	ldrh	r3, [r4, #12]
 8005566:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800556a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800556e:	81a3      	strh	r3, [r4, #12]
 8005570:	6126      	str	r6, [r4, #16]
 8005572:	6165      	str	r5, [r4, #20]
 8005574:	444e      	add	r6, r9
 8005576:	eba5 0509 	sub.w	r5, r5, r9
 800557a:	6026      	str	r6, [r4, #0]
 800557c:	60a5      	str	r5, [r4, #8]
 800557e:	463e      	mov	r6, r7
 8005580:	42be      	cmp	r6, r7
 8005582:	d900      	bls.n	8005586 <__ssputs_r+0x86>
 8005584:	463e      	mov	r6, r7
 8005586:	6820      	ldr	r0, [r4, #0]
 8005588:	4632      	mov	r2, r6
 800558a:	4641      	mov	r1, r8
 800558c:	f000 fab6 	bl	8005afc <memmove>
 8005590:	68a3      	ldr	r3, [r4, #8]
 8005592:	1b9b      	subs	r3, r3, r6
 8005594:	60a3      	str	r3, [r4, #8]
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	4433      	add	r3, r6
 800559a:	6023      	str	r3, [r4, #0]
 800559c:	2000      	movs	r0, #0
 800559e:	e7db      	b.n	8005558 <__ssputs_r+0x58>
 80055a0:	462a      	mov	r2, r5
 80055a2:	f000 fba5 	bl	8005cf0 <_realloc_r>
 80055a6:	4606      	mov	r6, r0
 80055a8:	2800      	cmp	r0, #0
 80055aa:	d1e1      	bne.n	8005570 <__ssputs_r+0x70>
 80055ac:	6921      	ldr	r1, [r4, #16]
 80055ae:	4650      	mov	r0, sl
 80055b0:	f000 fabe 	bl	8005b30 <_free_r>
 80055b4:	e7c7      	b.n	8005546 <__ssputs_r+0x46>
	...

080055b8 <_svfiprintf_r>:
 80055b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055bc:	4698      	mov	r8, r3
 80055be:	898b      	ldrh	r3, [r1, #12]
 80055c0:	061b      	lsls	r3, r3, #24
 80055c2:	b09d      	sub	sp, #116	; 0x74
 80055c4:	4607      	mov	r7, r0
 80055c6:	460d      	mov	r5, r1
 80055c8:	4614      	mov	r4, r2
 80055ca:	d50e      	bpl.n	80055ea <_svfiprintf_r+0x32>
 80055cc:	690b      	ldr	r3, [r1, #16]
 80055ce:	b963      	cbnz	r3, 80055ea <_svfiprintf_r+0x32>
 80055d0:	2140      	movs	r1, #64	; 0x40
 80055d2:	f000 fb19 	bl	8005c08 <_malloc_r>
 80055d6:	6028      	str	r0, [r5, #0]
 80055d8:	6128      	str	r0, [r5, #16]
 80055da:	b920      	cbnz	r0, 80055e6 <_svfiprintf_r+0x2e>
 80055dc:	230c      	movs	r3, #12
 80055de:	603b      	str	r3, [r7, #0]
 80055e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055e4:	e0d1      	b.n	800578a <_svfiprintf_r+0x1d2>
 80055e6:	2340      	movs	r3, #64	; 0x40
 80055e8:	616b      	str	r3, [r5, #20]
 80055ea:	2300      	movs	r3, #0
 80055ec:	9309      	str	r3, [sp, #36]	; 0x24
 80055ee:	2320      	movs	r3, #32
 80055f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80055f8:	2330      	movs	r3, #48	; 0x30
 80055fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80057a4 <_svfiprintf_r+0x1ec>
 80055fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005602:	f04f 0901 	mov.w	r9, #1
 8005606:	4623      	mov	r3, r4
 8005608:	469a      	mov	sl, r3
 800560a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800560e:	b10a      	cbz	r2, 8005614 <_svfiprintf_r+0x5c>
 8005610:	2a25      	cmp	r2, #37	; 0x25
 8005612:	d1f9      	bne.n	8005608 <_svfiprintf_r+0x50>
 8005614:	ebba 0b04 	subs.w	fp, sl, r4
 8005618:	d00b      	beq.n	8005632 <_svfiprintf_r+0x7a>
 800561a:	465b      	mov	r3, fp
 800561c:	4622      	mov	r2, r4
 800561e:	4629      	mov	r1, r5
 8005620:	4638      	mov	r0, r7
 8005622:	f7ff ff6d 	bl	8005500 <__ssputs_r>
 8005626:	3001      	adds	r0, #1
 8005628:	f000 80aa 	beq.w	8005780 <_svfiprintf_r+0x1c8>
 800562c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800562e:	445a      	add	r2, fp
 8005630:	9209      	str	r2, [sp, #36]	; 0x24
 8005632:	f89a 3000 	ldrb.w	r3, [sl]
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 80a2 	beq.w	8005780 <_svfiprintf_r+0x1c8>
 800563c:	2300      	movs	r3, #0
 800563e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005642:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005646:	f10a 0a01 	add.w	sl, sl, #1
 800564a:	9304      	str	r3, [sp, #16]
 800564c:	9307      	str	r3, [sp, #28]
 800564e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005652:	931a      	str	r3, [sp, #104]	; 0x68
 8005654:	4654      	mov	r4, sl
 8005656:	2205      	movs	r2, #5
 8005658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800565c:	4851      	ldr	r0, [pc, #324]	; (80057a4 <_svfiprintf_r+0x1ec>)
 800565e:	f7fa fdd7 	bl	8000210 <memchr>
 8005662:	9a04      	ldr	r2, [sp, #16]
 8005664:	b9d8      	cbnz	r0, 800569e <_svfiprintf_r+0xe6>
 8005666:	06d0      	lsls	r0, r2, #27
 8005668:	bf44      	itt	mi
 800566a:	2320      	movmi	r3, #32
 800566c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005670:	0711      	lsls	r1, r2, #28
 8005672:	bf44      	itt	mi
 8005674:	232b      	movmi	r3, #43	; 0x2b
 8005676:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800567a:	f89a 3000 	ldrb.w	r3, [sl]
 800567e:	2b2a      	cmp	r3, #42	; 0x2a
 8005680:	d015      	beq.n	80056ae <_svfiprintf_r+0xf6>
 8005682:	9a07      	ldr	r2, [sp, #28]
 8005684:	4654      	mov	r4, sl
 8005686:	2000      	movs	r0, #0
 8005688:	f04f 0c0a 	mov.w	ip, #10
 800568c:	4621      	mov	r1, r4
 800568e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005692:	3b30      	subs	r3, #48	; 0x30
 8005694:	2b09      	cmp	r3, #9
 8005696:	d94e      	bls.n	8005736 <_svfiprintf_r+0x17e>
 8005698:	b1b0      	cbz	r0, 80056c8 <_svfiprintf_r+0x110>
 800569a:	9207      	str	r2, [sp, #28]
 800569c:	e014      	b.n	80056c8 <_svfiprintf_r+0x110>
 800569e:	eba0 0308 	sub.w	r3, r0, r8
 80056a2:	fa09 f303 	lsl.w	r3, r9, r3
 80056a6:	4313      	orrs	r3, r2
 80056a8:	9304      	str	r3, [sp, #16]
 80056aa:	46a2      	mov	sl, r4
 80056ac:	e7d2      	b.n	8005654 <_svfiprintf_r+0x9c>
 80056ae:	9b03      	ldr	r3, [sp, #12]
 80056b0:	1d19      	adds	r1, r3, #4
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	9103      	str	r1, [sp, #12]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	bfbb      	ittet	lt
 80056ba:	425b      	neglt	r3, r3
 80056bc:	f042 0202 	orrlt.w	r2, r2, #2
 80056c0:	9307      	strge	r3, [sp, #28]
 80056c2:	9307      	strlt	r3, [sp, #28]
 80056c4:	bfb8      	it	lt
 80056c6:	9204      	strlt	r2, [sp, #16]
 80056c8:	7823      	ldrb	r3, [r4, #0]
 80056ca:	2b2e      	cmp	r3, #46	; 0x2e
 80056cc:	d10c      	bne.n	80056e8 <_svfiprintf_r+0x130>
 80056ce:	7863      	ldrb	r3, [r4, #1]
 80056d0:	2b2a      	cmp	r3, #42	; 0x2a
 80056d2:	d135      	bne.n	8005740 <_svfiprintf_r+0x188>
 80056d4:	9b03      	ldr	r3, [sp, #12]
 80056d6:	1d1a      	adds	r2, r3, #4
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	9203      	str	r2, [sp, #12]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	bfb8      	it	lt
 80056e0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80056e4:	3402      	adds	r4, #2
 80056e6:	9305      	str	r3, [sp, #20]
 80056e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80057b4 <_svfiprintf_r+0x1fc>
 80056ec:	7821      	ldrb	r1, [r4, #0]
 80056ee:	2203      	movs	r2, #3
 80056f0:	4650      	mov	r0, sl
 80056f2:	f7fa fd8d 	bl	8000210 <memchr>
 80056f6:	b140      	cbz	r0, 800570a <_svfiprintf_r+0x152>
 80056f8:	2340      	movs	r3, #64	; 0x40
 80056fa:	eba0 000a 	sub.w	r0, r0, sl
 80056fe:	fa03 f000 	lsl.w	r0, r3, r0
 8005702:	9b04      	ldr	r3, [sp, #16]
 8005704:	4303      	orrs	r3, r0
 8005706:	3401      	adds	r4, #1
 8005708:	9304      	str	r3, [sp, #16]
 800570a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800570e:	4826      	ldr	r0, [pc, #152]	; (80057a8 <_svfiprintf_r+0x1f0>)
 8005710:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005714:	2206      	movs	r2, #6
 8005716:	f7fa fd7b 	bl	8000210 <memchr>
 800571a:	2800      	cmp	r0, #0
 800571c:	d038      	beq.n	8005790 <_svfiprintf_r+0x1d8>
 800571e:	4b23      	ldr	r3, [pc, #140]	; (80057ac <_svfiprintf_r+0x1f4>)
 8005720:	bb1b      	cbnz	r3, 800576a <_svfiprintf_r+0x1b2>
 8005722:	9b03      	ldr	r3, [sp, #12]
 8005724:	3307      	adds	r3, #7
 8005726:	f023 0307 	bic.w	r3, r3, #7
 800572a:	3308      	adds	r3, #8
 800572c:	9303      	str	r3, [sp, #12]
 800572e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005730:	4433      	add	r3, r6
 8005732:	9309      	str	r3, [sp, #36]	; 0x24
 8005734:	e767      	b.n	8005606 <_svfiprintf_r+0x4e>
 8005736:	fb0c 3202 	mla	r2, ip, r2, r3
 800573a:	460c      	mov	r4, r1
 800573c:	2001      	movs	r0, #1
 800573e:	e7a5      	b.n	800568c <_svfiprintf_r+0xd4>
 8005740:	2300      	movs	r3, #0
 8005742:	3401      	adds	r4, #1
 8005744:	9305      	str	r3, [sp, #20]
 8005746:	4619      	mov	r1, r3
 8005748:	f04f 0c0a 	mov.w	ip, #10
 800574c:	4620      	mov	r0, r4
 800574e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005752:	3a30      	subs	r2, #48	; 0x30
 8005754:	2a09      	cmp	r2, #9
 8005756:	d903      	bls.n	8005760 <_svfiprintf_r+0x1a8>
 8005758:	2b00      	cmp	r3, #0
 800575a:	d0c5      	beq.n	80056e8 <_svfiprintf_r+0x130>
 800575c:	9105      	str	r1, [sp, #20]
 800575e:	e7c3      	b.n	80056e8 <_svfiprintf_r+0x130>
 8005760:	fb0c 2101 	mla	r1, ip, r1, r2
 8005764:	4604      	mov	r4, r0
 8005766:	2301      	movs	r3, #1
 8005768:	e7f0      	b.n	800574c <_svfiprintf_r+0x194>
 800576a:	ab03      	add	r3, sp, #12
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	462a      	mov	r2, r5
 8005770:	4b0f      	ldr	r3, [pc, #60]	; (80057b0 <_svfiprintf_r+0x1f8>)
 8005772:	a904      	add	r1, sp, #16
 8005774:	4638      	mov	r0, r7
 8005776:	f3af 8000 	nop.w
 800577a:	1c42      	adds	r2, r0, #1
 800577c:	4606      	mov	r6, r0
 800577e:	d1d6      	bne.n	800572e <_svfiprintf_r+0x176>
 8005780:	89ab      	ldrh	r3, [r5, #12]
 8005782:	065b      	lsls	r3, r3, #25
 8005784:	f53f af2c 	bmi.w	80055e0 <_svfiprintf_r+0x28>
 8005788:	9809      	ldr	r0, [sp, #36]	; 0x24
 800578a:	b01d      	add	sp, #116	; 0x74
 800578c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005790:	ab03      	add	r3, sp, #12
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	462a      	mov	r2, r5
 8005796:	4b06      	ldr	r3, [pc, #24]	; (80057b0 <_svfiprintf_r+0x1f8>)
 8005798:	a904      	add	r1, sp, #16
 800579a:	4638      	mov	r0, r7
 800579c:	f000 f87a 	bl	8005894 <_printf_i>
 80057a0:	e7eb      	b.n	800577a <_svfiprintf_r+0x1c2>
 80057a2:	bf00      	nop
 80057a4:	08006b4c 	.word	0x08006b4c
 80057a8:	08006b56 	.word	0x08006b56
 80057ac:	00000000 	.word	0x00000000
 80057b0:	08005501 	.word	0x08005501
 80057b4:	08006b52 	.word	0x08006b52

080057b8 <_printf_common>:
 80057b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057bc:	4616      	mov	r6, r2
 80057be:	4699      	mov	r9, r3
 80057c0:	688a      	ldr	r2, [r1, #8]
 80057c2:	690b      	ldr	r3, [r1, #16]
 80057c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057c8:	4293      	cmp	r3, r2
 80057ca:	bfb8      	it	lt
 80057cc:	4613      	movlt	r3, r2
 80057ce:	6033      	str	r3, [r6, #0]
 80057d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057d4:	4607      	mov	r7, r0
 80057d6:	460c      	mov	r4, r1
 80057d8:	b10a      	cbz	r2, 80057de <_printf_common+0x26>
 80057da:	3301      	adds	r3, #1
 80057dc:	6033      	str	r3, [r6, #0]
 80057de:	6823      	ldr	r3, [r4, #0]
 80057e0:	0699      	lsls	r1, r3, #26
 80057e2:	bf42      	ittt	mi
 80057e4:	6833      	ldrmi	r3, [r6, #0]
 80057e6:	3302      	addmi	r3, #2
 80057e8:	6033      	strmi	r3, [r6, #0]
 80057ea:	6825      	ldr	r5, [r4, #0]
 80057ec:	f015 0506 	ands.w	r5, r5, #6
 80057f0:	d106      	bne.n	8005800 <_printf_common+0x48>
 80057f2:	f104 0a19 	add.w	sl, r4, #25
 80057f6:	68e3      	ldr	r3, [r4, #12]
 80057f8:	6832      	ldr	r2, [r6, #0]
 80057fa:	1a9b      	subs	r3, r3, r2
 80057fc:	42ab      	cmp	r3, r5
 80057fe:	dc26      	bgt.n	800584e <_printf_common+0x96>
 8005800:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005804:	1e13      	subs	r3, r2, #0
 8005806:	6822      	ldr	r2, [r4, #0]
 8005808:	bf18      	it	ne
 800580a:	2301      	movne	r3, #1
 800580c:	0692      	lsls	r2, r2, #26
 800580e:	d42b      	bmi.n	8005868 <_printf_common+0xb0>
 8005810:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005814:	4649      	mov	r1, r9
 8005816:	4638      	mov	r0, r7
 8005818:	47c0      	blx	r8
 800581a:	3001      	adds	r0, #1
 800581c:	d01e      	beq.n	800585c <_printf_common+0xa4>
 800581e:	6823      	ldr	r3, [r4, #0]
 8005820:	68e5      	ldr	r5, [r4, #12]
 8005822:	6832      	ldr	r2, [r6, #0]
 8005824:	f003 0306 	and.w	r3, r3, #6
 8005828:	2b04      	cmp	r3, #4
 800582a:	bf08      	it	eq
 800582c:	1aad      	subeq	r5, r5, r2
 800582e:	68a3      	ldr	r3, [r4, #8]
 8005830:	6922      	ldr	r2, [r4, #16]
 8005832:	bf0c      	ite	eq
 8005834:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005838:	2500      	movne	r5, #0
 800583a:	4293      	cmp	r3, r2
 800583c:	bfc4      	itt	gt
 800583e:	1a9b      	subgt	r3, r3, r2
 8005840:	18ed      	addgt	r5, r5, r3
 8005842:	2600      	movs	r6, #0
 8005844:	341a      	adds	r4, #26
 8005846:	42b5      	cmp	r5, r6
 8005848:	d11a      	bne.n	8005880 <_printf_common+0xc8>
 800584a:	2000      	movs	r0, #0
 800584c:	e008      	b.n	8005860 <_printf_common+0xa8>
 800584e:	2301      	movs	r3, #1
 8005850:	4652      	mov	r2, sl
 8005852:	4649      	mov	r1, r9
 8005854:	4638      	mov	r0, r7
 8005856:	47c0      	blx	r8
 8005858:	3001      	adds	r0, #1
 800585a:	d103      	bne.n	8005864 <_printf_common+0xac>
 800585c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005864:	3501      	adds	r5, #1
 8005866:	e7c6      	b.n	80057f6 <_printf_common+0x3e>
 8005868:	18e1      	adds	r1, r4, r3
 800586a:	1c5a      	adds	r2, r3, #1
 800586c:	2030      	movs	r0, #48	; 0x30
 800586e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005872:	4422      	add	r2, r4
 8005874:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005878:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800587c:	3302      	adds	r3, #2
 800587e:	e7c7      	b.n	8005810 <_printf_common+0x58>
 8005880:	2301      	movs	r3, #1
 8005882:	4622      	mov	r2, r4
 8005884:	4649      	mov	r1, r9
 8005886:	4638      	mov	r0, r7
 8005888:	47c0      	blx	r8
 800588a:	3001      	adds	r0, #1
 800588c:	d0e6      	beq.n	800585c <_printf_common+0xa4>
 800588e:	3601      	adds	r6, #1
 8005890:	e7d9      	b.n	8005846 <_printf_common+0x8e>
	...

08005894 <_printf_i>:
 8005894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005898:	7e0f      	ldrb	r7, [r1, #24]
 800589a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800589c:	2f78      	cmp	r7, #120	; 0x78
 800589e:	4691      	mov	r9, r2
 80058a0:	4680      	mov	r8, r0
 80058a2:	460c      	mov	r4, r1
 80058a4:	469a      	mov	sl, r3
 80058a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058aa:	d807      	bhi.n	80058bc <_printf_i+0x28>
 80058ac:	2f62      	cmp	r7, #98	; 0x62
 80058ae:	d80a      	bhi.n	80058c6 <_printf_i+0x32>
 80058b0:	2f00      	cmp	r7, #0
 80058b2:	f000 80d8 	beq.w	8005a66 <_printf_i+0x1d2>
 80058b6:	2f58      	cmp	r7, #88	; 0x58
 80058b8:	f000 80a3 	beq.w	8005a02 <_printf_i+0x16e>
 80058bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058c4:	e03a      	b.n	800593c <_printf_i+0xa8>
 80058c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058ca:	2b15      	cmp	r3, #21
 80058cc:	d8f6      	bhi.n	80058bc <_printf_i+0x28>
 80058ce:	a101      	add	r1, pc, #4	; (adr r1, 80058d4 <_printf_i+0x40>)
 80058d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058d4:	0800592d 	.word	0x0800592d
 80058d8:	08005941 	.word	0x08005941
 80058dc:	080058bd 	.word	0x080058bd
 80058e0:	080058bd 	.word	0x080058bd
 80058e4:	080058bd 	.word	0x080058bd
 80058e8:	080058bd 	.word	0x080058bd
 80058ec:	08005941 	.word	0x08005941
 80058f0:	080058bd 	.word	0x080058bd
 80058f4:	080058bd 	.word	0x080058bd
 80058f8:	080058bd 	.word	0x080058bd
 80058fc:	080058bd 	.word	0x080058bd
 8005900:	08005a4d 	.word	0x08005a4d
 8005904:	08005971 	.word	0x08005971
 8005908:	08005a2f 	.word	0x08005a2f
 800590c:	080058bd 	.word	0x080058bd
 8005910:	080058bd 	.word	0x080058bd
 8005914:	08005a6f 	.word	0x08005a6f
 8005918:	080058bd 	.word	0x080058bd
 800591c:	08005971 	.word	0x08005971
 8005920:	080058bd 	.word	0x080058bd
 8005924:	080058bd 	.word	0x080058bd
 8005928:	08005a37 	.word	0x08005a37
 800592c:	682b      	ldr	r3, [r5, #0]
 800592e:	1d1a      	adds	r2, r3, #4
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	602a      	str	r2, [r5, #0]
 8005934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005938:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800593c:	2301      	movs	r3, #1
 800593e:	e0a3      	b.n	8005a88 <_printf_i+0x1f4>
 8005940:	6820      	ldr	r0, [r4, #0]
 8005942:	6829      	ldr	r1, [r5, #0]
 8005944:	0606      	lsls	r6, r0, #24
 8005946:	f101 0304 	add.w	r3, r1, #4
 800594a:	d50a      	bpl.n	8005962 <_printf_i+0xce>
 800594c:	680e      	ldr	r6, [r1, #0]
 800594e:	602b      	str	r3, [r5, #0]
 8005950:	2e00      	cmp	r6, #0
 8005952:	da03      	bge.n	800595c <_printf_i+0xc8>
 8005954:	232d      	movs	r3, #45	; 0x2d
 8005956:	4276      	negs	r6, r6
 8005958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800595c:	485e      	ldr	r0, [pc, #376]	; (8005ad8 <_printf_i+0x244>)
 800595e:	230a      	movs	r3, #10
 8005960:	e019      	b.n	8005996 <_printf_i+0x102>
 8005962:	680e      	ldr	r6, [r1, #0]
 8005964:	602b      	str	r3, [r5, #0]
 8005966:	f010 0f40 	tst.w	r0, #64	; 0x40
 800596a:	bf18      	it	ne
 800596c:	b236      	sxthne	r6, r6
 800596e:	e7ef      	b.n	8005950 <_printf_i+0xbc>
 8005970:	682b      	ldr	r3, [r5, #0]
 8005972:	6820      	ldr	r0, [r4, #0]
 8005974:	1d19      	adds	r1, r3, #4
 8005976:	6029      	str	r1, [r5, #0]
 8005978:	0601      	lsls	r1, r0, #24
 800597a:	d501      	bpl.n	8005980 <_printf_i+0xec>
 800597c:	681e      	ldr	r6, [r3, #0]
 800597e:	e002      	b.n	8005986 <_printf_i+0xf2>
 8005980:	0646      	lsls	r6, r0, #25
 8005982:	d5fb      	bpl.n	800597c <_printf_i+0xe8>
 8005984:	881e      	ldrh	r6, [r3, #0]
 8005986:	4854      	ldr	r0, [pc, #336]	; (8005ad8 <_printf_i+0x244>)
 8005988:	2f6f      	cmp	r7, #111	; 0x6f
 800598a:	bf0c      	ite	eq
 800598c:	2308      	moveq	r3, #8
 800598e:	230a      	movne	r3, #10
 8005990:	2100      	movs	r1, #0
 8005992:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005996:	6865      	ldr	r5, [r4, #4]
 8005998:	60a5      	str	r5, [r4, #8]
 800599a:	2d00      	cmp	r5, #0
 800599c:	bfa2      	ittt	ge
 800599e:	6821      	ldrge	r1, [r4, #0]
 80059a0:	f021 0104 	bicge.w	r1, r1, #4
 80059a4:	6021      	strge	r1, [r4, #0]
 80059a6:	b90e      	cbnz	r6, 80059ac <_printf_i+0x118>
 80059a8:	2d00      	cmp	r5, #0
 80059aa:	d04d      	beq.n	8005a48 <_printf_i+0x1b4>
 80059ac:	4615      	mov	r5, r2
 80059ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80059b2:	fb03 6711 	mls	r7, r3, r1, r6
 80059b6:	5dc7      	ldrb	r7, [r0, r7]
 80059b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059bc:	4637      	mov	r7, r6
 80059be:	42bb      	cmp	r3, r7
 80059c0:	460e      	mov	r6, r1
 80059c2:	d9f4      	bls.n	80059ae <_printf_i+0x11a>
 80059c4:	2b08      	cmp	r3, #8
 80059c6:	d10b      	bne.n	80059e0 <_printf_i+0x14c>
 80059c8:	6823      	ldr	r3, [r4, #0]
 80059ca:	07de      	lsls	r6, r3, #31
 80059cc:	d508      	bpl.n	80059e0 <_printf_i+0x14c>
 80059ce:	6923      	ldr	r3, [r4, #16]
 80059d0:	6861      	ldr	r1, [r4, #4]
 80059d2:	4299      	cmp	r1, r3
 80059d4:	bfde      	ittt	le
 80059d6:	2330      	movle	r3, #48	; 0x30
 80059d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059dc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80059e0:	1b52      	subs	r2, r2, r5
 80059e2:	6122      	str	r2, [r4, #16]
 80059e4:	f8cd a000 	str.w	sl, [sp]
 80059e8:	464b      	mov	r3, r9
 80059ea:	aa03      	add	r2, sp, #12
 80059ec:	4621      	mov	r1, r4
 80059ee:	4640      	mov	r0, r8
 80059f0:	f7ff fee2 	bl	80057b8 <_printf_common>
 80059f4:	3001      	adds	r0, #1
 80059f6:	d14c      	bne.n	8005a92 <_printf_i+0x1fe>
 80059f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059fc:	b004      	add	sp, #16
 80059fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a02:	4835      	ldr	r0, [pc, #212]	; (8005ad8 <_printf_i+0x244>)
 8005a04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a08:	6829      	ldr	r1, [r5, #0]
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a10:	6029      	str	r1, [r5, #0]
 8005a12:	061d      	lsls	r5, r3, #24
 8005a14:	d514      	bpl.n	8005a40 <_printf_i+0x1ac>
 8005a16:	07df      	lsls	r7, r3, #31
 8005a18:	bf44      	itt	mi
 8005a1a:	f043 0320 	orrmi.w	r3, r3, #32
 8005a1e:	6023      	strmi	r3, [r4, #0]
 8005a20:	b91e      	cbnz	r6, 8005a2a <_printf_i+0x196>
 8005a22:	6823      	ldr	r3, [r4, #0]
 8005a24:	f023 0320 	bic.w	r3, r3, #32
 8005a28:	6023      	str	r3, [r4, #0]
 8005a2a:	2310      	movs	r3, #16
 8005a2c:	e7b0      	b.n	8005990 <_printf_i+0xfc>
 8005a2e:	6823      	ldr	r3, [r4, #0]
 8005a30:	f043 0320 	orr.w	r3, r3, #32
 8005a34:	6023      	str	r3, [r4, #0]
 8005a36:	2378      	movs	r3, #120	; 0x78
 8005a38:	4828      	ldr	r0, [pc, #160]	; (8005adc <_printf_i+0x248>)
 8005a3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a3e:	e7e3      	b.n	8005a08 <_printf_i+0x174>
 8005a40:	0659      	lsls	r1, r3, #25
 8005a42:	bf48      	it	mi
 8005a44:	b2b6      	uxthmi	r6, r6
 8005a46:	e7e6      	b.n	8005a16 <_printf_i+0x182>
 8005a48:	4615      	mov	r5, r2
 8005a4a:	e7bb      	b.n	80059c4 <_printf_i+0x130>
 8005a4c:	682b      	ldr	r3, [r5, #0]
 8005a4e:	6826      	ldr	r6, [r4, #0]
 8005a50:	6961      	ldr	r1, [r4, #20]
 8005a52:	1d18      	adds	r0, r3, #4
 8005a54:	6028      	str	r0, [r5, #0]
 8005a56:	0635      	lsls	r5, r6, #24
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	d501      	bpl.n	8005a60 <_printf_i+0x1cc>
 8005a5c:	6019      	str	r1, [r3, #0]
 8005a5e:	e002      	b.n	8005a66 <_printf_i+0x1d2>
 8005a60:	0670      	lsls	r0, r6, #25
 8005a62:	d5fb      	bpl.n	8005a5c <_printf_i+0x1c8>
 8005a64:	8019      	strh	r1, [r3, #0]
 8005a66:	2300      	movs	r3, #0
 8005a68:	6123      	str	r3, [r4, #16]
 8005a6a:	4615      	mov	r5, r2
 8005a6c:	e7ba      	b.n	80059e4 <_printf_i+0x150>
 8005a6e:	682b      	ldr	r3, [r5, #0]
 8005a70:	1d1a      	adds	r2, r3, #4
 8005a72:	602a      	str	r2, [r5, #0]
 8005a74:	681d      	ldr	r5, [r3, #0]
 8005a76:	6862      	ldr	r2, [r4, #4]
 8005a78:	2100      	movs	r1, #0
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	f7fa fbc8 	bl	8000210 <memchr>
 8005a80:	b108      	cbz	r0, 8005a86 <_printf_i+0x1f2>
 8005a82:	1b40      	subs	r0, r0, r5
 8005a84:	6060      	str	r0, [r4, #4]
 8005a86:	6863      	ldr	r3, [r4, #4]
 8005a88:	6123      	str	r3, [r4, #16]
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a90:	e7a8      	b.n	80059e4 <_printf_i+0x150>
 8005a92:	6923      	ldr	r3, [r4, #16]
 8005a94:	462a      	mov	r2, r5
 8005a96:	4649      	mov	r1, r9
 8005a98:	4640      	mov	r0, r8
 8005a9a:	47d0      	blx	sl
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	d0ab      	beq.n	80059f8 <_printf_i+0x164>
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	079b      	lsls	r3, r3, #30
 8005aa4:	d413      	bmi.n	8005ace <_printf_i+0x23a>
 8005aa6:	68e0      	ldr	r0, [r4, #12]
 8005aa8:	9b03      	ldr	r3, [sp, #12]
 8005aaa:	4298      	cmp	r0, r3
 8005aac:	bfb8      	it	lt
 8005aae:	4618      	movlt	r0, r3
 8005ab0:	e7a4      	b.n	80059fc <_printf_i+0x168>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	4632      	mov	r2, r6
 8005ab6:	4649      	mov	r1, r9
 8005ab8:	4640      	mov	r0, r8
 8005aba:	47d0      	blx	sl
 8005abc:	3001      	adds	r0, #1
 8005abe:	d09b      	beq.n	80059f8 <_printf_i+0x164>
 8005ac0:	3501      	adds	r5, #1
 8005ac2:	68e3      	ldr	r3, [r4, #12]
 8005ac4:	9903      	ldr	r1, [sp, #12]
 8005ac6:	1a5b      	subs	r3, r3, r1
 8005ac8:	42ab      	cmp	r3, r5
 8005aca:	dcf2      	bgt.n	8005ab2 <_printf_i+0x21e>
 8005acc:	e7eb      	b.n	8005aa6 <_printf_i+0x212>
 8005ace:	2500      	movs	r5, #0
 8005ad0:	f104 0619 	add.w	r6, r4, #25
 8005ad4:	e7f5      	b.n	8005ac2 <_printf_i+0x22e>
 8005ad6:	bf00      	nop
 8005ad8:	08006b5d 	.word	0x08006b5d
 8005adc:	08006b6e 	.word	0x08006b6e

08005ae0 <memcpy>:
 8005ae0:	440a      	add	r2, r1
 8005ae2:	4291      	cmp	r1, r2
 8005ae4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005ae8:	d100      	bne.n	8005aec <memcpy+0xc>
 8005aea:	4770      	bx	lr
 8005aec:	b510      	push	{r4, lr}
 8005aee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005af2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005af6:	4291      	cmp	r1, r2
 8005af8:	d1f9      	bne.n	8005aee <memcpy+0xe>
 8005afa:	bd10      	pop	{r4, pc}

08005afc <memmove>:
 8005afc:	4288      	cmp	r0, r1
 8005afe:	b510      	push	{r4, lr}
 8005b00:	eb01 0402 	add.w	r4, r1, r2
 8005b04:	d902      	bls.n	8005b0c <memmove+0x10>
 8005b06:	4284      	cmp	r4, r0
 8005b08:	4623      	mov	r3, r4
 8005b0a:	d807      	bhi.n	8005b1c <memmove+0x20>
 8005b0c:	1e43      	subs	r3, r0, #1
 8005b0e:	42a1      	cmp	r1, r4
 8005b10:	d008      	beq.n	8005b24 <memmove+0x28>
 8005b12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b1a:	e7f8      	b.n	8005b0e <memmove+0x12>
 8005b1c:	4402      	add	r2, r0
 8005b1e:	4601      	mov	r1, r0
 8005b20:	428a      	cmp	r2, r1
 8005b22:	d100      	bne.n	8005b26 <memmove+0x2a>
 8005b24:	bd10      	pop	{r4, pc}
 8005b26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b2e:	e7f7      	b.n	8005b20 <memmove+0x24>

08005b30 <_free_r>:
 8005b30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b32:	2900      	cmp	r1, #0
 8005b34:	d044      	beq.n	8005bc0 <_free_r+0x90>
 8005b36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b3a:	9001      	str	r0, [sp, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f1a1 0404 	sub.w	r4, r1, #4
 8005b42:	bfb8      	it	lt
 8005b44:	18e4      	addlt	r4, r4, r3
 8005b46:	f000 f913 	bl	8005d70 <__malloc_lock>
 8005b4a:	4a1e      	ldr	r2, [pc, #120]	; (8005bc4 <_free_r+0x94>)
 8005b4c:	9801      	ldr	r0, [sp, #4]
 8005b4e:	6813      	ldr	r3, [r2, #0]
 8005b50:	b933      	cbnz	r3, 8005b60 <_free_r+0x30>
 8005b52:	6063      	str	r3, [r4, #4]
 8005b54:	6014      	str	r4, [r2, #0]
 8005b56:	b003      	add	sp, #12
 8005b58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b5c:	f000 b90e 	b.w	8005d7c <__malloc_unlock>
 8005b60:	42a3      	cmp	r3, r4
 8005b62:	d908      	bls.n	8005b76 <_free_r+0x46>
 8005b64:	6825      	ldr	r5, [r4, #0]
 8005b66:	1961      	adds	r1, r4, r5
 8005b68:	428b      	cmp	r3, r1
 8005b6a:	bf01      	itttt	eq
 8005b6c:	6819      	ldreq	r1, [r3, #0]
 8005b6e:	685b      	ldreq	r3, [r3, #4]
 8005b70:	1949      	addeq	r1, r1, r5
 8005b72:	6021      	streq	r1, [r4, #0]
 8005b74:	e7ed      	b.n	8005b52 <_free_r+0x22>
 8005b76:	461a      	mov	r2, r3
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	b10b      	cbz	r3, 8005b80 <_free_r+0x50>
 8005b7c:	42a3      	cmp	r3, r4
 8005b7e:	d9fa      	bls.n	8005b76 <_free_r+0x46>
 8005b80:	6811      	ldr	r1, [r2, #0]
 8005b82:	1855      	adds	r5, r2, r1
 8005b84:	42a5      	cmp	r5, r4
 8005b86:	d10b      	bne.n	8005ba0 <_free_r+0x70>
 8005b88:	6824      	ldr	r4, [r4, #0]
 8005b8a:	4421      	add	r1, r4
 8005b8c:	1854      	adds	r4, r2, r1
 8005b8e:	42a3      	cmp	r3, r4
 8005b90:	6011      	str	r1, [r2, #0]
 8005b92:	d1e0      	bne.n	8005b56 <_free_r+0x26>
 8005b94:	681c      	ldr	r4, [r3, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	6053      	str	r3, [r2, #4]
 8005b9a:	4421      	add	r1, r4
 8005b9c:	6011      	str	r1, [r2, #0]
 8005b9e:	e7da      	b.n	8005b56 <_free_r+0x26>
 8005ba0:	d902      	bls.n	8005ba8 <_free_r+0x78>
 8005ba2:	230c      	movs	r3, #12
 8005ba4:	6003      	str	r3, [r0, #0]
 8005ba6:	e7d6      	b.n	8005b56 <_free_r+0x26>
 8005ba8:	6825      	ldr	r5, [r4, #0]
 8005baa:	1961      	adds	r1, r4, r5
 8005bac:	428b      	cmp	r3, r1
 8005bae:	bf04      	itt	eq
 8005bb0:	6819      	ldreq	r1, [r3, #0]
 8005bb2:	685b      	ldreq	r3, [r3, #4]
 8005bb4:	6063      	str	r3, [r4, #4]
 8005bb6:	bf04      	itt	eq
 8005bb8:	1949      	addeq	r1, r1, r5
 8005bba:	6021      	streq	r1, [r4, #0]
 8005bbc:	6054      	str	r4, [r2, #4]
 8005bbe:	e7ca      	b.n	8005b56 <_free_r+0x26>
 8005bc0:	b003      	add	sp, #12
 8005bc2:	bd30      	pop	{r4, r5, pc}
 8005bc4:	20000600 	.word	0x20000600

08005bc8 <sbrk_aligned>:
 8005bc8:	b570      	push	{r4, r5, r6, lr}
 8005bca:	4e0e      	ldr	r6, [pc, #56]	; (8005c04 <sbrk_aligned+0x3c>)
 8005bcc:	460c      	mov	r4, r1
 8005bce:	6831      	ldr	r1, [r6, #0]
 8005bd0:	4605      	mov	r5, r0
 8005bd2:	b911      	cbnz	r1, 8005bda <sbrk_aligned+0x12>
 8005bd4:	f000 f8bc 	bl	8005d50 <_sbrk_r>
 8005bd8:	6030      	str	r0, [r6, #0]
 8005bda:	4621      	mov	r1, r4
 8005bdc:	4628      	mov	r0, r5
 8005bde:	f000 f8b7 	bl	8005d50 <_sbrk_r>
 8005be2:	1c43      	adds	r3, r0, #1
 8005be4:	d00a      	beq.n	8005bfc <sbrk_aligned+0x34>
 8005be6:	1cc4      	adds	r4, r0, #3
 8005be8:	f024 0403 	bic.w	r4, r4, #3
 8005bec:	42a0      	cmp	r0, r4
 8005bee:	d007      	beq.n	8005c00 <sbrk_aligned+0x38>
 8005bf0:	1a21      	subs	r1, r4, r0
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	f000 f8ac 	bl	8005d50 <_sbrk_r>
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	d101      	bne.n	8005c00 <sbrk_aligned+0x38>
 8005bfc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005c00:	4620      	mov	r0, r4
 8005c02:	bd70      	pop	{r4, r5, r6, pc}
 8005c04:	20000604 	.word	0x20000604

08005c08 <_malloc_r>:
 8005c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c0c:	1ccd      	adds	r5, r1, #3
 8005c0e:	f025 0503 	bic.w	r5, r5, #3
 8005c12:	3508      	adds	r5, #8
 8005c14:	2d0c      	cmp	r5, #12
 8005c16:	bf38      	it	cc
 8005c18:	250c      	movcc	r5, #12
 8005c1a:	2d00      	cmp	r5, #0
 8005c1c:	4607      	mov	r7, r0
 8005c1e:	db01      	blt.n	8005c24 <_malloc_r+0x1c>
 8005c20:	42a9      	cmp	r1, r5
 8005c22:	d905      	bls.n	8005c30 <_malloc_r+0x28>
 8005c24:	230c      	movs	r3, #12
 8005c26:	603b      	str	r3, [r7, #0]
 8005c28:	2600      	movs	r6, #0
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c30:	4e2e      	ldr	r6, [pc, #184]	; (8005cec <_malloc_r+0xe4>)
 8005c32:	f000 f89d 	bl	8005d70 <__malloc_lock>
 8005c36:	6833      	ldr	r3, [r6, #0]
 8005c38:	461c      	mov	r4, r3
 8005c3a:	bb34      	cbnz	r4, 8005c8a <_malloc_r+0x82>
 8005c3c:	4629      	mov	r1, r5
 8005c3e:	4638      	mov	r0, r7
 8005c40:	f7ff ffc2 	bl	8005bc8 <sbrk_aligned>
 8005c44:	1c43      	adds	r3, r0, #1
 8005c46:	4604      	mov	r4, r0
 8005c48:	d14d      	bne.n	8005ce6 <_malloc_r+0xde>
 8005c4a:	6834      	ldr	r4, [r6, #0]
 8005c4c:	4626      	mov	r6, r4
 8005c4e:	2e00      	cmp	r6, #0
 8005c50:	d140      	bne.n	8005cd4 <_malloc_r+0xcc>
 8005c52:	6823      	ldr	r3, [r4, #0]
 8005c54:	4631      	mov	r1, r6
 8005c56:	4638      	mov	r0, r7
 8005c58:	eb04 0803 	add.w	r8, r4, r3
 8005c5c:	f000 f878 	bl	8005d50 <_sbrk_r>
 8005c60:	4580      	cmp	r8, r0
 8005c62:	d13a      	bne.n	8005cda <_malloc_r+0xd2>
 8005c64:	6821      	ldr	r1, [r4, #0]
 8005c66:	3503      	adds	r5, #3
 8005c68:	1a6d      	subs	r5, r5, r1
 8005c6a:	f025 0503 	bic.w	r5, r5, #3
 8005c6e:	3508      	adds	r5, #8
 8005c70:	2d0c      	cmp	r5, #12
 8005c72:	bf38      	it	cc
 8005c74:	250c      	movcc	r5, #12
 8005c76:	4629      	mov	r1, r5
 8005c78:	4638      	mov	r0, r7
 8005c7a:	f7ff ffa5 	bl	8005bc8 <sbrk_aligned>
 8005c7e:	3001      	adds	r0, #1
 8005c80:	d02b      	beq.n	8005cda <_malloc_r+0xd2>
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	442b      	add	r3, r5
 8005c86:	6023      	str	r3, [r4, #0]
 8005c88:	e00e      	b.n	8005ca8 <_malloc_r+0xa0>
 8005c8a:	6822      	ldr	r2, [r4, #0]
 8005c8c:	1b52      	subs	r2, r2, r5
 8005c8e:	d41e      	bmi.n	8005cce <_malloc_r+0xc6>
 8005c90:	2a0b      	cmp	r2, #11
 8005c92:	d916      	bls.n	8005cc2 <_malloc_r+0xba>
 8005c94:	1961      	adds	r1, r4, r5
 8005c96:	42a3      	cmp	r3, r4
 8005c98:	6025      	str	r5, [r4, #0]
 8005c9a:	bf18      	it	ne
 8005c9c:	6059      	strne	r1, [r3, #4]
 8005c9e:	6863      	ldr	r3, [r4, #4]
 8005ca0:	bf08      	it	eq
 8005ca2:	6031      	streq	r1, [r6, #0]
 8005ca4:	5162      	str	r2, [r4, r5]
 8005ca6:	604b      	str	r3, [r1, #4]
 8005ca8:	4638      	mov	r0, r7
 8005caa:	f104 060b 	add.w	r6, r4, #11
 8005cae:	f000 f865 	bl	8005d7c <__malloc_unlock>
 8005cb2:	f026 0607 	bic.w	r6, r6, #7
 8005cb6:	1d23      	adds	r3, r4, #4
 8005cb8:	1af2      	subs	r2, r6, r3
 8005cba:	d0b6      	beq.n	8005c2a <_malloc_r+0x22>
 8005cbc:	1b9b      	subs	r3, r3, r6
 8005cbe:	50a3      	str	r3, [r4, r2]
 8005cc0:	e7b3      	b.n	8005c2a <_malloc_r+0x22>
 8005cc2:	6862      	ldr	r2, [r4, #4]
 8005cc4:	42a3      	cmp	r3, r4
 8005cc6:	bf0c      	ite	eq
 8005cc8:	6032      	streq	r2, [r6, #0]
 8005cca:	605a      	strne	r2, [r3, #4]
 8005ccc:	e7ec      	b.n	8005ca8 <_malloc_r+0xa0>
 8005cce:	4623      	mov	r3, r4
 8005cd0:	6864      	ldr	r4, [r4, #4]
 8005cd2:	e7b2      	b.n	8005c3a <_malloc_r+0x32>
 8005cd4:	4634      	mov	r4, r6
 8005cd6:	6876      	ldr	r6, [r6, #4]
 8005cd8:	e7b9      	b.n	8005c4e <_malloc_r+0x46>
 8005cda:	230c      	movs	r3, #12
 8005cdc:	603b      	str	r3, [r7, #0]
 8005cde:	4638      	mov	r0, r7
 8005ce0:	f000 f84c 	bl	8005d7c <__malloc_unlock>
 8005ce4:	e7a1      	b.n	8005c2a <_malloc_r+0x22>
 8005ce6:	6025      	str	r5, [r4, #0]
 8005ce8:	e7de      	b.n	8005ca8 <_malloc_r+0xa0>
 8005cea:	bf00      	nop
 8005cec:	20000600 	.word	0x20000600

08005cf0 <_realloc_r>:
 8005cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cf4:	4680      	mov	r8, r0
 8005cf6:	4614      	mov	r4, r2
 8005cf8:	460e      	mov	r6, r1
 8005cfa:	b921      	cbnz	r1, 8005d06 <_realloc_r+0x16>
 8005cfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d00:	4611      	mov	r1, r2
 8005d02:	f7ff bf81 	b.w	8005c08 <_malloc_r>
 8005d06:	b92a      	cbnz	r2, 8005d14 <_realloc_r+0x24>
 8005d08:	f7ff ff12 	bl	8005b30 <_free_r>
 8005d0c:	4625      	mov	r5, r4
 8005d0e:	4628      	mov	r0, r5
 8005d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d14:	f000 f838 	bl	8005d88 <_malloc_usable_size_r>
 8005d18:	4284      	cmp	r4, r0
 8005d1a:	4607      	mov	r7, r0
 8005d1c:	d802      	bhi.n	8005d24 <_realloc_r+0x34>
 8005d1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005d22:	d812      	bhi.n	8005d4a <_realloc_r+0x5a>
 8005d24:	4621      	mov	r1, r4
 8005d26:	4640      	mov	r0, r8
 8005d28:	f7ff ff6e 	bl	8005c08 <_malloc_r>
 8005d2c:	4605      	mov	r5, r0
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	d0ed      	beq.n	8005d0e <_realloc_r+0x1e>
 8005d32:	42bc      	cmp	r4, r7
 8005d34:	4622      	mov	r2, r4
 8005d36:	4631      	mov	r1, r6
 8005d38:	bf28      	it	cs
 8005d3a:	463a      	movcs	r2, r7
 8005d3c:	f7ff fed0 	bl	8005ae0 <memcpy>
 8005d40:	4631      	mov	r1, r6
 8005d42:	4640      	mov	r0, r8
 8005d44:	f7ff fef4 	bl	8005b30 <_free_r>
 8005d48:	e7e1      	b.n	8005d0e <_realloc_r+0x1e>
 8005d4a:	4635      	mov	r5, r6
 8005d4c:	e7df      	b.n	8005d0e <_realloc_r+0x1e>
	...

08005d50 <_sbrk_r>:
 8005d50:	b538      	push	{r3, r4, r5, lr}
 8005d52:	4d06      	ldr	r5, [pc, #24]	; (8005d6c <_sbrk_r+0x1c>)
 8005d54:	2300      	movs	r3, #0
 8005d56:	4604      	mov	r4, r0
 8005d58:	4608      	mov	r0, r1
 8005d5a:	602b      	str	r3, [r5, #0]
 8005d5c:	f7fb fee0 	bl	8001b20 <_sbrk>
 8005d60:	1c43      	adds	r3, r0, #1
 8005d62:	d102      	bne.n	8005d6a <_sbrk_r+0x1a>
 8005d64:	682b      	ldr	r3, [r5, #0]
 8005d66:	b103      	cbz	r3, 8005d6a <_sbrk_r+0x1a>
 8005d68:	6023      	str	r3, [r4, #0]
 8005d6a:	bd38      	pop	{r3, r4, r5, pc}
 8005d6c:	20000608 	.word	0x20000608

08005d70 <__malloc_lock>:
 8005d70:	4801      	ldr	r0, [pc, #4]	; (8005d78 <__malloc_lock+0x8>)
 8005d72:	f000 b811 	b.w	8005d98 <__retarget_lock_acquire_recursive>
 8005d76:	bf00      	nop
 8005d78:	2000060c 	.word	0x2000060c

08005d7c <__malloc_unlock>:
 8005d7c:	4801      	ldr	r0, [pc, #4]	; (8005d84 <__malloc_unlock+0x8>)
 8005d7e:	f000 b80c 	b.w	8005d9a <__retarget_lock_release_recursive>
 8005d82:	bf00      	nop
 8005d84:	2000060c 	.word	0x2000060c

08005d88 <_malloc_usable_size_r>:
 8005d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d8c:	1f18      	subs	r0, r3, #4
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	bfbc      	itt	lt
 8005d92:	580b      	ldrlt	r3, [r1, r0]
 8005d94:	18c0      	addlt	r0, r0, r3
 8005d96:	4770      	bx	lr

08005d98 <__retarget_lock_acquire_recursive>:
 8005d98:	4770      	bx	lr

08005d9a <__retarget_lock_release_recursive>:
 8005d9a:	4770      	bx	lr

08005d9c <_init>:
 8005d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d9e:	bf00      	nop
 8005da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005da2:	bc08      	pop	{r3}
 8005da4:	469e      	mov	lr, r3
 8005da6:	4770      	bx	lr

08005da8 <_fini>:
 8005da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005daa:	bf00      	nop
 8005dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dae:	bc08      	pop	{r3}
 8005db0:	469e      	mov	lr, r3
 8005db2:	4770      	bx	lr
