
IlhamDestyo_TugasConvertData.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f02c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022ac  0800f1fc  0800f1fc  0001f1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080114a8  080114a8  000300a4  2**0
                  CONTENTS
  4 .ARM          00000008  080114a8  080114a8  000214a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080114b0  080114b0  000300a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080114b0  080114b0  000214b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080114b4  080114b4  000214b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  080114b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000344d8  200000a4  0801155c  000300a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2003457c  0801155c  0003457c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e604  00000000  00000000  000300d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004874  00000000  00000000  0004e6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a50  00000000  00000000  00052f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017f0  00000000  00000000  000549a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cf96  00000000  00000000  00056190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000224a6  00000000  00000000  00083126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb5c9  00000000  00000000  000a55cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a0b95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007aa4  00000000  00000000  001a0be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a4 	.word	0x200000a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f1e4 	.word	0x0800f1e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a8 	.word	0x200000a8
 800020c:	0800f1e4 	.word	0x0800f1e4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bd0:	f000 b974 	b.w	8000ebc <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9d08      	ldr	r5, [sp, #32]
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	468e      	mov	lr, r1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d14d      	bne.n	8000c96 <__udivmoddi4+0xaa>
 8000bfa:	428a      	cmp	r2, r1
 8000bfc:	4694      	mov	ip, r2
 8000bfe:	d969      	bls.n	8000cd4 <__udivmoddi4+0xe8>
 8000c00:	fab2 f282 	clz	r2, r2
 8000c04:	b152      	cbz	r2, 8000c1c <__udivmoddi4+0x30>
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	f1c2 0120 	rsb	r1, r2, #32
 8000c0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c16:	ea41 0e03 	orr.w	lr, r1, r3
 8000c1a:	4094      	lsls	r4, r2
 8000c1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c20:	0c21      	lsrs	r1, r4, #16
 8000c22:	fbbe f6f8 	udiv	r6, lr, r8
 8000c26:	fa1f f78c 	uxth.w	r7, ip
 8000c2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c32:	fb06 f107 	mul.w	r1, r6, r7
 8000c36:	4299      	cmp	r1, r3
 8000c38:	d90a      	bls.n	8000c50 <__udivmoddi4+0x64>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c42:	f080 811f 	bcs.w	8000e84 <__udivmoddi4+0x298>
 8000c46:	4299      	cmp	r1, r3
 8000c48:	f240 811c 	bls.w	8000e84 <__udivmoddi4+0x298>
 8000c4c:	3e02      	subs	r6, #2
 8000c4e:	4463      	add	r3, ip
 8000c50:	1a5b      	subs	r3, r3, r1
 8000c52:	b2a4      	uxth	r4, r4
 8000c54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c58:	fb08 3310 	mls	r3, r8, r0, r3
 8000c5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c60:	fb00 f707 	mul.w	r7, r0, r7
 8000c64:	42a7      	cmp	r7, r4
 8000c66:	d90a      	bls.n	8000c7e <__udivmoddi4+0x92>
 8000c68:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c70:	f080 810a 	bcs.w	8000e88 <__udivmoddi4+0x29c>
 8000c74:	42a7      	cmp	r7, r4
 8000c76:	f240 8107 	bls.w	8000e88 <__udivmoddi4+0x29c>
 8000c7a:	4464      	add	r4, ip
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c82:	1be4      	subs	r4, r4, r7
 8000c84:	2600      	movs	r6, #0
 8000c86:	b11d      	cbz	r5, 8000c90 <__udivmoddi4+0xa4>
 8000c88:	40d4      	lsrs	r4, r2
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c90:	4631      	mov	r1, r6
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d909      	bls.n	8000cae <__udivmoddi4+0xc2>
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	f000 80ef 	beq.w	8000e7e <__udivmoddi4+0x292>
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca6:	4630      	mov	r0, r6
 8000ca8:	4631      	mov	r1, r6
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	fab3 f683 	clz	r6, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d14a      	bne.n	8000d4c <__udivmoddi4+0x160>
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0xd4>
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	f200 80f9 	bhi.w	8000eb2 <__udivmoddi4+0x2c6>
 8000cc0:	1a84      	subs	r4, r0, r2
 8000cc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	469e      	mov	lr, r3
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d0e0      	beq.n	8000c90 <__udivmoddi4+0xa4>
 8000cce:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cd2:	e7dd      	b.n	8000c90 <__udivmoddi4+0xa4>
 8000cd4:	b902      	cbnz	r2, 8000cd8 <__udivmoddi4+0xec>
 8000cd6:	deff      	udf	#255	; 0xff
 8000cd8:	fab2 f282 	clz	r2, r2
 8000cdc:	2a00      	cmp	r2, #0
 8000cde:	f040 8092 	bne.w	8000e06 <__udivmoddi4+0x21a>
 8000ce2:	eba1 010c 	sub.w	r1, r1, ip
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f fe8c 	uxth.w	lr, ip
 8000cee:	2601      	movs	r6, #1
 8000cf0:	0c20      	lsrs	r0, r4, #16
 8000cf2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cfa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfe:	fb0e f003 	mul.w	r0, lr, r3
 8000d02:	4288      	cmp	r0, r1
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x12c>
 8000d06:	eb1c 0101 	adds.w	r1, ip, r1
 8000d0a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d0e:	d202      	bcs.n	8000d16 <__udivmoddi4+0x12a>
 8000d10:	4288      	cmp	r0, r1
 8000d12:	f200 80cb 	bhi.w	8000eac <__udivmoddi4+0x2c0>
 8000d16:	4643      	mov	r3, r8
 8000d18:	1a09      	subs	r1, r1, r0
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d20:	fb07 1110 	mls	r1, r7, r0, r1
 8000d24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d28:	fb0e fe00 	mul.w	lr, lr, r0
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d908      	bls.n	8000d42 <__udivmoddi4+0x156>
 8000d30:	eb1c 0404 	adds.w	r4, ip, r4
 8000d34:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x154>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f200 80bb 	bhi.w	8000eb6 <__udivmoddi4+0x2ca>
 8000d40:	4608      	mov	r0, r1
 8000d42:	eba4 040e 	sub.w	r4, r4, lr
 8000d46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d4a:	e79c      	b.n	8000c86 <__udivmoddi4+0x9a>
 8000d4c:	f1c6 0720 	rsb	r7, r6, #32
 8000d50:	40b3      	lsls	r3, r6
 8000d52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d62:	431c      	orrs	r4, r3
 8000d64:	40f9      	lsrs	r1, r7
 8000d66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d72:	0c20      	lsrs	r0, r4, #16
 8000d74:	fa1f fe8c 	uxth.w	lr, ip
 8000d78:	fb09 1118 	mls	r1, r9, r8, r1
 8000d7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d80:	fb08 f00e 	mul.w	r0, r8, lr
 8000d84:	4288      	cmp	r0, r1
 8000d86:	fa02 f206 	lsl.w	r2, r2, r6
 8000d8a:	d90b      	bls.n	8000da4 <__udivmoddi4+0x1b8>
 8000d8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d90:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d94:	f080 8088 	bcs.w	8000ea8 <__udivmoddi4+0x2bc>
 8000d98:	4288      	cmp	r0, r1
 8000d9a:	f240 8085 	bls.w	8000ea8 <__udivmoddi4+0x2bc>
 8000d9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000da2:	4461      	add	r1, ip
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dac:	fb09 1110 	mls	r1, r9, r0, r1
 8000db0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	458e      	cmp	lr, r1
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x1e2>
 8000dbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000dc4:	d26c      	bcs.n	8000ea0 <__udivmoddi4+0x2b4>
 8000dc6:	458e      	cmp	lr, r1
 8000dc8:	d96a      	bls.n	8000ea0 <__udivmoddi4+0x2b4>
 8000dca:	3802      	subs	r0, #2
 8000dcc:	4461      	add	r1, ip
 8000dce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd6:	eba1 010e 	sub.w	r1, r1, lr
 8000dda:	42a1      	cmp	r1, r4
 8000ddc:	46c8      	mov	r8, r9
 8000dde:	46a6      	mov	lr, r4
 8000de0:	d356      	bcc.n	8000e90 <__udivmoddi4+0x2a4>
 8000de2:	d053      	beq.n	8000e8c <__udivmoddi4+0x2a0>
 8000de4:	b15d      	cbz	r5, 8000dfe <__udivmoddi4+0x212>
 8000de6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dea:	eb61 010e 	sbc.w	r1, r1, lr
 8000dee:	fa01 f707 	lsl.w	r7, r1, r7
 8000df2:	fa22 f306 	lsr.w	r3, r2, r6
 8000df6:	40f1      	lsrs	r1, r6
 8000df8:	431f      	orrs	r7, r3
 8000dfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfe:	2600      	movs	r6, #0
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	f1c2 0320 	rsb	r3, r2, #32
 8000e0a:	40d8      	lsrs	r0, r3
 8000e0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e10:	fa21 f303 	lsr.w	r3, r1, r3
 8000e14:	4091      	lsls	r1, r2
 8000e16:	4301      	orrs	r1, r0
 8000e18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1c:	fa1f fe8c 	uxth.w	lr, ip
 8000e20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e24:	fb07 3610 	mls	r6, r7, r0, r3
 8000e28:	0c0b      	lsrs	r3, r1, #16
 8000e2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e32:	429e      	cmp	r6, r3
 8000e34:	fa04 f402 	lsl.w	r4, r4, r2
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x260>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e42:	d22f      	bcs.n	8000ea4 <__udivmoddi4+0x2b8>
 8000e44:	429e      	cmp	r6, r3
 8000e46:	d92d      	bls.n	8000ea4 <__udivmoddi4+0x2b8>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	1b9b      	subs	r3, r3, r6
 8000e4e:	b289      	uxth	r1, r1
 8000e50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e54:	fb07 3316 	mls	r3, r7, r6, r3
 8000e58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e60:	428b      	cmp	r3, r1
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x28a>
 8000e64:	eb1c 0101 	adds.w	r1, ip, r1
 8000e68:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e6c:	d216      	bcs.n	8000e9c <__udivmoddi4+0x2b0>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d914      	bls.n	8000e9c <__udivmoddi4+0x2b0>
 8000e72:	3e02      	subs	r6, #2
 8000e74:	4461      	add	r1, ip
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e7c:	e738      	b.n	8000cf0 <__udivmoddi4+0x104>
 8000e7e:	462e      	mov	r6, r5
 8000e80:	4628      	mov	r0, r5
 8000e82:	e705      	b.n	8000c90 <__udivmoddi4+0xa4>
 8000e84:	4606      	mov	r6, r0
 8000e86:	e6e3      	b.n	8000c50 <__udivmoddi4+0x64>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6f8      	b.n	8000c7e <__udivmoddi4+0x92>
 8000e8c:	454b      	cmp	r3, r9
 8000e8e:	d2a9      	bcs.n	8000de4 <__udivmoddi4+0x1f8>
 8000e90:	ebb9 0802 	subs.w	r8, r9, r2
 8000e94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e98:	3801      	subs	r0, #1
 8000e9a:	e7a3      	b.n	8000de4 <__udivmoddi4+0x1f8>
 8000e9c:	4646      	mov	r6, r8
 8000e9e:	e7ea      	b.n	8000e76 <__udivmoddi4+0x28a>
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	e794      	b.n	8000dce <__udivmoddi4+0x1e2>
 8000ea4:	4640      	mov	r0, r8
 8000ea6:	e7d1      	b.n	8000e4c <__udivmoddi4+0x260>
 8000ea8:	46d0      	mov	r8, sl
 8000eaa:	e77b      	b.n	8000da4 <__udivmoddi4+0x1b8>
 8000eac:	3b02      	subs	r3, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	e732      	b.n	8000d18 <__udivmoddi4+0x12c>
 8000eb2:	4630      	mov	r0, r6
 8000eb4:	e709      	b.n	8000cca <__udivmoddi4+0xde>
 8000eb6:	4464      	add	r4, ip
 8000eb8:	3802      	subs	r0, #2
 8000eba:	e742      	b.n	8000d42 <__udivmoddi4+0x156>

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ec4:	f3bf 8f4f 	dsb	sy
}
 8000ec8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <__NVIC_SystemReset+0x24>)
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000ed2:	4904      	ldr	r1, [pc, #16]	; (8000ee4 <__NVIC_SystemReset+0x24>)
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <__NVIC_SystemReset+0x28>)
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eda:	f3bf 8f4f 	dsb	sy
}
 8000ede:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <__NVIC_SystemReset+0x20>
 8000ee4:	e000ed00 	.word	0xe000ed00
 8000ee8:	05fa0004 	.word	0x05fa0004

08000eec <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8000ef0:	f3bf 8f4f 	dsb	sy
}
 8000ef4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ef6:	f3bf 8f6f 	isb	sy
}
 8000efa:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000efc:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <SCB_EnableICache+0x48>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f04:	f3bf 8f4f 	dsb	sy
}
 8000f08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f0a:	f3bf 8f6f 	isb	sy
}
 8000f0e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <SCB_EnableICache+0x48>)
 8000f12:	695b      	ldr	r3, [r3, #20]
 8000f14:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <SCB_EnableICache+0x48>)
 8000f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f1a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f1c:	f3bf 8f4f 	dsb	sy
}
 8000f20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f22:	f3bf 8f6f 	isb	sy
}
 8000f26:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000f3e:	4b1f      	ldr	r3, [pc, #124]	; (8000fbc <SCB_EnableDCache+0x84>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f46:	f3bf 8f4f 	dsb	sy
}
 8000f4a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <SCB_EnableDCache+0x84>)
 8000f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f52:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	0b5b      	lsrs	r3, r3, #13
 8000f58:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f5c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	08db      	lsrs	r3, r3, #3
 8000f62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f66:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	015a      	lsls	r2, r3, #5
 8000f6c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000f70:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f76:	4911      	ldr	r1, [pc, #68]	; (8000fbc <SCB_EnableDCache+0x84>)
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	1e5a      	subs	r2, r3, #1
 8000f82:	60ba      	str	r2, [r7, #8]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1ef      	bne.n	8000f68 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	1e5a      	subs	r2, r3, #1
 8000f8c:	60fa      	str	r2, [r7, #12]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1e5      	bne.n	8000f5e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f92:	f3bf 8f4f 	dsb	sy
}
 8000f96:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <SCB_EnableDCache+0x84>)
 8000f9a:	695b      	ldr	r3, [r3, #20]
 8000f9c:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <SCB_EnableDCache+0x84>)
 8000f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa4:	f3bf 8f4f 	dsb	sy
}
 8000fa8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000faa:	f3bf 8f6f 	isb	sy
}
 8000fae:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000fc6:	f7ff ff91 	bl	8000eec <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000fca:	f7ff ffb5 	bl	8000f38 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fce:	f001 ffdb 	bl	8002f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd2:	f000 f9f7 	bl	80013c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd6:	f000 fad7 	bl	8001588 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8000fda:	f000 fab5 	bl	8001548 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000fde:	f006 fb8d 	bl	80076fc <MX_FATFS_Init>
  MX_DMA2D_Init();
 8000fe2:	f000 fa7f 	bl	80014e4 <MX_DMA2D_Init>
  MX_CRC_Init();
 8000fe6:	f000 fa5b 	bl	80014a0 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  BSP_SDRAM_Init(); /* Initializes the SDRAM device */
 8000fea:	f007 fe15 	bl	8008c18 <BSP_SDRAM_Init>
  __HAL_RCC_CRC_CLK_ENABLE(); /* Enable the CRC Module */
 8000fee:	4bc0      	ldr	r3, [pc, #768]	; (80012f0 <main+0x330>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4abf      	ldr	r2, [pc, #764]	; (80012f0 <main+0x330>)
 8000ff4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4bbd      	ldr	r3, [pc, #756]	; (80012f0 <main+0x330>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
  BSP_TS_Init(480, 272);//Inisialisasi 480x272 color LCD-TFT with capacitive touch screen
 8001006:	f44f 7188 	mov.w	r1, #272	; 0x110
 800100a:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800100e:	f007 ffb9 	bl	8008f84 <BSP_TS_Init>
  BSP_LCD_Init(); //Inisialisasi LCD on
 8001012:	f007 f937 	bl	8008284 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FB_START_ADDRESS); //Initializes the LCD layer in ARGB8888 format (32 bits per pixel).
 8001016:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800101a:	2001      	movs	r0, #1
 800101c:	f007 f9ca 	bl	80083b4 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);//LCD select layer
 8001020:	2001      	movs	r0, #1
 8001022:	f007 fa27 	bl	8008474 <BSP_LCD_SelectLayer>

  //Delay Process
  BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
 8001026:	48b3      	ldr	r0, [pc, #716]	; (80012f4 <main+0x334>)
 8001028:	f007 fa80 	bl	800852c <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_DARKGREEN);
 800102c:	48b1      	ldr	r0, [pc, #708]	; (80012f4 <main+0x334>)
 800102e:	f007 fa49 	bl	80084c4 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8001032:	48b1      	ldr	r0, [pc, #708]	; (80012f8 <main+0x338>)
 8001034:	f007 fa2e 	bl	8008494 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, 100, (uint8_t*)"LOADING...", CENTER_MODE); // print text loading... dari koordinat tengah
 8001038:	2301      	movs	r3, #1
 800103a:	4ab0      	ldr	r2, [pc, #704]	; (80012fc <main+0x33c>)
 800103c:	2164      	movs	r1, #100	; 0x64
 800103e:	2000      	movs	r0, #0
 8001040:	f007 fae0 	bl	8008604 <BSP_LCD_DisplayStringAt>
  HAL_Delay(1000); // delay 1 detik
 8001044:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001048:	f002 f80a 	bl	8003060 <HAL_Delay>
  BSP_LCD_Clear(LCD_COLOR_DARKGREEN);//clear lcd
 800104c:	48a9      	ldr	r0, [pc, #676]	; (80012f4 <main+0x334>)
 800104e:	f007 fa6d 	bl	800852c <BSP_LCD_Clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 mySD_Init(); // inisialisasi microsd
 8001052:	f000 fafb 	bl	800164c <mySD_Init>
	 mySD_Mount(); // mount microsd
 8001056:	f000 fb21 	bl	800169c <mySD_Mount>

//	 	BSP_LCD_Clear(LCD_COLOR_GREEN);//clear lcd

		//SOAL1
		BSP_TS_GetState(&ts); // Returns status and positions of the touch screen.
 800105a:	48a9      	ldr	r0, [pc, #676]	; (8001300 <main+0x340>)
 800105c:	f007 ffd2 	bl	8009004 <BSP_TS_GetState>
		BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 8001060:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001064:	f007 fa2e 	bl	80084c4 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 20, (uint8_t*)"SOAL 1", CENTER_MODE);
 8001068:	2301      	movs	r3, #1
 800106a:	4aa6      	ldr	r2, [pc, #664]	; (8001304 <main+0x344>)
 800106c:	2114      	movs	r1, #20
 800106e:	2000      	movs	r0, #0
 8001070:	f007 fac8 	bl	8008604 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 8001074:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001078:	f007 fa24 	bl	80084c4 <BSP_LCD_SetBackColor>
		// Jika SOAL 1 ditekan
		if (ts.touchX[0] >= 220 && ts.touchX[0] <= 260 && ts.touchY[0] >= 20 && ts.touchY[0] <= 50)
 800107c:	4ba0      	ldr	r3, [pc, #640]	; (8001300 <main+0x340>)
 800107e:	885b      	ldrh	r3, [r3, #2]
 8001080:	2bdb      	cmp	r3, #219	; 0xdb
 8001082:	d92f      	bls.n	80010e4 <main+0x124>
 8001084:	4b9e      	ldr	r3, [pc, #632]	; (8001300 <main+0x340>)
 8001086:	885b      	ldrh	r3, [r3, #2]
 8001088:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800108c:	d82a      	bhi.n	80010e4 <main+0x124>
 800108e:	4b9c      	ldr	r3, [pc, #624]	; (8001300 <main+0x340>)
 8001090:	899b      	ldrh	r3, [r3, #12]
 8001092:	2b13      	cmp	r3, #19
 8001094:	d926      	bls.n	80010e4 <main+0x124>
 8001096:	4b9a      	ldr	r3, [pc, #616]	; (8001300 <main+0x340>)
 8001098:	899b      	ldrh	r3, [r3, #12]
 800109a:	2b32      	cmp	r3, #50	; 0x32
 800109c:	d822      	bhi.n	80010e4 <main+0x124>
		{
			BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
 800109e:	4895      	ldr	r0, [pc, #596]	; (80012f4 <main+0x334>)
 80010a0:	f007 fa44 	bl	800852c <BSP_LCD_Clear>
			soal1(); // mengubah data soal 1
 80010a4:	f000 fc04 	bl	80018b0 <soal1>
			// Membuat tampilan pesan soal sudah dikonvert
			BSP_LCD_Clear(LCD_COLOR_WHITE);
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010ac:	f007 fa3e 	bl	800852c <BSP_LCD_Clear>
			BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010b4:	f007 fa06 	bl	80084c4 <BSP_LCD_SetBackColor>
			BSP_LCD_DisplayStringAt(0, 90, (uint8_t *)"BERHASIL CONVERT SOAL1", CENTER_MODE);
 80010b8:	2301      	movs	r3, #1
 80010ba:	4a93      	ldr	r2, [pc, #588]	; (8001308 <main+0x348>)
 80010bc:	215a      	movs	r1, #90	; 0x5a
 80010be:	2000      	movs	r0, #0
 80010c0:	f007 faa0 	bl	8008604 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(0, 110, (uint8_t *)"dan SIMPAN", CENTER_MODE);
 80010c4:	2301      	movs	r3, #1
 80010c6:	4a91      	ldr	r2, [pc, #580]	; (800130c <main+0x34c>)
 80010c8:	216e      	movs	r1, #110	; 0x6e
 80010ca:	2000      	movs	r0, #0
 80010cc:	f007 fa9a 	bl	8008604 <BSP_LCD_DisplayStringAt>
			HAL_Delay(1000);
 80010d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010d4:	f001 ffc4 	bl	8003060 <HAL_Delay>
			BSP_TS_ResetTouchData(&ts);
 80010d8:	4889      	ldr	r0, [pc, #548]	; (8001300 <main+0x340>)
 80010da:	f008 f9cf 	bl	800947c <BSP_TS_ResetTouchData>
			BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
 80010de:	4885      	ldr	r0, [pc, #532]	; (80012f4 <main+0x334>)
 80010e0:	f007 fa24 	bl	800852c <BSP_LCD_Clear>
		}

		//SOAL2
		BSP_TS_GetState(&ts); // Returns status and positions of the touch screen.
 80010e4:	4886      	ldr	r0, [pc, #536]	; (8001300 <main+0x340>)
 80010e6:	f007 ff8d 	bl	8009004 <BSP_TS_GetState>
		BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 80010ea:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80010ee:	f007 f9e9 	bl	80084c4 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 70, (uint8_t*)"SOAL 2", CENTER_MODE);
 80010f2:	2301      	movs	r3, #1
 80010f4:	4a86      	ldr	r2, [pc, #536]	; (8001310 <main+0x350>)
 80010f6:	2146      	movs	r1, #70	; 0x46
 80010f8:	2000      	movs	r0, #0
 80010fa:	f007 fa83 	bl	8008604 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 80010fe:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001102:	f007 f9df 	bl	80084c4 <BSP_LCD_SetBackColor>
		if (ts.touchX[0] >= 220 && ts.touchX[0] <= 260 && ts.touchY[0] >= 70 && ts.touchY[0] <= 100)
 8001106:	4b7e      	ldr	r3, [pc, #504]	; (8001300 <main+0x340>)
 8001108:	885b      	ldrh	r3, [r3, #2]
 800110a:	2bdb      	cmp	r3, #219	; 0xdb
 800110c:	d92f      	bls.n	800116e <main+0x1ae>
 800110e:	4b7c      	ldr	r3, [pc, #496]	; (8001300 <main+0x340>)
 8001110:	885b      	ldrh	r3, [r3, #2]
 8001112:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001116:	d82a      	bhi.n	800116e <main+0x1ae>
 8001118:	4b79      	ldr	r3, [pc, #484]	; (8001300 <main+0x340>)
 800111a:	899b      	ldrh	r3, [r3, #12]
 800111c:	2b45      	cmp	r3, #69	; 0x45
 800111e:	d926      	bls.n	800116e <main+0x1ae>
 8001120:	4b77      	ldr	r3, [pc, #476]	; (8001300 <main+0x340>)
 8001122:	899b      	ldrh	r3, [r3, #12]
 8001124:	2b64      	cmp	r3, #100	; 0x64
 8001126:	d822      	bhi.n	800116e <main+0x1ae>
		{
			BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
 8001128:	4872      	ldr	r0, [pc, #456]	; (80012f4 <main+0x334>)
 800112a:	f007 f9ff 	bl	800852c <BSP_LCD_Clear>
			soal2();
 800112e:	f000 fc3b 	bl	80019a8 <soal2>

			BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001132:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001136:	f007 f9f9 	bl	800852c <BSP_LCD_Clear>
			BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800113a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800113e:	f007 f9c1 	bl	80084c4 <BSP_LCD_SetBackColor>
			BSP_LCD_DisplayStringAt(0, 90, (uint8_t *)"BERHASIL CONVERT SOAL", CENTER_MODE);
 8001142:	2301      	movs	r3, #1
 8001144:	4a73      	ldr	r2, [pc, #460]	; (8001314 <main+0x354>)
 8001146:	215a      	movs	r1, #90	; 0x5a
 8001148:	2000      	movs	r0, #0
 800114a:	f007 fa5b 	bl	8008604 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(0, 110, (uint8_t *)"dan SIMPAN", CENTER_MODE);
 800114e:	2301      	movs	r3, #1
 8001150:	4a6e      	ldr	r2, [pc, #440]	; (800130c <main+0x34c>)
 8001152:	216e      	movs	r1, #110	; 0x6e
 8001154:	2000      	movs	r0, #0
 8001156:	f007 fa55 	bl	8008604 <BSP_LCD_DisplayStringAt>
			HAL_Delay(1000);
 800115a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800115e:	f001 ff7f 	bl	8003060 <HAL_Delay>
			BSP_TS_ResetTouchData(&ts);
 8001162:	4867      	ldr	r0, [pc, #412]	; (8001300 <main+0x340>)
 8001164:	f008 f98a 	bl	800947c <BSP_TS_ResetTouchData>
			BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
 8001168:	4862      	ldr	r0, [pc, #392]	; (80012f4 <main+0x334>)
 800116a:	f007 f9df 	bl	800852c <BSP_LCD_Clear>
		} // if touch soal 2

		//SOAL3
		BSP_TS_GetState(&ts); // Returns status and positions of the touch screen.
 800116e:	4864      	ldr	r0, [pc, #400]	; (8001300 <main+0x340>)
 8001170:	f007 ff48 	bl	8009004 <BSP_TS_GetState>
		BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 8001174:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001178:	f007 f9a4 	bl	80084c4 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 120, (uint8_t*)"SOAL 3", CENTER_MODE);
 800117c:	2301      	movs	r3, #1
 800117e:	4a66      	ldr	r2, [pc, #408]	; (8001318 <main+0x358>)
 8001180:	2178      	movs	r1, #120	; 0x78
 8001182:	2000      	movs	r0, #0
 8001184:	f007 fa3e 	bl	8008604 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 8001188:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800118c:	f007 f99a 	bl	80084c4 <BSP_LCD_SetBackColor>
		if (ts.touchX[0] >= 220 && ts.touchX[0] <= 260 && ts.touchY[0] >= 120 && ts.touchY[0] <= 150)
 8001190:	4b5b      	ldr	r3, [pc, #364]	; (8001300 <main+0x340>)
 8001192:	885b      	ldrh	r3, [r3, #2]
 8001194:	2bdb      	cmp	r3, #219	; 0xdb
 8001196:	d92f      	bls.n	80011f8 <main+0x238>
 8001198:	4b59      	ldr	r3, [pc, #356]	; (8001300 <main+0x340>)
 800119a:	885b      	ldrh	r3, [r3, #2]
 800119c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80011a0:	d82a      	bhi.n	80011f8 <main+0x238>
 80011a2:	4b57      	ldr	r3, [pc, #348]	; (8001300 <main+0x340>)
 80011a4:	899b      	ldrh	r3, [r3, #12]
 80011a6:	2b77      	cmp	r3, #119	; 0x77
 80011a8:	d926      	bls.n	80011f8 <main+0x238>
 80011aa:	4b55      	ldr	r3, [pc, #340]	; (8001300 <main+0x340>)
 80011ac:	899b      	ldrh	r3, [r3, #12]
 80011ae:	2b96      	cmp	r3, #150	; 0x96
 80011b0:	d822      	bhi.n	80011f8 <main+0x238>
		{
			BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
 80011b2:	4850      	ldr	r0, [pc, #320]	; (80012f4 <main+0x334>)
 80011b4:	f007 f9ba 	bl	800852c <BSP_LCD_Clear>
			soal3();
 80011b8:	f000 fc72 	bl	8001aa0 <soal3>

			BSP_LCD_Clear(LCD_COLOR_WHITE);
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011c0:	f007 f9b4 	bl	800852c <BSP_LCD_Clear>
			BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011c8:	f007 f97c 	bl	80084c4 <BSP_LCD_SetBackColor>
			BSP_LCD_DisplayStringAt(0, 90, (uint8_t *)"BERHASIL CONVERT SOAL", CENTER_MODE);
 80011cc:	2301      	movs	r3, #1
 80011ce:	4a51      	ldr	r2, [pc, #324]	; (8001314 <main+0x354>)
 80011d0:	215a      	movs	r1, #90	; 0x5a
 80011d2:	2000      	movs	r0, #0
 80011d4:	f007 fa16 	bl	8008604 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(0, 110, (uint8_t *)"dan SIMPAN", CENTER_MODE);
 80011d8:	2301      	movs	r3, #1
 80011da:	4a4c      	ldr	r2, [pc, #304]	; (800130c <main+0x34c>)
 80011dc:	216e      	movs	r1, #110	; 0x6e
 80011de:	2000      	movs	r0, #0
 80011e0:	f007 fa10 	bl	8008604 <BSP_LCD_DisplayStringAt>
			HAL_Delay(1000);
 80011e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011e8:	f001 ff3a 	bl	8003060 <HAL_Delay>
			BSP_TS_ResetTouchData(&ts);
 80011ec:	4844      	ldr	r0, [pc, #272]	; (8001300 <main+0x340>)
 80011ee:	f008 f945 	bl	800947c <BSP_TS_ResetTouchData>
			BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
 80011f2:	4840      	ldr	r0, [pc, #256]	; (80012f4 <main+0x334>)
 80011f4:	f007 f99a 	bl	800852c <BSP_LCD_Clear>
		}// if touch soal 3

		//SOAL4
		BSP_TS_GetState(&ts); // Returns status and positions of the touch screen.
 80011f8:	4841      	ldr	r0, [pc, #260]	; (8001300 <main+0x340>)
 80011fa:	f007 ff03 	bl	8009004 <BSP_TS_GetState>
		BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 80011fe:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001202:	f007 f95f 	bl	80084c4 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 170, (uint8_t*)"SOAL 4", CENTER_MODE);
 8001206:	2301      	movs	r3, #1
 8001208:	4a44      	ldr	r2, [pc, #272]	; (800131c <main+0x35c>)
 800120a:	21aa      	movs	r1, #170	; 0xaa
 800120c:	2000      	movs	r0, #0
 800120e:	f007 f9f9 	bl	8008604 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 8001212:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001216:	f007 f955 	bl	80084c4 <BSP_LCD_SetBackColor>
		if (ts.touchX[0] >= 220 && ts.touchX[0] <= 260 && ts.touchY[0] >= 170 && ts.touchY[0] <= 200)
 800121a:	4b39      	ldr	r3, [pc, #228]	; (8001300 <main+0x340>)
 800121c:	885b      	ldrh	r3, [r3, #2]
 800121e:	2bdb      	cmp	r3, #219	; 0xdb
 8001220:	d92f      	bls.n	8001282 <main+0x2c2>
 8001222:	4b37      	ldr	r3, [pc, #220]	; (8001300 <main+0x340>)
 8001224:	885b      	ldrh	r3, [r3, #2]
 8001226:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800122a:	d82a      	bhi.n	8001282 <main+0x2c2>
 800122c:	4b34      	ldr	r3, [pc, #208]	; (8001300 <main+0x340>)
 800122e:	899b      	ldrh	r3, [r3, #12]
 8001230:	2ba9      	cmp	r3, #169	; 0xa9
 8001232:	d926      	bls.n	8001282 <main+0x2c2>
 8001234:	4b32      	ldr	r3, [pc, #200]	; (8001300 <main+0x340>)
 8001236:	899b      	ldrh	r3, [r3, #12]
 8001238:	2bc8      	cmp	r3, #200	; 0xc8
 800123a:	d822      	bhi.n	8001282 <main+0x2c2>
		{
			BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
 800123c:	482d      	ldr	r0, [pc, #180]	; (80012f4 <main+0x334>)
 800123e:	f007 f975 	bl	800852c <BSP_LCD_Clear>
			soal4();
 8001242:	f000 fd59 	bl	8001cf8 <soal4>

			BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001246:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800124a:	f007 f96f 	bl	800852c <BSP_LCD_Clear>
			BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800124e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001252:	f007 f937 	bl	80084c4 <BSP_LCD_SetBackColor>
			BSP_LCD_DisplayStringAt(0, 90, (uint8_t *)"BERHASIL CONVERT SOAL", CENTER_MODE);
 8001256:	2301      	movs	r3, #1
 8001258:	4a2e      	ldr	r2, [pc, #184]	; (8001314 <main+0x354>)
 800125a:	215a      	movs	r1, #90	; 0x5a
 800125c:	2000      	movs	r0, #0
 800125e:	f007 f9d1 	bl	8008604 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(0, 110, (uint8_t *)"dan SIMPAN", CENTER_MODE);
 8001262:	2301      	movs	r3, #1
 8001264:	4a29      	ldr	r2, [pc, #164]	; (800130c <main+0x34c>)
 8001266:	216e      	movs	r1, #110	; 0x6e
 8001268:	2000      	movs	r0, #0
 800126a:	f007 f9cb 	bl	8008604 <BSP_LCD_DisplayStringAt>
			HAL_Delay(1000);
 800126e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001272:	f001 fef5 	bl	8003060 <HAL_Delay>
			BSP_TS_ResetTouchData(&ts);
 8001276:	4822      	ldr	r0, [pc, #136]	; (8001300 <main+0x340>)
 8001278:	f008 f900 	bl	800947c <BSP_TS_ResetTouchData>
			BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
 800127c:	481d      	ldr	r0, [pc, #116]	; (80012f4 <main+0x334>)
 800127e:	f007 f955 	bl	800852c <BSP_LCD_Clear>
		} // if touch soal 4

		//SOAL5
		BSP_TS_GetState(&ts); // Returns status and positions of the touch screen.
 8001282:	481f      	ldr	r0, [pc, #124]	; (8001300 <main+0x340>)
 8001284:	f007 febe 	bl	8009004 <BSP_TS_GetState>
		BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 8001288:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800128c:	f007 f91a 	bl	80084c4 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 220, (uint8_t*)"SOAL 5", CENTER_MODE);
 8001290:	2301      	movs	r3, #1
 8001292:	4a23      	ldr	r2, [pc, #140]	; (8001320 <main+0x360>)
 8001294:	21dc      	movs	r1, #220	; 0xdc
 8001296:	2000      	movs	r0, #0
 8001298:	f007 f9b4 	bl	8008604 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 800129c:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80012a0:	f007 f910 	bl	80084c4 <BSP_LCD_SetBackColor>
		if (ts.touchX[0] >= 220 && ts.touchX[0] <= 260 && ts.touchY[0] >= 220 && ts.touchY[0] <= 250)
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <main+0x340>)
 80012a6:	885b      	ldrh	r3, [r3, #2]
 80012a8:	2bdb      	cmp	r3, #219	; 0xdb
 80012aa:	d94b      	bls.n	8001344 <main+0x384>
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <main+0x340>)
 80012ae:	885b      	ldrh	r3, [r3, #2]
 80012b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80012b4:	d846      	bhi.n	8001344 <main+0x384>
 80012b6:	4b12      	ldr	r3, [pc, #72]	; (8001300 <main+0x340>)
 80012b8:	899b      	ldrh	r3, [r3, #12]
 80012ba:	2bdb      	cmp	r3, #219	; 0xdb
 80012bc:	d942      	bls.n	8001344 <main+0x384>
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <main+0x340>)
 80012c0:	899b      	ldrh	r3, [r3, #12]
 80012c2:	2bfa      	cmp	r3, #250	; 0xfa
 80012c4:	d83e      	bhi.n	8001344 <main+0x384>
		{
			BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
 80012c6:	480b      	ldr	r0, [pc, #44]	; (80012f4 <main+0x334>)
 80012c8:	f007 f930 	bl	800852c <BSP_LCD_Clear>
			soal5();
 80012cc:	f000 fdc6 	bl	8001e5c <soal5>

			BSP_LCD_Clear(LCD_COLOR_WHITE);
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012d4:	f007 f92a 	bl	800852c <BSP_LCD_Clear>
			BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012dc:	f007 f8f2 	bl	80084c4 <BSP_LCD_SetBackColor>
			BSP_LCD_DisplayStringAt(0, 90, (uint8_t *)"BERHASIL CONVERT SOAL", CENTER_MODE);
 80012e0:	2301      	movs	r3, #1
 80012e2:	4a0c      	ldr	r2, [pc, #48]	; (8001314 <main+0x354>)
 80012e4:	215a      	movs	r1, #90	; 0x5a
 80012e6:	2000      	movs	r0, #0
 80012e8:	f007 f98c 	bl	8008604 <BSP_LCD_DisplayStringAt>
 80012ec:	e01a      	b.n	8001324 <main+0x364>
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800
 80012f4:	ff008000 	.word	0xff008000
 80012f8:	ffa52a2a 	.word	0xffa52a2a
 80012fc:	0800f1fc 	.word	0x0800f1fc
 8001300:	2003422c 	.word	0x2003422c
 8001304:	0800f208 	.word	0x0800f208
 8001308:	0800f210 	.word	0x0800f210
 800130c:	0800f228 	.word	0x0800f228
 8001310:	0800f234 	.word	0x0800f234
 8001314:	0800f23c 	.word	0x0800f23c
 8001318:	0800f254 	.word	0x0800f254
 800131c:	0800f25c 	.word	0x0800f25c
 8001320:	0800f264 	.word	0x0800f264
			BSP_LCD_DisplayStringAt(0, 110, (uint8_t *)"dan SIMPAN", CENTER_MODE);
 8001324:	2301      	movs	r3, #1
 8001326:	4a1f      	ldr	r2, [pc, #124]	; (80013a4 <main+0x3e4>)
 8001328:	216e      	movs	r1, #110	; 0x6e
 800132a:	2000      	movs	r0, #0
 800132c:	f007 f96a 	bl	8008604 <BSP_LCD_DisplayStringAt>
			HAL_Delay(1000);
 8001330:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001334:	f001 fe94 	bl	8003060 <HAL_Delay>
			BSP_TS_ResetTouchData(&ts);
 8001338:	481b      	ldr	r0, [pc, #108]	; (80013a8 <main+0x3e8>)
 800133a:	f008 f89f 	bl	800947c <BSP_TS_ResetTouchData>
			BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
 800133e:	481b      	ldr	r0, [pc, #108]	; (80013ac <main+0x3ec>)
 8001340:	f007 f8f4 	bl	800852c <BSP_LCD_Clear>
		} // if touch soal 5

		//Menu Text Box
		BSP_LCD_DisplayStringAt(0, 20, (uint8_t*)"SOAL 1", CENTER_MODE);
 8001344:	2301      	movs	r3, #1
 8001346:	4a1a      	ldr	r2, [pc, #104]	; (80013b0 <main+0x3f0>)
 8001348:	2114      	movs	r1, #20
 800134a:	2000      	movs	r0, #0
 800134c:	f007 f95a 	bl	8008604 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 8001350:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001354:	f007 f8b6 	bl	80084c4 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 70, (uint8_t*)"SOAL 2", CENTER_MODE);
 8001358:	2301      	movs	r3, #1
 800135a:	4a16      	ldr	r2, [pc, #88]	; (80013b4 <main+0x3f4>)
 800135c:	2146      	movs	r1, #70	; 0x46
 800135e:	2000      	movs	r0, #0
 8001360:	f007 f950 	bl	8008604 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 8001364:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001368:	f007 f8ac 	bl	80084c4 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 120, (uint8_t*)"SOAL 3", CENTER_MODE);
 800136c:	2301      	movs	r3, #1
 800136e:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <main+0x3f8>)
 8001370:	2178      	movs	r1, #120	; 0x78
 8001372:	2000      	movs	r0, #0
 8001374:	f007 f946 	bl	8008604 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 8001378:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800137c:	f007 f8a2 	bl	80084c4 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 170, (uint8_t*)"SOAL 4", CENTER_MODE);
 8001380:	2301      	movs	r3, #1
 8001382:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <main+0x3fc>)
 8001384:	21aa      	movs	r1, #170	; 0xaa
 8001386:	2000      	movs	r0, #0
 8001388:	f007 f93c 	bl	8008604 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 800138c:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001390:	f007 f898 	bl	80084c4 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, 220, (uint8_t*)"SOAL 5", CENTER_MODE);
 8001394:	2301      	movs	r3, #1
 8001396:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <main+0x400>)
 8001398:	21dc      	movs	r1, #220	; 0xdc
 800139a:	2000      	movs	r0, #0
 800139c:	f007 f932 	bl	8008604 <BSP_LCD_DisplayStringAt>
	 mySD_Init(); // inisialisasi microsd
 80013a0:	e657      	b.n	8001052 <main+0x92>
 80013a2:	bf00      	nop
 80013a4:	0800f228 	.word	0x0800f228
 80013a8:	2003422c 	.word	0x2003422c
 80013ac:	ff008000 	.word	0xff008000
 80013b0:	0800f208 	.word	0x0800f208
 80013b4:	0800f234 	.word	0x0800f234
 80013b8:	0800f254 	.word	0x0800f254
 80013bc:	0800f25c 	.word	0x0800f25c
 80013c0:	0800f264 	.word	0x0800f264

080013c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b094      	sub	sp, #80	; 0x50
 80013c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ca:	f107 0320 	add.w	r3, r7, #32
 80013ce:	2230      	movs	r2, #48	; 0x30
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f00c f89a 	bl	800d50c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013e8:	f003 fc20 	bl	8004c2c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ec:	4b2a      	ldr	r3, [pc, #168]	; (8001498 <SystemClock_Config+0xd4>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	4a29      	ldr	r2, [pc, #164]	; (8001498 <SystemClock_Config+0xd4>)
 80013f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f6:	6413      	str	r3, [r2, #64]	; 0x40
 80013f8:	4b27      	ldr	r3, [pc, #156]	; (8001498 <SystemClock_Config+0xd4>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001404:	4b25      	ldr	r3, [pc, #148]	; (800149c <SystemClock_Config+0xd8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a24      	ldr	r2, [pc, #144]	; (800149c <SystemClock_Config+0xd8>)
 800140a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	4b22      	ldr	r3, [pc, #136]	; (800149c <SystemClock_Config+0xd8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800141c:	2302      	movs	r3, #2
 800141e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001420:	2301      	movs	r3, #1
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001424:	2310      	movs	r3, #16
 8001426:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001428:	2302      	movs	r3, #2
 800142a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800142c:	2300      	movs	r3, #0
 800142e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001430:	2308      	movs	r3, #8
 8001432:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 8001434:	23c8      	movs	r3, #200	; 0xc8
 8001436:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001438:	2302      	movs	r3, #2
 800143a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800143c:	2308      	movs	r3, #8
 800143e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001440:	f107 0320 	add.w	r3, r7, #32
 8001444:	4618      	mov	r0, r3
 8001446:	f003 fc51 	bl	8004cec <HAL_RCC_OscConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001450:	f000 fe36 	bl	80020c0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001454:	f003 fbfa 	bl	8004c4c <HAL_PWREx_EnableOverDrive>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800145e:	f000 fe2f 	bl	80020c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001462:	230f      	movs	r3, #15
 8001464:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001466:	2302      	movs	r3, #2
 8001468:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800146e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001472:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001478:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800147a:	f107 030c 	add.w	r3, r7, #12
 800147e:	2106      	movs	r1, #6
 8001480:	4618      	mov	r0, r3
 8001482:	f003 fed7 	bl	8005234 <HAL_RCC_ClockConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800148c:	f000 fe18 	bl	80020c0 <Error_Handler>
  }
}
 8001490:	bf00      	nop
 8001492:	3750      	adds	r7, #80	; 0x50
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40023800 	.word	0x40023800
 800149c:	40007000 	.word	0x40007000

080014a0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80014a4:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <MX_CRC_Init+0x3c>)
 80014a6:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <MX_CRC_Init+0x40>)
 80014a8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <MX_CRC_Init+0x3c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80014b0:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <MX_CRC_Init+0x3c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <MX_CRC_Init+0x3c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80014bc:	4b07      	ldr	r3, [pc, #28]	; (80014dc <MX_CRC_Init+0x3c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <MX_CRC_Init+0x3c>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014c8:	4804      	ldr	r0, [pc, #16]	; (80014dc <MX_CRC_Init+0x3c>)
 80014ca:	f001 feff 	bl	80032cc <HAL_CRC_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80014d4:	f000 fdf4 	bl	80020c0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	200000c0 	.word	0x200000c0
 80014e0:	40023000 	.word	0x40023000

080014e4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80014e8:	4b15      	ldr	r3, [pc, #84]	; (8001540 <MX_DMA2D_Init+0x5c>)
 80014ea:	4a16      	ldr	r2, [pc, #88]	; (8001544 <MX_DMA2D_Init+0x60>)
 80014ec:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <MX_DMA2D_Init+0x5c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <MX_DMA2D_Init+0x5c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <MX_DMA2D_Init+0x5c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <MX_DMA2D_Init+0x5c>)
 8001502:	2200      	movs	r2, #0
 8001504:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <MX_DMA2D_Init+0x5c>)
 8001508:	2200      	movs	r2, #0
 800150a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <MX_DMA2D_Init+0x5c>)
 800150e:	2200      	movs	r2, #0
 8001510:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <MX_DMA2D_Init+0x5c>)
 8001514:	2200      	movs	r2, #0
 8001516:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001518:	4809      	ldr	r0, [pc, #36]	; (8001540 <MX_DMA2D_Init+0x5c>)
 800151a:	f002 f97f 	bl	800381c <HAL_DMA2D_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001524:	f000 fdcc 	bl	80020c0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001528:	2101      	movs	r1, #1
 800152a:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_DMA2D_Init+0x5c>)
 800152c:	f002 fad4 	bl	8003ad8 <HAL_DMA2D_ConfigLayer>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001536:	f000 fdc3 	bl	80020c0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200000e4 	.word	0x200000e4
 8001544:	4002b000 	.word	0x4002b000

08001548 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_SDMMC1_SD_Init+0x38>)
 800154e:	4a0d      	ldr	r2, [pc, #52]	; (8001584 <MX_SDMMC1_SD_Init+0x3c>)
 8001550:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <MX_SDMMC1_SD_Init+0x38>)
 8001554:	2200      	movs	r2, #0
 8001556:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_SDMMC1_SD_Init+0x38>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <MX_SDMMC1_SD_Init+0x38>)
 8001560:	2200      	movs	r2, #0
 8001562:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_SDMMC1_SD_Init+0x38>)
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <MX_SDMMC1_SD_Init+0x38>)
 800156c:	2200      	movs	r2, #0
 800156e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <MX_SDMMC1_SD_Init+0x38>)
 8001572:	2200      	movs	r2, #0
 8001574:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	20000124 	.word	0x20000124
 8001584:	40012c00 	.word	0x40012c00

08001588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
 800159c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800159e:	4b29      	ldr	r3, [pc, #164]	; (8001644 <MX_GPIO_Init+0xbc>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a28      	ldr	r2, [pc, #160]	; (8001644 <MX_GPIO_Init+0xbc>)
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b26      	ldr	r3, [pc, #152]	; (8001644 <MX_GPIO_Init+0xbc>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	4b23      	ldr	r3, [pc, #140]	; (8001644 <MX_GPIO_Init+0xbc>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a22      	ldr	r2, [pc, #136]	; (8001644 <MX_GPIO_Init+0xbc>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b20      	ldr	r3, [pc, #128]	; (8001644 <MX_GPIO_Init+0xbc>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ce:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <MX_GPIO_Init+0xbc>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a1c      	ldr	r2, [pc, #112]	; (8001644 <MX_GPIO_Init+0xbc>)
 80015d4:	f043 0308 	orr.w	r3, r3, #8
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <MX_GPIO_Init+0xbc>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80015e6:	4b17      	ldr	r3, [pc, #92]	; (8001644 <MX_GPIO_Init+0xbc>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a16      	ldr	r2, [pc, #88]	; (8001644 <MX_GPIO_Init+0xbc>)
 80015ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <MX_GPIO_Init+0xbc>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_GPIO_Init+0xbc>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a10      	ldr	r2, [pc, #64]	; (8001644 <MX_GPIO_Init+0xbc>)
 8001604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <MX_GPIO_Init+0xbc>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	2102      	movs	r1, #2
 800161a:	480b      	ldr	r0, [pc, #44]	; (8001648 <MX_GPIO_Init+0xc0>)
 800161c:	f002 fd36 	bl	800408c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001620:	2302      	movs	r3, #2
 8001622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001624:	2301      	movs	r3, #1
 8001626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	4619      	mov	r1, r3
 8001636:	4804      	ldr	r0, [pc, #16]	; (8001648 <MX_GPIO_Init+0xc0>)
 8001638:	f002 fb7c 	bl	8003d34 <HAL_GPIO_Init>

}
 800163c:	bf00      	nop
 800163e:	3728      	adds	r7, #40	; 0x28
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40023800 	.word	0x40023800
 8001648:	40022000 	.word	0x40022000

0800164c <mySD_Init>:

/* USER CODE BEGIN 4 */
void mySD_Init(){
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	res = BSP_SD_Init();//Inisialisas SD card
 8001650:	f006 f86e 	bl	8007730 <BSP_SD_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	461a      	mov	r2, r3
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <mySD_Init+0x40>)
 800165a:	701a      	strb	r2, [r3, #0]
	if(res != FR_OK){
 800165c:	4b0b      	ldr	r3, [pc, #44]	; (800168c <mySD_Init+0x40>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d010      	beq.n	8001686 <mySD_Init+0x3a>
	BSP_LCD_Clear(LCD_COLOR_DARKGREEN); //Ketika LCD_Clear LCD berwarna putih
 8001664:	480a      	ldr	r0, [pc, #40]	; (8001690 <mySD_Init+0x44>)
 8001666:	f006 ff61 	bl	800852c <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_DARKGREEN);//set background berwarna hijau
 800166a:	4809      	ldr	r0, [pc, #36]	; (8001690 <mySD_Init+0x44>)
 800166c:	f006 ff2a 	bl	80084c4 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BROWN);//set text berwarna coklat
 8001670:	4808      	ldr	r0, [pc, #32]	; (8001694 <mySD_Init+0x48>)
 8001672:	f006 ff0f 	bl	8008494 <BSP_LCD_SetTextColor>
	/*Display ERROR
	 *LCD pada koordinat X,Y dengan mode Center
	 *Ketika MICRO SD tidak terdeteksi*/
	BSP_LCD_DisplayStringAt(0, 100, (uint8_t*)"PLEASE INSERT MICRO SD", CENTER_MODE);
 8001676:	2301      	movs	r3, #1
 8001678:	4a07      	ldr	r2, [pc, #28]	; (8001698 <mySD_Init+0x4c>)
 800167a:	2164      	movs	r1, #100	; 0x64
 800167c:	2000      	movs	r0, #0
 800167e:	f006 ffc1 	bl	8008604 <BSP_LCD_DisplayStringAt>
	error1();
 8001682:	f000 fd15 	bl	80020b0 <error1>
	}
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200001a8 	.word	0x200001a8
 8001690:	ff008000 	.word	0xff008000
 8001694:	ffa52a2a 	.word	0xffa52a2a
 8001698:	0800f26c 	.word	0x0800f26c

0800169c <mySD_Mount>:

void mySD_Mount(){
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	res = f_mount(&SDFatFs, "", 1);//Mounting MicroSD
 80016a0:	2201      	movs	r2, #1
 80016a2:	4910      	ldr	r1, [pc, #64]	; (80016e4 <mySD_Mount+0x48>)
 80016a4:	4810      	ldr	r0, [pc, #64]	; (80016e8 <mySD_Mount+0x4c>)
 80016a6:	f00a f843 	bl	800b730 <f_mount>
 80016aa:	4603      	mov	r3, r0
 80016ac:	461a      	mov	r2, r3
 80016ae:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <mySD_Mount+0x50>)
 80016b0:	701a      	strb	r2, [r3, #0]
	if(res != FR_OK){
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <mySD_Mount+0x50>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d011      	beq.n	80016de <mySD_Mount+0x42>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80016ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016be:	f006 ff35 	bl	800852c <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_DARKGREEN);
 80016c2:	480b      	ldr	r0, [pc, #44]	; (80016f0 <mySD_Mount+0x54>)
 80016c4:	f006 fefe 	bl	80084c4 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 80016c8:	480a      	ldr	r0, [pc, #40]	; (80016f4 <mySD_Mount+0x58>)
 80016ca:	f006 fee3 	bl	8008494 <BSP_LCD_SetTextColor>
	/*Display ERROR
	 *LCD pada koordinat X,Y dengan mode Center
	 *Ketika MICRO SD tidak termounting*/
	BSP_LCD_DisplayStringAt(0, 100, (uint8_t*)"Error! cannot mount SD Card!", CENTER_MODE);
 80016ce:	2301      	movs	r3, #1
 80016d0:	4a09      	ldr	r2, [pc, #36]	; (80016f8 <mySD_Mount+0x5c>)
 80016d2:	2164      	movs	r1, #100	; 0x64
 80016d4:	2000      	movs	r0, #0
 80016d6:	f006 ff95 	bl	8008604 <BSP_LCD_DisplayStringAt>
	error1();
 80016da:	f000 fce9 	bl	80020b0 <error1>
	}
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	0800f284 	.word	0x0800f284
 80016e8:	200001ac 	.word	0x200001ac
 80016ec:	200001a8 	.word	0x200001a8
 80016f0:	ff008000 	.word	0xff008000
 80016f4:	ffa52a2a 	.word	0xffa52a2a
 80016f8:	0800f288 	.word	0x0800f288

080016fc <read_file>:

//Baca File
void read_file(char *namafile){
 80016fc:	b590      	push	{r4, r7, lr}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	res = f_open(&MyFile, namafile, FA_READ);
 8001704:	2201      	movs	r2, #1
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	4837      	ldr	r0, [pc, #220]	; (80017e8 <read_file+0xec>)
 800170a:	f00a f857 	bl	800b7bc <f_open>
 800170e:	4603      	mov	r3, r0
 8001710:	461a      	mov	r2, r3
 8001712:	4b36      	ldr	r3, [pc, #216]	; (80017ec <read_file+0xf0>)
 8001714:	701a      	strb	r2, [r3, #0]
    if(res != FR_OK){
 8001716:	4b35      	ldr	r3, [pc, #212]	; (80017ec <read_file+0xf0>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d007      	beq.n	800172e <read_file+0x32>
    	BSP_LCD_DisplayStringAt(0, 100, (uint8_t*)"Can't Read/No data.txt!", CENTER_MODE);
 800171e:	2301      	movs	r3, #1
 8001720:	4a33      	ldr	r2, [pc, #204]	; (80017f0 <read_file+0xf4>)
 8001722:	2164      	movs	r1, #100	; 0x64
 8001724:	2000      	movs	r0, #0
 8001726:	f006 ff6d 	bl	8008604 <BSP_LCD_DisplayStringAt>
    	  error1();
 800172a:	f000 fcc1 	bl	80020b0 <error1>
    }
	int i = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
	int j = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
	while(!f_eof(&MyFile)){
 8001736:	e026      	b.n	8001786 <read_file+0x8a>
		f_gets(datain1,200,&MyFile);
 8001738:	4a2b      	ldr	r2, [pc, #172]	; (80017e8 <read_file+0xec>)
 800173a:	21c8      	movs	r1, #200	; 0xc8
 800173c:	482d      	ldr	r0, [pc, #180]	; (80017f4 <read_file+0xf8>)
 800173e:	f00b f859 	bl	800c7f4 <f_gets>
		strcpy(dataraw[i], shift_trim(datain1));
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	22c8      	movs	r2, #200	; 0xc8
 8001746:	fb02 f303 	mul.w	r3, r2, r3
 800174a:	4a2b      	ldr	r2, [pc, #172]	; (80017f8 <read_file+0xfc>)
 800174c:	189c      	adds	r4, r3, r2
 800174e:	4829      	ldr	r0, [pc, #164]	; (80017f4 <read_file+0xf8>)
 8001750:	f00b fd0c 	bl	800d16c <shift_trim>
 8001754:	4603      	mov	r3, r0
 8001756:	4619      	mov	r1, r3
 8001758:	4620      	mov	r0, r4
 800175a:	f00c f88e 	bl	800d87a <strcpy>
		if(strlen(dataraw[i])>=0){j++;strcpy(dataraw[j], shift_trim(datain1));}
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	3301      	adds	r3, #1
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	22c8      	movs	r2, #200	; 0xc8
 8001768:	fb02 f303 	mul.w	r3, r2, r3
 800176c:	4a22      	ldr	r2, [pc, #136]	; (80017f8 <read_file+0xfc>)
 800176e:	189c      	adds	r4, r3, r2
 8001770:	4820      	ldr	r0, [pc, #128]	; (80017f4 <read_file+0xf8>)
 8001772:	f00b fcfb 	bl	800d16c <shift_trim>
 8001776:	4603      	mov	r3, r0
 8001778:	4619      	mov	r1, r3
 800177a:	4620      	mov	r0, r4
 800177c:	f00c f87d 	bl	800d87a <strcpy>
		i++;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3301      	adds	r3, #1
 8001784:	60fb      	str	r3, [r7, #12]
	while(!f_eof(&MyFile)){
 8001786:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <read_file+0xec>)
 8001788:	699a      	ldr	r2, [r3, #24]
 800178a:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <read_file+0xec>)
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	429a      	cmp	r2, r3
 8001790:	d1d2      	bne.n	8001738 <read_file+0x3c>
	}
    f_close(&MyFile);
 8001792:	4815      	ldr	r0, [pc, #84]	; (80017e8 <read_file+0xec>)
 8001794:	f00a fdfb 	bl	800c38e <f_close>
	number_data = j;
 8001798:	4a18      	ldr	r2, [pc, #96]	; (80017fc <read_file+0x100>)
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	6013      	str	r3, [r2, #0]
	if(strlen(dataraw[number_data]) == strlen(dataraw[number_data-1])){number_data=j-1;}
 800179e:	4b17      	ldr	r3, [pc, #92]	; (80017fc <read_file+0x100>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	22c8      	movs	r2, #200	; 0xc8
 80017a4:	fb02 f303 	mul.w	r3, r2, r3
 80017a8:	4a13      	ldr	r2, [pc, #76]	; (80017f8 <read_file+0xfc>)
 80017aa:	4413      	add	r3, r2
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fd2f 	bl	8000210 <strlen>
 80017b2:	4604      	mov	r4, r0
 80017b4:	4b11      	ldr	r3, [pc, #68]	; (80017fc <read_file+0x100>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	3b01      	subs	r3, #1
 80017ba:	22c8      	movs	r2, #200	; 0xc8
 80017bc:	fb02 f303 	mul.w	r3, r2, r3
 80017c0:	4a0d      	ldr	r2, [pc, #52]	; (80017f8 <read_file+0xfc>)
 80017c2:	4413      	add	r3, r2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fd23 	bl	8000210 <strlen>
 80017ca:	4603      	mov	r3, r0
 80017cc:	429c      	cmp	r4, r3
 80017ce:	d104      	bne.n	80017da <read_file+0xde>
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	4a09      	ldr	r2, [pc, #36]	; (80017fc <read_file+0x100>)
 80017d6:	6013      	str	r3, [r2, #0]
	else{number_data = j;}
}
 80017d8:	e002      	b.n	80017e0 <read_file+0xe4>
	else{number_data = j;}
 80017da:	4a08      	ldr	r2, [pc, #32]	; (80017fc <read_file+0x100>)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	6013      	str	r3, [r2, #0]
}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd90      	pop	{r4, r7, pc}
 80017e8:	200003e0 	.word	0x200003e0
 80017ec:	200001a8 	.word	0x200001a8
 80017f0:	0800f2a8 	.word	0x0800f2a8
 80017f4:	200034ec 	.word	0x200034ec
 80017f8:	200035b4 	.word	0x200035b4
 80017fc:	200034e4 	.word	0x200034e4

08001800 <save_data_file>:

//Fungsi save data ke file.txt (setelah di convert)
void save_data_file(char *namafile, dataInput datatulis){
 8001800:	b084      	sub	sp, #16
 8001802:	b580      	push	{r7, lr}
 8001804:	b086      	sub	sp, #24
 8001806:	af02      	add	r7, sp, #8
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	f107 001c 	add.w	r0, r7, #28
 800180e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	  res = f_open(&MyFile, namafile, FA_CREATE_ALWAYS|FA_WRITE);
 8001812:	220a      	movs	r2, #10
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	4823      	ldr	r0, [pc, #140]	; (80018a4 <save_data_file+0xa4>)
 8001818:	f009 ffd0 	bl	800b7bc <f_open>
 800181c:	4603      	mov	r3, r0
 800181e:	461a      	mov	r2, r3
 8001820:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <save_data_file+0xa8>)
 8001822:	701a      	strb	r2, [r3, #0]
	  if(res != FR_OK){
 8001824:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <save_data_file+0xa8>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <save_data_file+0x30>
		  error1();
 800182c:	f000 fc40 	bl	80020b0 <error1>
	  }

	  res = f_lseek(&MyFile, f_size(&MyFile));
 8001830:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <save_data_file+0xa4>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	4619      	mov	r1, r3
 8001836:	481b      	ldr	r0, [pc, #108]	; (80018a4 <save_data_file+0xa4>)
 8001838:	f00a fdd3 	bl	800c3e2 <f_lseek>
 800183c:	4603      	mov	r3, r0
 800183e:	461a      	mov	r2, r3
 8001840:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <save_data_file+0xa8>)
 8001842:	701a      	strb	r2, [r3, #0]
	  if(res != FR_OK){
 8001844:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <save_data_file+0xa8>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <save_data_file+0x50>
		  error1();
 800184c:	f000 fc30 	bl	80020b0 <error1>
	  }
    for (int i = 0;i < (datatulis.ndata+1);i++){
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	e018      	b.n	8001888 <save_data_file+0x88>
		f_printf(&MyFile, "%s %s %s \n",  datatulis.Input1[i], datatulis.Input2[i],datatulis.Input3[i]);
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	6819      	ldr	r1, [r3, #0]
 8001860:	6a3a      	ldr	r2, [r7, #32]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	6818      	ldr	r0, [r3, #0]
 800186a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	4603      	mov	r3, r0
 8001878:	460a      	mov	r2, r1
 800187a:	490c      	ldr	r1, [pc, #48]	; (80018ac <save_data_file+0xac>)
 800187c:	4809      	ldr	r0, [pc, #36]	; (80018a4 <save_data_file+0xa4>)
 800187e:	f00b f86d 	bl	800c95c <f_printf>
    for (int i = 0;i < (datatulis.ndata+1);i++){
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	3301      	adds	r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	429a      	cmp	r2, r3
 800188e:	dde2      	ble.n	8001856 <save_data_file+0x56>
	}
	  f_close(&MyFile);
 8001890:	4804      	ldr	r0, [pc, #16]	; (80018a4 <save_data_file+0xa4>)
 8001892:	f00a fd7c 	bl	800c38e <f_close>
}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018a0:	b004      	add	sp, #16
 80018a2:	4770      	bx	lr
 80018a4:	200003e0 	.word	0x200003e0
 80018a8:	200001a8 	.word	0x200001a8
 80018ac:	0800f2c0 	.word	0x0800f2c0

080018b0 <soal1>:

/*=================================Fungsi proses soal1-5=============================*/
void soal1()
{
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b089      	sub	sp, #36	; 0x24
 80018b4:	af02      	add	r7, sp, #8
	read_file("data.txt");
 80018b6:	4836      	ldr	r0, [pc, #216]	; (8001990 <soal1+0xe0>)
 80018b8:	f7ff ff20 	bl	80016fc <read_file>

	get_data_from_rawdata();
 80018bc:	f00b fcb2 	bl	800d224 <get_data_from_rawdata>
	dataInput dataBaca;
	dataBaca.Input1 = calloc(999,sizeof(char));
 80018c0:	2101      	movs	r1, #1
 80018c2:	f240 30e7 	movw	r0, #999	; 0x3e7
 80018c6:	f00b fddf 	bl	800d488 <calloc>
 80018ca:	4603      	mov	r3, r0
 80018cc:	607b      	str	r3, [r7, #4]
	dataBaca.Input2 = calloc(999,sizeof(char));
 80018ce:	2101      	movs	r1, #1
 80018d0:	f240 30e7 	movw	r0, #999	; 0x3e7
 80018d4:	f00b fdd8 	bl	800d488 <calloc>
 80018d8:	4603      	mov	r3, r0
 80018da:	60bb      	str	r3, [r7, #8]
	dataBaca.Input3 = calloc(999,sizeof(char));
 80018dc:	2101      	movs	r1, #1
 80018de:	f240 30e7 	movw	r0, #999	; 0x3e7
 80018e2:	f00b fdd1 	bl	800d488 <calloc>
 80018e6:	4603      	mov	r3, r0
 80018e8:	60fb      	str	r3, [r7, #12]

	for(int i=0;i<number_data+1;i++){
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	e029      	b.n	8001944 <soal1+0x94>
		dataBaca.Input1[i]=IntToStr(datainput_1[i]);
 80018f0:	4a28      	ldr	r2, [pc, #160]	; (8001994 <soal1+0xe4>)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	18d4      	adds	r4, r2, r3
 8001900:	4608      	mov	r0, r1
 8001902:	f00b fcf5 	bl	800d2f0 <IntToStr>
 8001906:	4603      	mov	r3, r0
 8001908:	6023      	str	r3, [r4, #0]
		dataBaca.Input2[i]=IntToStr(datainput_2[i]);
 800190a:	4a23      	ldr	r2, [pc, #140]	; (8001998 <soal1+0xe8>)
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	18d4      	adds	r4, r2, r3
 800191a:	4608      	mov	r0, r1
 800191c:	f00b fce8 	bl	800d2f0 <IntToStr>
 8001920:	4603      	mov	r3, r0
 8001922:	6023      	str	r3, [r4, #0]
		dataBaca.Input3[i]=IntToStr(datainput_3[i]);
 8001924:	4a1d      	ldr	r2, [pc, #116]	; (800199c <soal1+0xec>)
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	18d4      	adds	r4, r2, r3
 8001934:	4608      	mov	r0, r1
 8001936:	f00b fcdb 	bl	800d2f0 <IntToStr>
 800193a:	4603      	mov	r3, r0
 800193c:	6023      	str	r3, [r4, #0]
	for(int i=0;i<number_data+1;i++){
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	3301      	adds	r3, #1
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <soal1+0xf0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	429a      	cmp	r2, r3
 800194c:	ddd0      	ble.n	80018f0 <soal1+0x40>
	}
	dataBaca.ndata = number_data;
 800194e:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <soal1+0xf0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	613b      	str	r3, [r7, #16]

	save_data_file("data_copy1.txt",dataBaca);
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800195c:	4811      	ldr	r0, [pc, #68]	; (80019a4 <soal1+0xf4>)
 800195e:	f7ff ff4f 	bl	8001800 <save_data_file>

	free(dataBaca.Input1),dataBaca.Input1=NULL;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4618      	mov	r0, r3
 8001966:	f00b fdc9 	bl	800d4fc <free>
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
	free(dataBaca.Input2),dataBaca.Input2=NULL;
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	4618      	mov	r0, r3
 8001972:	f00b fdc3 	bl	800d4fc <free>
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
	free(dataBaca.Input3),dataBaca.Input3=NULL;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4618      	mov	r0, r3
 800197e:	f00b fdbd 	bl	800d4fc <free>
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
}
 8001986:	bf00      	nop
 8001988:	371c      	adds	r7, #28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd90      	pop	{r4, r7, pc}
 800198e:	bf00      	nop
 8001990:	0800f2cc 	.word	0x0800f2cc
 8001994:	20000610 	.word	0x20000610
 8001998:	200015ac 	.word	0x200015ac
 800199c:	20002548 	.word	0x20002548
 80019a0:	200034e4 	.word	0x200034e4
 80019a4:	0800f2d8 	.word	0x0800f2d8

080019a8 <soal2>:

void soal2()
{
 80019a8:	b590      	push	{r4, r7, lr}
 80019aa:	b089      	sub	sp, #36	; 0x24
 80019ac:	af02      	add	r7, sp, #8
	read_file("data.txt");
 80019ae:	4835      	ldr	r0, [pc, #212]	; (8001a84 <soal2+0xdc>)
 80019b0:	f7ff fea4 	bl	80016fc <read_file>
	printf("jumlah data = %d\n",number_data);
 80019b4:	4b34      	ldr	r3, [pc, #208]	; (8001a88 <soal2+0xe0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4619      	mov	r1, r3
 80019ba:	4834      	ldr	r0, [pc, #208]	; (8001a8c <soal2+0xe4>)
 80019bc:	f00b fea4 	bl	800d708 <iprintf>

	get_data_from_rawdata();
 80019c0:	f00b fc30 	bl	800d224 <get_data_from_rawdata>
	dataInput dataBaca;
	dataBaca.Input1 = calloc(9999,sizeof(char));
 80019c4:	2101      	movs	r1, #1
 80019c6:	f242 700f 	movw	r0, #9999	; 0x270f
 80019ca:	f00b fd5d 	bl	800d488 <calloc>
 80019ce:	4603      	mov	r3, r0
 80019d0:	607b      	str	r3, [r7, #4]
	dataBaca.Input2 = calloc(9999,sizeof(char));
 80019d2:	2101      	movs	r1, #1
 80019d4:	f242 700f 	movw	r0, #9999	; 0x270f
 80019d8:	f00b fd56 	bl	800d488 <calloc>
 80019dc:	4603      	mov	r3, r0
 80019de:	60bb      	str	r3, [r7, #8]
	dataBaca.Input3 = calloc(9999,sizeof(char));
 80019e0:	2101      	movs	r1, #1
 80019e2:	f242 700f 	movw	r0, #9999	; 0x270f
 80019e6:	f00b fd4f 	bl	800d488 <calloc>
 80019ea:	4603      	mov	r3, r0
 80019ec:	60fb      	str	r3, [r7, #12]

	for(int i=0;i<number_data+1;i++){
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	e022      	b.n	8001a3a <soal2+0x92>
		dataBaca.Input1[i]=IntToStr(datainput_1[i]);
 80019f4:	4a26      	ldr	r2, [pc, #152]	; (8001a90 <soal2+0xe8>)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	18d4      	adds	r4, r2, r3
 8001a04:	4608      	mov	r0, r1
 8001a06:	f00b fc73 	bl	800d2f0 <IntToStr>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	6023      	str	r3, [r4, #0]
		dataBaca.Input2[i]=",";
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	4a1f      	ldr	r2, [pc, #124]	; (8001a94 <soal2+0xec>)
 8001a18:	601a      	str	r2, [r3, #0]
		dataBaca.Input3[i]=IntToStr(datainput_3[i]);
 8001a1a:	4a1f      	ldr	r2, [pc, #124]	; (8001a98 <soal2+0xf0>)
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	18d4      	adds	r4, r2, r3
 8001a2a:	4608      	mov	r0, r1
 8001a2c:	f00b fc60 	bl	800d2f0 <IntToStr>
 8001a30:	4603      	mov	r3, r0
 8001a32:	6023      	str	r3, [r4, #0]
	for(int i=0;i<number_data+1;i++){
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	3301      	adds	r3, #1
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <soal2+0xe0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	ddd7      	ble.n	80019f4 <soal2+0x4c>
	}
	dataBaca.ndata = number_data;
 8001a44:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <soal2+0xe0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	613b      	str	r3, [r7, #16]

	save_data_file("data_copy2.txt",dataBaca);
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a52:	4812      	ldr	r0, [pc, #72]	; (8001a9c <soal2+0xf4>)
 8001a54:	f7ff fed4 	bl	8001800 <save_data_file>

	free(dataBaca.Input1),dataBaca.Input1=NULL;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f00b fd4e 	bl	800d4fc <free>
 8001a60:	2300      	movs	r3, #0
 8001a62:	607b      	str	r3, [r7, #4]
	free(dataBaca.Input2),dataBaca.Input2=NULL;
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f00b fd48 	bl	800d4fc <free>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60bb      	str	r3, [r7, #8]
	free(dataBaca.Input3),dataBaca.Input3=NULL;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f00b fd42 	bl	800d4fc <free>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
}
 8001a7c:	bf00      	nop
 8001a7e:	371c      	adds	r7, #28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd90      	pop	{r4, r7, pc}
 8001a84:	0800f2cc 	.word	0x0800f2cc
 8001a88:	200034e4 	.word	0x200034e4
 8001a8c:	0800f2e8 	.word	0x0800f2e8
 8001a90:	20000610 	.word	0x20000610
 8001a94:	0800f2fc 	.word	0x0800f2fc
 8001a98:	20002548 	.word	0x20002548
 8001a9c:	0800f300 	.word	0x0800f300

08001aa0 <soal3>:

void soal3()
{
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b08b      	sub	sp, #44	; 0x2c
 8001aa4:	af02      	add	r7, sp, #8
	read_file("data.txt");
 8001aa6:	488c      	ldr	r0, [pc, #560]	; (8001cd8 <soal3+0x238>)
 8001aa8:	f7ff fe28 	bl	80016fc <read_file>
	printf("jumlah data = %d\n",number_data);
 8001aac:	4b8b      	ldr	r3, [pc, #556]	; (8001cdc <soal3+0x23c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	488b      	ldr	r0, [pc, #556]	; (8001ce0 <soal3+0x240>)
 8001ab4:	f00b fe28 	bl	800d708 <iprintf>

	get_data_from_rawdata();
 8001ab8:	f00b fbb4 	bl	800d224 <get_data_from_rawdata>
	dataInput dataBaca;
	dataBaca.Input1 = calloc(9999,sizeof(char));
 8001abc:	2101      	movs	r1, #1
 8001abe:	f242 700f 	movw	r0, #9999	; 0x270f
 8001ac2:	f00b fce1 	bl	800d488 <calloc>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	603b      	str	r3, [r7, #0]
	dataBaca.Input2 = calloc(9999,sizeof(char));
 8001aca:	2101      	movs	r1, #1
 8001acc:	f242 700f 	movw	r0, #9999	; 0x270f
 8001ad0:	f00b fcda 	bl	800d488 <calloc>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	607b      	str	r3, [r7, #4]
	dataBaca.Input3 = calloc(9999,sizeof(char));
 8001ad8:	2101      	movs	r1, #1
 8001ada:	f242 700f 	movw	r0, #9999	; 0x270f
 8001ade:	f00b fcd3 	bl	800d488 <calloc>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	60bb      	str	r3, [r7, #8]
	int count1=0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
	int count2=0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61bb      	str	r3, [r7, #24]
	for(int i=0;i<number_data+1;i++){
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	e09e      	b.n	8001c32 <soal3+0x192>
		if(isGanjil(datainput_1[i])==0){
 8001af4:	4a7b      	ldr	r2, [pc, #492]	; (8001ce4 <soal3+0x244>)
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f00b fc8f 	bl	800d420 <isGanjil>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10f      	bne.n	8001b28 <soal3+0x88>
			count1++;
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	61fb      	str	r3, [r7, #28]
			dataBaca.Input1[count1] = IntToStr(datainput_1[i]);
 8001b0e:	4a75      	ldr	r2, [pc, #468]	; (8001ce4 <soal3+0x244>)
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	18d4      	adds	r4, r2, r3
 8001b1e:	4608      	mov	r0, r1
 8001b20:	f00b fbe6 	bl	800d2f0 <IntToStr>
 8001b24:	4603      	mov	r3, r0
 8001b26:	6023      	str	r3, [r4, #0]
		}
		if(isGanjil(datainput_2[i])==0){
 8001b28:	4a6f      	ldr	r2, [pc, #444]	; (8001ce8 <soal3+0x248>)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f00b fc75 	bl	800d420 <isGanjil>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10f      	bne.n	8001b5c <soal3+0xbc>
			count1++;
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	61fb      	str	r3, [r7, #28]
			dataBaca.Input1[count1] = IntToStr(datainput_2[i]);
 8001b42:	4a69      	ldr	r2, [pc, #420]	; (8001ce8 <soal3+0x248>)
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	18d4      	adds	r4, r2, r3
 8001b52:	4608      	mov	r0, r1
 8001b54:	f00b fbcc 	bl	800d2f0 <IntToStr>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	6023      	str	r3, [r4, #0]
		}
		if(isGanjil(datainput_3[i])==0){
 8001b5c:	4a63      	ldr	r2, [pc, #396]	; (8001cec <soal3+0x24c>)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f00b fc5b 	bl	800d420 <isGanjil>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10f      	bne.n	8001b90 <soal3+0xf0>
			count1++;
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	3301      	adds	r3, #1
 8001b74:	61fb      	str	r3, [r7, #28]
			dataBaca.Input1[count1] = IntToStr(datainput_3[i]);
 8001b76:	4a5d      	ldr	r2, [pc, #372]	; (8001cec <soal3+0x24c>)
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	18d4      	adds	r4, r2, r3
 8001b86:	4608      	mov	r0, r1
 8001b88:	f00b fbb2 	bl	800d2f0 <IntToStr>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	6023      	str	r3, [r4, #0]
		}

		if(isGanjil(datainput_1[i])==1){
 8001b90:	4a54      	ldr	r2, [pc, #336]	; (8001ce4 <soal3+0x244>)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f00b fc41 	bl	800d420 <isGanjil>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d10f      	bne.n	8001bc4 <soal3+0x124>
			count2++;
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	61bb      	str	r3, [r7, #24]
			dataBaca.Input2[count2] = IntToStr(datainput_1[i]);
 8001baa:	4a4e      	ldr	r2, [pc, #312]	; (8001ce4 <soal3+0x244>)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	18d4      	adds	r4, r2, r3
 8001bba:	4608      	mov	r0, r1
 8001bbc:	f00b fb98 	bl	800d2f0 <IntToStr>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	6023      	str	r3, [r4, #0]
		}
		if(isGanjil(datainput_2[i])==1){
 8001bc4:	4a48      	ldr	r2, [pc, #288]	; (8001ce8 <soal3+0x248>)
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f00b fc27 	bl	800d420 <isGanjil>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d10f      	bne.n	8001bf8 <soal3+0x158>
			count2++;
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	61bb      	str	r3, [r7, #24]
			dataBaca.Input2[count2] = IntToStr(datainput_2[i]);
 8001bde:	4a42      	ldr	r2, [pc, #264]	; (8001ce8 <soal3+0x248>)
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	18d4      	adds	r4, r2, r3
 8001bee:	4608      	mov	r0, r1
 8001bf0:	f00b fb7e 	bl	800d2f0 <IntToStr>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	6023      	str	r3, [r4, #0]
		}
		if(isGanjil(datainput_3[i])==1){
 8001bf8:	4a3c      	ldr	r2, [pc, #240]	; (8001cec <soal3+0x24c>)
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f00b fc0d 	bl	800d420 <isGanjil>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d10f      	bne.n	8001c2c <soal3+0x18c>
			count2++;
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	61bb      	str	r3, [r7, #24]
			dataBaca.Input2[count2] = IntToStr(datainput_3[i]);
 8001c12:	4a36      	ldr	r2, [pc, #216]	; (8001cec <soal3+0x24c>)
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	18d4      	adds	r4, r2, r3
 8001c22:	4608      	mov	r0, r1
 8001c24:	f00b fb64 	bl	800d2f0 <IntToStr>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	6023      	str	r3, [r4, #0]
	for(int i=0;i<number_data+1;i++){
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	4b2a      	ldr	r3, [pc, #168]	; (8001cdc <soal3+0x23c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	f77f af5b 	ble.w	8001af4 <soal3+0x54>
		}
	}

	dataBaca.ndata = (count1 > count2 ? count1 : count2);
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	4293      	cmp	r3, r2
 8001c44:	bfb8      	it	lt
 8001c46:	4613      	movlt	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]

	for(int i=0;i<dataBaca.ndata+1;i++){
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	e022      	b.n	8001c96 <soal3+0x1f6>
		if(dataBaca.Input1[i]==NULL){dataBaca.Input1[i]="";}
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d105      	bne.n	8001c6a <soal3+0x1ca>
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	4a22      	ldr	r2, [pc, #136]	; (8001cf0 <soal3+0x250>)
 8001c68:	601a      	str	r2, [r3, #0]
		if(dataBaca.Input2[i]==NULL){dataBaca.Input2[i]="";}
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d105      	bne.n	8001c84 <soal3+0x1e4>
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	4a1b      	ldr	r2, [pc, #108]	; (8001cf0 <soal3+0x250>)
 8001c82:	601a      	str	r2, [r3, #0]
		dataBaca.Input3[i]="";
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	4a18      	ldr	r2, [pc, #96]	; (8001cf0 <soal3+0x250>)
 8001c8e:	601a      	str	r2, [r3, #0]
	for(int i=0;i<dataBaca.ndata+1;i++){
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	3301      	adds	r3, #1
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	ddd8      	ble.n	8001c50 <soal3+0x1b0>
	}

	save_data_file("data_copy3.txt",dataBaca);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ca6:	4813      	ldr	r0, [pc, #76]	; (8001cf4 <soal3+0x254>)
 8001ca8:	f7ff fdaa 	bl	8001800 <save_data_file>

	free(dataBaca.Input1),dataBaca.Input1=NULL;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f00b fc24 	bl	800d4fc <free>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	603b      	str	r3, [r7, #0]
	free(dataBaca.Input2),dataBaca.Input2=NULL;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f00b fc1e 	bl	800d4fc <free>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	607b      	str	r3, [r7, #4]
	free(dataBaca.Input3),dataBaca.Input3=NULL;
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f00b fc18 	bl	800d4fc <free>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60bb      	str	r3, [r7, #8]
}
 8001cd0:	bf00      	nop
 8001cd2:	3724      	adds	r7, #36	; 0x24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd90      	pop	{r4, r7, pc}
 8001cd8:	0800f2cc 	.word	0x0800f2cc
 8001cdc:	200034e4 	.word	0x200034e4
 8001ce0:	0800f2e8 	.word	0x0800f2e8
 8001ce4:	20000610 	.word	0x20000610
 8001ce8:	200015ac 	.word	0x200015ac
 8001cec:	20002548 	.word	0x20002548
 8001cf0:	0800f284 	.word	0x0800f284
 8001cf4:	0800f310 	.word	0x0800f310

08001cf8 <soal4>:

void soal4()
{
 8001cf8:	b590      	push	{r4, r7, lr}
 8001cfa:	b08b      	sub	sp, #44	; 0x2c
 8001cfc:	af02      	add	r7, sp, #8
	read_file("data.txt");
 8001cfe:	484f      	ldr	r0, [pc, #316]	; (8001e3c <soal4+0x144>)
 8001d00:	f7ff fcfc 	bl	80016fc <read_file>
	printf("jumlah data = %d\n",number_data);
 8001d04:	4b4e      	ldr	r3, [pc, #312]	; (8001e40 <soal4+0x148>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	484e      	ldr	r0, [pc, #312]	; (8001e44 <soal4+0x14c>)
 8001d0c:	f00b fcfc 	bl	800d708 <iprintf>

	get_data_from_rawdata();
 8001d10:	f00b fa88 	bl	800d224 <get_data_from_rawdata>
	dataInput dataBaca;
	dataBaca.Input1 = calloc(9999,sizeof(char));
 8001d14:	2101      	movs	r1, #1
 8001d16:	f242 700f 	movw	r0, #9999	; 0x270f
 8001d1a:	f00b fbb5 	bl	800d488 <calloc>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	607b      	str	r3, [r7, #4]
	dataBaca.Input2 = calloc(9999,sizeof(char));
 8001d22:	2101      	movs	r1, #1
 8001d24:	f242 700f 	movw	r0, #9999	; 0x270f
 8001d28:	f00b fbae 	bl	800d488 <calloc>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	60bb      	str	r3, [r7, #8]
	dataBaca.Input3 = calloc(9999,sizeof(char));
 8001d30:	2101      	movs	r1, #1
 8001d32:	f242 700f 	movw	r0, #9999	; 0x270f
 8001d36:	f00b fba7 	bl	800d488 <calloc>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	60fb      	str	r3, [r7, #12]

	int count=0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
	for(int i=0;i<number_data+1;i++){
 8001d42:	2300      	movs	r3, #0
 8001d44:	61bb      	str	r3, [r7, #24]
 8001d46:	e032      	b.n	8001dae <soal4+0xb6>
		count++;
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	61fb      	str	r3, [r7, #28]
		dataBaca.Input1[count]=IntToStr(datainput_1[i]);
 8001d4e:	4a3e      	ldr	r2, [pc, #248]	; (8001e48 <soal4+0x150>)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	18d4      	adds	r4, r2, r3
 8001d5e:	4608      	mov	r0, r1
 8001d60:	f00b fac6 	bl	800d2f0 <IntToStr>
 8001d64:	4603      	mov	r3, r0
 8001d66:	6023      	str	r3, [r4, #0]
		count++;
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	61fb      	str	r3, [r7, #28]
		dataBaca.Input1[count]=IntToStr(datainput_2[i]);
 8001d6e:	4a37      	ldr	r2, [pc, #220]	; (8001e4c <soal4+0x154>)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	18d4      	adds	r4, r2, r3
 8001d7e:	4608      	mov	r0, r1
 8001d80:	f00b fab6 	bl	800d2f0 <IntToStr>
 8001d84:	4603      	mov	r3, r0
 8001d86:	6023      	str	r3, [r4, #0]
		count++;
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	61fb      	str	r3, [r7, #28]
		dataBaca.Input1[count]=IntToStr(datainput_3[i]);
 8001d8e:	4a30      	ldr	r2, [pc, #192]	; (8001e50 <soal4+0x158>)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	18d4      	adds	r4, r2, r3
 8001d9e:	4608      	mov	r0, r1
 8001da0:	f00b faa6 	bl	800d2f0 <IntToStr>
 8001da4:	4603      	mov	r3, r0
 8001da6:	6023      	str	r3, [r4, #0]
	for(int i=0;i<number_data+1;i++){
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	3301      	adds	r3, #1
 8001dac:	61bb      	str	r3, [r7, #24]
 8001dae:	4b24      	ldr	r3, [pc, #144]	; (8001e40 <soal4+0x148>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	ddc7      	ble.n	8001d48 <soal4+0x50>
	}
	dataBaca.ndata = count;
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	613b      	str	r3, [r7, #16]
	for(int i=0;i<dataBaca.ndata+1;i++){
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	e01b      	b.n	8001dfa <soal4+0x102>
		if(dataBaca.Input1[i]==NULL){dataBaca.Input1[i]="";}
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d105      	bne.n	8001ddc <soal4+0xe4>
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	4a1e      	ldr	r2, [pc, #120]	; (8001e54 <soal4+0x15c>)
 8001dda:	601a      	str	r2, [r3, #0]
		dataBaca.Input2[i]="";
 8001ddc:	68ba      	ldr	r2, [r7, #8]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	4a1b      	ldr	r2, [pc, #108]	; (8001e54 <soal4+0x15c>)
 8001de6:	601a      	str	r2, [r3, #0]
		dataBaca.Input3[i]="";
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	4a18      	ldr	r2, [pc, #96]	; (8001e54 <soal4+0x15c>)
 8001df2:	601a      	str	r2, [r3, #0]
	for(int i=0;i<dataBaca.ndata+1;i++){
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	3301      	adds	r3, #1
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	dddf      	ble.n	8001dc2 <soal4+0xca>
	}

	save_data_file("data_copy4.txt",dataBaca);
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	1d3b      	adds	r3, r7, #4
 8001e08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e0a:	4813      	ldr	r0, [pc, #76]	; (8001e58 <soal4+0x160>)
 8001e0c:	f7ff fcf8 	bl	8001800 <save_data_file>

	free(dataBaca.Input1),dataBaca.Input1=NULL;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f00b fb72 	bl	800d4fc <free>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	607b      	str	r3, [r7, #4]
	free(dataBaca.Input2),dataBaca.Input2=NULL;
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f00b fb6c 	bl	800d4fc <free>
 8001e24:	2300      	movs	r3, #0
 8001e26:	60bb      	str	r3, [r7, #8]
	free(dataBaca.Input3),dataBaca.Input3=NULL;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f00b fb66 	bl	800d4fc <free>
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
}
 8001e34:	bf00      	nop
 8001e36:	3724      	adds	r7, #36	; 0x24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd90      	pop	{r4, r7, pc}
 8001e3c:	0800f2cc 	.word	0x0800f2cc
 8001e40:	200034e4 	.word	0x200034e4
 8001e44:	0800f2e8 	.word	0x0800f2e8
 8001e48:	20000610 	.word	0x20000610
 8001e4c:	200015ac 	.word	0x200015ac
 8001e50:	20002548 	.word	0x20002548
 8001e54:	0800f284 	.word	0x0800f284
 8001e58:	0800f320 	.word	0x0800f320

08001e5c <soal5>:

void soal5()
{
 8001e5c:	b590      	push	{r4, r7, lr}
 8001e5e:	b08b      	sub	sp, #44	; 0x2c
 8001e60:	af02      	add	r7, sp, #8
	read_file("data.txt");
 8001e62:	4875      	ldr	r0, [pc, #468]	; (8002038 <soal5+0x1dc>)
 8001e64:	f7ff fc4a 	bl	80016fc <read_file>
	printf("jumlah data = %d\n",number_data);
 8001e68:	4b74      	ldr	r3, [pc, #464]	; (800203c <soal5+0x1e0>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4874      	ldr	r0, [pc, #464]	; (8002040 <soal5+0x1e4>)
 8001e70:	f00b fc4a 	bl	800d708 <iprintf>

	get_data_from_rawdata();
 8001e74:	f00b f9d6 	bl	800d224 <get_data_from_rawdata>
	dataInput dataBaca;
	dataBaca.Input1 = calloc(9999,sizeof(char));
 8001e78:	2101      	movs	r1, #1
 8001e7a:	f242 700f 	movw	r0, #9999	; 0x270f
 8001e7e:	f00b fb03 	bl	800d488 <calloc>
 8001e82:	4603      	mov	r3, r0
 8001e84:	607b      	str	r3, [r7, #4]
	dataBaca.Input2 = calloc(9999,sizeof(char));
 8001e86:	2101      	movs	r1, #1
 8001e88:	f242 700f 	movw	r0, #9999	; 0x270f
 8001e8c:	f00b fafc 	bl	800d488 <calloc>
 8001e90:	4603      	mov	r3, r0
 8001e92:	60bb      	str	r3, [r7, #8]
	dataBaca.Input3 = calloc(9999,sizeof(char));
 8001e94:	2101      	movs	r1, #1
 8001e96:	f242 700f 	movw	r0, #9999	; 0x270f
 8001e9a:	f00b faf5 	bl	800d488 <calloc>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	60fb      	str	r3, [r7, #12]

	int count=0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
	for(int i=0;i<number_data+1;i++){
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61bb      	str	r3, [r7, #24]
 8001eaa:	e032      	b.n	8001f12 <soal5+0xb6>
		count++;
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	61fb      	str	r3, [r7, #28]
		dataBaca.Input1[count]=IntToStr(datainput_1[i]);
 8001eb2:	4a64      	ldr	r2, [pc, #400]	; (8002044 <soal5+0x1e8>)
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	18d4      	adds	r4, r2, r3
 8001ec2:	4608      	mov	r0, r1
 8001ec4:	f00b fa14 	bl	800d2f0 <IntToStr>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	6023      	str	r3, [r4, #0]
		count++;
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	61fb      	str	r3, [r7, #28]
		dataBaca.Input1[count]=IntToStr(datainput_2[i]);
 8001ed2:	4a5d      	ldr	r2, [pc, #372]	; (8002048 <soal5+0x1ec>)
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	18d4      	adds	r4, r2, r3
 8001ee2:	4608      	mov	r0, r1
 8001ee4:	f00b fa04 	bl	800d2f0 <IntToStr>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	6023      	str	r3, [r4, #0]
		count++;
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	61fb      	str	r3, [r7, #28]
		dataBaca.Input1[count]=IntToStr(datainput_3[i]);
 8001ef2:	4a56      	ldr	r2, [pc, #344]	; (800204c <soal5+0x1f0>)
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	18d4      	adds	r4, r2, r3
 8001f02:	4608      	mov	r0, r1
 8001f04:	f00b f9f4 	bl	800d2f0 <IntToStr>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	6023      	str	r3, [r4, #0]
	for(int i=0;i<number_data+1;i++){
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	61bb      	str	r3, [r7, #24]
 8001f12:	4b4a      	ldr	r3, [pc, #296]	; (800203c <soal5+0x1e0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	ddc7      	ble.n	8001eac <soal5+0x50>
	}
	dataBaca.ndata = count;
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	613b      	str	r3, [r7, #16]
	for(int i=0;i<dataBaca.ndata+1;i++){
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	e067      	b.n	8001ff6 <soal5+0x19a>
		if(dataBaca.Input1[i]==NULL){dataBaca.Input1[i]="";}
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d105      	bne.n	8001f40 <soal5+0xe4>
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	4a44      	ldr	r2, [pc, #272]	; (8002050 <soal5+0x1f4>)
 8001f3e:	601a      	str	r2, [r3, #0]
		dataBaca.Input2[i]="";
 8001f40:	68ba      	ldr	r2, [r7, #8]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	4a41      	ldr	r2, [pc, #260]	; (8002050 <soal5+0x1f4>)
 8001f4a:	601a      	str	r2, [r3, #0]
		dataBaca.Input3[i]="";
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	4a3e      	ldr	r2, [pc, #248]	; (8002050 <soal5+0x1f4>)
 8001f56:	601a      	str	r2, [r3, #0]

		if(isGanjil(atoi(dataBaca.Input1[i]))==1 && atoi(dataBaca.Input1[i]) > 5){dataBaca.Input1[i]="ganjil > 5";}
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f00b fa8c 	bl	800d480 <atoi>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f00b fa58 	bl	800d420 <isGanjil>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d111      	bne.n	8001f9a <soal5+0x13e>
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f00b fa7d 	bl	800d480 <atoi>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b05      	cmp	r3, #5
 8001f8a:	dd06      	ble.n	8001f9a <soal5+0x13e>
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	4a2f      	ldr	r2, [pc, #188]	; (8002054 <soal5+0x1f8>)
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	e02a      	b.n	8001ff0 <soal5+0x194>
		else if(isGanjil(atoi(dataBaca.Input1[i]))==0 && atoi(dataBaca.Input1[i]) > 5){dataBaca.Input1[i]="genap > 5";}
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f00b fa6b 	bl	800d480 <atoi>
 8001faa:	4603      	mov	r3, r0
 8001fac:	4618      	mov	r0, r3
 8001fae:	f00b fa37 	bl	800d420 <isGanjil>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d111      	bne.n	8001fdc <soal5+0x180>
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f00b fa5c 	bl	800d480 <atoi>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b05      	cmp	r3, #5
 8001fcc:	dd06      	ble.n	8001fdc <soal5+0x180>
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	4a20      	ldr	r2, [pc, #128]	; (8002058 <soal5+0x1fc>)
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	e009      	b.n	8001ff0 <soal5+0x194>
		else{dataBaca.Input1[i]=dataBaca.Input1[i];}
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	441a      	add	r2, r3
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	440b      	add	r3, r1
 8001fec:	6812      	ldr	r2, [r2, #0]
 8001fee:	601a      	str	r2, [r3, #0]
	for(int i=0;i<dataBaca.ndata+1;i++){
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	dd93      	ble.n	8001f26 <soal5+0xca>
	}

	save_data_file("data_copy5.txt",dataBaca);
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	1d3b      	adds	r3, r7, #4
 8002004:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002006:	4815      	ldr	r0, [pc, #84]	; (800205c <soal5+0x200>)
 8002008:	f7ff fbfa 	bl	8001800 <save_data_file>

	free(dataBaca.Input1),dataBaca.Input1=NULL;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4618      	mov	r0, r3
 8002010:	f00b fa74 	bl	800d4fc <free>
 8002014:	2300      	movs	r3, #0
 8002016:	607b      	str	r3, [r7, #4]
	free(dataBaca.Input2),dataBaca.Input2=NULL;
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	4618      	mov	r0, r3
 800201c:	f00b fa6e 	bl	800d4fc <free>
 8002020:	2300      	movs	r3, #0
 8002022:	60bb      	str	r3, [r7, #8]
	free(dataBaca.Input3),dataBaca.Input3=NULL;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4618      	mov	r0, r3
 8002028:	f00b fa68 	bl	800d4fc <free>
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]
}
 8002030:	bf00      	nop
 8002032:	3724      	adds	r7, #36	; 0x24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd90      	pop	{r4, r7, pc}
 8002038:	0800f2cc 	.word	0x0800f2cc
 800203c:	200034e4 	.word	0x200034e4
 8002040:	0800f2e8 	.word	0x0800f2e8
 8002044:	20000610 	.word	0x20000610
 8002048:	200015ac 	.word	0x200015ac
 800204c:	20002548 	.word	0x20002548
 8002050:	0800f284 	.word	0x0800f284
 8002054:	0800f330 	.word	0x0800f330
 8002058:	0800f33c 	.word	0x0800f33c
 800205c:	0800f348 	.word	0x0800f348

08002060 <reset>:
/*==============================================END OF Fungsi proses soal1-5==================================*/

//System Reset (restart Hardware) via push reset
//mengembalikan sistem ke posisi awal
void reset(){
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
	BSP_TS_GetState(&ts);
 8002064:	4810      	ldr	r0, [pc, #64]	; (80020a8 <reset+0x48>)
 8002066:	f006 ffcd 	bl	8009004 <BSP_TS_GetState>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800206a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800206e:	f006 fa29 	bl	80084c4 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(0, 150, (uint8_t *)"RESET", CENTER_MODE);
 8002072:	2301      	movs	r3, #1
 8002074:	4a0d      	ldr	r2, [pc, #52]	; (80020ac <reset+0x4c>)
 8002076:	2196      	movs	r1, #150	; 0x96
 8002078:	2000      	movs	r0, #0
 800207a:	f006 fac3 	bl	8008604 <BSP_LCD_DisplayStringAt>
	if (ts.touchX[0] >= 180 && ts.touchX[0] <= 300 && ts.touchY[0] >= 140 && ts.touchY[0] <= 170){
 800207e:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <reset+0x48>)
 8002080:	885b      	ldrh	r3, [r3, #2]
 8002082:	2bb3      	cmp	r3, #179	; 0xb3
 8002084:	d90e      	bls.n	80020a4 <reset+0x44>
 8002086:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <reset+0x48>)
 8002088:	885b      	ldrh	r3, [r3, #2]
 800208a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800208e:	d809      	bhi.n	80020a4 <reset+0x44>
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <reset+0x48>)
 8002092:	899b      	ldrh	r3, [r3, #12]
 8002094:	2b8b      	cmp	r3, #139	; 0x8b
 8002096:	d905      	bls.n	80020a4 <reset+0x44>
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <reset+0x48>)
 800209a:	899b      	ldrh	r3, [r3, #12]
 800209c:	2baa      	cmp	r3, #170	; 0xaa
 800209e:	d801      	bhi.n	80020a4 <reset+0x44>
		NVIC_SystemReset(); // Reset System
 80020a0:	f7fe ff0e 	bl	8000ec0 <__NVIC_SystemReset>
	}
}
 80020a4:	bf00      	nop
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	2003422c 	.word	0x2003422c
 80020ac:	0800f358 	.word	0x0800f358

080020b0 <error1>:

//Error and restart
void error1(){
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
	while(1){
	reset();
 80020b4:	f7ff ffd4 	bl	8002060 <reset>
	HAL_Delay(100);
 80020b8:	2064      	movs	r0, #100	; 0x64
 80020ba:	f000 ffd1 	bl	8003060 <HAL_Delay>
	reset();
 80020be:	e7f9      	b.n	80020b4 <error1+0x4>

080020c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80020c4:	b672      	cpsid	i
}
 80020c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020c8:	e7fe      	b.n	80020c8 <Error_Handler+0x8>
	...

080020cc <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	2300      	movs	r3, #0
 80020da:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e0c7      	b.n	8002276 <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d106      	bne.n	8002100 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f8c2 	bl	8002284 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2202      	movs	r2, #2
 8002104:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	699a      	ldr	r2, [r3, #24]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002116:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6999      	ldr	r1, [r3, #24]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800212c:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6899      	ldr	r1, [r3, #8]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	4b4e      	ldr	r3, [pc, #312]	; (8002280 <HAL_LTDC_Init+0x1b4>)
 8002148:	400b      	ands	r3, r1
 800214a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	041b      	lsls	r3, r3, #16
 8002152:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6899      	ldr	r1, [r3, #8]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699a      	ldr	r2, [r3, #24]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	431a      	orrs	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68d9      	ldr	r1, [r3, #12]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b42      	ldr	r3, [pc, #264]	; (8002280 <HAL_LTDC_Init+0x1b4>)
 8002176:	400b      	ands	r3, r1
 8002178:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	041b      	lsls	r3, r3, #16
 8002180:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68d9      	ldr	r1, [r3, #12]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a1a      	ldr	r2, [r3, #32]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6919      	ldr	r1, [r3, #16]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	4b37      	ldr	r3, [pc, #220]	; (8002280 <HAL_LTDC_Init+0x1b4>)
 80021a4:	400b      	ands	r3, r1
 80021a6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	041b      	lsls	r3, r3, #16
 80021ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6919      	ldr	r1, [r3, #16]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	431a      	orrs	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6959      	ldr	r1, [r3, #20]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4b2b      	ldr	r3, [pc, #172]	; (8002280 <HAL_LTDC_Init+0x1b4>)
 80021d2:	400b      	ands	r3, r1
 80021d4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021da:	041b      	lsls	r3, r3, #16
 80021dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6959      	ldr	r1, [r3, #20]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021fa:	021b      	lsls	r3, r3, #8
 80021fc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002204:	041b      	lsls	r3, r3, #16
 8002206:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002216:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4313      	orrs	r3, r2
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0204 	orr.w	r2, r2, #4
 8002242:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0202 	orr.w	r2, r2, #2
 8002252:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699a      	ldr	r2, [r3, #24]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	f000f800 	.word	0xf000f800

08002284 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */ 
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_LTDC_IRQHandler>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.  
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d025      	beq.n	80022fa <HAL_LTDC_IRQHandler+0x62>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_TE) != RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d01e      	beq.n	80022fa <HAL_LTDC_IRQHandler+0x62>
    {
      /* Disable the transfer Error interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0204 	bic.w	r2, r2, #4
 80022ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the transfer error flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2204      	movs	r2, #4
 80022d2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80022da:	f043 0201 	orr.w	r2, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2204      	movs	r2, #4
 80022e8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f87b 	bl	80023f0 <HAL_LTDC_ErrorCallback>
    }
  }
  /* FIFO underrun Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_FU) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d025      	beq.n	8002354 <HAL_LTDC_IRQHandler+0xbc>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_FU) != RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d01e      	beq.n	8002354 <HAL_LTDC_IRQHandler+0xbc>
    {
      /* Disable the FIFO underrun interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0202 	bic.w	r2, r2, #2
 8002324:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the FIFO underrun flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2202      	movs	r2, #2
 800232c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002334:	f043 0202 	orr.w	r2, r3, #2
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2204      	movs	r2, #4
 8002342:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f84e 	bl	80023f0 <HAL_LTDC_ErrorCallback>
    }
  }
  /* Line Interrupt management ************************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_LI) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d01d      	beq.n	800239e <HAL_LTDC_IRQHandler+0x106>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_LI) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b00      	cmp	r3, #0
 800236e:	d016      	beq.n	800239e <HAL_LTDC_IRQHandler+0x106>
    {
      /* Disable the Line interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0201 	bic.w	r2, r2, #1
 800237e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the Line interrupt flag */  
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2201      	movs	r2, #1
 8002386:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

      /* Line interrupt Callback */
      HAL_LTDC_LineEventCallback(hltdc);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f833 	bl	8002404 <HAL_LTDC_LineEventCallback>
    }
  }
  /* Register reload Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_RR) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d01d      	beq.n	80023e8 <HAL_LTDC_IRQHandler+0x150>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_RR) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d016      	beq.n	80023e8 <HAL_LTDC_IRQHandler+0x150>
    {
      /* Disable the register reload interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0208 	bic.w	r2, r2, #8
 80023c8:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Clear the register reload flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2208      	movs	r2, #8
 80023d0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      
      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
      /* Register reload interrupt Callback */
      HAL_LTDC_ReloadEventCallback(hltdc);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f818 	bl	8002418 <HAL_LTDC_ReloadEventCallback>
    }
  }  
}
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 800242c:	b5b0      	push	{r4, r5, r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_LTDC_ConfigLayer+0x1a>
 8002442:	2302      	movs	r3, #2
 8002444:	e02c      	b.n	80024a0 <HAL_LTDC_ConfigLayer+0x74>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2202      	movs	r2, #2
 8002452:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2134      	movs	r1, #52	; 0x34
 800245c:	fb01 f303 	mul.w	r3, r1, r3
 8002460:	4413      	add	r3, r2
 8002462:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	4614      	mov	r4, r2
 800246a:	461d      	mov	r5, r3
 800246c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800246e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002474:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002478:	682b      	ldr	r3, [r5, #0]
 800247a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	68b9      	ldr	r1, [r7, #8]
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 f81f 	bl	80024c4 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2201      	movs	r2, #1
 800248c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bdb0      	pop	{r4, r5, r7, pc}

080024a8 <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80024b6:	b2db      	uxtb	r3, r3
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b089      	sub	sp, #36	; 0x24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 80024d0:	2300      	movs	r3, #0
 80024d2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	0c1b      	lsrs	r3, r3, #16
 80024e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ec:	4413      	add	r3, r2
 80024ee:	041b      	lsls	r3, r3, #16
 80024f0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	01db      	lsls	r3, r3, #7
 80024fc:	4413      	add	r3, r2
 80024fe:	3384      	adds	r3, #132	; 0x84
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	6812      	ldr	r2, [r2, #0]
 8002506:	4611      	mov	r1, r2
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	01d2      	lsls	r2, r2, #7
 800250c:	440a      	add	r2, r1
 800250e:	3284      	adds	r2, #132	; 0x84
 8002510:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002514:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	0c1b      	lsrs	r3, r3, #16
 8002522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002526:	4413      	add	r3, r2
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4619      	mov	r1, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	01db      	lsls	r3, r3, #7
 8002534:	440b      	add	r3, r1
 8002536:	3384      	adds	r3, #132	; 0x84
 8002538:	4619      	mov	r1, r3
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800254e:	4413      	add	r3, r2
 8002550:	041b      	lsls	r3, r3, #16
 8002552:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	461a      	mov	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	01db      	lsls	r3, r3, #7
 800255e:	4413      	add	r3, r2
 8002560:	3384      	adds	r3, #132	; 0x84
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	4611      	mov	r1, r2
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	01d2      	lsls	r2, r2, #7
 800256e:	440a      	add	r2, r1
 8002570:	3284      	adds	r2, #132	; 0x84
 8002572:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002576:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002586:	4413      	add	r3, r2
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4619      	mov	r1, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	01db      	lsls	r3, r3, #7
 8002594:	440b      	add	r3, r1
 8002596:	3384      	adds	r3, #132	; 0x84
 8002598:	4619      	mov	r1, r3
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	4313      	orrs	r3, r2
 800259e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	01db      	lsls	r3, r3, #7
 80025aa:	4413      	add	r3, r2
 80025ac:	3384      	adds	r3, #132	; 0x84
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	4611      	mov	r1, r2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	01d2      	lsls	r2, r2, #7
 80025ba:	440a      	add	r2, r1
 80025bc:	3284      	adds	r2, #132	; 0x84
 80025be:	f023 0307 	bic.w	r3, r3, #7
 80025c2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	461a      	mov	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	01db      	lsls	r3, r3, #7
 80025ce:	4413      	add	r3, r2
 80025d0:	3384      	adds	r3, #132	; 0x84
 80025d2:	461a      	mov	r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80025e0:	021b      	lsls	r3, r3, #8
 80025e2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80025ea:	041b      	lsls	r3, r3, #16
 80025ec:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	061b      	lsls	r3, r3, #24
 80025f4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	01db      	lsls	r3, r3, #7
 8002600:	4413      	add	r3, r2
 8002602:	3384      	adds	r3, #132	; 0x84
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	461a      	mov	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	01db      	lsls	r3, r3, #7
 8002610:	4413      	add	r3, r2
 8002612:	3384      	adds	r3, #132	; 0x84
 8002614:	461a      	mov	r2, r3
 8002616:	2300      	movs	r3, #0
 8002618:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002620:	461a      	mov	r2, r3
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	431a      	orrs	r2, r3
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	431a      	orrs	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4619      	mov	r1, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	01db      	lsls	r3, r3, #7
 8002634:	440b      	add	r3, r1
 8002636:	3384      	adds	r3, #132	; 0x84
 8002638:	4619      	mov	r1, r3
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	4313      	orrs	r3, r2
 800263e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	01db      	lsls	r3, r3, #7
 800264a:	4413      	add	r3, r2
 800264c:	3384      	adds	r3, #132	; 0x84
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	4611      	mov	r1, r2
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	01d2      	lsls	r2, r2, #7
 800265a:	440a      	add	r2, r1
 800265c:	3284      	adds	r2, #132	; 0x84
 800265e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002662:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	461a      	mov	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	01db      	lsls	r3, r3, #7
 800266e:	4413      	add	r3, r2
 8002670:	3384      	adds	r3, #132	; 0x84
 8002672:	461a      	mov	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	01db      	lsls	r3, r3, #7
 8002684:	4413      	add	r3, r2
 8002686:	3384      	adds	r3, #132	; 0x84
 8002688:	69da      	ldr	r2, [r3, #28]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4619      	mov	r1, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	01db      	lsls	r3, r3, #7
 8002694:	440b      	add	r3, r1
 8002696:	3384      	adds	r3, #132	; 0x84
 8002698:	4619      	mov	r1, r3
 800269a:	4b58      	ldr	r3, [pc, #352]	; (80027fc <LTDC_SetConfig+0x338>)
 800269c:	4013      	ands	r3, r2
 800269e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	69da      	ldr	r2, [r3, #28]
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	68f9      	ldr	r1, [r7, #12]
 80026aa:	6809      	ldr	r1, [r1, #0]
 80026ac:	4608      	mov	r0, r1
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	01c9      	lsls	r1, r1, #7
 80026b2:	4401      	add	r1, r0
 80026b4:	3184      	adds	r1, #132	; 0x84
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	01db      	lsls	r3, r3, #7
 80026c4:	4413      	add	r3, r2
 80026c6:	3384      	adds	r3, #132	; 0x84
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	01db      	lsls	r3, r3, #7
 80026d4:	4413      	add	r3, r2
 80026d6:	3384      	adds	r3, #132	; 0x84
 80026d8:	461a      	mov	r2, r3
 80026da:	2300      	movs	r3, #0
 80026dc:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	01db      	lsls	r3, r3, #7
 80026e8:	4413      	add	r3, r2
 80026ea:	3384      	adds	r3, #132	; 0x84
 80026ec:	461a      	mov	r2, r3
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d102      	bne.n	8002702 <LTDC_SetConfig+0x23e>
  {
    tmp = 4;
 80026fc:	2304      	movs	r3, #4
 80026fe:	61fb      	str	r3, [r7, #28]
 8002700:	e01b      	b.n	800273a <LTDC_SetConfig+0x276>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d102      	bne.n	8002710 <LTDC_SetConfig+0x24c>
  {
    tmp = 3;
 800270a:	2303      	movs	r3, #3
 800270c:	61fb      	str	r3, [r7, #28]
 800270e:	e014      	b.n	800273a <LTDC_SetConfig+0x276>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	2b04      	cmp	r3, #4
 8002716:	d00b      	beq.n	8002730 <LTDC_SetConfig+0x26c>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800271c:	2b02      	cmp	r3, #2
 800271e:	d007      	beq.n	8002730 <LTDC_SetConfig+0x26c>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002724:	2b03      	cmp	r3, #3
 8002726:	d003      	beq.n	8002730 <LTDC_SetConfig+0x26c>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800272c:	2b07      	cmp	r3, #7
 800272e:	d102      	bne.n	8002736 <LTDC_SetConfig+0x272>
  {
    tmp = 2;
 8002730:	2302      	movs	r3, #2
 8002732:	61fb      	str	r3, [r7, #28]
 8002734:	e001      	b.n	800273a <LTDC_SetConfig+0x276>
  }
  else
  {
    tmp = 1;
 8002736:	2301      	movs	r3, #1
 8002738:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	01db      	lsls	r3, r3, #7
 8002744:	4413      	add	r3, r2
 8002746:	3384      	adds	r3, #132	; 0x84
 8002748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	6812      	ldr	r2, [r2, #0]
 800274e:	4611      	mov	r1, r2
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	01d2      	lsls	r2, r2, #7
 8002754:	440a      	add	r2, r1
 8002756:	3284      	adds	r2, #132	; 0x84
 8002758:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800275c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002762:	69fa      	ldr	r2, [r7, #28]
 8002764:	fb02 f303 	mul.w	r3, r2, r3
 8002768:	041a      	lsls	r2, r3, #16
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	6859      	ldr	r1, [r3, #4]
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	1acb      	subs	r3, r1, r3
 8002774:	69f9      	ldr	r1, [r7, #28]
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	3303      	adds	r3, #3
 800277c:	68f9      	ldr	r1, [r7, #12]
 800277e:	6809      	ldr	r1, [r1, #0]
 8002780:	4608      	mov	r0, r1
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	01c9      	lsls	r1, r1, #7
 8002786:	4401      	add	r1, r0
 8002788:	3184      	adds	r1, #132	; 0x84
 800278a:	4313      	orrs	r3, r2
 800278c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	01db      	lsls	r3, r3, #7
 8002798:	4413      	add	r3, r2
 800279a:	3384      	adds	r3, #132	; 0x84
 800279c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4619      	mov	r1, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	01db      	lsls	r3, r3, #7
 80027a8:	440b      	add	r3, r1
 80027aa:	3384      	adds	r3, #132	; 0x84
 80027ac:	4619      	mov	r1, r3
 80027ae:	4b14      	ldr	r3, [pc, #80]	; (8002800 <LTDC_SetConfig+0x33c>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	461a      	mov	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	01db      	lsls	r3, r3, #7
 80027be:	4413      	add	r3, r2
 80027c0:	3384      	adds	r3, #132	; 0x84
 80027c2:	461a      	mov	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	01db      	lsls	r3, r3, #7
 80027d4:	4413      	add	r3, r2
 80027d6:	3384      	adds	r3, #132	; 0x84
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	6812      	ldr	r2, [r2, #0]
 80027de:	4611      	mov	r1, r2
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	01d2      	lsls	r2, r2, #7
 80027e4:	440a      	add	r2, r1
 80027e6:	3284      	adds	r2, #132	; 0x84
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	6013      	str	r3, [r2, #0]
}
 80027ee:	bf00      	nop
 80027f0:	3724      	adds	r7, #36	; 0x24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	fffff8f8 	.word	0xfffff8f8
 8002800:	fffff800 	.word	0xfffff800

08002804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800280a:	4b16      	ldr	r3, [pc, #88]	; (8002864 <HAL_MspInit+0x60>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	4a15      	ldr	r2, [pc, #84]	; (8002864 <HAL_MspInit+0x60>)
 8002810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002814:	6413      	str	r3, [r2, #64]	; 0x40
 8002816:	4b13      	ldr	r3, [pc, #76]	; (8002864 <HAL_MspInit+0x60>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281e:	607b      	str	r3, [r7, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002822:	4b10      	ldr	r3, [pc, #64]	; (8002864 <HAL_MspInit+0x60>)
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	4a0f      	ldr	r2, [pc, #60]	; (8002864 <HAL_MspInit+0x60>)
 8002828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800282c:	6453      	str	r3, [r2, #68]	; 0x44
 800282e:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <HAL_MspInit+0x60>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800283a:	2200      	movs	r2, #0
 800283c:	2100      	movs	r1, #0
 800283e:	2005      	movs	r0, #5
 8002840:	f000 fd0d 	bl	800325e <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002844:	2005      	movs	r0, #5
 8002846:	f000 fd26 	bl	8003296 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800284a:	2200      	movs	r2, #0
 800284c:	2100      	movs	r1, #0
 800284e:	2005      	movs	r0, #5
 8002850:	f000 fd05 	bl	800325e <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002854:	2005      	movs	r0, #5
 8002856:	f000 fd1e 	bl	8003296 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800285a:	bf00      	nop
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800

08002868 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a0a      	ldr	r2, [pc, #40]	; (80028a0 <HAL_CRC_MspInit+0x38>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d10b      	bne.n	8002892 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800287a:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <HAL_CRC_MspInit+0x3c>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	4a09      	ldr	r2, [pc, #36]	; (80028a4 <HAL_CRC_MspInit+0x3c>)
 8002880:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002884:	6313      	str	r3, [r2, #48]	; 0x30
 8002886:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <HAL_CRC_MspInit+0x3c>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002892:	bf00      	nop
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40023000 	.word	0x40023000
 80028a4:	40023800 	.word	0x40023800

080028a8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a0a      	ldr	r2, [pc, #40]	; (80028e0 <HAL_DMA2D_MspInit+0x38>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d10b      	bne.n	80028d2 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80028ba:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <HAL_DMA2D_MspInit+0x3c>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	4a09      	ldr	r2, [pc, #36]	; (80028e4 <HAL_DMA2D_MspInit+0x3c>)
 80028c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028c4:	6313      	str	r3, [r2, #48]	; 0x30
 80028c6:	4b07      	ldr	r3, [pc, #28]	; (80028e4 <HAL_DMA2D_MspInit+0x3c>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80028d2:	bf00      	nop
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	4002b000 	.word	0x4002b000
 80028e4:	40023800 	.word	0x40023800

080028e8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b0ac      	sub	sp, #176	; 0xb0
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	60da      	str	r2, [r3, #12]
 80028fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002900:	f107 0318 	add.w	r3, r7, #24
 8002904:	2284      	movs	r2, #132	; 0x84
 8002906:	2100      	movs	r1, #0
 8002908:	4618      	mov	r0, r3
 800290a:	f00a fdff 	bl	800d50c <memset>
  if(hsd->Instance==SDMMC1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a34      	ldr	r2, [pc, #208]	; (80029e4 <HAL_SD_MspInit+0xfc>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d161      	bne.n	80029dc <HAL_SD_MspInit+0xf4>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8002918:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 800291c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800291e:	2300      	movs	r3, #0
 8002920:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8002924:	2300      	movs	r3, #0
 8002926:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800292a:	f107 0318 	add.w	r3, r7, #24
 800292e:	4618      	mov	r0, r3
 8002930:	f002 fe32 	bl	8005598 <HAL_RCCEx_PeriphCLKConfig>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 800293a:	f7ff fbc1 	bl	80020c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800293e:	4b2a      	ldr	r3, [pc, #168]	; (80029e8 <HAL_SD_MspInit+0x100>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	4a29      	ldr	r2, [pc, #164]	; (80029e8 <HAL_SD_MspInit+0x100>)
 8002944:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002948:	6453      	str	r3, [r2, #68]	; 0x44
 800294a:	4b27      	ldr	r3, [pc, #156]	; (80029e8 <HAL_SD_MspInit+0x100>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002956:	4b24      	ldr	r3, [pc, #144]	; (80029e8 <HAL_SD_MspInit+0x100>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	4a23      	ldr	r2, [pc, #140]	; (80029e8 <HAL_SD_MspInit+0x100>)
 800295c:	f043 0304 	orr.w	r3, r3, #4
 8002960:	6313      	str	r3, [r2, #48]	; 0x30
 8002962:	4b21      	ldr	r3, [pc, #132]	; (80029e8 <HAL_SD_MspInit+0x100>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	613b      	str	r3, [r7, #16]
 800296c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800296e:	4b1e      	ldr	r3, [pc, #120]	; (80029e8 <HAL_SD_MspInit+0x100>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	4a1d      	ldr	r2, [pc, #116]	; (80029e8 <HAL_SD_MspInit+0x100>)
 8002974:	f043 0308 	orr.w	r3, r3, #8
 8002978:	6313      	str	r3, [r2, #48]	; 0x30
 800297a:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <HAL_SD_MspInit+0x100>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8002986:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800298a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298e:	2302      	movs	r3, #2
 8002990:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	2300      	movs	r3, #0
 8002996:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299a:	2303      	movs	r3, #3
 800299c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80029a0:	230c      	movs	r3, #12
 80029a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80029aa:	4619      	mov	r1, r3
 80029ac:	480f      	ldr	r0, [pc, #60]	; (80029ec <HAL_SD_MspInit+0x104>)
 80029ae:	f001 f9c1 	bl	8003d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029b2:	2304      	movs	r3, #4
 80029b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b8:	2302      	movs	r3, #2
 80029ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c4:	2303      	movs	r3, #3
 80029c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80029ca:	230c      	movs	r3, #12
 80029cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80029d4:	4619      	mov	r1, r3
 80029d6:	4806      	ldr	r0, [pc, #24]	; (80029f0 <HAL_SD_MspInit+0x108>)
 80029d8:	f001 f9ac 	bl	8003d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80029dc:	bf00      	nop
 80029de:	37b0      	adds	r7, #176	; 0xb0
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40012c00 	.word	0x40012c00
 80029e8:	40023800 	.word	0x40023800
 80029ec:	40020800 	.word	0x40020800
 80029f0:	40020c00 	.word	0x40020c00

080029f4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e025      	b.n	8002a54 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d106      	bne.n	8002a22 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 f81d 	bl	8002a5c <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2202      	movs	r2, #2
 8002a26:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3304      	adds	r3, #4
 8002a32:	4619      	mov	r1, r3
 8002a34:	4610      	mov	r0, r2
 8002a36:	f000 f8a1 	bl	8002b7c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	461a      	mov	r2, r3
 8002a44:	6839      	ldr	r1, [r7, #0]
 8002a46:	f000 f90b 	bl	8002c60 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d101      	bne.n	8002a8c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e018      	b.n	8002abe <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	68b9      	ldr	r1, [r7, #8]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 f95f 	bl	8002d60 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d104      	bne.n	8002ab4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2205      	movs	r2, #5
 8002aae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002ab2:	e003      	b.n	8002abc <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d101      	bne.n	8002ae0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8002adc:	2302      	movs	r3, #2
 8002ade:	e00e      	b.n	8002afe <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6839      	ldr	r1, [r7, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 f957 	bl	8002da2 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b06:	b480      	push	{r7}
 8002b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b0a:	e7fe      	b.n	8002b0a <NMI_Handler+0x4>

08002b0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b10:	e7fe      	b.n	8002b10 <HardFault_Handler+0x4>

08002b12 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b12:	b480      	push	{r7}
 8002b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b16:	e7fe      	b.n	8002b16 <MemManage_Handler+0x4>

08002b18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b1c:	e7fe      	b.n	8002b1c <BusFault_Handler+0x4>

08002b1e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b22:	e7fe      	b.n	8002b22 <UsageFault_Handler+0x4>

08002b24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b28:	bf00      	nop
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b32:	b480      	push	{r7}
 8002b34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b36:	bf00      	nop
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b52:	f000 fa65 	bl	8003020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <LTDC_IRQHandler>:

/* USER CODE BEGIN 1 */
void LTDC_IRQHandler(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  HAL_LTDC_IRQHandler(&hLtdcHandler);
 8002b6c:	4802      	ldr	r0, [pc, #8]	; (8002b78 <LTDC_IRQHandler+0x10>)
 8002b6e:	f7ff fb93 	bl	8002298 <HAL_LTDC_IRQHandler>
}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	200342bc 	.word	0x200342bc

08002b7c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d027      	beq.n	8002be6 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	4b2f      	ldr	r3, [pc, #188]	; (8002c5c <FMC_SDRAM_Init+0xe0>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002bac:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8002bb2:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8002bb8:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8002bbe:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8002bc4:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8002bca:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8002bd0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8002bd6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	e032      	b.n	8002c4c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bf2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8002bfc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8002c02:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	4b12      	ldr	r3, [pc, #72]	; (8002c5c <FMC_SDRAM_Init+0xe0>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002c20:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8002c26:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8002c2c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8002c32:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8002c38:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	ffff8000 	.word	0xffff8000

08002c60 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d02e      	beq.n	8002cd8 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002c86:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002c96:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8002ca0:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8002caa:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8002cb4:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8002cbe:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	609a      	str	r2, [r3, #8]
 8002cd6:	e039      	b.n	8002d4c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4b1e      	ldr	r3, [pc, #120]	; (8002d5c <FMC_SDRAM_Timing_Init+0xfc>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002d0a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002d1a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	3b01      	subs	r3, #1
 8002d22:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8002d24:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8002d2e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	3b01      	subs	r3, #1
 8002d36:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	371c      	adds	r7, #28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	ff0f0fff 	.word	0xff0f0fff

08002d60 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8002d78:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8002d82:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	371c      	adds	r7, #28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	695a      	ldr	r2, [r3, #20]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	e00a      	b.n	8002df0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002dda:	f3af 8000 	nop.w
 8002dde:	4601      	mov	r1, r0
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	1c5a      	adds	r2, r3, #1
 8002de4:	60ba      	str	r2, [r7, #8]
 8002de6:	b2ca      	uxtb	r2, r1
 8002de8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	3301      	adds	r3, #1
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	dbf0      	blt.n	8002dda <_read+0x12>
	}

return len;
 8002df8:	687b      	ldr	r3, [r7, #4]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b086      	sub	sp, #24
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	60f8      	str	r0, [r7, #12]
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	e009      	b.n	8002e28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	60ba      	str	r2, [r7, #8]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	3301      	adds	r3, #1
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	dbf1      	blt.n	8002e14 <_write+0x12>
	}
	return len;
 8002e30:	687b      	ldr	r3, [r7, #4]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <_close>:

int _close(int file)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
	return -1;
 8002e42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e62:	605a      	str	r2, [r3, #4]
	return 0;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <_isatty>:

int _isatty(int file)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
	return 1;
 8002e7a:	2301      	movs	r3, #1
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
	return 0;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
	...

08002ea4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002eac:	4a14      	ldr	r2, [pc, #80]	; (8002f00 <_sbrk+0x5c>)
 8002eae:	4b15      	ldr	r3, [pc, #84]	; (8002f04 <_sbrk+0x60>)
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002eb8:	4b13      	ldr	r3, [pc, #76]	; (8002f08 <_sbrk+0x64>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d102      	bne.n	8002ec6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ec0:	4b11      	ldr	r3, [pc, #68]	; (8002f08 <_sbrk+0x64>)
 8002ec2:	4a12      	ldr	r2, [pc, #72]	; (8002f0c <_sbrk+0x68>)
 8002ec4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ec6:	4b10      	ldr	r3, [pc, #64]	; (8002f08 <_sbrk+0x64>)
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4413      	add	r3, r2
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d207      	bcs.n	8002ee4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ed4:	f00a fae0 	bl	800d498 <__errno>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	220c      	movs	r2, #12
 8002edc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ede:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ee2:	e009      	b.n	8002ef8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ee4:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <_sbrk+0x64>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002eea:	4b07      	ldr	r3, [pc, #28]	; (8002f08 <_sbrk+0x64>)
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	4a05      	ldr	r2, [pc, #20]	; (8002f08 <_sbrk+0x64>)
 8002ef4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	20050000 	.word	0x20050000
 8002f04:	00000800 	.word	0x00000800
 8002f08:	20034258 	.word	0x20034258
 8002f0c:	20034580 	.word	0x20034580

08002f10 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <SystemInit+0x20>)
 8002f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1a:	4a05      	ldr	r2, [pc, #20]	; (8002f30 <SystemInit+0x20>)
 8002f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f24:	bf00      	nop
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	e000ed00 	.word	0xe000ed00

08002f34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f38:	480d      	ldr	r0, [pc, #52]	; (8002f70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f3a:	490e      	ldr	r1, [pc, #56]	; (8002f74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f3c:	4a0e      	ldr	r2, [pc, #56]	; (8002f78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f40:	e002      	b.n	8002f48 <LoopCopyDataInit>

08002f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f46:	3304      	adds	r3, #4

08002f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f4c:	d3f9      	bcc.n	8002f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f4e:	4a0b      	ldr	r2, [pc, #44]	; (8002f7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f50:	4c0b      	ldr	r4, [pc, #44]	; (8002f80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f54:	e001      	b.n	8002f5a <LoopFillZerobss>

08002f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f58:	3204      	adds	r2, #4

08002f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f5c:	d3fb      	bcc.n	8002f56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f5e:	f7ff ffd7 	bl	8002f10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f62:	f00a fa9f 	bl	800d4a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f66:	f7fe f82b 	bl	8000fc0 <main>
  bx  lr    
 8002f6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f6c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f74:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8002f78:	080114b8 	.word	0x080114b8
  ldr r2, =_sbss
 8002f7c:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8002f80:	2003457c 	.word	0x2003457c

08002f84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f84:	e7fe      	b.n	8002f84 <ADC_IRQHandler>
	...

08002f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <HAL_Init+0x34>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a0a      	ldr	r2, [pc, #40]	; (8002fbc <HAL_Init+0x34>)
 8002f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f96:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f98:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <HAL_Init+0x34>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a07      	ldr	r2, [pc, #28]	; (8002fbc <HAL_Init+0x34>)
 8002f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fa4:	2003      	movs	r0, #3
 8002fa6:	f000 f94f 	bl	8003248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002faa:	2000      	movs	r0, #0
 8002fac:	f000 f808 	bl	8002fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fb0:	f7ff fc28 	bl	8002804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40023c00 	.word	0x40023c00

08002fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fc8:	4b12      	ldr	r3, [pc, #72]	; (8003014 <HAL_InitTick+0x54>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	4b12      	ldr	r3, [pc, #72]	; (8003018 <HAL_InitTick+0x58>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 f967 	bl	80032b2 <HAL_SYSTICK_Config>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e00e      	b.n	800300c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b0f      	cmp	r3, #15
 8002ff2:	d80a      	bhi.n	800300a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ffc:	f000 f92f 	bl	800325e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003000:	4a06      	ldr	r2, [pc, #24]	; (800301c <HAL_InitTick+0x5c>)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	e000      	b.n	800300c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
}
 800300c:	4618      	mov	r0, r3
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	20000000 	.word	0x20000000
 8003018:	20000008 	.word	0x20000008
 800301c:	20000004 	.word	0x20000004

08003020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003024:	4b06      	ldr	r3, [pc, #24]	; (8003040 <HAL_IncTick+0x20>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	461a      	mov	r2, r3
 800302a:	4b06      	ldr	r3, [pc, #24]	; (8003044 <HAL_IncTick+0x24>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4413      	add	r3, r2
 8003030:	4a04      	ldr	r2, [pc, #16]	; (8003044 <HAL_IncTick+0x24>)
 8003032:	6013      	str	r3, [r2, #0]
}
 8003034:	bf00      	nop
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	20000008 	.word	0x20000008
 8003044:	2003425c 	.word	0x2003425c

08003048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return uwTick;
 800304c:	4b03      	ldr	r3, [pc, #12]	; (800305c <HAL_GetTick+0x14>)
 800304e:	681b      	ldr	r3, [r3, #0]
}
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	2003425c 	.word	0x2003425c

08003060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003068:	f7ff ffee 	bl	8003048 <HAL_GetTick>
 800306c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003078:	d005      	beq.n	8003086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800307a:	4b0a      	ldr	r3, [pc, #40]	; (80030a4 <HAL_Delay+0x44>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4413      	add	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003086:	bf00      	nop
 8003088:	f7ff ffde 	bl	8003048 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	429a      	cmp	r2, r3
 8003096:	d8f7      	bhi.n	8003088 <HAL_Delay+0x28>
  {
  }
}
 8003098:	bf00      	nop
 800309a:	bf00      	nop
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	20000008 	.word	0x20000008

080030a8 <__NVIC_SetPriorityGrouping>:
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <__NVIC_SetPriorityGrouping+0x40>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030c4:	4013      	ands	r3, r2
 80030c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80030d0:	4b06      	ldr	r3, [pc, #24]	; (80030ec <__NVIC_SetPriorityGrouping+0x44>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030d6:	4a04      	ldr	r2, [pc, #16]	; (80030e8 <__NVIC_SetPriorityGrouping+0x40>)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	60d3      	str	r3, [r2, #12]
}
 80030dc:	bf00      	nop
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	e000ed00 	.word	0xe000ed00
 80030ec:	05fa0000 	.word	0x05fa0000

080030f0 <__NVIC_GetPriorityGrouping>:
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030f4:	4b04      	ldr	r3, [pc, #16]	; (8003108 <__NVIC_GetPriorityGrouping+0x18>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	0a1b      	lsrs	r3, r3, #8
 80030fa:	f003 0307 	and.w	r3, r3, #7
}
 80030fe:	4618      	mov	r0, r3
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	e000ed00 	.word	0xe000ed00

0800310c <__NVIC_EnableIRQ>:
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311a:	2b00      	cmp	r3, #0
 800311c:	db0b      	blt.n	8003136 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	f003 021f 	and.w	r2, r3, #31
 8003124:	4907      	ldr	r1, [pc, #28]	; (8003144 <__NVIC_EnableIRQ+0x38>)
 8003126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	2001      	movs	r0, #1
 800312e:	fa00 f202 	lsl.w	r2, r0, r2
 8003132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	e000e100 	.word	0xe000e100

08003148 <__NVIC_SetPriority>:
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	6039      	str	r1, [r7, #0]
 8003152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003158:	2b00      	cmp	r3, #0
 800315a:	db0a      	blt.n	8003172 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	b2da      	uxtb	r2, r3
 8003160:	490c      	ldr	r1, [pc, #48]	; (8003194 <__NVIC_SetPriority+0x4c>)
 8003162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003166:	0112      	lsls	r2, r2, #4
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	440b      	add	r3, r1
 800316c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003170:	e00a      	b.n	8003188 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	b2da      	uxtb	r2, r3
 8003176:	4908      	ldr	r1, [pc, #32]	; (8003198 <__NVIC_SetPriority+0x50>)
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	3b04      	subs	r3, #4
 8003180:	0112      	lsls	r2, r2, #4
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	440b      	add	r3, r1
 8003186:	761a      	strb	r2, [r3, #24]
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	e000e100 	.word	0xe000e100
 8003198:	e000ed00 	.word	0xe000ed00

0800319c <NVIC_EncodePriority>:
{
 800319c:	b480      	push	{r7}
 800319e:	b089      	sub	sp, #36	; 0x24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f1c3 0307 	rsb	r3, r3, #7
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	bf28      	it	cs
 80031ba:	2304      	movcs	r3, #4
 80031bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	3304      	adds	r3, #4
 80031c2:	2b06      	cmp	r3, #6
 80031c4:	d902      	bls.n	80031cc <NVIC_EncodePriority+0x30>
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3b03      	subs	r3, #3
 80031ca:	e000      	b.n	80031ce <NVIC_EncodePriority+0x32>
 80031cc:	2300      	movs	r3, #0
 80031ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	43da      	mvns	r2, r3
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	401a      	ands	r2, r3
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	fa01 f303 	lsl.w	r3, r1, r3
 80031ee:	43d9      	mvns	r1, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f4:	4313      	orrs	r3, r2
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3724      	adds	r7, #36	; 0x24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
	...

08003204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3b01      	subs	r3, #1
 8003210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003214:	d301      	bcc.n	800321a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003216:	2301      	movs	r3, #1
 8003218:	e00f      	b.n	800323a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800321a:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <SysTick_Config+0x40>)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3b01      	subs	r3, #1
 8003220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003222:	210f      	movs	r1, #15
 8003224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003228:	f7ff ff8e 	bl	8003148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800322c:	4b05      	ldr	r3, [pc, #20]	; (8003244 <SysTick_Config+0x40>)
 800322e:	2200      	movs	r2, #0
 8003230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003232:	4b04      	ldr	r3, [pc, #16]	; (8003244 <SysTick_Config+0x40>)
 8003234:	2207      	movs	r2, #7
 8003236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	e000e010 	.word	0xe000e010

08003248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7ff ff29 	bl	80030a8 <__NVIC_SetPriorityGrouping>
}
 8003256:	bf00      	nop
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800325e:	b580      	push	{r7, lr}
 8003260:	b086      	sub	sp, #24
 8003262:	af00      	add	r7, sp, #0
 8003264:	4603      	mov	r3, r0
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
 800326a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003270:	f7ff ff3e 	bl	80030f0 <__NVIC_GetPriorityGrouping>
 8003274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	68b9      	ldr	r1, [r7, #8]
 800327a:	6978      	ldr	r0, [r7, #20]
 800327c:	f7ff ff8e 	bl	800319c <NVIC_EncodePriority>
 8003280:	4602      	mov	r2, r0
 8003282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003286:	4611      	mov	r1, r2
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff ff5d 	bl	8003148 <__NVIC_SetPriority>
}
 800328e:	bf00      	nop
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	4603      	mov	r3, r0
 800329e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff ff31 	bl	800310c <__NVIC_EnableIRQ>
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff ffa2 	bl	8003204 <SysTick_Config>
 80032c0:	4603      	mov	r3, r0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e054      	b.n	8003388 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	7f5b      	ldrb	r3, [r3, #29]
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d105      	bne.n	80032f4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7ff faba 	bl	8002868 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	791b      	ldrb	r3, [r3, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10c      	bne.n	800331c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a22      	ldr	r2, [pc, #136]	; (8003390 <HAL_CRC_Init+0xc4>)
 8003308:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0218 	bic.w	r2, r2, #24
 8003318:	609a      	str	r2, [r3, #8]
 800331a:	e00c      	b.n	8003336 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6899      	ldr	r1, [r3, #8]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	461a      	mov	r2, r3
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f834 	bl	8003394 <HAL_CRCEx_Polynomial_Set>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e028      	b.n	8003388 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	795b      	ldrb	r3, [r3, #5]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d105      	bne.n	800334a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003346:	611a      	str	r2, [r3, #16]
 8003348:	e004      	b.n	8003354 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6912      	ldr	r2, [r2, #16]
 8003352:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	695a      	ldr	r2, [r3, #20]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	699a      	ldr	r2, [r3, #24]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	04c11db7 	.word	0x04c11db7

08003394 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033a0:	2300      	movs	r3, #0
 80033a2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80033a4:	231f      	movs	r3, #31
 80033a6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80033a8:	bf00      	nop
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1e5a      	subs	r2, r3, #1
 80033ae:	613a      	str	r2, [r7, #16]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d009      	beq.n	80033c8 <HAL_CRCEx_Polynomial_Set+0x34>
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	fa22 f303 	lsr.w	r3, r2, r3
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0f0      	beq.n	80033aa <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b18      	cmp	r3, #24
 80033cc:	d846      	bhi.n	800345c <HAL_CRCEx_Polynomial_Set+0xc8>
 80033ce:	a201      	add	r2, pc, #4	; (adr r2, 80033d4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80033d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d4:	08003463 	.word	0x08003463
 80033d8:	0800345d 	.word	0x0800345d
 80033dc:	0800345d 	.word	0x0800345d
 80033e0:	0800345d 	.word	0x0800345d
 80033e4:	0800345d 	.word	0x0800345d
 80033e8:	0800345d 	.word	0x0800345d
 80033ec:	0800345d 	.word	0x0800345d
 80033f0:	0800345d 	.word	0x0800345d
 80033f4:	08003451 	.word	0x08003451
 80033f8:	0800345d 	.word	0x0800345d
 80033fc:	0800345d 	.word	0x0800345d
 8003400:	0800345d 	.word	0x0800345d
 8003404:	0800345d 	.word	0x0800345d
 8003408:	0800345d 	.word	0x0800345d
 800340c:	0800345d 	.word	0x0800345d
 8003410:	0800345d 	.word	0x0800345d
 8003414:	08003445 	.word	0x08003445
 8003418:	0800345d 	.word	0x0800345d
 800341c:	0800345d 	.word	0x0800345d
 8003420:	0800345d 	.word	0x0800345d
 8003424:	0800345d 	.word	0x0800345d
 8003428:	0800345d 	.word	0x0800345d
 800342c:	0800345d 	.word	0x0800345d
 8003430:	0800345d 	.word	0x0800345d
 8003434:	08003439 	.word	0x08003439
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	2b06      	cmp	r3, #6
 800343c:	d913      	bls.n	8003466 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003442:	e010      	b.n	8003466 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	2b07      	cmp	r3, #7
 8003448:	d90f      	bls.n	800346a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800344e:	e00c      	b.n	800346a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	2b0f      	cmp	r3, #15
 8003454:	d90b      	bls.n	800346e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800345a:	e008      	b.n	800346e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	75fb      	strb	r3, [r7, #23]
      break;
 8003460:	e006      	b.n	8003470 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003462:	bf00      	nop
 8003464:	e004      	b.n	8003470 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003466:	bf00      	nop
 8003468:	e002      	b.n	8003470 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800346a:	bf00      	nop
 800346c:	e000      	b.n	8003470 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800346e:	bf00      	nop
  }
  if (status == HAL_OK)
 8003470:	7dfb      	ldrb	r3, [r7, #23]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10d      	bne.n	8003492 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f023 0118 	bic.w	r1, r3, #24
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	430a      	orrs	r2, r1
 8003490:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003492:	7dfb      	ldrb	r3, [r7, #23]
}
 8003494:	4618      	mov	r0, r3
 8003496:	371c      	adds	r7, #28
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034ac:	f7ff fdcc 	bl	8003048 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e099      	b.n	80035f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2202      	movs	r2, #2
 80034c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0201 	bic.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034dc:	e00f      	b.n	80034fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034de:	f7ff fdb3 	bl	8003048 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b05      	cmp	r3, #5
 80034ea:	d908      	bls.n	80034fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2220      	movs	r2, #32
 80034f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2203      	movs	r2, #3
 80034f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e078      	b.n	80035f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1e8      	bne.n	80034de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	4b38      	ldr	r3, [pc, #224]	; (80035f8 <HAL_DMA_Init+0x158>)
 8003518:	4013      	ands	r3, r2
 800351a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800352a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003536:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003542:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	2b04      	cmp	r3, #4
 8003556:	d107      	bne.n	8003568 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003560:	4313      	orrs	r3, r2
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	4313      	orrs	r3, r2
 8003566:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f023 0307 	bic.w	r3, r3, #7
 800357e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	4313      	orrs	r3, r2
 8003588:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	2b04      	cmp	r3, #4
 8003590:	d117      	bne.n	80035c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	4313      	orrs	r3, r2
 800359a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00e      	beq.n	80035c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f8bd 	bl	8003724 <DMA_CheckFifoParam>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d008      	beq.n	80035c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2240      	movs	r2, #64	; 0x40
 80035b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80035be:	2301      	movs	r3, #1
 80035c0:	e016      	b.n	80035f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f874 	bl	80036b8 <DMA_CalcBaseAndBitshift>
 80035d0:	4603      	mov	r3, r0
 80035d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d8:	223f      	movs	r2, #63	; 0x3f
 80035da:	409a      	lsls	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	f010803f 	.word	0xf010803f

080035fc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e050      	b.n	80036b0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d101      	bne.n	800361e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800361a:	2302      	movs	r3, #2
 800361c:	e048      	b.n	80036b0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 0201 	bic.w	r2, r2, #1
 800362c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2200      	movs	r2, #0
 800363c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2200      	movs	r2, #0
 8003644:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2200      	movs	r2, #0
 800364c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2200      	movs	r2, #0
 8003654:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2221      	movs	r2, #33	; 0x21
 800365c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f82a 	bl	80036b8 <DMA_CalcBaseAndBitshift>
 8003664:	4603      	mov	r3, r0
 8003666:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366c:	223f      	movs	r2, #63	; 0x3f
 800366e:	409a      	lsls	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	3b10      	subs	r3, #16
 80036c8:	4a13      	ldr	r2, [pc, #76]	; (8003718 <DMA_CalcBaseAndBitshift+0x60>)
 80036ca:	fba2 2303 	umull	r2, r3, r2, r3
 80036ce:	091b      	lsrs	r3, r3, #4
 80036d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036d2:	4a12      	ldr	r2, [pc, #72]	; (800371c <DMA_CalcBaseAndBitshift+0x64>)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4413      	add	r3, r2
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	461a      	mov	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2b03      	cmp	r3, #3
 80036e4:	d908      	bls.n	80036f8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <DMA_CalcBaseAndBitshift+0x68>)
 80036ee:	4013      	ands	r3, r2
 80036f0:	1d1a      	adds	r2, r3, #4
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	659a      	str	r2, [r3, #88]	; 0x58
 80036f6:	e006      	b.n	8003706 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	461a      	mov	r2, r3
 80036fe:	4b08      	ldr	r3, [pc, #32]	; (8003720 <DMA_CalcBaseAndBitshift+0x68>)
 8003700:	4013      	ands	r3, r2
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800370a:	4618      	mov	r0, r3
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	aaaaaaab 	.word	0xaaaaaaab
 800371c:	0800f3dc 	.word	0x0800f3dc
 8003720:	fffffc00 	.word	0xfffffc00

08003724 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003734:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d11f      	bne.n	800377e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b03      	cmp	r3, #3
 8003742:	d856      	bhi.n	80037f2 <DMA_CheckFifoParam+0xce>
 8003744:	a201      	add	r2, pc, #4	; (adr r2, 800374c <DMA_CheckFifoParam+0x28>)
 8003746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374a:	bf00      	nop
 800374c:	0800375d 	.word	0x0800375d
 8003750:	0800376f 	.word	0x0800376f
 8003754:	0800375d 	.word	0x0800375d
 8003758:	080037f3 	.word	0x080037f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003760:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d046      	beq.n	80037f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800376c:	e043      	b.n	80037f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003772:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003776:	d140      	bne.n	80037fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800377c:	e03d      	b.n	80037fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003786:	d121      	bne.n	80037cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b03      	cmp	r3, #3
 800378c:	d837      	bhi.n	80037fe <DMA_CheckFifoParam+0xda>
 800378e:	a201      	add	r2, pc, #4	; (adr r2, 8003794 <DMA_CheckFifoParam+0x70>)
 8003790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003794:	080037a5 	.word	0x080037a5
 8003798:	080037ab 	.word	0x080037ab
 800379c:	080037a5 	.word	0x080037a5
 80037a0:	080037bd 	.word	0x080037bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]
      break;
 80037a8:	e030      	b.n	800380c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d025      	beq.n	8003802 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ba:	e022      	b.n	8003802 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037c4:	d11f      	bne.n	8003806 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037ca:	e01c      	b.n	8003806 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d903      	bls.n	80037da <DMA_CheckFifoParam+0xb6>
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	2b03      	cmp	r3, #3
 80037d6:	d003      	beq.n	80037e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037d8:	e018      	b.n	800380c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	73fb      	strb	r3, [r7, #15]
      break;
 80037de:	e015      	b.n	800380c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00e      	beq.n	800380a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	73fb      	strb	r3, [r7, #15]
      break;
 80037f0:	e00b      	b.n	800380a <DMA_CheckFifoParam+0xe6>
      break;
 80037f2:	bf00      	nop
 80037f4:	e00a      	b.n	800380c <DMA_CheckFifoParam+0xe8>
      break;
 80037f6:	bf00      	nop
 80037f8:	e008      	b.n	800380c <DMA_CheckFifoParam+0xe8>
      break;
 80037fa:	bf00      	nop
 80037fc:	e006      	b.n	800380c <DMA_CheckFifoParam+0xe8>
      break;
 80037fe:	bf00      	nop
 8003800:	e004      	b.n	800380c <DMA_CheckFifoParam+0xe8>
      break;
 8003802:	bf00      	nop
 8003804:	e002      	b.n	800380c <DMA_CheckFifoParam+0xe8>
      break;   
 8003806:	bf00      	nop
 8003808:	e000      	b.n	800380c <DMA_CheckFifoParam+0xe8>
      break;
 800380a:	bf00      	nop
    }
  } 
  
  return status; 
 800380c:	7bfb      	ldrb	r3, [r7, #15]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop

0800381c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e039      	b.n	80038a2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d106      	bne.n	8003848 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7ff f830 	bl	80028a8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386c:	f023 0107 	bic.w	r1, r3, #7
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003882:	4b0a      	ldr	r3, [pc, #40]	; (80038ac <HAL_DMA2D_Init+0x90>)
 8003884:	4013      	ands	r3, r2
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	68d1      	ldr	r1, [r2, #12]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6812      	ldr	r2, [r2, #0]
 800388e:	430b      	orrs	r3, r1
 8003890:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	ffffc000 	.word	0xffffc000

080038b0 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af02      	add	r7, sp, #8
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
 80038bc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <HAL_DMA2D_Start+0x1c>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e018      	b.n	80038fe <HAL_DMA2D_Start+0x4e>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	68b9      	ldr	r1, [r7, #8]
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 f988 	bl	8003bfc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b086      	sub	sp, #24
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
 800390e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003910:	2300      	movs	r3, #0
 8003912:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d056      	beq.n	80039d0 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003922:	f7ff fb91 	bl	8003048 <HAL_GetTick>
 8003926:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003928:	e04b      	b.n	80039c2 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003938:	2b00      	cmp	r3, #0
 800393a:	d023      	beq.n	8003984 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	2b00      	cmp	r3, #0
 8003944:	d005      	beq.n	8003952 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394a:	f043 0202 	orr.w	r2, r3, #2
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003960:	f043 0201 	orr.w	r2, r3, #1
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2221      	movs	r2, #33	; 0x21
 800396e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2204      	movs	r2, #4
 8003974:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e0a5      	b.n	8003ad0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800398a:	d01a      	beq.n	80039c2 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800398c:	f7ff fb5c 	bl	8003048 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d302      	bcc.n	80039a2 <HAL_DMA2D_PollForTransfer+0x9c>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10f      	bne.n	80039c2 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a6:	f043 0220 	orr.w	r2, r3, #32
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2203      	movs	r2, #3
 80039b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e086      	b.n	8003ad0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0ac      	beq.n	800392a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	f003 0320 	and.w	r3, r3, #32
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d061      	beq.n	8003ab6 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80039f2:	f7ff fb29 	bl	8003048 <HAL_GetTick>
 80039f6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80039f8:	e056      	b.n	8003aa8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d02e      	beq.n	8003a6a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d005      	beq.n	8003a22 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1a:	f043 0204 	orr.w	r2, r3, #4
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f003 0320 	and.w	r3, r3, #32
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a30:	f043 0202 	orr.w	r2, r3, #2
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d005      	beq.n	8003a4e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a46:	f043 0201 	orr.w	r2, r3, #1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2229      	movs	r2, #41	; 0x29
 8003a54:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2204      	movs	r2, #4
 8003a5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e032      	b.n	8003ad0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a70:	d01a      	beq.n	8003aa8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a72:	f7ff fae9 	bl	8003048 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d302      	bcc.n	8003a88 <HAL_DMA2D_PollForTransfer+0x182>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10f      	bne.n	8003aa8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8c:	f043 0220 	orr.w	r2, r3, #32
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2203      	movs	r2, #3
 8003a98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e013      	b.n	8003ad0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f003 0310 	and.w	r3, r3, #16
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0a1      	beq.n	80039fa <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2212      	movs	r2, #18
 8003abc:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3718      	adds	r7, #24
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_DMA2D_ConfigLayer+0x20>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e079      	b.n	8003bec <HAL_DMA2D_ConfigLayer+0x114>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2202      	movs	r2, #2
 8003b04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	3318      	adds	r3, #24
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	4413      	add	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	041b      	lsls	r3, r3, #16
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003b22:	4b35      	ldr	r3, [pc, #212]	; (8003bf8 <HAL_DMA2D_ConfigLayer+0x120>)
 8003b24:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2b0a      	cmp	r3, #10
 8003b2c:	d003      	beq.n	8003b36 <HAL_DMA2D_ConfigLayer+0x5e>
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b09      	cmp	r3, #9
 8003b34:	d107      	bne.n	8003b46 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	e005      	b.n	8003b52 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	061b      	lsls	r3, r3, #24
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d120      	bne.n	8003b9a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	43db      	mvns	r3, r3
 8003b62:	ea02 0103 	and.w	r1, r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b0a      	cmp	r3, #10
 8003b80:	d003      	beq.n	8003b8a <HAL_DMA2D_ConfigLayer+0xb2>
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b09      	cmp	r3, #9
 8003b88:	d127      	bne.n	8003bda <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b96:	629a      	str	r2, [r3, #40]	; 0x28
 8003b98:	e01f      	b.n	8003bda <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69da      	ldr	r2, [r3, #28]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	ea02 0103 	and.w	r1, r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	6812      	ldr	r2, [r2, #0]
 8003bba:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b0a      	cmp	r3, #10
 8003bc2:	d003      	beq.n	8003bcc <HAL_DMA2D_ConfigLayer+0xf4>
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b09      	cmp	r3, #9
 8003bca:	d106      	bne.n	8003bda <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	68da      	ldr	r2, [r3, #12]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003bd8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	371c      	adds	r7, #28
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	ff03000f 	.word	0xff03000f

08003bfc <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b08b      	sub	sp, #44	; 0x2c
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
 8003c08:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c10:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	041a      	lsls	r2, r3, #16
 8003c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c34:	d174      	bne.n	8003d20 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003c3c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c44:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003c4c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d108      	bne.n	8003c6e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	431a      	orrs	r2, r3
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6c:	e053      	b.n	8003d16 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d106      	bne.n	8003c84 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
 8003c82:	e048      	b.n	8003d16 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d111      	bne.n	8003cb0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	0cdb      	lsrs	r3, r3, #19
 8003c90:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	0a9b      	lsrs	r3, r3, #10
 8003c96:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	08db      	lsrs	r3, r3, #3
 8003c9c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	02db      	lsls	r3, r3, #11
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
 8003cae:	e032      	b.n	8003d16 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2b03      	cmp	r3, #3
 8003cb6:	d117      	bne.n	8003ce8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	0fdb      	lsrs	r3, r3, #31
 8003cbc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	0cdb      	lsrs	r3, r3, #19
 8003cc2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	0adb      	lsrs	r3, r3, #11
 8003cc8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	08db      	lsrs	r3, r3, #3
 8003cce:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	029b      	lsls	r3, r3, #10
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	03db      	lsls	r3, r3, #15
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce6:	e016      	b.n	8003d16 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	0f1b      	lsrs	r3, r3, #28
 8003cec:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	0d1b      	lsrs	r3, r3, #20
 8003cf2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	0b1b      	lsrs	r3, r3, #12
 8003cf8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	091b      	lsrs	r3, r3, #4
 8003cfe:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	011a      	lsls	r2, r3, #4
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	021b      	lsls	r3, r3, #8
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	031b      	lsls	r3, r3, #12
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003d1e:	e003      	b.n	8003d28 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	60da      	str	r2, [r3, #12]
}
 8003d28:	bf00      	nop
 8003d2a:	372c      	adds	r7, #44	; 0x2c
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b089      	sub	sp, #36	; 0x24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003d46:	2300      	movs	r3, #0
 8003d48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61fb      	str	r3, [r7, #28]
 8003d52:	e175      	b.n	8004040 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003d54:	2201      	movs	r2, #1
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	4013      	ands	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	f040 8164 	bne.w	800403a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d005      	beq.n	8003d8a <HAL_GPIO_Init+0x56>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d130      	bne.n	8003dec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	2203      	movs	r2, #3
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	43db      	mvns	r3, r3
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	091b      	lsrs	r3, r3, #4
 8003dd6:	f003 0201 	and.w	r2, r3, #1
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f003 0303 	and.w	r3, r3, #3
 8003df4:	2b03      	cmp	r3, #3
 8003df6:	d017      	beq.n	8003e28 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	2203      	movs	r2, #3
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f003 0303 	and.w	r3, r3, #3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d123      	bne.n	8003e7c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	08da      	lsrs	r2, r3, #3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3208      	adds	r2, #8
 8003e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	220f      	movs	r2, #15
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	43db      	mvns	r3, r3
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	4013      	ands	r3, r2
 8003e56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	691a      	ldr	r2, [r3, #16]
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	08da      	lsrs	r2, r3, #3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	3208      	adds	r2, #8
 8003e76:	69b9      	ldr	r1, [r7, #24]
 8003e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	2203      	movs	r2, #3
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	4013      	ands	r3, r2
 8003e92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f003 0203 	and.w	r2, r3, #3
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 80be 	beq.w	800403a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ebe:	4b66      	ldr	r3, [pc, #408]	; (8004058 <HAL_GPIO_Init+0x324>)
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec2:	4a65      	ldr	r2, [pc, #404]	; (8004058 <HAL_GPIO_Init+0x324>)
 8003ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8003eca:	4b63      	ldr	r3, [pc, #396]	; (8004058 <HAL_GPIO_Init+0x324>)
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003ed6:	4a61      	ldr	r2, [pc, #388]	; (800405c <HAL_GPIO_Init+0x328>)
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	089b      	lsrs	r3, r3, #2
 8003edc:	3302      	adds	r3, #2
 8003ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	f003 0303 	and.w	r3, r3, #3
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	220f      	movs	r2, #15
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	43db      	mvns	r3, r3
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a58      	ldr	r2, [pc, #352]	; (8004060 <HAL_GPIO_Init+0x32c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d037      	beq.n	8003f72 <HAL_GPIO_Init+0x23e>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a57      	ldr	r2, [pc, #348]	; (8004064 <HAL_GPIO_Init+0x330>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d031      	beq.n	8003f6e <HAL_GPIO_Init+0x23a>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a56      	ldr	r2, [pc, #344]	; (8004068 <HAL_GPIO_Init+0x334>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d02b      	beq.n	8003f6a <HAL_GPIO_Init+0x236>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a55      	ldr	r2, [pc, #340]	; (800406c <HAL_GPIO_Init+0x338>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d025      	beq.n	8003f66 <HAL_GPIO_Init+0x232>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a54      	ldr	r2, [pc, #336]	; (8004070 <HAL_GPIO_Init+0x33c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d01f      	beq.n	8003f62 <HAL_GPIO_Init+0x22e>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a53      	ldr	r2, [pc, #332]	; (8004074 <HAL_GPIO_Init+0x340>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d019      	beq.n	8003f5e <HAL_GPIO_Init+0x22a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a52      	ldr	r2, [pc, #328]	; (8004078 <HAL_GPIO_Init+0x344>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d013      	beq.n	8003f5a <HAL_GPIO_Init+0x226>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a51      	ldr	r2, [pc, #324]	; (800407c <HAL_GPIO_Init+0x348>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d00d      	beq.n	8003f56 <HAL_GPIO_Init+0x222>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a50      	ldr	r2, [pc, #320]	; (8004080 <HAL_GPIO_Init+0x34c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d007      	beq.n	8003f52 <HAL_GPIO_Init+0x21e>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a4f      	ldr	r2, [pc, #316]	; (8004084 <HAL_GPIO_Init+0x350>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d101      	bne.n	8003f4e <HAL_GPIO_Init+0x21a>
 8003f4a:	2309      	movs	r3, #9
 8003f4c:	e012      	b.n	8003f74 <HAL_GPIO_Init+0x240>
 8003f4e:	230a      	movs	r3, #10
 8003f50:	e010      	b.n	8003f74 <HAL_GPIO_Init+0x240>
 8003f52:	2308      	movs	r3, #8
 8003f54:	e00e      	b.n	8003f74 <HAL_GPIO_Init+0x240>
 8003f56:	2307      	movs	r3, #7
 8003f58:	e00c      	b.n	8003f74 <HAL_GPIO_Init+0x240>
 8003f5a:	2306      	movs	r3, #6
 8003f5c:	e00a      	b.n	8003f74 <HAL_GPIO_Init+0x240>
 8003f5e:	2305      	movs	r3, #5
 8003f60:	e008      	b.n	8003f74 <HAL_GPIO_Init+0x240>
 8003f62:	2304      	movs	r3, #4
 8003f64:	e006      	b.n	8003f74 <HAL_GPIO_Init+0x240>
 8003f66:	2303      	movs	r3, #3
 8003f68:	e004      	b.n	8003f74 <HAL_GPIO_Init+0x240>
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	e002      	b.n	8003f74 <HAL_GPIO_Init+0x240>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e000      	b.n	8003f74 <HAL_GPIO_Init+0x240>
 8003f72:	2300      	movs	r3, #0
 8003f74:	69fa      	ldr	r2, [r7, #28]
 8003f76:	f002 0203 	and.w	r2, r2, #3
 8003f7a:	0092      	lsls	r2, r2, #2
 8003f7c:	4093      	lsls	r3, r2
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f84:	4935      	ldr	r1, [pc, #212]	; (800405c <HAL_GPIO_Init+0x328>)
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	089b      	lsrs	r3, r3, #2
 8003f8a:	3302      	adds	r3, #2
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f92:	4b3d      	ldr	r3, [pc, #244]	; (8004088 <HAL_GPIO_Init+0x354>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fb6:	4a34      	ldr	r2, [pc, #208]	; (8004088 <HAL_GPIO_Init+0x354>)
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fbc:	4b32      	ldr	r3, [pc, #200]	; (8004088 <HAL_GPIO_Init+0x354>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fe0:	4a29      	ldr	r2, [pc, #164]	; (8004088 <HAL_GPIO_Init+0x354>)
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fe6:	4b28      	ldr	r3, [pc, #160]	; (8004088 <HAL_GPIO_Init+0x354>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	4313      	orrs	r3, r2
 8004008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800400a:	4a1f      	ldr	r2, [pc, #124]	; (8004088 <HAL_GPIO_Init+0x354>)
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004010:	4b1d      	ldr	r3, [pc, #116]	; (8004088 <HAL_GPIO_Init+0x354>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	43db      	mvns	r3, r3
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	4013      	ands	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	4313      	orrs	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004034:	4a14      	ldr	r2, [pc, #80]	; (8004088 <HAL_GPIO_Init+0x354>)
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	3301      	adds	r3, #1
 800403e:	61fb      	str	r3, [r7, #28]
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	2b0f      	cmp	r3, #15
 8004044:	f67f ae86 	bls.w	8003d54 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004048:	bf00      	nop
 800404a:	bf00      	nop
 800404c:	3724      	adds	r7, #36	; 0x24
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	40023800 	.word	0x40023800
 800405c:	40013800 	.word	0x40013800
 8004060:	40020000 	.word	0x40020000
 8004064:	40020400 	.word	0x40020400
 8004068:	40020800 	.word	0x40020800
 800406c:	40020c00 	.word	0x40020c00
 8004070:	40021000 	.word	0x40021000
 8004074:	40021400 	.word	0x40021400
 8004078:	40021800 	.word	0x40021800
 800407c:	40021c00 	.word	0x40021c00
 8004080:	40022000 	.word	0x40022000
 8004084:	40022400 	.word	0x40022400
 8004088:	40013c00 	.word	0x40013c00

0800408c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	460b      	mov	r3, r1
 8004096:	807b      	strh	r3, [r7, #2]
 8004098:	4613      	mov	r3, r2
 800409a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800409c:	787b      	ldrb	r3, [r7, #1]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040a2:	887a      	ldrh	r2, [r7, #2]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80040a8:	e003      	b.n	80040b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80040aa:	887b      	ldrh	r3, [r7, #2]
 80040ac:	041a      	lsls	r2, r3, #16
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	619a      	str	r2, [r3, #24]
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
	...

080040c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e07f      	b.n	80041d2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d106      	bne.n	80040ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f8a9 	bl	800423e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2224      	movs	r2, #36	; 0x24
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0201 	bic.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004110:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004120:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d107      	bne.n	800413a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004136:	609a      	str	r2, [r3, #8]
 8004138:	e006      	b.n	8004148 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004146:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	2b02      	cmp	r3, #2
 800414e:	d104      	bne.n	800415a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004158:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6859      	ldr	r1, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	4b1d      	ldr	r3, [pc, #116]	; (80041dc <HAL_I2C_Init+0x11c>)
 8004166:	430b      	orrs	r3, r1
 8004168:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004178:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691a      	ldr	r2, [r3, #16]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	69d9      	ldr	r1, [r3, #28]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a1a      	ldr	r2, [r3, #32]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0201 	orr.w	r2, r2, #1
 80041b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2220      	movs	r2, #32
 80041be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	02008000 	.word	0x02008000

080041e0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e021      	b.n	8004236 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2224      	movs	r2, #36	; 0x24
 80041f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0201 	bic.w	r2, r2, #1
 8004208:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f821 	bl	8004252 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
	...

08004268 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b088      	sub	sp, #32
 800426c:	af02      	add	r7, sp, #8
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	4608      	mov	r0, r1
 8004272:	4611      	mov	r1, r2
 8004274:	461a      	mov	r2, r3
 8004276:	4603      	mov	r3, r0
 8004278:	817b      	strh	r3, [r7, #10]
 800427a:	460b      	mov	r3, r1
 800427c:	813b      	strh	r3, [r7, #8]
 800427e:	4613      	mov	r3, r2
 8004280:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b20      	cmp	r3, #32
 800428c:	f040 80f9 	bne.w	8004482 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d002      	beq.n	800429c <HAL_I2C_Mem_Write+0x34>
 8004296:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004298:	2b00      	cmp	r3, #0
 800429a:	d105      	bne.n	80042a8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e0ed      	b.n	8004484 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d101      	bne.n	80042b6 <HAL_I2C_Mem_Write+0x4e>
 80042b2:	2302      	movs	r3, #2
 80042b4:	e0e6      	b.n	8004484 <HAL_I2C_Mem_Write+0x21c>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042be:	f7fe fec3 	bl	8003048 <HAL_GetTick>
 80042c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	2319      	movs	r3, #25
 80042ca:	2201      	movs	r2, #1
 80042cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 fad1 	bl	8004878 <I2C_WaitOnFlagUntilTimeout>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e0d1      	b.n	8004484 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2221      	movs	r2, #33	; 0x21
 80042e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2240      	movs	r2, #64	; 0x40
 80042ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a3a      	ldr	r2, [r7, #32]
 80042fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004300:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004308:	88f8      	ldrh	r0, [r7, #6]
 800430a:	893a      	ldrh	r2, [r7, #8]
 800430c:	8979      	ldrh	r1, [r7, #10]
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	9301      	str	r3, [sp, #4]
 8004312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	4603      	mov	r3, r0
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f9e1 	bl	80046e0 <I2C_RequestMemoryWrite>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e0a9      	b.n	8004484 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004334:	b29b      	uxth	r3, r3
 8004336:	2bff      	cmp	r3, #255	; 0xff
 8004338:	d90e      	bls.n	8004358 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	22ff      	movs	r2, #255	; 0xff
 800433e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004344:	b2da      	uxtb	r2, r3
 8004346:	8979      	ldrh	r1, [r7, #10]
 8004348:	2300      	movs	r3, #0
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 fc39 	bl	8004bc8 <I2C_TransferConfig>
 8004356:	e00f      	b.n	8004378 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435c:	b29a      	uxth	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004366:	b2da      	uxtb	r2, r3
 8004368:	8979      	ldrh	r1, [r7, #10]
 800436a:	2300      	movs	r3, #0
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 fc28 	bl	8004bc8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 fabb 	bl	80048f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e07b      	b.n	8004484 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	781a      	ldrb	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d034      	beq.n	8004430 <HAL_I2C_Mem_Write+0x1c8>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d130      	bne.n	8004430 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d4:	2200      	movs	r2, #0
 80043d6:	2180      	movs	r1, #128	; 0x80
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 fa4d 	bl	8004878 <I2C_WaitOnFlagUntilTimeout>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e04d      	b.n	8004484 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2bff      	cmp	r3, #255	; 0xff
 80043f0:	d90e      	bls.n	8004410 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	22ff      	movs	r2, #255	; 0xff
 80043f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	8979      	ldrh	r1, [r7, #10]
 8004400:	2300      	movs	r3, #0
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 fbdd 	bl	8004bc8 <I2C_TransferConfig>
 800440e:	e00f      	b.n	8004430 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004414:	b29a      	uxth	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441e:	b2da      	uxtb	r2, r3
 8004420:	8979      	ldrh	r1, [r7, #10]
 8004422:	2300      	movs	r3, #0
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 fbcc 	bl	8004bc8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004434:	b29b      	uxth	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d19e      	bne.n	8004378 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 fa9a 	bl	8004978 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e01a      	b.n	8004484 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2220      	movs	r2, #32
 8004454:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6859      	ldr	r1, [r3, #4]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	4b0a      	ldr	r3, [pc, #40]	; (800448c <HAL_I2C_Mem_Write+0x224>)
 8004462:	400b      	ands	r3, r1
 8004464:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2220      	movs	r2, #32
 800446a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	e000      	b.n	8004484 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004482:	2302      	movs	r3, #2
  }
}
 8004484:	4618      	mov	r0, r3
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	fe00e800 	.word	0xfe00e800

08004490 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b088      	sub	sp, #32
 8004494:	af02      	add	r7, sp, #8
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	4608      	mov	r0, r1
 800449a:	4611      	mov	r1, r2
 800449c:	461a      	mov	r2, r3
 800449e:	4603      	mov	r3, r0
 80044a0:	817b      	strh	r3, [r7, #10]
 80044a2:	460b      	mov	r3, r1
 80044a4:	813b      	strh	r3, [r7, #8]
 80044a6:	4613      	mov	r3, r2
 80044a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b20      	cmp	r3, #32
 80044b4:	f040 80fd 	bne.w	80046b2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <HAL_I2C_Mem_Read+0x34>
 80044be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d105      	bne.n	80044d0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e0f1      	b.n	80046b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d101      	bne.n	80044de <HAL_I2C_Mem_Read+0x4e>
 80044da:	2302      	movs	r3, #2
 80044dc:	e0ea      	b.n	80046b4 <HAL_I2C_Mem_Read+0x224>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044e6:	f7fe fdaf 	bl	8003048 <HAL_GetTick>
 80044ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	2319      	movs	r3, #25
 80044f2:	2201      	movs	r2, #1
 80044f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 f9bd 	bl	8004878 <I2C_WaitOnFlagUntilTimeout>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e0d5      	b.n	80046b4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2222      	movs	r2, #34	; 0x22
 800450c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2240      	movs	r2, #64	; 0x40
 8004514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a3a      	ldr	r2, [r7, #32]
 8004522:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004528:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004530:	88f8      	ldrh	r0, [r7, #6]
 8004532:	893a      	ldrh	r2, [r7, #8]
 8004534:	8979      	ldrh	r1, [r7, #10]
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	9301      	str	r3, [sp, #4]
 800453a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	4603      	mov	r3, r0
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 f921 	bl	8004788 <I2C_RequestMemoryRead>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d005      	beq.n	8004558 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e0ad      	b.n	80046b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455c:	b29b      	uxth	r3, r3
 800455e:	2bff      	cmp	r3, #255	; 0xff
 8004560:	d90e      	bls.n	8004580 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	22ff      	movs	r2, #255	; 0xff
 8004566:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800456c:	b2da      	uxtb	r2, r3
 800456e:	8979      	ldrh	r1, [r7, #10]
 8004570:	4b52      	ldr	r3, [pc, #328]	; (80046bc <HAL_I2C_Mem_Read+0x22c>)
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 fb25 	bl	8004bc8 <I2C_TransferConfig>
 800457e:	e00f      	b.n	80045a0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004584:	b29a      	uxth	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458e:	b2da      	uxtb	r2, r3
 8004590:	8979      	ldrh	r1, [r7, #10]
 8004592:	4b4a      	ldr	r3, [pc, #296]	; (80046bc <HAL_I2C_Mem_Read+0x22c>)
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 fb14 	bl	8004bc8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a6:	2200      	movs	r2, #0
 80045a8:	2104      	movs	r1, #4
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 f964 	bl	8004878 <I2C_WaitOnFlagUntilTimeout>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e07c      	b.n	80046b4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	b2d2      	uxtb	r2, r2
 80045c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	1c5a      	adds	r2, r3, #1
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d6:	3b01      	subs	r3, #1
 80045d8:	b29a      	uxth	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d034      	beq.n	8004660 <HAL_I2C_Mem_Read+0x1d0>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d130      	bne.n	8004660 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004604:	2200      	movs	r2, #0
 8004606:	2180      	movs	r1, #128	; 0x80
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 f935 	bl	8004878 <I2C_WaitOnFlagUntilTimeout>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e04d      	b.n	80046b4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461c:	b29b      	uxth	r3, r3
 800461e:	2bff      	cmp	r3, #255	; 0xff
 8004620:	d90e      	bls.n	8004640 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	22ff      	movs	r2, #255	; 0xff
 8004626:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800462c:	b2da      	uxtb	r2, r3
 800462e:	8979      	ldrh	r1, [r7, #10]
 8004630:	2300      	movs	r3, #0
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 fac5 	bl	8004bc8 <I2C_TransferConfig>
 800463e:	e00f      	b.n	8004660 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800464e:	b2da      	uxtb	r2, r3
 8004650:	8979      	ldrh	r1, [r7, #10]
 8004652:	2300      	movs	r3, #0
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 fab4 	bl	8004bc8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d19a      	bne.n	80045a0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 f982 	bl	8004978 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e01a      	b.n	80046b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2220      	movs	r2, #32
 8004684:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6859      	ldr	r1, [r3, #4]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <HAL_I2C_Mem_Read+0x230>)
 8004692:	400b      	ands	r3, r1
 8004694:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2220      	movs	r2, #32
 800469a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	e000      	b.n	80046b4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80046b2:	2302      	movs	r3, #2
  }
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3718      	adds	r7, #24
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	80002400 	.word	0x80002400
 80046c0:	fe00e800 	.word	0xfe00e800

080046c4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046d2:	b2db      	uxtb	r3, r3
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af02      	add	r7, sp, #8
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	4608      	mov	r0, r1
 80046ea:	4611      	mov	r1, r2
 80046ec:	461a      	mov	r2, r3
 80046ee:	4603      	mov	r3, r0
 80046f0:	817b      	strh	r3, [r7, #10]
 80046f2:	460b      	mov	r3, r1
 80046f4:	813b      	strh	r3, [r7, #8]
 80046f6:	4613      	mov	r3, r2
 80046f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80046fa:	88fb      	ldrh	r3, [r7, #6]
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	8979      	ldrh	r1, [r7, #10]
 8004700:	4b20      	ldr	r3, [pc, #128]	; (8004784 <I2C_RequestMemoryWrite+0xa4>)
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 fa5d 	bl	8004bc8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800470e:	69fa      	ldr	r2, [r7, #28]
 8004710:	69b9      	ldr	r1, [r7, #24]
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 f8f0 	bl	80048f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e02c      	b.n	800477c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004722:	88fb      	ldrh	r3, [r7, #6]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d105      	bne.n	8004734 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004728:	893b      	ldrh	r3, [r7, #8]
 800472a:	b2da      	uxtb	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	629a      	str	r2, [r3, #40]	; 0x28
 8004732:	e015      	b.n	8004760 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004734:	893b      	ldrh	r3, [r7, #8]
 8004736:	0a1b      	lsrs	r3, r3, #8
 8004738:	b29b      	uxth	r3, r3
 800473a:	b2da      	uxtb	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004742:	69fa      	ldr	r2, [r7, #28]
 8004744:	69b9      	ldr	r1, [r7, #24]
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f8d6 	bl	80048f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e012      	b.n	800477c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004756:	893b      	ldrh	r3, [r7, #8]
 8004758:	b2da      	uxtb	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	2200      	movs	r2, #0
 8004768:	2180      	movs	r1, #128	; 0x80
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 f884 	bl	8004878 <I2C_WaitOnFlagUntilTimeout>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e000      	b.n	800477c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	80002000 	.word	0x80002000

08004788 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af02      	add	r7, sp, #8
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	4608      	mov	r0, r1
 8004792:	4611      	mov	r1, r2
 8004794:	461a      	mov	r2, r3
 8004796:	4603      	mov	r3, r0
 8004798:	817b      	strh	r3, [r7, #10]
 800479a:	460b      	mov	r3, r1
 800479c:	813b      	strh	r3, [r7, #8]
 800479e:	4613      	mov	r3, r2
 80047a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80047a2:	88fb      	ldrh	r3, [r7, #6]
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	8979      	ldrh	r1, [r7, #10]
 80047a8:	4b20      	ldr	r3, [pc, #128]	; (800482c <I2C_RequestMemoryRead+0xa4>)
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	2300      	movs	r3, #0
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 fa0a 	bl	8004bc8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047b4:	69fa      	ldr	r2, [r7, #28]
 80047b6:	69b9      	ldr	r1, [r7, #24]
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 f89d 	bl	80048f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e02c      	b.n	8004822 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047c8:	88fb      	ldrh	r3, [r7, #6]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d105      	bne.n	80047da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047ce:	893b      	ldrh	r3, [r7, #8]
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	629a      	str	r2, [r3, #40]	; 0x28
 80047d8:	e015      	b.n	8004806 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80047da:	893b      	ldrh	r3, [r7, #8]
 80047dc:	0a1b      	lsrs	r3, r3, #8
 80047de:	b29b      	uxth	r3, r3
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047e8:	69fa      	ldr	r2, [r7, #28]
 80047ea:	69b9      	ldr	r1, [r7, #24]
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 f883 	bl	80048f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e012      	b.n	8004822 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047fc:	893b      	ldrh	r3, [r7, #8]
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	2200      	movs	r2, #0
 800480e:	2140      	movs	r1, #64	; 0x40
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 f831 	bl	8004878 <I2C_WaitOnFlagUntilTimeout>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e000      	b.n	8004822 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	80002000 	.word	0x80002000

08004830 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b02      	cmp	r3, #2
 8004844:	d103      	bne.n	800484e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2200      	movs	r2, #0
 800484c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b01      	cmp	r3, #1
 800485a:	d007      	beq.n	800486c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699a      	ldr	r2, [r3, #24]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	619a      	str	r2, [r3, #24]
  }
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	603b      	str	r3, [r7, #0]
 8004884:	4613      	mov	r3, r2
 8004886:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004888:	e022      	b.n	80048d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004890:	d01e      	beq.n	80048d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004892:	f7fe fbd9 	bl	8003048 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d302      	bcc.n	80048a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d113      	bne.n	80048d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ac:	f043 0220 	orr.w	r2, r3, #32
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e00f      	b.n	80048f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	699a      	ldr	r2, [r3, #24]
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	4013      	ands	r3, r2
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	429a      	cmp	r2, r3
 80048de:	bf0c      	ite	eq
 80048e0:	2301      	moveq	r3, #1
 80048e2:	2300      	movne	r3, #0
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	461a      	mov	r2, r3
 80048e8:	79fb      	ldrb	r3, [r7, #7]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d0cd      	beq.n	800488a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004904:	e02c      	b.n	8004960 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	68b9      	ldr	r1, [r7, #8]
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 f870 	bl	80049f0 <I2C_IsErrorOccurred>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e02a      	b.n	8004970 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004920:	d01e      	beq.n	8004960 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004922:	f7fe fb91 	bl	8003048 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	429a      	cmp	r2, r3
 8004930:	d302      	bcc.n	8004938 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d113      	bne.n	8004960 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493c:	f043 0220 	orr.w	r2, r3, #32
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e007      	b.n	8004970 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b02      	cmp	r3, #2
 800496c:	d1cb      	bne.n	8004906 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004984:	e028      	b.n	80049d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	68b9      	ldr	r1, [r7, #8]
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f000 f830 	bl	80049f0 <I2C_IsErrorOccurred>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e026      	b.n	80049e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800499a:	f7fe fb55 	bl	8003048 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d302      	bcc.n	80049b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d113      	bne.n	80049d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b4:	f043 0220 	orr.w	r2, r3, #32
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2220      	movs	r2, #32
 80049c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e007      	b.n	80049e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	f003 0320 	and.w	r3, r3, #32
 80049e2:	2b20      	cmp	r3, #32
 80049e4:	d1cf      	bne.n	8004986 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b08a      	sub	sp, #40	; 0x28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049fc:	2300      	movs	r3, #0
 80049fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	f003 0310 	and.w	r3, r3, #16
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d075      	beq.n	8004b08 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2210      	movs	r2, #16
 8004a22:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a24:	e056      	b.n	8004ad4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a2c:	d052      	beq.n	8004ad4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004a2e:	f7fe fb0b 	bl	8003048 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d302      	bcc.n	8004a44 <I2C_IsErrorOccurred+0x54>
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d147      	bne.n	8004ad4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a4e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a56:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a66:	d12e      	bne.n	8004ac6 <I2C_IsErrorOccurred+0xd6>
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a6e:	d02a      	beq.n	8004ac6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004a70:	7cfb      	ldrb	r3, [r7, #19]
 8004a72:	2b20      	cmp	r3, #32
 8004a74:	d027      	beq.n	8004ac6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a84:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004a86:	f7fe fadf 	bl	8003048 <HAL_GetTick>
 8004a8a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a8c:	e01b      	b.n	8004ac6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004a8e:	f7fe fadb 	bl	8003048 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b19      	cmp	r3, #25
 8004a9a:	d914      	bls.n	8004ac6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa0:	f043 0220 	orr.w	r2, r3, #32
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	f003 0320 	and.w	r3, r3, #32
 8004ad0:	2b20      	cmp	r3, #32
 8004ad2:	d1dc      	bne.n	8004a8e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	f003 0320 	and.w	r3, r3, #32
 8004ade:	2b20      	cmp	r3, #32
 8004ae0:	d003      	beq.n	8004aea <I2C_IsErrorOccurred+0xfa>
 8004ae2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d09d      	beq.n	8004a26 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004aea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d103      	bne.n	8004afa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2220      	movs	r2, #32
 8004af8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004afa:	6a3b      	ldr	r3, [r7, #32]
 8004afc:	f043 0304 	orr.w	r3, r3, #4
 8004b00:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00b      	beq.n	8004b32 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	f043 0301 	orr.w	r3, r3, #1
 8004b20:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b2a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00b      	beq.n	8004b54 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	f043 0308 	orr.w	r3, r3, #8
 8004b42:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00b      	beq.n	8004b76 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	f043 0302 	orr.w	r3, r3, #2
 8004b64:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004b76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d01c      	beq.n	8004bb8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f7ff fe56 	bl	8004830 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6859      	ldr	r1, [r3, #4]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	4b0d      	ldr	r3, [pc, #52]	; (8004bc4 <I2C_IsErrorOccurred+0x1d4>)
 8004b90:	400b      	ands	r3, r1
 8004b92:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b98:	6a3b      	ldr	r3, [r7, #32]
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3728      	adds	r7, #40	; 0x28
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	fe00e800 	.word	0xfe00e800

08004bc8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	607b      	str	r3, [r7, #4]
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	817b      	strh	r3, [r7, #10]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004bda:	897b      	ldrh	r3, [r7, #10]
 8004bdc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004be0:	7a7b      	ldrb	r3, [r7, #9]
 8004be2:	041b      	lsls	r3, r3, #16
 8004be4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004be8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004bf6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	0d5b      	lsrs	r3, r3, #21
 8004c02:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004c06:	4b08      	ldr	r3, [pc, #32]	; (8004c28 <I2C_TransferConfig+0x60>)
 8004c08:	430b      	orrs	r3, r1
 8004c0a:	43db      	mvns	r3, r3
 8004c0c:	ea02 0103 	and.w	r1, r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004c1a:	bf00      	nop
 8004c1c:	371c      	adds	r7, #28
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	03ff63ff 	.word	0x03ff63ff

08004c2c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c30:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a04      	ldr	r2, [pc, #16]	; (8004c48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c3a:	6013      	str	r3, [r2, #0]
}
 8004c3c:	bf00      	nop
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	40007000 	.word	0x40007000

08004c4c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004c52:	2300      	movs	r3, #0
 8004c54:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004c56:	4b23      	ldr	r3, [pc, #140]	; (8004ce4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	4a22      	ldr	r2, [pc, #136]	; (8004ce4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c60:	6413      	str	r3, [r2, #64]	; 0x40
 8004c62:	4b20      	ldr	r3, [pc, #128]	; (8004ce4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c6a:	603b      	str	r3, [r7, #0]
 8004c6c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004c6e:	4b1e      	ldr	r3, [pc, #120]	; (8004ce8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a1d      	ldr	r2, [pc, #116]	; (8004ce8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c78:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c7a:	f7fe f9e5 	bl	8003048 <HAL_GetTick>
 8004c7e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c80:	e009      	b.n	8004c96 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c82:	f7fe f9e1 	bl	8003048 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c90:	d901      	bls.n	8004c96 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e022      	b.n	8004cdc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c96:	4b14      	ldr	r3, [pc, #80]	; (8004ce8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca2:	d1ee      	bne.n	8004c82 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004ca4:	4b10      	ldr	r3, [pc, #64]	; (8004ce8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a0f      	ldr	r2, [pc, #60]	; (8004ce8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cb0:	f7fe f9ca 	bl	8003048 <HAL_GetTick>
 8004cb4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004cb6:	e009      	b.n	8004ccc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004cb8:	f7fe f9c6 	bl	8003048 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cc6:	d901      	bls.n	8004ccc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e007      	b.n	8004cdc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ccc:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cd8:	d1ee      	bne.n	8004cb8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	40023800 	.word	0x40023800
 8004ce8:	40007000 	.word	0x40007000

08004cec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e291      	b.n	8005226 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 8087 	beq.w	8004e1e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d10:	4b96      	ldr	r3, [pc, #600]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f003 030c 	and.w	r3, r3, #12
 8004d18:	2b04      	cmp	r3, #4
 8004d1a:	d00c      	beq.n	8004d36 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d1c:	4b93      	ldr	r3, [pc, #588]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f003 030c 	and.w	r3, r3, #12
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d112      	bne.n	8004d4e <HAL_RCC_OscConfig+0x62>
 8004d28:	4b90      	ldr	r3, [pc, #576]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d34:	d10b      	bne.n	8004d4e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d36:	4b8d      	ldr	r3, [pc, #564]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d06c      	beq.n	8004e1c <HAL_RCC_OscConfig+0x130>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d168      	bne.n	8004e1c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e26b      	b.n	8005226 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d56:	d106      	bne.n	8004d66 <HAL_RCC_OscConfig+0x7a>
 8004d58:	4b84      	ldr	r3, [pc, #528]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a83      	ldr	r2, [pc, #524]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d62:	6013      	str	r3, [r2, #0]
 8004d64:	e02e      	b.n	8004dc4 <HAL_RCC_OscConfig+0xd8>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10c      	bne.n	8004d88 <HAL_RCC_OscConfig+0x9c>
 8004d6e:	4b7f      	ldr	r3, [pc, #508]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a7e      	ldr	r2, [pc, #504]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d78:	6013      	str	r3, [r2, #0]
 8004d7a:	4b7c      	ldr	r3, [pc, #496]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a7b      	ldr	r2, [pc, #492]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004d80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d84:	6013      	str	r3, [r2, #0]
 8004d86:	e01d      	b.n	8004dc4 <HAL_RCC_OscConfig+0xd8>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d90:	d10c      	bne.n	8004dac <HAL_RCC_OscConfig+0xc0>
 8004d92:	4b76      	ldr	r3, [pc, #472]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a75      	ldr	r2, [pc, #468]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	4b73      	ldr	r3, [pc, #460]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a72      	ldr	r2, [pc, #456]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da8:	6013      	str	r3, [r2, #0]
 8004daa:	e00b      	b.n	8004dc4 <HAL_RCC_OscConfig+0xd8>
 8004dac:	4b6f      	ldr	r3, [pc, #444]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a6e      	ldr	r2, [pc, #440]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004db6:	6013      	str	r3, [r2, #0]
 8004db8:	4b6c      	ldr	r3, [pc, #432]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a6b      	ldr	r2, [pc, #428]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d013      	beq.n	8004df4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dcc:	f7fe f93c 	bl	8003048 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dd4:	f7fe f938 	bl	8003048 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b64      	cmp	r3, #100	; 0x64
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e21f      	b.n	8005226 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004de6:	4b61      	ldr	r3, [pc, #388]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0f0      	beq.n	8004dd4 <HAL_RCC_OscConfig+0xe8>
 8004df2:	e014      	b.n	8004e1e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df4:	f7fe f928 	bl	8003048 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dfc:	f7fe f924 	bl	8003048 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b64      	cmp	r3, #100	; 0x64
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e20b      	b.n	8005226 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e0e:	4b57      	ldr	r3, [pc, #348]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1f0      	bne.n	8004dfc <HAL_RCC_OscConfig+0x110>
 8004e1a:	e000      	b.n	8004e1e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d069      	beq.n	8004efe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e2a:	4b50      	ldr	r3, [pc, #320]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 030c 	and.w	r3, r3, #12
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00b      	beq.n	8004e4e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e36:	4b4d      	ldr	r3, [pc, #308]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 030c 	and.w	r3, r3, #12
 8004e3e:	2b08      	cmp	r3, #8
 8004e40:	d11c      	bne.n	8004e7c <HAL_RCC_OscConfig+0x190>
 8004e42:	4b4a      	ldr	r3, [pc, #296]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d116      	bne.n	8004e7c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e4e:	4b47      	ldr	r3, [pc, #284]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d005      	beq.n	8004e66 <HAL_RCC_OscConfig+0x17a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d001      	beq.n	8004e66 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e1df      	b.n	8005226 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e66:	4b41      	ldr	r3, [pc, #260]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	493d      	ldr	r1, [pc, #244]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e7a:	e040      	b.n	8004efe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d023      	beq.n	8004ecc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e84:	4b39      	ldr	r3, [pc, #228]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a38      	ldr	r2, [pc, #224]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004e8a:	f043 0301 	orr.w	r3, r3, #1
 8004e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e90:	f7fe f8da 	bl	8003048 <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e96:	e008      	b.n	8004eaa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e98:	f7fe f8d6 	bl	8003048 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e1bd      	b.n	8005226 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eaa:	4b30      	ldr	r3, [pc, #192]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0f0      	beq.n	8004e98 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eb6:	4b2d      	ldr	r3, [pc, #180]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	4929      	ldr	r1, [pc, #164]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	600b      	str	r3, [r1, #0]
 8004eca:	e018      	b.n	8004efe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ecc:	4b27      	ldr	r3, [pc, #156]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a26      	ldr	r2, [pc, #152]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004ed2:	f023 0301 	bic.w	r3, r3, #1
 8004ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed8:	f7fe f8b6 	bl	8003048 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ee0:	f7fe f8b2 	bl	8003048 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e199      	b.n	8005226 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ef2:	4b1e      	ldr	r3, [pc, #120]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1f0      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0308 	and.w	r3, r3, #8
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d038      	beq.n	8004f7c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d019      	beq.n	8004f46 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f12:	4b16      	ldr	r3, [pc, #88]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f16:	4a15      	ldr	r2, [pc, #84]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004f18:	f043 0301 	orr.w	r3, r3, #1
 8004f1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f1e:	f7fe f893 	bl	8003048 <HAL_GetTick>
 8004f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f24:	e008      	b.n	8004f38 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f26:	f7fe f88f 	bl	8003048 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e176      	b.n	8005226 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f38:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0f0      	beq.n	8004f26 <HAL_RCC_OscConfig+0x23a>
 8004f44:	e01a      	b.n	8004f7c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f46:	4b09      	ldr	r3, [pc, #36]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f4a:	4a08      	ldr	r2, [pc, #32]	; (8004f6c <HAL_RCC_OscConfig+0x280>)
 8004f4c:	f023 0301 	bic.w	r3, r3, #1
 8004f50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f52:	f7fe f879 	bl	8003048 <HAL_GetTick>
 8004f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f58:	e00a      	b.n	8004f70 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f5a:	f7fe f875 	bl	8003048 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d903      	bls.n	8004f70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e15c      	b.n	8005226 <HAL_RCC_OscConfig+0x53a>
 8004f6c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f70:	4b91      	ldr	r3, [pc, #580]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 8004f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1ee      	bne.n	8004f5a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 80a4 	beq.w	80050d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f8a:	4b8b      	ldr	r3, [pc, #556]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10d      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f96:	4b88      	ldr	r3, [pc, #544]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	4a87      	ldr	r2, [pc, #540]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 8004f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8004fa2:	4b85      	ldr	r3, [pc, #532]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004faa:	60bb      	str	r3, [r7, #8]
 8004fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fb2:	4b82      	ldr	r3, [pc, #520]	; (80051bc <HAL_RCC_OscConfig+0x4d0>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d118      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004fbe:	4b7f      	ldr	r3, [pc, #508]	; (80051bc <HAL_RCC_OscConfig+0x4d0>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a7e      	ldr	r2, [pc, #504]	; (80051bc <HAL_RCC_OscConfig+0x4d0>)
 8004fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fca:	f7fe f83d 	bl	8003048 <HAL_GetTick>
 8004fce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fd2:	f7fe f839 	bl	8003048 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b64      	cmp	r3, #100	; 0x64
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e120      	b.n	8005226 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fe4:	4b75      	ldr	r3, [pc, #468]	; (80051bc <HAL_RCC_OscConfig+0x4d0>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0f0      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d106      	bne.n	8005006 <HAL_RCC_OscConfig+0x31a>
 8004ff8:	4b6f      	ldr	r3, [pc, #444]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 8004ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffc:	4a6e      	ldr	r2, [pc, #440]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 8004ffe:	f043 0301 	orr.w	r3, r3, #1
 8005002:	6713      	str	r3, [r2, #112]	; 0x70
 8005004:	e02d      	b.n	8005062 <HAL_RCC_OscConfig+0x376>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10c      	bne.n	8005028 <HAL_RCC_OscConfig+0x33c>
 800500e:	4b6a      	ldr	r3, [pc, #424]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 8005010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005012:	4a69      	ldr	r2, [pc, #420]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 8005014:	f023 0301 	bic.w	r3, r3, #1
 8005018:	6713      	str	r3, [r2, #112]	; 0x70
 800501a:	4b67      	ldr	r3, [pc, #412]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 800501c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501e:	4a66      	ldr	r2, [pc, #408]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 8005020:	f023 0304 	bic.w	r3, r3, #4
 8005024:	6713      	str	r3, [r2, #112]	; 0x70
 8005026:	e01c      	b.n	8005062 <HAL_RCC_OscConfig+0x376>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	2b05      	cmp	r3, #5
 800502e:	d10c      	bne.n	800504a <HAL_RCC_OscConfig+0x35e>
 8005030:	4b61      	ldr	r3, [pc, #388]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 8005032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005034:	4a60      	ldr	r2, [pc, #384]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 8005036:	f043 0304 	orr.w	r3, r3, #4
 800503a:	6713      	str	r3, [r2, #112]	; 0x70
 800503c:	4b5e      	ldr	r3, [pc, #376]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 800503e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005040:	4a5d      	ldr	r2, [pc, #372]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 8005042:	f043 0301 	orr.w	r3, r3, #1
 8005046:	6713      	str	r3, [r2, #112]	; 0x70
 8005048:	e00b      	b.n	8005062 <HAL_RCC_OscConfig+0x376>
 800504a:	4b5b      	ldr	r3, [pc, #364]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 800504c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504e:	4a5a      	ldr	r2, [pc, #360]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 8005050:	f023 0301 	bic.w	r3, r3, #1
 8005054:	6713      	str	r3, [r2, #112]	; 0x70
 8005056:	4b58      	ldr	r3, [pc, #352]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 8005058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505a:	4a57      	ldr	r2, [pc, #348]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 800505c:	f023 0304 	bic.w	r3, r3, #4
 8005060:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d015      	beq.n	8005096 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800506a:	f7fd ffed 	bl	8003048 <HAL_GetTick>
 800506e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005070:	e00a      	b.n	8005088 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005072:	f7fd ffe9 	bl	8003048 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005080:	4293      	cmp	r3, r2
 8005082:	d901      	bls.n	8005088 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e0ce      	b.n	8005226 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005088:	4b4b      	ldr	r3, [pc, #300]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 800508a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0ee      	beq.n	8005072 <HAL_RCC_OscConfig+0x386>
 8005094:	e014      	b.n	80050c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005096:	f7fd ffd7 	bl	8003048 <HAL_GetTick>
 800509a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800509c:	e00a      	b.n	80050b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800509e:	f7fd ffd3 	bl	8003048 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e0b8      	b.n	8005226 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050b4:	4b40      	ldr	r3, [pc, #256]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 80050b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1ee      	bne.n	800509e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050c0:	7dfb      	ldrb	r3, [r7, #23]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d105      	bne.n	80050d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050c6:	4b3c      	ldr	r3, [pc, #240]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	4a3b      	ldr	r2, [pc, #236]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 80050cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f000 80a4 	beq.w	8005224 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050dc:	4b36      	ldr	r3, [pc, #216]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f003 030c 	and.w	r3, r3, #12
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d06b      	beq.n	80051c0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d149      	bne.n	8005184 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050f0:	4b31      	ldr	r3, [pc, #196]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a30      	ldr	r2, [pc, #192]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 80050f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fc:	f7fd ffa4 	bl	8003048 <HAL_GetTick>
 8005100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005102:	e008      	b.n	8005116 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005104:	f7fd ffa0 	bl	8003048 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e087      	b.n	8005226 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005116:	4b28      	ldr	r3, [pc, #160]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1f0      	bne.n	8005104 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	69da      	ldr	r2, [r3, #28]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	431a      	orrs	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	019b      	lsls	r3, r3, #6
 8005132:	431a      	orrs	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005138:	085b      	lsrs	r3, r3, #1
 800513a:	3b01      	subs	r3, #1
 800513c:	041b      	lsls	r3, r3, #16
 800513e:	431a      	orrs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005144:	061b      	lsls	r3, r3, #24
 8005146:	4313      	orrs	r3, r2
 8005148:	4a1b      	ldr	r2, [pc, #108]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 800514a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800514e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005150:	4b19      	ldr	r3, [pc, #100]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a18      	ldr	r2, [pc, #96]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 8005156:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800515a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800515c:	f7fd ff74 	bl	8003048 <HAL_GetTick>
 8005160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005162:	e008      	b.n	8005176 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005164:	f7fd ff70 	bl	8003048 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e057      	b.n	8005226 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005176:	4b10      	ldr	r3, [pc, #64]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0f0      	beq.n	8005164 <HAL_RCC_OscConfig+0x478>
 8005182:	e04f      	b.n	8005224 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005184:	4b0c      	ldr	r3, [pc, #48]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a0b      	ldr	r2, [pc, #44]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 800518a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800518e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005190:	f7fd ff5a 	bl	8003048 <HAL_GetTick>
 8005194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005196:	e008      	b.n	80051aa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005198:	f7fd ff56 	bl	8003048 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e03d      	b.n	8005226 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051aa:	4b03      	ldr	r3, [pc, #12]	; (80051b8 <HAL_RCC_OscConfig+0x4cc>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1f0      	bne.n	8005198 <HAL_RCC_OscConfig+0x4ac>
 80051b6:	e035      	b.n	8005224 <HAL_RCC_OscConfig+0x538>
 80051b8:	40023800 	.word	0x40023800
 80051bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80051c0:	4b1b      	ldr	r3, [pc, #108]	; (8005230 <HAL_RCC_OscConfig+0x544>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d028      	beq.n	8005220 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051d8:	429a      	cmp	r2, r3
 80051da:	d121      	bne.n	8005220 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d11a      	bne.n	8005220 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051f0:	4013      	ands	r3, r2
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d111      	bne.n	8005220 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005206:	085b      	lsrs	r3, r3, #1
 8005208:	3b01      	subs	r3, #1
 800520a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800520c:	429a      	cmp	r2, r3
 800520e:	d107      	bne.n	8005220 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800521c:	429a      	cmp	r2, r3
 800521e:	d001      	beq.n	8005224 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e000      	b.n	8005226 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3718      	adds	r7, #24
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40023800 	.word	0x40023800

08005234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800523e:	2300      	movs	r3, #0
 8005240:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e0d0      	b.n	80053ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800524c:	4b6a      	ldr	r3, [pc, #424]	; (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 030f 	and.w	r3, r3, #15
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	d910      	bls.n	800527c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525a:	4b67      	ldr	r3, [pc, #412]	; (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f023 020f 	bic.w	r2, r3, #15
 8005262:	4965      	ldr	r1, [pc, #404]	; (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	4313      	orrs	r3, r2
 8005268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800526a:	4b63      	ldr	r3, [pc, #396]	; (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	429a      	cmp	r2, r3
 8005276:	d001      	beq.n	800527c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e0b8      	b.n	80053ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d020      	beq.n	80052ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	2b00      	cmp	r3, #0
 8005292:	d005      	beq.n	80052a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005294:	4b59      	ldr	r3, [pc, #356]	; (80053fc <HAL_RCC_ClockConfig+0x1c8>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	4a58      	ldr	r2, [pc, #352]	; (80053fc <HAL_RCC_ClockConfig+0x1c8>)
 800529a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800529e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0308 	and.w	r3, r3, #8
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d005      	beq.n	80052b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052ac:	4b53      	ldr	r3, [pc, #332]	; (80053fc <HAL_RCC_ClockConfig+0x1c8>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	4a52      	ldr	r2, [pc, #328]	; (80053fc <HAL_RCC_ClockConfig+0x1c8>)
 80052b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052b8:	4b50      	ldr	r3, [pc, #320]	; (80053fc <HAL_RCC_ClockConfig+0x1c8>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	494d      	ldr	r1, [pc, #308]	; (80053fc <HAL_RCC_ClockConfig+0x1c8>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d040      	beq.n	8005358 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d107      	bne.n	80052ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052de:	4b47      	ldr	r3, [pc, #284]	; (80053fc <HAL_RCC_ClockConfig+0x1c8>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d115      	bne.n	8005316 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e07f      	b.n	80053ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d107      	bne.n	8005306 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052f6:	4b41      	ldr	r3, [pc, #260]	; (80053fc <HAL_RCC_ClockConfig+0x1c8>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d109      	bne.n	8005316 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e073      	b.n	80053ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005306:	4b3d      	ldr	r3, [pc, #244]	; (80053fc <HAL_RCC_ClockConfig+0x1c8>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e06b      	b.n	80053ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005316:	4b39      	ldr	r3, [pc, #228]	; (80053fc <HAL_RCC_ClockConfig+0x1c8>)
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f023 0203 	bic.w	r2, r3, #3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	4936      	ldr	r1, [pc, #216]	; (80053fc <HAL_RCC_ClockConfig+0x1c8>)
 8005324:	4313      	orrs	r3, r2
 8005326:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005328:	f7fd fe8e 	bl	8003048 <HAL_GetTick>
 800532c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800532e:	e00a      	b.n	8005346 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005330:	f7fd fe8a 	bl	8003048 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	f241 3288 	movw	r2, #5000	; 0x1388
 800533e:	4293      	cmp	r3, r2
 8005340:	d901      	bls.n	8005346 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e053      	b.n	80053ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005346:	4b2d      	ldr	r3, [pc, #180]	; (80053fc <HAL_RCC_ClockConfig+0x1c8>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 020c 	and.w	r2, r3, #12
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	429a      	cmp	r2, r3
 8005356:	d1eb      	bne.n	8005330 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005358:	4b27      	ldr	r3, [pc, #156]	; (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 030f 	and.w	r3, r3, #15
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	429a      	cmp	r2, r3
 8005364:	d210      	bcs.n	8005388 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005366:	4b24      	ldr	r3, [pc, #144]	; (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f023 020f 	bic.w	r2, r3, #15
 800536e:	4922      	ldr	r1, [pc, #136]	; (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	4313      	orrs	r3, r2
 8005374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005376:	4b20      	ldr	r3, [pc, #128]	; (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 030f 	and.w	r3, r3, #15
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	429a      	cmp	r2, r3
 8005382:	d001      	beq.n	8005388 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e032      	b.n	80053ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b00      	cmp	r3, #0
 8005392:	d008      	beq.n	80053a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005394:	4b19      	ldr	r3, [pc, #100]	; (80053fc <HAL_RCC_ClockConfig+0x1c8>)
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	4916      	ldr	r1, [pc, #88]	; (80053fc <HAL_RCC_ClockConfig+0x1c8>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0308 	and.w	r3, r3, #8
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d009      	beq.n	80053c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053b2:	4b12      	ldr	r3, [pc, #72]	; (80053fc <HAL_RCC_ClockConfig+0x1c8>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	490e      	ldr	r1, [pc, #56]	; (80053fc <HAL_RCC_ClockConfig+0x1c8>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053c6:	f000 f821 	bl	800540c <HAL_RCC_GetSysClockFreq>
 80053ca:	4602      	mov	r2, r0
 80053cc:	4b0b      	ldr	r3, [pc, #44]	; (80053fc <HAL_RCC_ClockConfig+0x1c8>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	091b      	lsrs	r3, r3, #4
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	490a      	ldr	r1, [pc, #40]	; (8005400 <HAL_RCC_ClockConfig+0x1cc>)
 80053d8:	5ccb      	ldrb	r3, [r1, r3]
 80053da:	fa22 f303 	lsr.w	r3, r2, r3
 80053de:	4a09      	ldr	r2, [pc, #36]	; (8005404 <HAL_RCC_ClockConfig+0x1d0>)
 80053e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80053e2:	4b09      	ldr	r3, [pc, #36]	; (8005408 <HAL_RCC_ClockConfig+0x1d4>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7fd fdea 	bl	8002fc0 <HAL_InitTick>

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	40023c00 	.word	0x40023c00
 80053fc:	40023800 	.word	0x40023800
 8005400:	0800f3cc 	.word	0x0800f3cc
 8005404:	20000000 	.word	0x20000000
 8005408:	20000004 	.word	0x20000004

0800540c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800540c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005410:	b090      	sub	sp, #64	; 0x40
 8005412:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005414:	2300      	movs	r3, #0
 8005416:	637b      	str	r3, [r7, #52]	; 0x34
 8005418:	2300      	movs	r3, #0
 800541a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800541c:	2300      	movs	r3, #0
 800541e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8005420:	2300      	movs	r3, #0
 8005422:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005424:	4b59      	ldr	r3, [pc, #356]	; (800558c <HAL_RCC_GetSysClockFreq+0x180>)
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f003 030c 	and.w	r3, r3, #12
 800542c:	2b08      	cmp	r3, #8
 800542e:	d00d      	beq.n	800544c <HAL_RCC_GetSysClockFreq+0x40>
 8005430:	2b08      	cmp	r3, #8
 8005432:	f200 80a1 	bhi.w	8005578 <HAL_RCC_GetSysClockFreq+0x16c>
 8005436:	2b00      	cmp	r3, #0
 8005438:	d002      	beq.n	8005440 <HAL_RCC_GetSysClockFreq+0x34>
 800543a:	2b04      	cmp	r3, #4
 800543c:	d003      	beq.n	8005446 <HAL_RCC_GetSysClockFreq+0x3a>
 800543e:	e09b      	b.n	8005578 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005440:	4b53      	ldr	r3, [pc, #332]	; (8005590 <HAL_RCC_GetSysClockFreq+0x184>)
 8005442:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005444:	e09b      	b.n	800557e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005446:	4b53      	ldr	r3, [pc, #332]	; (8005594 <HAL_RCC_GetSysClockFreq+0x188>)
 8005448:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800544a:	e098      	b.n	800557e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800544c:	4b4f      	ldr	r3, [pc, #316]	; (800558c <HAL_RCC_GetSysClockFreq+0x180>)
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005454:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005456:	4b4d      	ldr	r3, [pc, #308]	; (800558c <HAL_RCC_GetSysClockFreq+0x180>)
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d028      	beq.n	80054b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005462:	4b4a      	ldr	r3, [pc, #296]	; (800558c <HAL_RCC_GetSysClockFreq+0x180>)
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	099b      	lsrs	r3, r3, #6
 8005468:	2200      	movs	r2, #0
 800546a:	623b      	str	r3, [r7, #32]
 800546c:	627a      	str	r2, [r7, #36]	; 0x24
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005474:	2100      	movs	r1, #0
 8005476:	4b47      	ldr	r3, [pc, #284]	; (8005594 <HAL_RCC_GetSysClockFreq+0x188>)
 8005478:	fb03 f201 	mul.w	r2, r3, r1
 800547c:	2300      	movs	r3, #0
 800547e:	fb00 f303 	mul.w	r3, r0, r3
 8005482:	4413      	add	r3, r2
 8005484:	4a43      	ldr	r2, [pc, #268]	; (8005594 <HAL_RCC_GetSysClockFreq+0x188>)
 8005486:	fba0 1202 	umull	r1, r2, r0, r2
 800548a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800548c:	460a      	mov	r2, r1
 800548e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005492:	4413      	add	r3, r2
 8005494:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005498:	2200      	movs	r2, #0
 800549a:	61bb      	str	r3, [r7, #24]
 800549c:	61fa      	str	r2, [r7, #28]
 800549e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80054a6:	f7fb fb89 	bl	8000bbc <__aeabi_uldivmod>
 80054aa:	4602      	mov	r2, r0
 80054ac:	460b      	mov	r3, r1
 80054ae:	4613      	mov	r3, r2
 80054b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054b2:	e053      	b.n	800555c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054b4:	4b35      	ldr	r3, [pc, #212]	; (800558c <HAL_RCC_GetSysClockFreq+0x180>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	099b      	lsrs	r3, r3, #6
 80054ba:	2200      	movs	r2, #0
 80054bc:	613b      	str	r3, [r7, #16]
 80054be:	617a      	str	r2, [r7, #20]
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80054c6:	f04f 0b00 	mov.w	fp, #0
 80054ca:	4652      	mov	r2, sl
 80054cc:	465b      	mov	r3, fp
 80054ce:	f04f 0000 	mov.w	r0, #0
 80054d2:	f04f 0100 	mov.w	r1, #0
 80054d6:	0159      	lsls	r1, r3, #5
 80054d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054dc:	0150      	lsls	r0, r2, #5
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	ebb2 080a 	subs.w	r8, r2, sl
 80054e6:	eb63 090b 	sbc.w	r9, r3, fp
 80054ea:	f04f 0200 	mov.w	r2, #0
 80054ee:	f04f 0300 	mov.w	r3, #0
 80054f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80054f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80054fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80054fe:	ebb2 0408 	subs.w	r4, r2, r8
 8005502:	eb63 0509 	sbc.w	r5, r3, r9
 8005506:	f04f 0200 	mov.w	r2, #0
 800550a:	f04f 0300 	mov.w	r3, #0
 800550e:	00eb      	lsls	r3, r5, #3
 8005510:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005514:	00e2      	lsls	r2, r4, #3
 8005516:	4614      	mov	r4, r2
 8005518:	461d      	mov	r5, r3
 800551a:	eb14 030a 	adds.w	r3, r4, sl
 800551e:	603b      	str	r3, [r7, #0]
 8005520:	eb45 030b 	adc.w	r3, r5, fp
 8005524:	607b      	str	r3, [r7, #4]
 8005526:	f04f 0200 	mov.w	r2, #0
 800552a:	f04f 0300 	mov.w	r3, #0
 800552e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005532:	4629      	mov	r1, r5
 8005534:	028b      	lsls	r3, r1, #10
 8005536:	4621      	mov	r1, r4
 8005538:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800553c:	4621      	mov	r1, r4
 800553e:	028a      	lsls	r2, r1, #10
 8005540:	4610      	mov	r0, r2
 8005542:	4619      	mov	r1, r3
 8005544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005546:	2200      	movs	r2, #0
 8005548:	60bb      	str	r3, [r7, #8]
 800554a:	60fa      	str	r2, [r7, #12]
 800554c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005550:	f7fb fb34 	bl	8000bbc <__aeabi_uldivmod>
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	4613      	mov	r3, r2
 800555a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800555c:	4b0b      	ldr	r3, [pc, #44]	; (800558c <HAL_RCC_GetSysClockFreq+0x180>)
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	0c1b      	lsrs	r3, r3, #16
 8005562:	f003 0303 	and.w	r3, r3, #3
 8005566:	3301      	adds	r3, #1
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800556c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800556e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005570:	fbb2 f3f3 	udiv	r3, r2, r3
 8005574:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005576:	e002      	b.n	800557e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005578:	4b05      	ldr	r3, [pc, #20]	; (8005590 <HAL_RCC_GetSysClockFreq+0x184>)
 800557a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800557c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800557e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005580:	4618      	mov	r0, r3
 8005582:	3740      	adds	r7, #64	; 0x40
 8005584:	46bd      	mov	sp, r7
 8005586:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800558a:	bf00      	nop
 800558c:	40023800 	.word	0x40023800
 8005590:	00f42400 	.word	0x00f42400
 8005594:	017d7840 	.word	0x017d7840

08005598 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b088      	sub	sp, #32
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80055a0:	2300      	movs	r3, #0
 80055a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80055a4:	2300      	movs	r3, #0
 80055a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80055a8:	2300      	movs	r3, #0
 80055aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80055ac:	2300      	movs	r3, #0
 80055ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80055b0:	2300      	movs	r3, #0
 80055b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d012      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80055c0:	4b69      	ldr	r3, [pc, #420]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	4a68      	ldr	r2, [pc, #416]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80055ca:	6093      	str	r3, [r2, #8]
 80055cc:	4b66      	ldr	r3, [pc, #408]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ce:	689a      	ldr	r2, [r3, #8]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d4:	4964      	ldr	r1, [pc, #400]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80055e2:	2301      	movs	r3, #1
 80055e4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d017      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055f2:	4b5d      	ldr	r3, [pc, #372]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005600:	4959      	ldr	r1, [pc, #356]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005602:	4313      	orrs	r3, r2
 8005604:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005610:	d101      	bne.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005612:	2301      	movs	r3, #1
 8005614:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800561e:	2301      	movs	r3, #1
 8005620:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d017      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800562e:	4b4e      	ldr	r3, [pc, #312]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005634:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563c:	494a      	ldr	r1, [pc, #296]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800563e:	4313      	orrs	r3, r2
 8005640:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005648:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800564c:	d101      	bne.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800564e:	2301      	movs	r3, #1
 8005650:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800565a:	2301      	movs	r3, #1
 800565c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800566a:	2301      	movs	r3, #1
 800566c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0320 	and.w	r3, r3, #32
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 808b 	beq.w	8005792 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800567c:	4b3a      	ldr	r3, [pc, #232]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800567e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005680:	4a39      	ldr	r2, [pc, #228]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005686:	6413      	str	r3, [r2, #64]	; 0x40
 8005688:	4b37      	ldr	r3, [pc, #220]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800568a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005690:	60bb      	str	r3, [r7, #8]
 8005692:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005694:	4b35      	ldr	r3, [pc, #212]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a34      	ldr	r2, [pc, #208]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800569a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800569e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056a0:	f7fd fcd2 	bl	8003048 <HAL_GetTick>
 80056a4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80056a6:	e008      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056a8:	f7fd fcce 	bl	8003048 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b64      	cmp	r3, #100	; 0x64
 80056b4:	d901      	bls.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e357      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80056ba:	4b2c      	ldr	r3, [pc, #176]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0f0      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056c6:	4b28      	ldr	r3, [pc, #160]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d035      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d02e      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056e4:	4b20      	ldr	r3, [pc, #128]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056ee:	4b1e      	ldr	r3, [pc, #120]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f2:	4a1d      	ldr	r2, [pc, #116]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056f8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056fa:	4b1b      	ldr	r3, [pc, #108]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fe:	4a1a      	ldr	r2, [pc, #104]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005704:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005706:	4a18      	ldr	r2, [pc, #96]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800570c:	4b16      	ldr	r3, [pc, #88]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800570e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b01      	cmp	r3, #1
 8005716:	d114      	bne.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005718:	f7fd fc96 	bl	8003048 <HAL_GetTick>
 800571c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800571e:	e00a      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005720:	f7fd fc92 	bl	8003048 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	f241 3288 	movw	r2, #5000	; 0x1388
 800572e:	4293      	cmp	r3, r2
 8005730:	d901      	bls.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e319      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005736:	4b0c      	ldr	r3, [pc, #48]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b00      	cmp	r3, #0
 8005740:	d0ee      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800574a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800574e:	d111      	bne.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005750:	4b05      	ldr	r3, [pc, #20]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800575c:	4b04      	ldr	r3, [pc, #16]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800575e:	400b      	ands	r3, r1
 8005760:	4901      	ldr	r1, [pc, #4]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005762:	4313      	orrs	r3, r2
 8005764:	608b      	str	r3, [r1, #8]
 8005766:	e00b      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005768:	40023800 	.word	0x40023800
 800576c:	40007000 	.word	0x40007000
 8005770:	0ffffcff 	.word	0x0ffffcff
 8005774:	4baa      	ldr	r3, [pc, #680]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	4aa9      	ldr	r2, [pc, #676]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800577a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800577e:	6093      	str	r3, [r2, #8]
 8005780:	4ba7      	ldr	r3, [pc, #668]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005782:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800578c:	49a4      	ldr	r1, [pc, #656]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800578e:	4313      	orrs	r3, r2
 8005790:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0310 	and.w	r3, r3, #16
 800579a:	2b00      	cmp	r3, #0
 800579c:	d010      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800579e:	4ba0      	ldr	r3, [pc, #640]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057a4:	4a9e      	ldr	r2, [pc, #632]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80057ae:	4b9c      	ldr	r3, [pc, #624]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b8:	4999      	ldr	r1, [pc, #612]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057cc:	4b94      	ldr	r3, [pc, #592]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057da:	4991      	ldr	r1, [pc, #580]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00a      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057ee:	4b8c      	ldr	r3, [pc, #560]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057fc:	4988      	ldr	r1, [pc, #544]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00a      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005810:	4b83      	ldr	r3, [pc, #524]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005816:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800581e:	4980      	ldr	r1, [pc, #512]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005820:	4313      	orrs	r3, r2
 8005822:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00a      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005832:	4b7b      	ldr	r3, [pc, #492]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005838:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005840:	4977      	ldr	r1, [pc, #476]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005842:	4313      	orrs	r3, r2
 8005844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00a      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005854:	4b72      	ldr	r3, [pc, #456]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585a:	f023 0203 	bic.w	r2, r3, #3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005862:	496f      	ldr	r1, [pc, #444]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005864:	4313      	orrs	r3, r2
 8005866:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00a      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005876:	4b6a      	ldr	r3, [pc, #424]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800587c:	f023 020c 	bic.w	r2, r3, #12
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005884:	4966      	ldr	r1, [pc, #408]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005886:	4313      	orrs	r3, r2
 8005888:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00a      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005898:	4b61      	ldr	r3, [pc, #388]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800589a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058a6:	495e      	ldr	r1, [pc, #376]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00a      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058ba:	4b59      	ldr	r3, [pc, #356]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058c8:	4955      	ldr	r1, [pc, #340]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00a      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058dc:	4b50      	ldr	r3, [pc, #320]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ea:	494d      	ldr	r1, [pc, #308]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00a      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80058fe:	4b48      	ldr	r3, [pc, #288]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005904:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800590c:	4944      	ldr	r1, [pc, #272]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800590e:	4313      	orrs	r3, r2
 8005910:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00a      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005920:	4b3f      	ldr	r3, [pc, #252]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005926:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800592e:	493c      	ldr	r1, [pc, #240]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005930:	4313      	orrs	r3, r2
 8005932:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00a      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005942:	4b37      	ldr	r3, [pc, #220]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005948:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005950:	4933      	ldr	r1, [pc, #204]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005952:	4313      	orrs	r3, r2
 8005954:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00a      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005964:	4b2e      	ldr	r3, [pc, #184]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800596a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005972:	492b      	ldr	r1, [pc, #172]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005974:	4313      	orrs	r3, r2
 8005976:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d011      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005986:	4b26      	ldr	r3, [pc, #152]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800598c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005994:	4922      	ldr	r1, [pc, #136]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005996:	4313      	orrs	r3, r2
 8005998:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059a4:	d101      	bne.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80059a6:	2301      	movs	r3, #1
 80059a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0308 	and.w	r3, r3, #8
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80059b6:	2301      	movs	r3, #1
 80059b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059c6:	4b16      	ldr	r3, [pc, #88]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059d4:	4912      	ldr	r1, [pc, #72]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00b      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059e8:	4b0d      	ldr	r3, [pc, #52]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059f8:	4909      	ldr	r1, [pc, #36]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d006      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 80d9 	beq.w	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a14:	4b02      	ldr	r3, [pc, #8]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a01      	ldr	r2, [pc, #4]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a1e:	e001      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005a20:	40023800 	.word	0x40023800
 8005a24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a26:	f7fd fb0f 	bl	8003048 <HAL_GetTick>
 8005a2a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a2c:	e008      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a2e:	f7fd fb0b 	bl	8003048 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b64      	cmp	r3, #100	; 0x64
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e194      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a40:	4b6c      	ldr	r3, [pc, #432]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1f0      	bne.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d021      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d11d      	bne.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005a60:	4b64      	ldr	r3, [pc, #400]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a66:	0c1b      	lsrs	r3, r3, #16
 8005a68:	f003 0303 	and.w	r3, r3, #3
 8005a6c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005a6e:	4b61      	ldr	r3, [pc, #388]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a74:	0e1b      	lsrs	r3, r3, #24
 8005a76:	f003 030f 	and.w	r3, r3, #15
 8005a7a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	019a      	lsls	r2, r3, #6
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	041b      	lsls	r3, r3, #16
 8005a86:	431a      	orrs	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	061b      	lsls	r3, r3, #24
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	071b      	lsls	r3, r3, #28
 8005a94:	4957      	ldr	r1, [pc, #348]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d004      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ab0:	d00a      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d02e      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ac6:	d129      	bne.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005ac8:	4b4a      	ldr	r3, [pc, #296]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ace:	0c1b      	lsrs	r3, r3, #16
 8005ad0:	f003 0303 	and.w	r3, r3, #3
 8005ad4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005ad6:	4b47      	ldr	r3, [pc, #284]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005adc:	0f1b      	lsrs	r3, r3, #28
 8005ade:	f003 0307 	and.w	r3, r3, #7
 8005ae2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	019a      	lsls	r2, r3, #6
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	041b      	lsls	r3, r3, #16
 8005aee:	431a      	orrs	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	061b      	lsls	r3, r3, #24
 8005af6:	431a      	orrs	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	071b      	lsls	r3, r3, #28
 8005afc:	493d      	ldr	r1, [pc, #244]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b04:	4b3b      	ldr	r3, [pc, #236]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b0a:	f023 021f 	bic.w	r2, r3, #31
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	3b01      	subs	r3, #1
 8005b14:	4937      	ldr	r1, [pc, #220]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d01d      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b28:	4b32      	ldr	r3, [pc, #200]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b2e:	0e1b      	lsrs	r3, r3, #24
 8005b30:	f003 030f 	and.w	r3, r3, #15
 8005b34:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b36:	4b2f      	ldr	r3, [pc, #188]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b3c:	0f1b      	lsrs	r3, r3, #28
 8005b3e:	f003 0307 	and.w	r3, r3, #7
 8005b42:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	019a      	lsls	r2, r3, #6
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	041b      	lsls	r3, r3, #16
 8005b50:	431a      	orrs	r2, r3
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	061b      	lsls	r3, r3, #24
 8005b56:	431a      	orrs	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	071b      	lsls	r3, r3, #28
 8005b5c:	4925      	ldr	r1, [pc, #148]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d011      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	019a      	lsls	r2, r3, #6
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	041b      	lsls	r3, r3, #16
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	061b      	lsls	r3, r3, #24
 8005b84:	431a      	orrs	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	071b      	lsls	r3, r3, #28
 8005b8c:	4919      	ldr	r1, [pc, #100]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b94:	4b17      	ldr	r3, [pc, #92]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a16      	ldr	r2, [pc, #88]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ba0:	f7fd fa52 	bl	8003048 <HAL_GetTick>
 8005ba4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ba6:	e008      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ba8:	f7fd fa4e 	bl	8003048 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b64      	cmp	r3, #100	; 0x64
 8005bb4:	d901      	bls.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e0d7      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bba:	4b0e      	ldr	r3, [pc, #56]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d0f0      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	f040 80cd 	bne.w	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005bce:	4b09      	ldr	r3, [pc, #36]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a08      	ldr	r2, [pc, #32]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bda:	f7fd fa35 	bl	8003048 <HAL_GetTick>
 8005bde:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005be0:	e00a      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005be2:	f7fd fa31 	bl	8003048 <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	2b64      	cmp	r3, #100	; 0x64
 8005bee:	d903      	bls.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e0ba      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005bf4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005bf8:	4b5e      	ldr	r3, [pc, #376]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c04:	d0ed      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d009      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d02e      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d12a      	bne.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005c2e:	4b51      	ldr	r3, [pc, #324]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c34:	0c1b      	lsrs	r3, r3, #16
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c3c:	4b4d      	ldr	r3, [pc, #308]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c42:	0f1b      	lsrs	r3, r3, #28
 8005c44:	f003 0307 	and.w	r3, r3, #7
 8005c48:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	019a      	lsls	r2, r3, #6
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	041b      	lsls	r3, r3, #16
 8005c54:	431a      	orrs	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	061b      	lsls	r3, r3, #24
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	071b      	lsls	r3, r3, #28
 8005c62:	4944      	ldr	r1, [pc, #272]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005c6a:	4b42      	ldr	r3, [pc, #264]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c70:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	021b      	lsls	r3, r3, #8
 8005c7c:	493d      	ldr	r1, [pc, #244]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d022      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c98:	d11d      	bne.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c9a:	4b36      	ldr	r3, [pc, #216]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca0:	0e1b      	lsrs	r3, r3, #24
 8005ca2:	f003 030f 	and.w	r3, r3, #15
 8005ca6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ca8:	4b32      	ldr	r3, [pc, #200]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cae:	0f1b      	lsrs	r3, r3, #28
 8005cb0:	f003 0307 	and.w	r3, r3, #7
 8005cb4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	019a      	lsls	r2, r3, #6
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a1b      	ldr	r3, [r3, #32]
 8005cc0:	041b      	lsls	r3, r3, #16
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	061b      	lsls	r3, r3, #24
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	071b      	lsls	r3, r3, #28
 8005cce:	4929      	ldr	r1, [pc, #164]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0308 	and.w	r3, r3, #8
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d028      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ce2:	4b24      	ldr	r3, [pc, #144]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce8:	0e1b      	lsrs	r3, r3, #24
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005cf0:	4b20      	ldr	r3, [pc, #128]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf6:	0c1b      	lsrs	r3, r3, #16
 8005cf8:	f003 0303 	and.w	r3, r3, #3
 8005cfc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	019a      	lsls	r2, r3, #6
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	041b      	lsls	r3, r3, #16
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	061b      	lsls	r3, r3, #24
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	071b      	lsls	r3, r3, #28
 8005d16:	4917      	ldr	r1, [pc, #92]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005d1e:	4b15      	ldr	r3, [pc, #84]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2c:	4911      	ldr	r1, [pc, #68]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005d34:	4b0f      	ldr	r3, [pc, #60]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a0e      	ldr	r2, [pc, #56]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d40:	f7fd f982 	bl	8003048 <HAL_GetTick>
 8005d44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d46:	e008      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d48:	f7fd f97e 	bl	8003048 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b64      	cmp	r3, #100	; 0x64
 8005d54:	d901      	bls.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e007      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d5a:	4b06      	ldr	r3, [pc, #24]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d66:	d1ef      	bne.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3720      	adds	r7, #32
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	40023800 	.word	0x40023800

08005d78 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e022      	b.n	8005dd0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d105      	bne.n	8005da2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f7fc fda3 	bl	80028e8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2203      	movs	r2, #3
 8005da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f814 	bl	8005dd8 <HAL_SD_InitCard>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e00a      	b.n	8005dd0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3708      	adds	r7, #8
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005dd8:	b5b0      	push	{r4, r5, r7, lr}
 8005dda:	b08e      	sub	sp, #56	; 0x38
 8005ddc:	af04      	add	r7, sp, #16
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005de0:	2300      	movs	r3, #0
 8005de2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8005de4:	2300      	movs	r3, #0
 8005de6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005de8:	2300      	movs	r3, #0
 8005dea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005dec:	2300      	movs	r3, #0
 8005dee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005df0:	2300      	movs	r3, #0
 8005df2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8005df4:	2376      	movs	r3, #118	; 0x76
 8005df6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681d      	ldr	r5, [r3, #0]
 8005dfc:	466c      	mov	r4, sp
 8005dfe:	f107 0314 	add.w	r3, r7, #20
 8005e02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005e0a:	f107 0308 	add.w	r3, r7, #8
 8005e0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e10:	4628      	mov	r0, r5
 8005e12:	f000 ff41 	bl	8006c98 <SDMMC_Init>
 8005e16:	4603      	mov	r3, r0
 8005e18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d001      	beq.n	8005e28 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e059      	b.n	8005edc <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e36:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 ff75 	bl	8006d2c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e50:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005e52:	2002      	movs	r0, #2
 8005e54:	f7fd f904 	bl	8003060 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 fe67 	bl	8006b2c <SD_PowerON>
 8005e5e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e60:	6a3b      	ldr	r3, [r7, #32]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00b      	beq.n	8005e7e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e72:	6a3b      	ldr	r3, [r7, #32]
 8005e74:	431a      	orrs	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e02e      	b.n	8005edc <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fd86 	bl	8006990 <SD_InitCard>
 8005e84:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e86:	6a3b      	ldr	r3, [r7, #32]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00b      	beq.n	8005ea4 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e98:	6a3b      	ldr	r3, [r7, #32]
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e01b      	b.n	8005edc <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005eac:	4618      	mov	r0, r3
 8005eae:	f000 ffcf 	bl	8006e50 <SDMMC_CmdBlockLength>
 8005eb2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00f      	beq.n	8005eda <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a09      	ldr	r2, [pc, #36]	; (8005ee4 <HAL_SD_InitCard+0x10c>)
 8005ec0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ec6:	6a3b      	ldr	r3, [r7, #32]
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e000      	b.n	8005edc <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3728      	adds	r7, #40	; 0x28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ee4:	004005ff 	.word	0x004005ff

08005ee8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b092      	sub	sp, #72	; 0x48
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
 8005ef4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005ef6:	f7fd f8a7 	bl	8003048 <HAL_GetTick>
 8005efa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d107      	bne.n	8005f1a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e1bd      	b.n	8006296 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	f040 81b0 	bne.w	8006288 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005f2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	441a      	add	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d907      	bls.n	8005f4c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f40:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e1a4      	b.n	8006296 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2203      	movs	r2, #3
 8005f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d002      	beq.n	8005f6a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f66:	025b      	lsls	r3, r3, #9
 8005f68:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005f6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f6e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	025b      	lsls	r3, r3, #9
 8005f74:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005f76:	2390      	movs	r3, #144	; 0x90
 8005f78:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8005f82:	2301      	movs	r3, #1
 8005f84:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f107 0214 	add.w	r2, r7, #20
 8005f8e:	4611      	mov	r1, r2
 8005f90:	4618      	mov	r0, r3
 8005f92:	f000 ff31 	bl	8006df8 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d90a      	bls.n	8005fb2 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 ff95 	bl	8006ed8 <SDMMC_CmdReadMultiBlock>
 8005fae:	6478      	str	r0, [r7, #68]	; 0x44
 8005fb0:	e009      	b.n	8005fc6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 ff68 	bl	8006e94 <SDMMC_CmdReadSingleBlock>
 8005fc4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d012      	beq.n	8005ff2 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a7a      	ldr	r2, [pc, #488]	; (80061bc <HAL_SD_ReadBlocks+0x2d4>)
 8005fd2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e151      	b.n	8006296 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005ff6:	e061      	b.n	80060bc <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ffe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d03c      	beq.n	8006080 <HAL_SD_ReadBlocks+0x198>
 8006006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006008:	2b00      	cmp	r3, #0
 800600a:	d039      	beq.n	8006080 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800600c:	2300      	movs	r3, #0
 800600e:	643b      	str	r3, [r7, #64]	; 0x40
 8006010:	e033      	b.n	800607a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4618      	mov	r0, r3
 8006018:	f000 fe6a 	bl	8006cf0 <SDMMC_ReadFIFO>
 800601c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006020:	b2da      	uxtb	r2, r3
 8006022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006024:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006028:	3301      	adds	r3, #1
 800602a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800602c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800602e:	3b01      	subs	r3, #1
 8006030:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006034:	0a1b      	lsrs	r3, r3, #8
 8006036:	b2da      	uxtb	r2, r3
 8006038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800603c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603e:	3301      	adds	r3, #1
 8006040:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006044:	3b01      	subs	r3, #1
 8006046:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604a:	0c1b      	lsrs	r3, r3, #16
 800604c:	b2da      	uxtb	r2, r3
 800604e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006050:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006054:	3301      	adds	r3, #1
 8006056:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800605a:	3b01      	subs	r3, #1
 800605c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800605e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006060:	0e1b      	lsrs	r3, r3, #24
 8006062:	b2da      	uxtb	r2, r3
 8006064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006066:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606a:	3301      	adds	r3, #1
 800606c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800606e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006070:	3b01      	subs	r3, #1
 8006072:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8006074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006076:	3301      	adds	r3, #1
 8006078:	643b      	str	r3, [r7, #64]	; 0x40
 800607a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800607c:	2b07      	cmp	r3, #7
 800607e:	d9c8      	bls.n	8006012 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006080:	f7fc ffe2 	bl	8003048 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800608c:	429a      	cmp	r2, r3
 800608e:	d902      	bls.n	8006096 <HAL_SD_ReadBlocks+0x1ae>
 8006090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006092:	2b00      	cmp	r3, #0
 8006094:	d112      	bne.n	80060bc <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a48      	ldr	r2, [pc, #288]	; (80061bc <HAL_SD_ReadBlocks+0x2d4>)
 800609c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e0ec      	b.n	8006296 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d096      	beq.n	8005ff8 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d022      	beq.n	800611e <HAL_SD_ReadBlocks+0x236>
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d91f      	bls.n	800611e <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060e2:	2b03      	cmp	r3, #3
 80060e4:	d01b      	beq.n	800611e <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 ff5a 	bl	8006fa4 <SDMMC_CmdStopTransfer>
 80060f0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80060f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d012      	beq.n	800611e <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a2f      	ldr	r2, [pc, #188]	; (80061bc <HAL_SD_ReadBlocks+0x2d4>)
 80060fe:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006106:	431a      	orrs	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e0bb      	b.n	8006296 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006124:	f003 0308 	and.w	r3, r3, #8
 8006128:	2b00      	cmp	r3, #0
 800612a:	d012      	beq.n	8006152 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a22      	ldr	r2, [pc, #136]	; (80061bc <HAL_SD_ReadBlocks+0x2d4>)
 8006132:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006138:	f043 0208 	orr.w	r2, r3, #8
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e0a1      	b.n	8006296 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006158:	f003 0302 	and.w	r3, r3, #2
 800615c:	2b00      	cmp	r3, #0
 800615e:	d012      	beq.n	8006186 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a15      	ldr	r2, [pc, #84]	; (80061bc <HAL_SD_ReadBlocks+0x2d4>)
 8006166:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616c:	f043 0202 	orr.w	r2, r3, #2
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e087      	b.n	8006296 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800618c:	f003 0320 	and.w	r3, r3, #32
 8006190:	2b00      	cmp	r3, #0
 8006192:	d064      	beq.n	800625e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a08      	ldr	r2, [pc, #32]	; (80061bc <HAL_SD_ReadBlocks+0x2d4>)
 800619a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a0:	f043 0220 	orr.w	r2, r3, #32
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e06d      	b.n	8006296 <HAL_SD_ReadBlocks+0x3ae>
 80061ba:	bf00      	nop
 80061bc:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 fd93 	bl	8006cf0 <SDMMC_ReadFIFO>
 80061ca:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80061cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80061d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d6:	3301      	adds	r3, #1
 80061d8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80061da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061dc:	3b01      	subs	r3, #1
 80061de:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80061e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e2:	0a1b      	lsrs	r3, r3, #8
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80061ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ec:	3301      	adds	r3, #1
 80061ee:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80061f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f2:	3b01      	subs	r3, #1
 80061f4:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80061f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f8:	0c1b      	lsrs	r3, r3, #16
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061fe:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006202:	3301      	adds	r3, #1
 8006204:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006208:	3b01      	subs	r3, #1
 800620a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800620c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620e:	0e1b      	lsrs	r3, r3, #24
 8006210:	b2da      	uxtb	r2, r3
 8006212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006214:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006218:	3301      	adds	r3, #1
 800621a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800621c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800621e:	3b01      	subs	r3, #1
 8006220:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006222:	f7fc ff11 	bl	8003048 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800622e:	429a      	cmp	r2, r3
 8006230:	d902      	bls.n	8006238 <HAL_SD_ReadBlocks+0x350>
 8006232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006234:	2b00      	cmp	r3, #0
 8006236:	d112      	bne.n	800625e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a18      	ldr	r2, [pc, #96]	; (80062a0 <HAL_SD_ReadBlocks+0x3b8>)
 800623e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006244:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e01b      	b.n	8006296 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d002      	beq.n	8006272 <HAL_SD_ReadBlocks+0x38a>
 800626c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1a6      	bne.n	80061c0 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f240 523a 	movw	r2, #1338	; 0x53a
 800627a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006284:	2300      	movs	r3, #0
 8006286:	e006      	b.n	8006296 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
  }
}
 8006296:	4618      	mov	r0, r3
 8006298:	3748      	adds	r7, #72	; 0x48
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	004005ff 	.word	0x004005ff

080062a4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b092      	sub	sp, #72	; 0x48
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
 80062b0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80062b2:	f7fc fec9 	bl	8003048 <HAL_GetTick>
 80062b6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d107      	bne.n	80062d6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e165      	b.n	80065a2 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b01      	cmp	r3, #1
 80062e0:	f040 8158 	bne.w	8006594 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80062ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	441a      	add	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d907      	bls.n	8006308 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e14c      	b.n	80065a2 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2203      	movs	r2, #3
 800630c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2200      	movs	r2, #0
 8006316:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800631c:	2b01      	cmp	r3, #1
 800631e:	d002      	beq.n	8006326 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006322:	025b      	lsls	r3, r3, #9
 8006324:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800632a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	025b      	lsls	r3, r3, #9
 8006330:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006332:	2390      	movs	r3, #144	; 0x90
 8006334:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006336:	2300      	movs	r3, #0
 8006338:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800633a:	2300      	movs	r3, #0
 800633c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800633e:	2301      	movs	r3, #1
 8006340:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f107 0218 	add.w	r2, r7, #24
 800634a:	4611      	mov	r1, r2
 800634c:	4618      	mov	r0, r3
 800634e:	f000 fd53 	bl	8006df8 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d90a      	bls.n	800636e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2220      	movs	r2, #32
 800635c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006364:	4618      	mov	r0, r3
 8006366:	f000 fdfb 	bl	8006f60 <SDMMC_CmdWriteMultiBlock>
 800636a:	6478      	str	r0, [r7, #68]	; 0x44
 800636c:	e009      	b.n	8006382 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2210      	movs	r2, #16
 8006372:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800637a:	4618      	mov	r0, r3
 800637c:	f000 fdce 	bl	8006f1c <SDMMC_CmdWriteSingleBlock>
 8006380:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006384:	2b00      	cmp	r3, #0
 8006386:	d012      	beq.n	80063ae <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a87      	ldr	r2, [pc, #540]	; (80065ac <HAL_SD_WriteBlocks+0x308>)
 800638e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006396:	431a      	orrs	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e0f9      	b.n	80065a2 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80063b2:	e065      	b.n	8006480 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d040      	beq.n	8006444 <HAL_SD_WriteBlocks+0x1a0>
 80063c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d03d      	beq.n	8006444 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80063c8:	2300      	movs	r3, #0
 80063ca:	643b      	str	r3, [r7, #64]	; 0x40
 80063cc:	e037      	b.n	800643e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80063ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80063d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d6:	3301      	adds	r3, #1
 80063d8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80063da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063dc:	3b01      	subs	r3, #1
 80063de:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80063e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	021a      	lsls	r2, r3, #8
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80063ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ee:	3301      	adds	r3, #1
 80063f0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80063f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063f4:	3b01      	subs	r3, #1
 80063f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80063f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	041a      	lsls	r2, r3, #16
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	4313      	orrs	r3, r2
 8006402:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006406:	3301      	adds	r3, #1
 8006408:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800640a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800640c:	3b01      	subs	r3, #1
 800640e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	061a      	lsls	r2, r3, #24
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	4313      	orrs	r3, r2
 800641a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800641c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800641e:	3301      	adds	r3, #1
 8006420:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006424:	3b01      	subs	r3, #1
 8006426:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f107 0214 	add.w	r2, r7, #20
 8006430:	4611      	mov	r1, r2
 8006432:	4618      	mov	r0, r3
 8006434:	f000 fc69 	bl	8006d0a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800643a:	3301      	adds	r3, #1
 800643c:	643b      	str	r3, [r7, #64]	; 0x40
 800643e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006440:	2b07      	cmp	r3, #7
 8006442:	d9c4      	bls.n	80063ce <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006444:	f7fc fe00 	bl	8003048 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006450:	429a      	cmp	r2, r3
 8006452:	d902      	bls.n	800645a <HAL_SD_WriteBlocks+0x1b6>
 8006454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006456:	2b00      	cmp	r3, #0
 8006458:	d112      	bne.n	8006480 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a53      	ldr	r2, [pc, #332]	; (80065ac <HAL_SD_WriteBlocks+0x308>)
 8006460:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006468:	431a      	orrs	r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	e090      	b.n	80065a2 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006486:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800648a:	2b00      	cmp	r3, #0
 800648c:	d092      	beq.n	80063b4 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006498:	2b00      	cmp	r3, #0
 800649a:	d022      	beq.n	80064e2 <HAL_SD_WriteBlocks+0x23e>
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d91f      	bls.n	80064e2 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a6:	2b03      	cmp	r3, #3
 80064a8:	d01b      	beq.n	80064e2 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 fd78 	bl	8006fa4 <SDMMC_CmdStopTransfer>
 80064b4:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80064b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d012      	beq.n	80064e2 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a3a      	ldr	r2, [pc, #232]	; (80065ac <HAL_SD_WriteBlocks+0x308>)
 80064c2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064ca:	431a      	orrs	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e05f      	b.n	80065a2 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e8:	f003 0308 	and.w	r3, r3, #8
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d012      	beq.n	8006516 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a2d      	ldr	r2, [pc, #180]	; (80065ac <HAL_SD_WriteBlocks+0x308>)
 80064f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fc:	f043 0208 	orr.w	r2, r3, #8
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e045      	b.n	80065a2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800651c:	f003 0302 	and.w	r3, r3, #2
 8006520:	2b00      	cmp	r3, #0
 8006522:	d012      	beq.n	800654a <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a20      	ldr	r2, [pc, #128]	; (80065ac <HAL_SD_WriteBlocks+0x308>)
 800652a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006530:	f043 0202 	orr.w	r2, r3, #2
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e02b      	b.n	80065a2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006550:	f003 0310 	and.w	r3, r3, #16
 8006554:	2b00      	cmp	r3, #0
 8006556:	d012      	beq.n	800657e <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a13      	ldr	r2, [pc, #76]	; (80065ac <HAL_SD_WriteBlocks+0x308>)
 800655e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006564:	f043 0210 	orr.w	r2, r3, #16
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e011      	b.n	80065a2 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f240 523a 	movw	r2, #1338	; 0x53a
 8006586:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006590:	2300      	movs	r3, #0
 8006592:	e006      	b.n	80065a2 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006598:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
  }
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3748      	adds	r7, #72	; 0x48
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	004005ff 	.word	0x004005ff

080065b0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065be:	0f9b      	lsrs	r3, r3, #30
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065ca:	0e9b      	lsrs	r3, r3, #26
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	f003 030f 	and.w	r3, r3, #15
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065dc:	0e1b      	lsrs	r3, r3, #24
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	f003 0303 	and.w	r3, r3, #3
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065ee:	0c1b      	lsrs	r3, r3, #16
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065fa:	0a1b      	lsrs	r3, r3, #8
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006606:	b2da      	uxtb	r2, r3
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006610:	0d1b      	lsrs	r3, r3, #20
 8006612:	b29a      	uxth	r2, r3
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800661c:	0c1b      	lsrs	r3, r3, #16
 800661e:	b2db      	uxtb	r3, r3
 8006620:	f003 030f 	and.w	r3, r3, #15
 8006624:	b2da      	uxtb	r2, r3
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800662e:	0bdb      	lsrs	r3, r3, #15
 8006630:	b2db      	uxtb	r3, r3
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	b2da      	uxtb	r2, r3
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006640:	0b9b      	lsrs	r3, r3, #14
 8006642:	b2db      	uxtb	r3, r3
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	b2da      	uxtb	r2, r3
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006652:	0b5b      	lsrs	r3, r3, #13
 8006654:	b2db      	uxtb	r3, r3
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	b2da      	uxtb	r2, r3
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006664:	0b1b      	lsrs	r3, r3, #12
 8006666:	b2db      	uxtb	r3, r3
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	b2da      	uxtb	r2, r3
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2200      	movs	r2, #0
 8006676:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800667c:	2b00      	cmp	r3, #0
 800667e:	d163      	bne.n	8006748 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006684:	009a      	lsls	r2, r3, #2
 8006686:	f640 73fc 	movw	r3, #4092	; 0xffc
 800668a:	4013      	ands	r3, r2
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006690:	0f92      	lsrs	r2, r2, #30
 8006692:	431a      	orrs	r2, r3
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800669c:	0edb      	lsrs	r3, r3, #27
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	f003 0307 	and.w	r3, r3, #7
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066ae:	0e1b      	lsrs	r3, r3, #24
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	f003 0307 	and.w	r3, r3, #7
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066c0:	0d5b      	lsrs	r3, r3, #21
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	f003 0307 	and.w	r3, r3, #7
 80066c8:	b2da      	uxtb	r2, r3
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066d2:	0c9b      	lsrs	r3, r3, #18
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	f003 0307 	and.w	r3, r3, #7
 80066da:	b2da      	uxtb	r2, r3
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066e4:	0bdb      	lsrs	r3, r3, #15
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	f003 0307 	and.w	r3, r3, #7
 80066ec:	b2da      	uxtb	r2, r3
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	1c5a      	adds	r2, r3, #1
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	7e1b      	ldrb	r3, [r3, #24]
 8006700:	b2db      	uxtb	r3, r3
 8006702:	f003 0307 	and.w	r3, r3, #7
 8006706:	3302      	adds	r3, #2
 8006708:	2201      	movs	r2, #1
 800670a:	fa02 f303 	lsl.w	r3, r2, r3
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006712:	fb03 f202 	mul.w	r2, r3, r2
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	7a1b      	ldrb	r3, [r3, #8]
 800671e:	b2db      	uxtb	r3, r3
 8006720:	f003 030f 	and.w	r3, r3, #15
 8006724:	2201      	movs	r2, #1
 8006726:	409a      	lsls	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006734:	0a52      	lsrs	r2, r2, #9
 8006736:	fb03 f202 	mul.w	r2, r3, r2
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006744:	661a      	str	r2, [r3, #96]	; 0x60
 8006746:	e031      	b.n	80067ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800674c:	2b01      	cmp	r3, #1
 800674e:	d11d      	bne.n	800678c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006754:	041b      	lsls	r3, r3, #16
 8006756:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800675e:	0c1b      	lsrs	r3, r3, #16
 8006760:	431a      	orrs	r2, r3
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	3301      	adds	r3, #1
 800676c:	029a      	lsls	r2, r3, #10
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006780:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	661a      	str	r2, [r3, #96]	; 0x60
 800678a:	e00f      	b.n	80067ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a58      	ldr	r2, [pc, #352]	; (80068f4 <HAL_SD_GetCardCSD+0x344>)
 8006792:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006798:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e09d      	b.n	80068e8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067b0:	0b9b      	lsrs	r3, r3, #14
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067c2:	09db      	lsrs	r3, r3, #7
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e4:	0fdb      	lsrs	r3, r3, #31
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f0:	0f5b      	lsrs	r3, r3, #29
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	f003 0303 	and.w	r3, r3, #3
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006802:	0e9b      	lsrs	r3, r3, #26
 8006804:	b2db      	uxtb	r3, r3
 8006806:	f003 0307 	and.w	r3, r3, #7
 800680a:	b2da      	uxtb	r2, r3
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006814:	0d9b      	lsrs	r3, r3, #22
 8006816:	b2db      	uxtb	r3, r3
 8006818:	f003 030f 	and.w	r3, r3, #15
 800681c:	b2da      	uxtb	r2, r3
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006826:	0d5b      	lsrs	r3, r3, #21
 8006828:	b2db      	uxtb	r3, r3
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	b2da      	uxtb	r2, r3
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006842:	0c1b      	lsrs	r3, r3, #16
 8006844:	b2db      	uxtb	r3, r3
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	b2da      	uxtb	r2, r3
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006856:	0bdb      	lsrs	r3, r3, #15
 8006858:	b2db      	uxtb	r3, r3
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	b2da      	uxtb	r2, r3
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686a:	0b9b      	lsrs	r3, r3, #14
 800686c:	b2db      	uxtb	r3, r3
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	b2da      	uxtb	r2, r3
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687e:	0b5b      	lsrs	r3, r3, #13
 8006880:	b2db      	uxtb	r3, r3
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	b2da      	uxtb	r2, r3
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006892:	0b1b      	lsrs	r3, r3, #12
 8006894:	b2db      	uxtb	r3, r3
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	b2da      	uxtb	r2, r3
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a6:	0a9b      	lsrs	r3, r3, #10
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	f003 0303 	and.w	r3, r3, #3
 80068ae:	b2da      	uxtb	r2, r3
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ba:	0a1b      	lsrs	r3, r3, #8
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	f003 0303 	and.w	r3, r3, #3
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ce:	085b      	lsrs	r3, r3, #1
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr
 80068f4:	004005ff 	.word	0x004005ff

080068f8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006958:	2300      	movs	r3, #0
 800695a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800695c:	f107 030c 	add.w	r3, r7, #12
 8006960:	4619      	mov	r1, r3
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f970 	bl	8006c48 <SD_SendStatus>
 8006968:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d005      	beq.n	800697c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	431a      	orrs	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	0a5b      	lsrs	r3, r3, #9
 8006980:	f003 030f 	and.w	r3, r3, #15
 8006984:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006986:	693b      	ldr	r3, [r7, #16]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3718      	adds	r7, #24
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006990:	b5b0      	push	{r4, r5, r7, lr}
 8006992:	b094      	sub	sp, #80	; 0x50
 8006994:	af04      	add	r7, sp, #16
 8006996:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006998:	2301      	movs	r3, #1
 800699a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 f9d1 	bl	8006d48 <SDMMC_GetPowerState>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d102      	bne.n	80069b2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80069ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80069b0:	e0b8      	b.n	8006b24 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b6:	2b03      	cmp	r3, #3
 80069b8:	d02f      	beq.n	8006a1a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 fbb8 	bl	8007134 <SDMMC_CmdSendCID>
 80069c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80069c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d001      	beq.n	80069d0 <SD_InitCard+0x40>
    {
      return errorstate;
 80069cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ce:	e0a9      	b.n	8006b24 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2100      	movs	r1, #0
 80069d6:	4618      	mov	r0, r3
 80069d8:	f000 f9fb 	bl	8006dd2 <SDMMC_GetResponse>
 80069dc:	4602      	mov	r2, r0
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2104      	movs	r1, #4
 80069e8:	4618      	mov	r0, r3
 80069ea:	f000 f9f2 	bl	8006dd2 <SDMMC_GetResponse>
 80069ee:	4602      	mov	r2, r0
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2108      	movs	r1, #8
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 f9e9 	bl	8006dd2 <SDMMC_GetResponse>
 8006a00:	4602      	mov	r2, r0
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	210c      	movs	r1, #12
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f000 f9e0 	bl	8006dd2 <SDMMC_GetResponse>
 8006a12:	4602      	mov	r2, r0
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a1e:	2b03      	cmp	r3, #3
 8006a20:	d00d      	beq.n	8006a3e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f107 020e 	add.w	r2, r7, #14
 8006a2a:	4611      	mov	r1, r2
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f000 fbbe 	bl	80071ae <SDMMC_CmdSetRelAdd>
 8006a32:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d001      	beq.n	8006a3e <SD_InitCard+0xae>
    {
      return errorstate;
 8006a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a3c:	e072      	b.n	8006b24 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a42:	2b03      	cmp	r3, #3
 8006a44:	d036      	beq.n	8006ab4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006a46:	89fb      	ldrh	r3, [r7, #14]
 8006a48:	461a      	mov	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a56:	041b      	lsls	r3, r3, #16
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4610      	mov	r0, r2
 8006a5c:	f000 fb88 	bl	8007170 <SDMMC_CmdSendCSD>
 8006a60:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d001      	beq.n	8006a6c <SD_InitCard+0xdc>
    {
      return errorstate;
 8006a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a6a:	e05b      	b.n	8006b24 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2100      	movs	r1, #0
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 f9ad 	bl	8006dd2 <SDMMC_GetResponse>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2104      	movs	r1, #4
 8006a84:	4618      	mov	r0, r3
 8006a86:	f000 f9a4 	bl	8006dd2 <SDMMC_GetResponse>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2108      	movs	r1, #8
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 f99b 	bl	8006dd2 <SDMMC_GetResponse>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	210c      	movs	r1, #12
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f000 f992 	bl	8006dd2 <SDMMC_GetResponse>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2104      	movs	r1, #4
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 f989 	bl	8006dd2 <SDMMC_GetResponse>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	0d1a      	lsrs	r2, r3, #20
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006ac8:	f107 0310 	add.w	r3, r7, #16
 8006acc:	4619      	mov	r1, r3
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7ff fd6e 	bl	80065b0 <HAL_SD_GetCardCSD>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d002      	beq.n	8006ae0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ada:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006ade:	e021      	b.n	8006b24 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6819      	ldr	r1, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ae8:	041b      	lsls	r3, r3, #16
 8006aea:	2200      	movs	r2, #0
 8006aec:	461c      	mov	r4, r3
 8006aee:	4615      	mov	r5, r2
 8006af0:	4622      	mov	r2, r4
 8006af2:	462b      	mov	r3, r5
 8006af4:	4608      	mov	r0, r1
 8006af6:	f000 fa77 	bl	8006fe8 <SDMMC_CmdSelDesel>
 8006afa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d001      	beq.n	8006b06 <SD_InitCard+0x176>
  {
    return errorstate;
 8006b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b04:	e00e      	b.n	8006b24 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681d      	ldr	r5, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	466c      	mov	r4, sp
 8006b0e:	f103 0210 	add.w	r2, r3, #16
 8006b12:	ca07      	ldmia	r2, {r0, r1, r2}
 8006b14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006b18:	3304      	adds	r3, #4
 8006b1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	f000 f8bb 	bl	8006c98 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3740      	adds	r7, #64	; 0x40
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bdb0      	pop	{r4, r5, r7, pc}

08006b2c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b34:	2300      	movs	r3, #0
 8006b36:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	617b      	str	r3, [r7, #20]
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4618      	mov	r0, r3
 8006b46:	f000 fa72 	bl	800702e <SDMMC_CmdGoIdleState>
 8006b4a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d001      	beq.n	8006b56 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	e072      	b.n	8006c3c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 fa85 	bl	800706a <SDMMC_CmdOperCond>
 8006b60:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00d      	beq.n	8006b84 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 fa5b 	bl	800702e <SDMMC_CmdGoIdleState>
 8006b78:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d004      	beq.n	8006b8a <SD_PowerON+0x5e>
    {
      return errorstate;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	e05b      	b.n	8006c3c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d137      	bne.n	8006c02 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2100      	movs	r1, #0
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f000 fa85 	bl	80070a8 <SDMMC_CmdAppCommand>
 8006b9e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d02d      	beq.n	8006c02 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ba6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006baa:	e047      	b.n	8006c3c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f000 fa78 	bl	80070a8 <SDMMC_CmdAppCommand>
 8006bb8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d001      	beq.n	8006bc4 <SD_PowerON+0x98>
    {
      return errorstate;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	e03b      	b.n	8006c3c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	491e      	ldr	r1, [pc, #120]	; (8006c44 <SD_PowerON+0x118>)
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 fa8e 	bl	80070ec <SDMMC_CmdAppOperCommand>
 8006bd0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d002      	beq.n	8006bde <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006bd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006bdc:	e02e      	b.n	8006c3c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2100      	movs	r1, #0
 8006be4:	4618      	mov	r0, r3
 8006be6:	f000 f8f4 	bl	8006dd2 <SDMMC_GetResponse>
 8006bea:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	0fdb      	lsrs	r3, r3, #31
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d101      	bne.n	8006bf8 <SD_PowerON+0xcc>
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e000      	b.n	8006bfa <SD_PowerON+0xce>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	613b      	str	r3, [r7, #16]

    count++;
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d802      	bhi.n	8006c12 <SD_PowerON+0xe6>
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d0cc      	beq.n	8006bac <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d902      	bls.n	8006c22 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006c1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c20:	e00c      	b.n	8006c3c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d003      	beq.n	8006c34 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	645a      	str	r2, [r3, #68]	; 0x44
 8006c32:	e002      	b.n	8006c3a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3718      	adds	r7, #24
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	c1100000 	.word	0xc1100000

08006c48 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d102      	bne.n	8006c5e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006c58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c5c:	e018      	b.n	8006c90 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c66:	041b      	lsls	r3, r3, #16
 8006c68:	4619      	mov	r1, r3
 8006c6a:	4610      	mov	r0, r2
 8006c6c:	f000 fac0 	bl	80071f0 <SDMMC_CmdSendStatus>
 8006c70:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <SD_SendStatus+0x34>
  {
    return errorstate;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	e009      	b.n	8006c90 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2100      	movs	r1, #0
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 f8a5 	bl	8006dd2 <SDMMC_GetResponse>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8006c98:	b084      	sub	sp, #16
 8006c9a:	b480      	push	{r7}
 8006c9c:	b085      	sub	sp, #20
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	f107 001c 	add.w	r0, r7, #28
 8006ca6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006caa:	2300      	movs	r3, #0
 8006cac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006cae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006cb2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006cb6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006cba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006cbe:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006cc2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685a      	ldr	r2, [r3, #4]
 8006cce:	4b07      	ldr	r3, [pc, #28]	; (8006cec <SDMMC_Init+0x54>)
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	431a      	orrs	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3714      	adds	r7, #20
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	b004      	add	sp, #16
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	ffff8100 	.word	0xffff8100

08006cf0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8006d0a:	b480      	push	{r7}
 8006d0c:	b083      	sub	sp, #12
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
 8006d12:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2203      	movs	r2, #3
 8006d38:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0303 	and.w	r3, r3, #3
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006d82:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006d88:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006d8e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	68da      	ldr	r2, [r3, #12]
 8006d9a:	4b06      	ldr	r3, [pc, #24]	; (8006db4 <SDMMC_SendCommand+0x50>)
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	431a      	orrs	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3714      	adds	r7, #20
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	fffff000 	.word	0xfffff000

08006db8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	b2db      	uxtb	r3, r3
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	370c      	adds	r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr

08006dd2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b085      	sub	sp, #20
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
 8006dda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	3314      	adds	r3, #20
 8006de0:	461a      	mov	r2, r3
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	4413      	add	r3, r2
 8006de6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
}  
 8006dec:	4618      	mov	r0, r3
 8006dee:	3714      	adds	r7, #20
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006e02:	2300      	movs	r3, #0
 8006e04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	685a      	ldr	r2, [r3, #4]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006e1e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006e24:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006e2a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e36:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	431a      	orrs	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006e42:	2300      	movs	r3, #0

}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3714      	adds	r7, #20
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b088      	sub	sp, #32
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006e5e:	2310      	movs	r3, #16
 8006e60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006e62:	2340      	movs	r3, #64	; 0x40
 8006e64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006e66:	2300      	movs	r3, #0
 8006e68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006e6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006e70:	f107 0308 	add.w	r3, r7, #8
 8006e74:	4619      	mov	r1, r3
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7ff ff74 	bl	8006d64 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8006e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e80:	2110      	movs	r1, #16
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f9d6 	bl	8007234 <SDMMC_GetCmdResp1>
 8006e88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e8a:	69fb      	ldr	r3, [r7, #28]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3720      	adds	r7, #32
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b088      	sub	sp, #32
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006ea2:	2311      	movs	r3, #17
 8006ea4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006ea6:	2340      	movs	r3, #64	; 0x40
 8006ea8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006eb4:	f107 0308 	add.w	r3, r7, #8
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7ff ff52 	bl	8006d64 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ec4:	2111      	movs	r1, #17
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f9b4 	bl	8007234 <SDMMC_GetCmdResp1>
 8006ecc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ece:	69fb      	ldr	r3, [r7, #28]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3720      	adds	r7, #32
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b088      	sub	sp, #32
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006ee6:	2312      	movs	r3, #18
 8006ee8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006eea:	2340      	movs	r3, #64	; 0x40
 8006eec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ef6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006ef8:	f107 0308 	add.w	r3, r7, #8
 8006efc:	4619      	mov	r1, r3
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f7ff ff30 	bl	8006d64 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f08:	2112      	movs	r1, #18
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f992 	bl	8007234 <SDMMC_GetCmdResp1>
 8006f10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f12:	69fb      	ldr	r3, [r7, #28]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3720      	adds	r7, #32
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b088      	sub	sp, #32
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006f2a:	2318      	movs	r3, #24
 8006f2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006f2e:	2340      	movs	r3, #64	; 0x40
 8006f30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006f32:	2300      	movs	r3, #0
 8006f34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006f3c:	f107 0308 	add.w	r3, r7, #8
 8006f40:	4619      	mov	r1, r3
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7ff ff0e 	bl	8006d64 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f4c:	2118      	movs	r1, #24
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 f970 	bl	8007234 <SDMMC_GetCmdResp1>
 8006f54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f56:	69fb      	ldr	r3, [r7, #28]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3720      	adds	r7, #32
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b088      	sub	sp, #32
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006f6e:	2319      	movs	r3, #25
 8006f70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006f72:	2340      	movs	r3, #64	; 0x40
 8006f74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006f76:	2300      	movs	r3, #0
 8006f78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006f80:	f107 0308 	add.w	r3, r7, #8
 8006f84:	4619      	mov	r1, r3
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f7ff feec 	bl	8006d64 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f90:	2119      	movs	r1, #25
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f94e 	bl	8007234 <SDMMC_GetCmdResp1>
 8006f98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f9a:	69fb      	ldr	r3, [r7, #28]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3720      	adds	r7, #32
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b088      	sub	sp, #32
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006fac:	2300      	movs	r3, #0
 8006fae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006fb0:	230c      	movs	r3, #12
 8006fb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006fb4:	2340      	movs	r3, #64	; 0x40
 8006fb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006fc2:	f107 0308 	add.w	r3, r7, #8
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f7ff fecb 	bl	8006d64 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8006fce:	4a05      	ldr	r2, [pc, #20]	; (8006fe4 <SDMMC_CmdStopTransfer+0x40>)
 8006fd0:	210c      	movs	r1, #12
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f92e 	bl	8007234 <SDMMC_GetCmdResp1>
 8006fd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006fda:	69fb      	ldr	r3, [r7, #28]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3720      	adds	r7, #32
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	05f5e100 	.word	0x05f5e100

08006fe8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b08a      	sub	sp, #40	; 0x28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006ff8:	2307      	movs	r3, #7
 8006ffa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006ffc:	2340      	movs	r3, #64	; 0x40
 8006ffe:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007000:	2300      	movs	r3, #0
 8007002:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007004:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007008:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800700a:	f107 0310 	add.w	r3, r7, #16
 800700e:	4619      	mov	r1, r3
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f7ff fea7 	bl	8006d64 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007016:	f241 3288 	movw	r2, #5000	; 0x1388
 800701a:	2107      	movs	r1, #7
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f000 f909 	bl	8007234 <SDMMC_GetCmdResp1>
 8007022:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007026:	4618      	mov	r0, r3
 8007028:	3728      	adds	r7, #40	; 0x28
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b088      	sub	sp, #32
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007036:	2300      	movs	r3, #0
 8007038:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800703a:	2300      	movs	r3, #0
 800703c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800703e:	2300      	movs	r3, #0
 8007040:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007042:	2300      	movs	r3, #0
 8007044:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800704a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800704c:	f107 0308 	add.w	r3, r7, #8
 8007050:	4619      	mov	r1, r3
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f7ff fe86 	bl	8006d64 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fb23 	bl	80076a4 <SDMMC_GetCmdError>
 800705e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007060:	69fb      	ldr	r3, [r7, #28]
}
 8007062:	4618      	mov	r0, r3
 8007064:	3720      	adds	r7, #32
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b088      	sub	sp, #32
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007072:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007076:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007078:	2308      	movs	r3, #8
 800707a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800707c:	2340      	movs	r3, #64	; 0x40
 800707e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007080:	2300      	movs	r3, #0
 8007082:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007088:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800708a:	f107 0308 	add.w	r3, r7, #8
 800708e:	4619      	mov	r1, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f7ff fe67 	bl	8006d64 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 fab6 	bl	8007608 <SDMMC_GetCmdResp7>
 800709c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800709e:	69fb      	ldr	r3, [r7, #28]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3720      	adds	r7, #32
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b088      	sub	sp, #32
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80070b6:	2337      	movs	r3, #55	; 0x37
 80070b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80070ba:	2340      	movs	r3, #64	; 0x40
 80070bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80070be:	2300      	movs	r3, #0
 80070c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80070c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80070c8:	f107 0308 	add.w	r3, r7, #8
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7ff fe48 	bl	8006d64 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80070d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80070d8:	2137      	movs	r1, #55	; 0x37
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f8aa 	bl	8007234 <SDMMC_GetCmdResp1>
 80070e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070e2:	69fb      	ldr	r3, [r7, #28]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3720      	adds	r7, #32
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b088      	sub	sp, #32
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	4b0d      	ldr	r3, [pc, #52]	; (8007130 <SDMMC_CmdAppOperCommand+0x44>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80070fe:	2329      	movs	r3, #41	; 0x29
 8007100:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007102:	2340      	movs	r3, #64	; 0x40
 8007104:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007106:	2300      	movs	r3, #0
 8007108:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800710a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800710e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007110:	f107 0308 	add.w	r3, r7, #8
 8007114:	4619      	mov	r1, r3
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7ff fe24 	bl	8006d64 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 f9bf 	bl	80074a0 <SDMMC_GetCmdResp3>
 8007122:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007124:	69fb      	ldr	r3, [r7, #28]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3720      	adds	r7, #32
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	80100000 	.word	0x80100000

08007134 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b088      	sub	sp, #32
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800713c:	2300      	movs	r3, #0
 800713e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007140:	2302      	movs	r3, #2
 8007142:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007144:	23c0      	movs	r3, #192	; 0xc0
 8007146:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007148:	2300      	movs	r3, #0
 800714a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800714c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007150:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007152:	f107 0308 	add.w	r3, r7, #8
 8007156:	4619      	mov	r1, r3
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f7ff fe03 	bl	8006d64 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f956 	bl	8007410 <SDMMC_GetCmdResp2>
 8007164:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007166:	69fb      	ldr	r3, [r7, #28]
}
 8007168:	4618      	mov	r0, r3
 800716a:	3720      	adds	r7, #32
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b088      	sub	sp, #32
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800717e:	2309      	movs	r3, #9
 8007180:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007182:	23c0      	movs	r3, #192	; 0xc0
 8007184:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007186:	2300      	movs	r3, #0
 8007188:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800718a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800718e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007190:	f107 0308 	add.w	r3, r7, #8
 8007194:	4619      	mov	r1, r3
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7ff fde4 	bl	8006d64 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f937 	bl	8007410 <SDMMC_GetCmdResp2>
 80071a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071a4:	69fb      	ldr	r3, [r7, #28]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3720      	adds	r7, #32
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b088      	sub	sp, #32
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
 80071b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80071b8:	2300      	movs	r3, #0
 80071ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80071bc:	2303      	movs	r3, #3
 80071be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071c0:	2340      	movs	r3, #64	; 0x40
 80071c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80071c4:	2300      	movs	r3, #0
 80071c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80071ce:	f107 0308 	add.w	r3, r7, #8
 80071d2:	4619      	mov	r1, r3
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f7ff fdc5 	bl	8006d64 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80071da:	683a      	ldr	r2, [r7, #0]
 80071dc:	2103      	movs	r1, #3
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f99c 	bl	800751c <SDMMC_GetCmdResp6>
 80071e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071e6:	69fb      	ldr	r3, [r7, #28]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3720      	adds	r7, #32
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b088      	sub	sp, #32
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80071fe:	230d      	movs	r3, #13
 8007200:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007202:	2340      	movs	r3, #64	; 0x40
 8007204:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007206:	2300      	movs	r3, #0
 8007208:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800720a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800720e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007210:	f107 0308 	add.w	r3, r7, #8
 8007214:	4619      	mov	r1, r3
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f7ff fda4 	bl	8006d64 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800721c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007220:	210d      	movs	r1, #13
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f806 	bl	8007234 <SDMMC_GetCmdResp1>
 8007228:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800722a:	69fb      	ldr	r3, [r7, #28]
}
 800722c:	4618      	mov	r0, r3
 800722e:	3720      	adds	r7, #32
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b088      	sub	sp, #32
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	460b      	mov	r3, r1
 800723e:	607a      	str	r2, [r7, #4]
 8007240:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007242:	4b70      	ldr	r3, [pc, #448]	; (8007404 <SDMMC_GetCmdResp1+0x1d0>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a70      	ldr	r2, [pc, #448]	; (8007408 <SDMMC_GetCmdResp1+0x1d4>)
 8007248:	fba2 2303 	umull	r2, r3, r2, r3
 800724c:	0a5a      	lsrs	r2, r3, #9
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	fb02 f303 	mul.w	r3, r2, r3
 8007254:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	1e5a      	subs	r2, r3, #1
 800725a:	61fa      	str	r2, [r7, #28]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d102      	bne.n	8007266 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007260:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007264:	e0c9      	b.n	80073fa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800726a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007272:	2b00      	cmp	r3, #0
 8007274:	d0ef      	beq.n	8007256 <SDMMC_GetCmdResp1+0x22>
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1ea      	bne.n	8007256 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007284:	f003 0304 	and.w	r3, r3, #4
 8007288:	2b00      	cmp	r3, #0
 800728a:	d004      	beq.n	8007296 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2204      	movs	r2, #4
 8007290:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007292:	2304      	movs	r3, #4
 8007294:	e0b1      	b.n	80073fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d004      	beq.n	80072ac <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2201      	movs	r2, #1
 80072a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e0a6      	b.n	80073fa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	22c5      	movs	r2, #197	; 0xc5
 80072b0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f7ff fd80 	bl	8006db8 <SDMMC_GetCommandResponse>
 80072b8:	4603      	mov	r3, r0
 80072ba:	461a      	mov	r2, r3
 80072bc:	7afb      	ldrb	r3, [r7, #11]
 80072be:	4293      	cmp	r3, r2
 80072c0:	d001      	beq.n	80072c6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e099      	b.n	80073fa <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80072c6:	2100      	movs	r1, #0
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f7ff fd82 	bl	8006dd2 <SDMMC_GetResponse>
 80072ce:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80072d0:	697a      	ldr	r2, [r7, #20]
 80072d2:	4b4e      	ldr	r3, [pc, #312]	; (800740c <SDMMC_GetCmdResp1+0x1d8>)
 80072d4:	4013      	ands	r3, r2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d101      	bne.n	80072de <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80072da:	2300      	movs	r3, #0
 80072dc:	e08d      	b.n	80073fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	da02      	bge.n	80072ea <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80072e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80072e8:	e087      	b.n	80073fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d001      	beq.n	80072f8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80072f4:	2340      	movs	r3, #64	; 0x40
 80072f6:	e080      	b.n	80073fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d001      	beq.n	8007306 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007302:	2380      	movs	r3, #128	; 0x80
 8007304:	e079      	b.n	80073fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d002      	beq.n	8007316 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007310:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007314:	e071      	b.n	80073fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d002      	beq.n	8007326 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007320:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007324:	e069      	b.n	80073fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007334:	e061      	b.n	80073fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d002      	beq.n	8007346 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007340:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007344:	e059      	b.n	80073fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d002      	beq.n	8007356 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007354:	e051      	b.n	80073fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d002      	beq.n	8007366 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007360:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007364:	e049      	b.n	80073fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d002      	beq.n	8007376 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007370:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007374:	e041      	b.n	80073fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d002      	beq.n	8007386 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007380:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007384:	e039      	b.n	80073fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d002      	beq.n	8007396 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007390:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007394:	e031      	b.n	80073fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d002      	beq.n	80073a6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80073a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80073a4:	e029      	b.n	80073fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d002      	beq.n	80073b6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80073b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80073b4:	e021      	b.n	80073fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d002      	beq.n	80073c6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80073c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80073c4:	e019      	b.n	80073fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d002      	beq.n	80073d6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80073d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80073d4:	e011      	b.n	80073fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d002      	beq.n	80073e6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80073e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80073e4:	e009      	b.n	80073fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	f003 0308 	and.w	r3, r3, #8
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d002      	beq.n	80073f6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80073f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80073f4:	e001      	b.n	80073fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80073f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3720      	adds	r7, #32
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	20000000 	.word	0x20000000
 8007408:	10624dd3 	.word	0x10624dd3
 800740c:	fdffe008 	.word	0xfdffe008

08007410 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007418:	4b1f      	ldr	r3, [pc, #124]	; (8007498 <SDMMC_GetCmdResp2+0x88>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a1f      	ldr	r2, [pc, #124]	; (800749c <SDMMC_GetCmdResp2+0x8c>)
 800741e:	fba2 2303 	umull	r2, r3, r2, r3
 8007422:	0a5b      	lsrs	r3, r3, #9
 8007424:	f241 3288 	movw	r2, #5000	; 0x1388
 8007428:	fb02 f303 	mul.w	r3, r2, r3
 800742c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	1e5a      	subs	r2, r3, #1
 8007432:	60fa      	str	r2, [r7, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d102      	bne.n	800743e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007438:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800743c:	e026      	b.n	800748c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007442:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800744a:	2b00      	cmp	r3, #0
 800744c:	d0ef      	beq.n	800742e <SDMMC_GetCmdResp2+0x1e>
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1ea      	bne.n	800742e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800745c:	f003 0304 	and.w	r3, r3, #4
 8007460:	2b00      	cmp	r3, #0
 8007462:	d004      	beq.n	800746e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2204      	movs	r2, #4
 8007468:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800746a:	2304      	movs	r3, #4
 800746c:	e00e      	b.n	800748c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	2b00      	cmp	r3, #0
 8007478:	d004      	beq.n	8007484 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007480:	2301      	movs	r3, #1
 8007482:	e003      	b.n	800748c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	22c5      	movs	r2, #197	; 0xc5
 8007488:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3714      	adds	r7, #20
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr
 8007498:	20000000 	.word	0x20000000
 800749c:	10624dd3 	.word	0x10624dd3

080074a0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80074a8:	4b1a      	ldr	r3, [pc, #104]	; (8007514 <SDMMC_GetCmdResp3+0x74>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a1a      	ldr	r2, [pc, #104]	; (8007518 <SDMMC_GetCmdResp3+0x78>)
 80074ae:	fba2 2303 	umull	r2, r3, r2, r3
 80074b2:	0a5b      	lsrs	r3, r3, #9
 80074b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80074b8:	fb02 f303 	mul.w	r3, r2, r3
 80074bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	1e5a      	subs	r2, r3, #1
 80074c2:	60fa      	str	r2, [r7, #12]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d102      	bne.n	80074ce <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80074c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074cc:	e01b      	b.n	8007506 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d0ef      	beq.n	80074be <SDMMC_GetCmdResp3+0x1e>
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1ea      	bne.n	80074be <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ec:	f003 0304 	and.w	r3, r3, #4
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d004      	beq.n	80074fe <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2204      	movs	r2, #4
 80074f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80074fa:	2304      	movs	r3, #4
 80074fc:	e003      	b.n	8007506 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	22c5      	movs	r2, #197	; 0xc5
 8007502:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3714      	adds	r7, #20
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	20000000 	.word	0x20000000
 8007518:	10624dd3 	.word	0x10624dd3

0800751c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b088      	sub	sp, #32
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	460b      	mov	r3, r1
 8007526:	607a      	str	r2, [r7, #4]
 8007528:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800752a:	4b35      	ldr	r3, [pc, #212]	; (8007600 <SDMMC_GetCmdResp6+0xe4>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a35      	ldr	r2, [pc, #212]	; (8007604 <SDMMC_GetCmdResp6+0xe8>)
 8007530:	fba2 2303 	umull	r2, r3, r2, r3
 8007534:	0a5b      	lsrs	r3, r3, #9
 8007536:	f241 3288 	movw	r2, #5000	; 0x1388
 800753a:	fb02 f303 	mul.w	r3, r2, r3
 800753e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	1e5a      	subs	r2, r3, #1
 8007544:	61fa      	str	r2, [r7, #28]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d102      	bne.n	8007550 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800754a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800754e:	e052      	b.n	80075f6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007554:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800755c:	2b00      	cmp	r3, #0
 800755e:	d0ef      	beq.n	8007540 <SDMMC_GetCmdResp6+0x24>
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007566:	2b00      	cmp	r3, #0
 8007568:	d1ea      	bne.n	8007540 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800756e:	f003 0304 	and.w	r3, r3, #4
 8007572:	2b00      	cmp	r3, #0
 8007574:	d004      	beq.n	8007580 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2204      	movs	r2, #4
 800757a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800757c:	2304      	movs	r3, #4
 800757e:	e03a      	b.n	80075f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	2b00      	cmp	r3, #0
 800758a:	d004      	beq.n	8007596 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2201      	movs	r2, #1
 8007590:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007592:	2301      	movs	r3, #1
 8007594:	e02f      	b.n	80075f6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f7ff fc0e 	bl	8006db8 <SDMMC_GetCommandResponse>
 800759c:	4603      	mov	r3, r0
 800759e:	461a      	mov	r2, r3
 80075a0:	7afb      	ldrb	r3, [r7, #11]
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d001      	beq.n	80075aa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e025      	b.n	80075f6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	22c5      	movs	r2, #197	; 0xc5
 80075ae:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80075b0:	2100      	movs	r1, #0
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	f7ff fc0d 	bl	8006dd2 <SDMMC_GetResponse>
 80075b8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d106      	bne.n	80075d2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	0c1b      	lsrs	r3, r3, #16
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80075ce:	2300      	movs	r3, #0
 80075d0:	e011      	b.n	80075f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d002      	beq.n	80075e2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80075dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80075e0:	e009      	b.n	80075f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d002      	beq.n	80075f2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80075ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075f0:	e001      	b.n	80075f6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80075f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3720      	adds	r7, #32
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	20000000 	.word	0x20000000
 8007604:	10624dd3 	.word	0x10624dd3

08007608 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007610:	4b22      	ldr	r3, [pc, #136]	; (800769c <SDMMC_GetCmdResp7+0x94>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a22      	ldr	r2, [pc, #136]	; (80076a0 <SDMMC_GetCmdResp7+0x98>)
 8007616:	fba2 2303 	umull	r2, r3, r2, r3
 800761a:	0a5b      	lsrs	r3, r3, #9
 800761c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007620:	fb02 f303 	mul.w	r3, r2, r3
 8007624:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	1e5a      	subs	r2, r3, #1
 800762a:	60fa      	str	r2, [r7, #12]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d102      	bne.n	8007636 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007630:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007634:	e02c      	b.n	8007690 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800763a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007642:	2b00      	cmp	r3, #0
 8007644:	d0ef      	beq.n	8007626 <SDMMC_GetCmdResp7+0x1e>
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1ea      	bne.n	8007626 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007654:	f003 0304 	and.w	r3, r3, #4
 8007658:	2b00      	cmp	r3, #0
 800765a:	d004      	beq.n	8007666 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2204      	movs	r2, #4
 8007660:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007662:	2304      	movs	r3, #4
 8007664:	e014      	b.n	8007690 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	d004      	beq.n	800767c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007678:	2301      	movs	r3, #1
 800767a:	e009      	b.n	8007690 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007684:	2b00      	cmp	r3, #0
 8007686:	d002      	beq.n	800768e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2240      	movs	r2, #64	; 0x40
 800768c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800768e:	2300      	movs	r3, #0
  
}
 8007690:	4618      	mov	r0, r3
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	20000000 	.word	0x20000000
 80076a0:	10624dd3 	.word	0x10624dd3

080076a4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80076ac:	4b11      	ldr	r3, [pc, #68]	; (80076f4 <SDMMC_GetCmdError+0x50>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a11      	ldr	r2, [pc, #68]	; (80076f8 <SDMMC_GetCmdError+0x54>)
 80076b2:	fba2 2303 	umull	r2, r3, r2, r3
 80076b6:	0a5b      	lsrs	r3, r3, #9
 80076b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80076bc:	fb02 f303 	mul.w	r3, r2, r3
 80076c0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	1e5a      	subs	r2, r3, #1
 80076c6:	60fa      	str	r2, [r7, #12]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d102      	bne.n	80076d2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80076cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80076d0:	e009      	b.n	80076e6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d0f1      	beq.n	80076c2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	22c5      	movs	r2, #197	; 0xc5
 80076e2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3714      	adds	r7, #20
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	20000000 	.word	0x20000000
 80076f8:	10624dd3 	.word	0x10624dd3

080076fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007700:	4904      	ldr	r1, [pc, #16]	; (8007714 <MX_FATFS_Init+0x18>)
 8007702:	4805      	ldr	r0, [pc, #20]	; (8007718 <MX_FATFS_Init+0x1c>)
 8007704:	f005 fb94 	bl	800ce30 <FATFS_LinkDriver>
 8007708:	4603      	mov	r3, r0
 800770a:	461a      	mov	r2, r3
 800770c:	4b03      	ldr	r3, [pc, #12]	; (800771c <MX_FATFS_Init+0x20>)
 800770e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007710:	bf00      	nop
 8007712:	bd80      	pop	{r7, pc}
 8007714:	20034264 	.word	0x20034264
 8007718:	0800f3e4 	.word	0x0800f3e4
 800771c:	20034260 	.word	0x20034260

08007720 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007720:	b480      	push	{r7}
 8007722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007724:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007726:	4618      	mov	r0, r3
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800773a:	f000 f86b 	bl	8007814 <BSP_SD_IsDetected>
 800773e:	4603      	mov	r3, r0
 8007740:	2b01      	cmp	r3, #1
 8007742:	d001      	beq.n	8007748 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8007744:	2302      	movs	r3, #2
 8007746:	e005      	b.n	8007754 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8007748:	4804      	ldr	r0, [pc, #16]	; (800775c <BSP_SD_Init+0x2c>)
 800774a:	f7fe fb15 	bl	8005d78 <HAL_SD_Init>
 800774e:	4603      	mov	r3, r0
 8007750:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8007752:	79fb      	ldrb	r3, [r7, #7]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3708      	adds	r7, #8
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	20000124 	.word	0x20000124

08007760 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b088      	sub	sp, #32
 8007764:	af02      	add	r7, sp, #8
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
 800776c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800776e:	2300      	movs	r3, #0
 8007770:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	9300      	str	r3, [sp, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	68f9      	ldr	r1, [r7, #12]
 800777c:	4806      	ldr	r0, [pc, #24]	; (8007798 <BSP_SD_ReadBlocks+0x38>)
 800777e:	f7fe fbb3 	bl	8005ee8 <HAL_SD_ReadBlocks>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d001      	beq.n	800778c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800778c:	7dfb      	ldrb	r3, [r7, #23]
}
 800778e:	4618      	mov	r0, r3
 8007790:	3718      	adds	r7, #24
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	20000124 	.word	0x20000124

0800779c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b088      	sub	sp, #32
 80077a0:	af02      	add	r7, sp, #8
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	607a      	str	r2, [r7, #4]
 80077a8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	9300      	str	r3, [sp, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	68f9      	ldr	r1, [r7, #12]
 80077b8:	4806      	ldr	r0, [pc, #24]	; (80077d4 <BSP_SD_WriteBlocks+0x38>)
 80077ba:	f7fe fd73 	bl	80062a4 <HAL_SD_WriteBlocks>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d001      	beq.n	80077c8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80077c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3718      	adds	r7, #24
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	20000124 	.word	0x20000124

080077d8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80077dc:	4805      	ldr	r0, [pc, #20]	; (80077f4 <BSP_SD_GetCardState+0x1c>)
 80077de:	f7ff f8b7 	bl	8006950 <HAL_SD_GetCardState>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b04      	cmp	r3, #4
 80077e6:	bf14      	ite	ne
 80077e8:	2301      	movne	r3, #1
 80077ea:	2300      	moveq	r3, #0
 80077ec:	b2db      	uxtb	r3, r3
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	20000124 	.word	0x20000124

080077f8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8007800:	6879      	ldr	r1, [r7, #4]
 8007802:	4803      	ldr	r0, [pc, #12]	; (8007810 <BSP_SD_GetCardInfo+0x18>)
 8007804:	f7ff f878 	bl	80068f8 <HAL_SD_GetCardInfo>
}
 8007808:	bf00      	nop
 800780a:	3708      	adds	r7, #8
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	20000124 	.word	0x20000124

08007814 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800781a:	2301      	movs	r3, #1
 800781c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800781e:	79fb      	ldrb	r3, [r7, #7]
 8007820:	b2db      	uxtb	r3, r3
}
 8007822:	4618      	mov	r0, r3
 8007824:	370c      	adds	r7, #12
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
	...

08007830 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	4603      	mov	r3, r0
 8007838:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800783a:	4b0b      	ldr	r3, [pc, #44]	; (8007868 <SD_CheckStatus+0x38>)
 800783c:	2201      	movs	r2, #1
 800783e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007840:	f7ff ffca 	bl	80077d8 <BSP_SD_GetCardState>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d107      	bne.n	800785a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800784a:	4b07      	ldr	r3, [pc, #28]	; (8007868 <SD_CheckStatus+0x38>)
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	b2db      	uxtb	r3, r3
 8007850:	f023 0301 	bic.w	r3, r3, #1
 8007854:	b2da      	uxtb	r2, r3
 8007856:	4b04      	ldr	r3, [pc, #16]	; (8007868 <SD_CheckStatus+0x38>)
 8007858:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800785a:	4b03      	ldr	r3, [pc, #12]	; (8007868 <SD_CheckStatus+0x38>)
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	b2db      	uxtb	r3, r3
}
 8007860:	4618      	mov	r0, r3
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	20000009 	.word	0x20000009

0800786c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	4603      	mov	r3, r0
 8007874:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8007876:	4b0b      	ldr	r3, [pc, #44]	; (80078a4 <SD_initialize+0x38>)
 8007878:	2201      	movs	r2, #1
 800787a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800787c:	f7ff ff58 	bl	8007730 <BSP_SD_Init>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d107      	bne.n	8007896 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8007886:	79fb      	ldrb	r3, [r7, #7]
 8007888:	4618      	mov	r0, r3
 800788a:	f7ff ffd1 	bl	8007830 <SD_CheckStatus>
 800788e:	4603      	mov	r3, r0
 8007890:	461a      	mov	r2, r3
 8007892:	4b04      	ldr	r3, [pc, #16]	; (80078a4 <SD_initialize+0x38>)
 8007894:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007896:	4b03      	ldr	r3, [pc, #12]	; (80078a4 <SD_initialize+0x38>)
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	b2db      	uxtb	r3, r3
}
 800789c:	4618      	mov	r0, r3
 800789e:	3708      	adds	r7, #8
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	20000009 	.word	0x20000009

080078a8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	4603      	mov	r3, r0
 80078b0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80078b2:	79fb      	ldrb	r3, [r7, #7]
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7ff ffbb 	bl	8007830 <SD_CheckStatus>
 80078ba:	4603      	mov	r3, r0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60b9      	str	r1, [r7, #8]
 80078cc:	607a      	str	r2, [r7, #4]
 80078ce:	603b      	str	r3, [r7, #0]
 80078d0:	4603      	mov	r3, r0
 80078d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80078d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078dc:	683a      	ldr	r2, [r7, #0]
 80078de:	6879      	ldr	r1, [r7, #4]
 80078e0:	68b8      	ldr	r0, [r7, #8]
 80078e2:	f7ff ff3d 	bl	8007760 <BSP_SD_ReadBlocks>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d107      	bne.n	80078fc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80078ec:	bf00      	nop
 80078ee:	f7ff ff73 	bl	80077d8 <BSP_SD_GetCardState>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1fa      	bne.n	80078ee <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80078f8:	2300      	movs	r3, #0
 80078fa:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80078fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3718      	adds	r7, #24
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b086      	sub	sp, #24
 800790a:	af00      	add	r7, sp, #0
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	607a      	str	r2, [r7, #4]
 8007910:	603b      	str	r3, [r7, #0]
 8007912:	4603      	mov	r3, r0
 8007914:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800791a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	6879      	ldr	r1, [r7, #4]
 8007922:	68b8      	ldr	r0, [r7, #8]
 8007924:	f7ff ff3a 	bl	800779c <BSP_SD_WriteBlocks>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d107      	bne.n	800793e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800792e:	bf00      	nop
 8007930:	f7ff ff52 	bl	80077d8 <BSP_SD_GetCardState>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d1fa      	bne.n	8007930 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800793a:	2300      	movs	r3, #0
 800793c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800793e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3718      	adds	r7, #24
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b08c      	sub	sp, #48	; 0x30
 800794c:	af00      	add	r7, sp, #0
 800794e:	4603      	mov	r3, r0
 8007950:	603a      	str	r2, [r7, #0]
 8007952:	71fb      	strb	r3, [r7, #7]
 8007954:	460b      	mov	r3, r1
 8007956:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800795e:	4b25      	ldr	r3, [pc, #148]	; (80079f4 <SD_ioctl+0xac>)
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	b2db      	uxtb	r3, r3
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	2b00      	cmp	r3, #0
 800796a:	d001      	beq.n	8007970 <SD_ioctl+0x28>
 800796c:	2303      	movs	r3, #3
 800796e:	e03c      	b.n	80079ea <SD_ioctl+0xa2>

  switch (cmd)
 8007970:	79bb      	ldrb	r3, [r7, #6]
 8007972:	2b03      	cmp	r3, #3
 8007974:	d834      	bhi.n	80079e0 <SD_ioctl+0x98>
 8007976:	a201      	add	r2, pc, #4	; (adr r2, 800797c <SD_ioctl+0x34>)
 8007978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800797c:	0800798d 	.word	0x0800798d
 8007980:	08007995 	.word	0x08007995
 8007984:	080079ad 	.word	0x080079ad
 8007988:	080079c7 	.word	0x080079c7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800798c:	2300      	movs	r3, #0
 800798e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007992:	e028      	b.n	80079e6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007994:	f107 030c 	add.w	r3, r7, #12
 8007998:	4618      	mov	r0, r3
 800799a:	f7ff ff2d 	bl	80077f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800799e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80079a4:	2300      	movs	r3, #0
 80079a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80079aa:	e01c      	b.n	80079e6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80079ac:	f107 030c 	add.w	r3, r7, #12
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7ff ff21 	bl	80077f8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80079b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80079be:	2300      	movs	r3, #0
 80079c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80079c4:	e00f      	b.n	80079e6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80079c6:	f107 030c 	add.w	r3, r7, #12
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7ff ff14 	bl	80077f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80079d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d2:	0a5a      	lsrs	r2, r3, #9
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80079d8:	2300      	movs	r3, #0
 80079da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80079de:	e002      	b.n	80079e6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80079e0:	2304      	movs	r3, #4
 80079e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80079e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3730      	adds	r7, #48	; 0x30
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	20000009 	.word	0x20000009

080079f8 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	4603      	mov	r3, r0
 8007a00:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8007a02:	20c8      	movs	r0, #200	; 0xc8
 8007a04:	f000 fc32 	bl	800826c <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8007a08:	f000 fa7a 	bl	8007f00 <ft5336_I2C_InitializeIfRequired>
}
 8007a0c:	bf00      	nop
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8007a1e:	bf00      	nop
 8007a20:	370c      	adds	r7, #12
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b084      	sub	sp, #16
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	4603      	mov	r3, r0
 8007a32:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8007a34:	2300      	movs	r3, #0
 8007a36:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8007a40:	f000 fa5e 	bl	8007f00 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8007a44:	2300      	movs	r3, #0
 8007a46:	73fb      	strb	r3, [r7, #15]
 8007a48:	e010      	b.n	8007a6c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8007a4a:	88fb      	ldrh	r3, [r7, #6]
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	21a8      	movs	r1, #168	; 0xa8
 8007a50:	4618      	mov	r0, r3
 8007a52:	f000 fbed 	bl	8008230 <TS_IO_Read>
 8007a56:	4603      	mov	r3, r0
 8007a58:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8007a5a:	7b7b      	ldrb	r3, [r7, #13]
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	2b51      	cmp	r3, #81	; 0x51
 8007a60:	d101      	bne.n	8007a66 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8007a62:	2301      	movs	r3, #1
 8007a64:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	73fb      	strb	r3, [r7, #15]
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d802      	bhi.n	8007a78 <ft5336_ReadID+0x4e>
 8007a72:	7bbb      	ldrb	r3, [r7, #14]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d0e8      	beq.n	8007a4a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8007a78:	7b7b      	ldrb	r3, [r7, #13]
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	b29b      	uxth	r3, r3
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b082      	sub	sp, #8
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8007a90:	88fb      	ldrh	r3, [r7, #6]
 8007a92:	4618      	mov	r0, r3
 8007a94:	f000 fa44 	bl	8007f20 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8007a98:	88fb      	ldrh	r3, [r7, #6]
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 f932 	bl	8007d04 <ft5336_TS_DisableIT>
}
 8007aa0:	bf00      	nop
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	4603      	mov	r3, r0
 8007ab0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8007ab6:	88fb      	ldrh	r3, [r7, #6]
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2102      	movs	r1, #2
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 fbb7 	bl	8008230 <TS_IO_Read>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8007ac6:	7bfb      	ldrb	r3, [r7, #15]
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	f003 030f 	and.w	r3, r3, #15
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8007ad2:	7bfb      	ldrb	r3, [r7, #15]
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	2b05      	cmp	r3, #5
 8007ad8:	d901      	bls.n	8007ade <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8007ada:	2300      	movs	r3, #0
 8007adc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8007ade:	7bfb      	ldrb	r3, [r7, #15]
 8007ae0:	b2da      	uxtb	r2, r3
 8007ae2:	4b05      	ldr	r3, [pc, #20]	; (8007af8 <ft5336_TS_DetectTouch+0x50>)
 8007ae4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8007ae6:	4b04      	ldr	r3, [pc, #16]	; (8007af8 <ft5336_TS_DetectTouch+0x50>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8007aec:	7bfb      	ldrb	r3, [r7, #15]
 8007aee:	b2db      	uxtb	r3, r3
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	20034268 	.word	0x20034268

08007afc <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	4603      	mov	r3, r0
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
 8007b08:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8007b12:	2300      	movs	r3, #0
 8007b14:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8007b16:	2300      	movs	r3, #0
 8007b18:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8007b1e:	4b6d      	ldr	r3, [pc, #436]	; (8007cd4 <ft5336_TS_GetXY+0x1d8>)
 8007b20:	789a      	ldrb	r2, [r3, #2]
 8007b22:	4b6c      	ldr	r3, [pc, #432]	; (8007cd4 <ft5336_TS_GetXY+0x1d8>)
 8007b24:	785b      	ldrb	r3, [r3, #1]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	f080 80cf 	bcs.w	8007cca <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8007b2c:	4b69      	ldr	r3, [pc, #420]	; (8007cd4 <ft5336_TS_GetXY+0x1d8>)
 8007b2e:	789b      	ldrb	r3, [r3, #2]
 8007b30:	2b09      	cmp	r3, #9
 8007b32:	d871      	bhi.n	8007c18 <ft5336_TS_GetXY+0x11c>
 8007b34:	a201      	add	r2, pc, #4	; (adr r2, 8007b3c <ft5336_TS_GetXY+0x40>)
 8007b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3a:	bf00      	nop
 8007b3c:	08007b65 	.word	0x08007b65
 8007b40:	08007b77 	.word	0x08007b77
 8007b44:	08007b89 	.word	0x08007b89
 8007b48:	08007b9b 	.word	0x08007b9b
 8007b4c:	08007bad 	.word	0x08007bad
 8007b50:	08007bbf 	.word	0x08007bbf
 8007b54:	08007bd1 	.word	0x08007bd1
 8007b58:	08007be3 	.word	0x08007be3
 8007b5c:	08007bf5 	.word	0x08007bf5
 8007b60:	08007c07 	.word	0x08007c07
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8007b64:	2304      	movs	r3, #4
 8007b66:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8007b6c:	2306      	movs	r3, #6
 8007b6e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8007b70:	2305      	movs	r3, #5
 8007b72:	753b      	strb	r3, [r7, #20]
      break;
 8007b74:	e051      	b.n	8007c1a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8007b76:	230a      	movs	r3, #10
 8007b78:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8007b7a:	2309      	movs	r3, #9
 8007b7c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8007b7e:	230c      	movs	r3, #12
 8007b80:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8007b82:	230b      	movs	r3, #11
 8007b84:	753b      	strb	r3, [r7, #20]
      break;
 8007b86:	e048      	b.n	8007c1a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8007b88:	2310      	movs	r3, #16
 8007b8a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8007b8c:	230f      	movs	r3, #15
 8007b8e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8007b90:	2312      	movs	r3, #18
 8007b92:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8007b94:	2311      	movs	r3, #17
 8007b96:	753b      	strb	r3, [r7, #20]
      break;
 8007b98:	e03f      	b.n	8007c1a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8007b9a:	2316      	movs	r3, #22
 8007b9c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8007b9e:	2315      	movs	r3, #21
 8007ba0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8007ba2:	2318      	movs	r3, #24
 8007ba4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8007ba6:	2317      	movs	r3, #23
 8007ba8:	753b      	strb	r3, [r7, #20]
      break;
 8007baa:	e036      	b.n	8007c1a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8007bac:	231c      	movs	r3, #28
 8007bae:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8007bb0:	231b      	movs	r3, #27
 8007bb2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8007bb4:	231e      	movs	r3, #30
 8007bb6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8007bb8:	231d      	movs	r3, #29
 8007bba:	753b      	strb	r3, [r7, #20]
      break;
 8007bbc:	e02d      	b.n	8007c1a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8007bbe:	2322      	movs	r3, #34	; 0x22
 8007bc0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8007bc2:	2321      	movs	r3, #33	; 0x21
 8007bc4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8007bc6:	2324      	movs	r3, #36	; 0x24
 8007bc8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8007bca:	2323      	movs	r3, #35	; 0x23
 8007bcc:	753b      	strb	r3, [r7, #20]
      break;
 8007bce:	e024      	b.n	8007c1a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8007bd0:	2328      	movs	r3, #40	; 0x28
 8007bd2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8007bd4:	2327      	movs	r3, #39	; 0x27
 8007bd6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8007bd8:	232a      	movs	r3, #42	; 0x2a
 8007bda:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8007bdc:	2329      	movs	r3, #41	; 0x29
 8007bde:	753b      	strb	r3, [r7, #20]
      break;
 8007be0:	e01b      	b.n	8007c1a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8007be2:	232e      	movs	r3, #46	; 0x2e
 8007be4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8007be6:	232d      	movs	r3, #45	; 0x2d
 8007be8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8007bea:	2330      	movs	r3, #48	; 0x30
 8007bec:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8007bee:	232f      	movs	r3, #47	; 0x2f
 8007bf0:	753b      	strb	r3, [r7, #20]
      break;
 8007bf2:	e012      	b.n	8007c1a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8007bf4:	2334      	movs	r3, #52	; 0x34
 8007bf6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8007bf8:	2333      	movs	r3, #51	; 0x33
 8007bfa:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8007bfc:	2336      	movs	r3, #54	; 0x36
 8007bfe:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8007c00:	2335      	movs	r3, #53	; 0x35
 8007c02:	753b      	strb	r3, [r7, #20]
      break;
 8007c04:	e009      	b.n	8007c1a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8007c06:	233a      	movs	r3, #58	; 0x3a
 8007c08:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8007c0a:	2339      	movs	r3, #57	; 0x39
 8007c0c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8007c0e:	233c      	movs	r3, #60	; 0x3c
 8007c10:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8007c12:	233b      	movs	r3, #59	; 0x3b
 8007c14:	753b      	strb	r3, [r7, #20]
      break;
 8007c16:	e000      	b.n	8007c1a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8007c18:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8007c1a:	89fb      	ldrh	r3, [r7, #14]
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	7dfa      	ldrb	r2, [r7, #23]
 8007c20:	4611      	mov	r1, r2
 8007c22:	4618      	mov	r0, r3
 8007c24:	f000 fb04 	bl	8008230 <TS_IO_Read>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8007c2c:	7cfb      	ldrb	r3, [r7, #19]
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	4b29      	ldr	r3, [pc, #164]	; (8007cd8 <ft5336_TS_GetXY+0x1dc>)
 8007c34:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8007c36:	89fb      	ldrh	r3, [r7, #14]
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	7dba      	ldrb	r2, [r7, #22]
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 faf6 	bl	8008230 <TS_IO_Read>
 8007c44:	4603      	mov	r3, r0
 8007c46:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8007c48:	7cfb      	ldrb	r3, [r7, #19]
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	021b      	lsls	r3, r3, #8
 8007c4e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007c52:	b21a      	sxth	r2, r3
 8007c54:	4b20      	ldr	r3, [pc, #128]	; (8007cd8 <ft5336_TS_GetXY+0x1dc>)
 8007c56:	881b      	ldrh	r3, [r3, #0]
 8007c58:	b21b      	sxth	r3, r3
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	b21b      	sxth	r3, r3
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	4b1d      	ldr	r3, [pc, #116]	; (8007cd8 <ft5336_TS_GetXY+0x1dc>)
 8007c62:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8007c64:	4b1c      	ldr	r3, [pc, #112]	; (8007cd8 <ft5336_TS_GetXY+0x1dc>)
 8007c66:	881a      	ldrh	r2, [r3, #0]
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8007c6c:	89fb      	ldrh	r3, [r7, #14]
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	7d7a      	ldrb	r2, [r7, #21]
 8007c72:	4611      	mov	r1, r2
 8007c74:	4618      	mov	r0, r3
 8007c76:	f000 fadb 	bl	8008230 <TS_IO_Read>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8007c7e:	7cfb      	ldrb	r3, [r7, #19]
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	4b14      	ldr	r3, [pc, #80]	; (8007cd8 <ft5336_TS_GetXY+0x1dc>)
 8007c86:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8007c88:	89fb      	ldrh	r3, [r7, #14]
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	7d3a      	ldrb	r2, [r7, #20]
 8007c8e:	4611      	mov	r1, r2
 8007c90:	4618      	mov	r0, r3
 8007c92:	f000 facd 	bl	8008230 <TS_IO_Read>
 8007c96:	4603      	mov	r3, r0
 8007c98:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8007c9a:	7cfb      	ldrb	r3, [r7, #19]
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	021b      	lsls	r3, r3, #8
 8007ca0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007ca4:	b21a      	sxth	r2, r3
 8007ca6:	4b0c      	ldr	r3, [pc, #48]	; (8007cd8 <ft5336_TS_GetXY+0x1dc>)
 8007ca8:	881b      	ldrh	r3, [r3, #0]
 8007caa:	b21b      	sxth	r3, r3
 8007cac:	4313      	orrs	r3, r2
 8007cae:	b21b      	sxth	r3, r3
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	4b09      	ldr	r3, [pc, #36]	; (8007cd8 <ft5336_TS_GetXY+0x1dc>)
 8007cb4:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8007cb6:	4b08      	ldr	r3, [pc, #32]	; (8007cd8 <ft5336_TS_GetXY+0x1dc>)
 8007cb8:	881a      	ldrh	r2, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8007cbe:	4b05      	ldr	r3, [pc, #20]	; (8007cd4 <ft5336_TS_GetXY+0x1d8>)
 8007cc0:	789b      	ldrb	r3, [r3, #2]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	b2da      	uxtb	r2, r3
 8007cc6:	4b03      	ldr	r3, [pc, #12]	; (8007cd4 <ft5336_TS_GetXY+0x1d8>)
 8007cc8:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8007cca:	bf00      	nop
 8007ccc:	3718      	adds	r7, #24
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	20034268 	.word	0x20034268
 8007cd8:	2003426c 	.word	0x2003426c

08007cdc <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8007cea:	2301      	movs	r3, #1
 8007cec:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8007cee:	88fb      	ldrh	r3, [r7, #6]
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	7bfa      	ldrb	r2, [r7, #15]
 8007cf4:	21a4      	movs	r1, #164	; 0xa4
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f000 fa80 	bl	80081fc <TS_IO_Write>
}
 8007cfc:	bf00      	nop
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8007d12:	2300      	movs	r3, #0
 8007d14:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8007d16:	88fb      	ldrh	r3, [r7, #6]
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	7bfa      	ldrb	r2, [r7, #15]
 8007d1c:	21a4      	movs	r1, #164	; 0xa4
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f000 fa6c 	bl	80081fc <TS_IO_Write>
}
 8007d24:	bf00      	nop
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	4603      	mov	r3, r0
 8007d34:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8007d4e:	bf00      	nop
 8007d50:	370c      	adds	r7, #12
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b084      	sub	sp, #16
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	4603      	mov	r3, r0
 8007d62:	6039      	str	r1, [r7, #0]
 8007d64:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8007d66:	2300      	movs	r3, #0
 8007d68:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8007d6a:	88fb      	ldrh	r3, [r7, #6]
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2101      	movs	r1, #1
 8007d70:	4618      	mov	r0, r3
 8007d72:	f000 fa5d 	bl	8008230 <TS_IO_Read>
 8007d76:	4603      	mov	r3, r0
 8007d78:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8007d7a:	7bfb      	ldrb	r3, [r7, #15]
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	461a      	mov	r2, r3
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	601a      	str	r2, [r3, #0]
}
 8007d84:	bf00      	nop
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b086      	sub	sp, #24
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60b9      	str	r1, [r7, #8]
 8007d94:	607a      	str	r2, [r7, #4]
 8007d96:	603b      	str	r3, [r7, #0]
 8007d98:	4603      	mov	r3, r0
 8007d9a:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8007da0:	2300      	movs	r3, #0
 8007da2:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8007da4:	2300      	movs	r3, #0
 8007da6:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8007da8:	2300      	movs	r3, #0
 8007daa:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8007dac:	4b4d      	ldr	r3, [pc, #308]	; (8007ee4 <ft5336_TS_GetTouchInfo+0x158>)
 8007dae:	785b      	ldrb	r3, [r3, #1]
 8007db0:	461a      	mov	r2, r3
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	4293      	cmp	r3, r2
 8007db6:	f080 8090 	bcs.w	8007eda <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	2b09      	cmp	r3, #9
 8007dbe:	d85d      	bhi.n	8007e7c <ft5336_TS_GetTouchInfo+0xf0>
 8007dc0:	a201      	add	r2, pc, #4	; (adr r2, 8007dc8 <ft5336_TS_GetTouchInfo+0x3c>)
 8007dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc6:	bf00      	nop
 8007dc8:	08007df1 	.word	0x08007df1
 8007dcc:	08007dff 	.word	0x08007dff
 8007dd0:	08007e0d 	.word	0x08007e0d
 8007dd4:	08007e1b 	.word	0x08007e1b
 8007dd8:	08007e29 	.word	0x08007e29
 8007ddc:	08007e37 	.word	0x08007e37
 8007de0:	08007e45 	.word	0x08007e45
 8007de4:	08007e53 	.word	0x08007e53
 8007de8:	08007e61 	.word	0x08007e61
 8007dec:	08007e6f 	.word	0x08007e6f
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8007df0:	2303      	movs	r3, #3
 8007df2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8007df4:	2307      	movs	r3, #7
 8007df6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8007df8:	2308      	movs	r3, #8
 8007dfa:	757b      	strb	r3, [r7, #21]
      break;
 8007dfc:	e03f      	b.n	8007e7e <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8007dfe:	2309      	movs	r3, #9
 8007e00:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8007e02:	230d      	movs	r3, #13
 8007e04:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8007e06:	230e      	movs	r3, #14
 8007e08:	757b      	strb	r3, [r7, #21]
      break;
 8007e0a:	e038      	b.n	8007e7e <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8007e0c:	230f      	movs	r3, #15
 8007e0e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8007e10:	2313      	movs	r3, #19
 8007e12:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8007e14:	2314      	movs	r3, #20
 8007e16:	757b      	strb	r3, [r7, #21]
      break;
 8007e18:	e031      	b.n	8007e7e <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8007e1a:	2315      	movs	r3, #21
 8007e1c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8007e1e:	2319      	movs	r3, #25
 8007e20:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8007e22:	231a      	movs	r3, #26
 8007e24:	757b      	strb	r3, [r7, #21]
      break;
 8007e26:	e02a      	b.n	8007e7e <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8007e28:	231b      	movs	r3, #27
 8007e2a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8007e2c:	231f      	movs	r3, #31
 8007e2e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8007e30:	2320      	movs	r3, #32
 8007e32:	757b      	strb	r3, [r7, #21]
      break;
 8007e34:	e023      	b.n	8007e7e <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8007e36:	2321      	movs	r3, #33	; 0x21
 8007e38:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8007e3a:	2325      	movs	r3, #37	; 0x25
 8007e3c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8007e3e:	2326      	movs	r3, #38	; 0x26
 8007e40:	757b      	strb	r3, [r7, #21]
      break;
 8007e42:	e01c      	b.n	8007e7e <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8007e44:	2327      	movs	r3, #39	; 0x27
 8007e46:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8007e48:	232b      	movs	r3, #43	; 0x2b
 8007e4a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8007e4c:	232c      	movs	r3, #44	; 0x2c
 8007e4e:	757b      	strb	r3, [r7, #21]
      break;
 8007e50:	e015      	b.n	8007e7e <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8007e52:	232d      	movs	r3, #45	; 0x2d
 8007e54:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8007e56:	2331      	movs	r3, #49	; 0x31
 8007e58:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8007e5a:	2332      	movs	r3, #50	; 0x32
 8007e5c:	757b      	strb	r3, [r7, #21]
      break;
 8007e5e:	e00e      	b.n	8007e7e <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8007e60:	2333      	movs	r3, #51	; 0x33
 8007e62:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8007e64:	2337      	movs	r3, #55	; 0x37
 8007e66:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8007e68:	2338      	movs	r3, #56	; 0x38
 8007e6a:	757b      	strb	r3, [r7, #21]
      break;
 8007e6c:	e007      	b.n	8007e7e <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8007e6e:	2339      	movs	r3, #57	; 0x39
 8007e70:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8007e72:	233d      	movs	r3, #61	; 0x3d
 8007e74:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8007e76:	233e      	movs	r3, #62	; 0x3e
 8007e78:	757b      	strb	r3, [r7, #21]
      break;
 8007e7a:	e000      	b.n	8007e7e <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8007e7c:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8007e7e:	89fb      	ldrh	r3, [r7, #14]
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	7dfa      	ldrb	r2, [r7, #23]
 8007e84:	4611      	mov	r1, r2
 8007e86:	4618      	mov	r0, r3
 8007e88:	f000 f9d2 	bl	8008230 <TS_IO_Read>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8007e90:	7d3b      	ldrb	r3, [r7, #20]
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	119b      	asrs	r3, r3, #6
 8007e96:	f003 0203 	and.w	r2, r3, #3
 8007e9a:	6a3b      	ldr	r3, [r7, #32]
 8007e9c:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8007e9e:	89fb      	ldrh	r3, [r7, #14]
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	7dba      	ldrb	r2, [r7, #22]
 8007ea4:	4611      	mov	r1, r2
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f000 f9c2 	bl	8008230 <TS_IO_Read>
 8007eac:	4603      	mov	r3, r0
 8007eae:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8007eb0:	7d3b      	ldrb	r3, [r7, #20]
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8007eba:	89fb      	ldrh	r3, [r7, #14]
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	7d7a      	ldrb	r2, [r7, #21]
 8007ec0:	4611      	mov	r1, r2
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f000 f9b4 	bl	8008230 <TS_IO_Read>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8007ecc:	7d3b      	ldrb	r3, [r7, #20]
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	111b      	asrs	r3, r3, #4
 8007ed2:	f003 0204 	and.w	r2, r3, #4
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8007eda:	bf00      	nop
 8007edc:	3718      	adds	r7, #24
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	20034268 	.word	0x20034268

08007ee8 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8007eec:	4b03      	ldr	r3, [pc, #12]	; (8007efc <ft5336_Get_I2C_InitializedStatus+0x14>)
 8007eee:	781b      	ldrb	r3, [r3, #0]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	20034268 	.word	0x20034268

08007f00 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8007f04:	f7ff fff0 	bl	8007ee8 <ft5336_Get_I2C_InitializedStatus>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d104      	bne.n	8007f18 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8007f0e:	f000 f96b 	bl	80081e8 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8007f12:	4b02      	ldr	r3, [pc, #8]	; (8007f1c <ft5336_I2C_InitializeIfRequired+0x1c>)
 8007f14:	2201      	movs	r2, #1
 8007f16:	701a      	strb	r2, [r3, #0]
  }
}
 8007f18:	bf00      	nop
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	20034268 	.word	0x20034268

08007f20 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	4603      	mov	r3, r0
 8007f28:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3714      	adds	r7, #20
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b08c      	sub	sp, #48	; 0x30
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a51      	ldr	r2, [pc, #324]	; (800808c <I2Cx_MspInit+0x150>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d14d      	bne.n	8007fe8 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8007f4c:	4b50      	ldr	r3, [pc, #320]	; (8008090 <I2Cx_MspInit+0x154>)
 8007f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f50:	4a4f      	ldr	r2, [pc, #316]	; (8008090 <I2Cx_MspInit+0x154>)
 8007f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f56:	6313      	str	r3, [r2, #48]	; 0x30
 8007f58:	4b4d      	ldr	r3, [pc, #308]	; (8008090 <I2Cx_MspInit+0x154>)
 8007f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f60:	61bb      	str	r3, [r7, #24]
 8007f62:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8007f64:	2380      	movs	r3, #128	; 0x80
 8007f66:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8007f68:	2312      	movs	r3, #18
 8007f6a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8007f70:	2302      	movs	r3, #2
 8007f72:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8007f74:	2304      	movs	r3, #4
 8007f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8007f78:	f107 031c 	add.w	r3, r7, #28
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	4845      	ldr	r0, [pc, #276]	; (8008094 <I2Cx_MspInit+0x158>)
 8007f80:	f7fb fed8 	bl	8003d34 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8007f84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8007f8a:	f107 031c 	add.w	r3, r7, #28
 8007f8e:	4619      	mov	r1, r3
 8007f90:	4840      	ldr	r0, [pc, #256]	; (8008094 <I2Cx_MspInit+0x158>)
 8007f92:	f7fb fecf 	bl	8003d34 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8007f96:	4b3e      	ldr	r3, [pc, #248]	; (8008090 <I2Cx_MspInit+0x154>)
 8007f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9a:	4a3d      	ldr	r2, [pc, #244]	; (8008090 <I2Cx_MspInit+0x154>)
 8007f9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8007fa2:	4b3b      	ldr	r3, [pc, #236]	; (8008090 <I2Cx_MspInit+0x154>)
 8007fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007faa:	617b      	str	r3, [r7, #20]
 8007fac:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8007fae:	4b38      	ldr	r3, [pc, #224]	; (8008090 <I2Cx_MspInit+0x154>)
 8007fb0:	6a1b      	ldr	r3, [r3, #32]
 8007fb2:	4a37      	ldr	r2, [pc, #220]	; (8008090 <I2Cx_MspInit+0x154>)
 8007fb4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007fb8:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8007fba:	4b35      	ldr	r3, [pc, #212]	; (8008090 <I2Cx_MspInit+0x154>)
 8007fbc:	6a1b      	ldr	r3, [r3, #32]
 8007fbe:	4a34      	ldr	r2, [pc, #208]	; (8008090 <I2Cx_MspInit+0x154>)
 8007fc0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007fc4:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	210f      	movs	r1, #15
 8007fca:	2048      	movs	r0, #72	; 0x48
 8007fcc:	f7fb f947 	bl	800325e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8007fd0:	2048      	movs	r0, #72	; 0x48
 8007fd2:	f7fb f960 	bl	8003296 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	210f      	movs	r1, #15
 8007fda:	2049      	movs	r0, #73	; 0x49
 8007fdc:	f7fb f93f 	bl	800325e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8007fe0:	2049      	movs	r0, #73	; 0x49
 8007fe2:	f7fb f958 	bl	8003296 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8007fe6:	e04d      	b.n	8008084 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8007fe8:	4b29      	ldr	r3, [pc, #164]	; (8008090 <I2Cx_MspInit+0x154>)
 8007fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fec:	4a28      	ldr	r2, [pc, #160]	; (8008090 <I2Cx_MspInit+0x154>)
 8007fee:	f043 0302 	orr.w	r3, r3, #2
 8007ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8007ff4:	4b26      	ldr	r3, [pc, #152]	; (8008090 <I2Cx_MspInit+0x154>)
 8007ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff8:	f003 0302 	and.w	r3, r3, #2
 8007ffc:	613b      	str	r3, [r7, #16]
 8007ffe:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8008000:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008004:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8008006:	2312      	movs	r3, #18
 8008008:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800800a:	2300      	movs	r3, #0
 800800c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800800e:	2302      	movs	r3, #2
 8008010:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8008012:	2304      	movs	r3, #4
 8008014:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8008016:	f107 031c 	add.w	r3, r7, #28
 800801a:	4619      	mov	r1, r3
 800801c:	481e      	ldr	r0, [pc, #120]	; (8008098 <I2Cx_MspInit+0x15c>)
 800801e:	f7fb fe89 	bl	8003d34 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8008022:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008026:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8008028:	f107 031c 	add.w	r3, r7, #28
 800802c:	4619      	mov	r1, r3
 800802e:	481a      	ldr	r0, [pc, #104]	; (8008098 <I2Cx_MspInit+0x15c>)
 8008030:	f7fb fe80 	bl	8003d34 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8008034:	4b16      	ldr	r3, [pc, #88]	; (8008090 <I2Cx_MspInit+0x154>)
 8008036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008038:	4a15      	ldr	r2, [pc, #84]	; (8008090 <I2Cx_MspInit+0x154>)
 800803a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800803e:	6413      	str	r3, [r2, #64]	; 0x40
 8008040:	4b13      	ldr	r3, [pc, #76]	; (8008090 <I2Cx_MspInit+0x154>)
 8008042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008048:	60fb      	str	r3, [r7, #12]
 800804a:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800804c:	4b10      	ldr	r3, [pc, #64]	; (8008090 <I2Cx_MspInit+0x154>)
 800804e:	6a1b      	ldr	r3, [r3, #32]
 8008050:	4a0f      	ldr	r2, [pc, #60]	; (8008090 <I2Cx_MspInit+0x154>)
 8008052:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008056:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8008058:	4b0d      	ldr	r3, [pc, #52]	; (8008090 <I2Cx_MspInit+0x154>)
 800805a:	6a1b      	ldr	r3, [r3, #32]
 800805c:	4a0c      	ldr	r2, [pc, #48]	; (8008090 <I2Cx_MspInit+0x154>)
 800805e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008062:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8008064:	2200      	movs	r2, #0
 8008066:	210f      	movs	r1, #15
 8008068:	201f      	movs	r0, #31
 800806a:	f7fb f8f8 	bl	800325e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800806e:	201f      	movs	r0, #31
 8008070:	f7fb f911 	bl	8003296 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8008074:	2200      	movs	r2, #0
 8008076:	210f      	movs	r1, #15
 8008078:	2020      	movs	r0, #32
 800807a:	f7fb f8f0 	bl	800325e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800807e:	2020      	movs	r0, #32
 8008080:	f7fb f909 	bl	8003296 <HAL_NVIC_EnableIRQ>
}
 8008084:	bf00      	nop
 8008086:	3730      	adds	r7, #48	; 0x30
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	20034270 	.word	0x20034270
 8008090:	40023800 	.word	0x40023800
 8008094:	40021c00 	.word	0x40021c00
 8008098:	40020400 	.word	0x40020400

0800809c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7fc fb0d 	bl	80046c4 <HAL_I2C_GetState>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d125      	bne.n	80080fc <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4a14      	ldr	r2, [pc, #80]	; (8008104 <I2Cx_Init+0x68>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d103      	bne.n	80080c0 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4a13      	ldr	r2, [pc, #76]	; (8008108 <I2Cx_Init+0x6c>)
 80080bc:	601a      	str	r2, [r3, #0]
 80080be:	e002      	b.n	80080c6 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a12      	ldr	r2, [pc, #72]	; (800810c <I2Cx_Init+0x70>)
 80080c4:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a11      	ldr	r2, [pc, #68]	; (8008110 <I2Cx_Init+0x74>)
 80080ca:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2201      	movs	r2, #1
 80080d6:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f7ff ff23 	bl	8007f3c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f7fb ffe2 	bl	80040c0 <HAL_I2C_Init>
  }
}
 80080fc:	bf00      	nop
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	20034270 	.word	0x20034270
 8008108:	40005c00 	.word	0x40005c00
 800810c:	40005400 	.word	0x40005400
 8008110:	40912732 	.word	0x40912732

08008114 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b08a      	sub	sp, #40	; 0x28
 8008118:	af04      	add	r7, sp, #16
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	4608      	mov	r0, r1
 800811e:	4611      	mov	r1, r2
 8008120:	461a      	mov	r2, r3
 8008122:	4603      	mov	r3, r0
 8008124:	72fb      	strb	r3, [r7, #11]
 8008126:	460b      	mov	r3, r1
 8008128:	813b      	strh	r3, [r7, #8]
 800812a:	4613      	mov	r3, r2
 800812c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800812e:	2300      	movs	r3, #0
 8008130:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8008132:	7afb      	ldrb	r3, [r7, #11]
 8008134:	b299      	uxth	r1, r3
 8008136:	88f8      	ldrh	r0, [r7, #6]
 8008138:	893a      	ldrh	r2, [r7, #8]
 800813a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800813e:	9302      	str	r3, [sp, #8]
 8008140:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008142:	9301      	str	r3, [sp, #4]
 8008144:	6a3b      	ldr	r3, [r7, #32]
 8008146:	9300      	str	r3, [sp, #0]
 8008148:	4603      	mov	r3, r0
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f7fc f9a0 	bl	8004490 <HAL_I2C_Mem_Read>
 8008150:	4603      	mov	r3, r0
 8008152:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8008154:	7dfb      	ldrb	r3, [r7, #23]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d004      	beq.n	8008164 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800815a:	7afb      	ldrb	r3, [r7, #11]
 800815c:	4619      	mov	r1, r3
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f000 f832 	bl	80081c8 <I2Cx_Error>
  }
  return status;    
 8008164:	7dfb      	ldrb	r3, [r7, #23]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3718      	adds	r7, #24
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b08a      	sub	sp, #40	; 0x28
 8008172:	af04      	add	r7, sp, #16
 8008174:	60f8      	str	r0, [r7, #12]
 8008176:	4608      	mov	r0, r1
 8008178:	4611      	mov	r1, r2
 800817a:	461a      	mov	r2, r3
 800817c:	4603      	mov	r3, r0
 800817e:	72fb      	strb	r3, [r7, #11]
 8008180:	460b      	mov	r3, r1
 8008182:	813b      	strh	r3, [r7, #8]
 8008184:	4613      	mov	r3, r2
 8008186:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8008188:	2300      	movs	r3, #0
 800818a:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800818c:	7afb      	ldrb	r3, [r7, #11]
 800818e:	b299      	uxth	r1, r3
 8008190:	88f8      	ldrh	r0, [r7, #6]
 8008192:	893a      	ldrh	r2, [r7, #8]
 8008194:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008198:	9302      	str	r3, [sp, #8]
 800819a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800819c:	9301      	str	r3, [sp, #4]
 800819e:	6a3b      	ldr	r3, [r7, #32]
 80081a0:	9300      	str	r3, [sp, #0]
 80081a2:	4603      	mov	r3, r0
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f7fc f85f 	bl	8004268 <HAL_I2C_Mem_Write>
 80081aa:	4603      	mov	r3, r0
 80081ac:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80081ae:	7dfb      	ldrb	r3, [r7, #23]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d004      	beq.n	80081be <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80081b4:	7afb      	ldrb	r3, [r7, #11]
 80081b6:	4619      	mov	r1, r3
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f000 f805 	bl	80081c8 <I2Cx_Error>
  }
  return status;
 80081be:	7dfb      	ldrb	r3, [r7, #23]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3718      	adds	r7, #24
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	460b      	mov	r3, r1
 80081d2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f7fc f803 	bl	80041e0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7ff ff5e 	bl	800809c <I2Cx_Init>
}
 80081e0:	bf00      	nop
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80081ec:	4802      	ldr	r0, [pc, #8]	; (80081f8 <TS_IO_Init+0x10>)
 80081ee:	f7ff ff55 	bl	800809c <I2Cx_Init>
}
 80081f2:	bf00      	nop
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	20034270 	.word	0x20034270

080081fc <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af02      	add	r7, sp, #8
 8008202:	4603      	mov	r3, r0
 8008204:	71fb      	strb	r3, [r7, #7]
 8008206:	460b      	mov	r3, r1
 8008208:	71bb      	strb	r3, [r7, #6]
 800820a:	4613      	mov	r3, r2
 800820c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800820e:	79bb      	ldrb	r3, [r7, #6]
 8008210:	b29a      	uxth	r2, r3
 8008212:	79f9      	ldrb	r1, [r7, #7]
 8008214:	2301      	movs	r3, #1
 8008216:	9301      	str	r3, [sp, #4]
 8008218:	1d7b      	adds	r3, r7, #5
 800821a:	9300      	str	r3, [sp, #0]
 800821c:	2301      	movs	r3, #1
 800821e:	4803      	ldr	r0, [pc, #12]	; (800822c <TS_IO_Write+0x30>)
 8008220:	f7ff ffa5 	bl	800816e <I2Cx_WriteMultiple>
}
 8008224:	bf00      	nop
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	20034270 	.word	0x20034270

08008230 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af02      	add	r7, sp, #8
 8008236:	4603      	mov	r3, r0
 8008238:	460a      	mov	r2, r1
 800823a:	71fb      	strb	r3, [r7, #7]
 800823c:	4613      	mov	r3, r2
 800823e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8008240:	2300      	movs	r3, #0
 8008242:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8008244:	79bb      	ldrb	r3, [r7, #6]
 8008246:	b29a      	uxth	r2, r3
 8008248:	79f9      	ldrb	r1, [r7, #7]
 800824a:	2301      	movs	r3, #1
 800824c:	9301      	str	r3, [sp, #4]
 800824e:	f107 030f 	add.w	r3, r7, #15
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	2301      	movs	r3, #1
 8008256:	4804      	ldr	r0, [pc, #16]	; (8008268 <TS_IO_Read+0x38>)
 8008258:	f7ff ff5c 	bl	8008114 <I2Cx_ReadMultiple>

  return read_value;
 800825c:	7bfb      	ldrb	r3, [r7, #15]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	20034270 	.word	0x20034270

0800826c <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f7fa fef3 	bl	8003060 <HAL_Delay>
}
 800827a:	bf00      	nop
 800827c:	3708      	adds	r7, #8
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
	...

08008284 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8008284:	b580      	push	{r7, lr}
 8008286:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8008288:	4b31      	ldr	r3, [pc, #196]	; (8008350 <BSP_LCD_Init+0xcc>)
 800828a:	2228      	movs	r2, #40	; 0x28
 800828c:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800828e:	4b30      	ldr	r3, [pc, #192]	; (8008350 <BSP_LCD_Init+0xcc>)
 8008290:	2209      	movs	r2, #9
 8008292:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8008294:	4b2e      	ldr	r3, [pc, #184]	; (8008350 <BSP_LCD_Init+0xcc>)
 8008296:	2235      	movs	r2, #53	; 0x35
 8008298:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800829a:	4b2d      	ldr	r3, [pc, #180]	; (8008350 <BSP_LCD_Init+0xcc>)
 800829c:	220b      	movs	r2, #11
 800829e:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80082a0:	4b2b      	ldr	r3, [pc, #172]	; (8008350 <BSP_LCD_Init+0xcc>)
 80082a2:	f240 121b 	movw	r2, #283	; 0x11b
 80082a6:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80082a8:	4b29      	ldr	r3, [pc, #164]	; (8008350 <BSP_LCD_Init+0xcc>)
 80082aa:	f240 2215 	movw	r2, #533	; 0x215
 80082ae:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80082b0:	4b27      	ldr	r3, [pc, #156]	; (8008350 <BSP_LCD_Init+0xcc>)
 80082b2:	f240 121d 	movw	r2, #285	; 0x11d
 80082b6:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80082b8:	4b25      	ldr	r3, [pc, #148]	; (8008350 <BSP_LCD_Init+0xcc>)
 80082ba:	f240 2235 	movw	r2, #565	; 0x235
 80082be:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80082c0:	2100      	movs	r1, #0
 80082c2:	4823      	ldr	r0, [pc, #140]	; (8008350 <BSP_LCD_Init+0xcc>)
 80082c4:	f000 fb88 	bl	80089d8 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80082c8:	4b21      	ldr	r3, [pc, #132]	; (8008350 <BSP_LCD_Init+0xcc>)
 80082ca:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80082ce:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80082d0:	4b1f      	ldr	r3, [pc, #124]	; (8008350 <BSP_LCD_Init+0xcc>)
 80082d2:	f44f 7288 	mov.w	r2, #272	; 0x110
 80082d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80082d8:	4b1d      	ldr	r3, [pc, #116]	; (8008350 <BSP_LCD_Init+0xcc>)
 80082da:	2200      	movs	r2, #0
 80082dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80082e0:	4b1b      	ldr	r3, [pc, #108]	; (8008350 <BSP_LCD_Init+0xcc>)
 80082e2:	2200      	movs	r2, #0
 80082e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80082e8:	4b19      	ldr	r3, [pc, #100]	; (8008350 <BSP_LCD_Init+0xcc>)
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80082f0:	4b17      	ldr	r3, [pc, #92]	; (8008350 <BSP_LCD_Init+0xcc>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80082f6:	4b16      	ldr	r3, [pc, #88]	; (8008350 <BSP_LCD_Init+0xcc>)
 80082f8:	2200      	movs	r2, #0
 80082fa:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80082fc:	4b14      	ldr	r3, [pc, #80]	; (8008350 <BSP_LCD_Init+0xcc>)
 80082fe:	2200      	movs	r2, #0
 8008300:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8008302:	4b13      	ldr	r3, [pc, #76]	; (8008350 <BSP_LCD_Init+0xcc>)
 8008304:	2200      	movs	r2, #0
 8008306:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8008308:	4b11      	ldr	r3, [pc, #68]	; (8008350 <BSP_LCD_Init+0xcc>)
 800830a:	4a12      	ldr	r2, [pc, #72]	; (8008354 <BSP_LCD_Init+0xd0>)
 800830c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800830e:	4810      	ldr	r0, [pc, #64]	; (8008350 <BSP_LCD_Init+0xcc>)
 8008310:	f7fa f8ca 	bl	80024a8 <HAL_LTDC_GetState>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d103      	bne.n	8008322 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800831a:	2100      	movs	r1, #0
 800831c:	480c      	ldr	r0, [pc, #48]	; (8008350 <BSP_LCD_Init+0xcc>)
 800831e:	f000 fa81 	bl	8008824 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8008322:	480b      	ldr	r0, [pc, #44]	; (8008350 <BSP_LCD_Init+0xcc>)
 8008324:	f7f9 fed2 	bl	80020cc <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8008328:	2201      	movs	r2, #1
 800832a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800832e:	480a      	ldr	r0, [pc, #40]	; (8008358 <BSP_LCD_Init+0xd4>)
 8008330:	f7fb feac 	bl	800408c <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8008334:	2201      	movs	r2, #1
 8008336:	2108      	movs	r1, #8
 8008338:	4808      	ldr	r0, [pc, #32]	; (800835c <BSP_LCD_Init+0xd8>)
 800833a:	f7fb fea7 	bl	800408c <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800833e:	f000 fc6b 	bl	8008c18 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8008342:	4807      	ldr	r0, [pc, #28]	; (8008360 <BSP_LCD_Init+0xdc>)
 8008344:	f000 f8d8 	bl	80084f8 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	200342bc 	.word	0x200342bc
 8008354:	40016800 	.word	0x40016800
 8008358:	40022000 	.word	0x40022000
 800835c:	40022800 	.word	0x40022800
 8008360:	2000000c 	.word	0x2000000c

08008364 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8008364:	b480      	push	{r7}
 8008366:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8008368:	4b06      	ldr	r3, [pc, #24]	; (8008384 <BSP_LCD_GetXSize+0x20>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a06      	ldr	r2, [pc, #24]	; (8008388 <BSP_LCD_GetXSize+0x24>)
 800836e:	2134      	movs	r1, #52	; 0x34
 8008370:	fb01 f303 	mul.w	r3, r1, r3
 8008374:	4413      	add	r3, r2
 8008376:	3360      	adds	r3, #96	; 0x60
 8008378:	681b      	ldr	r3, [r3, #0]
}
 800837a:	4618      	mov	r0, r3
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr
 8008384:	200343a4 	.word	0x200343a4
 8008388:	200342bc 	.word	0x200342bc

0800838c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800838c:	b480      	push	{r7}
 800838e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8008390:	4b06      	ldr	r3, [pc, #24]	; (80083ac <BSP_LCD_GetYSize+0x20>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a06      	ldr	r2, [pc, #24]	; (80083b0 <BSP_LCD_GetYSize+0x24>)
 8008396:	2134      	movs	r1, #52	; 0x34
 8008398:	fb01 f303 	mul.w	r3, r1, r3
 800839c:	4413      	add	r3, r2
 800839e:	3364      	adds	r3, #100	; 0x64
 80083a0:	681b      	ldr	r3, [r3, #0]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr
 80083ac:	200343a4 	.word	0x200343a4
 80083b0:	200342bc 	.word	0x200342bc

080083b4 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b090      	sub	sp, #64	; 0x40
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	4603      	mov	r3, r0
 80083bc:	6039      	str	r1, [r7, #0]
 80083be:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80083c0:	2300      	movs	r3, #0
 80083c2:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80083c4:	f7ff ffce 	bl	8008364 <BSP_LCD_GetXSize>
 80083c8:	4603      	mov	r3, r0
 80083ca:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80083cc:	2300      	movs	r3, #0
 80083ce:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80083d0:	f7ff ffdc 	bl	800838c <BSP_LCD_GetYSize>
 80083d4:	4603      	mov	r3, r0
 80083d6:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80083d8:	2300      	movs	r3, #0
 80083da:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 80083e0:	23ff      	movs	r3, #255	; 0xff
 80083e2:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80083e4:	2300      	movs	r3, #0
 80083e6:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 80083e8:	2300      	movs	r3, #0
 80083ea:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 80083ee:	2300      	movs	r3, #0
 80083f0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 80083f4:	2300      	movs	r3, #0
 80083f6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80083fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80083fe:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8008400:	2307      	movs	r3, #7
 8008402:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8008404:	f7ff ffae 	bl	8008364 <BSP_LCD_GetXSize>
 8008408:	4603      	mov	r3, r0
 800840a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800840c:	f7ff ffbe 	bl	800838c <BSP_LCD_GetYSize>
 8008410:	4603      	mov	r3, r0
 8008412:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8008414:	88fa      	ldrh	r2, [r7, #6]
 8008416:	f107 030c 	add.w	r3, r7, #12
 800841a:	4619      	mov	r1, r3
 800841c:	4812      	ldr	r0, [pc, #72]	; (8008468 <BSP_LCD_LayerDefaultInit+0xb4>)
 800841e:	f7fa f805 	bl	800242c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8008422:	88fa      	ldrh	r2, [r7, #6]
 8008424:	4911      	ldr	r1, [pc, #68]	; (800846c <BSP_LCD_LayerDefaultInit+0xb8>)
 8008426:	4613      	mov	r3, r2
 8008428:	005b      	lsls	r3, r3, #1
 800842a:	4413      	add	r3, r2
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	440b      	add	r3, r1
 8008430:	3304      	adds	r3, #4
 8008432:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008436:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8008438:	88fa      	ldrh	r2, [r7, #6]
 800843a:	490c      	ldr	r1, [pc, #48]	; (800846c <BSP_LCD_LayerDefaultInit+0xb8>)
 800843c:	4613      	mov	r3, r2
 800843e:	005b      	lsls	r3, r3, #1
 8008440:	4413      	add	r3, r2
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	440b      	add	r3, r1
 8008446:	3308      	adds	r3, #8
 8008448:	4a09      	ldr	r2, [pc, #36]	; (8008470 <BSP_LCD_LayerDefaultInit+0xbc>)
 800844a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800844c:	88fa      	ldrh	r2, [r7, #6]
 800844e:	4907      	ldr	r1, [pc, #28]	; (800846c <BSP_LCD_LayerDefaultInit+0xb8>)
 8008450:	4613      	mov	r3, r2
 8008452:	005b      	lsls	r3, r3, #1
 8008454:	4413      	add	r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	440b      	add	r3, r1
 800845a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800845e:	601a      	str	r2, [r3, #0]
}
 8008460:	bf00      	nop
 8008462:	3740      	adds	r7, #64	; 0x40
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	200342bc 	.word	0x200342bc
 800846c:	200343a8 	.word	0x200343a8
 8008470:	2000000c 	.word	0x2000000c

08008474 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800847c:	4a04      	ldr	r2, [pc, #16]	; (8008490 <BSP_LCD_SelectLayer+0x1c>)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6013      	str	r3, [r2, #0]
} 
 8008482:	bf00      	nop
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	200343a4 	.word	0x200343a4

08008494 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800849c:	4b07      	ldr	r3, [pc, #28]	; (80084bc <BSP_LCD_SetTextColor+0x28>)
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	4907      	ldr	r1, [pc, #28]	; (80084c0 <BSP_LCD_SetTextColor+0x2c>)
 80084a2:	4613      	mov	r3, r2
 80084a4:	005b      	lsls	r3, r3, #1
 80084a6:	4413      	add	r3, r2
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	440b      	add	r3, r1
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	601a      	str	r2, [r3, #0]
}
 80084b0:	bf00      	nop
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr
 80084bc:	200343a4 	.word	0x200343a4
 80084c0:	200343a8 	.word	0x200343a8

080084c4 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80084cc:	4b08      	ldr	r3, [pc, #32]	; (80084f0 <BSP_LCD_SetBackColor+0x2c>)
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	4908      	ldr	r1, [pc, #32]	; (80084f4 <BSP_LCD_SetBackColor+0x30>)
 80084d2:	4613      	mov	r3, r2
 80084d4:	005b      	lsls	r3, r3, #1
 80084d6:	4413      	add	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	440b      	add	r3, r1
 80084dc:	3304      	adds	r3, #4
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	601a      	str	r2, [r3, #0]
}
 80084e2:	bf00      	nop
 80084e4:	370c      	adds	r7, #12
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	200343a4 	.word	0x200343a4
 80084f4:	200343a8 	.word	0x200343a8

080084f8 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8008500:	4b08      	ldr	r3, [pc, #32]	; (8008524 <BSP_LCD_SetFont+0x2c>)
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	4908      	ldr	r1, [pc, #32]	; (8008528 <BSP_LCD_SetFont+0x30>)
 8008506:	4613      	mov	r3, r2
 8008508:	005b      	lsls	r3, r3, #1
 800850a:	4413      	add	r3, r2
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	440b      	add	r3, r1
 8008510:	3308      	adds	r3, #8
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	601a      	str	r2, [r3, #0]
}
 8008516:	bf00      	nop
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	200343a4 	.word	0x200343a4
 8008528:	200343a8 	.word	0x200343a8

0800852c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800852c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800852e:	b085      	sub	sp, #20
 8008530:	af02      	add	r7, sp, #8
 8008532:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8008534:	4b0f      	ldr	r3, [pc, #60]	; (8008574 <BSP_LCD_Clear+0x48>)
 8008536:	681c      	ldr	r4, [r3, #0]
 8008538:	4b0e      	ldr	r3, [pc, #56]	; (8008574 <BSP_LCD_Clear+0x48>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a0e      	ldr	r2, [pc, #56]	; (8008578 <BSP_LCD_Clear+0x4c>)
 800853e:	2134      	movs	r1, #52	; 0x34
 8008540:	fb01 f303 	mul.w	r3, r1, r3
 8008544:	4413      	add	r3, r2
 8008546:	335c      	adds	r3, #92	; 0x5c
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	461e      	mov	r6, r3
 800854c:	f7ff ff0a 	bl	8008364 <BSP_LCD_GetXSize>
 8008550:	4605      	mov	r5, r0
 8008552:	f7ff ff1b 	bl	800838c <BSP_LCD_GetYSize>
 8008556:	4602      	mov	r2, r0
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	9301      	str	r3, [sp, #4]
 800855c:	2300      	movs	r3, #0
 800855e:	9300      	str	r3, [sp, #0]
 8008560:	4613      	mov	r3, r2
 8008562:	462a      	mov	r2, r5
 8008564:	4631      	mov	r1, r6
 8008566:	4620      	mov	r0, r4
 8008568:	f000 fb0a 	bl	8008b80 <LL_FillBuffer>
}
 800856c:	bf00      	nop
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008574:	200343a4 	.word	0x200343a4
 8008578:	200342bc 	.word	0x200342bc

0800857c <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800857c:	b590      	push	{r4, r7, lr}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	4603      	mov	r3, r0
 8008584:	80fb      	strh	r3, [r7, #6]
 8008586:	460b      	mov	r3, r1
 8008588:	80bb      	strh	r3, [r7, #4]
 800858a:	4613      	mov	r3, r2
 800858c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800858e:	4b1b      	ldr	r3, [pc, #108]	; (80085fc <BSP_LCD_DisplayChar+0x80>)
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	491b      	ldr	r1, [pc, #108]	; (8008600 <BSP_LCD_DisplayChar+0x84>)
 8008594:	4613      	mov	r3, r2
 8008596:	005b      	lsls	r3, r3, #1
 8008598:	4413      	add	r3, r2
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	440b      	add	r3, r1
 800859e:	3308      	adds	r3, #8
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	6819      	ldr	r1, [r3, #0]
 80085a4:	78fb      	ldrb	r3, [r7, #3]
 80085a6:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80085aa:	4b14      	ldr	r3, [pc, #80]	; (80085fc <BSP_LCD_DisplayChar+0x80>)
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	4c14      	ldr	r4, [pc, #80]	; (8008600 <BSP_LCD_DisplayChar+0x84>)
 80085b0:	4613      	mov	r3, r2
 80085b2:	005b      	lsls	r3, r3, #1
 80085b4:	4413      	add	r3, r2
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	4423      	add	r3, r4
 80085ba:	3308      	adds	r3, #8
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80085c0:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80085c4:	4b0d      	ldr	r3, [pc, #52]	; (80085fc <BSP_LCD_DisplayChar+0x80>)
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	4c0d      	ldr	r4, [pc, #52]	; (8008600 <BSP_LCD_DisplayChar+0x84>)
 80085ca:	4613      	mov	r3, r2
 80085cc:	005b      	lsls	r3, r3, #1
 80085ce:	4413      	add	r3, r2
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	4423      	add	r3, r4
 80085d4:	3308      	adds	r3, #8
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	889b      	ldrh	r3, [r3, #4]
 80085da:	3307      	adds	r3, #7
 80085dc:	2b00      	cmp	r3, #0
 80085de:	da00      	bge.n	80085e2 <BSP_LCD_DisplayChar+0x66>
 80085e0:	3307      	adds	r3, #7
 80085e2:	10db      	asrs	r3, r3, #3
 80085e4:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80085e8:	18ca      	adds	r2, r1, r3
 80085ea:	88b9      	ldrh	r1, [r7, #4]
 80085ec:	88fb      	ldrh	r3, [r7, #6]
 80085ee:	4618      	mov	r0, r3
 80085f0:	f000 fa0e 	bl	8008a10 <DrawChar>
}
 80085f4:	bf00      	nop
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd90      	pop	{r4, r7, pc}
 80085fc:	200343a4 	.word	0x200343a4
 8008600:	200343a8 	.word	0x200343a8

08008604 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8008604:	b5b0      	push	{r4, r5, r7, lr}
 8008606:	b088      	sub	sp, #32
 8008608:	af00      	add	r7, sp, #0
 800860a:	60ba      	str	r2, [r7, #8]
 800860c:	461a      	mov	r2, r3
 800860e:	4603      	mov	r3, r0
 8008610:	81fb      	strh	r3, [r7, #14]
 8008612:	460b      	mov	r3, r1
 8008614:	81bb      	strh	r3, [r7, #12]
 8008616:	4613      	mov	r3, r2
 8008618:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800861a:	2301      	movs	r3, #1
 800861c:	83fb      	strh	r3, [r7, #30]
 800861e:	2300      	movs	r3, #0
 8008620:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8008622:	2300      	movs	r3, #0
 8008624:	61bb      	str	r3, [r7, #24]
 8008626:	2300      	movs	r3, #0
 8008628:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800862e:	e002      	b.n	8008636 <BSP_LCD_DisplayStringAt+0x32>
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	3301      	adds	r3, #1
 8008634:	61bb      	str	r3, [r7, #24]
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	1c5a      	adds	r2, r3, #1
 800863a:	617a      	str	r2, [r7, #20]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d1f6      	bne.n	8008630 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8008642:	f7ff fe8f 	bl	8008364 <BSP_LCD_GetXSize>
 8008646:	4601      	mov	r1, r0
 8008648:	4b50      	ldr	r3, [pc, #320]	; (800878c <BSP_LCD_DisplayStringAt+0x188>)
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	4850      	ldr	r0, [pc, #320]	; (8008790 <BSP_LCD_DisplayStringAt+0x18c>)
 800864e:	4613      	mov	r3, r2
 8008650:	005b      	lsls	r3, r3, #1
 8008652:	4413      	add	r3, r2
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	4403      	add	r3, r0
 8008658:	3308      	adds	r3, #8
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	889b      	ldrh	r3, [r3, #4]
 800865e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008662:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8008664:	79fb      	ldrb	r3, [r7, #7]
 8008666:	2b03      	cmp	r3, #3
 8008668:	d01c      	beq.n	80086a4 <BSP_LCD_DisplayStringAt+0xa0>
 800866a:	2b03      	cmp	r3, #3
 800866c:	dc33      	bgt.n	80086d6 <BSP_LCD_DisplayStringAt+0xd2>
 800866e:	2b01      	cmp	r3, #1
 8008670:	d002      	beq.n	8008678 <BSP_LCD_DisplayStringAt+0x74>
 8008672:	2b02      	cmp	r3, #2
 8008674:	d019      	beq.n	80086aa <BSP_LCD_DisplayStringAt+0xa6>
 8008676:	e02e      	b.n	80086d6 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8008678:	693a      	ldr	r2, [r7, #16]
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	1ad1      	subs	r1, r2, r3
 800867e:	4b43      	ldr	r3, [pc, #268]	; (800878c <BSP_LCD_DisplayStringAt+0x188>)
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	4843      	ldr	r0, [pc, #268]	; (8008790 <BSP_LCD_DisplayStringAt+0x18c>)
 8008684:	4613      	mov	r3, r2
 8008686:	005b      	lsls	r3, r3, #1
 8008688:	4413      	add	r3, r2
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	4403      	add	r3, r0
 800868e:	3308      	adds	r3, #8
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	889b      	ldrh	r3, [r3, #4]
 8008694:	fb01 f303 	mul.w	r3, r1, r3
 8008698:	085b      	lsrs	r3, r3, #1
 800869a:	b29a      	uxth	r2, r3
 800869c:	89fb      	ldrh	r3, [r7, #14]
 800869e:	4413      	add	r3, r2
 80086a0:	83fb      	strh	r3, [r7, #30]
      break;
 80086a2:	e01b      	b.n	80086dc <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80086a4:	89fb      	ldrh	r3, [r7, #14]
 80086a6:	83fb      	strh	r3, [r7, #30]
      break;
 80086a8:	e018      	b.n	80086dc <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80086aa:	693a      	ldr	r2, [r7, #16]
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	1ad3      	subs	r3, r2, r3
 80086b0:	b299      	uxth	r1, r3
 80086b2:	4b36      	ldr	r3, [pc, #216]	; (800878c <BSP_LCD_DisplayStringAt+0x188>)
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	4836      	ldr	r0, [pc, #216]	; (8008790 <BSP_LCD_DisplayStringAt+0x18c>)
 80086b8:	4613      	mov	r3, r2
 80086ba:	005b      	lsls	r3, r3, #1
 80086bc:	4413      	add	r3, r2
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	4403      	add	r3, r0
 80086c2:	3308      	adds	r3, #8
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	889b      	ldrh	r3, [r3, #4]
 80086c8:	fb11 f303 	smulbb	r3, r1, r3
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	89fb      	ldrh	r3, [r7, #14]
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	83fb      	strh	r3, [r7, #30]
      break;
 80086d4:	e002      	b.n	80086dc <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 80086d6:	89fb      	ldrh	r3, [r7, #14]
 80086d8:	83fb      	strh	r3, [r7, #30]
      break;
 80086da:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80086dc:	8bfb      	ldrh	r3, [r7, #30]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d003      	beq.n	80086ea <BSP_LCD_DisplayStringAt+0xe6>
 80086e2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	da1d      	bge.n	8008726 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 80086ea:	2301      	movs	r3, #1
 80086ec:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80086ee:	e01a      	b.n	8008726 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	781a      	ldrb	r2, [r3, #0]
 80086f4:	89b9      	ldrh	r1, [r7, #12]
 80086f6:	8bfb      	ldrh	r3, [r7, #30]
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7ff ff3f 	bl	800857c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80086fe:	4b23      	ldr	r3, [pc, #140]	; (800878c <BSP_LCD_DisplayStringAt+0x188>)
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	4923      	ldr	r1, [pc, #140]	; (8008790 <BSP_LCD_DisplayStringAt+0x18c>)
 8008704:	4613      	mov	r3, r2
 8008706:	005b      	lsls	r3, r3, #1
 8008708:	4413      	add	r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	440b      	add	r3, r1
 800870e:	3308      	adds	r3, #8
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	889a      	ldrh	r2, [r3, #4]
 8008714:	8bfb      	ldrh	r3, [r7, #30]
 8008716:	4413      	add	r3, r2
 8008718:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	3301      	adds	r3, #1
 800871e:	60bb      	str	r3, [r7, #8]
    i++;
 8008720:	8bbb      	ldrh	r3, [r7, #28]
 8008722:	3301      	adds	r3, #1
 8008724:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	2b00      	cmp	r3, #0
 800872c:	bf14      	ite	ne
 800872e:	2301      	movne	r3, #1
 8008730:	2300      	moveq	r3, #0
 8008732:	b2dc      	uxtb	r4, r3
 8008734:	f7ff fe16 	bl	8008364 <BSP_LCD_GetXSize>
 8008738:	8bb9      	ldrh	r1, [r7, #28]
 800873a:	4b14      	ldr	r3, [pc, #80]	; (800878c <BSP_LCD_DisplayStringAt+0x188>)
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	4d14      	ldr	r5, [pc, #80]	; (8008790 <BSP_LCD_DisplayStringAt+0x18c>)
 8008740:	4613      	mov	r3, r2
 8008742:	005b      	lsls	r3, r3, #1
 8008744:	4413      	add	r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	442b      	add	r3, r5
 800874a:	3308      	adds	r3, #8
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	889b      	ldrh	r3, [r3, #4]
 8008750:	fb01 f303 	mul.w	r3, r1, r3
 8008754:	1ac3      	subs	r3, r0, r3
 8008756:	b299      	uxth	r1, r3
 8008758:	4b0c      	ldr	r3, [pc, #48]	; (800878c <BSP_LCD_DisplayStringAt+0x188>)
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	480c      	ldr	r0, [pc, #48]	; (8008790 <BSP_LCD_DisplayStringAt+0x18c>)
 800875e:	4613      	mov	r3, r2
 8008760:	005b      	lsls	r3, r3, #1
 8008762:	4413      	add	r3, r2
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	4403      	add	r3, r0
 8008768:	3308      	adds	r3, #8
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	889b      	ldrh	r3, [r3, #4]
 800876e:	4299      	cmp	r1, r3
 8008770:	bf2c      	ite	cs
 8008772:	2301      	movcs	r3, #1
 8008774:	2300      	movcc	r3, #0
 8008776:	b2db      	uxtb	r3, r3
 8008778:	4023      	ands	r3, r4
 800877a:	b2db      	uxtb	r3, r3
 800877c:	2b00      	cmp	r3, #0
 800877e:	d1b7      	bne.n	80086f0 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8008780:	bf00      	nop
 8008782:	bf00      	nop
 8008784:	3720      	adds	r7, #32
 8008786:	46bd      	mov	sp, r7
 8008788:	bdb0      	pop	{r4, r5, r7, pc}
 800878a:	bf00      	nop
 800878c:	200343a4 	.word	0x200343a4
 8008790:	200343a8 	.word	0x200343a8

08008794 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8008794:	b5b0      	push	{r4, r5, r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	4603      	mov	r3, r0
 800879c:	603a      	str	r2, [r7, #0]
 800879e:	80fb      	strh	r3, [r7, #6]
 80087a0:	460b      	mov	r3, r1
 80087a2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80087a4:	4b1d      	ldr	r3, [pc, #116]	; (800881c <BSP_LCD_DrawPixel+0x88>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a1d      	ldr	r2, [pc, #116]	; (8008820 <BSP_LCD_DrawPixel+0x8c>)
 80087aa:	2134      	movs	r1, #52	; 0x34
 80087ac:	fb01 f303 	mul.w	r3, r1, r3
 80087b0:	4413      	add	r3, r2
 80087b2:	3348      	adds	r3, #72	; 0x48
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d116      	bne.n	80087e8 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80087ba:	4b18      	ldr	r3, [pc, #96]	; (800881c <BSP_LCD_DrawPixel+0x88>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a18      	ldr	r2, [pc, #96]	; (8008820 <BSP_LCD_DrawPixel+0x8c>)
 80087c0:	2134      	movs	r1, #52	; 0x34
 80087c2:	fb01 f303 	mul.w	r3, r1, r3
 80087c6:	4413      	add	r3, r2
 80087c8:	335c      	adds	r3, #92	; 0x5c
 80087ca:	681c      	ldr	r4, [r3, #0]
 80087cc:	88bd      	ldrh	r5, [r7, #4]
 80087ce:	f7ff fdc9 	bl	8008364 <BSP_LCD_GetXSize>
 80087d2:	4603      	mov	r3, r0
 80087d4:	fb03 f205 	mul.w	r2, r3, r5
 80087d8:	88fb      	ldrh	r3, [r7, #6]
 80087da:	4413      	add	r3, r2
 80087dc:	005b      	lsls	r3, r3, #1
 80087de:	4423      	add	r3, r4
 80087e0:	683a      	ldr	r2, [r7, #0]
 80087e2:	b292      	uxth	r2, r2
 80087e4:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80087e6:	e015      	b.n	8008814 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80087e8:	4b0c      	ldr	r3, [pc, #48]	; (800881c <BSP_LCD_DrawPixel+0x88>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a0c      	ldr	r2, [pc, #48]	; (8008820 <BSP_LCD_DrawPixel+0x8c>)
 80087ee:	2134      	movs	r1, #52	; 0x34
 80087f0:	fb01 f303 	mul.w	r3, r1, r3
 80087f4:	4413      	add	r3, r2
 80087f6:	335c      	adds	r3, #92	; 0x5c
 80087f8:	681c      	ldr	r4, [r3, #0]
 80087fa:	88bd      	ldrh	r5, [r7, #4]
 80087fc:	f7ff fdb2 	bl	8008364 <BSP_LCD_GetXSize>
 8008800:	4603      	mov	r3, r0
 8008802:	fb03 f205 	mul.w	r2, r3, r5
 8008806:	88fb      	ldrh	r3, [r7, #6]
 8008808:	4413      	add	r3, r2
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	4423      	add	r3, r4
 800880e:	461a      	mov	r2, r3
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	6013      	str	r3, [r2, #0]
}
 8008814:	bf00      	nop
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bdb0      	pop	{r4, r5, r7, pc}
 800881c:	200343a4 	.word	0x200343a4
 8008820:	200342bc 	.word	0x200342bc

08008824 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b090      	sub	sp, #64	; 0x40
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800882e:	4b64      	ldr	r3, [pc, #400]	; (80089c0 <BSP_LCD_MspInit+0x19c>)
 8008830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008832:	4a63      	ldr	r2, [pc, #396]	; (80089c0 <BSP_LCD_MspInit+0x19c>)
 8008834:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008838:	6453      	str	r3, [r2, #68]	; 0x44
 800883a:	4b61      	ldr	r3, [pc, #388]	; (80089c0 <BSP_LCD_MspInit+0x19c>)
 800883c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800883e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008842:	62bb      	str	r3, [r7, #40]	; 0x28
 8008844:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8008846:	4b5e      	ldr	r3, [pc, #376]	; (80089c0 <BSP_LCD_MspInit+0x19c>)
 8008848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800884a:	4a5d      	ldr	r2, [pc, #372]	; (80089c0 <BSP_LCD_MspInit+0x19c>)
 800884c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008850:	6313      	str	r3, [r2, #48]	; 0x30
 8008852:	4b5b      	ldr	r3, [pc, #364]	; (80089c0 <BSP_LCD_MspInit+0x19c>)
 8008854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008856:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800885a:	627b      	str	r3, [r7, #36]	; 0x24
 800885c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800885e:	4b58      	ldr	r3, [pc, #352]	; (80089c0 <BSP_LCD_MspInit+0x19c>)
 8008860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008862:	4a57      	ldr	r2, [pc, #348]	; (80089c0 <BSP_LCD_MspInit+0x19c>)
 8008864:	f043 0310 	orr.w	r3, r3, #16
 8008868:	6313      	str	r3, [r2, #48]	; 0x30
 800886a:	4b55      	ldr	r3, [pc, #340]	; (80089c0 <BSP_LCD_MspInit+0x19c>)
 800886c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886e:	f003 0310 	and.w	r3, r3, #16
 8008872:	623b      	str	r3, [r7, #32]
 8008874:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008876:	4b52      	ldr	r3, [pc, #328]	; (80089c0 <BSP_LCD_MspInit+0x19c>)
 8008878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800887a:	4a51      	ldr	r2, [pc, #324]	; (80089c0 <BSP_LCD_MspInit+0x19c>)
 800887c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008880:	6313      	str	r3, [r2, #48]	; 0x30
 8008882:	4b4f      	ldr	r3, [pc, #316]	; (80089c0 <BSP_LCD_MspInit+0x19c>)
 8008884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800888a:	61fb      	str	r3, [r7, #28]
 800888c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800888e:	4b4c      	ldr	r3, [pc, #304]	; (80089c0 <BSP_LCD_MspInit+0x19c>)
 8008890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008892:	4a4b      	ldr	r2, [pc, #300]	; (80089c0 <BSP_LCD_MspInit+0x19c>)
 8008894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008898:	6313      	str	r3, [r2, #48]	; 0x30
 800889a:	4b49      	ldr	r3, [pc, #292]	; (80089c0 <BSP_LCD_MspInit+0x19c>)
 800889c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088a2:	61bb      	str	r3, [r7, #24]
 80088a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80088a6:	4b46      	ldr	r3, [pc, #280]	; (80089c0 <BSP_LCD_MspInit+0x19c>)
 80088a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088aa:	4a45      	ldr	r2, [pc, #276]	; (80089c0 <BSP_LCD_MspInit+0x19c>)
 80088ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80088b0:	6313      	str	r3, [r2, #48]	; 0x30
 80088b2:	4b43      	ldr	r3, [pc, #268]	; (80089c0 <BSP_LCD_MspInit+0x19c>)
 80088b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088ba:	617b      	str	r3, [r7, #20]
 80088bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80088be:	4b40      	ldr	r3, [pc, #256]	; (80089c0 <BSP_LCD_MspInit+0x19c>)
 80088c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c2:	4a3f      	ldr	r2, [pc, #252]	; (80089c0 <BSP_LCD_MspInit+0x19c>)
 80088c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80088c8:	6313      	str	r3, [r2, #48]	; 0x30
 80088ca:	4b3d      	ldr	r3, [pc, #244]	; (80089c0 <BSP_LCD_MspInit+0x19c>)
 80088cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088d2:	613b      	str	r3, [r7, #16]
 80088d4:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80088d6:	4b3a      	ldr	r3, [pc, #232]	; (80089c0 <BSP_LCD_MspInit+0x19c>)
 80088d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088da:	4a39      	ldr	r2, [pc, #228]	; (80089c0 <BSP_LCD_MspInit+0x19c>)
 80088dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088e0:	6313      	str	r3, [r2, #48]	; 0x30
 80088e2:	4b37      	ldr	r3, [pc, #220]	; (80089c0 <BSP_LCD_MspInit+0x19c>)
 80088e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ea:	60fb      	str	r3, [r7, #12]
 80088ec:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80088ee:	4b34      	ldr	r3, [pc, #208]	; (80089c0 <BSP_LCD_MspInit+0x19c>)
 80088f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f2:	4a33      	ldr	r2, [pc, #204]	; (80089c0 <BSP_LCD_MspInit+0x19c>)
 80088f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80088f8:	6313      	str	r3, [r2, #48]	; 0x30
 80088fa:	4b31      	ldr	r3, [pc, #196]	; (80089c0 <BSP_LCD_MspInit+0x19c>)
 80088fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008902:	60bb      	str	r3, [r7, #8]
 8008904:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8008906:	2310      	movs	r3, #16
 8008908:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800890a:	2302      	movs	r3, #2
 800890c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800890e:	2300      	movs	r3, #0
 8008910:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8008912:	2302      	movs	r3, #2
 8008914:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8008916:	230e      	movs	r3, #14
 8008918:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800891a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800891e:	4619      	mov	r1, r3
 8008920:	4828      	ldr	r0, [pc, #160]	; (80089c4 <BSP_LCD_MspInit+0x1a0>)
 8008922:	f7fb fa07 	bl	8003d34 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8008926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800892a:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800892c:	2302      	movs	r3, #2
 800892e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8008930:	2309      	movs	r3, #9
 8008932:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8008934:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008938:	4619      	mov	r1, r3
 800893a:	4823      	ldr	r0, [pc, #140]	; (80089c8 <BSP_LCD_MspInit+0x1a4>)
 800893c:	f7fb f9fa 	bl	8003d34 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8008940:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8008944:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008946:	2302      	movs	r3, #2
 8008948:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800894a:	230e      	movs	r3, #14
 800894c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800894e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008952:	4619      	mov	r1, r3
 8008954:	481d      	ldr	r0, [pc, #116]	; (80089cc <BSP_LCD_MspInit+0x1a8>)
 8008956:	f7fb f9ed 	bl	8003d34 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800895a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800895e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008960:	2302      	movs	r3, #2
 8008962:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8008964:	230e      	movs	r3, #14
 8008966:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8008968:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800896c:	4619      	mov	r1, r3
 800896e:	4818      	ldr	r0, [pc, #96]	; (80089d0 <BSP_LCD_MspInit+0x1ac>)
 8008970:	f7fb f9e0 	bl	8003d34 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8008974:	23f7      	movs	r3, #247	; 0xf7
 8008976:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008978:	2302      	movs	r3, #2
 800897a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800897c:	230e      	movs	r3, #14
 800897e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8008980:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008984:	4619      	mov	r1, r3
 8008986:	4813      	ldr	r0, [pc, #76]	; (80089d4 <BSP_LCD_MspInit+0x1b0>)
 8008988:	f7fb f9d4 	bl	8003d34 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 800898c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008990:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8008992:	2301      	movs	r3, #1
 8008994:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8008996:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800899a:	4619      	mov	r1, r3
 800899c:	480b      	ldr	r0, [pc, #44]	; (80089cc <BSP_LCD_MspInit+0x1a8>)
 800899e:	f7fb f9c9 	bl	8003d34 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80089a2:	2308      	movs	r3, #8
 80089a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80089a6:	2301      	movs	r3, #1
 80089a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80089aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80089ae:	4619      	mov	r1, r3
 80089b0:	4808      	ldr	r0, [pc, #32]	; (80089d4 <BSP_LCD_MspInit+0x1b0>)
 80089b2:	f7fb f9bf 	bl	8003d34 <HAL_GPIO_Init>
}
 80089b6:	bf00      	nop
 80089b8:	3740      	adds	r7, #64	; 0x40
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	40023800 	.word	0x40023800
 80089c4:	40021000 	.word	0x40021000
 80089c8:	40021800 	.word	0x40021800
 80089cc:	40022000 	.word	0x40022000
 80089d0:	40022400 	.word	0x40022400
 80089d4:	40022800 	.word	0x40022800

080089d8 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80089e2:	4b0a      	ldr	r3, [pc, #40]	; (8008a0c <BSP_LCD_ClockConfig+0x34>)
 80089e4:	2208      	movs	r2, #8
 80089e6:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80089e8:	4b08      	ldr	r3, [pc, #32]	; (8008a0c <BSP_LCD_ClockConfig+0x34>)
 80089ea:	22c0      	movs	r2, #192	; 0xc0
 80089ec:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80089ee:	4b07      	ldr	r3, [pc, #28]	; (8008a0c <BSP_LCD_ClockConfig+0x34>)
 80089f0:	2205      	movs	r2, #5
 80089f2:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80089f4:	4b05      	ldr	r3, [pc, #20]	; (8008a0c <BSP_LCD_ClockConfig+0x34>)
 80089f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80089fa:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80089fc:	4803      	ldr	r0, [pc, #12]	; (8008a0c <BSP_LCD_ClockConfig+0x34>)
 80089fe:	f7fc fdcb 	bl	8005598 <HAL_RCCEx_PeriphCLKConfig>
}
 8008a02:	bf00      	nop
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	200343c0 	.word	0x200343c0

08008a10 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b088      	sub	sp, #32
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	4603      	mov	r3, r0
 8008a18:	603a      	str	r2, [r7, #0]
 8008a1a:	80fb      	strh	r3, [r7, #6]
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8008a20:	2300      	movs	r3, #0
 8008a22:	61fb      	str	r3, [r7, #28]
 8008a24:	2300      	movs	r3, #0
 8008a26:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8008a28:	4b53      	ldr	r3, [pc, #332]	; (8008b78 <DrawChar+0x168>)
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	4953      	ldr	r1, [pc, #332]	; (8008b7c <DrawChar+0x16c>)
 8008a2e:	4613      	mov	r3, r2
 8008a30:	005b      	lsls	r3, r3, #1
 8008a32:	4413      	add	r3, r2
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	440b      	add	r3, r1
 8008a38:	3308      	adds	r3, #8
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	88db      	ldrh	r3, [r3, #6]
 8008a3e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8008a40:	4b4d      	ldr	r3, [pc, #308]	; (8008b78 <DrawChar+0x168>)
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	494d      	ldr	r1, [pc, #308]	; (8008b7c <DrawChar+0x16c>)
 8008a46:	4613      	mov	r3, r2
 8008a48:	005b      	lsls	r3, r3, #1
 8008a4a:	4413      	add	r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	440b      	add	r3, r1
 8008a50:	3308      	adds	r3, #8
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	889b      	ldrh	r3, [r3, #4]
 8008a56:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8008a58:	8a3b      	ldrh	r3, [r7, #16]
 8008a5a:	3307      	adds	r3, #7
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	da00      	bge.n	8008a62 <DrawChar+0x52>
 8008a60:	3307      	adds	r3, #7
 8008a62:	10db      	asrs	r3, r3, #3
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	00db      	lsls	r3, r3, #3
 8008a68:	b2da      	uxtb	r2, r3
 8008a6a:	8a3b      	ldrh	r3, [r7, #16]
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	1ad3      	subs	r3, r2, r3
 8008a70:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8008a72:	2300      	movs	r3, #0
 8008a74:	61fb      	str	r3, [r7, #28]
 8008a76:	e076      	b.n	8008b66 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8008a78:	8a3b      	ldrh	r3, [r7, #16]
 8008a7a:	3307      	adds	r3, #7
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	da00      	bge.n	8008a82 <DrawChar+0x72>
 8008a80:	3307      	adds	r3, #7
 8008a82:	10db      	asrs	r3, r3, #3
 8008a84:	461a      	mov	r2, r3
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	fb02 f303 	mul.w	r3, r2, r3
 8008a8c:	683a      	ldr	r2, [r7, #0]
 8008a8e:	4413      	add	r3, r2
 8008a90:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8008a92:	8a3b      	ldrh	r3, [r7, #16]
 8008a94:	3307      	adds	r3, #7
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	da00      	bge.n	8008a9c <DrawChar+0x8c>
 8008a9a:	3307      	adds	r3, #7
 8008a9c:	10db      	asrs	r3, r3, #3
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d002      	beq.n	8008aa8 <DrawChar+0x98>
 8008aa2:	2b02      	cmp	r3, #2
 8008aa4:	d004      	beq.n	8008ab0 <DrawChar+0xa0>
 8008aa6:	e00c      	b.n	8008ac2 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	617b      	str	r3, [r7, #20]
      break;
 8008aae:	e016      	b.n	8008ade <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	021b      	lsls	r3, r3, #8
 8008ab6:	68ba      	ldr	r2, [r7, #8]
 8008ab8:	3201      	adds	r2, #1
 8008aba:	7812      	ldrb	r2, [r2, #0]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	617b      	str	r3, [r7, #20]
      break;
 8008ac0:	e00d      	b.n	8008ade <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	041a      	lsls	r2, r3, #16
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	3301      	adds	r3, #1
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	021b      	lsls	r3, r3, #8
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	68ba      	ldr	r2, [r7, #8]
 8008ad4:	3202      	adds	r2, #2
 8008ad6:	7812      	ldrb	r2, [r2, #0]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	617b      	str	r3, [r7, #20]
      break;
 8008adc:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8008ade:	2300      	movs	r3, #0
 8008ae0:	61bb      	str	r3, [r7, #24]
 8008ae2:	e036      	b.n	8008b52 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8008ae4:	8a3a      	ldrh	r2, [r7, #16]
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	1ad2      	subs	r2, r2, r3
 8008aea:	7bfb      	ldrb	r3, [r7, #15]
 8008aec:	4413      	add	r3, r2
 8008aee:	3b01      	subs	r3, #1
 8008af0:	2201      	movs	r2, #1
 8008af2:	fa02 f303 	lsl.w	r3, r2, r3
 8008af6:	461a      	mov	r2, r3
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	4013      	ands	r3, r2
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d012      	beq.n	8008b26 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	b29a      	uxth	r2, r3
 8008b04:	88fb      	ldrh	r3, [r7, #6]
 8008b06:	4413      	add	r3, r2
 8008b08:	b298      	uxth	r0, r3
 8008b0a:	4b1b      	ldr	r3, [pc, #108]	; (8008b78 <DrawChar+0x168>)
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	491b      	ldr	r1, [pc, #108]	; (8008b7c <DrawChar+0x16c>)
 8008b10:	4613      	mov	r3, r2
 8008b12:	005b      	lsls	r3, r3, #1
 8008b14:	4413      	add	r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	440b      	add	r3, r1
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	88bb      	ldrh	r3, [r7, #4]
 8008b1e:	4619      	mov	r1, r3
 8008b20:	f7ff fe38 	bl	8008794 <BSP_LCD_DrawPixel>
 8008b24:	e012      	b.n	8008b4c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	88fb      	ldrh	r3, [r7, #6]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	b298      	uxth	r0, r3
 8008b30:	4b11      	ldr	r3, [pc, #68]	; (8008b78 <DrawChar+0x168>)
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	4911      	ldr	r1, [pc, #68]	; (8008b7c <DrawChar+0x16c>)
 8008b36:	4613      	mov	r3, r2
 8008b38:	005b      	lsls	r3, r3, #1
 8008b3a:	4413      	add	r3, r2
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	440b      	add	r3, r1
 8008b40:	3304      	adds	r3, #4
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	88bb      	ldrh	r3, [r7, #4]
 8008b46:	4619      	mov	r1, r3
 8008b48:	f7ff fe24 	bl	8008794 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8008b4c:	69bb      	ldr	r3, [r7, #24]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	61bb      	str	r3, [r7, #24]
 8008b52:	8a3b      	ldrh	r3, [r7, #16]
 8008b54:	69ba      	ldr	r2, [r7, #24]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d3c4      	bcc.n	8008ae4 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8008b5a:	88bb      	ldrh	r3, [r7, #4]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	3301      	adds	r3, #1
 8008b64:	61fb      	str	r3, [r7, #28]
 8008b66:	8a7b      	ldrh	r3, [r7, #18]
 8008b68:	69fa      	ldr	r2, [r7, #28]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d384      	bcc.n	8008a78 <DrawChar+0x68>
  }
}
 8008b6e:	bf00      	nop
 8008b70:	bf00      	nop
 8008b72:	3720      	adds	r7, #32
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	200343a4 	.word	0x200343a4
 8008b7c:	200343a8 	.word	0x200343a8

08008b80 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af02      	add	r7, sp, #8
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
 8008b8c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8008b8e:	4b1e      	ldr	r3, [pc, #120]	; (8008c08 <LL_FillBuffer+0x88>)
 8008b90:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008b94:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8008b96:	4b1d      	ldr	r3, [pc, #116]	; (8008c0c <LL_FillBuffer+0x8c>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a1d      	ldr	r2, [pc, #116]	; (8008c10 <LL_FillBuffer+0x90>)
 8008b9c:	2134      	movs	r1, #52	; 0x34
 8008b9e:	fb01 f303 	mul.w	r3, r1, r3
 8008ba2:	4413      	add	r3, r2
 8008ba4:	3348      	adds	r3, #72	; 0x48
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	d103      	bne.n	8008bb4 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8008bac:	4b16      	ldr	r3, [pc, #88]	; (8008c08 <LL_FillBuffer+0x88>)
 8008bae:	2202      	movs	r2, #2
 8008bb0:	609a      	str	r2, [r3, #8]
 8008bb2:	e002      	b.n	8008bba <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8008bb4:	4b14      	ldr	r3, [pc, #80]	; (8008c08 <LL_FillBuffer+0x88>)
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8008bba:	4a13      	ldr	r2, [pc, #76]	; (8008c08 <LL_FillBuffer+0x88>)
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8008bc0:	4b11      	ldr	r3, [pc, #68]	; (8008c08 <LL_FillBuffer+0x88>)
 8008bc2:	4a14      	ldr	r2, [pc, #80]	; (8008c14 <LL_FillBuffer+0x94>)
 8008bc4:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8008bc6:	4810      	ldr	r0, [pc, #64]	; (8008c08 <LL_FillBuffer+0x88>)
 8008bc8:	f7fa fe28 	bl	800381c <HAL_DMA2D_Init>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d115      	bne.n	8008bfe <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8008bd2:	68f9      	ldr	r1, [r7, #12]
 8008bd4:	480c      	ldr	r0, [pc, #48]	; (8008c08 <LL_FillBuffer+0x88>)
 8008bd6:	f7fa ff7f 	bl	8003ad8 <HAL_DMA2D_ConfigLayer>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d10e      	bne.n	8008bfe <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8008be0:	68ba      	ldr	r2, [r7, #8]
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	9300      	str	r3, [sp, #0]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	69f9      	ldr	r1, [r7, #28]
 8008bea:	4807      	ldr	r0, [pc, #28]	; (8008c08 <LL_FillBuffer+0x88>)
 8008bec:	f7fa fe60 	bl	80038b0 <HAL_DMA2D_Start>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d103      	bne.n	8008bfe <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8008bf6:	210a      	movs	r1, #10
 8008bf8:	4803      	ldr	r0, [pc, #12]	; (8008c08 <LL_FillBuffer+0x88>)
 8008bfa:	f7fa fe84 	bl	8003906 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8008bfe:	bf00      	nop
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	20034364 	.word	0x20034364
 8008c0c:	200343a4 	.word	0x200343a4
 8008c10:	200342bc 	.word	0x200342bc
 8008c14:	4002b000 	.word	0x4002b000

08008c18 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8008c1c:	4b29      	ldr	r3, [pc, #164]	; (8008cc4 <BSP_SDRAM_Init+0xac>)
 8008c1e:	4a2a      	ldr	r2, [pc, #168]	; (8008cc8 <BSP_SDRAM_Init+0xb0>)
 8008c20:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8008c22:	4b2a      	ldr	r3, [pc, #168]	; (8008ccc <BSP_SDRAM_Init+0xb4>)
 8008c24:	2202      	movs	r2, #2
 8008c26:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8008c28:	4b28      	ldr	r3, [pc, #160]	; (8008ccc <BSP_SDRAM_Init+0xb4>)
 8008c2a:	2207      	movs	r2, #7
 8008c2c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8008c2e:	4b27      	ldr	r3, [pc, #156]	; (8008ccc <BSP_SDRAM_Init+0xb4>)
 8008c30:	2204      	movs	r2, #4
 8008c32:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8008c34:	4b25      	ldr	r3, [pc, #148]	; (8008ccc <BSP_SDRAM_Init+0xb4>)
 8008c36:	2207      	movs	r2, #7
 8008c38:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8008c3a:	4b24      	ldr	r3, [pc, #144]	; (8008ccc <BSP_SDRAM_Init+0xb4>)
 8008c3c:	2202      	movs	r2, #2
 8008c3e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8008c40:	4b22      	ldr	r3, [pc, #136]	; (8008ccc <BSP_SDRAM_Init+0xb4>)
 8008c42:	2202      	movs	r2, #2
 8008c44:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8008c46:	4b21      	ldr	r3, [pc, #132]	; (8008ccc <BSP_SDRAM_Init+0xb4>)
 8008c48:	2202      	movs	r2, #2
 8008c4a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8008c4c:	4b1d      	ldr	r3, [pc, #116]	; (8008cc4 <BSP_SDRAM_Init+0xac>)
 8008c4e:	2200      	movs	r2, #0
 8008c50:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8008c52:	4b1c      	ldr	r3, [pc, #112]	; (8008cc4 <BSP_SDRAM_Init+0xac>)
 8008c54:	2200      	movs	r2, #0
 8008c56:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8008c58:	4b1a      	ldr	r3, [pc, #104]	; (8008cc4 <BSP_SDRAM_Init+0xac>)
 8008c5a:	2204      	movs	r2, #4
 8008c5c:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8008c5e:	4b19      	ldr	r3, [pc, #100]	; (8008cc4 <BSP_SDRAM_Init+0xac>)
 8008c60:	2210      	movs	r2, #16
 8008c62:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8008c64:	4b17      	ldr	r3, [pc, #92]	; (8008cc4 <BSP_SDRAM_Init+0xac>)
 8008c66:	2240      	movs	r2, #64	; 0x40
 8008c68:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8008c6a:	4b16      	ldr	r3, [pc, #88]	; (8008cc4 <BSP_SDRAM_Init+0xac>)
 8008c6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c70:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8008c72:	4b14      	ldr	r3, [pc, #80]	; (8008cc4 <BSP_SDRAM_Init+0xac>)
 8008c74:	2200      	movs	r2, #0
 8008c76:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8008c78:	4b12      	ldr	r3, [pc, #72]	; (8008cc4 <BSP_SDRAM_Init+0xac>)
 8008c7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c7e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8008c80:	4b10      	ldr	r3, [pc, #64]	; (8008cc4 <BSP_SDRAM_Init+0xac>)
 8008c82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008c86:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8008c88:	4b0e      	ldr	r3, [pc, #56]	; (8008cc4 <BSP_SDRAM_Init+0xac>)
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8008c8e:	2100      	movs	r1, #0
 8008c90:	480c      	ldr	r0, [pc, #48]	; (8008cc4 <BSP_SDRAM_Init+0xac>)
 8008c92:	f000 f87f 	bl	8008d94 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8008c96:	490d      	ldr	r1, [pc, #52]	; (8008ccc <BSP_SDRAM_Init+0xb4>)
 8008c98:	480a      	ldr	r0, [pc, #40]	; (8008cc4 <BSP_SDRAM_Init+0xac>)
 8008c9a:	f7f9 feab 	bl	80029f4 <HAL_SDRAM_Init>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d003      	beq.n	8008cac <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8008ca4:	4b0a      	ldr	r3, [pc, #40]	; (8008cd0 <BSP_SDRAM_Init+0xb8>)
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	701a      	strb	r2, [r3, #0]
 8008caa:	e002      	b.n	8008cb2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8008cac:	4b08      	ldr	r3, [pc, #32]	; (8008cd0 <BSP_SDRAM_Init+0xb8>)
 8008cae:	2200      	movs	r2, #0
 8008cb0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8008cb2:	f240 6003 	movw	r0, #1539	; 0x603
 8008cb6:	f000 f80d 	bl	8008cd4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8008cba:	4b05      	ldr	r3, [pc, #20]	; (8008cd0 <BSP_SDRAM_Init+0xb8>)
 8008cbc:	781b      	ldrb	r3, [r3, #0]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	20034444 	.word	0x20034444
 8008cc8:	a0000140 	.word	0xa0000140
 8008ccc:	20034478 	.word	0x20034478
 8008cd0:	2000003c 	.word	0x2000003c

08008cd4 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8008ce0:	4b2a      	ldr	r3, [pc, #168]	; (8008d8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8008ce6:	4b29      	ldr	r3, [pc, #164]	; (8008d8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008ce8:	2210      	movs	r2, #16
 8008cea:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8008cec:	4b27      	ldr	r3, [pc, #156]	; (8008d8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008cee:	2201      	movs	r2, #1
 8008cf0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8008cf2:	4b26      	ldr	r3, [pc, #152]	; (8008d8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8008cf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cfc:	4923      	ldr	r1, [pc, #140]	; (8008d8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008cfe:	4824      	ldr	r0, [pc, #144]	; (8008d90 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8008d00:	f7f9 feb6 	bl	8002a70 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8008d04:	2001      	movs	r0, #1
 8008d06:	f7fa f9ab 	bl	8003060 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8008d0a:	4b20      	ldr	r3, [pc, #128]	; (8008d8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008d0c:	2202      	movs	r2, #2
 8008d0e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8008d10:	4b1e      	ldr	r3, [pc, #120]	; (8008d8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008d12:	2210      	movs	r2, #16
 8008d14:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8008d16:	4b1d      	ldr	r3, [pc, #116]	; (8008d8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008d18:	2201      	movs	r2, #1
 8008d1a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8008d1c:	4b1b      	ldr	r3, [pc, #108]	; (8008d8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008d1e:	2200      	movs	r2, #0
 8008d20:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8008d22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d26:	4919      	ldr	r1, [pc, #100]	; (8008d8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008d28:	4819      	ldr	r0, [pc, #100]	; (8008d90 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8008d2a:	f7f9 fea1 	bl	8002a70 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8008d2e:	4b17      	ldr	r3, [pc, #92]	; (8008d8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008d30:	2203      	movs	r2, #3
 8008d32:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8008d34:	4b15      	ldr	r3, [pc, #84]	; (8008d8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008d36:	2210      	movs	r2, #16
 8008d38:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8008d3a:	4b14      	ldr	r3, [pc, #80]	; (8008d8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008d3c:	2208      	movs	r2, #8
 8008d3e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8008d40:	4b12      	ldr	r3, [pc, #72]	; (8008d8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008d42:	2200      	movs	r2, #0
 8008d44:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8008d46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d4a:	4910      	ldr	r1, [pc, #64]	; (8008d8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008d4c:	4810      	ldr	r0, [pc, #64]	; (8008d90 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8008d4e:	f7f9 fe8f 	bl	8002a70 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8008d52:	f44f 7308 	mov.w	r3, #544	; 0x220
 8008d56:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8008d58:	4b0c      	ldr	r3, [pc, #48]	; (8008d8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008d5a:	2204      	movs	r2, #4
 8008d5c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8008d5e:	4b0b      	ldr	r3, [pc, #44]	; (8008d8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008d60:	2210      	movs	r2, #16
 8008d62:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8008d64:	4b09      	ldr	r3, [pc, #36]	; (8008d8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008d66:	2201      	movs	r2, #1
 8008d68:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	4a07      	ldr	r2, [pc, #28]	; (8008d8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008d6e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8008d70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d74:	4905      	ldr	r1, [pc, #20]	; (8008d8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008d76:	4806      	ldr	r0, [pc, #24]	; (8008d90 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8008d78:	f7f9 fe7a 	bl	8002a70 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8008d7c:	6879      	ldr	r1, [r7, #4]
 8008d7e:	4804      	ldr	r0, [pc, #16]	; (8008d90 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8008d80:	f7f9 fea1 	bl	8002ac6 <HAL_SDRAM_ProgramRefreshRate>
}
 8008d84:	bf00      	nop
 8008d86:	3710      	adds	r7, #16
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	20034494 	.word	0x20034494
 8008d90:	20034444 	.word	0x20034444

08008d94 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b090      	sub	sp, #64	; 0x40
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8008d9e:	4b70      	ldr	r3, [pc, #448]	; (8008f60 <BSP_SDRAM_MspInit+0x1cc>)
 8008da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da2:	4a6f      	ldr	r2, [pc, #444]	; (8008f60 <BSP_SDRAM_MspInit+0x1cc>)
 8008da4:	f043 0301 	orr.w	r3, r3, #1
 8008da8:	6393      	str	r3, [r2, #56]	; 0x38
 8008daa:	4b6d      	ldr	r3, [pc, #436]	; (8008f60 <BSP_SDRAM_MspInit+0x1cc>)
 8008dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dae:	f003 0301 	and.w	r3, r3, #1
 8008db2:	62bb      	str	r3, [r7, #40]	; 0x28
 8008db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8008db6:	4b6a      	ldr	r3, [pc, #424]	; (8008f60 <BSP_SDRAM_MspInit+0x1cc>)
 8008db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dba:	4a69      	ldr	r2, [pc, #420]	; (8008f60 <BSP_SDRAM_MspInit+0x1cc>)
 8008dbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8008dc2:	4b67      	ldr	r3, [pc, #412]	; (8008f60 <BSP_SDRAM_MspInit+0x1cc>)
 8008dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008dca:	627b      	str	r3, [r7, #36]	; 0x24
 8008dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008dce:	4b64      	ldr	r3, [pc, #400]	; (8008f60 <BSP_SDRAM_MspInit+0x1cc>)
 8008dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd2:	4a63      	ldr	r2, [pc, #396]	; (8008f60 <BSP_SDRAM_MspInit+0x1cc>)
 8008dd4:	f043 0304 	orr.w	r3, r3, #4
 8008dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8008dda:	4b61      	ldr	r3, [pc, #388]	; (8008f60 <BSP_SDRAM_MspInit+0x1cc>)
 8008ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dde:	f003 0304 	and.w	r3, r3, #4
 8008de2:	623b      	str	r3, [r7, #32]
 8008de4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008de6:	4b5e      	ldr	r3, [pc, #376]	; (8008f60 <BSP_SDRAM_MspInit+0x1cc>)
 8008de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dea:	4a5d      	ldr	r2, [pc, #372]	; (8008f60 <BSP_SDRAM_MspInit+0x1cc>)
 8008dec:	f043 0308 	orr.w	r3, r3, #8
 8008df0:	6313      	str	r3, [r2, #48]	; 0x30
 8008df2:	4b5b      	ldr	r3, [pc, #364]	; (8008f60 <BSP_SDRAM_MspInit+0x1cc>)
 8008df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df6:	f003 0308 	and.w	r3, r3, #8
 8008dfa:	61fb      	str	r3, [r7, #28]
 8008dfc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008dfe:	4b58      	ldr	r3, [pc, #352]	; (8008f60 <BSP_SDRAM_MspInit+0x1cc>)
 8008e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e02:	4a57      	ldr	r2, [pc, #348]	; (8008f60 <BSP_SDRAM_MspInit+0x1cc>)
 8008e04:	f043 0310 	orr.w	r3, r3, #16
 8008e08:	6313      	str	r3, [r2, #48]	; 0x30
 8008e0a:	4b55      	ldr	r3, [pc, #340]	; (8008f60 <BSP_SDRAM_MspInit+0x1cc>)
 8008e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e0e:	f003 0310 	and.w	r3, r3, #16
 8008e12:	61bb      	str	r3, [r7, #24]
 8008e14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008e16:	4b52      	ldr	r3, [pc, #328]	; (8008f60 <BSP_SDRAM_MspInit+0x1cc>)
 8008e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e1a:	4a51      	ldr	r2, [pc, #324]	; (8008f60 <BSP_SDRAM_MspInit+0x1cc>)
 8008e1c:	f043 0320 	orr.w	r3, r3, #32
 8008e20:	6313      	str	r3, [r2, #48]	; 0x30
 8008e22:	4b4f      	ldr	r3, [pc, #316]	; (8008f60 <BSP_SDRAM_MspInit+0x1cc>)
 8008e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e26:	f003 0320 	and.w	r3, r3, #32
 8008e2a:	617b      	str	r3, [r7, #20]
 8008e2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008e2e:	4b4c      	ldr	r3, [pc, #304]	; (8008f60 <BSP_SDRAM_MspInit+0x1cc>)
 8008e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e32:	4a4b      	ldr	r2, [pc, #300]	; (8008f60 <BSP_SDRAM_MspInit+0x1cc>)
 8008e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e38:	6313      	str	r3, [r2, #48]	; 0x30
 8008e3a:	4b49      	ldr	r3, [pc, #292]	; (8008f60 <BSP_SDRAM_MspInit+0x1cc>)
 8008e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e42:	613b      	str	r3, [r7, #16]
 8008e44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008e46:	4b46      	ldr	r3, [pc, #280]	; (8008f60 <BSP_SDRAM_MspInit+0x1cc>)
 8008e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4a:	4a45      	ldr	r2, [pc, #276]	; (8008f60 <BSP_SDRAM_MspInit+0x1cc>)
 8008e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e50:	6313      	str	r3, [r2, #48]	; 0x30
 8008e52:	4b43      	ldr	r3, [pc, #268]	; (8008f60 <BSP_SDRAM_MspInit+0x1cc>)
 8008e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e5a:	60fb      	str	r3, [r7, #12]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008e5e:	2302      	movs	r3, #2
 8008e60:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8008e62:	2301      	movs	r3, #1
 8008e64:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8008e66:	2302      	movs	r3, #2
 8008e68:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8008e6a:	230c      	movs	r3, #12
 8008e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8008e6e:	2308      	movs	r3, #8
 8008e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8008e72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008e76:	4619      	mov	r1, r3
 8008e78:	483a      	ldr	r0, [pc, #232]	; (8008f64 <BSP_SDRAM_MspInit+0x1d0>)
 8008e7a:	f7fa ff5b 	bl	8003d34 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8008e7e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8008e82:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8008e84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008e88:	4619      	mov	r1, r3
 8008e8a:	4837      	ldr	r0, [pc, #220]	; (8008f68 <BSP_SDRAM_MspInit+0x1d4>)
 8008e8c:	f7fa ff52 	bl	8003d34 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8008e90:	f64f 7383 	movw	r3, #65411	; 0xff83
 8008e94:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8008e96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	4833      	ldr	r0, [pc, #204]	; (8008f6c <BSP_SDRAM_MspInit+0x1d8>)
 8008e9e:	f7fa ff49 	bl	8003d34 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8008ea2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8008ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8008ea8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008eac:	4619      	mov	r1, r3
 8008eae:	4830      	ldr	r0, [pc, #192]	; (8008f70 <BSP_SDRAM_MspInit+0x1dc>)
 8008eb0:	f7fa ff40 	bl	8003d34 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8008eb4:	f248 1333 	movw	r3, #33075	; 0x8133
 8008eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8008eba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	482c      	ldr	r0, [pc, #176]	; (8008f74 <BSP_SDRAM_MspInit+0x1e0>)
 8008ec2:	f7fa ff37 	bl	8003d34 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8008ec6:	2328      	movs	r3, #40	; 0x28
 8008ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8008eca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008ece:	4619      	mov	r1, r3
 8008ed0:	4829      	ldr	r0, [pc, #164]	; (8008f78 <BSP_SDRAM_MspInit+0x1e4>)
 8008ed2:	f7fa ff2f 	bl	8003d34 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8008ed6:	4b29      	ldr	r3, [pc, #164]	; (8008f7c <BSP_SDRAM_MspInit+0x1e8>)
 8008ed8:	2200      	movs	r2, #0
 8008eda:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8008edc:	4b27      	ldr	r3, [pc, #156]	; (8008f7c <BSP_SDRAM_MspInit+0x1e8>)
 8008ede:	2280      	movs	r2, #128	; 0x80
 8008ee0:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8008ee2:	4b26      	ldr	r3, [pc, #152]	; (8008f7c <BSP_SDRAM_MspInit+0x1e8>)
 8008ee4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ee8:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8008eea:	4b24      	ldr	r3, [pc, #144]	; (8008f7c <BSP_SDRAM_MspInit+0x1e8>)
 8008eec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008ef0:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008ef2:	4b22      	ldr	r3, [pc, #136]	; (8008f7c <BSP_SDRAM_MspInit+0x1e8>)
 8008ef4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008ef8:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8008efa:	4b20      	ldr	r3, [pc, #128]	; (8008f7c <BSP_SDRAM_MspInit+0x1e8>)
 8008efc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008f00:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8008f02:	4b1e      	ldr	r3, [pc, #120]	; (8008f7c <BSP_SDRAM_MspInit+0x1e8>)
 8008f04:	2200      	movs	r2, #0
 8008f06:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8008f08:	4b1c      	ldr	r3, [pc, #112]	; (8008f7c <BSP_SDRAM_MspInit+0x1e8>)
 8008f0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008f0e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8008f10:	4b1a      	ldr	r3, [pc, #104]	; (8008f7c <BSP_SDRAM_MspInit+0x1e8>)
 8008f12:	2200      	movs	r2, #0
 8008f14:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8008f16:	4b19      	ldr	r3, [pc, #100]	; (8008f7c <BSP_SDRAM_MspInit+0x1e8>)
 8008f18:	2203      	movs	r2, #3
 8008f1a:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8008f1c:	4b17      	ldr	r3, [pc, #92]	; (8008f7c <BSP_SDRAM_MspInit+0x1e8>)
 8008f1e:	2200      	movs	r2, #0
 8008f20:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8008f22:	4b16      	ldr	r3, [pc, #88]	; (8008f7c <BSP_SDRAM_MspInit+0x1e8>)
 8008f24:	2200      	movs	r2, #0
 8008f26:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8008f28:	4b14      	ldr	r3, [pc, #80]	; (8008f7c <BSP_SDRAM_MspInit+0x1e8>)
 8008f2a:	4a15      	ldr	r2, [pc, #84]	; (8008f80 <BSP_SDRAM_MspInit+0x1ec>)
 8008f2c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4a12      	ldr	r2, [pc, #72]	; (8008f7c <BSP_SDRAM_MspInit+0x1e8>)
 8008f32:	631a      	str	r2, [r3, #48]	; 0x30
 8008f34:	4a11      	ldr	r2, [pc, #68]	; (8008f7c <BSP_SDRAM_MspInit+0x1e8>)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8008f3a:	4810      	ldr	r0, [pc, #64]	; (8008f7c <BSP_SDRAM_MspInit+0x1e8>)
 8008f3c:	f7fa fb5e 	bl	80035fc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8008f40:	480e      	ldr	r0, [pc, #56]	; (8008f7c <BSP_SDRAM_MspInit+0x1e8>)
 8008f42:	f7fa faad 	bl	80034a0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8008f46:	2200      	movs	r2, #0
 8008f48:	210f      	movs	r1, #15
 8008f4a:	2038      	movs	r0, #56	; 0x38
 8008f4c:	f7fa f987 	bl	800325e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8008f50:	2038      	movs	r0, #56	; 0x38
 8008f52:	f7fa f9a0 	bl	8003296 <HAL_NVIC_EnableIRQ>
}
 8008f56:	bf00      	nop
 8008f58:	3740      	adds	r7, #64	; 0x40
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	40023800 	.word	0x40023800
 8008f64:	40020800 	.word	0x40020800
 8008f68:	40020c00 	.word	0x40020c00
 8008f6c:	40021000 	.word	0x40021000
 8008f70:	40021400 	.word	0x40021400
 8008f74:	40021800 	.word	0x40021800
 8008f78:	40021c00 	.word	0x40021c00
 8008f7c:	200344a4 	.word	0x200344a4
 8008f80:	40026410 	.word	0x40026410

08008f84 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	460a      	mov	r2, r1
 8008f8e:	80fb      	strh	r3, [r7, #6]
 8008f90:	4613      	mov	r3, r2
 8008f92:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8008f98:	4a14      	ldr	r2, [pc, #80]	; (8008fec <BSP_TS_Init+0x68>)
 8008f9a:	88fb      	ldrh	r3, [r7, #6]
 8008f9c:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8008f9e:	4a14      	ldr	r2, [pc, #80]	; (8008ff0 <BSP_TS_Init+0x6c>)
 8008fa0:	88bb      	ldrh	r3, [r7, #4]
 8008fa2:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8008fa4:	4b13      	ldr	r3, [pc, #76]	; (8008ff4 <BSP_TS_Init+0x70>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2070      	movs	r0, #112	; 0x70
 8008faa:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8008fac:	4b11      	ldr	r3, [pc, #68]	; (8008ff4 <BSP_TS_Init+0x70>)
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	2070      	movs	r0, #112	; 0x70
 8008fb2:	4798      	blx	r3
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b51      	cmp	r3, #81	; 0x51
 8008fb8:	d111      	bne.n	8008fde <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8008fba:	4b0f      	ldr	r3, [pc, #60]	; (8008ff8 <BSP_TS_Init+0x74>)
 8008fbc:	4a0d      	ldr	r2, [pc, #52]	; (8008ff4 <BSP_TS_Init+0x70>)
 8008fbe:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8008fc0:	4b0e      	ldr	r3, [pc, #56]	; (8008ffc <BSP_TS_Init+0x78>)
 8008fc2:	2270      	movs	r2, #112	; 0x70
 8008fc4:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8008fc6:	4b0e      	ldr	r3, [pc, #56]	; (8009000 <BSP_TS_Init+0x7c>)
 8008fc8:	2208      	movs	r2, #8
 8008fca:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8008fcc:	4b0a      	ldr	r3, [pc, #40]	; (8008ff8 <BSP_TS_Init+0x74>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	4a0a      	ldr	r2, [pc, #40]	; (8008ffc <BSP_TS_Init+0x78>)
 8008fd4:	7812      	ldrb	r2, [r2, #0]
 8008fd6:	b292      	uxth	r2, r2
 8008fd8:	4610      	mov	r0, r2
 8008fda:	4798      	blx	r3
 8008fdc:	e001      	b.n	8008fe2 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	20034508 	.word	0x20034508
 8008ff0:	2003450a 	.word	0x2003450a
 8008ff4:	20000014 	.word	0x20000014
 8008ff8:	20034504 	.word	0x20034504
 8008ffc:	2003450d 	.word	0x2003450d
 8009000:	2003450c 	.word	0x2003450c

08009004 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8009004:	b590      	push	{r4, r7, lr}
 8009006:	b097      	sub	sp, #92	; 0x5c
 8009008:	af02      	add	r7, sp, #8
 800900a:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800900c:	2300      	movs	r3, #0
 800900e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8009012:	2300      	movs	r3, #0
 8009014:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8009016:	2300      	movs	r3, #0
 8009018:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 800901a:	2300      	movs	r3, #0
 800901c:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800901e:	4bb4      	ldr	r3, [pc, #720]	; (80092f0 <BSP_TS_GetState+0x2ec>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	4ab3      	ldr	r2, [pc, #716]	; (80092f4 <BSP_TS_GetState+0x2f0>)
 8009026:	7812      	ldrb	r2, [r2, #0]
 8009028:	b292      	uxth	r2, r2
 800902a:	4610      	mov	r0, r2
 800902c:	4798      	blx	r3
 800902e:	4603      	mov	r3, r0
 8009030:	461a      	mov	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	f000 8196 	beq.w	800936c <BSP_TS_GetState+0x368>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8009040:	2300      	movs	r3, #0
 8009042:	64bb      	str	r3, [r7, #72]	; 0x48
 8009044:	e185      	b.n	8009352 <BSP_TS_GetState+0x34e>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8009046:	4baa      	ldr	r3, [pc, #680]	; (80092f0 <BSP_TS_GetState+0x2ec>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	695b      	ldr	r3, [r3, #20]
 800904c:	4aa9      	ldr	r2, [pc, #676]	; (80092f4 <BSP_TS_GetState+0x2f0>)
 800904e:	7812      	ldrb	r2, [r2, #0]
 8009050:	b290      	uxth	r0, r2
 8009052:	f107 0120 	add.w	r1, r7, #32
 8009056:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009058:	0052      	lsls	r2, r2, #1
 800905a:	188c      	adds	r4, r1, r2
 800905c:	f107 0114 	add.w	r1, r7, #20
 8009060:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009062:	0052      	lsls	r2, r2, #1
 8009064:	440a      	add	r2, r1
 8009066:	4621      	mov	r1, r4
 8009068:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 800906a:	4ba3      	ldr	r3, [pc, #652]	; (80092f8 <BSP_TS_GetState+0x2f4>)
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	2b01      	cmp	r3, #1
 8009070:	d117      	bne.n	80090a2 <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 8009072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009074:	005b      	lsls	r3, r3, #1
 8009076:	3350      	adds	r3, #80	; 0x50
 8009078:	443b      	add	r3, r7
 800907a:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800907e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009080:	005b      	lsls	r3, r3, #1
 8009082:	3350      	adds	r3, #80	; 0x50
 8009084:	443b      	add	r3, r7
 8009086:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 800908a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800908c:	005b      	lsls	r3, r3, #1
 800908e:	3350      	adds	r3, #80	; 0x50
 8009090:	443b      	add	r3, r7
 8009092:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8009096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009098:	005b      	lsls	r3, r3, #1
 800909a:	3350      	adds	r3, #80	; 0x50
 800909c:	443b      	add	r3, r7
 800909e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 80090a2:	4b95      	ldr	r3, [pc, #596]	; (80092f8 <BSP_TS_GetState+0x2f4>)
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	f003 0302 	and.w	r3, r3, #2
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00e      	beq.n	80090cc <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 80090ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090b0:	005b      	lsls	r3, r3, #1
 80090b2:	3350      	adds	r3, #80	; 0x50
 80090b4:	443b      	add	r3, r7
 80090b6:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 80090ba:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80090be:	b29a      	uxth	r2, r3
 80090c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090c2:	005b      	lsls	r3, r3, #1
 80090c4:	3350      	adds	r3, #80	; 0x50
 80090c6:	443b      	add	r3, r7
 80090c8:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 80090cc:	4b8a      	ldr	r3, [pc, #552]	; (80092f8 <BSP_TS_GetState+0x2f4>)
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	f003 0304 	and.w	r3, r3, #4
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d00e      	beq.n	80090f6 <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 80090d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090da:	005b      	lsls	r3, r3, #1
 80090dc:	3350      	adds	r3, #80	; 0x50
 80090de:	443b      	add	r3, r7
 80090e0:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 80090e4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80090e8:	b29a      	uxth	r2, r3
 80090ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090ec:	005b      	lsls	r3, r3, #1
 80090ee:	3350      	adds	r3, #80	; 0x50
 80090f0:	443b      	add	r3, r7
 80090f2:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 80090f6:	4b80      	ldr	r3, [pc, #512]	; (80092f8 <BSP_TS_GetState+0x2f4>)
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	f003 0308 	and.w	r3, r3, #8
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d017      	beq.n	8009132 <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8009102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009104:	005b      	lsls	r3, r3, #1
 8009106:	3350      	adds	r3, #80	; 0x50
 8009108:	443b      	add	r3, r7
 800910a:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800910e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009110:	005b      	lsls	r3, r3, #1
 8009112:	3350      	adds	r3, #80	; 0x50
 8009114:	443b      	add	r3, r7
 8009116:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 800911a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800911c:	005b      	lsls	r3, r3, #1
 800911e:	3350      	adds	r3, #80	; 0x50
 8009120:	443b      	add	r3, r7
 8009122:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8009126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009128:	005b      	lsls	r3, r3, #1
 800912a:	3350      	adds	r3, #80	; 0x50
 800912c:	443b      	add	r3, r7
 800912e:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8009132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009134:	005b      	lsls	r3, r3, #1
 8009136:	3350      	adds	r3, #80	; 0x50
 8009138:	443b      	add	r3, r7
 800913a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800913e:	4619      	mov	r1, r3
 8009140:	4a6e      	ldr	r2, [pc, #440]	; (80092fc <BSP_TS_GetState+0x2f8>)
 8009142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009148:	4299      	cmp	r1, r3
 800914a:	d90d      	bls.n	8009168 <BSP_TS_GetState+0x164>
 800914c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800914e:	005b      	lsls	r3, r3, #1
 8009150:	3350      	adds	r3, #80	; 0x50
 8009152:	443b      	add	r3, r7
 8009154:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8009158:	4968      	ldr	r1, [pc, #416]	; (80092fc <BSP_TS_GetState+0x2f8>)
 800915a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800915c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009160:	b29b      	uxth	r3, r3
 8009162:	1ad3      	subs	r3, r2, r3
 8009164:	b29b      	uxth	r3, r3
 8009166:	e00c      	b.n	8009182 <BSP_TS_GetState+0x17e>
 8009168:	4a64      	ldr	r2, [pc, #400]	; (80092fc <BSP_TS_GetState+0x2f8>)
 800916a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800916c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009170:	b29a      	uxth	r2, r3
 8009172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009174:	005b      	lsls	r3, r3, #1
 8009176:	3350      	adds	r3, #80	; 0x50
 8009178:	443b      	add	r3, r7
 800917a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	b29b      	uxth	r3, r3
 8009182:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8009186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009188:	005b      	lsls	r3, r3, #1
 800918a:	3350      	adds	r3, #80	; 0x50
 800918c:	443b      	add	r3, r7
 800918e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8009192:	4619      	mov	r1, r3
 8009194:	4a5a      	ldr	r2, [pc, #360]	; (8009300 <BSP_TS_GetState+0x2fc>)
 8009196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800919c:	4299      	cmp	r1, r3
 800919e:	d90d      	bls.n	80091bc <BSP_TS_GetState+0x1b8>
 80091a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091a2:	005b      	lsls	r3, r3, #1
 80091a4:	3350      	adds	r3, #80	; 0x50
 80091a6:	443b      	add	r3, r7
 80091a8:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 80091ac:	4954      	ldr	r1, [pc, #336]	; (8009300 <BSP_TS_GetState+0x2fc>)
 80091ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	e00c      	b.n	80091d6 <BSP_TS_GetState+0x1d2>
 80091bc:	4a50      	ldr	r2, [pc, #320]	; (8009300 <BSP_TS_GetState+0x2fc>)
 80091be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091c4:	b29a      	uxth	r2, r3
 80091c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091c8:	005b      	lsls	r3, r3, #1
 80091ca:	3350      	adds	r3, #80	; 0x50
 80091cc:	443b      	add	r3, r7
 80091ce:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80091d2:	1ad3      	subs	r3, r2, r3
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 80091da:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80091de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80091e2:	4413      	add	r3, r2
 80091e4:	2b05      	cmp	r3, #5
 80091e6:	dd15      	ble.n	8009214 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 80091e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091ea:	005b      	lsls	r3, r3, #1
 80091ec:	3350      	adds	r3, #80	; 0x50
 80091ee:	443b      	add	r3, r7
 80091f0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80091f4:	4619      	mov	r1, r3
 80091f6:	4a41      	ldr	r2, [pc, #260]	; (80092fc <BSP_TS_GetState+0x2f8>)
 80091f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 80091fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009200:	005b      	lsls	r3, r3, #1
 8009202:	3350      	adds	r3, #80	; 0x50
 8009204:	443b      	add	r3, r7
 8009206:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800920a:	4619      	mov	r1, r3
 800920c:	4a3c      	ldr	r2, [pc, #240]	; (8009300 <BSP_TS_GetState+0x2fc>)
 800920e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009210:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8009214:	4b37      	ldr	r3, [pc, #220]	; (80092f4 <BSP_TS_GetState+0x2f0>)
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	2b70      	cmp	r3, #112	; 0x70
 800921a:	d119      	bne.n	8009250 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 800921c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800921e:	005b      	lsls	r3, r3, #1
 8009220:	3350      	adds	r3, #80	; 0x50
 8009222:	443b      	add	r3, r7
 8009224:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800922c:	005b      	lsls	r3, r3, #1
 800922e:	4413      	add	r3, r2
 8009230:	460a      	mov	r2, r1
 8009232:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8009234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009236:	005b      	lsls	r3, r3, #1
 8009238:	3350      	adds	r3, #80	; 0x50
 800923a:	443b      	add	r3, r7
 800923c:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009244:	3304      	adds	r3, #4
 8009246:	005b      	lsls	r3, r3, #1
 8009248:	4413      	add	r3, r2
 800924a:	460a      	mov	r2, r1
 800924c:	809a      	strh	r2, [r3, #4]
 800924e:	e022      	b.n	8009296 <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8009250:	4b2c      	ldr	r3, [pc, #176]	; (8009304 <BSP_TS_GetState+0x300>)
 8009252:	881b      	ldrh	r3, [r3, #0]
 8009254:	4619      	mov	r1, r3
 8009256:	4a29      	ldr	r2, [pc, #164]	; (80092fc <BSP_TS_GetState+0x2f8>)
 8009258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800925a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800925e:	fb01 f303 	mul.w	r3, r1, r3
 8009262:	0b1b      	lsrs	r3, r3, #12
 8009264:	b299      	uxth	r1, r3
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800926a:	005b      	lsls	r3, r3, #1
 800926c:	4413      	add	r3, r2
 800926e:	460a      	mov	r2, r1
 8009270:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8009272:	4b25      	ldr	r3, [pc, #148]	; (8009308 <BSP_TS_GetState+0x304>)
 8009274:	881b      	ldrh	r3, [r3, #0]
 8009276:	4619      	mov	r1, r3
 8009278:	4a21      	ldr	r2, [pc, #132]	; (8009300 <BSP_TS_GetState+0x2fc>)
 800927a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800927c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009280:	fb01 f303 	mul.w	r3, r1, r3
 8009284:	0b1b      	lsrs	r3, r3, #12
 8009286:	b299      	uxth	r1, r3
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800928c:	3304      	adds	r3, #4
 800928e:	005b      	lsls	r3, r3, #1
 8009290:	4413      	add	r3, r2
 8009292:	460a      	mov	r2, r1
 8009294:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8009296:	4b17      	ldr	r3, [pc, #92]	; (80092f4 <BSP_TS_GetState+0x2f0>)
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	b298      	uxth	r0, r3
 800929c:	f107 010c 	add.w	r1, r7, #12
 80092a0:	f107 0210 	add.w	r2, r7, #16
 80092a4:	f107 0308 	add.w	r3, r7, #8
 80092a8:	9300      	str	r3, [sp, #0]
 80092aa:	460b      	mov	r3, r1
 80092ac:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80092ae:	f7fe fd6d 	bl	8007d8c <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	b2d9      	uxtb	r1, r3
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092ba:	4413      	add	r3, r2
 80092bc:	3316      	adds	r3, #22
 80092be:	460a      	mov	r2, r1
 80092c0:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	b2d9      	uxtb	r1, r3
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092ca:	4413      	add	r3, r2
 80092cc:	3320      	adds	r3, #32
 80092ce:	460a      	mov	r2, r1
 80092d0:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	2b03      	cmp	r3, #3
 80092d6:	d835      	bhi.n	8009344 <BSP_TS_GetState+0x340>
 80092d8:	a201      	add	r2, pc, #4	; (adr r2, 80092e0 <BSP_TS_GetState+0x2dc>)
 80092da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092de:	bf00      	nop
 80092e0:	0800930d 	.word	0x0800930d
 80092e4:	0800931b 	.word	0x0800931b
 80092e8:	08009329 	.word	0x08009329
 80092ec:	08009337 	.word	0x08009337
 80092f0:	20034504 	.word	0x20034504
 80092f4:	2003450d 	.word	0x2003450d
 80092f8:	2003450c 	.word	0x2003450c
 80092fc:	20034510 	.word	0x20034510
 8009300:	20034524 	.word	0x20034524
 8009304:	20034508 	.word	0x20034508
 8009308:	2003450a 	.word	0x2003450a
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009310:	4413      	add	r3, r2
 8009312:	331b      	adds	r3, #27
 8009314:	2201      	movs	r2, #1
 8009316:	701a      	strb	r2, [r3, #0]
          break;
 8009318:	e018      	b.n	800934c <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800931e:	4413      	add	r3, r2
 8009320:	331b      	adds	r3, #27
 8009322:	2202      	movs	r2, #2
 8009324:	701a      	strb	r2, [r3, #0]
          break;
 8009326:	e011      	b.n	800934c <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800932c:	4413      	add	r3, r2
 800932e:	331b      	adds	r3, #27
 8009330:	2203      	movs	r2, #3
 8009332:	701a      	strb	r2, [r3, #0]
          break;
 8009334:	e00a      	b.n	800934c <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800933a:	4413      	add	r3, r2
 800933c:	331b      	adds	r3, #27
 800933e:	2200      	movs	r2, #0
 8009340:	701a      	strb	r2, [r3, #0]
          break;
 8009342:	e003      	b.n	800934c <BSP_TS_GetState+0x348>
        default :
          ts_status = TS_ERROR;
 8009344:	2301      	movs	r3, #1
 8009346:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 800934a:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 800934c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800934e:	3301      	adds	r3, #1
 8009350:	64bb      	str	r3, [r7, #72]	; 0x48
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	461a      	mov	r2, r3
 8009358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800935a:	4293      	cmp	r3, r2
 800935c:	f4ff ae73 	bcc.w	8009046 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 f809 	bl	8009378 <BSP_TS_Get_GestureId>
 8009366:	4603      	mov	r3, r0
 8009368:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800936c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8009370:	4618      	mov	r0, r3
 8009372:	3754      	adds	r7, #84	; 0x54
 8009374:	46bd      	mov	sp, r7
 8009376:	bd90      	pop	{r4, r7, pc}

08009378 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8009380:	2300      	movs	r3, #0
 8009382:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8009384:	2300      	movs	r3, #0
 8009386:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8009388:	4b3b      	ldr	r3, [pc, #236]	; (8009478 <BSP_TS_Get_GestureId+0x100>)
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	b29b      	uxth	r3, r3
 800938e:	f107 0208 	add.w	r2, r7, #8
 8009392:	4611      	mov	r1, r2
 8009394:	4618      	mov	r0, r3
 8009396:	f7fe fce0 	bl	8007d5a <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	2b49      	cmp	r3, #73	; 0x49
 800939e:	d05e      	beq.n	800945e <BSP_TS_Get_GestureId+0xe6>
 80093a0:	2b49      	cmp	r3, #73	; 0x49
 80093a2:	d860      	bhi.n	8009466 <BSP_TS_Get_GestureId+0xee>
 80093a4:	2b1c      	cmp	r3, #28
 80093a6:	d83f      	bhi.n	8009428 <BSP_TS_Get_GestureId+0xb0>
 80093a8:	2b1c      	cmp	r3, #28
 80093aa:	d85c      	bhi.n	8009466 <BSP_TS_Get_GestureId+0xee>
 80093ac:	a201      	add	r2, pc, #4	; (adr r2, 80093b4 <BSP_TS_Get_GestureId+0x3c>)
 80093ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b2:	bf00      	nop
 80093b4:	0800942f 	.word	0x0800942f
 80093b8:	08009467 	.word	0x08009467
 80093bc:	08009467 	.word	0x08009467
 80093c0:	08009467 	.word	0x08009467
 80093c4:	08009467 	.word	0x08009467
 80093c8:	08009467 	.word	0x08009467
 80093cc:	08009467 	.word	0x08009467
 80093d0:	08009467 	.word	0x08009467
 80093d4:	08009467 	.word	0x08009467
 80093d8:	08009467 	.word	0x08009467
 80093dc:	08009467 	.word	0x08009467
 80093e0:	08009467 	.word	0x08009467
 80093e4:	08009467 	.word	0x08009467
 80093e8:	08009467 	.word	0x08009467
 80093ec:	08009467 	.word	0x08009467
 80093f0:	08009467 	.word	0x08009467
 80093f4:	08009437 	.word	0x08009437
 80093f8:	08009467 	.word	0x08009467
 80093fc:	08009467 	.word	0x08009467
 8009400:	08009467 	.word	0x08009467
 8009404:	0800943f 	.word	0x0800943f
 8009408:	08009467 	.word	0x08009467
 800940c:	08009467 	.word	0x08009467
 8009410:	08009467 	.word	0x08009467
 8009414:	08009447 	.word	0x08009447
 8009418:	08009467 	.word	0x08009467
 800941c:	08009467 	.word	0x08009467
 8009420:	08009467 	.word	0x08009467
 8009424:	0800944f 	.word	0x0800944f
 8009428:	2b40      	cmp	r3, #64	; 0x40
 800942a:	d014      	beq.n	8009456 <BSP_TS_Get_GestureId+0xde>
 800942c:	e01b      	b.n	8009466 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8009434:	e01a      	b.n	800946c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2201      	movs	r2, #1
 800943a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800943c:	e016      	b.n	800946c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2202      	movs	r2, #2
 8009442:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8009444:	e012      	b.n	800946c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2203      	movs	r2, #3
 800944a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800944c:	e00e      	b.n	800946c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2204      	movs	r2, #4
 8009452:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8009454:	e00a      	b.n	800946c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2205      	movs	r2, #5
 800945a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800945c:	e006      	b.n	800946c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2206      	movs	r2, #6
 8009462:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8009464:	e002      	b.n	800946c <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	73fb      	strb	r3, [r7, #15]
      break;
 800946a:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 800946c:	7bfb      	ldrb	r3, [r7, #15]
}
 800946e:	4618      	mov	r0, r3
 8009470:	3710      	adds	r7, #16
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	2003450d 	.word	0x2003450d

0800947c <BSP_TS_ResetTouchData>:
  *         of touch information.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if OK, TE_ERROR if problem found.
  */
uint8_t BSP_TS_ResetTouchData(TS_StateTypeDef *TS_State)
{
 800947c:	b480      	push	{r7}
 800947e:	b085      	sub	sp, #20
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  uint8_t ts_status = TS_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	73fb      	strb	r3, [r7, #15]
  uint32_t index;

  if (TS_State != (TS_StateTypeDef *)NULL)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d02f      	beq.n	80094ee <BSP_TS_ResetTouchData+0x72>
  {
    TS_State->gestureId = GEST_ID_NO_GESTURE;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	629a      	str	r2, [r3, #40]	; 0x28
    TS_State->touchDetected = 0;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	701a      	strb	r2, [r3, #0]

    for(index = 0; index < TS_MAX_NB_TOUCH; index++)
 800949a:	2300      	movs	r3, #0
 800949c:	60bb      	str	r3, [r7, #8]
 800949e:	e021      	b.n	80094e4 <BSP_TS_ResetTouchData+0x68>
    {
      TS_State->touchX[index]       = 0;
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	005b      	lsls	r3, r3, #1
 80094a6:	4413      	add	r3, r2
 80094a8:	2200      	movs	r2, #0
 80094aa:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index]       = 0;
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	3304      	adds	r3, #4
 80094b2:	005b      	lsls	r3, r3, #1
 80094b4:	4413      	add	r3, r2
 80094b6:	2200      	movs	r2, #0
 80094b8:	809a      	strh	r2, [r3, #4]
      TS_State->touchArea[index]    = 0;
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	4413      	add	r3, r2
 80094c0:	3320      	adds	r3, #32
 80094c2:	2200      	movs	r2, #0
 80094c4:	701a      	strb	r2, [r3, #0]
      TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	4413      	add	r3, r2
 80094cc:	331b      	adds	r3, #27
 80094ce:	2200      	movs	r2, #0
 80094d0:	701a      	strb	r2, [r3, #0]
      TS_State->touchWeight[index]  = 0;
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	4413      	add	r3, r2
 80094d8:	3316      	adds	r3, #22
 80094da:	2200      	movs	r2, #0
 80094dc:	701a      	strb	r2, [r3, #0]
    for(index = 0; index < TS_MAX_NB_TOUCH; index++)
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	3301      	adds	r3, #1
 80094e2:	60bb      	str	r3, [r7, #8]
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	2b04      	cmp	r3, #4
 80094e8:	d9da      	bls.n	80094a0 <BSP_TS_ResetTouchData+0x24>
    }

    ts_status = TS_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	73fb      	strb	r3, [r7, #15]

  } /* of if (TS_State != (TS_StateTypeDef *)NULL) */

  return (ts_status);
 80094ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3714      	adds	r7, #20
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	4603      	mov	r3, r0
 8009504:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009506:	79fb      	ldrb	r3, [r7, #7]
 8009508:	4a08      	ldr	r2, [pc, #32]	; (800952c <disk_status+0x30>)
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	4413      	add	r3, r2
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	79fa      	ldrb	r2, [r7, #7]
 8009514:	4905      	ldr	r1, [pc, #20]	; (800952c <disk_status+0x30>)
 8009516:	440a      	add	r2, r1
 8009518:	7a12      	ldrb	r2, [r2, #8]
 800951a:	4610      	mov	r0, r2
 800951c:	4798      	blx	r3
 800951e:	4603      	mov	r3, r0
 8009520:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009522:	7bfb      	ldrb	r3, [r7, #15]
}
 8009524:	4618      	mov	r0, r3
 8009526:	3710      	adds	r7, #16
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}
 800952c:	20034560 	.word	0x20034560

08009530 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	4603      	mov	r3, r0
 8009538:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800953a:	2300      	movs	r3, #0
 800953c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800953e:	79fb      	ldrb	r3, [r7, #7]
 8009540:	4a0d      	ldr	r2, [pc, #52]	; (8009578 <disk_initialize+0x48>)
 8009542:	5cd3      	ldrb	r3, [r2, r3]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d111      	bne.n	800956c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009548:	79fb      	ldrb	r3, [r7, #7]
 800954a:	4a0b      	ldr	r2, [pc, #44]	; (8009578 <disk_initialize+0x48>)
 800954c:	2101      	movs	r1, #1
 800954e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009550:	79fb      	ldrb	r3, [r7, #7]
 8009552:	4a09      	ldr	r2, [pc, #36]	; (8009578 <disk_initialize+0x48>)
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	4413      	add	r3, r2
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	79fa      	ldrb	r2, [r7, #7]
 800955e:	4906      	ldr	r1, [pc, #24]	; (8009578 <disk_initialize+0x48>)
 8009560:	440a      	add	r2, r1
 8009562:	7a12      	ldrb	r2, [r2, #8]
 8009564:	4610      	mov	r0, r2
 8009566:	4798      	blx	r3
 8009568:	4603      	mov	r3, r0
 800956a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800956c:	7bfb      	ldrb	r3, [r7, #15]
}
 800956e:	4618      	mov	r0, r3
 8009570:	3710      	adds	r7, #16
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	20034560 	.word	0x20034560

0800957c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800957c:	b590      	push	{r4, r7, lr}
 800957e:	b087      	sub	sp, #28
 8009580:	af00      	add	r7, sp, #0
 8009582:	60b9      	str	r1, [r7, #8]
 8009584:	607a      	str	r2, [r7, #4]
 8009586:	603b      	str	r3, [r7, #0]
 8009588:	4603      	mov	r3, r0
 800958a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800958c:	7bfb      	ldrb	r3, [r7, #15]
 800958e:	4a0a      	ldr	r2, [pc, #40]	; (80095b8 <disk_read+0x3c>)
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	4413      	add	r3, r2
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	689c      	ldr	r4, [r3, #8]
 8009598:	7bfb      	ldrb	r3, [r7, #15]
 800959a:	4a07      	ldr	r2, [pc, #28]	; (80095b8 <disk_read+0x3c>)
 800959c:	4413      	add	r3, r2
 800959e:	7a18      	ldrb	r0, [r3, #8]
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	68b9      	ldr	r1, [r7, #8]
 80095a6:	47a0      	blx	r4
 80095a8:	4603      	mov	r3, r0
 80095aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80095ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	371c      	adds	r7, #28
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd90      	pop	{r4, r7, pc}
 80095b6:	bf00      	nop
 80095b8:	20034560 	.word	0x20034560

080095bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80095bc:	b590      	push	{r4, r7, lr}
 80095be:	b087      	sub	sp, #28
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	60b9      	str	r1, [r7, #8]
 80095c4:	607a      	str	r2, [r7, #4]
 80095c6:	603b      	str	r3, [r7, #0]
 80095c8:	4603      	mov	r3, r0
 80095ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80095cc:	7bfb      	ldrb	r3, [r7, #15]
 80095ce:	4a0a      	ldr	r2, [pc, #40]	; (80095f8 <disk_write+0x3c>)
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	4413      	add	r3, r2
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	68dc      	ldr	r4, [r3, #12]
 80095d8:	7bfb      	ldrb	r3, [r7, #15]
 80095da:	4a07      	ldr	r2, [pc, #28]	; (80095f8 <disk_write+0x3c>)
 80095dc:	4413      	add	r3, r2
 80095de:	7a18      	ldrb	r0, [r3, #8]
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	68b9      	ldr	r1, [r7, #8]
 80095e6:	47a0      	blx	r4
 80095e8:	4603      	mov	r3, r0
 80095ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80095ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	371c      	adds	r7, #28
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd90      	pop	{r4, r7, pc}
 80095f6:	bf00      	nop
 80095f8:	20034560 	.word	0x20034560

080095fc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	4603      	mov	r3, r0
 8009604:	603a      	str	r2, [r7, #0]
 8009606:	71fb      	strb	r3, [r7, #7]
 8009608:	460b      	mov	r3, r1
 800960a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800960c:	79fb      	ldrb	r3, [r7, #7]
 800960e:	4a09      	ldr	r2, [pc, #36]	; (8009634 <disk_ioctl+0x38>)
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	4413      	add	r3, r2
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	691b      	ldr	r3, [r3, #16]
 8009618:	79fa      	ldrb	r2, [r7, #7]
 800961a:	4906      	ldr	r1, [pc, #24]	; (8009634 <disk_ioctl+0x38>)
 800961c:	440a      	add	r2, r1
 800961e:	7a10      	ldrb	r0, [r2, #8]
 8009620:	79b9      	ldrb	r1, [r7, #6]
 8009622:	683a      	ldr	r2, [r7, #0]
 8009624:	4798      	blx	r3
 8009626:	4603      	mov	r3, r0
 8009628:	73fb      	strb	r3, [r7, #15]
  return res;
 800962a:	7bfb      	ldrb	r3, [r7, #15]
}
 800962c:	4618      	mov	r0, r3
 800962e:	3710      	adds	r7, #16
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	20034560 	.word	0x20034560

08009638 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009638:	b480      	push	{r7}
 800963a:	b085      	sub	sp, #20
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	3301      	adds	r3, #1
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009648:	89fb      	ldrh	r3, [r7, #14]
 800964a:	021b      	lsls	r3, r3, #8
 800964c:	b21a      	sxth	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	b21b      	sxth	r3, r3
 8009654:	4313      	orrs	r3, r2
 8009656:	b21b      	sxth	r3, r3
 8009658:	81fb      	strh	r3, [r7, #14]
	return rv;
 800965a:	89fb      	ldrh	r3, [r7, #14]
}
 800965c:	4618      	mov	r0, r3
 800965e:	3714      	adds	r7, #20
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009668:	b480      	push	{r7}
 800966a:	b085      	sub	sp, #20
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	3303      	adds	r3, #3
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	021b      	lsls	r3, r3, #8
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	3202      	adds	r2, #2
 8009680:	7812      	ldrb	r2, [r2, #0]
 8009682:	4313      	orrs	r3, r2
 8009684:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	021b      	lsls	r3, r3, #8
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	3201      	adds	r2, #1
 800968e:	7812      	ldrb	r2, [r2, #0]
 8009690:	4313      	orrs	r3, r2
 8009692:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	021b      	lsls	r3, r3, #8
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	7812      	ldrb	r2, [r2, #0]
 800969c:	4313      	orrs	r3, r2
 800969e:	60fb      	str	r3, [r7, #12]
	return rv;
 80096a0:	68fb      	ldr	r3, [r7, #12]
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3714      	adds	r7, #20
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr

080096ae <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80096ae:	b480      	push	{r7}
 80096b0:	b083      	sub	sp, #12
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
 80096b6:	460b      	mov	r3, r1
 80096b8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	1c5a      	adds	r2, r3, #1
 80096be:	607a      	str	r2, [r7, #4]
 80096c0:	887a      	ldrh	r2, [r7, #2]
 80096c2:	b2d2      	uxtb	r2, r2
 80096c4:	701a      	strb	r2, [r3, #0]
 80096c6:	887b      	ldrh	r3, [r7, #2]
 80096c8:	0a1b      	lsrs	r3, r3, #8
 80096ca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	1c5a      	adds	r2, r3, #1
 80096d0:	607a      	str	r2, [r7, #4]
 80096d2:	887a      	ldrh	r2, [r7, #2]
 80096d4:	b2d2      	uxtb	r2, r2
 80096d6:	701a      	strb	r2, [r3, #0]
}
 80096d8:	bf00      	nop
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	1c5a      	adds	r2, r3, #1
 80096f2:	607a      	str	r2, [r7, #4]
 80096f4:	683a      	ldr	r2, [r7, #0]
 80096f6:	b2d2      	uxtb	r2, r2
 80096f8:	701a      	strb	r2, [r3, #0]
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	0a1b      	lsrs	r3, r3, #8
 80096fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	1c5a      	adds	r2, r3, #1
 8009704:	607a      	str	r2, [r7, #4]
 8009706:	683a      	ldr	r2, [r7, #0]
 8009708:	b2d2      	uxtb	r2, r2
 800970a:	701a      	strb	r2, [r3, #0]
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	0a1b      	lsrs	r3, r3, #8
 8009710:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	1c5a      	adds	r2, r3, #1
 8009716:	607a      	str	r2, [r7, #4]
 8009718:	683a      	ldr	r2, [r7, #0]
 800971a:	b2d2      	uxtb	r2, r2
 800971c:	701a      	strb	r2, [r3, #0]
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	0a1b      	lsrs	r3, r3, #8
 8009722:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	1c5a      	adds	r2, r3, #1
 8009728:	607a      	str	r2, [r7, #4]
 800972a:	683a      	ldr	r2, [r7, #0]
 800972c:	b2d2      	uxtb	r2, r2
 800972e:	701a      	strb	r2, [r3, #0]
}
 8009730:	bf00      	nop
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800973c:	b480      	push	{r7}
 800973e:	b087      	sub	sp, #28
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00d      	beq.n	8009772 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009756:	693a      	ldr	r2, [r7, #16]
 8009758:	1c53      	adds	r3, r2, #1
 800975a:	613b      	str	r3, [r7, #16]
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	1c59      	adds	r1, r3, #1
 8009760:	6179      	str	r1, [r7, #20]
 8009762:	7812      	ldrb	r2, [r2, #0]
 8009764:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	3b01      	subs	r3, #1
 800976a:	607b      	str	r3, [r7, #4]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1f1      	bne.n	8009756 <mem_cpy+0x1a>
	}
}
 8009772:	bf00      	nop
 8009774:	371c      	adds	r7, #28
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr

0800977e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800977e:	b480      	push	{r7}
 8009780:	b087      	sub	sp, #28
 8009782:	af00      	add	r7, sp, #0
 8009784:	60f8      	str	r0, [r7, #12]
 8009786:	60b9      	str	r1, [r7, #8]
 8009788:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	1c5a      	adds	r2, r3, #1
 8009792:	617a      	str	r2, [r7, #20]
 8009794:	68ba      	ldr	r2, [r7, #8]
 8009796:	b2d2      	uxtb	r2, r2
 8009798:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	3b01      	subs	r3, #1
 800979e:	607b      	str	r3, [r7, #4]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d1f3      	bne.n	800978e <mem_set+0x10>
}
 80097a6:	bf00      	nop
 80097a8:	bf00      	nop
 80097aa:	371c      	adds	r7, #28
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80097b4:	b480      	push	{r7}
 80097b6:	b089      	sub	sp, #36	; 0x24
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	61fb      	str	r3, [r7, #28]
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80097c8:	2300      	movs	r3, #0
 80097ca:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	1c5a      	adds	r2, r3, #1
 80097d0:	61fa      	str	r2, [r7, #28]
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	4619      	mov	r1, r3
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	1c5a      	adds	r2, r3, #1
 80097da:	61ba      	str	r2, [r7, #24]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	1acb      	subs	r3, r1, r3
 80097e0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	3b01      	subs	r3, #1
 80097e6:	607b      	str	r3, [r7, #4]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d002      	beq.n	80097f4 <mem_cmp+0x40>
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d0eb      	beq.n	80097cc <mem_cmp+0x18>

	return r;
 80097f4:	697b      	ldr	r3, [r7, #20]
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3724      	adds	r7, #36	; 0x24
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr

08009802 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009802:	b480      	push	{r7}
 8009804:	b083      	sub	sp, #12
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
 800980a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800980c:	e002      	b.n	8009814 <chk_chr+0x12>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	3301      	adds	r3, #1
 8009812:	607b      	str	r3, [r7, #4]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d005      	beq.n	8009828 <chk_chr+0x26>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	461a      	mov	r2, r3
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	4293      	cmp	r3, r2
 8009826:	d1f2      	bne.n	800980e <chk_chr+0xc>
	return *str;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	781b      	ldrb	r3, [r3, #0]
}
 800982c:	4618      	mov	r0, r3
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009838:	b480      	push	{r7}
 800983a:	b085      	sub	sp, #20
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009842:	2300      	movs	r3, #0
 8009844:	60bb      	str	r3, [r7, #8]
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	60fb      	str	r3, [r7, #12]
 800984a:	e029      	b.n	80098a0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800984c:	4a27      	ldr	r2, [pc, #156]	; (80098ec <chk_lock+0xb4>)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	011b      	lsls	r3, r3, #4
 8009852:	4413      	add	r3, r2
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d01d      	beq.n	8009896 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800985a:	4a24      	ldr	r2, [pc, #144]	; (80098ec <chk_lock+0xb4>)
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	011b      	lsls	r3, r3, #4
 8009860:	4413      	add	r3, r2
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	429a      	cmp	r2, r3
 800986a:	d116      	bne.n	800989a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800986c:	4a1f      	ldr	r2, [pc, #124]	; (80098ec <chk_lock+0xb4>)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	011b      	lsls	r3, r3, #4
 8009872:	4413      	add	r3, r2
 8009874:	3304      	adds	r3, #4
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800987c:	429a      	cmp	r2, r3
 800987e:	d10c      	bne.n	800989a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009880:	4a1a      	ldr	r2, [pc, #104]	; (80098ec <chk_lock+0xb4>)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	011b      	lsls	r3, r3, #4
 8009886:	4413      	add	r3, r2
 8009888:	3308      	adds	r3, #8
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009890:	429a      	cmp	r2, r3
 8009892:	d102      	bne.n	800989a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009894:	e007      	b.n	80098a6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009896:	2301      	movs	r3, #1
 8009898:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	3301      	adds	r3, #1
 800989e:	60fb      	str	r3, [r7, #12]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d9d2      	bls.n	800984c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2b02      	cmp	r3, #2
 80098aa:	d109      	bne.n	80098c0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d102      	bne.n	80098b8 <chk_lock+0x80>
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	2b02      	cmp	r3, #2
 80098b6:	d101      	bne.n	80098bc <chk_lock+0x84>
 80098b8:	2300      	movs	r3, #0
 80098ba:	e010      	b.n	80098de <chk_lock+0xa6>
 80098bc:	2312      	movs	r3, #18
 80098be:	e00e      	b.n	80098de <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d108      	bne.n	80098d8 <chk_lock+0xa0>
 80098c6:	4a09      	ldr	r2, [pc, #36]	; (80098ec <chk_lock+0xb4>)
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	011b      	lsls	r3, r3, #4
 80098cc:	4413      	add	r3, r2
 80098ce:	330c      	adds	r3, #12
 80098d0:	881b      	ldrh	r3, [r3, #0]
 80098d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098d6:	d101      	bne.n	80098dc <chk_lock+0xa4>
 80098d8:	2310      	movs	r3, #16
 80098da:	e000      	b.n	80098de <chk_lock+0xa6>
 80098dc:	2300      	movs	r3, #0
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3714      	adds	r7, #20
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	20034540 	.word	0x20034540

080098f0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80098f6:	2300      	movs	r3, #0
 80098f8:	607b      	str	r3, [r7, #4]
 80098fa:	e002      	b.n	8009902 <enq_lock+0x12>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	3301      	adds	r3, #1
 8009900:	607b      	str	r3, [r7, #4]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2b01      	cmp	r3, #1
 8009906:	d806      	bhi.n	8009916 <enq_lock+0x26>
 8009908:	4a09      	ldr	r2, [pc, #36]	; (8009930 <enq_lock+0x40>)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	011b      	lsls	r3, r3, #4
 800990e:	4413      	add	r3, r2
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1f2      	bne.n	80098fc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2b02      	cmp	r3, #2
 800991a:	bf14      	ite	ne
 800991c:	2301      	movne	r3, #1
 800991e:	2300      	moveq	r3, #0
 8009920:	b2db      	uxtb	r3, r3
}
 8009922:	4618      	mov	r0, r3
 8009924:	370c      	adds	r7, #12
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	20034540 	.word	0x20034540

08009934 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009934:	b480      	push	{r7}
 8009936:	b085      	sub	sp, #20
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800993e:	2300      	movs	r3, #0
 8009940:	60fb      	str	r3, [r7, #12]
 8009942:	e01f      	b.n	8009984 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009944:	4a41      	ldr	r2, [pc, #260]	; (8009a4c <inc_lock+0x118>)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	011b      	lsls	r3, r3, #4
 800994a:	4413      	add	r3, r2
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	429a      	cmp	r2, r3
 8009954:	d113      	bne.n	800997e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009956:	4a3d      	ldr	r2, [pc, #244]	; (8009a4c <inc_lock+0x118>)
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	011b      	lsls	r3, r3, #4
 800995c:	4413      	add	r3, r2
 800995e:	3304      	adds	r3, #4
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009966:	429a      	cmp	r2, r3
 8009968:	d109      	bne.n	800997e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800996a:	4a38      	ldr	r2, [pc, #224]	; (8009a4c <inc_lock+0x118>)
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	011b      	lsls	r3, r3, #4
 8009970:	4413      	add	r3, r2
 8009972:	3308      	adds	r3, #8
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800997a:	429a      	cmp	r2, r3
 800997c:	d006      	beq.n	800998c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	3301      	adds	r3, #1
 8009982:	60fb      	str	r3, [r7, #12]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2b01      	cmp	r3, #1
 8009988:	d9dc      	bls.n	8009944 <inc_lock+0x10>
 800998a:	e000      	b.n	800998e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800998c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2b02      	cmp	r3, #2
 8009992:	d132      	bne.n	80099fa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009994:	2300      	movs	r3, #0
 8009996:	60fb      	str	r3, [r7, #12]
 8009998:	e002      	b.n	80099a0 <inc_lock+0x6c>
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	3301      	adds	r3, #1
 800999e:	60fb      	str	r3, [r7, #12]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d806      	bhi.n	80099b4 <inc_lock+0x80>
 80099a6:	4a29      	ldr	r2, [pc, #164]	; (8009a4c <inc_lock+0x118>)
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	011b      	lsls	r3, r3, #4
 80099ac:	4413      	add	r3, r2
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d1f2      	bne.n	800999a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2b02      	cmp	r3, #2
 80099b8:	d101      	bne.n	80099be <inc_lock+0x8a>
 80099ba:	2300      	movs	r3, #0
 80099bc:	e040      	b.n	8009a40 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	4922      	ldr	r1, [pc, #136]	; (8009a4c <inc_lock+0x118>)
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	011b      	lsls	r3, r3, #4
 80099c8:	440b      	add	r3, r1
 80099ca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	689a      	ldr	r2, [r3, #8]
 80099d0:	491e      	ldr	r1, [pc, #120]	; (8009a4c <inc_lock+0x118>)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	011b      	lsls	r3, r3, #4
 80099d6:	440b      	add	r3, r1
 80099d8:	3304      	adds	r3, #4
 80099da:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	695a      	ldr	r2, [r3, #20]
 80099e0:	491a      	ldr	r1, [pc, #104]	; (8009a4c <inc_lock+0x118>)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	011b      	lsls	r3, r3, #4
 80099e6:	440b      	add	r3, r1
 80099e8:	3308      	adds	r3, #8
 80099ea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80099ec:	4a17      	ldr	r2, [pc, #92]	; (8009a4c <inc_lock+0x118>)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	011b      	lsls	r3, r3, #4
 80099f2:	4413      	add	r3, r2
 80099f4:	330c      	adds	r3, #12
 80099f6:	2200      	movs	r2, #0
 80099f8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d009      	beq.n	8009a14 <inc_lock+0xe0>
 8009a00:	4a12      	ldr	r2, [pc, #72]	; (8009a4c <inc_lock+0x118>)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	011b      	lsls	r3, r3, #4
 8009a06:	4413      	add	r3, r2
 8009a08:	330c      	adds	r3, #12
 8009a0a:	881b      	ldrh	r3, [r3, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d001      	beq.n	8009a14 <inc_lock+0xe0>
 8009a10:	2300      	movs	r3, #0
 8009a12:	e015      	b.n	8009a40 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d108      	bne.n	8009a2c <inc_lock+0xf8>
 8009a1a:	4a0c      	ldr	r2, [pc, #48]	; (8009a4c <inc_lock+0x118>)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	011b      	lsls	r3, r3, #4
 8009a20:	4413      	add	r3, r2
 8009a22:	330c      	adds	r3, #12
 8009a24:	881b      	ldrh	r3, [r3, #0]
 8009a26:	3301      	adds	r3, #1
 8009a28:	b29a      	uxth	r2, r3
 8009a2a:	e001      	b.n	8009a30 <inc_lock+0xfc>
 8009a2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a30:	4906      	ldr	r1, [pc, #24]	; (8009a4c <inc_lock+0x118>)
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	011b      	lsls	r3, r3, #4
 8009a36:	440b      	add	r3, r1
 8009a38:	330c      	adds	r3, #12
 8009a3a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	3301      	adds	r3, #1
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3714      	adds	r7, #20
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr
 8009a4c:	20034540 	.word	0x20034540

08009a50 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b085      	sub	sp, #20
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	607b      	str	r3, [r7, #4]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d825      	bhi.n	8009ab0 <dec_lock+0x60>
		n = Files[i].ctr;
 8009a64:	4a17      	ldr	r2, [pc, #92]	; (8009ac4 <dec_lock+0x74>)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	011b      	lsls	r3, r3, #4
 8009a6a:	4413      	add	r3, r2
 8009a6c:	330c      	adds	r3, #12
 8009a6e:	881b      	ldrh	r3, [r3, #0]
 8009a70:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009a72:	89fb      	ldrh	r3, [r7, #14]
 8009a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a78:	d101      	bne.n	8009a7e <dec_lock+0x2e>
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009a7e:	89fb      	ldrh	r3, [r7, #14]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d002      	beq.n	8009a8a <dec_lock+0x3a>
 8009a84:	89fb      	ldrh	r3, [r7, #14]
 8009a86:	3b01      	subs	r3, #1
 8009a88:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009a8a:	4a0e      	ldr	r2, [pc, #56]	; (8009ac4 <dec_lock+0x74>)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	011b      	lsls	r3, r3, #4
 8009a90:	4413      	add	r3, r2
 8009a92:	330c      	adds	r3, #12
 8009a94:	89fa      	ldrh	r2, [r7, #14]
 8009a96:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009a98:	89fb      	ldrh	r3, [r7, #14]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d105      	bne.n	8009aaa <dec_lock+0x5a>
 8009a9e:	4a09      	ldr	r2, [pc, #36]	; (8009ac4 <dec_lock+0x74>)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	011b      	lsls	r3, r3, #4
 8009aa4:	4413      	add	r3, r2
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	737b      	strb	r3, [r7, #13]
 8009aae:	e001      	b.n	8009ab4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009ab0:	2302      	movs	r3, #2
 8009ab2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009ab4:	7b7b      	ldrb	r3, [r7, #13]
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3714      	adds	r7, #20
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr
 8009ac2:	bf00      	nop
 8009ac4:	20034540 	.word	0x20034540

08009ac8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	60fb      	str	r3, [r7, #12]
 8009ad4:	e010      	b.n	8009af8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009ad6:	4a0d      	ldr	r2, [pc, #52]	; (8009b0c <clear_lock+0x44>)
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	011b      	lsls	r3, r3, #4
 8009adc:	4413      	add	r3, r2
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d105      	bne.n	8009af2 <clear_lock+0x2a>
 8009ae6:	4a09      	ldr	r2, [pc, #36]	; (8009b0c <clear_lock+0x44>)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	011b      	lsls	r3, r3, #4
 8009aec:	4413      	add	r3, r2
 8009aee:	2200      	movs	r2, #0
 8009af0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	3301      	adds	r3, #1
 8009af6:	60fb      	str	r3, [r7, #12]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d9eb      	bls.n	8009ad6 <clear_lock+0xe>
	}
}
 8009afe:	bf00      	nop
 8009b00:	bf00      	nop
 8009b02:	3714      	adds	r7, #20
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr
 8009b0c:	20034540 	.word	0x20034540

08009b10 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b086      	sub	sp, #24
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	78db      	ldrb	r3, [r3, #3]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d034      	beq.n	8009b8e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b28:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	7858      	ldrb	r0, [r3, #1]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009b34:	2301      	movs	r3, #1
 8009b36:	697a      	ldr	r2, [r7, #20]
 8009b38:	f7ff fd40 	bl	80095bc <disk_write>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d002      	beq.n	8009b48 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009b42:	2301      	movs	r3, #1
 8009b44:	73fb      	strb	r3, [r7, #15]
 8009b46:	e022      	b.n	8009b8e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b52:	697a      	ldr	r2, [r7, #20]
 8009b54:	1ad2      	subs	r2, r2, r3
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	69db      	ldr	r3, [r3, #28]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d217      	bcs.n	8009b8e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	789b      	ldrb	r3, [r3, #2]
 8009b62:	613b      	str	r3, [r7, #16]
 8009b64:	e010      	b.n	8009b88 <sync_window+0x78>
					wsect += fs->fsize;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	69db      	ldr	r3, [r3, #28]
 8009b6a:	697a      	ldr	r2, [r7, #20]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	7858      	ldrb	r0, [r3, #1]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	697a      	ldr	r2, [r7, #20]
 8009b7e:	f7ff fd1d 	bl	80095bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	3b01      	subs	r3, #1
 8009b86:	613b      	str	r3, [r7, #16]
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d8eb      	bhi.n	8009b66 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3718      	adds	r7, #24
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009baa:	683a      	ldr	r2, [r7, #0]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d01b      	beq.n	8009be8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f7ff ffad 	bl	8009b10 <sync_window>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009bba:	7bfb      	ldrb	r3, [r7, #15]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d113      	bne.n	8009be8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	7858      	ldrb	r0, [r3, #1]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009bca:	2301      	movs	r3, #1
 8009bcc:	683a      	ldr	r2, [r7, #0]
 8009bce:	f7ff fcd5 	bl	800957c <disk_read>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d004      	beq.n	8009be2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009bd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bdc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	683a      	ldr	r2, [r7, #0]
 8009be6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8009be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
	...

08009bf4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f7ff ff87 	bl	8009b10 <sync_window>
 8009c02:	4603      	mov	r3, r0
 8009c04:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009c06:	7bfb      	ldrb	r3, [r7, #15]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d158      	bne.n	8009cbe <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	2b03      	cmp	r3, #3
 8009c12:	d148      	bne.n	8009ca6 <sync_fs+0xb2>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	791b      	ldrb	r3, [r3, #4]
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d144      	bne.n	8009ca6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	3334      	adds	r3, #52	; 0x34
 8009c20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c24:	2100      	movs	r1, #0
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7ff fda9 	bl	800977e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	3334      	adds	r3, #52	; 0x34
 8009c30:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009c34:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f7ff fd38 	bl	80096ae <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	3334      	adds	r3, #52	; 0x34
 8009c42:	4921      	ldr	r1, [pc, #132]	; (8009cc8 <sync_fs+0xd4>)
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7ff fd4d 	bl	80096e4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	3334      	adds	r3, #52	; 0x34
 8009c4e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009c52:	491e      	ldr	r1, [pc, #120]	; (8009ccc <sync_fs+0xd8>)
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7ff fd45 	bl	80096e4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	3334      	adds	r3, #52	; 0x34
 8009c5e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	695b      	ldr	r3, [r3, #20]
 8009c66:	4619      	mov	r1, r3
 8009c68:	4610      	mov	r0, r2
 8009c6a:	f7ff fd3b 	bl	80096e4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	3334      	adds	r3, #52	; 0x34
 8009c72:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	4610      	mov	r0, r2
 8009c7e:	f7ff fd31 	bl	80096e4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a1b      	ldr	r3, [r3, #32]
 8009c86:	1c5a      	adds	r2, r3, #1
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	7858      	ldrb	r0, [r3, #1]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	f7ff fc8e 	bl	80095bc <disk_write>
			fs->fsi_flag = 0;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	785b      	ldrb	r3, [r3, #1]
 8009caa:	2200      	movs	r2, #0
 8009cac:	2100      	movs	r1, #0
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7ff fca4 	bl	80095fc <disk_ioctl>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d001      	beq.n	8009cbe <sync_fs+0xca>
 8009cba:	2301      	movs	r3, #1
 8009cbc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3710      	adds	r7, #16
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	41615252 	.word	0x41615252
 8009ccc:	61417272 	.word	0x61417272

08009cd0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b083      	sub	sp, #12
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	3b02      	subs	r3, #2
 8009cde:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	699b      	ldr	r3, [r3, #24]
 8009ce4:	3b02      	subs	r3, #2
 8009ce6:	683a      	ldr	r2, [r7, #0]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d301      	bcc.n	8009cf0 <clust2sect+0x20>
 8009cec:	2300      	movs	r3, #0
 8009cee:	e008      	b.n	8009d02 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	895b      	ldrh	r3, [r3, #10]
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	fb03 f202 	mul.w	r2, r3, r2
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d00:	4413      	add	r3, r2
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	370c      	adds	r7, #12
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr

08009d0e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b086      	sub	sp, #24
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
 8009d16:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d904      	bls.n	8009d2e <get_fat+0x20>
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	699b      	ldr	r3, [r3, #24]
 8009d28:	683a      	ldr	r2, [r7, #0]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d302      	bcc.n	8009d34 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009d2e:	2301      	movs	r3, #1
 8009d30:	617b      	str	r3, [r7, #20]
 8009d32:	e08f      	b.n	8009e54 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009d34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d38:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	2b03      	cmp	r3, #3
 8009d40:	d062      	beq.n	8009e08 <get_fat+0xfa>
 8009d42:	2b03      	cmp	r3, #3
 8009d44:	dc7c      	bgt.n	8009e40 <get_fat+0x132>
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d002      	beq.n	8009d50 <get_fat+0x42>
 8009d4a:	2b02      	cmp	r3, #2
 8009d4c:	d042      	beq.n	8009dd4 <get_fat+0xc6>
 8009d4e:	e077      	b.n	8009e40 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	60fb      	str	r3, [r7, #12]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	085b      	lsrs	r3, r3, #1
 8009d58:	68fa      	ldr	r2, [r7, #12]
 8009d5a:	4413      	add	r3, r2
 8009d5c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	0a5b      	lsrs	r3, r3, #9
 8009d66:	4413      	add	r3, r2
 8009d68:	4619      	mov	r1, r3
 8009d6a:	6938      	ldr	r0, [r7, #16]
 8009d6c:	f7ff ff14 	bl	8009b98 <move_window>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d167      	bne.n	8009e46 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	1c5a      	adds	r2, r3, #1
 8009d7a:	60fa      	str	r2, [r7, #12]
 8009d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d80:	693a      	ldr	r2, [r7, #16]
 8009d82:	4413      	add	r3, r2
 8009d84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d88:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	0a5b      	lsrs	r3, r3, #9
 8009d92:	4413      	add	r3, r2
 8009d94:	4619      	mov	r1, r3
 8009d96:	6938      	ldr	r0, [r7, #16]
 8009d98:	f7ff fefe 	bl	8009b98 <move_window>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d153      	bne.n	8009e4a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009da8:	693a      	ldr	r2, [r7, #16]
 8009daa:	4413      	add	r3, r2
 8009dac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009db0:	021b      	lsls	r3, r3, #8
 8009db2:	461a      	mov	r2, r3
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	f003 0301 	and.w	r3, r3, #1
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d002      	beq.n	8009dca <get_fat+0xbc>
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	091b      	lsrs	r3, r3, #4
 8009dc8:	e002      	b.n	8009dd0 <get_fat+0xc2>
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009dd0:	617b      	str	r3, [r7, #20]
			break;
 8009dd2:	e03f      	b.n	8009e54 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	0a1b      	lsrs	r3, r3, #8
 8009ddc:	4413      	add	r3, r2
 8009dde:	4619      	mov	r1, r3
 8009de0:	6938      	ldr	r0, [r7, #16]
 8009de2:	f7ff fed9 	bl	8009b98 <move_window>
 8009de6:	4603      	mov	r3, r0
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d130      	bne.n	8009e4e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	005b      	lsls	r3, r3, #1
 8009df6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009dfa:	4413      	add	r3, r2
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7ff fc1b 	bl	8009638 <ld_word>
 8009e02:	4603      	mov	r3, r0
 8009e04:	617b      	str	r3, [r7, #20]
			break;
 8009e06:	e025      	b.n	8009e54 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	09db      	lsrs	r3, r3, #7
 8009e10:	4413      	add	r3, r2
 8009e12:	4619      	mov	r1, r3
 8009e14:	6938      	ldr	r0, [r7, #16]
 8009e16:	f7ff febf 	bl	8009b98 <move_window>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d118      	bne.n	8009e52 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009e2e:	4413      	add	r3, r2
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7ff fc19 	bl	8009668 <ld_dword>
 8009e36:	4603      	mov	r3, r0
 8009e38:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009e3c:	617b      	str	r3, [r7, #20]
			break;
 8009e3e:	e009      	b.n	8009e54 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009e40:	2301      	movs	r3, #1
 8009e42:	617b      	str	r3, [r7, #20]
 8009e44:	e006      	b.n	8009e54 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009e46:	bf00      	nop
 8009e48:	e004      	b.n	8009e54 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009e4a:	bf00      	nop
 8009e4c:	e002      	b.n	8009e54 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009e4e:	bf00      	nop
 8009e50:	e000      	b.n	8009e54 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009e52:	bf00      	nop
		}
	}

	return val;
 8009e54:	697b      	ldr	r3, [r7, #20]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3718      	adds	r7, #24
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009e5e:	b590      	push	{r4, r7, lr}
 8009e60:	b089      	sub	sp, #36	; 0x24
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	60f8      	str	r0, [r7, #12]
 8009e66:	60b9      	str	r1, [r7, #8]
 8009e68:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009e6a:	2302      	movs	r3, #2
 8009e6c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	f240 80d2 	bls.w	800a01a <put_fat+0x1bc>
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	699b      	ldr	r3, [r3, #24]
 8009e7a:	68ba      	ldr	r2, [r7, #8]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	f080 80cc 	bcs.w	800a01a <put_fat+0x1bc>
		switch (fs->fs_type) {
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	2b03      	cmp	r3, #3
 8009e88:	f000 8096 	beq.w	8009fb8 <put_fat+0x15a>
 8009e8c:	2b03      	cmp	r3, #3
 8009e8e:	f300 80cd 	bgt.w	800a02c <put_fat+0x1ce>
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	d002      	beq.n	8009e9c <put_fat+0x3e>
 8009e96:	2b02      	cmp	r3, #2
 8009e98:	d06e      	beq.n	8009f78 <put_fat+0x11a>
 8009e9a:	e0c7      	b.n	800a02c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	61bb      	str	r3, [r7, #24]
 8009ea0:	69bb      	ldr	r3, [r7, #24]
 8009ea2:	085b      	lsrs	r3, r3, #1
 8009ea4:	69ba      	ldr	r2, [r7, #24]
 8009ea6:	4413      	add	r3, r2
 8009ea8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	0a5b      	lsrs	r3, r3, #9
 8009eb2:	4413      	add	r3, r2
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f7ff fe6e 	bl	8009b98 <move_window>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009ec0:	7ffb      	ldrb	r3, [r7, #31]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	f040 80ab 	bne.w	800a01e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009ece:	69bb      	ldr	r3, [r7, #24]
 8009ed0:	1c59      	adds	r1, r3, #1
 8009ed2:	61b9      	str	r1, [r7, #24]
 8009ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ed8:	4413      	add	r3, r2
 8009eda:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	f003 0301 	and.w	r3, r3, #1
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d00d      	beq.n	8009f02 <put_fat+0xa4>
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	b25b      	sxtb	r3, r3
 8009eec:	f003 030f 	and.w	r3, r3, #15
 8009ef0:	b25a      	sxtb	r2, r3
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	011b      	lsls	r3, r3, #4
 8009ef8:	b25b      	sxtb	r3, r3
 8009efa:	4313      	orrs	r3, r2
 8009efc:	b25b      	sxtb	r3, r3
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	e001      	b.n	8009f06 <put_fat+0xa8>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	697a      	ldr	r2, [r7, #20]
 8009f08:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f14:	69bb      	ldr	r3, [r7, #24]
 8009f16:	0a5b      	lsrs	r3, r3, #9
 8009f18:	4413      	add	r3, r2
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f7ff fe3b 	bl	8009b98 <move_window>
 8009f22:	4603      	mov	r3, r0
 8009f24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009f26:	7ffb      	ldrb	r3, [r7, #31]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d17a      	bne.n	800a022 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f38:	4413      	add	r3, r2
 8009f3a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	f003 0301 	and.w	r3, r3, #1
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d003      	beq.n	8009f4e <put_fat+0xf0>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	091b      	lsrs	r3, r3, #4
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	e00e      	b.n	8009f6c <put_fat+0x10e>
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	b25b      	sxtb	r3, r3
 8009f54:	f023 030f 	bic.w	r3, r3, #15
 8009f58:	b25a      	sxtb	r2, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	0a1b      	lsrs	r3, r3, #8
 8009f5e:	b25b      	sxtb	r3, r3
 8009f60:	f003 030f 	and.w	r3, r3, #15
 8009f64:	b25b      	sxtb	r3, r3
 8009f66:	4313      	orrs	r3, r2
 8009f68:	b25b      	sxtb	r3, r3
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	697a      	ldr	r2, [r7, #20]
 8009f6e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2201      	movs	r2, #1
 8009f74:	70da      	strb	r2, [r3, #3]
			break;
 8009f76:	e059      	b.n	800a02c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	0a1b      	lsrs	r3, r3, #8
 8009f80:	4413      	add	r3, r2
 8009f82:	4619      	mov	r1, r3
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	f7ff fe07 	bl	8009b98 <move_window>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009f8e:	7ffb      	ldrb	r3, [r7, #31]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d148      	bne.n	800a026 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	005b      	lsls	r3, r3, #1
 8009f9e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009fa2:	4413      	add	r3, r2
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	b292      	uxth	r2, r2
 8009fa8:	4611      	mov	r1, r2
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7ff fb7f 	bl	80096ae <st_word>
			fs->wflag = 1;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	70da      	strb	r2, [r3, #3]
			break;
 8009fb6:	e039      	b.n	800a02c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	09db      	lsrs	r3, r3, #7
 8009fc0:	4413      	add	r3, r2
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f7ff fde7 	bl	8009b98 <move_window>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009fce:	7ffb      	ldrb	r3, [r7, #31]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d12a      	bne.n	800a02a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009fe8:	4413      	add	r3, r2
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7ff fb3c 	bl	8009668 <ld_dword>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009ff6:	4323      	orrs	r3, r4
 8009ff8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a008:	4413      	add	r3, r2
 800a00a:	6879      	ldr	r1, [r7, #4]
 800a00c:	4618      	mov	r0, r3
 800a00e:	f7ff fb69 	bl	80096e4 <st_dword>
			fs->wflag = 1;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2201      	movs	r2, #1
 800a016:	70da      	strb	r2, [r3, #3]
			break;
 800a018:	e008      	b.n	800a02c <put_fat+0x1ce>
		}
	}
 800a01a:	bf00      	nop
 800a01c:	e006      	b.n	800a02c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a01e:	bf00      	nop
 800a020:	e004      	b.n	800a02c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a022:	bf00      	nop
 800a024:	e002      	b.n	800a02c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a026:	bf00      	nop
 800a028:	e000      	b.n	800a02c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a02a:	bf00      	nop
	return res;
 800a02c:	7ffb      	ldrb	r3, [r7, #31]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3724      	adds	r7, #36	; 0x24
 800a032:	46bd      	mov	sp, r7
 800a034:	bd90      	pop	{r4, r7, pc}

0800a036 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b088      	sub	sp, #32
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	60f8      	str	r0, [r7, #12]
 800a03e:	60b9      	str	r1, [r7, #8]
 800a040:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a042:	2300      	movs	r3, #0
 800a044:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d904      	bls.n	800a05c <remove_chain+0x26>
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	699b      	ldr	r3, [r3, #24]
 800a056:	68ba      	ldr	r2, [r7, #8]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d301      	bcc.n	800a060 <remove_chain+0x2a>
 800a05c:	2302      	movs	r3, #2
 800a05e:	e04b      	b.n	800a0f8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d00c      	beq.n	800a080 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a066:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a06a:	6879      	ldr	r1, [r7, #4]
 800a06c:	69b8      	ldr	r0, [r7, #24]
 800a06e:	f7ff fef6 	bl	8009e5e <put_fat>
 800a072:	4603      	mov	r3, r0
 800a074:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a076:	7ffb      	ldrb	r3, [r7, #31]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d001      	beq.n	800a080 <remove_chain+0x4a>
 800a07c:	7ffb      	ldrb	r3, [r7, #31]
 800a07e:	e03b      	b.n	800a0f8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a080:	68b9      	ldr	r1, [r7, #8]
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	f7ff fe43 	bl	8009d0e <get_fat>
 800a088:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d031      	beq.n	800a0f4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	2b01      	cmp	r3, #1
 800a094:	d101      	bne.n	800a09a <remove_chain+0x64>
 800a096:	2302      	movs	r3, #2
 800a098:	e02e      	b.n	800a0f8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0a0:	d101      	bne.n	800a0a6 <remove_chain+0x70>
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e028      	b.n	800a0f8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	68b9      	ldr	r1, [r7, #8]
 800a0aa:	69b8      	ldr	r0, [r7, #24]
 800a0ac:	f7ff fed7 	bl	8009e5e <put_fat>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a0b4:	7ffb      	ldrb	r3, [r7, #31]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d001      	beq.n	800a0be <remove_chain+0x88>
 800a0ba:	7ffb      	ldrb	r3, [r7, #31]
 800a0bc:	e01c      	b.n	800a0f8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a0be:	69bb      	ldr	r3, [r7, #24]
 800a0c0:	695a      	ldr	r2, [r3, #20]
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	699b      	ldr	r3, [r3, #24]
 800a0c6:	3b02      	subs	r3, #2
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d20b      	bcs.n	800a0e4 <remove_chain+0xae>
			fs->free_clst++;
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	695b      	ldr	r3, [r3, #20]
 800a0d0:	1c5a      	adds	r2, r3, #1
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	791b      	ldrb	r3, [r3, #4]
 800a0da:	f043 0301 	orr.w	r3, r3, #1
 800a0de:	b2da      	uxtb	r2, r3
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a0e8:	69bb      	ldr	r3, [r7, #24]
 800a0ea:	699b      	ldr	r3, [r3, #24]
 800a0ec:	68ba      	ldr	r2, [r7, #8]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d3c6      	bcc.n	800a080 <remove_chain+0x4a>
 800a0f2:	e000      	b.n	800a0f6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a0f4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3720      	adds	r7, #32
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b088      	sub	sp, #32
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d10d      	bne.n	800a132 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	691b      	ldr	r3, [r3, #16]
 800a11a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a11c:	69bb      	ldr	r3, [r7, #24]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d004      	beq.n	800a12c <create_chain+0x2c>
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	699b      	ldr	r3, [r3, #24]
 800a126:	69ba      	ldr	r2, [r7, #24]
 800a128:	429a      	cmp	r2, r3
 800a12a:	d31b      	bcc.n	800a164 <create_chain+0x64>
 800a12c:	2301      	movs	r3, #1
 800a12e:	61bb      	str	r3, [r7, #24]
 800a130:	e018      	b.n	800a164 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a132:	6839      	ldr	r1, [r7, #0]
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f7ff fdea 	bl	8009d0e <get_fat>
 800a13a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d801      	bhi.n	800a146 <create_chain+0x46>
 800a142:	2301      	movs	r3, #1
 800a144:	e070      	b.n	800a228 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a14c:	d101      	bne.n	800a152 <create_chain+0x52>
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	e06a      	b.n	800a228 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	699b      	ldr	r3, [r3, #24]
 800a156:	68fa      	ldr	r2, [r7, #12]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d201      	bcs.n	800a160 <create_chain+0x60>
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	e063      	b.n	800a228 <create_chain+0x128>
		scl = clst;
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	3301      	adds	r3, #1
 800a16c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	699b      	ldr	r3, [r3, #24]
 800a172:	69fa      	ldr	r2, [r7, #28]
 800a174:	429a      	cmp	r2, r3
 800a176:	d307      	bcc.n	800a188 <create_chain+0x88>
				ncl = 2;
 800a178:	2302      	movs	r3, #2
 800a17a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a17c:	69fa      	ldr	r2, [r7, #28]
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	429a      	cmp	r2, r3
 800a182:	d901      	bls.n	800a188 <create_chain+0x88>
 800a184:	2300      	movs	r3, #0
 800a186:	e04f      	b.n	800a228 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a188:	69f9      	ldr	r1, [r7, #28]
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f7ff fdbf 	bl	8009d0e <get_fat>
 800a190:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d00e      	beq.n	800a1b6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d003      	beq.n	800a1a6 <create_chain+0xa6>
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1a4:	d101      	bne.n	800a1aa <create_chain+0xaa>
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	e03e      	b.n	800a228 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a1aa:	69fa      	ldr	r2, [r7, #28]
 800a1ac:	69bb      	ldr	r3, [r7, #24]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d1da      	bne.n	800a168 <create_chain+0x68>
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	e038      	b.n	800a228 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a1b6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a1b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1bc:	69f9      	ldr	r1, [r7, #28]
 800a1be:	6938      	ldr	r0, [r7, #16]
 800a1c0:	f7ff fe4d 	bl	8009e5e <put_fat>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a1c8:	7dfb      	ldrb	r3, [r7, #23]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d109      	bne.n	800a1e2 <create_chain+0xe2>
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d006      	beq.n	800a1e2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a1d4:	69fa      	ldr	r2, [r7, #28]
 800a1d6:	6839      	ldr	r1, [r7, #0]
 800a1d8:	6938      	ldr	r0, [r7, #16]
 800a1da:	f7ff fe40 	bl	8009e5e <put_fat>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a1e2:	7dfb      	ldrb	r3, [r7, #23]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d116      	bne.n	800a216 <create_chain+0x116>
		fs->last_clst = ncl;
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	69fa      	ldr	r2, [r7, #28]
 800a1ec:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	695a      	ldr	r2, [r3, #20]
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	699b      	ldr	r3, [r3, #24]
 800a1f6:	3b02      	subs	r3, #2
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d804      	bhi.n	800a206 <create_chain+0x106>
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	695b      	ldr	r3, [r3, #20]
 800a200:	1e5a      	subs	r2, r3, #1
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	791b      	ldrb	r3, [r3, #4]
 800a20a:	f043 0301 	orr.w	r3, r3, #1
 800a20e:	b2da      	uxtb	r2, r3
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	711a      	strb	r2, [r3, #4]
 800a214:	e007      	b.n	800a226 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a216:	7dfb      	ldrb	r3, [r7, #23]
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d102      	bne.n	800a222 <create_chain+0x122>
 800a21c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a220:	e000      	b.n	800a224 <create_chain+0x124>
 800a222:	2301      	movs	r3, #1
 800a224:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a226:	69fb      	ldr	r3, [r7, #28]
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3720      	adds	r7, #32
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a230:	b480      	push	{r7}
 800a232:	b087      	sub	sp, #28
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a244:	3304      	adds	r3, #4
 800a246:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	0a5b      	lsrs	r3, r3, #9
 800a24c:	68fa      	ldr	r2, [r7, #12]
 800a24e:	8952      	ldrh	r2, [r2, #10]
 800a250:	fbb3 f3f2 	udiv	r3, r3, r2
 800a254:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	1d1a      	adds	r2, r3, #4
 800a25a:	613a      	str	r2, [r7, #16]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d101      	bne.n	800a26a <clmt_clust+0x3a>
 800a266:	2300      	movs	r3, #0
 800a268:	e010      	b.n	800a28c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a26a:	697a      	ldr	r2, [r7, #20]
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	429a      	cmp	r2, r3
 800a270:	d307      	bcc.n	800a282 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a272:	697a      	ldr	r2, [r7, #20]
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	1ad3      	subs	r3, r2, r3
 800a278:	617b      	str	r3, [r7, #20]
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	3304      	adds	r3, #4
 800a27e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a280:	e7e9      	b.n	800a256 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a282:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	4413      	add	r3, r2
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	371c      	adds	r7, #28
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b086      	sub	sp, #24
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2ae:	d204      	bcs.n	800a2ba <dir_sdi+0x22>
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	f003 031f 	and.w	r3, r3, #31
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d001      	beq.n	800a2be <dir_sdi+0x26>
		return FR_INT_ERR;
 800a2ba:	2302      	movs	r3, #2
 800a2bc:	e063      	b.n	800a386 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	683a      	ldr	r2, [r7, #0]
 800a2c2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d106      	bne.n	800a2de <dir_sdi+0x46>
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	2b02      	cmp	r3, #2
 800a2d6:	d902      	bls.n	800a2de <dir_sdi+0x46>
		clst = fs->dirbase;
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2dc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d10c      	bne.n	800a2fe <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	095b      	lsrs	r3, r3, #5
 800a2e8:	693a      	ldr	r2, [r7, #16]
 800a2ea:	8912      	ldrh	r2, [r2, #8]
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d301      	bcc.n	800a2f4 <dir_sdi+0x5c>
 800a2f0:	2302      	movs	r3, #2
 800a2f2:	e048      	b.n	800a386 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	61da      	str	r2, [r3, #28]
 800a2fc:	e029      	b.n	800a352 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	895b      	ldrh	r3, [r3, #10]
 800a302:	025b      	lsls	r3, r3, #9
 800a304:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a306:	e019      	b.n	800a33c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6979      	ldr	r1, [r7, #20]
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7ff fcfe 	bl	8009d0e <get_fat>
 800a312:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a31a:	d101      	bne.n	800a320 <dir_sdi+0x88>
 800a31c:	2301      	movs	r3, #1
 800a31e:	e032      	b.n	800a386 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	2b01      	cmp	r3, #1
 800a324:	d904      	bls.n	800a330 <dir_sdi+0x98>
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	699b      	ldr	r3, [r3, #24]
 800a32a:	697a      	ldr	r2, [r7, #20]
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d301      	bcc.n	800a334 <dir_sdi+0x9c>
 800a330:	2302      	movs	r3, #2
 800a332:	e028      	b.n	800a386 <dir_sdi+0xee>
			ofs -= csz;
 800a334:	683a      	ldr	r2, [r7, #0]
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	1ad3      	subs	r3, r2, r3
 800a33a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a33c:	683a      	ldr	r2, [r7, #0]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	429a      	cmp	r2, r3
 800a342:	d2e1      	bcs.n	800a308 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a344:	6979      	ldr	r1, [r7, #20]
 800a346:	6938      	ldr	r0, [r7, #16]
 800a348:	f7ff fcc2 	bl	8009cd0 <clust2sect>
 800a34c:	4602      	mov	r2, r0
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	697a      	ldr	r2, [r7, #20]
 800a356:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	69db      	ldr	r3, [r3, #28]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d101      	bne.n	800a364 <dir_sdi+0xcc>
 800a360:	2302      	movs	r3, #2
 800a362:	e010      	b.n	800a386 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	69da      	ldr	r2, [r3, #28]
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	0a5b      	lsrs	r3, r3, #9
 800a36c:	441a      	add	r2, r3
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a37e:	441a      	add	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a384:	2300      	movs	r3, #0
}
 800a386:	4618      	mov	r0, r3
 800a388:	3718      	adds	r7, #24
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}

0800a38e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a38e:	b580      	push	{r7, lr}
 800a390:	b086      	sub	sp, #24
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
 800a396:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	695b      	ldr	r3, [r3, #20]
 800a3a2:	3320      	adds	r3, #32
 800a3a4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	69db      	ldr	r3, [r3, #28]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d003      	beq.n	800a3b6 <dir_next+0x28>
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a3b4:	d301      	bcc.n	800a3ba <dir_next+0x2c>
 800a3b6:	2304      	movs	r3, #4
 800a3b8:	e0aa      	b.n	800a510 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	f040 8098 	bne.w	800a4f6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	69db      	ldr	r3, [r3, #28]
 800a3ca:	1c5a      	adds	r2, r3, #1
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	699b      	ldr	r3, [r3, #24]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d10b      	bne.n	800a3f0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	095b      	lsrs	r3, r3, #5
 800a3dc:	68fa      	ldr	r2, [r7, #12]
 800a3de:	8912      	ldrh	r2, [r2, #8]
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	f0c0 8088 	bcc.w	800a4f6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	61da      	str	r2, [r3, #28]
 800a3ec:	2304      	movs	r3, #4
 800a3ee:	e08f      	b.n	800a510 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	0a5b      	lsrs	r3, r3, #9
 800a3f4:	68fa      	ldr	r2, [r7, #12]
 800a3f6:	8952      	ldrh	r2, [r2, #10]
 800a3f8:	3a01      	subs	r2, #1
 800a3fa:	4013      	ands	r3, r2
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d17a      	bne.n	800a4f6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	699b      	ldr	r3, [r3, #24]
 800a406:	4619      	mov	r1, r3
 800a408:	4610      	mov	r0, r2
 800a40a:	f7ff fc80 	bl	8009d0e <get_fat>
 800a40e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	2b01      	cmp	r3, #1
 800a414:	d801      	bhi.n	800a41a <dir_next+0x8c>
 800a416:	2302      	movs	r3, #2
 800a418:	e07a      	b.n	800a510 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a420:	d101      	bne.n	800a426 <dir_next+0x98>
 800a422:	2301      	movs	r3, #1
 800a424:	e074      	b.n	800a510 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	699b      	ldr	r3, [r3, #24]
 800a42a:	697a      	ldr	r2, [r7, #20]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d358      	bcc.n	800a4e2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d104      	bne.n	800a440 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2200      	movs	r2, #0
 800a43a:	61da      	str	r2, [r3, #28]
 800a43c:	2304      	movs	r3, #4
 800a43e:	e067      	b.n	800a510 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	699b      	ldr	r3, [r3, #24]
 800a446:	4619      	mov	r1, r3
 800a448:	4610      	mov	r0, r2
 800a44a:	f7ff fe59 	bl	800a100 <create_chain>
 800a44e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d101      	bne.n	800a45a <dir_next+0xcc>
 800a456:	2307      	movs	r3, #7
 800a458:	e05a      	b.n	800a510 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d101      	bne.n	800a464 <dir_next+0xd6>
 800a460:	2302      	movs	r3, #2
 800a462:	e055      	b.n	800a510 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a46a:	d101      	bne.n	800a470 <dir_next+0xe2>
 800a46c:	2301      	movs	r3, #1
 800a46e:	e04f      	b.n	800a510 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a470:	68f8      	ldr	r0, [r7, #12]
 800a472:	f7ff fb4d 	bl	8009b10 <sync_window>
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d001      	beq.n	800a480 <dir_next+0xf2>
 800a47c:	2301      	movs	r3, #1
 800a47e:	e047      	b.n	800a510 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	3334      	adds	r3, #52	; 0x34
 800a484:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a488:	2100      	movs	r1, #0
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7ff f977 	bl	800977e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a490:	2300      	movs	r3, #0
 800a492:	613b      	str	r3, [r7, #16]
 800a494:	6979      	ldr	r1, [r7, #20]
 800a496:	68f8      	ldr	r0, [r7, #12]
 800a498:	f7ff fc1a 	bl	8009cd0 <clust2sect>
 800a49c:	4602      	mov	r2, r0
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	631a      	str	r2, [r3, #48]	; 0x30
 800a4a2:	e012      	b.n	800a4ca <dir_next+0x13c>
						fs->wflag = 1;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	f7ff fb30 	bl	8009b10 <sync_window>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d001      	beq.n	800a4ba <dir_next+0x12c>
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e02a      	b.n	800a510 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	3301      	adds	r3, #1
 800a4be:	613b      	str	r3, [r7, #16]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4c4:	1c5a      	adds	r2, r3, #1
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	631a      	str	r2, [r3, #48]	; 0x30
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	895b      	ldrh	r3, [r3, #10]
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d3e6      	bcc.n	800a4a4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	1ad2      	subs	r2, r2, r3
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	697a      	ldr	r2, [r7, #20]
 800a4e6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a4e8:	6979      	ldr	r1, [r7, #20]
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f7ff fbf0 	bl	8009cd0 <clust2sect>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	68ba      	ldr	r2, [r7, #8]
 800a4fa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a508:	441a      	add	r2, r3
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a50e:	2300      	movs	r3, #0
}
 800a510:	4618      	mov	r0, r3
 800a512:	3718      	adds	r7, #24
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b086      	sub	sp, #24
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a528:	2100      	movs	r1, #0
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f7ff feb4 	bl	800a298 <dir_sdi>
 800a530:	4603      	mov	r3, r0
 800a532:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a534:	7dfb      	ldrb	r3, [r7, #23]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d12b      	bne.n	800a592 <dir_alloc+0x7a>
		n = 0;
 800a53a:	2300      	movs	r3, #0
 800a53c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	69db      	ldr	r3, [r3, #28]
 800a542:	4619      	mov	r1, r3
 800a544:	68f8      	ldr	r0, [r7, #12]
 800a546:	f7ff fb27 	bl	8009b98 <move_window>
 800a54a:	4603      	mov	r3, r0
 800a54c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a54e:	7dfb      	ldrb	r3, [r7, #23]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d11d      	bne.n	800a590 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6a1b      	ldr	r3, [r3, #32]
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	2be5      	cmp	r3, #229	; 0xe5
 800a55c:	d004      	beq.n	800a568 <dir_alloc+0x50>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6a1b      	ldr	r3, [r3, #32]
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d107      	bne.n	800a578 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	3301      	adds	r3, #1
 800a56c:	613b      	str	r3, [r7, #16]
 800a56e:	693a      	ldr	r2, [r7, #16]
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	429a      	cmp	r2, r3
 800a574:	d102      	bne.n	800a57c <dir_alloc+0x64>
 800a576:	e00c      	b.n	800a592 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a578:	2300      	movs	r3, #0
 800a57a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a57c:	2101      	movs	r1, #1
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f7ff ff05 	bl	800a38e <dir_next>
 800a584:	4603      	mov	r3, r0
 800a586:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a588:	7dfb      	ldrb	r3, [r7, #23]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d0d7      	beq.n	800a53e <dir_alloc+0x26>
 800a58e:	e000      	b.n	800a592 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a590:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a592:	7dfb      	ldrb	r3, [r7, #23]
 800a594:	2b04      	cmp	r3, #4
 800a596:	d101      	bne.n	800a59c <dir_alloc+0x84>
 800a598:	2307      	movs	r3, #7
 800a59a:	75fb      	strb	r3, [r7, #23]
	return res;
 800a59c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3718      	adds	r7, #24
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b084      	sub	sp, #16
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	331a      	adds	r3, #26
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7ff f83f 	bl	8009638 <ld_word>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	2b03      	cmp	r3, #3
 800a5c4:	d109      	bne.n	800a5da <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	3314      	adds	r3, #20
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7ff f834 	bl	8009638 <ld_word>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	041b      	lsls	r3, r3, #16
 800a5d4:	68fa      	ldr	r2, [r7, #12]
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a5da:	68fb      	ldr	r3, [r7, #12]
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3710      	adds	r7, #16
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	331a      	adds	r3, #26
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	b292      	uxth	r2, r2
 800a5f8:	4611      	mov	r1, r2
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7ff f857 	bl	80096ae <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	2b03      	cmp	r3, #3
 800a606:	d109      	bne.n	800a61c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	f103 0214 	add.w	r2, r3, #20
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	0c1b      	lsrs	r3, r3, #16
 800a612:	b29b      	uxth	r3, r3
 800a614:	4619      	mov	r1, r3
 800a616:	4610      	mov	r0, r2
 800a618:	f7ff f849 	bl	80096ae <st_word>
	}
}
 800a61c:	bf00      	nop
 800a61e:	3710      	adds	r7, #16
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a624:	b590      	push	{r4, r7, lr}
 800a626:	b087      	sub	sp, #28
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	331a      	adds	r3, #26
 800a632:	4618      	mov	r0, r3
 800a634:	f7ff f800 	bl	8009638 <ld_word>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d001      	beq.n	800a642 <cmp_lfn+0x1e>
 800a63e:	2300      	movs	r3, #0
 800a640:	e059      	b.n	800a6f6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a64a:	1e5a      	subs	r2, r3, #1
 800a64c:	4613      	mov	r3, r2
 800a64e:	005b      	lsls	r3, r3, #1
 800a650:	4413      	add	r3, r2
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	4413      	add	r3, r2
 800a656:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a658:	2301      	movs	r3, #1
 800a65a:	81fb      	strh	r3, [r7, #14]
 800a65c:	2300      	movs	r3, #0
 800a65e:	613b      	str	r3, [r7, #16]
 800a660:	e033      	b.n	800a6ca <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a662:	4a27      	ldr	r2, [pc, #156]	; (800a700 <cmp_lfn+0xdc>)
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	4413      	add	r3, r2
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	461a      	mov	r2, r3
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	4413      	add	r3, r2
 800a670:	4618      	mov	r0, r3
 800a672:	f7fe ffe1 	bl	8009638 <ld_word>
 800a676:	4603      	mov	r3, r0
 800a678:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a67a:	89fb      	ldrh	r3, [r7, #14]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d01a      	beq.n	800a6b6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	2bfe      	cmp	r3, #254	; 0xfe
 800a684:	d812      	bhi.n	800a6ac <cmp_lfn+0x88>
 800a686:	89bb      	ldrh	r3, [r7, #12]
 800a688:	4618      	mov	r0, r3
 800a68a:	f002 fc1d 	bl	800cec8 <ff_wtoupper>
 800a68e:	4603      	mov	r3, r0
 800a690:	461c      	mov	r4, r3
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	1c5a      	adds	r2, r3, #1
 800a696:	617a      	str	r2, [r7, #20]
 800a698:	005b      	lsls	r3, r3, #1
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	4413      	add	r3, r2
 800a69e:	881b      	ldrh	r3, [r3, #0]
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f002 fc11 	bl	800cec8 <ff_wtoupper>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	429c      	cmp	r4, r3
 800a6aa:	d001      	beq.n	800a6b0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	e022      	b.n	800a6f6 <cmp_lfn+0xd2>
			}
			wc = uc;
 800a6b0:	89bb      	ldrh	r3, [r7, #12]
 800a6b2:	81fb      	strh	r3, [r7, #14]
 800a6b4:	e006      	b.n	800a6c4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a6b6:	89bb      	ldrh	r3, [r7, #12]
 800a6b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d001      	beq.n	800a6c4 <cmp_lfn+0xa0>
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	e018      	b.n	800a6f6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	613b      	str	r3, [r7, #16]
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	2b0c      	cmp	r3, #12
 800a6ce:	d9c8      	bls.n	800a662 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d00b      	beq.n	800a6f4 <cmp_lfn+0xd0>
 800a6dc:	89fb      	ldrh	r3, [r7, #14]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d008      	beq.n	800a6f4 <cmp_lfn+0xd0>
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	005b      	lsls	r3, r3, #1
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	4413      	add	r3, r2
 800a6ea:	881b      	ldrh	r3, [r3, #0]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d001      	beq.n	800a6f4 <cmp_lfn+0xd0>
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	e000      	b.n	800a6f6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a6f4:	2301      	movs	r3, #1
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	371c      	adds	r7, #28
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd90      	pop	{r4, r7, pc}
 800a6fe:	bf00      	nop
 800a700:	08010f30 	.word	0x08010f30

0800a704 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b088      	sub	sp, #32
 800a708:	af00      	add	r7, sp, #0
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	4611      	mov	r1, r2
 800a710:	461a      	mov	r2, r3
 800a712:	460b      	mov	r3, r1
 800a714:	71fb      	strb	r3, [r7, #7]
 800a716:	4613      	mov	r3, r2
 800a718:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	330d      	adds	r3, #13
 800a71e:	79ba      	ldrb	r2, [r7, #6]
 800a720:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	330b      	adds	r3, #11
 800a726:	220f      	movs	r2, #15
 800a728:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	330c      	adds	r3, #12
 800a72e:	2200      	movs	r2, #0
 800a730:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	331a      	adds	r3, #26
 800a736:	2100      	movs	r1, #0
 800a738:	4618      	mov	r0, r3
 800a73a:	f7fe ffb8 	bl	80096ae <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a73e:	79fb      	ldrb	r3, [r7, #7]
 800a740:	1e5a      	subs	r2, r3, #1
 800a742:	4613      	mov	r3, r2
 800a744:	005b      	lsls	r3, r3, #1
 800a746:	4413      	add	r3, r2
 800a748:	009b      	lsls	r3, r3, #2
 800a74a:	4413      	add	r3, r2
 800a74c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a74e:	2300      	movs	r3, #0
 800a750:	82fb      	strh	r3, [r7, #22]
 800a752:	2300      	movs	r3, #0
 800a754:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a756:	8afb      	ldrh	r3, [r7, #22]
 800a758:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d007      	beq.n	800a770 <put_lfn+0x6c>
 800a760:	69fb      	ldr	r3, [r7, #28]
 800a762:	1c5a      	adds	r2, r3, #1
 800a764:	61fa      	str	r2, [r7, #28]
 800a766:	005b      	lsls	r3, r3, #1
 800a768:	68fa      	ldr	r2, [r7, #12]
 800a76a:	4413      	add	r3, r2
 800a76c:	881b      	ldrh	r3, [r3, #0]
 800a76e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a770:	4a17      	ldr	r2, [pc, #92]	; (800a7d0 <put_lfn+0xcc>)
 800a772:	69bb      	ldr	r3, [r7, #24]
 800a774:	4413      	add	r3, r2
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	461a      	mov	r2, r3
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	4413      	add	r3, r2
 800a77e:	8afa      	ldrh	r2, [r7, #22]
 800a780:	4611      	mov	r1, r2
 800a782:	4618      	mov	r0, r3
 800a784:	f7fe ff93 	bl	80096ae <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a788:	8afb      	ldrh	r3, [r7, #22]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d102      	bne.n	800a794 <put_lfn+0x90>
 800a78e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a792:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a794:	69bb      	ldr	r3, [r7, #24]
 800a796:	3301      	adds	r3, #1
 800a798:	61bb      	str	r3, [r7, #24]
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	2b0c      	cmp	r3, #12
 800a79e:	d9da      	bls.n	800a756 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a7a0:	8afb      	ldrh	r3, [r7, #22]
 800a7a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d006      	beq.n	800a7b8 <put_lfn+0xb4>
 800a7aa:	69fb      	ldr	r3, [r7, #28]
 800a7ac:	005b      	lsls	r3, r3, #1
 800a7ae:	68fa      	ldr	r2, [r7, #12]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	881b      	ldrh	r3, [r3, #0]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d103      	bne.n	800a7c0 <put_lfn+0xbc>
 800a7b8:	79fb      	ldrb	r3, [r7, #7]
 800a7ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7be:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	79fa      	ldrb	r2, [r7, #7]
 800a7c4:	701a      	strb	r2, [r3, #0]
}
 800a7c6:	bf00      	nop
 800a7c8:	3720      	adds	r7, #32
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	08010f30 	.word	0x08010f30

0800a7d4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b08c      	sub	sp, #48	; 0x30
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
 800a7e0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a7e2:	220b      	movs	r2, #11
 800a7e4:	68b9      	ldr	r1, [r7, #8]
 800a7e6:	68f8      	ldr	r0, [r7, #12]
 800a7e8:	f7fe ffa8 	bl	800973c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	2b05      	cmp	r3, #5
 800a7f0:	d929      	bls.n	800a846 <gen_numname+0x72>
		sr = seq;
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a7f6:	e020      	b.n	800a83a <gen_numname+0x66>
			wc = *lfn++;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	1c9a      	adds	r2, r3, #2
 800a7fc:	607a      	str	r2, [r7, #4]
 800a7fe:	881b      	ldrh	r3, [r3, #0]
 800a800:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800a802:	2300      	movs	r3, #0
 800a804:	62bb      	str	r3, [r7, #40]	; 0x28
 800a806:	e015      	b.n	800a834 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800a808:	69fb      	ldr	r3, [r7, #28]
 800a80a:	005a      	lsls	r2, r3, #1
 800a80c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a80e:	f003 0301 	and.w	r3, r3, #1
 800a812:	4413      	add	r3, r2
 800a814:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a816:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a818:	085b      	lsrs	r3, r3, #1
 800a81a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a822:	2b00      	cmp	r3, #0
 800a824:	d003      	beq.n	800a82e <gen_numname+0x5a>
 800a826:	69fa      	ldr	r2, [r7, #28]
 800a828:	4b30      	ldr	r3, [pc, #192]	; (800a8ec <gen_numname+0x118>)
 800a82a:	4053      	eors	r3, r2
 800a82c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a830:	3301      	adds	r3, #1
 800a832:	62bb      	str	r3, [r7, #40]	; 0x28
 800a834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a836:	2b0f      	cmp	r3, #15
 800a838:	d9e6      	bls.n	800a808 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	881b      	ldrh	r3, [r3, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d1da      	bne.n	800a7f8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a846:	2307      	movs	r3, #7
 800a848:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	f003 030f 	and.w	r3, r3, #15
 800a852:	b2db      	uxtb	r3, r3
 800a854:	3330      	adds	r3, #48	; 0x30
 800a856:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800a85a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a85e:	2b39      	cmp	r3, #57	; 0x39
 800a860:	d904      	bls.n	800a86c <gen_numname+0x98>
 800a862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a866:	3307      	adds	r3, #7
 800a868:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800a86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a86e:	1e5a      	subs	r2, r3, #1
 800a870:	62ba      	str	r2, [r7, #40]	; 0x28
 800a872:	3330      	adds	r3, #48	; 0x30
 800a874:	443b      	add	r3, r7
 800a876:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a87a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	091b      	lsrs	r3, r3, #4
 800a882:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d1df      	bne.n	800a84a <gen_numname+0x76>
	ns[i] = '~';
 800a88a:	f107 0214 	add.w	r2, r7, #20
 800a88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a890:	4413      	add	r3, r2
 800a892:	227e      	movs	r2, #126	; 0x7e
 800a894:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a896:	2300      	movs	r3, #0
 800a898:	627b      	str	r3, [r7, #36]	; 0x24
 800a89a:	e002      	b.n	800a8a2 <gen_numname+0xce>
 800a89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89e:	3301      	adds	r3, #1
 800a8a0:	627b      	str	r3, [r7, #36]	; 0x24
 800a8a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d205      	bcs.n	800a8b6 <gen_numname+0xe2>
 800a8aa:	68fa      	ldr	r2, [r7, #12]
 800a8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ae:	4413      	add	r3, r2
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	2b20      	cmp	r3, #32
 800a8b4:	d1f2      	bne.n	800a89c <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b8:	2b07      	cmp	r3, #7
 800a8ba:	d807      	bhi.n	800a8cc <gen_numname+0xf8>
 800a8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8be:	1c5a      	adds	r2, r3, #1
 800a8c0:	62ba      	str	r2, [r7, #40]	; 0x28
 800a8c2:	3330      	adds	r3, #48	; 0x30
 800a8c4:	443b      	add	r3, r7
 800a8c6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a8ca:	e000      	b.n	800a8ce <gen_numname+0xfa>
 800a8cc:	2120      	movs	r1, #32
 800a8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d0:	1c5a      	adds	r2, r3, #1
 800a8d2:	627a      	str	r2, [r7, #36]	; 0x24
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	4413      	add	r3, r2
 800a8d8:	460a      	mov	r2, r1
 800a8da:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8de:	2b07      	cmp	r3, #7
 800a8e0:	d9e9      	bls.n	800a8b6 <gen_numname+0xe2>
}
 800a8e2:	bf00      	nop
 800a8e4:	bf00      	nop
 800a8e6:	3730      	adds	r7, #48	; 0x30
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	00011021 	.word	0x00011021

0800a8f0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b085      	sub	sp, #20
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a8fc:	230b      	movs	r3, #11
 800a8fe:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a900:	7bfb      	ldrb	r3, [r7, #15]
 800a902:	b2da      	uxtb	r2, r3
 800a904:	0852      	lsrs	r2, r2, #1
 800a906:	01db      	lsls	r3, r3, #7
 800a908:	4313      	orrs	r3, r2
 800a90a:	b2da      	uxtb	r2, r3
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	1c59      	adds	r1, r3, #1
 800a910:	6079      	str	r1, [r7, #4]
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	4413      	add	r3, r2
 800a916:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	3b01      	subs	r3, #1
 800a91c:	60bb      	str	r3, [r7, #8]
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d1ed      	bne.n	800a900 <sum_sfn+0x10>
	return sum;
 800a924:	7bfb      	ldrb	r3, [r7, #15]
}
 800a926:	4618      	mov	r0, r3
 800a928:	3714      	adds	r7, #20
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr

0800a932 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a932:	b580      	push	{r7, lr}
 800a934:	b086      	sub	sp, #24
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a940:	2100      	movs	r1, #0
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f7ff fca8 	bl	800a298 <dir_sdi>
 800a948:	4603      	mov	r3, r0
 800a94a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a94c:	7dfb      	ldrb	r3, [r7, #23]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d001      	beq.n	800a956 <dir_find+0x24>
 800a952:	7dfb      	ldrb	r3, [r7, #23]
 800a954:	e0a9      	b.n	800aaaa <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a956:	23ff      	movs	r3, #255	; 0xff
 800a958:	753b      	strb	r3, [r7, #20]
 800a95a:	7d3b      	ldrb	r3, [r7, #20]
 800a95c:	757b      	strb	r3, [r7, #21]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a964:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	69db      	ldr	r3, [r3, #28]
 800a96a:	4619      	mov	r1, r3
 800a96c:	6938      	ldr	r0, [r7, #16]
 800a96e:	f7ff f913 	bl	8009b98 <move_window>
 800a972:	4603      	mov	r3, r0
 800a974:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a976:	7dfb      	ldrb	r3, [r7, #23]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	f040 8090 	bne.w	800aa9e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6a1b      	ldr	r3, [r3, #32]
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a986:	7dbb      	ldrb	r3, [r7, #22]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d102      	bne.n	800a992 <dir_find+0x60>
 800a98c:	2304      	movs	r3, #4
 800a98e:	75fb      	strb	r3, [r7, #23]
 800a990:	e08a      	b.n	800aaa8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6a1b      	ldr	r3, [r3, #32]
 800a996:	330b      	adds	r3, #11
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a99e:	73fb      	strb	r3, [r7, #15]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	7bfa      	ldrb	r2, [r7, #15]
 800a9a4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a9a6:	7dbb      	ldrb	r3, [r7, #22]
 800a9a8:	2be5      	cmp	r3, #229	; 0xe5
 800a9aa:	d007      	beq.n	800a9bc <dir_find+0x8a>
 800a9ac:	7bfb      	ldrb	r3, [r7, #15]
 800a9ae:	f003 0308 	and.w	r3, r3, #8
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d009      	beq.n	800a9ca <dir_find+0x98>
 800a9b6:	7bfb      	ldrb	r3, [r7, #15]
 800a9b8:	2b0f      	cmp	r3, #15
 800a9ba:	d006      	beq.n	800a9ca <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a9bc:	23ff      	movs	r3, #255	; 0xff
 800a9be:	757b      	strb	r3, [r7, #21]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a9c6:	631a      	str	r2, [r3, #48]	; 0x30
 800a9c8:	e05e      	b.n	800aa88 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a9ca:	7bfb      	ldrb	r3, [r7, #15]
 800a9cc:	2b0f      	cmp	r3, #15
 800a9ce:	d136      	bne.n	800aa3e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a9d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d154      	bne.n	800aa88 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a9de:	7dbb      	ldrb	r3, [r7, #22]
 800a9e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d00d      	beq.n	800aa04 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6a1b      	ldr	r3, [r3, #32]
 800a9ec:	7b5b      	ldrb	r3, [r3, #13]
 800a9ee:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800a9f0:	7dbb      	ldrb	r3, [r7, #22]
 800a9f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9f6:	75bb      	strb	r3, [r7, #22]
 800a9f8:	7dbb      	ldrb	r3, [r7, #22]
 800a9fa:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	695a      	ldr	r2, [r3, #20]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800aa04:	7dba      	ldrb	r2, [r7, #22]
 800aa06:	7d7b      	ldrb	r3, [r7, #21]
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d115      	bne.n	800aa38 <dir_find+0x106>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6a1b      	ldr	r3, [r3, #32]
 800aa10:	330d      	adds	r3, #13
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	7d3a      	ldrb	r2, [r7, #20]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d10e      	bne.n	800aa38 <dir_find+0x106>
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	68da      	ldr	r2, [r3, #12]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6a1b      	ldr	r3, [r3, #32]
 800aa22:	4619      	mov	r1, r3
 800aa24:	4610      	mov	r0, r2
 800aa26:	f7ff fdfd 	bl	800a624 <cmp_lfn>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d003      	beq.n	800aa38 <dir_find+0x106>
 800aa30:	7d7b      	ldrb	r3, [r7, #21]
 800aa32:	3b01      	subs	r3, #1
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	e000      	b.n	800aa3a <dir_find+0x108>
 800aa38:	23ff      	movs	r3, #255	; 0xff
 800aa3a:	757b      	strb	r3, [r7, #21]
 800aa3c:	e024      	b.n	800aa88 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800aa3e:	7d7b      	ldrb	r3, [r7, #21]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d109      	bne.n	800aa58 <dir_find+0x126>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6a1b      	ldr	r3, [r3, #32]
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7ff ff51 	bl	800a8f0 <sum_sfn>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	461a      	mov	r2, r3
 800aa52:	7d3b      	ldrb	r3, [r7, #20]
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d024      	beq.n	800aaa2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800aa5e:	f003 0301 	and.w	r3, r3, #1
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d10a      	bne.n	800aa7c <dir_find+0x14a>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6a18      	ldr	r0, [r3, #32]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	3324      	adds	r3, #36	; 0x24
 800aa6e:	220b      	movs	r2, #11
 800aa70:	4619      	mov	r1, r3
 800aa72:	f7fe fe9f 	bl	80097b4 <mem_cmp>
 800aa76:	4603      	mov	r3, r0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d014      	beq.n	800aaa6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800aa7c:	23ff      	movs	r3, #255	; 0xff
 800aa7e:	757b      	strb	r3, [r7, #21]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa86:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800aa88:	2100      	movs	r1, #0
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f7ff fc7f 	bl	800a38e <dir_next>
 800aa90:	4603      	mov	r3, r0
 800aa92:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800aa94:	7dfb      	ldrb	r3, [r7, #23]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	f43f af65 	beq.w	800a966 <dir_find+0x34>
 800aa9c:	e004      	b.n	800aaa8 <dir_find+0x176>
		if (res != FR_OK) break;
 800aa9e:	bf00      	nop
 800aaa0:	e002      	b.n	800aaa8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800aaa2:	bf00      	nop
 800aaa4:	e000      	b.n	800aaa8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800aaa6:	bf00      	nop

	return res;
 800aaa8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3718      	adds	r7, #24
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
	...

0800aab4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b08c      	sub	sp, #48	; 0x30
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800aac8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d001      	beq.n	800aad4 <dir_register+0x20>
 800aad0:	2306      	movs	r3, #6
 800aad2:	e0e0      	b.n	800ac96 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800aad4:	2300      	movs	r3, #0
 800aad6:	627b      	str	r3, [r7, #36]	; 0x24
 800aad8:	e002      	b.n	800aae0 <dir_register+0x2c>
 800aada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aadc:	3301      	adds	r3, #1
 800aade:	627b      	str	r3, [r7, #36]	; 0x24
 800aae0:	69fb      	ldr	r3, [r7, #28]
 800aae2:	68da      	ldr	r2, [r3, #12]
 800aae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae6:	005b      	lsls	r3, r3, #1
 800aae8:	4413      	add	r3, r2
 800aaea:	881b      	ldrh	r3, [r3, #0]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d1f4      	bne.n	800aada <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800aaf6:	f107 030c 	add.w	r3, r7, #12
 800aafa:	220c      	movs	r2, #12
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7fe fe1d 	bl	800973c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ab02:	7dfb      	ldrb	r3, [r7, #23]
 800ab04:	f003 0301 	and.w	r3, r3, #1
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d032      	beq.n	800ab72 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2240      	movs	r2, #64	; 0x40
 800ab10:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800ab14:	2301      	movs	r3, #1
 800ab16:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab18:	e016      	b.n	800ab48 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800ab20:	69fb      	ldr	r3, [r7, #28]
 800ab22:	68da      	ldr	r2, [r3, #12]
 800ab24:	f107 010c 	add.w	r1, r7, #12
 800ab28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2a:	f7ff fe53 	bl	800a7d4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f7ff feff 	bl	800a932 <dir_find>
 800ab34:	4603      	mov	r3, r0
 800ab36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800ab3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d106      	bne.n	800ab50 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800ab42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab44:	3301      	adds	r3, #1
 800ab46:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4a:	2b63      	cmp	r3, #99	; 0x63
 800ab4c:	d9e5      	bls.n	800ab1a <dir_register+0x66>
 800ab4e:	e000      	b.n	800ab52 <dir_register+0x9e>
			if (res != FR_OK) break;
 800ab50:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ab52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab54:	2b64      	cmp	r3, #100	; 0x64
 800ab56:	d101      	bne.n	800ab5c <dir_register+0xa8>
 800ab58:	2307      	movs	r3, #7
 800ab5a:	e09c      	b.n	800ac96 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ab5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab60:	2b04      	cmp	r3, #4
 800ab62:	d002      	beq.n	800ab6a <dir_register+0xb6>
 800ab64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab68:	e095      	b.n	800ac96 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ab6a:	7dfa      	ldrb	r2, [r7, #23]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ab72:	7dfb      	ldrb	r3, [r7, #23]
 800ab74:	f003 0302 	and.w	r3, r3, #2
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d007      	beq.n	800ab8c <dir_register+0xd8>
 800ab7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab7e:	330c      	adds	r3, #12
 800ab80:	4a47      	ldr	r2, [pc, #284]	; (800aca0 <dir_register+0x1ec>)
 800ab82:	fba2 2303 	umull	r2, r3, r2, r3
 800ab86:	089b      	lsrs	r3, r3, #2
 800ab88:	3301      	adds	r3, #1
 800ab8a:	e000      	b.n	800ab8e <dir_register+0xda>
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ab90:	6a39      	ldr	r1, [r7, #32]
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f7ff fcc0 	bl	800a518 <dir_alloc>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ab9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d148      	bne.n	800ac38 <dir_register+0x184>
 800aba6:	6a3b      	ldr	r3, [r7, #32]
 800aba8:	3b01      	subs	r3, #1
 800abaa:	623b      	str	r3, [r7, #32]
 800abac:	6a3b      	ldr	r3, [r7, #32]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d042      	beq.n	800ac38 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	695a      	ldr	r2, [r3, #20]
 800abb6:	6a3b      	ldr	r3, [r7, #32]
 800abb8:	015b      	lsls	r3, r3, #5
 800abba:	1ad3      	subs	r3, r2, r3
 800abbc:	4619      	mov	r1, r3
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f7ff fb6a 	bl	800a298 <dir_sdi>
 800abc4:	4603      	mov	r3, r0
 800abc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800abca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d132      	bne.n	800ac38 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	3324      	adds	r3, #36	; 0x24
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7ff fe8a 	bl	800a8f0 <sum_sfn>
 800abdc:	4603      	mov	r3, r0
 800abde:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	69db      	ldr	r3, [r3, #28]
 800abe4:	4619      	mov	r1, r3
 800abe6:	69f8      	ldr	r0, [r7, #28]
 800abe8:	f7fe ffd6 	bl	8009b98 <move_window>
 800abec:	4603      	mov	r3, r0
 800abee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800abf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d11d      	bne.n	800ac36 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800abfa:	69fb      	ldr	r3, [r7, #28]
 800abfc:	68d8      	ldr	r0, [r3, #12]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6a19      	ldr	r1, [r3, #32]
 800ac02:	6a3b      	ldr	r3, [r7, #32]
 800ac04:	b2da      	uxtb	r2, r3
 800ac06:	7efb      	ldrb	r3, [r7, #27]
 800ac08:	f7ff fd7c 	bl	800a704 <put_lfn>
				fs->wflag = 1;
 800ac0c:	69fb      	ldr	r3, [r7, #28]
 800ac0e:	2201      	movs	r2, #1
 800ac10:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ac12:	2100      	movs	r1, #0
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f7ff fbba 	bl	800a38e <dir_next>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800ac20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d107      	bne.n	800ac38 <dir_register+0x184>
 800ac28:	6a3b      	ldr	r3, [r7, #32]
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	623b      	str	r3, [r7, #32]
 800ac2e:	6a3b      	ldr	r3, [r7, #32]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d1d5      	bne.n	800abe0 <dir_register+0x12c>
 800ac34:	e000      	b.n	800ac38 <dir_register+0x184>
				if (res != FR_OK) break;
 800ac36:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ac38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d128      	bne.n	800ac92 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	69db      	ldr	r3, [r3, #28]
 800ac44:	4619      	mov	r1, r3
 800ac46:	69f8      	ldr	r0, [r7, #28]
 800ac48:	f7fe ffa6 	bl	8009b98 <move_window>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ac52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d11b      	bne.n	800ac92 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6a1b      	ldr	r3, [r3, #32]
 800ac5e:	2220      	movs	r2, #32
 800ac60:	2100      	movs	r1, #0
 800ac62:	4618      	mov	r0, r3
 800ac64:	f7fe fd8b 	bl	800977e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6a18      	ldr	r0, [r3, #32]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	3324      	adds	r3, #36	; 0x24
 800ac70:	220b      	movs	r2, #11
 800ac72:	4619      	mov	r1, r3
 800ac74:	f7fe fd62 	bl	800973c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6a1b      	ldr	r3, [r3, #32]
 800ac82:	330c      	adds	r3, #12
 800ac84:	f002 0218 	and.w	r2, r2, #24
 800ac88:	b2d2      	uxtb	r2, r2
 800ac8a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	2201      	movs	r2, #1
 800ac90:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ac92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3730      	adds	r7, #48	; 0x30
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	4ec4ec4f 	.word	0x4ec4ec4f

0800aca4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b08a      	sub	sp, #40	; 0x28
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	613b      	str	r3, [r7, #16]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	68db      	ldr	r3, [r3, #12]
 800acba:	60fb      	str	r3, [r7, #12]
 800acbc:	2300      	movs	r3, #0
 800acbe:	617b      	str	r3, [r7, #20]
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800acc4:	69bb      	ldr	r3, [r7, #24]
 800acc6:	1c5a      	adds	r2, r3, #1
 800acc8:	61ba      	str	r2, [r7, #24]
 800acca:	693a      	ldr	r2, [r7, #16]
 800accc:	4413      	add	r3, r2
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800acd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800acd4:	2b1f      	cmp	r3, #31
 800acd6:	d940      	bls.n	800ad5a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800acd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800acda:	2b2f      	cmp	r3, #47	; 0x2f
 800acdc:	d006      	beq.n	800acec <create_name+0x48>
 800acde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ace0:	2b5c      	cmp	r3, #92	; 0x5c
 800ace2:	d110      	bne.n	800ad06 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ace4:	e002      	b.n	800acec <create_name+0x48>
 800ace6:	69bb      	ldr	r3, [r7, #24]
 800ace8:	3301      	adds	r3, #1
 800acea:	61bb      	str	r3, [r7, #24]
 800acec:	693a      	ldr	r2, [r7, #16]
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	4413      	add	r3, r2
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	2b2f      	cmp	r3, #47	; 0x2f
 800acf6:	d0f6      	beq.n	800ace6 <create_name+0x42>
 800acf8:	693a      	ldr	r2, [r7, #16]
 800acfa:	69bb      	ldr	r3, [r7, #24]
 800acfc:	4413      	add	r3, r2
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	2b5c      	cmp	r3, #92	; 0x5c
 800ad02:	d0f0      	beq.n	800ace6 <create_name+0x42>
			break;
 800ad04:	e02a      	b.n	800ad5c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	2bfe      	cmp	r3, #254	; 0xfe
 800ad0a:	d901      	bls.n	800ad10 <create_name+0x6c>
 800ad0c:	2306      	movs	r3, #6
 800ad0e:	e17d      	b.n	800b00c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ad10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ad16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ad18:	2101      	movs	r1, #1
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f002 f898 	bl	800ce50 <ff_convert>
 800ad20:	4603      	mov	r3, r0
 800ad22:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ad24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d101      	bne.n	800ad2e <create_name+0x8a>
 800ad2a:	2306      	movs	r3, #6
 800ad2c:	e16e      	b.n	800b00c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ad2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ad30:	2b7f      	cmp	r3, #127	; 0x7f
 800ad32:	d809      	bhi.n	800ad48 <create_name+0xa4>
 800ad34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ad36:	4619      	mov	r1, r3
 800ad38:	488d      	ldr	r0, [pc, #564]	; (800af70 <create_name+0x2cc>)
 800ad3a:	f7fe fd62 	bl	8009802 <chk_chr>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d001      	beq.n	800ad48 <create_name+0xa4>
 800ad44:	2306      	movs	r3, #6
 800ad46:	e161      	b.n	800b00c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	1c5a      	adds	r2, r3, #1
 800ad4c:	617a      	str	r2, [r7, #20]
 800ad4e:	005b      	lsls	r3, r3, #1
 800ad50:	68fa      	ldr	r2, [r7, #12]
 800ad52:	4413      	add	r3, r2
 800ad54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ad56:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ad58:	e7b4      	b.n	800acc4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ad5a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ad5c:	693a      	ldr	r2, [r7, #16]
 800ad5e:	69bb      	ldr	r3, [r7, #24]
 800ad60:	441a      	add	r2, r3
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ad66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ad68:	2b1f      	cmp	r3, #31
 800ad6a:	d801      	bhi.n	800ad70 <create_name+0xcc>
 800ad6c:	2304      	movs	r3, #4
 800ad6e:	e000      	b.n	800ad72 <create_name+0xce>
 800ad70:	2300      	movs	r3, #0
 800ad72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ad76:	e011      	b.n	800ad9c <create_name+0xf8>
		w = lfn[di - 1];
 800ad78:	697a      	ldr	r2, [r7, #20]
 800ad7a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ad7e:	4413      	add	r3, r2
 800ad80:	005b      	lsls	r3, r3, #1
 800ad82:	68fa      	ldr	r2, [r7, #12]
 800ad84:	4413      	add	r3, r2
 800ad86:	881b      	ldrh	r3, [r3, #0]
 800ad88:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800ad8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ad8c:	2b20      	cmp	r3, #32
 800ad8e:	d002      	beq.n	800ad96 <create_name+0xf2>
 800ad90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ad92:	2b2e      	cmp	r3, #46	; 0x2e
 800ad94:	d106      	bne.n	800ada4 <create_name+0x100>
		di--;
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	3b01      	subs	r3, #1
 800ad9a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1ea      	bne.n	800ad78 <create_name+0xd4>
 800ada2:	e000      	b.n	800ada6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ada4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	005b      	lsls	r3, r3, #1
 800adaa:	68fa      	ldr	r2, [r7, #12]
 800adac:	4413      	add	r3, r2
 800adae:	2200      	movs	r2, #0
 800adb0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d101      	bne.n	800adbc <create_name+0x118>
 800adb8:	2306      	movs	r3, #6
 800adba:	e127      	b.n	800b00c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	3324      	adds	r3, #36	; 0x24
 800adc0:	220b      	movs	r2, #11
 800adc2:	2120      	movs	r1, #32
 800adc4:	4618      	mov	r0, r3
 800adc6:	f7fe fcda 	bl	800977e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800adca:	2300      	movs	r3, #0
 800adcc:	61bb      	str	r3, [r7, #24]
 800adce:	e002      	b.n	800add6 <create_name+0x132>
 800add0:	69bb      	ldr	r3, [r7, #24]
 800add2:	3301      	adds	r3, #1
 800add4:	61bb      	str	r3, [r7, #24]
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	005b      	lsls	r3, r3, #1
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	4413      	add	r3, r2
 800adde:	881b      	ldrh	r3, [r3, #0]
 800ade0:	2b20      	cmp	r3, #32
 800ade2:	d0f5      	beq.n	800add0 <create_name+0x12c>
 800ade4:	69bb      	ldr	r3, [r7, #24]
 800ade6:	005b      	lsls	r3, r3, #1
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	4413      	add	r3, r2
 800adec:	881b      	ldrh	r3, [r3, #0]
 800adee:	2b2e      	cmp	r3, #46	; 0x2e
 800adf0:	d0ee      	beq.n	800add0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d009      	beq.n	800ae0c <create_name+0x168>
 800adf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800adfc:	f043 0303 	orr.w	r3, r3, #3
 800ae00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ae04:	e002      	b.n	800ae0c <create_name+0x168>
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	3b01      	subs	r3, #1
 800ae0a:	617b      	str	r3, [r7, #20]
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d009      	beq.n	800ae26 <create_name+0x182>
 800ae12:	697a      	ldr	r2, [r7, #20]
 800ae14:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ae18:	4413      	add	r3, r2
 800ae1a:	005b      	lsls	r3, r3, #1
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	4413      	add	r3, r2
 800ae20:	881b      	ldrh	r3, [r3, #0]
 800ae22:	2b2e      	cmp	r3, #46	; 0x2e
 800ae24:	d1ef      	bne.n	800ae06 <create_name+0x162>

	i = b = 0; ni = 8;
 800ae26:	2300      	movs	r3, #0
 800ae28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	623b      	str	r3, [r7, #32]
 800ae30:	2308      	movs	r3, #8
 800ae32:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ae34:	69bb      	ldr	r3, [r7, #24]
 800ae36:	1c5a      	adds	r2, r3, #1
 800ae38:	61ba      	str	r2, [r7, #24]
 800ae3a:	005b      	lsls	r3, r3, #1
 800ae3c:	68fa      	ldr	r2, [r7, #12]
 800ae3e:	4413      	add	r3, r2
 800ae40:	881b      	ldrh	r3, [r3, #0]
 800ae42:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ae44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	f000 8090 	beq.w	800af6c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ae4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae4e:	2b20      	cmp	r3, #32
 800ae50:	d006      	beq.n	800ae60 <create_name+0x1bc>
 800ae52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae54:	2b2e      	cmp	r3, #46	; 0x2e
 800ae56:	d10a      	bne.n	800ae6e <create_name+0x1ca>
 800ae58:	69ba      	ldr	r2, [r7, #24]
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d006      	beq.n	800ae6e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800ae60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae64:	f043 0303 	orr.w	r3, r3, #3
 800ae68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ae6c:	e07d      	b.n	800af6a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ae6e:	6a3a      	ldr	r2, [r7, #32]
 800ae70:	69fb      	ldr	r3, [r7, #28]
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d203      	bcs.n	800ae7e <create_name+0x1da>
 800ae76:	69ba      	ldr	r2, [r7, #24]
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d123      	bne.n	800aec6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	2b0b      	cmp	r3, #11
 800ae82:	d106      	bne.n	800ae92 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800ae84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae88:	f043 0303 	orr.w	r3, r3, #3
 800ae8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ae90:	e075      	b.n	800af7e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ae92:	69ba      	ldr	r2, [r7, #24]
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d005      	beq.n	800aea6 <create_name+0x202>
 800ae9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae9e:	f043 0303 	orr.w	r3, r3, #3
 800aea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800aea6:	69ba      	ldr	r2, [r7, #24]
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d866      	bhi.n	800af7c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	61bb      	str	r3, [r7, #24]
 800aeb2:	2308      	movs	r3, #8
 800aeb4:	623b      	str	r3, [r7, #32]
 800aeb6:	230b      	movs	r3, #11
 800aeb8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800aeba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800aec4:	e051      	b.n	800af6a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800aec6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aec8:	2b7f      	cmp	r3, #127	; 0x7f
 800aeca:	d914      	bls.n	800aef6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800aecc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aece:	2100      	movs	r1, #0
 800aed0:	4618      	mov	r0, r3
 800aed2:	f001 ffbd 	bl	800ce50 <ff_convert>
 800aed6:	4603      	mov	r3, r0
 800aed8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800aeda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d004      	beq.n	800aeea <create_name+0x246>
 800aee0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aee2:	3b80      	subs	r3, #128	; 0x80
 800aee4:	4a23      	ldr	r2, [pc, #140]	; (800af74 <create_name+0x2d0>)
 800aee6:	5cd3      	ldrb	r3, [r2, r3]
 800aee8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800aeea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aeee:	f043 0302 	orr.w	r3, r3, #2
 800aef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800aef6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d007      	beq.n	800af0c <create_name+0x268>
 800aefc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aefe:	4619      	mov	r1, r3
 800af00:	481d      	ldr	r0, [pc, #116]	; (800af78 <create_name+0x2d4>)
 800af02:	f7fe fc7e 	bl	8009802 <chk_chr>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d008      	beq.n	800af1e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800af0c:	235f      	movs	r3, #95	; 0x5f
 800af0e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800af10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af14:	f043 0303 	orr.w	r3, r3, #3
 800af18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800af1c:	e01b      	b.n	800af56 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800af1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af20:	2b40      	cmp	r3, #64	; 0x40
 800af22:	d909      	bls.n	800af38 <create_name+0x294>
 800af24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af26:	2b5a      	cmp	r3, #90	; 0x5a
 800af28:	d806      	bhi.n	800af38 <create_name+0x294>
					b |= 2;
 800af2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800af2e:	f043 0302 	orr.w	r3, r3, #2
 800af32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800af36:	e00e      	b.n	800af56 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800af38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af3a:	2b60      	cmp	r3, #96	; 0x60
 800af3c:	d90b      	bls.n	800af56 <create_name+0x2b2>
 800af3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af40:	2b7a      	cmp	r3, #122	; 0x7a
 800af42:	d808      	bhi.n	800af56 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800af44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800af48:	f043 0301 	orr.w	r3, r3, #1
 800af4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800af50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af52:	3b20      	subs	r3, #32
 800af54:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800af56:	6a3b      	ldr	r3, [r7, #32]
 800af58:	1c5a      	adds	r2, r3, #1
 800af5a:	623a      	str	r2, [r7, #32]
 800af5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800af5e:	b2d1      	uxtb	r1, r2
 800af60:	687a      	ldr	r2, [r7, #4]
 800af62:	4413      	add	r3, r2
 800af64:	460a      	mov	r2, r1
 800af66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800af6a:	e763      	b.n	800ae34 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800af6c:	bf00      	nop
 800af6e:	e006      	b.n	800af7e <create_name+0x2da>
 800af70:	0800f360 	.word	0x0800f360
 800af74:	08010eb0 	.word	0x08010eb0
 800af78:	0800f36c 	.word	0x0800f36c
			if (si > di) break;			/* No extension */
 800af7c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800af84:	2be5      	cmp	r3, #229	; 0xe5
 800af86:	d103      	bne.n	800af90 <create_name+0x2ec>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2205      	movs	r2, #5
 800af8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	2b08      	cmp	r3, #8
 800af94:	d104      	bne.n	800afa0 <create_name+0x2fc>
 800af96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800af9a:	009b      	lsls	r3, r3, #2
 800af9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800afa0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800afa4:	f003 030c 	and.w	r3, r3, #12
 800afa8:	2b0c      	cmp	r3, #12
 800afaa:	d005      	beq.n	800afb8 <create_name+0x314>
 800afac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800afb0:	f003 0303 	and.w	r3, r3, #3
 800afb4:	2b03      	cmp	r3, #3
 800afb6:	d105      	bne.n	800afc4 <create_name+0x320>
 800afb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800afbc:	f043 0302 	orr.w	r3, r3, #2
 800afc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800afc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800afc8:	f003 0302 	and.w	r3, r3, #2
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d117      	bne.n	800b000 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800afd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800afd4:	f003 0303 	and.w	r3, r3, #3
 800afd8:	2b01      	cmp	r3, #1
 800afda:	d105      	bne.n	800afe8 <create_name+0x344>
 800afdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800afe0:	f043 0310 	orr.w	r3, r3, #16
 800afe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800afe8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800afec:	f003 030c 	and.w	r3, r3, #12
 800aff0:	2b04      	cmp	r3, #4
 800aff2:	d105      	bne.n	800b000 <create_name+0x35c>
 800aff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aff8:	f043 0308 	orr.w	r3, r3, #8
 800affc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b006:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800b00a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3728      	adds	r7, #40	; 0x28
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b086      	sub	sp, #24
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b028:	e002      	b.n	800b030 <follow_path+0x1c>
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	3301      	adds	r3, #1
 800b02e:	603b      	str	r3, [r7, #0]
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	2b2f      	cmp	r3, #47	; 0x2f
 800b036:	d0f8      	beq.n	800b02a <follow_path+0x16>
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	2b5c      	cmp	r3, #92	; 0x5c
 800b03e:	d0f4      	beq.n	800b02a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	2200      	movs	r2, #0
 800b044:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	2b1f      	cmp	r3, #31
 800b04c:	d80a      	bhi.n	800b064 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2280      	movs	r2, #128	; 0x80
 800b052:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b056:	2100      	movs	r1, #0
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f7ff f91d 	bl	800a298 <dir_sdi>
 800b05e:	4603      	mov	r3, r0
 800b060:	75fb      	strb	r3, [r7, #23]
 800b062:	e043      	b.n	800b0ec <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b064:	463b      	mov	r3, r7
 800b066:	4619      	mov	r1, r3
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f7ff fe1b 	bl	800aca4 <create_name>
 800b06e:	4603      	mov	r3, r0
 800b070:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b072:	7dfb      	ldrb	r3, [r7, #23]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d134      	bne.n	800b0e2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f7ff fc5a 	bl	800a932 <dir_find>
 800b07e:	4603      	mov	r3, r0
 800b080:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b088:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b08a:	7dfb      	ldrb	r3, [r7, #23]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d00a      	beq.n	800b0a6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b090:	7dfb      	ldrb	r3, [r7, #23]
 800b092:	2b04      	cmp	r3, #4
 800b094:	d127      	bne.n	800b0e6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b096:	7afb      	ldrb	r3, [r7, #11]
 800b098:	f003 0304 	and.w	r3, r3, #4
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d122      	bne.n	800b0e6 <follow_path+0xd2>
 800b0a0:	2305      	movs	r3, #5
 800b0a2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b0a4:	e01f      	b.n	800b0e6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b0a6:	7afb      	ldrb	r3, [r7, #11]
 800b0a8:	f003 0304 	and.w	r3, r3, #4
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d11c      	bne.n	800b0ea <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	799b      	ldrb	r3, [r3, #6]
 800b0b4:	f003 0310 	and.w	r3, r3, #16
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d102      	bne.n	800b0c2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b0bc:	2305      	movs	r3, #5
 800b0be:	75fb      	strb	r3, [r7, #23]
 800b0c0:	e014      	b.n	800b0ec <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	695b      	ldr	r3, [r3, #20]
 800b0cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0d0:	4413      	add	r3, r2
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	f7ff fa66 	bl	800a5a6 <ld_clust>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b0e0:	e7c0      	b.n	800b064 <follow_path+0x50>
			if (res != FR_OK) break;
 800b0e2:	bf00      	nop
 800b0e4:	e002      	b.n	800b0ec <follow_path+0xd8>
				break;
 800b0e6:	bf00      	nop
 800b0e8:	e000      	b.n	800b0ec <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b0ea:	bf00      	nop
			}
		}
	}

	return res;
 800b0ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3718      	adds	r7, #24
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b0f6:	b480      	push	{r7}
 800b0f8:	b087      	sub	sp, #28
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b0fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b102:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d031      	beq.n	800b170 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	617b      	str	r3, [r7, #20]
 800b112:	e002      	b.n	800b11a <get_ldnumber+0x24>
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	3301      	adds	r3, #1
 800b118:	617b      	str	r3, [r7, #20]
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	2b1f      	cmp	r3, #31
 800b120:	d903      	bls.n	800b12a <get_ldnumber+0x34>
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	2b3a      	cmp	r3, #58	; 0x3a
 800b128:	d1f4      	bne.n	800b114 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	2b3a      	cmp	r3, #58	; 0x3a
 800b130:	d11c      	bne.n	800b16c <get_ldnumber+0x76>
			tp = *path;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	1c5a      	adds	r2, r3, #1
 800b13c:	60fa      	str	r2, [r7, #12]
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	3b30      	subs	r3, #48	; 0x30
 800b142:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	2b09      	cmp	r3, #9
 800b148:	d80e      	bhi.n	800b168 <get_ldnumber+0x72>
 800b14a:	68fa      	ldr	r2, [r7, #12]
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	429a      	cmp	r2, r3
 800b150:	d10a      	bne.n	800b168 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d107      	bne.n	800b168 <get_ldnumber+0x72>
					vol = (int)i;
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	3301      	adds	r3, #1
 800b160:	617b      	str	r3, [r7, #20]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	697a      	ldr	r2, [r7, #20]
 800b166:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	e002      	b.n	800b172 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b16c:	2300      	movs	r3, #0
 800b16e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b170:	693b      	ldr	r3, [r7, #16]
}
 800b172:	4618      	mov	r0, r3
 800b174:	371c      	adds	r7, #28
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr
	...

0800b180 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b082      	sub	sp, #8
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	70da      	strb	r2, [r3, #3]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b196:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b198:	6839      	ldr	r1, [r7, #0]
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f7fe fcfc 	bl	8009b98 <move_window>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d001      	beq.n	800b1aa <check_fs+0x2a>
 800b1a6:	2304      	movs	r3, #4
 800b1a8:	e038      	b.n	800b21c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	3334      	adds	r3, #52	; 0x34
 800b1ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7fe fa40 	bl	8009638 <ld_word>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d001      	beq.n	800b1c8 <check_fs+0x48>
 800b1c4:	2303      	movs	r3, #3
 800b1c6:	e029      	b.n	800b21c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b1ce:	2be9      	cmp	r3, #233	; 0xe9
 800b1d0:	d009      	beq.n	800b1e6 <check_fs+0x66>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b1d8:	2beb      	cmp	r3, #235	; 0xeb
 800b1da:	d11e      	bne.n	800b21a <check_fs+0x9a>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b1e2:	2b90      	cmp	r3, #144	; 0x90
 800b1e4:	d119      	bne.n	800b21a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	3334      	adds	r3, #52	; 0x34
 800b1ea:	3336      	adds	r3, #54	; 0x36
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7fe fa3b 	bl	8009668 <ld_dword>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b1f8:	4a0a      	ldr	r2, [pc, #40]	; (800b224 <check_fs+0xa4>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d101      	bne.n	800b202 <check_fs+0x82>
 800b1fe:	2300      	movs	r3, #0
 800b200:	e00c      	b.n	800b21c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	3334      	adds	r3, #52	; 0x34
 800b206:	3352      	adds	r3, #82	; 0x52
 800b208:	4618      	mov	r0, r3
 800b20a:	f7fe fa2d 	bl	8009668 <ld_dword>
 800b20e:	4603      	mov	r3, r0
 800b210:	4a05      	ldr	r2, [pc, #20]	; (800b228 <check_fs+0xa8>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d101      	bne.n	800b21a <check_fs+0x9a>
 800b216:	2300      	movs	r3, #0
 800b218:	e000      	b.n	800b21c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b21a:	2302      	movs	r3, #2
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3708      	adds	r7, #8
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}
 800b224:	00544146 	.word	0x00544146
 800b228:	33544146 	.word	0x33544146

0800b22c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b096      	sub	sp, #88	; 0x58
 800b230:	af00      	add	r7, sp, #0
 800b232:	60f8      	str	r0, [r7, #12]
 800b234:	60b9      	str	r1, [r7, #8]
 800b236:	4613      	mov	r3, r2
 800b238:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	2200      	movs	r2, #0
 800b23e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b240:	68f8      	ldr	r0, [r7, #12]
 800b242:	f7ff ff58 	bl	800b0f6 <get_ldnumber>
 800b246:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	da01      	bge.n	800b252 <find_volume+0x26>
 800b24e:	230b      	movs	r3, #11
 800b250:	e22d      	b.n	800b6ae <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b252:	4aa1      	ldr	r2, [pc, #644]	; (800b4d8 <find_volume+0x2ac>)
 800b254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b25a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d101      	bne.n	800b266 <find_volume+0x3a>
 800b262:	230c      	movs	r3, #12
 800b264:	e223      	b.n	800b6ae <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b26a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b26c:	79fb      	ldrb	r3, [r7, #7]
 800b26e:	f023 0301 	bic.w	r3, r3, #1
 800b272:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d01a      	beq.n	800b2b2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b27e:	785b      	ldrb	r3, [r3, #1]
 800b280:	4618      	mov	r0, r3
 800b282:	f7fe f93b 	bl	80094fc <disk_status>
 800b286:	4603      	mov	r3, r0
 800b288:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b28c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b290:	f003 0301 	and.w	r3, r3, #1
 800b294:	2b00      	cmp	r3, #0
 800b296:	d10c      	bne.n	800b2b2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b298:	79fb      	ldrb	r3, [r7, #7]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d007      	beq.n	800b2ae <find_volume+0x82>
 800b29e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b2a2:	f003 0304 	and.w	r3, r3, #4
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d001      	beq.n	800b2ae <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b2aa:	230a      	movs	r3, #10
 800b2ac:	e1ff      	b.n	800b6ae <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	e1fd      	b.n	800b6ae <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b2b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2ba:	b2da      	uxtb	r2, r3
 800b2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2be:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c2:	785b      	ldrb	r3, [r3, #1]
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7fe f933 	bl	8009530 <disk_initialize>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b2d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b2d4:	f003 0301 	and.w	r3, r3, #1
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d001      	beq.n	800b2e0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b2dc:	2303      	movs	r3, #3
 800b2de:	e1e6      	b.n	800b6ae <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b2e0:	79fb      	ldrb	r3, [r7, #7]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d007      	beq.n	800b2f6 <find_volume+0xca>
 800b2e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b2ea:	f003 0304 	and.w	r3, r3, #4
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d001      	beq.n	800b2f6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b2f2:	230a      	movs	r3, #10
 800b2f4:	e1db      	b.n	800b6ae <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b2fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b2fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b2fe:	f7ff ff3f 	bl	800b180 <check_fs>
 800b302:	4603      	mov	r3, r0
 800b304:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b308:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b30c:	2b02      	cmp	r3, #2
 800b30e:	d149      	bne.n	800b3a4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b310:	2300      	movs	r3, #0
 800b312:	643b      	str	r3, [r7, #64]	; 0x40
 800b314:	e01e      	b.n	800b354 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b318:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b31c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b31e:	011b      	lsls	r3, r3, #4
 800b320:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b324:	4413      	add	r3, r2
 800b326:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32a:	3304      	adds	r3, #4
 800b32c:	781b      	ldrb	r3, [r3, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d006      	beq.n	800b340 <find_volume+0x114>
 800b332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b334:	3308      	adds	r3, #8
 800b336:	4618      	mov	r0, r3
 800b338:	f7fe f996 	bl	8009668 <ld_dword>
 800b33c:	4602      	mov	r2, r0
 800b33e:	e000      	b.n	800b342 <find_volume+0x116>
 800b340:	2200      	movs	r2, #0
 800b342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	3358      	adds	r3, #88	; 0x58
 800b348:	443b      	add	r3, r7
 800b34a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b34e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b350:	3301      	adds	r3, #1
 800b352:	643b      	str	r3, [r7, #64]	; 0x40
 800b354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b356:	2b03      	cmp	r3, #3
 800b358:	d9dd      	bls.n	800b316 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b35a:	2300      	movs	r3, #0
 800b35c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b35e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b360:	2b00      	cmp	r3, #0
 800b362:	d002      	beq.n	800b36a <find_volume+0x13e>
 800b364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b366:	3b01      	subs	r3, #1
 800b368:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b36a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b36c:	009b      	lsls	r3, r3, #2
 800b36e:	3358      	adds	r3, #88	; 0x58
 800b370:	443b      	add	r3, r7
 800b372:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b376:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d005      	beq.n	800b38a <find_volume+0x15e>
 800b37e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b380:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b382:	f7ff fefd 	bl	800b180 <check_fs>
 800b386:	4603      	mov	r3, r0
 800b388:	e000      	b.n	800b38c <find_volume+0x160>
 800b38a:	2303      	movs	r3, #3
 800b38c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b390:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b394:	2b01      	cmp	r3, #1
 800b396:	d905      	bls.n	800b3a4 <find_volume+0x178>
 800b398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b39a:	3301      	adds	r3, #1
 800b39c:	643b      	str	r3, [r7, #64]	; 0x40
 800b39e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3a0:	2b03      	cmp	r3, #3
 800b3a2:	d9e2      	bls.n	800b36a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b3a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3a8:	2b04      	cmp	r3, #4
 800b3aa:	d101      	bne.n	800b3b0 <find_volume+0x184>
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	e17e      	b.n	800b6ae <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b3b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d901      	bls.n	800b3bc <find_volume+0x190>
 800b3b8:	230d      	movs	r3, #13
 800b3ba:	e178      	b.n	800b6ae <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3be:	3334      	adds	r3, #52	; 0x34
 800b3c0:	330b      	adds	r3, #11
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7fe f938 	bl	8009638 <ld_word>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3ce:	d001      	beq.n	800b3d4 <find_volume+0x1a8>
 800b3d0:	230d      	movs	r3, #13
 800b3d2:	e16c      	b.n	800b6ae <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d6:	3334      	adds	r3, #52	; 0x34
 800b3d8:	3316      	adds	r3, #22
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7fe f92c 	bl	8009638 <ld_word>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b3e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d106      	bne.n	800b3f8 <find_volume+0x1cc>
 800b3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ec:	3334      	adds	r3, #52	; 0x34
 800b3ee:	3324      	adds	r3, #36	; 0x24
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f7fe f939 	bl	8009668 <ld_dword>
 800b3f6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b3fc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b400:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b406:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40a:	789b      	ldrb	r3, [r3, #2]
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	d005      	beq.n	800b41c <find_volume+0x1f0>
 800b410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b412:	789b      	ldrb	r3, [r3, #2]
 800b414:	2b02      	cmp	r3, #2
 800b416:	d001      	beq.n	800b41c <find_volume+0x1f0>
 800b418:	230d      	movs	r3, #13
 800b41a:	e148      	b.n	800b6ae <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b41e:	789b      	ldrb	r3, [r3, #2]
 800b420:	461a      	mov	r2, r3
 800b422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b424:	fb02 f303 	mul.w	r3, r2, r3
 800b428:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b42c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b430:	b29a      	uxth	r2, r3
 800b432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b434:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b438:	895b      	ldrh	r3, [r3, #10]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d008      	beq.n	800b450 <find_volume+0x224>
 800b43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b440:	895b      	ldrh	r3, [r3, #10]
 800b442:	461a      	mov	r2, r3
 800b444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b446:	895b      	ldrh	r3, [r3, #10]
 800b448:	3b01      	subs	r3, #1
 800b44a:	4013      	ands	r3, r2
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d001      	beq.n	800b454 <find_volume+0x228>
 800b450:	230d      	movs	r3, #13
 800b452:	e12c      	b.n	800b6ae <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b456:	3334      	adds	r3, #52	; 0x34
 800b458:	3311      	adds	r3, #17
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7fe f8ec 	bl	8009638 <ld_word>
 800b460:	4603      	mov	r3, r0
 800b462:	461a      	mov	r2, r3
 800b464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b466:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b46a:	891b      	ldrh	r3, [r3, #8]
 800b46c:	f003 030f 	and.w	r3, r3, #15
 800b470:	b29b      	uxth	r3, r3
 800b472:	2b00      	cmp	r3, #0
 800b474:	d001      	beq.n	800b47a <find_volume+0x24e>
 800b476:	230d      	movs	r3, #13
 800b478:	e119      	b.n	800b6ae <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b47c:	3334      	adds	r3, #52	; 0x34
 800b47e:	3313      	adds	r3, #19
 800b480:	4618      	mov	r0, r3
 800b482:	f7fe f8d9 	bl	8009638 <ld_word>
 800b486:	4603      	mov	r3, r0
 800b488:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b48a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d106      	bne.n	800b49e <find_volume+0x272>
 800b490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b492:	3334      	adds	r3, #52	; 0x34
 800b494:	3320      	adds	r3, #32
 800b496:	4618      	mov	r0, r3
 800b498:	f7fe f8e6 	bl	8009668 <ld_dword>
 800b49c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a0:	3334      	adds	r3, #52	; 0x34
 800b4a2:	330e      	adds	r3, #14
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7fe f8c7 	bl	8009638 <ld_word>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b4ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d101      	bne.n	800b4b8 <find_volume+0x28c>
 800b4b4:	230d      	movs	r3, #13
 800b4b6:	e0fa      	b.n	800b6ae <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b4b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b4ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4bc:	4413      	add	r3, r2
 800b4be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4c0:	8912      	ldrh	r2, [r2, #8]
 800b4c2:	0912      	lsrs	r2, r2, #4
 800b4c4:	b292      	uxth	r2, r2
 800b4c6:	4413      	add	r3, r2
 800b4c8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b4ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ce:	429a      	cmp	r2, r3
 800b4d0:	d204      	bcs.n	800b4dc <find_volume+0x2b0>
 800b4d2:	230d      	movs	r3, #13
 800b4d4:	e0eb      	b.n	800b6ae <find_volume+0x482>
 800b4d6:	bf00      	nop
 800b4d8:	20034538 	.word	0x20034538
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b4dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e0:	1ad3      	subs	r3, r2, r3
 800b4e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4e4:	8952      	ldrh	r2, [r2, #10]
 800b4e6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4ea:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d101      	bne.n	800b4f6 <find_volume+0x2ca>
 800b4f2:	230d      	movs	r3, #13
 800b4f4:	e0db      	b.n	800b6ae <find_volume+0x482>
		fmt = FS_FAT32;
 800b4f6:	2303      	movs	r3, #3
 800b4f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fe:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b502:	4293      	cmp	r3, r2
 800b504:	d802      	bhi.n	800b50c <find_volume+0x2e0>
 800b506:	2302      	movs	r3, #2
 800b508:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b512:	4293      	cmp	r3, r2
 800b514:	d802      	bhi.n	800b51c <find_volume+0x2f0>
 800b516:	2301      	movs	r3, #1
 800b518:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b51e:	1c9a      	adds	r2, r3, #2
 800b520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b522:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800b524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b526:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b528:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b52a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b52c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b52e:	441a      	add	r2, r3
 800b530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b532:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800b534:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b538:	441a      	add	r2, r3
 800b53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b53c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800b53e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b542:	2b03      	cmp	r3, #3
 800b544:	d11e      	bne.n	800b584 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b548:	3334      	adds	r3, #52	; 0x34
 800b54a:	332a      	adds	r3, #42	; 0x2a
 800b54c:	4618      	mov	r0, r3
 800b54e:	f7fe f873 	bl	8009638 <ld_word>
 800b552:	4603      	mov	r3, r0
 800b554:	2b00      	cmp	r3, #0
 800b556:	d001      	beq.n	800b55c <find_volume+0x330>
 800b558:	230d      	movs	r3, #13
 800b55a:	e0a8      	b.n	800b6ae <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55e:	891b      	ldrh	r3, [r3, #8]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d001      	beq.n	800b568 <find_volume+0x33c>
 800b564:	230d      	movs	r3, #13
 800b566:	e0a2      	b.n	800b6ae <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b56a:	3334      	adds	r3, #52	; 0x34
 800b56c:	332c      	adds	r3, #44	; 0x2c
 800b56e:	4618      	mov	r0, r3
 800b570:	f7fe f87a 	bl	8009668 <ld_dword>
 800b574:	4602      	mov	r2, r0
 800b576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b578:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b57c:	699b      	ldr	r3, [r3, #24]
 800b57e:	009b      	lsls	r3, r3, #2
 800b580:	647b      	str	r3, [r7, #68]	; 0x44
 800b582:	e01f      	b.n	800b5c4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b586:	891b      	ldrh	r3, [r3, #8]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d101      	bne.n	800b590 <find_volume+0x364>
 800b58c:	230d      	movs	r3, #13
 800b58e:	e08e      	b.n	800b6ae <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b592:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b596:	441a      	add	r2, r3
 800b598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b59a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b59c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b5a0:	2b02      	cmp	r3, #2
 800b5a2:	d103      	bne.n	800b5ac <find_volume+0x380>
 800b5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a6:	699b      	ldr	r3, [r3, #24]
 800b5a8:	005b      	lsls	r3, r3, #1
 800b5aa:	e00a      	b.n	800b5c2 <find_volume+0x396>
 800b5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ae:	699a      	ldr	r2, [r3, #24]
 800b5b0:	4613      	mov	r3, r2
 800b5b2:	005b      	lsls	r3, r3, #1
 800b5b4:	4413      	add	r3, r2
 800b5b6:	085a      	lsrs	r2, r3, #1
 800b5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ba:	699b      	ldr	r3, [r3, #24]
 800b5bc:	f003 0301 	and.w	r3, r3, #1
 800b5c0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b5c2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c6:	69da      	ldr	r2, [r3, #28]
 800b5c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5ca:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b5ce:	0a5b      	lsrs	r3, r3, #9
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d201      	bcs.n	800b5d8 <find_volume+0x3ac>
 800b5d4:	230d      	movs	r3, #13
 800b5d6:	e06a      	b.n	800b6ae <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b5de:	615a      	str	r2, [r3, #20]
 800b5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e2:	695a      	ldr	r2, [r3, #20]
 800b5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800b5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ea:	2280      	movs	r2, #128	; 0x80
 800b5ec:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b5ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b5f2:	2b03      	cmp	r3, #3
 800b5f4:	d149      	bne.n	800b68a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f8:	3334      	adds	r3, #52	; 0x34
 800b5fa:	3330      	adds	r3, #48	; 0x30
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7fe f81b 	bl	8009638 <ld_word>
 800b602:	4603      	mov	r3, r0
 800b604:	2b01      	cmp	r3, #1
 800b606:	d140      	bne.n	800b68a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b60a:	3301      	adds	r3, #1
 800b60c:	4619      	mov	r1, r3
 800b60e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b610:	f7fe fac2 	bl	8009b98 <move_window>
 800b614:	4603      	mov	r3, r0
 800b616:	2b00      	cmp	r3, #0
 800b618:	d137      	bne.n	800b68a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800b61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b61c:	2200      	movs	r2, #0
 800b61e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b622:	3334      	adds	r3, #52	; 0x34
 800b624:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b628:	4618      	mov	r0, r3
 800b62a:	f7fe f805 	bl	8009638 <ld_word>
 800b62e:	4603      	mov	r3, r0
 800b630:	461a      	mov	r2, r3
 800b632:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b636:	429a      	cmp	r2, r3
 800b638:	d127      	bne.n	800b68a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63c:	3334      	adds	r3, #52	; 0x34
 800b63e:	4618      	mov	r0, r3
 800b640:	f7fe f812 	bl	8009668 <ld_dword>
 800b644:	4603      	mov	r3, r0
 800b646:	4a1c      	ldr	r2, [pc, #112]	; (800b6b8 <find_volume+0x48c>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d11e      	bne.n	800b68a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b64e:	3334      	adds	r3, #52	; 0x34
 800b650:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b654:	4618      	mov	r0, r3
 800b656:	f7fe f807 	bl	8009668 <ld_dword>
 800b65a:	4603      	mov	r3, r0
 800b65c:	4a17      	ldr	r2, [pc, #92]	; (800b6bc <find_volume+0x490>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d113      	bne.n	800b68a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b664:	3334      	adds	r3, #52	; 0x34
 800b666:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b66a:	4618      	mov	r0, r3
 800b66c:	f7fd fffc 	bl	8009668 <ld_dword>
 800b670:	4602      	mov	r2, r0
 800b672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b674:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b678:	3334      	adds	r3, #52	; 0x34
 800b67a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b67e:	4618      	mov	r0, r3
 800b680:	f7fd fff2 	bl	8009668 <ld_dword>
 800b684:	4602      	mov	r2, r0
 800b686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b688:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b690:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b692:	4b0b      	ldr	r3, [pc, #44]	; (800b6c0 <find_volume+0x494>)
 800b694:	881b      	ldrh	r3, [r3, #0]
 800b696:	3301      	adds	r3, #1
 800b698:	b29a      	uxth	r2, r3
 800b69a:	4b09      	ldr	r3, [pc, #36]	; (800b6c0 <find_volume+0x494>)
 800b69c:	801a      	strh	r2, [r3, #0]
 800b69e:	4b08      	ldr	r3, [pc, #32]	; (800b6c0 <find_volume+0x494>)
 800b6a0:	881a      	ldrh	r2, [r3, #0]
 800b6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b6a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b6a8:	f7fe fa0e 	bl	8009ac8 <clear_lock>
#endif
	return FR_OK;
 800b6ac:	2300      	movs	r3, #0
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3758      	adds	r7, #88	; 0x58
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	41615252 	.word	0x41615252
 800b6bc:	61417272 	.word	0x61417272
 800b6c0:	2003453c 	.word	0x2003453c

0800b6c4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b084      	sub	sp, #16
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b6ce:	2309      	movs	r3, #9
 800b6d0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d01c      	beq.n	800b712 <validate+0x4e>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d018      	beq.n	800b712 <validate+0x4e>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d013      	beq.n	800b712 <validate+0x4e>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	889a      	ldrh	r2, [r3, #4]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	88db      	ldrh	r3, [r3, #6]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d10c      	bne.n	800b712 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	785b      	ldrb	r3, [r3, #1]
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7fd fefc 	bl	80094fc <disk_status>
 800b704:	4603      	mov	r3, r0
 800b706:	f003 0301 	and.w	r3, r3, #1
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d101      	bne.n	800b712 <validate+0x4e>
			res = FR_OK;
 800b70e:	2300      	movs	r3, #0
 800b710:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b712:	7bfb      	ldrb	r3, [r7, #15]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d102      	bne.n	800b71e <validate+0x5a>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	e000      	b.n	800b720 <validate+0x5c>
 800b71e:	2300      	movs	r3, #0
 800b720:	683a      	ldr	r2, [r7, #0]
 800b722:	6013      	str	r3, [r2, #0]
	return res;
 800b724:	7bfb      	ldrb	r3, [r7, #15]
}
 800b726:	4618      	mov	r0, r3
 800b728:	3710      	adds	r7, #16
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
	...

0800b730 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b088      	sub	sp, #32
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	4613      	mov	r3, r2
 800b73c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b742:	f107 0310 	add.w	r3, r7, #16
 800b746:	4618      	mov	r0, r3
 800b748:	f7ff fcd5 	bl	800b0f6 <get_ldnumber>
 800b74c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b74e:	69fb      	ldr	r3, [r7, #28]
 800b750:	2b00      	cmp	r3, #0
 800b752:	da01      	bge.n	800b758 <f_mount+0x28>
 800b754:	230b      	movs	r3, #11
 800b756:	e02b      	b.n	800b7b0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b758:	4a17      	ldr	r2, [pc, #92]	; (800b7b8 <f_mount+0x88>)
 800b75a:	69fb      	ldr	r3, [r7, #28]
 800b75c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b760:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b762:	69bb      	ldr	r3, [r7, #24]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d005      	beq.n	800b774 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b768:	69b8      	ldr	r0, [r7, #24]
 800b76a:	f7fe f9ad 	bl	8009ac8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b76e:	69bb      	ldr	r3, [r7, #24]
 800b770:	2200      	movs	r2, #0
 800b772:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d002      	beq.n	800b780 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2200      	movs	r2, #0
 800b77e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b780:	68fa      	ldr	r2, [r7, #12]
 800b782:	490d      	ldr	r1, [pc, #52]	; (800b7b8 <f_mount+0x88>)
 800b784:	69fb      	ldr	r3, [r7, #28]
 800b786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d002      	beq.n	800b796 <f_mount+0x66>
 800b790:	79fb      	ldrb	r3, [r7, #7]
 800b792:	2b01      	cmp	r3, #1
 800b794:	d001      	beq.n	800b79a <f_mount+0x6a>
 800b796:	2300      	movs	r3, #0
 800b798:	e00a      	b.n	800b7b0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b79a:	f107 010c 	add.w	r1, r7, #12
 800b79e:	f107 0308 	add.w	r3, r7, #8
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f7ff fd41 	bl	800b22c <find_volume>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b7ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3720      	adds	r7, #32
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}
 800b7b8:	20034538 	.word	0x20034538

0800b7bc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b7c8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b7cc:	6018      	str	r0, [r3, #0]
 800b7ce:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b7d2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800b7d6:	6019      	str	r1, [r3, #0]
 800b7d8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b7dc:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b7e0:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b7e2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b7e6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d101      	bne.n	800b7f4 <f_open+0x38>
 800b7f0:	2309      	movs	r3, #9
 800b7f2:	e295      	b.n	800bd20 <f_open+0x564>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b7f4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b7f8:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b7fc:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800b800:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800b804:	7812      	ldrb	r2, [r2, #0]
 800b806:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800b80a:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800b80c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b810:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b814:	781a      	ldrb	r2, [r3, #0]
 800b816:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800b81a:	f107 0308 	add.w	r3, r7, #8
 800b81e:	4618      	mov	r0, r3
 800b820:	f7ff fd04 	bl	800b22c <find_volume>
 800b824:	4603      	mov	r3, r0
 800b826:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800b82a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800b82e:	2b00      	cmp	r3, #0
 800b830:	f040 8269 	bne.w	800bd06 <f_open+0x54a>
		dj.obj.fs = fs;
 800b834:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b838:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 800b83c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b840:	f107 0214 	add.w	r2, r7, #20
 800b844:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800b846:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b84a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800b84e:	681a      	ldr	r2, [r3, #0]
 800b850:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800b854:	4611      	mov	r1, r2
 800b856:	4618      	mov	r0, r3
 800b858:	f7ff fbdc 	bl	800b014 <follow_path>
 800b85c:	4603      	mov	r3, r0
 800b85e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b862:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800b866:	2b00      	cmp	r3, #0
 800b868:	d11e      	bne.n	800b8a8 <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b86a:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800b86e:	b25b      	sxtb	r3, r3
 800b870:	2b00      	cmp	r3, #0
 800b872:	da03      	bge.n	800b87c <f_open+0xc0>
				res = FR_INVALID_NAME;
 800b874:	2306      	movs	r3, #6
 800b876:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800b87a:	e015      	b.n	800b8a8 <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b87c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b880:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	f023 0301 	bic.w	r3, r3, #1
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	bf14      	ite	ne
 800b88e:	2301      	movne	r3, #1
 800b890:	2300      	moveq	r3, #0
 800b892:	b2db      	uxtb	r3, r3
 800b894:	461a      	mov	r2, r3
 800b896:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800b89a:	4611      	mov	r1, r2
 800b89c:	4618      	mov	r0, r3
 800b89e:	f7fd ffcb 	bl	8009838 <chk_lock>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b8a8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b8ac:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	f003 031c 	and.w	r3, r3, #28
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	f000 80a7 	beq.w	800ba0a <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 800b8bc:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d01f      	beq.n	800b904 <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b8c4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800b8c8:	2b04      	cmp	r3, #4
 800b8ca:	d10e      	bne.n	800b8ea <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b8cc:	f7fe f810 	bl	80098f0 <enq_lock>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d006      	beq.n	800b8e4 <f_open+0x128>
 800b8d6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7ff f8ea 	bl	800aab4 <dir_register>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	e000      	b.n	800b8e6 <f_open+0x12a>
 800b8e4:	2312      	movs	r3, #18
 800b8e6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b8ea:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b8ee:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b8f2:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800b8f6:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800b8fa:	7812      	ldrb	r2, [r2, #0]
 800b8fc:	f042 0208 	orr.w	r2, r2, #8
 800b900:	701a      	strb	r2, [r3, #0]
 800b902:	e015      	b.n	800b930 <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b904:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800b908:	f003 0311 	and.w	r3, r3, #17
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d003      	beq.n	800b918 <f_open+0x15c>
					res = FR_DENIED;
 800b910:	2307      	movs	r3, #7
 800b912:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800b916:	e00b      	b.n	800b930 <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b918:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b91c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	f003 0304 	and.w	r3, r3, #4
 800b926:	2b00      	cmp	r3, #0
 800b928:	d002      	beq.n	800b930 <f_open+0x174>
 800b92a:	2308      	movs	r3, #8
 800b92c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b930:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800b934:	2b00      	cmp	r3, #0
 800b936:	f040 8088 	bne.w	800ba4a <f_open+0x28e>
 800b93a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b93e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	f003 0308 	and.w	r3, r3, #8
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d07e      	beq.n	800ba4a <f_open+0x28e>
				dw = GET_FATTIME();
 800b94c:	f7fb fee8 	bl	8007720 <get_fattime>
 800b950:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b954:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800b958:	330e      	adds	r3, #14
 800b95a:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800b95e:	4618      	mov	r0, r3
 800b960:	f7fd fec0 	bl	80096e4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b964:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800b968:	3316      	adds	r3, #22
 800b96a:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800b96e:	4618      	mov	r0, r3
 800b970:	f7fd feb8 	bl	80096e4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b974:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800b978:	330b      	adds	r3, #11
 800b97a:	2220      	movs	r2, #32
 800b97c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b97e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b982:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800b986:	4611      	mov	r1, r2
 800b988:	4618      	mov	r0, r3
 800b98a:	f7fe fe0c 	bl	800a5a6 <ld_clust>
 800b98e:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b992:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b996:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 800b99a:	2200      	movs	r2, #0
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7fe fe21 	bl	800a5e4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b9a2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800b9a6:	331c      	adds	r3, #28
 800b9a8:	2100      	movs	r1, #0
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7fd fe9a 	bl	80096e4 <st_dword>
					fs->wflag = 1;
 800b9b0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b9b8:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d044      	beq.n	800ba4a <f_open+0x28e>
						dw = fs->winsect;
 800b9c0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b9c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9c6:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800b9ca:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7fe fb2e 	bl	800a036 <remove_chain>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 800b9e0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d130      	bne.n	800ba4a <f_open+0x28e>
							res = move_window(fs, dw);
 800b9e8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800b9ec:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f7fe f8d1 	bl	8009b98 <move_window>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b9fc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ba00:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800ba04:	3a01      	subs	r2, #1
 800ba06:	611a      	str	r2, [r3, #16]
 800ba08:	e01f      	b.n	800ba4a <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ba0a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d11b      	bne.n	800ba4a <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ba12:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800ba16:	f003 0310 	and.w	r3, r3, #16
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d003      	beq.n	800ba26 <f_open+0x26a>
					res = FR_NO_FILE;
 800ba1e:	2304      	movs	r3, #4
 800ba20:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800ba24:	e011      	b.n	800ba4a <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ba26:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ba2a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800ba2e:	781b      	ldrb	r3, [r3, #0]
 800ba30:	f003 0302 	and.w	r3, r3, #2
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d008      	beq.n	800ba4a <f_open+0x28e>
 800ba38:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800ba3c:	f003 0301 	and.w	r3, r3, #1
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d002      	beq.n	800ba4a <f_open+0x28e>
						res = FR_DENIED;
 800ba44:	2307      	movs	r3, #7
 800ba46:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800ba4a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d14a      	bne.n	800bae8 <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ba52:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ba56:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	f003 0308 	and.w	r3, r3, #8
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d00b      	beq.n	800ba7c <f_open+0x2c0>
				mode |= FA_MODIFIED;
 800ba64:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ba68:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800ba6c:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800ba70:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800ba74:	7812      	ldrb	r2, [r2, #0]
 800ba76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba7a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ba7c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ba80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba82:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ba86:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ba8e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800ba92:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ba96:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ba9e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800baa2:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	f023 0301 	bic.w	r3, r3, #1
 800baac:	2b00      	cmp	r3, #0
 800baae:	bf14      	ite	ne
 800bab0:	2301      	movne	r3, #1
 800bab2:	2300      	moveq	r3, #0
 800bab4:	b2db      	uxtb	r3, r3
 800bab6:	461a      	mov	r2, r3
 800bab8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800babc:	4611      	mov	r1, r2
 800babe:	4618      	mov	r0, r3
 800bac0:	f7fd ff38 	bl	8009934 <inc_lock>
 800bac4:	4602      	mov	r2, r0
 800bac6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800baca:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bad2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bad6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	691b      	ldr	r3, [r3, #16]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d102      	bne.n	800bae8 <f_open+0x32c>
 800bae2:	2302      	movs	r3, #2
 800bae4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bae8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800baec:	2b00      	cmp	r3, #0
 800baee:	f040 810a 	bne.w	800bd06 <f_open+0x54a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800baf2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800baf6:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800bafa:	4611      	mov	r1, r2
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7fe fd52 	bl	800a5a6 <ld_clust>
 800bb02:	4602      	mov	r2, r0
 800bb04:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bb08:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800bb10:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800bb14:	331c      	adds	r3, #28
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7fd fda6 	bl	8009668 <ld_dword>
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bb22:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800bb2a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bb2e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	2200      	movs	r2, #0
 800bb36:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bb38:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800bb3c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bb40:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800bb48:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bb4c:	88da      	ldrh	r2, [r3, #6]
 800bb4e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bb52:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800bb5a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bb5e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800bb68:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800bb6c:	7812      	ldrb	r2, [r2, #0]
 800bb6e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800bb70:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bb74:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800bb7e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bb82:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bb8c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bb90:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	2200      	movs	r2, #0
 800bb98:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bb9a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bb9e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	3330      	adds	r3, #48	; 0x30
 800bba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbaa:	2100      	movs	r1, #0
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7fd fde6 	bl	800977e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800bbb2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bbb6:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	f003 0320 	and.w	r3, r3, #32
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	f000 80a0 	beq.w	800bd06 <f_open+0x54a>
 800bbc6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bbca:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	68db      	ldr	r3, [r3, #12]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	f000 8097 	beq.w	800bd06 <f_open+0x54a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bbd8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bbdc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	68da      	ldr	r2, [r3, #12]
 800bbe4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bbe8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800bbf0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bbf4:	895b      	ldrh	r3, [r3, #10]
 800bbf6:	025b      	lsls	r3, r3, #9
 800bbf8:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bbfc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bc00:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	689b      	ldr	r3, [r3, #8]
 800bc08:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bc0c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bc10:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	68db      	ldr	r3, [r3, #12]
 800bc18:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800bc1c:	e021      	b.n	800bc62 <f_open+0x4a6>
					clst = get_fat(&fp->obj, clst);
 800bc1e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bc22:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f7fe f86e 	bl	8009d0e <get_fat>
 800bc32:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800bc36:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800bc3a:	2b01      	cmp	r3, #1
 800bc3c:	d802      	bhi.n	800bc44 <f_open+0x488>
 800bc3e:	2302      	movs	r3, #2
 800bc40:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bc44:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800bc48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc4c:	d102      	bne.n	800bc54 <f_open+0x498>
 800bc4e:	2301      	movs	r3, #1
 800bc50:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bc54:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800bc58:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bc5c:	1ad3      	subs	r3, r2, r3
 800bc5e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800bc62:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d105      	bne.n	800bc76 <f_open+0x4ba>
 800bc6a:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800bc6e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d8d3      	bhi.n	800bc1e <f_open+0x462>
				}
				fp->clust = clst;
 800bc76:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bc7a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800bc84:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bc86:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d13b      	bne.n	800bd06 <f_open+0x54a>
 800bc8e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800bc92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d035      	beq.n	800bd06 <f_open+0x54a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bc9a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bc9e:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7fe f814 	bl	8009cd0 <clust2sect>
 800bca8:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 800bcac:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d103      	bne.n	800bcbc <f_open+0x500>
						res = FR_INT_ERR;
 800bcb4:	2302      	movs	r3, #2
 800bcb6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800bcba:	e024      	b.n	800bd06 <f_open+0x54a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bcbc:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800bcc0:	0a5a      	lsrs	r2, r3, #9
 800bcc2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800bcc6:	441a      	add	r2, r3
 800bcc8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bccc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bcd4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bcd8:	7858      	ldrb	r0, [r3, #1]
 800bcda:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bcde:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bce8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bcec:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	6a1a      	ldr	r2, [r3, #32]
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	f7fd fc41 	bl	800957c <disk_read>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d002      	beq.n	800bd06 <f_open+0x54a>
 800bd00:	2301      	movs	r3, #1
 800bd02:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bd06:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d006      	beq.n	800bd1c <f_open+0x560>
 800bd0e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bd12:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bd1c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	f507 771a 	add.w	r7, r7, #616	; 0x268
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}

0800bd2a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800bd2a:	b580      	push	{r7, lr}
 800bd2c:	b08e      	sub	sp, #56	; 0x38
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	60f8      	str	r0, [r7, #12]
 800bd32:	60b9      	str	r1, [r7, #8]
 800bd34:	607a      	str	r2, [r7, #4]
 800bd36:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	f107 0214 	add.w	r2, r7, #20
 800bd48:	4611      	mov	r1, r2
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f7ff fcba 	bl	800b6c4 <validate>
 800bd50:	4603      	mov	r3, r0
 800bd52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bd56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d107      	bne.n	800bd6e <f_read+0x44>
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	7d5b      	ldrb	r3, [r3, #21]
 800bd62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bd66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d002      	beq.n	800bd74 <f_read+0x4a>
 800bd6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd72:	e115      	b.n	800bfa0 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	7d1b      	ldrb	r3, [r3, #20]
 800bd78:	f003 0301 	and.w	r3, r3, #1
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d101      	bne.n	800bd84 <f_read+0x5a>
 800bd80:	2307      	movs	r3, #7
 800bd82:	e10d      	b.n	800bfa0 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	68da      	ldr	r2, [r3, #12]
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	699b      	ldr	r3, [r3, #24]
 800bd8c:	1ad3      	subs	r3, r2, r3
 800bd8e:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	6a3b      	ldr	r3, [r7, #32]
 800bd94:	429a      	cmp	r2, r3
 800bd96:	f240 80fe 	bls.w	800bf96 <f_read+0x26c>
 800bd9a:	6a3b      	ldr	r3, [r7, #32]
 800bd9c:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800bd9e:	e0fa      	b.n	800bf96 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	699b      	ldr	r3, [r3, #24]
 800bda4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	f040 80c6 	bne.w	800bf3a <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	699b      	ldr	r3, [r3, #24]
 800bdb2:	0a5b      	lsrs	r3, r3, #9
 800bdb4:	697a      	ldr	r2, [r7, #20]
 800bdb6:	8952      	ldrh	r2, [r2, #10]
 800bdb8:	3a01      	subs	r2, #1
 800bdba:	4013      	ands	r3, r2
 800bdbc:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800bdbe:	69fb      	ldr	r3, [r7, #28]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d12f      	bne.n	800be24 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	699b      	ldr	r3, [r3, #24]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d103      	bne.n	800bdd4 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	689b      	ldr	r3, [r3, #8]
 800bdd0:	633b      	str	r3, [r7, #48]	; 0x30
 800bdd2:	e013      	b.n	800bdfc <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d007      	beq.n	800bdec <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	699b      	ldr	r3, [r3, #24]
 800bde0:	4619      	mov	r1, r3
 800bde2:	68f8      	ldr	r0, [r7, #12]
 800bde4:	f7fe fa24 	bl	800a230 <clmt_clust>
 800bde8:	6338      	str	r0, [r7, #48]	; 0x30
 800bdea:	e007      	b.n	800bdfc <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800bdec:	68fa      	ldr	r2, [r7, #12]
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	69db      	ldr	r3, [r3, #28]
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	4610      	mov	r0, r2
 800bdf6:	f7fd ff8a 	bl	8009d0e <get_fat>
 800bdfa:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800bdfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdfe:	2b01      	cmp	r3, #1
 800be00:	d804      	bhi.n	800be0c <f_read+0xe2>
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2202      	movs	r2, #2
 800be06:	755a      	strb	r2, [r3, #21]
 800be08:	2302      	movs	r3, #2
 800be0a:	e0c9      	b.n	800bfa0 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800be0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be12:	d104      	bne.n	800be1e <f_read+0xf4>
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	2201      	movs	r2, #1
 800be18:	755a      	strb	r2, [r3, #21]
 800be1a:	2301      	movs	r3, #1
 800be1c:	e0c0      	b.n	800bfa0 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be22:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800be24:	697a      	ldr	r2, [r7, #20]
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	69db      	ldr	r3, [r3, #28]
 800be2a:	4619      	mov	r1, r3
 800be2c:	4610      	mov	r0, r2
 800be2e:	f7fd ff4f 	bl	8009cd0 <clust2sect>
 800be32:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800be34:	69bb      	ldr	r3, [r7, #24]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d104      	bne.n	800be44 <f_read+0x11a>
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2202      	movs	r2, #2
 800be3e:	755a      	strb	r2, [r3, #21]
 800be40:	2302      	movs	r3, #2
 800be42:	e0ad      	b.n	800bfa0 <f_read+0x276>
			sect += csect;
 800be44:	69ba      	ldr	r2, [r7, #24]
 800be46:	69fb      	ldr	r3, [r7, #28]
 800be48:	4413      	add	r3, r2
 800be4a:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	0a5b      	lsrs	r3, r3, #9
 800be50:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800be52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be54:	2b00      	cmp	r3, #0
 800be56:	d039      	beq.n	800becc <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800be58:	69fa      	ldr	r2, [r7, #28]
 800be5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5c:	4413      	add	r3, r2
 800be5e:	697a      	ldr	r2, [r7, #20]
 800be60:	8952      	ldrh	r2, [r2, #10]
 800be62:	4293      	cmp	r3, r2
 800be64:	d905      	bls.n	800be72 <f_read+0x148>
					cc = fs->csize - csect;
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	895b      	ldrh	r3, [r3, #10]
 800be6a:	461a      	mov	r2, r3
 800be6c:	69fb      	ldr	r3, [r7, #28]
 800be6e:	1ad3      	subs	r3, r2, r3
 800be70:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	7858      	ldrb	r0, [r3, #1]
 800be76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be78:	69ba      	ldr	r2, [r7, #24]
 800be7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be7c:	f7fd fb7e 	bl	800957c <disk_read>
 800be80:	4603      	mov	r3, r0
 800be82:	2b00      	cmp	r3, #0
 800be84:	d004      	beq.n	800be90 <f_read+0x166>
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2201      	movs	r2, #1
 800be8a:	755a      	strb	r2, [r3, #21]
 800be8c:	2301      	movs	r3, #1
 800be8e:	e087      	b.n	800bfa0 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	7d1b      	ldrb	r3, [r3, #20]
 800be94:	b25b      	sxtb	r3, r3
 800be96:	2b00      	cmp	r3, #0
 800be98:	da14      	bge.n	800bec4 <f_read+0x19a>
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	6a1a      	ldr	r2, [r3, #32]
 800be9e:	69bb      	ldr	r3, [r7, #24]
 800bea0:	1ad3      	subs	r3, r2, r3
 800bea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d90d      	bls.n	800bec4 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	6a1a      	ldr	r2, [r3, #32]
 800beac:	69bb      	ldr	r3, [r7, #24]
 800beae:	1ad3      	subs	r3, r2, r3
 800beb0:	025b      	lsls	r3, r3, #9
 800beb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beb4:	18d0      	adds	r0, r2, r3
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	3330      	adds	r3, #48	; 0x30
 800beba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bebe:	4619      	mov	r1, r3
 800bec0:	f7fd fc3c 	bl	800973c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800bec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec6:	025b      	lsls	r3, r3, #9
 800bec8:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800beca:	e050      	b.n	800bf6e <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	6a1b      	ldr	r3, [r3, #32]
 800bed0:	69ba      	ldr	r2, [r7, #24]
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d02e      	beq.n	800bf34 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	7d1b      	ldrb	r3, [r3, #20]
 800beda:	b25b      	sxtb	r3, r3
 800bedc:	2b00      	cmp	r3, #0
 800bede:	da18      	bge.n	800bf12 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	7858      	ldrb	r0, [r3, #1]
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	6a1a      	ldr	r2, [r3, #32]
 800beee:	2301      	movs	r3, #1
 800bef0:	f7fd fb64 	bl	80095bc <disk_write>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d004      	beq.n	800bf04 <f_read+0x1da>
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2201      	movs	r2, #1
 800befe:	755a      	strb	r2, [r3, #21]
 800bf00:	2301      	movs	r3, #1
 800bf02:	e04d      	b.n	800bfa0 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	7d1b      	ldrb	r3, [r3, #20]
 800bf08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf0c:	b2da      	uxtb	r2, r3
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	7858      	ldrb	r0, [r3, #1]
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	69ba      	ldr	r2, [r7, #24]
 800bf20:	f7fd fb2c 	bl	800957c <disk_read>
 800bf24:	4603      	mov	r3, r0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d004      	beq.n	800bf34 <f_read+0x20a>
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	755a      	strb	r2, [r3, #21]
 800bf30:	2301      	movs	r3, #1
 800bf32:	e035      	b.n	800bfa0 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	69ba      	ldr	r2, [r7, #24]
 800bf38:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	699b      	ldr	r3, [r3, #24]
 800bf3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf42:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bf46:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800bf48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d901      	bls.n	800bf54 <f_read+0x22a>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	699b      	ldr	r3, [r3, #24]
 800bf5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf62:	4413      	add	r3, r2
 800bf64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf66:	4619      	mov	r1, r3
 800bf68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf6a:	f7fd fbe7 	bl	800973c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800bf6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf72:	4413      	add	r3, r2
 800bf74:	627b      	str	r3, [r7, #36]	; 0x24
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	699a      	ldr	r2, [r3, #24]
 800bf7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf7c:	441a      	add	r2, r3
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	619a      	str	r2, [r3, #24]
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	681a      	ldr	r2, [r3, #0]
 800bf86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf88:	441a      	add	r2, r3
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	601a      	str	r2, [r3, #0]
 800bf8e:	687a      	ldr	r2, [r7, #4]
 800bf90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf92:	1ad3      	subs	r3, r2, r3
 800bf94:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	f47f af01 	bne.w	800bda0 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800bf9e:	2300      	movs	r3, #0
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3738      	adds	r7, #56	; 0x38
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b08c      	sub	sp, #48	; 0x30
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	60f8      	str	r0, [r7, #12]
 800bfb0:	60b9      	str	r1, [r7, #8]
 800bfb2:	607a      	str	r2, [r7, #4]
 800bfb4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	f107 0210 	add.w	r2, r7, #16
 800bfc6:	4611      	mov	r1, r2
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f7ff fb7b 	bl	800b6c4 <validate>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bfd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d107      	bne.n	800bfec <f_write+0x44>
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	7d5b      	ldrb	r3, [r3, #21]
 800bfe0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bfe4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d002      	beq.n	800bff2 <f_write+0x4a>
 800bfec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bff0:	e14b      	b.n	800c28a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	7d1b      	ldrb	r3, [r3, #20]
 800bff6:	f003 0302 	and.w	r3, r3, #2
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d101      	bne.n	800c002 <f_write+0x5a>
 800bffe:	2307      	movs	r3, #7
 800c000:	e143      	b.n	800c28a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	699a      	ldr	r2, [r3, #24]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	441a      	add	r2, r3
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	699b      	ldr	r3, [r3, #24]
 800c00e:	429a      	cmp	r2, r3
 800c010:	f080 812d 	bcs.w	800c26e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	699b      	ldr	r3, [r3, #24]
 800c018:	43db      	mvns	r3, r3
 800c01a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c01c:	e127      	b.n	800c26e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	699b      	ldr	r3, [r3, #24]
 800c022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c026:	2b00      	cmp	r3, #0
 800c028:	f040 80e3 	bne.w	800c1f2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	699b      	ldr	r3, [r3, #24]
 800c030:	0a5b      	lsrs	r3, r3, #9
 800c032:	693a      	ldr	r2, [r7, #16]
 800c034:	8952      	ldrh	r2, [r2, #10]
 800c036:	3a01      	subs	r2, #1
 800c038:	4013      	ands	r3, r2
 800c03a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c03c:	69bb      	ldr	r3, [r7, #24]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d143      	bne.n	800c0ca <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	699b      	ldr	r3, [r3, #24]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d10c      	bne.n	800c064 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	689b      	ldr	r3, [r3, #8]
 800c04e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c052:	2b00      	cmp	r3, #0
 800c054:	d11a      	bne.n	800c08c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2100      	movs	r1, #0
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7fe f850 	bl	800a100 <create_chain>
 800c060:	62b8      	str	r0, [r7, #40]	; 0x28
 800c062:	e013      	b.n	800c08c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d007      	beq.n	800c07c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	699b      	ldr	r3, [r3, #24]
 800c070:	4619      	mov	r1, r3
 800c072:	68f8      	ldr	r0, [r7, #12]
 800c074:	f7fe f8dc 	bl	800a230 <clmt_clust>
 800c078:	62b8      	str	r0, [r7, #40]	; 0x28
 800c07a:	e007      	b.n	800c08c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c07c:	68fa      	ldr	r2, [r7, #12]
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	69db      	ldr	r3, [r3, #28]
 800c082:	4619      	mov	r1, r3
 800c084:	4610      	mov	r0, r2
 800c086:	f7fe f83b 	bl	800a100 <create_chain>
 800c08a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08e:	2b00      	cmp	r3, #0
 800c090:	f000 80f2 	beq.w	800c278 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c096:	2b01      	cmp	r3, #1
 800c098:	d104      	bne.n	800c0a4 <f_write+0xfc>
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	2202      	movs	r2, #2
 800c09e:	755a      	strb	r2, [r3, #21]
 800c0a0:	2302      	movs	r3, #2
 800c0a2:	e0f2      	b.n	800c28a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0aa:	d104      	bne.n	800c0b6 <f_write+0x10e>
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	755a      	strb	r2, [r3, #21]
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	e0e9      	b.n	800c28a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0ba:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	689b      	ldr	r3, [r3, #8]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d102      	bne.n	800c0ca <f_write+0x122>
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0c8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	7d1b      	ldrb	r3, [r3, #20]
 800c0ce:	b25b      	sxtb	r3, r3
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	da18      	bge.n	800c106 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	7858      	ldrb	r0, [r3, #1]
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	6a1a      	ldr	r2, [r3, #32]
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	f7fd fa6a 	bl	80095bc <disk_write>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d004      	beq.n	800c0f8 <f_write+0x150>
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2201      	movs	r2, #1
 800c0f2:	755a      	strb	r2, [r3, #21]
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	e0c8      	b.n	800c28a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	7d1b      	ldrb	r3, [r3, #20]
 800c0fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c100:	b2da      	uxtb	r2, r3
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c106:	693a      	ldr	r2, [r7, #16]
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	69db      	ldr	r3, [r3, #28]
 800c10c:	4619      	mov	r1, r3
 800c10e:	4610      	mov	r0, r2
 800c110:	f7fd fdde 	bl	8009cd0 <clust2sect>
 800c114:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d104      	bne.n	800c126 <f_write+0x17e>
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	2202      	movs	r2, #2
 800c120:	755a      	strb	r2, [r3, #21]
 800c122:	2302      	movs	r3, #2
 800c124:	e0b1      	b.n	800c28a <f_write+0x2e2>
			sect += csect;
 800c126:	697a      	ldr	r2, [r7, #20]
 800c128:	69bb      	ldr	r3, [r7, #24]
 800c12a:	4413      	add	r3, r2
 800c12c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	0a5b      	lsrs	r3, r3, #9
 800c132:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c134:	6a3b      	ldr	r3, [r7, #32]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d03c      	beq.n	800c1b4 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c13a:	69ba      	ldr	r2, [r7, #24]
 800c13c:	6a3b      	ldr	r3, [r7, #32]
 800c13e:	4413      	add	r3, r2
 800c140:	693a      	ldr	r2, [r7, #16]
 800c142:	8952      	ldrh	r2, [r2, #10]
 800c144:	4293      	cmp	r3, r2
 800c146:	d905      	bls.n	800c154 <f_write+0x1ac>
					cc = fs->csize - csect;
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	895b      	ldrh	r3, [r3, #10]
 800c14c:	461a      	mov	r2, r3
 800c14e:	69bb      	ldr	r3, [r7, #24]
 800c150:	1ad3      	subs	r3, r2, r3
 800c152:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	7858      	ldrb	r0, [r3, #1]
 800c158:	6a3b      	ldr	r3, [r7, #32]
 800c15a:	697a      	ldr	r2, [r7, #20]
 800c15c:	69f9      	ldr	r1, [r7, #28]
 800c15e:	f7fd fa2d 	bl	80095bc <disk_write>
 800c162:	4603      	mov	r3, r0
 800c164:	2b00      	cmp	r3, #0
 800c166:	d004      	beq.n	800c172 <f_write+0x1ca>
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2201      	movs	r2, #1
 800c16c:	755a      	strb	r2, [r3, #21]
 800c16e:	2301      	movs	r3, #1
 800c170:	e08b      	b.n	800c28a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	6a1a      	ldr	r2, [r3, #32]
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	1ad3      	subs	r3, r2, r3
 800c17a:	6a3a      	ldr	r2, [r7, #32]
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d915      	bls.n	800c1ac <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	6a1a      	ldr	r2, [r3, #32]
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	1ad3      	subs	r3, r2, r3
 800c18e:	025b      	lsls	r3, r3, #9
 800c190:	69fa      	ldr	r2, [r7, #28]
 800c192:	4413      	add	r3, r2
 800c194:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c198:	4619      	mov	r1, r3
 800c19a:	f7fd facf 	bl	800973c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	7d1b      	ldrb	r3, [r3, #20]
 800c1a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1a6:	b2da      	uxtb	r2, r3
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c1ac:	6a3b      	ldr	r3, [r7, #32]
 800c1ae:	025b      	lsls	r3, r3, #9
 800c1b0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c1b2:	e03f      	b.n	800c234 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	6a1b      	ldr	r3, [r3, #32]
 800c1b8:	697a      	ldr	r2, [r7, #20]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d016      	beq.n	800c1ec <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	699a      	ldr	r2, [r3, #24]
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d210      	bcs.n	800c1ec <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	7858      	ldrb	r0, [r3, #1]
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	697a      	ldr	r2, [r7, #20]
 800c1d8:	f7fd f9d0 	bl	800957c <disk_read>
 800c1dc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d004      	beq.n	800c1ec <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	2201      	movs	r2, #1
 800c1e6:	755a      	strb	r2, [r3, #21]
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	e04e      	b.n	800c28a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	697a      	ldr	r2, [r7, #20]
 800c1f0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	699b      	ldr	r3, [r3, #24]
 800c1f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1fa:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c1fe:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	429a      	cmp	r2, r3
 800c206:	d901      	bls.n	800c20c <f_write+0x264>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	699b      	ldr	r3, [r3, #24]
 800c216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c21a:	4413      	add	r3, r2
 800c21c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c21e:	69f9      	ldr	r1, [r7, #28]
 800c220:	4618      	mov	r0, r3
 800c222:	f7fd fa8b 	bl	800973c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	7d1b      	ldrb	r3, [r3, #20]
 800c22a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c22e:	b2da      	uxtb	r2, r3
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c234:	69fa      	ldr	r2, [r7, #28]
 800c236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c238:	4413      	add	r3, r2
 800c23a:	61fb      	str	r3, [r7, #28]
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	699a      	ldr	r2, [r3, #24]
 800c240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c242:	441a      	add	r2, r3
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	619a      	str	r2, [r3, #24]
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	68da      	ldr	r2, [r3, #12]
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	699b      	ldr	r3, [r3, #24]
 800c250:	429a      	cmp	r2, r3
 800c252:	bf38      	it	cc
 800c254:	461a      	movcc	r2, r3
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	60da      	str	r2, [r3, #12]
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	681a      	ldr	r2, [r3, #0]
 800c25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c260:	441a      	add	r2, r3
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	601a      	str	r2, [r3, #0]
 800c266:	687a      	ldr	r2, [r7, #4]
 800c268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26a:	1ad3      	subs	r3, r2, r3
 800c26c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2b00      	cmp	r3, #0
 800c272:	f47f aed4 	bne.w	800c01e <f_write+0x76>
 800c276:	e000      	b.n	800c27a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c278:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	7d1b      	ldrb	r3, [r3, #20]
 800c27e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c282:	b2da      	uxtb	r2, r3
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c288:	2300      	movs	r3, #0
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3730      	adds	r7, #48	; 0x30
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}

0800c292 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c292:	b580      	push	{r7, lr}
 800c294:	b086      	sub	sp, #24
 800c296:	af00      	add	r7, sp, #0
 800c298:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f107 0208 	add.w	r2, r7, #8
 800c2a0:	4611      	mov	r1, r2
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7ff fa0e 	bl	800b6c4 <validate>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c2ac:	7dfb      	ldrb	r3, [r7, #23]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d168      	bne.n	800c384 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	7d1b      	ldrb	r3, [r3, #20]
 800c2b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d062      	beq.n	800c384 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	7d1b      	ldrb	r3, [r3, #20]
 800c2c2:	b25b      	sxtb	r3, r3
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	da15      	bge.n	800c2f4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	7858      	ldrb	r0, [r3, #1]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6a1a      	ldr	r2, [r3, #32]
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	f7fd f970 	bl	80095bc <disk_write>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d001      	beq.n	800c2e6 <f_sync+0x54>
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	e04f      	b.n	800c386 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	7d1b      	ldrb	r3, [r3, #20]
 800c2ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2ee:	b2da      	uxtb	r2, r3
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c2f4:	f7fb fa14 	bl	8007720 <get_fattime>
 800c2f8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c2fa:	68ba      	ldr	r2, [r7, #8]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c300:	4619      	mov	r1, r3
 800c302:	4610      	mov	r0, r2
 800c304:	f7fd fc48 	bl	8009b98 <move_window>
 800c308:	4603      	mov	r3, r0
 800c30a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c30c:	7dfb      	ldrb	r3, [r7, #23]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d138      	bne.n	800c384 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c316:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	330b      	adds	r3, #11
 800c31c:	781a      	ldrb	r2, [r3, #0]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	330b      	adds	r3, #11
 800c322:	f042 0220 	orr.w	r2, r2, #32
 800c326:	b2d2      	uxtb	r2, r2
 800c328:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6818      	ldr	r0, [r3, #0]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	689b      	ldr	r3, [r3, #8]
 800c332:	461a      	mov	r2, r3
 800c334:	68f9      	ldr	r1, [r7, #12]
 800c336:	f7fe f955 	bl	800a5e4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	f103 021c 	add.w	r2, r3, #28
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	68db      	ldr	r3, [r3, #12]
 800c344:	4619      	mov	r1, r3
 800c346:	4610      	mov	r0, r2
 800c348:	f7fd f9cc 	bl	80096e4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	3316      	adds	r3, #22
 800c350:	6939      	ldr	r1, [r7, #16]
 800c352:	4618      	mov	r0, r3
 800c354:	f7fd f9c6 	bl	80096e4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	3312      	adds	r3, #18
 800c35c:	2100      	movs	r1, #0
 800c35e:	4618      	mov	r0, r3
 800c360:	f7fd f9a5 	bl	80096ae <st_word>
					fs->wflag = 1;
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	2201      	movs	r2, #1
 800c368:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	4618      	mov	r0, r3
 800c36e:	f7fd fc41 	bl	8009bf4 <sync_fs>
 800c372:	4603      	mov	r3, r0
 800c374:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	7d1b      	ldrb	r3, [r3, #20]
 800c37a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c37e:	b2da      	uxtb	r2, r3
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c384:	7dfb      	ldrb	r3, [r7, #23]
}
 800c386:	4618      	mov	r0, r3
 800c388:	3718      	adds	r7, #24
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}

0800c38e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c38e:	b580      	push	{r7, lr}
 800c390:	b084      	sub	sp, #16
 800c392:	af00      	add	r7, sp, #0
 800c394:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f7ff ff7b 	bl	800c292 <f_sync>
 800c39c:	4603      	mov	r3, r0
 800c39e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c3a0:	7bfb      	ldrb	r3, [r7, #15]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d118      	bne.n	800c3d8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f107 0208 	add.w	r2, r7, #8
 800c3ac:	4611      	mov	r1, r2
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7ff f988 	bl	800b6c4 <validate>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c3b8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d10c      	bne.n	800c3d8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	691b      	ldr	r3, [r3, #16]
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7fd fb44 	bl	8009a50 <dec_lock>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c3cc:	7bfb      	ldrb	r3, [r7, #15]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d102      	bne.n	800c3d8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c3d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3710      	adds	r7, #16
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}

0800c3e2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c3e2:	b580      	push	{r7, lr}
 800c3e4:	b090      	sub	sp, #64	; 0x40
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
 800c3ea:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f107 0208 	add.w	r2, r7, #8
 800c3f2:	4611      	mov	r1, r2
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7ff f965 	bl	800b6c4 <validate>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c400:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c404:	2b00      	cmp	r3, #0
 800c406:	d103      	bne.n	800c410 <f_lseek+0x2e>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	7d5b      	ldrb	r3, [r3, #21]
 800c40c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c410:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c414:	2b00      	cmp	r3, #0
 800c416:	d002      	beq.n	800c41e <f_lseek+0x3c>
 800c418:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c41c:	e1e6      	b.n	800c7ec <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c422:	2b00      	cmp	r3, #0
 800c424:	f000 80d1 	beq.w	800c5ca <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c42e:	d15a      	bne.n	800c4e6 <f_lseek+0x104>
			tbl = fp->cltbl;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c434:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c438:	1d1a      	adds	r2, r3, #4
 800c43a:	627a      	str	r2, [r7, #36]	; 0x24
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	617b      	str	r3, [r7, #20]
 800c440:	2302      	movs	r3, #2
 800c442:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	689b      	ldr	r3, [r3, #8]
 800c448:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800c44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d03a      	beq.n	800c4c6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c452:	613b      	str	r3, [r7, #16]
 800c454:	2300      	movs	r3, #0
 800c456:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c45a:	3302      	adds	r3, #2
 800c45c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800c45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c460:	60fb      	str	r3, [r7, #12]
 800c462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c464:	3301      	adds	r3, #1
 800c466:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7fd fc4e 	bl	8009d0e <get_fat>
 800c472:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c476:	2b01      	cmp	r3, #1
 800c478:	d804      	bhi.n	800c484 <f_lseek+0xa2>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2202      	movs	r2, #2
 800c47e:	755a      	strb	r2, [r3, #21]
 800c480:	2302      	movs	r3, #2
 800c482:	e1b3      	b.n	800c7ec <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c486:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c48a:	d104      	bne.n	800c496 <f_lseek+0xb4>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2201      	movs	r2, #1
 800c490:	755a      	strb	r2, [r3, #21]
 800c492:	2301      	movs	r3, #1
 800c494:	e1aa      	b.n	800c7ec <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	3301      	adds	r3, #1
 800c49a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d0de      	beq.n	800c45e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c4a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	d809      	bhi.n	800c4bc <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800c4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4aa:	1d1a      	adds	r2, r3, #4
 800c4ac:	627a      	str	r2, [r7, #36]	; 0x24
 800c4ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4b0:	601a      	str	r2, [r3, #0]
 800c4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b4:	1d1a      	adds	r2, r3, #4
 800c4b6:	627a      	str	r2, [r7, #36]	; 0x24
 800c4b8:	693a      	ldr	r2, [r7, #16]
 800c4ba:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	699b      	ldr	r3, [r3, #24]
 800c4c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d3c4      	bcc.n	800c450 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4cc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800c4ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d803      	bhi.n	800c4de <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800c4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d8:	2200      	movs	r2, #0
 800c4da:	601a      	str	r2, [r3, #0]
 800c4dc:	e184      	b.n	800c7e8 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c4de:	2311      	movs	r3, #17
 800c4e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c4e4:	e180      	b.n	800c7e8 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	68db      	ldr	r3, [r3, #12]
 800c4ea:	683a      	ldr	r2, [r7, #0]
 800c4ec:	429a      	cmp	r2, r3
 800c4ee:	d902      	bls.n	800c4f6 <f_lseek+0x114>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	68db      	ldr	r3, [r3, #12]
 800c4f4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	683a      	ldr	r2, [r7, #0]
 800c4fa:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	f000 8172 	beq.w	800c7e8 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	3b01      	subs	r3, #1
 800c508:	4619      	mov	r1, r3
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f7fd fe90 	bl	800a230 <clmt_clust>
 800c510:	4602      	mov	r2, r0
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800c516:	68ba      	ldr	r2, [r7, #8]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	69db      	ldr	r3, [r3, #28]
 800c51c:	4619      	mov	r1, r3
 800c51e:	4610      	mov	r0, r2
 800c520:	f7fd fbd6 	bl	8009cd0 <clust2sect>
 800c524:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c526:	69bb      	ldr	r3, [r7, #24]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d104      	bne.n	800c536 <f_lseek+0x154>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2202      	movs	r2, #2
 800c530:	755a      	strb	r2, [r3, #21]
 800c532:	2302      	movs	r3, #2
 800c534:	e15a      	b.n	800c7ec <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	3b01      	subs	r3, #1
 800c53a:	0a5b      	lsrs	r3, r3, #9
 800c53c:	68ba      	ldr	r2, [r7, #8]
 800c53e:	8952      	ldrh	r2, [r2, #10]
 800c540:	3a01      	subs	r2, #1
 800c542:	4013      	ands	r3, r2
 800c544:	69ba      	ldr	r2, [r7, #24]
 800c546:	4413      	add	r3, r2
 800c548:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	699b      	ldr	r3, [r3, #24]
 800c54e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c552:	2b00      	cmp	r3, #0
 800c554:	f000 8148 	beq.w	800c7e8 <f_lseek+0x406>
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	6a1b      	ldr	r3, [r3, #32]
 800c55c:	69ba      	ldr	r2, [r7, #24]
 800c55e:	429a      	cmp	r2, r3
 800c560:	f000 8142 	beq.w	800c7e8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	7d1b      	ldrb	r3, [r3, #20]
 800c568:	b25b      	sxtb	r3, r3
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	da18      	bge.n	800c5a0 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	7858      	ldrb	r0, [r3, #1]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6a1a      	ldr	r2, [r3, #32]
 800c57c:	2301      	movs	r3, #1
 800c57e:	f7fd f81d 	bl	80095bc <disk_write>
 800c582:	4603      	mov	r3, r0
 800c584:	2b00      	cmp	r3, #0
 800c586:	d004      	beq.n	800c592 <f_lseek+0x1b0>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2201      	movs	r2, #1
 800c58c:	755a      	strb	r2, [r3, #21]
 800c58e:	2301      	movs	r3, #1
 800c590:	e12c      	b.n	800c7ec <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	7d1b      	ldrb	r3, [r3, #20]
 800c596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c59a:	b2da      	uxtb	r2, r3
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	7858      	ldrb	r0, [r3, #1]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	69ba      	ldr	r2, [r7, #24]
 800c5ae:	f7fc ffe5 	bl	800957c <disk_read>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d004      	beq.n	800c5c2 <f_lseek+0x1e0>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	755a      	strb	r2, [r3, #21]
 800c5be:	2301      	movs	r3, #1
 800c5c0:	e114      	b.n	800c7ec <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	69ba      	ldr	r2, [r7, #24]
 800c5c6:	621a      	str	r2, [r3, #32]
 800c5c8:	e10e      	b.n	800c7e8 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	68db      	ldr	r3, [r3, #12]
 800c5ce:	683a      	ldr	r2, [r7, #0]
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d908      	bls.n	800c5e6 <f_lseek+0x204>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	7d1b      	ldrb	r3, [r3, #20]
 800c5d8:	f003 0302 	and.w	r3, r3, #2
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d102      	bne.n	800c5e6 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	68db      	ldr	r3, [r3, #12]
 800c5e4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	699b      	ldr	r3, [r3, #24]
 800c5ea:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	637b      	str	r3, [r7, #52]	; 0x34
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5f4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	f000 80a7 	beq.w	800c74c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	895b      	ldrh	r3, [r3, #10]
 800c602:	025b      	lsls	r3, r3, #9
 800c604:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c606:	6a3b      	ldr	r3, [r7, #32]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d01b      	beq.n	800c644 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	1e5a      	subs	r2, r3, #1
 800c610:	69fb      	ldr	r3, [r7, #28]
 800c612:	fbb2 f2f3 	udiv	r2, r2, r3
 800c616:	6a3b      	ldr	r3, [r7, #32]
 800c618:	1e59      	subs	r1, r3, #1
 800c61a:	69fb      	ldr	r3, [r7, #28]
 800c61c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c620:	429a      	cmp	r2, r3
 800c622:	d30f      	bcc.n	800c644 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c624:	6a3b      	ldr	r3, [r7, #32]
 800c626:	1e5a      	subs	r2, r3, #1
 800c628:	69fb      	ldr	r3, [r7, #28]
 800c62a:	425b      	negs	r3, r3
 800c62c:	401a      	ands	r2, r3
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	699b      	ldr	r3, [r3, #24]
 800c636:	683a      	ldr	r2, [r7, #0]
 800c638:	1ad3      	subs	r3, r2, r3
 800c63a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	69db      	ldr	r3, [r3, #28]
 800c640:	63bb      	str	r3, [r7, #56]	; 0x38
 800c642:	e022      	b.n	800c68a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	689b      	ldr	r3, [r3, #8]
 800c648:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d119      	bne.n	800c684 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2100      	movs	r1, #0
 800c654:	4618      	mov	r0, r3
 800c656:	f7fd fd53 	bl	800a100 <create_chain>
 800c65a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65e:	2b01      	cmp	r3, #1
 800c660:	d104      	bne.n	800c66c <f_lseek+0x28a>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2202      	movs	r2, #2
 800c666:	755a      	strb	r2, [r3, #21]
 800c668:	2302      	movs	r3, #2
 800c66a:	e0bf      	b.n	800c7ec <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c66e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c672:	d104      	bne.n	800c67e <f_lseek+0x29c>
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2201      	movs	r2, #1
 800c678:	755a      	strb	r2, [r3, #21]
 800c67a:	2301      	movs	r3, #1
 800c67c:	e0b6      	b.n	800c7ec <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c682:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c688:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800c68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d05d      	beq.n	800c74c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800c690:	e03a      	b.n	800c708 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800c692:	683a      	ldr	r2, [r7, #0]
 800c694:	69fb      	ldr	r3, [r7, #28]
 800c696:	1ad3      	subs	r3, r2, r3
 800c698:	603b      	str	r3, [r7, #0]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	699a      	ldr	r2, [r3, #24]
 800c69e:	69fb      	ldr	r3, [r7, #28]
 800c6a0:	441a      	add	r2, r3
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	7d1b      	ldrb	r3, [r3, #20]
 800c6aa:	f003 0302 	and.w	r3, r3, #2
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d00b      	beq.n	800c6ca <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7fd fd22 	bl	800a100 <create_chain>
 800c6bc:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d108      	bne.n	800c6d6 <f_lseek+0x2f4>
							ofs = 0; break;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	603b      	str	r3, [r7, #0]
 800c6c8:	e022      	b.n	800c710 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f7fd fb1d 	bl	8009d0e <get_fat>
 800c6d4:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6dc:	d104      	bne.n	800c6e8 <f_lseek+0x306>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2201      	movs	r2, #1
 800c6e2:	755a      	strb	r2, [r3, #21]
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	e081      	b.n	800c7ec <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ea:	2b01      	cmp	r3, #1
 800c6ec:	d904      	bls.n	800c6f8 <f_lseek+0x316>
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	699b      	ldr	r3, [r3, #24]
 800c6f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d304      	bcc.n	800c702 <f_lseek+0x320>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2202      	movs	r2, #2
 800c6fc:	755a      	strb	r2, [r3, #21]
 800c6fe:	2302      	movs	r3, #2
 800c700:	e074      	b.n	800c7ec <f_lseek+0x40a>
					fp->clust = clst;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c706:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c708:	683a      	ldr	r2, [r7, #0]
 800c70a:	69fb      	ldr	r3, [r7, #28]
 800c70c:	429a      	cmp	r2, r3
 800c70e:	d8c0      	bhi.n	800c692 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	699a      	ldr	r2, [r3, #24]
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	441a      	add	r2, r3
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c722:	2b00      	cmp	r3, #0
 800c724:	d012      	beq.n	800c74c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7fd fad0 	bl	8009cd0 <clust2sect>
 800c730:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c734:	2b00      	cmp	r3, #0
 800c736:	d104      	bne.n	800c742 <f_lseek+0x360>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2202      	movs	r2, #2
 800c73c:	755a      	strb	r2, [r3, #21]
 800c73e:	2302      	movs	r3, #2
 800c740:	e054      	b.n	800c7ec <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	0a5b      	lsrs	r3, r3, #9
 800c746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c748:	4413      	add	r3, r2
 800c74a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	699a      	ldr	r2, [r3, #24]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	68db      	ldr	r3, [r3, #12]
 800c754:	429a      	cmp	r2, r3
 800c756:	d90a      	bls.n	800c76e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	699a      	ldr	r2, [r3, #24]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	7d1b      	ldrb	r3, [r3, #20]
 800c764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c768:	b2da      	uxtb	r2, r3
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	699b      	ldr	r3, [r3, #24]
 800c772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c776:	2b00      	cmp	r3, #0
 800c778:	d036      	beq.n	800c7e8 <f_lseek+0x406>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6a1b      	ldr	r3, [r3, #32]
 800c77e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c780:	429a      	cmp	r2, r3
 800c782:	d031      	beq.n	800c7e8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	7d1b      	ldrb	r3, [r3, #20]
 800c788:	b25b      	sxtb	r3, r3
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	da18      	bge.n	800c7c0 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	7858      	ldrb	r0, [r3, #1]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6a1a      	ldr	r2, [r3, #32]
 800c79c:	2301      	movs	r3, #1
 800c79e:	f7fc ff0d 	bl	80095bc <disk_write>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d004      	beq.n	800c7b2 <f_lseek+0x3d0>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	755a      	strb	r2, [r3, #21]
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	e01c      	b.n	800c7ec <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	7d1b      	ldrb	r3, [r3, #20]
 800c7b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7ba:	b2da      	uxtb	r2, r3
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	7858      	ldrb	r0, [r3, #1]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7ce:	f7fc fed5 	bl	800957c <disk_read>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d004      	beq.n	800c7e2 <f_lseek+0x400>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2201      	movs	r2, #1
 800c7dc:	755a      	strb	r2, [r3, #21]
 800c7de:	2301      	movs	r3, #1
 800c7e0:	e004      	b.n	800c7ec <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7e6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c7e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3740      	adds	r7, #64	; 0x40
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}

0800c7f4 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b088      	sub	sp, #32
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	60f8      	str	r0, [r7, #12]
 800c7fc:	60b9      	str	r1, [r7, #8]
 800c7fe:	607a      	str	r2, [r7, #4]
	int n = 0;
 800c800:	2300      	movs	r3, #0
 800c802:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800c808:	e01b      	b.n	800c842 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800c80a:	f107 0310 	add.w	r3, r7, #16
 800c80e:	f107 0114 	add.w	r1, r7, #20
 800c812:	2201      	movs	r2, #1
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f7ff fa88 	bl	800bd2a <f_read>
		if (rc != 1) break;
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d116      	bne.n	800c84e <f_gets+0x5a>
		c = s[0];
 800c820:	7d3b      	ldrb	r3, [r7, #20]
 800c822:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800c824:	7dfb      	ldrb	r3, [r7, #23]
 800c826:	2b0d      	cmp	r3, #13
 800c828:	d100      	bne.n	800c82c <f_gets+0x38>
 800c82a:	e00a      	b.n	800c842 <f_gets+0x4e>
		*p++ = c;
 800c82c:	69bb      	ldr	r3, [r7, #24]
 800c82e:	1c5a      	adds	r2, r3, #1
 800c830:	61ba      	str	r2, [r7, #24]
 800c832:	7dfa      	ldrb	r2, [r7, #23]
 800c834:	701a      	strb	r2, [r3, #0]
		n++;
 800c836:	69fb      	ldr	r3, [r7, #28]
 800c838:	3301      	adds	r3, #1
 800c83a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800c83c:	7dfb      	ldrb	r3, [r7, #23]
 800c83e:	2b0a      	cmp	r3, #10
 800c840:	d007      	beq.n	800c852 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	3b01      	subs	r3, #1
 800c846:	69fa      	ldr	r2, [r7, #28]
 800c848:	429a      	cmp	r2, r3
 800c84a:	dbde      	blt.n	800c80a <f_gets+0x16>
 800c84c:	e002      	b.n	800c854 <f_gets+0x60>
		if (rc != 1) break;
 800c84e:	bf00      	nop
 800c850:	e000      	b.n	800c854 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800c852:	bf00      	nop
	}
	*p = 0;
 800c854:	69bb      	ldr	r3, [r7, #24]
 800c856:	2200      	movs	r2, #0
 800c858:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800c85a:	69fb      	ldr	r3, [r7, #28]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d001      	beq.n	800c864 <f_gets+0x70>
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	e000      	b.n	800c866 <f_gets+0x72>
 800c864:	2300      	movs	r3, #0
}
 800c866:	4618      	mov	r0, r3
 800c868:	3720      	adds	r7, #32
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}

0800c86e <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800c86e:	b580      	push	{r7, lr}
 800c870:	b084      	sub	sp, #16
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
 800c876:	460b      	mov	r3, r1
 800c878:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800c87a:	78fb      	ldrb	r3, [r7, #3]
 800c87c:	2b0a      	cmp	r3, #10
 800c87e:	d103      	bne.n	800c888 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800c880:	210d      	movs	r1, #13
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f7ff fff3 	bl	800c86e <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	685b      	ldr	r3, [r3, #4]
 800c88c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	2b00      	cmp	r3, #0
 800c892:	db25      	blt.n	800c8e0 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	1c5a      	adds	r2, r3, #1
 800c898:	60fa      	str	r2, [r7, #12]
 800c89a:	687a      	ldr	r2, [r7, #4]
 800c89c:	4413      	add	r3, r2
 800c89e:	78fa      	ldrb	r2, [r7, #3]
 800c8a0:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	2b3c      	cmp	r3, #60	; 0x3c
 800c8a6:	dd12      	ble.n	800c8ce <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6818      	ldr	r0, [r3, #0]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f103 010c 	add.w	r1, r3, #12
 800c8b2:	68fa      	ldr	r2, [r7, #12]
 800c8b4:	f107 0308 	add.w	r3, r7, #8
 800c8b8:	f7ff fb76 	bl	800bfa8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800c8bc:	68ba      	ldr	r2, [r7, #8]
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d101      	bne.n	800c8c8 <putc_bfd+0x5a>
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	e001      	b.n	800c8cc <putc_bfd+0x5e>
 800c8c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c8cc:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	68fa      	ldr	r2, [r7, #12]
 800c8d2:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	689b      	ldr	r3, [r3, #8]
 800c8d8:	1c5a      	adds	r2, r3, #1
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	609a      	str	r2, [r3, #8]
 800c8de:	e000      	b.n	800c8e2 <putc_bfd+0x74>
	if (i < 0) return;
 800c8e0:	bf00      	nop
}
 800c8e2:	3710      	adds	r7, #16
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b084      	sub	sp, #16
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	db16      	blt.n	800c926 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6818      	ldr	r0, [r3, #0]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f103 010c 	add.w	r1, r3, #12
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	461a      	mov	r2, r3
 800c908:	f107 030c 	add.w	r3, r7, #12
 800c90c:	f7ff fb4c 	bl	800bfa8 <f_write>
 800c910:	4603      	mov	r3, r0
 800c912:	2b00      	cmp	r3, #0
 800c914:	d107      	bne.n	800c926 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	68fa      	ldr	r2, [r7, #12]
 800c91c:	4293      	cmp	r3, r2
 800c91e:	d102      	bne.n	800c926 <putc_flush+0x3e>
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	689b      	ldr	r3, [r3, #8]
 800c924:	e001      	b.n	800c92a <putc_flush+0x42>
	return EOF;
 800c926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3710      	adds	r7, #16
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}

0800c932 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800c932:	b480      	push	{r7}
 800c934:	b083      	sub	sp, #12
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
 800c93a:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	683a      	ldr	r2, [r7, #0]
 800c940:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2200      	movs	r2, #0
 800c946:	605a      	str	r2, [r3, #4]
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	685a      	ldr	r2, [r3, #4]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	609a      	str	r2, [r3, #8]
}
 800c950:	bf00      	nop
 800c952:	370c      	adds	r7, #12
 800c954:	46bd      	mov	sp, r7
 800c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95a:	4770      	bx	lr

0800c95c <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800c95c:	b40e      	push	{r1, r2, r3}
 800c95e:	b580      	push	{r7, lr}
 800c960:	b0a7      	sub	sp, #156	; 0x9c
 800c962:	af00      	add	r7, sp, #0
 800c964:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800c966:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c96a:	6879      	ldr	r1, [r7, #4]
 800c96c:	4618      	mov	r0, r3
 800c96e:	f7ff ffe0 	bl	800c932 <putc_init>

	va_start(arp, fmt);
 800c972:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800c976:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800c978:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c97c:	1c5a      	adds	r2, r3, #1
 800c97e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800c988:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	f000 81f2 	beq.w	800cd76 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800c992:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c996:	2b25      	cmp	r3, #37	; 0x25
 800c998:	d008      	beq.n	800c9ac <f_printf+0x50>
			putc_bfd(&pb, c);
 800c99a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800c99e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c9a2:	4611      	mov	r1, r2
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f7ff ff62 	bl	800c86e <putc_bfd>
			continue;
 800c9aa:	e1e3      	b.n	800cd74 <f_printf+0x418>
		}
		w = f = 0;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800c9b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c9bc:	1c5a      	adds	r2, r3, #1
 800c9be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800c9c8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c9cc:	2b30      	cmp	r3, #48	; 0x30
 800c9ce:	d10b      	bne.n	800c9e8 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800c9d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c9da:	1c5a      	adds	r2, r3, #1
 800c9dc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800c9e6:	e024      	b.n	800ca32 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800c9e8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c9ec:	2b2d      	cmp	r3, #45	; 0x2d
 800c9ee:	d120      	bne.n	800ca32 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800c9f0:	2302      	movs	r3, #2
 800c9f2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800c9f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c9fa:	1c5a      	adds	r2, r3, #1
 800c9fc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800ca06:	e014      	b.n	800ca32 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800ca08:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ca0c:	4613      	mov	r3, r2
 800ca0e:	009b      	lsls	r3, r3, #2
 800ca10:	4413      	add	r3, r2
 800ca12:	005b      	lsls	r3, r3, #1
 800ca14:	461a      	mov	r2, r3
 800ca16:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ca1a:	4413      	add	r3, r2
 800ca1c:	3b30      	subs	r3, #48	; 0x30
 800ca1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800ca22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ca26:	1c5a      	adds	r2, r3, #1
 800ca28:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800ca32:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ca36:	2b2f      	cmp	r3, #47	; 0x2f
 800ca38:	d903      	bls.n	800ca42 <f_printf+0xe6>
 800ca3a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ca3e:	2b39      	cmp	r3, #57	; 0x39
 800ca40:	d9e2      	bls.n	800ca08 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800ca42:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ca46:	2b6c      	cmp	r3, #108	; 0x6c
 800ca48:	d003      	beq.n	800ca52 <f_printf+0xf6>
 800ca4a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ca4e:	2b4c      	cmp	r3, #76	; 0x4c
 800ca50:	d10d      	bne.n	800ca6e <f_printf+0x112>
			f |= 4; c = *fmt++;
 800ca52:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ca56:	f043 0304 	orr.w	r3, r3, #4
 800ca5a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ca5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ca62:	1c5a      	adds	r2, r3, #1
 800ca64:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ca68:	781b      	ldrb	r3, [r3, #0]
 800ca6a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800ca6e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	f000 8181 	beq.w	800cd7a <f_printf+0x41e>
		d = c;
 800ca78:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ca7c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800ca80:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ca84:	2b60      	cmp	r3, #96	; 0x60
 800ca86:	d908      	bls.n	800ca9a <f_printf+0x13e>
 800ca88:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ca8c:	2b7a      	cmp	r3, #122	; 0x7a
 800ca8e:	d804      	bhi.n	800ca9a <f_printf+0x13e>
 800ca90:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ca94:	3b20      	subs	r3, #32
 800ca96:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800ca9a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ca9e:	3b42      	subs	r3, #66	; 0x42
 800caa0:	2b16      	cmp	r3, #22
 800caa2:	f200 8098 	bhi.w	800cbd6 <f_printf+0x27a>
 800caa6:	a201      	add	r2, pc, #4	; (adr r2, 800caac <f_printf+0x150>)
 800caa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caac:	0800cbb7 	.word	0x0800cbb7
 800cab0:	0800cb9f 	.word	0x0800cb9f
 800cab4:	0800cbc7 	.word	0x0800cbc7
 800cab8:	0800cbd7 	.word	0x0800cbd7
 800cabc:	0800cbd7 	.word	0x0800cbd7
 800cac0:	0800cbd7 	.word	0x0800cbd7
 800cac4:	0800cbd7 	.word	0x0800cbd7
 800cac8:	0800cbd7 	.word	0x0800cbd7
 800cacc:	0800cbd7 	.word	0x0800cbd7
 800cad0:	0800cbd7 	.word	0x0800cbd7
 800cad4:	0800cbd7 	.word	0x0800cbd7
 800cad8:	0800cbd7 	.word	0x0800cbd7
 800cadc:	0800cbd7 	.word	0x0800cbd7
 800cae0:	0800cbbf 	.word	0x0800cbbf
 800cae4:	0800cbd7 	.word	0x0800cbd7
 800cae8:	0800cbd7 	.word	0x0800cbd7
 800caec:	0800cbd7 	.word	0x0800cbd7
 800caf0:	0800cb09 	.word	0x0800cb09
 800caf4:	0800cbd7 	.word	0x0800cbd7
 800caf8:	0800cbc7 	.word	0x0800cbc7
 800cafc:	0800cbd7 	.word	0x0800cbd7
 800cb00:	0800cbd7 	.word	0x0800cbd7
 800cb04:	0800cbcf 	.word	0x0800cbcf
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800cb08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb0a:	1d1a      	adds	r2, r3, #4
 800cb0c:	67ba      	str	r2, [r7, #120]	; 0x78
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800cb12:	2300      	movs	r3, #0
 800cb14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cb18:	e004      	b.n	800cb24 <f_printf+0x1c8>
 800cb1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cb1e:	3301      	adds	r3, #1
 800cb20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cb24:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cb26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cb2a:	4413      	add	r3, r2
 800cb2c:	781b      	ldrb	r3, [r3, #0]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d1f3      	bne.n	800cb1a <f_printf+0x1be>
			if (!(f & 2)) {
 800cb32:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800cb36:	f003 0302 	and.w	r3, r3, #2
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d11a      	bne.n	800cb74 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800cb3e:	e005      	b.n	800cb4c <f_printf+0x1f0>
 800cb40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cb44:	2120      	movs	r1, #32
 800cb46:	4618      	mov	r0, r3
 800cb48:	f7ff fe91 	bl	800c86e <putc_bfd>
 800cb4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cb50:	1c5a      	adds	r2, r3, #1
 800cb52:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cb56:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d8f0      	bhi.n	800cb40 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800cb5e:	e009      	b.n	800cb74 <f_printf+0x218>
 800cb60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cb62:	1c5a      	adds	r2, r3, #1
 800cb64:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cb66:	781a      	ldrb	r2, [r3, #0]
 800cb68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cb6c:	4611      	mov	r1, r2
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f7ff fe7d 	bl	800c86e <putc_bfd>
 800cb74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d1f1      	bne.n	800cb60 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800cb7c:	e005      	b.n	800cb8a <f_printf+0x22e>
 800cb7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cb82:	2120      	movs	r1, #32
 800cb84:	4618      	mov	r0, r3
 800cb86:	f7ff fe72 	bl	800c86e <putc_bfd>
 800cb8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cb8e:	1c5a      	adds	r2, r3, #1
 800cb90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cb94:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	d8f0      	bhi.n	800cb7e <f_printf+0x222>
			continue;
 800cb9c:	e0ea      	b.n	800cd74 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800cb9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cba0:	1d1a      	adds	r2, r3, #4
 800cba2:	67ba      	str	r2, [r7, #120]	; 0x78
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	b2da      	uxtb	r2, r3
 800cba8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cbac:	4611      	mov	r1, r2
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7ff fe5d 	bl	800c86e <putc_bfd>
 800cbb4:	e0de      	b.n	800cd74 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800cbb6:	2302      	movs	r3, #2
 800cbb8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800cbbc:	e014      	b.n	800cbe8 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800cbbe:	2308      	movs	r3, #8
 800cbc0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800cbc4:	e010      	b.n	800cbe8 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800cbc6:	230a      	movs	r3, #10
 800cbc8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800cbcc:	e00c      	b.n	800cbe8 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800cbce:	2310      	movs	r3, #16
 800cbd0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800cbd4:	e008      	b.n	800cbe8 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800cbd6:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800cbda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cbde:	4611      	mov	r1, r2
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f7ff fe44 	bl	800c86e <putc_bfd>
 800cbe6:	e0c5      	b.n	800cd74 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800cbe8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800cbec:	f003 0304 	and.w	r3, r3, #4
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d004      	beq.n	800cbfe <f_printf+0x2a2>
 800cbf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cbf6:	1d1a      	adds	r2, r3, #4
 800cbf8:	67ba      	str	r2, [r7, #120]	; 0x78
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	e00c      	b.n	800cc18 <f_printf+0x2bc>
 800cbfe:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800cc02:	2b44      	cmp	r3, #68	; 0x44
 800cc04:	d104      	bne.n	800cc10 <f_printf+0x2b4>
 800cc06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc08:	1d1a      	adds	r2, r3, #4
 800cc0a:	67ba      	str	r2, [r7, #120]	; 0x78
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	e003      	b.n	800cc18 <f_printf+0x2bc>
 800cc10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc12:	1d1a      	adds	r2, r3, #4
 800cc14:	67ba      	str	r2, [r7, #120]	; 0x78
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800cc1c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800cc20:	2b44      	cmp	r3, #68	; 0x44
 800cc22:	d10e      	bne.n	800cc42 <f_printf+0x2e6>
 800cc24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	da0a      	bge.n	800cc42 <f_printf+0x2e6>
			v = 0 - v;
 800cc2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cc30:	425b      	negs	r3, r3
 800cc32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800cc36:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800cc3a:	f043 0308 	orr.w	r3, r3, #8
 800cc3e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800cc42:	2300      	movs	r3, #0
 800cc44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800cc48:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800cc4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cc50:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc54:	fb01 f202 	mul.w	r2, r1, r2
 800cc58:	1a9b      	subs	r3, r3, r2
 800cc5a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800cc5e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800cc62:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800cc66:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800cc6e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800cc72:	2b09      	cmp	r3, #9
 800cc74:	d90b      	bls.n	800cc8e <f_printf+0x332>
 800cc76:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800cc7a:	2b78      	cmp	r3, #120	; 0x78
 800cc7c:	d101      	bne.n	800cc82 <f_printf+0x326>
 800cc7e:	2227      	movs	r2, #39	; 0x27
 800cc80:	e000      	b.n	800cc84 <f_printf+0x328>
 800cc82:	2207      	movs	r2, #7
 800cc84:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800cc88:	4413      	add	r3, r2
 800cc8a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800cc8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cc92:	1c5a      	adds	r2, r3, #1
 800cc94:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800cc98:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800cc9c:	3230      	adds	r2, #48	; 0x30
 800cc9e:	b2d2      	uxtb	r2, r2
 800cca0:	3398      	adds	r3, #152	; 0x98
 800cca2:	443b      	add	r3, r7
 800cca4:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800cca8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d003      	beq.n	800ccb8 <f_printf+0x35c>
 800ccb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ccb4:	2b1f      	cmp	r3, #31
 800ccb6:	d9c7      	bls.n	800cc48 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800ccb8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ccbc:	f003 0308 	and.w	r3, r3, #8
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d009      	beq.n	800ccd8 <f_printf+0x37c>
 800ccc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ccc8:	1c5a      	adds	r2, r3, #1
 800ccca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800ccce:	3398      	adds	r3, #152	; 0x98
 800ccd0:	443b      	add	r3, r7
 800ccd2:	222d      	movs	r2, #45	; 0x2d
 800ccd4:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800ccd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ccdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cce0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800cce4:	f003 0301 	and.w	r3, r3, #1
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d001      	beq.n	800ccf0 <f_printf+0x394>
 800ccec:	2330      	movs	r3, #48	; 0x30
 800ccee:	e000      	b.n	800ccf2 <f_printf+0x396>
 800ccf0:	2320      	movs	r3, #32
 800ccf2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800ccf6:	e007      	b.n	800cd08 <f_printf+0x3ac>
 800ccf8:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800ccfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cd00:	4611      	mov	r1, r2
 800cd02:	4618      	mov	r0, r3
 800cd04:	f7ff fdb3 	bl	800c86e <putc_bfd>
 800cd08:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800cd0c:	f003 0302 	and.w	r3, r3, #2
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d108      	bne.n	800cd26 <f_printf+0x3ca>
 800cd14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cd18:	1c5a      	adds	r2, r3, #1
 800cd1a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cd1e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d8e8      	bhi.n	800ccf8 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800cd26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cd2a:	3b01      	subs	r3, #1
 800cd2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cd30:	f107 020c 	add.w	r2, r7, #12
 800cd34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cd38:	4413      	add	r3, r2
 800cd3a:	781a      	ldrb	r2, [r3, #0]
 800cd3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cd40:	4611      	mov	r1, r2
 800cd42:	4618      	mov	r0, r3
 800cd44:	f7ff fd93 	bl	800c86e <putc_bfd>
		} while (i);
 800cd48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d1ea      	bne.n	800cd26 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800cd50:	e007      	b.n	800cd62 <f_printf+0x406>
 800cd52:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800cd56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cd5a:	4611      	mov	r1, r2
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f7ff fd86 	bl	800c86e <putc_bfd>
 800cd62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cd66:	1c5a      	adds	r2, r3, #1
 800cd68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cd6c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d8ee      	bhi.n	800cd52 <f_printf+0x3f6>
		c = *fmt++;
 800cd74:	e600      	b.n	800c978 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800cd76:	bf00      	nop
 800cd78:	e000      	b.n	800cd7c <f_printf+0x420>
		if (!c) break;
 800cd7a:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800cd7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cd80:	4618      	mov	r0, r3
 800cd82:	f7ff fdb1 	bl	800c8e8 <putc_flush>
 800cd86:	4603      	mov	r3, r0
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	379c      	adds	r7, #156	; 0x9c
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cd92:	b003      	add	sp, #12
 800cd94:	4770      	bx	lr
 800cd96:	bf00      	nop

0800cd98 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b087      	sub	sp, #28
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	60f8      	str	r0, [r7, #12]
 800cda0:	60b9      	str	r1, [r7, #8]
 800cda2:	4613      	mov	r3, r2
 800cda4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cda6:	2301      	movs	r3, #1
 800cda8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cdae:	4b1f      	ldr	r3, [pc, #124]	; (800ce2c <FATFS_LinkDriverEx+0x94>)
 800cdb0:	7a5b      	ldrb	r3, [r3, #9]
 800cdb2:	b2db      	uxtb	r3, r3
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d131      	bne.n	800ce1c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cdb8:	4b1c      	ldr	r3, [pc, #112]	; (800ce2c <FATFS_LinkDriverEx+0x94>)
 800cdba:	7a5b      	ldrb	r3, [r3, #9]
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	461a      	mov	r2, r3
 800cdc0:	4b1a      	ldr	r3, [pc, #104]	; (800ce2c <FATFS_LinkDriverEx+0x94>)
 800cdc2:	2100      	movs	r1, #0
 800cdc4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cdc6:	4b19      	ldr	r3, [pc, #100]	; (800ce2c <FATFS_LinkDriverEx+0x94>)
 800cdc8:	7a5b      	ldrb	r3, [r3, #9]
 800cdca:	b2db      	uxtb	r3, r3
 800cdcc:	4a17      	ldr	r2, [pc, #92]	; (800ce2c <FATFS_LinkDriverEx+0x94>)
 800cdce:	009b      	lsls	r3, r3, #2
 800cdd0:	4413      	add	r3, r2
 800cdd2:	68fa      	ldr	r2, [r7, #12]
 800cdd4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cdd6:	4b15      	ldr	r3, [pc, #84]	; (800ce2c <FATFS_LinkDriverEx+0x94>)
 800cdd8:	7a5b      	ldrb	r3, [r3, #9]
 800cdda:	b2db      	uxtb	r3, r3
 800cddc:	461a      	mov	r2, r3
 800cdde:	4b13      	ldr	r3, [pc, #76]	; (800ce2c <FATFS_LinkDriverEx+0x94>)
 800cde0:	4413      	add	r3, r2
 800cde2:	79fa      	ldrb	r2, [r7, #7]
 800cde4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cde6:	4b11      	ldr	r3, [pc, #68]	; (800ce2c <FATFS_LinkDriverEx+0x94>)
 800cde8:	7a5b      	ldrb	r3, [r3, #9]
 800cdea:	b2db      	uxtb	r3, r3
 800cdec:	1c5a      	adds	r2, r3, #1
 800cdee:	b2d1      	uxtb	r1, r2
 800cdf0:	4a0e      	ldr	r2, [pc, #56]	; (800ce2c <FATFS_LinkDriverEx+0x94>)
 800cdf2:	7251      	strb	r1, [r2, #9]
 800cdf4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cdf6:	7dbb      	ldrb	r3, [r7, #22]
 800cdf8:	3330      	adds	r3, #48	; 0x30
 800cdfa:	b2da      	uxtb	r2, r3
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	3301      	adds	r3, #1
 800ce04:	223a      	movs	r2, #58	; 0x3a
 800ce06:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	3302      	adds	r3, #2
 800ce0c:	222f      	movs	r2, #47	; 0x2f
 800ce0e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	3303      	adds	r3, #3
 800ce14:	2200      	movs	r2, #0
 800ce16:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ce1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	371c      	adds	r7, #28
 800ce22:	46bd      	mov	sp, r7
 800ce24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce28:	4770      	bx	lr
 800ce2a:	bf00      	nop
 800ce2c:	20034560 	.word	0x20034560

0800ce30 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b082      	sub	sp, #8
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	6839      	ldr	r1, [r7, #0]
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f7ff ffaa 	bl	800cd98 <FATFS_LinkDriverEx>
 800ce44:	4603      	mov	r3, r0
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3708      	adds	r7, #8
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
	...

0800ce50 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ce50:	b480      	push	{r7}
 800ce52:	b085      	sub	sp, #20
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	4603      	mov	r3, r0
 800ce58:	6039      	str	r1, [r7, #0]
 800ce5a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ce5c:	88fb      	ldrh	r3, [r7, #6]
 800ce5e:	2b7f      	cmp	r3, #127	; 0x7f
 800ce60:	d802      	bhi.n	800ce68 <ff_convert+0x18>
		c = chr;
 800ce62:	88fb      	ldrh	r3, [r7, #6]
 800ce64:	81fb      	strh	r3, [r7, #14]
 800ce66:	e025      	b.n	800ceb4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d00b      	beq.n	800ce86 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ce6e:	88fb      	ldrh	r3, [r7, #6]
 800ce70:	2bff      	cmp	r3, #255	; 0xff
 800ce72:	d805      	bhi.n	800ce80 <ff_convert+0x30>
 800ce74:	88fb      	ldrh	r3, [r7, #6]
 800ce76:	3b80      	subs	r3, #128	; 0x80
 800ce78:	4a12      	ldr	r2, [pc, #72]	; (800cec4 <ff_convert+0x74>)
 800ce7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce7e:	e000      	b.n	800ce82 <ff_convert+0x32>
 800ce80:	2300      	movs	r3, #0
 800ce82:	81fb      	strh	r3, [r7, #14]
 800ce84:	e016      	b.n	800ceb4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ce86:	2300      	movs	r3, #0
 800ce88:	81fb      	strh	r3, [r7, #14]
 800ce8a:	e009      	b.n	800cea0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ce8c:	89fb      	ldrh	r3, [r7, #14]
 800ce8e:	4a0d      	ldr	r2, [pc, #52]	; (800cec4 <ff_convert+0x74>)
 800ce90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce94:	88fa      	ldrh	r2, [r7, #6]
 800ce96:	429a      	cmp	r2, r3
 800ce98:	d006      	beq.n	800cea8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ce9a:	89fb      	ldrh	r3, [r7, #14]
 800ce9c:	3301      	adds	r3, #1
 800ce9e:	81fb      	strh	r3, [r7, #14]
 800cea0:	89fb      	ldrh	r3, [r7, #14]
 800cea2:	2b7f      	cmp	r3, #127	; 0x7f
 800cea4:	d9f2      	bls.n	800ce8c <ff_convert+0x3c>
 800cea6:	e000      	b.n	800ceaa <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800cea8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ceaa:	89fb      	ldrh	r3, [r7, #14]
 800ceac:	3380      	adds	r3, #128	; 0x80
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	b2db      	uxtb	r3, r3
 800ceb2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ceb4:	89fb      	ldrh	r3, [r7, #14]
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3714      	adds	r7, #20
 800ceba:	46bd      	mov	sp, r7
 800cebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec0:	4770      	bx	lr
 800cec2:	bf00      	nop
 800cec4:	08010f40 	.word	0x08010f40

0800cec8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800cec8:	b480      	push	{r7}
 800ceca:	b087      	sub	sp, #28
 800cecc:	af00      	add	r7, sp, #0
 800cece:	4603      	mov	r3, r0
 800ced0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ced2:	88fb      	ldrh	r3, [r7, #6]
 800ced4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ced8:	d201      	bcs.n	800cede <ff_wtoupper+0x16>
 800ceda:	4b3e      	ldr	r3, [pc, #248]	; (800cfd4 <ff_wtoupper+0x10c>)
 800cedc:	e000      	b.n	800cee0 <ff_wtoupper+0x18>
 800cede:	4b3e      	ldr	r3, [pc, #248]	; (800cfd8 <ff_wtoupper+0x110>)
 800cee0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	1c9a      	adds	r2, r3, #2
 800cee6:	617a      	str	r2, [r7, #20]
 800cee8:	881b      	ldrh	r3, [r3, #0]
 800ceea:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ceec:	8a7b      	ldrh	r3, [r7, #18]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d068      	beq.n	800cfc4 <ff_wtoupper+0xfc>
 800cef2:	88fa      	ldrh	r2, [r7, #6]
 800cef4:	8a7b      	ldrh	r3, [r7, #18]
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d364      	bcc.n	800cfc4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	1c9a      	adds	r2, r3, #2
 800cefe:	617a      	str	r2, [r7, #20]
 800cf00:	881b      	ldrh	r3, [r3, #0]
 800cf02:	823b      	strh	r3, [r7, #16]
 800cf04:	8a3b      	ldrh	r3, [r7, #16]
 800cf06:	0a1b      	lsrs	r3, r3, #8
 800cf08:	81fb      	strh	r3, [r7, #14]
 800cf0a:	8a3b      	ldrh	r3, [r7, #16]
 800cf0c:	b2db      	uxtb	r3, r3
 800cf0e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800cf10:	88fa      	ldrh	r2, [r7, #6]
 800cf12:	8a79      	ldrh	r1, [r7, #18]
 800cf14:	8a3b      	ldrh	r3, [r7, #16]
 800cf16:	440b      	add	r3, r1
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	da49      	bge.n	800cfb0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800cf1c:	89fb      	ldrh	r3, [r7, #14]
 800cf1e:	2b08      	cmp	r3, #8
 800cf20:	d84f      	bhi.n	800cfc2 <ff_wtoupper+0xfa>
 800cf22:	a201      	add	r2, pc, #4	; (adr r2, 800cf28 <ff_wtoupper+0x60>)
 800cf24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf28:	0800cf4d 	.word	0x0800cf4d
 800cf2c:	0800cf5f 	.word	0x0800cf5f
 800cf30:	0800cf75 	.word	0x0800cf75
 800cf34:	0800cf7d 	.word	0x0800cf7d
 800cf38:	0800cf85 	.word	0x0800cf85
 800cf3c:	0800cf8d 	.word	0x0800cf8d
 800cf40:	0800cf95 	.word	0x0800cf95
 800cf44:	0800cf9d 	.word	0x0800cf9d
 800cf48:	0800cfa5 	.word	0x0800cfa5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800cf4c:	88fa      	ldrh	r2, [r7, #6]
 800cf4e:	8a7b      	ldrh	r3, [r7, #18]
 800cf50:	1ad3      	subs	r3, r2, r3
 800cf52:	005b      	lsls	r3, r3, #1
 800cf54:	697a      	ldr	r2, [r7, #20]
 800cf56:	4413      	add	r3, r2
 800cf58:	881b      	ldrh	r3, [r3, #0]
 800cf5a:	80fb      	strh	r3, [r7, #6]
 800cf5c:	e027      	b.n	800cfae <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800cf5e:	88fa      	ldrh	r2, [r7, #6]
 800cf60:	8a7b      	ldrh	r3, [r7, #18]
 800cf62:	1ad3      	subs	r3, r2, r3
 800cf64:	b29b      	uxth	r3, r3
 800cf66:	f003 0301 	and.w	r3, r3, #1
 800cf6a:	b29b      	uxth	r3, r3
 800cf6c:	88fa      	ldrh	r2, [r7, #6]
 800cf6e:	1ad3      	subs	r3, r2, r3
 800cf70:	80fb      	strh	r3, [r7, #6]
 800cf72:	e01c      	b.n	800cfae <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800cf74:	88fb      	ldrh	r3, [r7, #6]
 800cf76:	3b10      	subs	r3, #16
 800cf78:	80fb      	strh	r3, [r7, #6]
 800cf7a:	e018      	b.n	800cfae <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800cf7c:	88fb      	ldrh	r3, [r7, #6]
 800cf7e:	3b20      	subs	r3, #32
 800cf80:	80fb      	strh	r3, [r7, #6]
 800cf82:	e014      	b.n	800cfae <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800cf84:	88fb      	ldrh	r3, [r7, #6]
 800cf86:	3b30      	subs	r3, #48	; 0x30
 800cf88:	80fb      	strh	r3, [r7, #6]
 800cf8a:	e010      	b.n	800cfae <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800cf8c:	88fb      	ldrh	r3, [r7, #6]
 800cf8e:	3b1a      	subs	r3, #26
 800cf90:	80fb      	strh	r3, [r7, #6]
 800cf92:	e00c      	b.n	800cfae <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800cf94:	88fb      	ldrh	r3, [r7, #6]
 800cf96:	3308      	adds	r3, #8
 800cf98:	80fb      	strh	r3, [r7, #6]
 800cf9a:	e008      	b.n	800cfae <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800cf9c:	88fb      	ldrh	r3, [r7, #6]
 800cf9e:	3b50      	subs	r3, #80	; 0x50
 800cfa0:	80fb      	strh	r3, [r7, #6]
 800cfa2:	e004      	b.n	800cfae <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800cfa4:	88fb      	ldrh	r3, [r7, #6]
 800cfa6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800cfaa:	80fb      	strh	r3, [r7, #6]
 800cfac:	bf00      	nop
			}
			break;
 800cfae:	e008      	b.n	800cfc2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800cfb0:	89fb      	ldrh	r3, [r7, #14]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d195      	bne.n	800cee2 <ff_wtoupper+0x1a>
 800cfb6:	8a3b      	ldrh	r3, [r7, #16]
 800cfb8:	005b      	lsls	r3, r3, #1
 800cfba:	697a      	ldr	r2, [r7, #20]
 800cfbc:	4413      	add	r3, r2
 800cfbe:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800cfc0:	e78f      	b.n	800cee2 <ff_wtoupper+0x1a>
			break;
 800cfc2:	bf00      	nop
	}

	return chr;
 800cfc4:	88fb      	ldrh	r3, [r7, #6]
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	371c      	adds	r7, #28
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd0:	4770      	bx	lr
 800cfd2:	bf00      	nop
 800cfd4:	08011040 	.word	0x08011040
 800cfd8:	08011234 	.word	0x08011234

0800cfdc <replaceWordInString>:
#include <stdlib.h>
#include <string.h>
#include <ctype.h> */
#include "soal_common.h"

char* replaceWordInString(const char* s, const char* oldW, const char* newW){
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b08a      	sub	sp, #40	; 0x28
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	60f8      	str	r0, [r7, #12]
 800cfe4:	60b9      	str	r1, [r7, #8]
 800cfe6:	607a      	str	r2, [r7, #4]
    char* result;
    int i, cnt = 0;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	623b      	str	r3, [r7, #32]
    int newWlen = strlen(newW);
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f7f3 f90f 	bl	8000210 <strlen>
 800cff2:	4603      	mov	r3, r0
 800cff4:	61fb      	str	r3, [r7, #28]
    int oldWlen = strlen(oldW);
 800cff6:	68b8      	ldr	r0, [r7, #8]
 800cff8:	f7f3 f90a 	bl	8000210 <strlen>
 800cffc:	4603      	mov	r3, r0
 800cffe:	61bb      	str	r3, [r7, #24]
    for (i = 0; s[i] != '\0'; i++) {
 800d000:	2300      	movs	r3, #0
 800d002:	627b      	str	r3, [r7, #36]	; 0x24
 800d004:	e017      	b.n	800d036 <replaceWordInString+0x5a>
        if (strstr(&s[i], oldW) == &s[i]) {
 800d006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d008:	68fa      	ldr	r2, [r7, #12]
 800d00a:	4413      	add	r3, r2
 800d00c:	68b9      	ldr	r1, [r7, #8]
 800d00e:	4618      	mov	r0, r3
 800d010:	f000 fc3b 	bl	800d88a <strstr>
 800d014:	4601      	mov	r1, r0
 800d016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d018:	68fa      	ldr	r2, [r7, #12]
 800d01a:	4413      	add	r3, r2
 800d01c:	4299      	cmp	r1, r3
 800d01e:	d107      	bne.n	800d030 <replaceWordInString+0x54>
            cnt++;
 800d020:	6a3b      	ldr	r3, [r7, #32]
 800d022:	3301      	adds	r3, #1
 800d024:	623b      	str	r3, [r7, #32]
            i += oldWlen - 1;
 800d026:	69bb      	ldr	r3, [r7, #24]
 800d028:	3b01      	subs	r3, #1
 800d02a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d02c:	4413      	add	r3, r2
 800d02e:	627b      	str	r3, [r7, #36]	; 0x24
    for (i = 0; s[i] != '\0'; i++) {
 800d030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d032:	3301      	adds	r3, #1
 800d034:	627b      	str	r3, [r7, #36]	; 0x24
 800d036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d038:	68fa      	ldr	r2, [r7, #12]
 800d03a:	4413      	add	r3, r2
 800d03c:	781b      	ldrb	r3, [r3, #0]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d1e1      	bne.n	800d006 <replaceWordInString+0x2a>
        }
    }
    result = (char*)malloc(i + cnt * (newWlen - oldWlen) + 1);
 800d042:	69fa      	ldr	r2, [r7, #28]
 800d044:	69bb      	ldr	r3, [r7, #24]
 800d046:	1ad3      	subs	r3, r2, r3
 800d048:	6a3a      	ldr	r2, [r7, #32]
 800d04a:	fb03 f202 	mul.w	r2, r3, r2
 800d04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d050:	4413      	add	r3, r2
 800d052:	3301      	adds	r3, #1
 800d054:	4618      	mov	r0, r3
 800d056:	f000 fa49 	bl	800d4ec <malloc>
 800d05a:	4603      	mov	r3, r0
 800d05c:	617b      	str	r3, [r7, #20]

    i = 0;
 800d05e:	2300      	movs	r3, #0
 800d060:	627b      	str	r3, [r7, #36]	; 0x24
    while (*s) {
 800d062:	e022      	b.n	800d0aa <replaceWordInString+0xce>
        if (strstr(s, oldW) == s) {
 800d064:	68b9      	ldr	r1, [r7, #8]
 800d066:	68f8      	ldr	r0, [r7, #12]
 800d068:	f000 fc0f 	bl	800d88a <strstr>
 800d06c:	4602      	mov	r2, r0
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	4293      	cmp	r3, r2
 800d072:	d10f      	bne.n	800d094 <replaceWordInString+0xb8>
            strcpy(&result[i], newW);
 800d074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d076:	697a      	ldr	r2, [r7, #20]
 800d078:	4413      	add	r3, r2
 800d07a:	6879      	ldr	r1, [r7, #4]
 800d07c:	4618      	mov	r0, r3
 800d07e:	f000 fbfc 	bl	800d87a <strcpy>
            i += newWlen;
 800d082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d084:	69fb      	ldr	r3, [r7, #28]
 800d086:	4413      	add	r3, r2
 800d088:	627b      	str	r3, [r7, #36]	; 0x24
            s += oldWlen;
 800d08a:	69bb      	ldr	r3, [r7, #24]
 800d08c:	68fa      	ldr	r2, [r7, #12]
 800d08e:	4413      	add	r3, r2
 800d090:	60fb      	str	r3, [r7, #12]
 800d092:	e00a      	b.n	800d0aa <replaceWordInString+0xce>
        }
        else
            result[i++] = *s++;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	1c5a      	adds	r2, r3, #1
 800d098:	60fa      	str	r2, [r7, #12]
 800d09a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d09c:	1c51      	adds	r1, r2, #1
 800d09e:	6279      	str	r1, [r7, #36]	; 0x24
 800d0a0:	4611      	mov	r1, r2
 800d0a2:	697a      	ldr	r2, [r7, #20]
 800d0a4:	440a      	add	r2, r1
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	7013      	strb	r3, [r2, #0]
    while (*s) {
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	781b      	ldrb	r3, [r3, #0]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d1d8      	bne.n	800d064 <replaceWordInString+0x88>
    }

    result[i] = '\0';
 800d0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b4:	697a      	ldr	r2, [r7, #20]
 800d0b6:	4413      	add	r3, r2
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	701a      	strb	r2, [r3, #0]
    return result;
 800d0bc:	697b      	ldr	r3, [r7, #20]
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3728      	adds	r7, #40	; 0x28
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}
	...

0800d0c8 <trim>:

char *trim(char *s) {
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b088      	sub	sp, #32
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
	int count = -1;
 800d0d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0d4:	61fb      	str	r3, [r7, #28]
	for(int i=0;i<strlen(s)+1;i++){
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	61bb      	str	r3, [r7, #24]
 800d0da:	e011      	b.n	800d100 <trim+0x38>
		if(isspace(s[i])==0){
 800d0dc:	69bb      	ldr	r3, [r7, #24]
 800d0de:	687a      	ldr	r2, [r7, #4]
 800d0e0:	4413      	add	r3, r2
 800d0e2:	781b      	ldrb	r3, [r3, #0]
 800d0e4:	3301      	adds	r3, #1
 800d0e6:	4a20      	ldr	r2, [pc, #128]	; (800d168 <trim+0xa0>)
 800d0e8:	4413      	add	r3, r2
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	f003 0308 	and.w	r3, r3, #8
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d102      	bne.n	800d0fa <trim+0x32>
			count = i;
 800d0f4:	69bb      	ldr	r3, [r7, #24]
 800d0f6:	61fb      	str	r3, [r7, #28]
			break;
 800d0f8:	e00a      	b.n	800d110 <trim+0x48>
	for(int i=0;i<strlen(s)+1;i++){
 800d0fa:	69bb      	ldr	r3, [r7, #24]
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	61bb      	str	r3, [r7, #24]
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f7f3 f885 	bl	8000210 <strlen>
 800d106:	4603      	mov	r3, r0
 800d108:	1c5a      	adds	r2, r3, #1
 800d10a:	69bb      	ldr	r3, [r7, #24]
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d8e5      	bhi.n	800d0dc <trim+0x14>
		}
	}

	char *result = calloc((strlen(s)+1),sizeof(char));
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f7f3 f87d 	bl	8000210 <strlen>
 800d116:	4603      	mov	r3, r0
 800d118:	3301      	adds	r3, #1
 800d11a:	2101      	movs	r1, #1
 800d11c:	4618      	mov	r0, r3
 800d11e:	f000 f9b3 	bl	800d488 <calloc>
 800d122:	4603      	mov	r3, r0
 800d124:	60fb      	str	r3, [r7, #12]
	int count1 = -1;
 800d126:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d12a:	617b      	str	r3, [r7, #20]
	for(int i=count;i<strlen(s)+1;i++){
 800d12c:	69fb      	ldr	r3, [r7, #28]
 800d12e:	613b      	str	r3, [r7, #16]
 800d130:	e00d      	b.n	800d14e <trim+0x86>
		count1++;
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	3301      	adds	r3, #1
 800d136:	617b      	str	r3, [r7, #20]
		result[count1] = s[i];
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	687a      	ldr	r2, [r7, #4]
 800d13c:	441a      	add	r2, r3
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	68f9      	ldr	r1, [r7, #12]
 800d142:	440b      	add	r3, r1
 800d144:	7812      	ldrb	r2, [r2, #0]
 800d146:	701a      	strb	r2, [r3, #0]
	for(int i=count;i<strlen(s)+1;i++){
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	3301      	adds	r3, #1
 800d14c:	613b      	str	r3, [r7, #16]
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f7f3 f85e 	bl	8000210 <strlen>
 800d154:	4603      	mov	r3, r0
 800d156:	1c5a      	adds	r2, r3, #1
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d8e9      	bhi.n	800d132 <trim+0x6a>
	}

	return result;
 800d15e:	68fb      	ldr	r3, [r7, #12]
}
 800d160:	4618      	mov	r0, r3
 800d162:	3720      	adds	r7, #32
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	080112f0 	.word	0x080112f0

0800d16c <shift_trim>:

char *shift_trim(char *s) {
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b088      	sub	sp, #32
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
	int count;
	for(int i=1;i<strlen(s)+1;i++){
 800d174:	2301      	movs	r3, #1
 800d176:	61bb      	str	r3, [r7, #24]
 800d178:	e01d      	b.n	800d1b6 <shift_trim+0x4a>
		count = strlen(s)-i;
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f7f3 f848 	bl	8000210 <strlen>
 800d180:	4602      	mov	r2, r0
 800d182:	69bb      	ldr	r3, [r7, #24]
 800d184:	1ad3      	subs	r3, r2, r3
 800d186:	61fb      	str	r3, [r7, #28]
		if(isspace(s[count])==0){
 800d188:	69fb      	ldr	r3, [r7, #28]
 800d18a:	687a      	ldr	r2, [r7, #4]
 800d18c:	4413      	add	r3, r2
 800d18e:	781b      	ldrb	r3, [r3, #0]
 800d190:	3301      	adds	r3, #1
 800d192:	4a23      	ldr	r2, [pc, #140]	; (800d220 <shift_trim+0xb4>)
 800d194:	4413      	add	r3, r2
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	f003 0308 	and.w	r3, r3, #8
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d107      	bne.n	800d1b0 <shift_trim+0x44>
			count = strlen(s)-i;
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f7f3 f835 	bl	8000210 <strlen>
 800d1a6:	4602      	mov	r2, r0
 800d1a8:	69bb      	ldr	r3, [r7, #24]
 800d1aa:	1ad3      	subs	r3, r2, r3
 800d1ac:	61fb      	str	r3, [r7, #28]
			break;
 800d1ae:	e00a      	b.n	800d1c6 <shift_trim+0x5a>
	for(int i=1;i<strlen(s)+1;i++){
 800d1b0:	69bb      	ldr	r3, [r7, #24]
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	61bb      	str	r3, [r7, #24]
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f7f3 f82a 	bl	8000210 <strlen>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	1c5a      	adds	r2, r3, #1
 800d1c0:	69bb      	ldr	r3, [r7, #24]
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	d8d9      	bhi.n	800d17a <shift_trim+0xe>
		}
	}
	char *result = calloc((strlen(s)+1),sizeof(char));
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f7f3 f822 	bl	8000210 <strlen>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	2101      	movs	r1, #1
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f000 f958 	bl	800d488 <calloc>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	60fb      	str	r3, [r7, #12]
	int count1 = -1;
 800d1dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d1e0:	617b      	str	r3, [r7, #20]
	for(int i=0;i<count+1;i++){
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	613b      	str	r3, [r7, #16]
 800d1e6:	e00d      	b.n	800d204 <shift_trim+0x98>
		count1++;
 800d1e8:	697b      	ldr	r3, [r7, #20]
 800d1ea:	3301      	adds	r3, #1
 800d1ec:	617b      	str	r3, [r7, #20]
		result[count1] = s[i];
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	687a      	ldr	r2, [r7, #4]
 800d1f2:	441a      	add	r2, r3
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	68f9      	ldr	r1, [r7, #12]
 800d1f8:	440b      	add	r3, r1
 800d1fa:	7812      	ldrb	r2, [r2, #0]
 800d1fc:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<count+1;i++){
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	3301      	adds	r3, #1
 800d202:	613b      	str	r3, [r7, #16]
 800d204:	69fa      	ldr	r2, [r7, #28]
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	429a      	cmp	r2, r3
 800d20a:	daed      	bge.n	800d1e8 <shift_trim+0x7c>
	}

	result = trim(result);
 800d20c:	68f8      	ldr	r0, [r7, #12]
 800d20e:	f7ff ff5b 	bl	800d0c8 <trim>
 800d212:	60f8      	str	r0, [r7, #12]
	return result;
 800d214:	68fb      	ldr	r3, [r7, #12]
}
 800d216:	4618      	mov	r0, r3
 800d218:	3720      	adds	r7, #32
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}
 800d21e:	bf00      	nop
 800d220:	080112f0 	.word	0x080112f0

0800d224 <get_data_from_rawdata>:

void get_data_from_rawdata(){
 800d224:	b580      	push	{r7, lr}
 800d226:	b0ce      	sub	sp, #312	; 0x138
 800d228:	af02      	add	r7, sp, #8
	char datain1[100],datain2[100],datain3[100];
	for(int i=0;i<number_data+1;i++){
 800d22a:	2300      	movs	r3, #0
 800d22c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800d230:	e03f      	b.n	800d2b2 <get_data_from_rawdata+0x8e>
		txtResult = replaceWordInString(dataraw[i],","," ");
 800d232:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d236:	22c8      	movs	r2, #200	; 0xc8
 800d238:	fb02 f303 	mul.w	r3, r2, r3
 800d23c:	4a23      	ldr	r2, [pc, #140]	; (800d2cc <get_data_from_rawdata+0xa8>)
 800d23e:	4413      	add	r3, r2
 800d240:	4a23      	ldr	r2, [pc, #140]	; (800d2d0 <get_data_from_rawdata+0xac>)
 800d242:	4924      	ldr	r1, [pc, #144]	; (800d2d4 <get_data_from_rawdata+0xb0>)
 800d244:	4618      	mov	r0, r3
 800d246:	f7ff fec9 	bl	800cfdc <replaceWordInString>
 800d24a:	4603      	mov	r3, r0
 800d24c:	4a22      	ldr	r2, [pc, #136]	; (800d2d8 <get_data_from_rawdata+0xb4>)
 800d24e:	6013      	str	r3, [r2, #0]
		sscanf(txtResult,"%s  %s  %s ",datain1,datain2, datain3);
 800d250:	4b21      	ldr	r3, [pc, #132]	; (800d2d8 <get_data_from_rawdata+0xb4>)
 800d252:	6818      	ldr	r0, [r3, #0]
 800d254:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800d258:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800d25c:	463b      	mov	r3, r7
 800d25e:	9300      	str	r3, [sp, #0]
 800d260:	460b      	mov	r3, r1
 800d262:	491e      	ldr	r1, [pc, #120]	; (800d2dc <get_data_from_rawdata+0xb8>)
 800d264:	f000 fa98 	bl	800d798 <siscanf>
		datainput_1[i] = atoi(datain1);
 800d268:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800d26c:	4618      	mov	r0, r3
 800d26e:	f000 f907 	bl	800d480 <atoi>
 800d272:	4602      	mov	r2, r0
 800d274:	491a      	ldr	r1, [pc, #104]	; (800d2e0 <get_data_from_rawdata+0xbc>)
 800d276:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d27a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		datainput_2[i] = atoi(datain2);
 800d27e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d282:	4618      	mov	r0, r3
 800d284:	f000 f8fc 	bl	800d480 <atoi>
 800d288:	4602      	mov	r2, r0
 800d28a:	4916      	ldr	r1, [pc, #88]	; (800d2e4 <get_data_from_rawdata+0xc0>)
 800d28c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		datainput_3[i] = atoi(datain3);
 800d294:	463b      	mov	r3, r7
 800d296:	4618      	mov	r0, r3
 800d298:	f000 f8f2 	bl	800d480 <atoi>
 800d29c:	4602      	mov	r2, r0
 800d29e:	4912      	ldr	r1, [pc, #72]	; (800d2e8 <get_data_from_rawdata+0xc4>)
 800d2a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d2a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0;i<number_data+1;i++){
 800d2a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d2ac:	3301      	adds	r3, #1
 800d2ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800d2b2:	4b0e      	ldr	r3, [pc, #56]	; (800d2ec <get_data_from_rawdata+0xc8>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	ddb9      	ble.n	800d232 <get_data_from_rawdata+0xe>
	}
}
 800d2be:	bf00      	nop
 800d2c0:	bf00      	nop
 800d2c2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	200035b4 	.word	0x200035b4
 800d2d0:	0800f3a8 	.word	0x0800f3a8
 800d2d4:	0800f3ac 	.word	0x0800f3ac
 800d2d8:	200034e8 	.word	0x200034e8
 800d2dc:	0800f3b0 	.word	0x0800f3b0
 800d2e0:	20000610 	.word	0x20000610
 800d2e4:	200015ac 	.word	0x200015ac
 800d2e8:	20002548 	.word	0x20002548
 800d2ec:	200034e4 	.word	0x200034e4

0800d2f0 <IntToStr>:
//		fprintf(fileoutput, "%s %s %s \n",  datatulis.Input1[i], datatulis.Input2[i],datatulis.Input3[i]);
//	}
//    fclose(fileoutput);
//}

char *IntToStr(int x){
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b084      	sub	sp, #16
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
	char *str=(char *)malloc(1 * sizeof (char));
 800d2f8:	2001      	movs	r0, #1
 800d2fa:	f000 f8f7 	bl	800d4ec <malloc>
 800d2fe:	4603      	mov	r3, r0
 800d300:	60fb      	str	r3, [r7, #12]
	sprintf(str, "%d", x);
 800d302:	687a      	ldr	r2, [r7, #4]
 800d304:	4904      	ldr	r1, [pc, #16]	; (800d318 <IntToStr+0x28>)
 800d306:	68f8      	ldr	r0, [r7, #12]
 800d308:	f000 fa26 	bl	800d758 <siprintf>
	return str;
 800d30c:	68fb      	ldr	r3, [r7, #12]
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3710      	adds	r7, #16
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
 800d316:	bf00      	nop
 800d318:	0800f3bc 	.word	0x0800f3bc

0800d31c <c_round>:

int c_round(double x){
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b082      	sub	sp, #8
 800d320:	af00      	add	r7, sp, #0
 800d322:	ed87 0b00 	vstr	d0, [r7]
	return x < 0 ? x - 0.5 : x + 0.5;
 800d326:	f04f 0200 	mov.w	r2, #0
 800d32a:	f04f 0300 	mov.w	r3, #0
 800d32e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d332:	f7f3 fbf3 	bl	8000b1c <__aeabi_dcmplt>
 800d336:	4603      	mov	r3, r0
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d00e      	beq.n	800d35a <c_round+0x3e>
 800d33c:	f04f 0200 	mov.w	r2, #0
 800d340:	4b0f      	ldr	r3, [pc, #60]	; (800d380 <c_round+0x64>)
 800d342:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d346:	f7f2 ffbf 	bl	80002c8 <__aeabi_dsub>
 800d34a:	4602      	mov	r2, r0
 800d34c:	460b      	mov	r3, r1
 800d34e:	4610      	mov	r0, r2
 800d350:	4619      	mov	r1, r3
 800d352:	f7f3 fc0b 	bl	8000b6c <__aeabi_d2iz>
 800d356:	4603      	mov	r3, r0
 800d358:	e00d      	b.n	800d376 <c_round+0x5a>
 800d35a:	f04f 0200 	mov.w	r2, #0
 800d35e:	4b08      	ldr	r3, [pc, #32]	; (800d380 <c_round+0x64>)
 800d360:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d364:	f7f2 ffb2 	bl	80002cc <__adddf3>
 800d368:	4602      	mov	r2, r0
 800d36a:	460b      	mov	r3, r1
 800d36c:	4610      	mov	r0, r2
 800d36e:	4619      	mov	r1, r3
 800d370:	f7f3 fbfc 	bl	8000b6c <__aeabi_d2iz>
 800d374:	4603      	mov	r3, r0
}
 800d376:	4618      	mov	r0, r3
 800d378:	3708      	adds	r7, #8
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}
 800d37e:	bf00      	nop
 800d380:	3fe00000 	.word	0x3fe00000

0800d384 <c_modulus>:

double c_modulus(double a,double b){
 800d384:	b5b0      	push	{r4, r5, r7, lr}
 800d386:	b086      	sub	sp, #24
 800d388:	af00      	add	r7, sp, #0
 800d38a:	ed87 0b02 	vstr	d0, [r7, #8]
 800d38e:	ed87 1b00 	vstr	d1, [r7]
	double tempres;
	tempres = c_round(b*((double)(a/b)-(int)(a/b)));
 800d392:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d396:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d39a:	f7f3 fa77 	bl	800088c <__aeabi_ddiv>
 800d39e:	4602      	mov	r2, r0
 800d3a0:	460b      	mov	r3, r1
 800d3a2:	4614      	mov	r4, r2
 800d3a4:	461d      	mov	r5, r3
 800d3a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d3ae:	f7f3 fa6d 	bl	800088c <__aeabi_ddiv>
 800d3b2:	4602      	mov	r2, r0
 800d3b4:	460b      	mov	r3, r1
 800d3b6:	4610      	mov	r0, r2
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	f7f3 fbd7 	bl	8000b6c <__aeabi_d2iz>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f7f3 f8cf 	bl	8000564 <__aeabi_i2d>
 800d3c6:	4602      	mov	r2, r0
 800d3c8:	460b      	mov	r3, r1
 800d3ca:	4620      	mov	r0, r4
 800d3cc:	4629      	mov	r1, r5
 800d3ce:	f7f2 ff7b 	bl	80002c8 <__aeabi_dsub>
 800d3d2:	4602      	mov	r2, r0
 800d3d4:	460b      	mov	r3, r1
 800d3d6:	4610      	mov	r0, r2
 800d3d8:	4619      	mov	r1, r3
 800d3da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3de:	f7f3 f92b 	bl	8000638 <__aeabi_dmul>
 800d3e2:	4602      	mov	r2, r0
 800d3e4:	460b      	mov	r3, r1
 800d3e6:	ec43 2b17 	vmov	d7, r2, r3
 800d3ea:	eeb0 0a47 	vmov.f32	s0, s14
 800d3ee:	eef0 0a67 	vmov.f32	s1, s15
 800d3f2:	f7ff ff93 	bl	800d31c <c_round>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7f3 f8b3 	bl	8000564 <__aeabi_i2d>
 800d3fe:	4602      	mov	r2, r0
 800d400:	460b      	mov	r3, r1
 800d402:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return tempres;
 800d406:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d40a:	ec43 2b17 	vmov	d7, r2, r3
}
 800d40e:	eeb0 0a47 	vmov.f32	s0, s14
 800d412:	eef0 0a67 	vmov.f32	s1, s15
 800d416:	3718      	adds	r7, #24
 800d418:	46bd      	mov	sp, r7
 800d41a:	bdb0      	pop	{r4, r5, r7, pc}
 800d41c:	0000      	movs	r0, r0
	...

0800d420 <isGanjil>:

int isGanjil(int num)
{
 800d420:	b590      	push	{r4, r7, lr}
 800d422:	b083      	sub	sp, #12
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
	if (num == 0 || num == 1)
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d002      	beq.n	800d434 <isGanjil+0x14>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2b01      	cmp	r3, #1
 800d432:	d101      	bne.n	800d438 <isGanjil+0x18>
		return 1;
 800d434:	2301      	movs	r3, #1
 800d436:	e01a      	b.n	800d46e <isGanjil+0x4e>
	else
		return (c_modulus(num,2) == 0 ? 0 : 1) ;
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f7f3 f893 	bl	8000564 <__aeabi_i2d>
 800d43e:	4602      	mov	r2, r0
 800d440:	460b      	mov	r3, r1
 800d442:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 800d478 <isGanjil+0x58>
 800d446:	ec43 2b10 	vmov	d0, r2, r3
 800d44a:	f7ff ff9b 	bl	800d384 <c_modulus>
 800d44e:	ec51 0b10 	vmov	r0, r1, d0
 800d452:	2301      	movs	r3, #1
 800d454:	461c      	mov	r4, r3
 800d456:	f04f 0200 	mov.w	r2, #0
 800d45a:	f04f 0300 	mov.w	r3, #0
 800d45e:	f7f3 fb53 	bl	8000b08 <__aeabi_dcmpeq>
 800d462:	4603      	mov	r3, r0
 800d464:	2b00      	cmp	r3, #0
 800d466:	d001      	beq.n	800d46c <isGanjil+0x4c>
 800d468:	2300      	movs	r3, #0
 800d46a:	461c      	mov	r4, r3
 800d46c:	b2e3      	uxtb	r3, r4
}
 800d46e:	4618      	mov	r0, r3
 800d470:	370c      	adds	r7, #12
 800d472:	46bd      	mov	sp, r7
 800d474:	bd90      	pop	{r4, r7, pc}
 800d476:	bf00      	nop
 800d478:	00000000 	.word	0x00000000
 800d47c:	40000000 	.word	0x40000000

0800d480 <atoi>:
 800d480:	220a      	movs	r2, #10
 800d482:	2100      	movs	r1, #0
 800d484:	f000 ba9c 	b.w	800d9c0 <strtol>

0800d488 <calloc>:
 800d488:	4b02      	ldr	r3, [pc, #8]	; (800d494 <calloc+0xc>)
 800d48a:	460a      	mov	r2, r1
 800d48c:	4601      	mov	r1, r0
 800d48e:	6818      	ldr	r0, [r3, #0]
 800d490:	f000 b844 	b.w	800d51c <_calloc_r>
 800d494:	20000040 	.word	0x20000040

0800d498 <__errno>:
 800d498:	4b01      	ldr	r3, [pc, #4]	; (800d4a0 <__errno+0x8>)
 800d49a:	6818      	ldr	r0, [r3, #0]
 800d49c:	4770      	bx	lr
 800d49e:	bf00      	nop
 800d4a0:	20000040 	.word	0x20000040

0800d4a4 <__libc_init_array>:
 800d4a4:	b570      	push	{r4, r5, r6, lr}
 800d4a6:	4d0d      	ldr	r5, [pc, #52]	; (800d4dc <__libc_init_array+0x38>)
 800d4a8:	4c0d      	ldr	r4, [pc, #52]	; (800d4e0 <__libc_init_array+0x3c>)
 800d4aa:	1b64      	subs	r4, r4, r5
 800d4ac:	10a4      	asrs	r4, r4, #2
 800d4ae:	2600      	movs	r6, #0
 800d4b0:	42a6      	cmp	r6, r4
 800d4b2:	d109      	bne.n	800d4c8 <__libc_init_array+0x24>
 800d4b4:	4d0b      	ldr	r5, [pc, #44]	; (800d4e4 <__libc_init_array+0x40>)
 800d4b6:	4c0c      	ldr	r4, [pc, #48]	; (800d4e8 <__libc_init_array+0x44>)
 800d4b8:	f001 fe94 	bl	800f1e4 <_init>
 800d4bc:	1b64      	subs	r4, r4, r5
 800d4be:	10a4      	asrs	r4, r4, #2
 800d4c0:	2600      	movs	r6, #0
 800d4c2:	42a6      	cmp	r6, r4
 800d4c4:	d105      	bne.n	800d4d2 <__libc_init_array+0x2e>
 800d4c6:	bd70      	pop	{r4, r5, r6, pc}
 800d4c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4cc:	4798      	blx	r3
 800d4ce:	3601      	adds	r6, #1
 800d4d0:	e7ee      	b.n	800d4b0 <__libc_init_array+0xc>
 800d4d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4d6:	4798      	blx	r3
 800d4d8:	3601      	adds	r6, #1
 800d4da:	e7f2      	b.n	800d4c2 <__libc_init_array+0x1e>
 800d4dc:	080114b0 	.word	0x080114b0
 800d4e0:	080114b0 	.word	0x080114b0
 800d4e4:	080114b0 	.word	0x080114b0
 800d4e8:	080114b4 	.word	0x080114b4

0800d4ec <malloc>:
 800d4ec:	4b02      	ldr	r3, [pc, #8]	; (800d4f8 <malloc+0xc>)
 800d4ee:	4601      	mov	r1, r0
 800d4f0:	6818      	ldr	r0, [r3, #0]
 800d4f2:	f000 b895 	b.w	800d620 <_malloc_r>
 800d4f6:	bf00      	nop
 800d4f8:	20000040 	.word	0x20000040

0800d4fc <free>:
 800d4fc:	4b02      	ldr	r3, [pc, #8]	; (800d508 <free+0xc>)
 800d4fe:	4601      	mov	r1, r0
 800d500:	6818      	ldr	r0, [r3, #0]
 800d502:	f000 b821 	b.w	800d548 <_free_r>
 800d506:	bf00      	nop
 800d508:	20000040 	.word	0x20000040

0800d50c <memset>:
 800d50c:	4402      	add	r2, r0
 800d50e:	4603      	mov	r3, r0
 800d510:	4293      	cmp	r3, r2
 800d512:	d100      	bne.n	800d516 <memset+0xa>
 800d514:	4770      	bx	lr
 800d516:	f803 1b01 	strb.w	r1, [r3], #1
 800d51a:	e7f9      	b.n	800d510 <memset+0x4>

0800d51c <_calloc_r>:
 800d51c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d51e:	fba1 2402 	umull	r2, r4, r1, r2
 800d522:	b94c      	cbnz	r4, 800d538 <_calloc_r+0x1c>
 800d524:	4611      	mov	r1, r2
 800d526:	9201      	str	r2, [sp, #4]
 800d528:	f000 f87a 	bl	800d620 <_malloc_r>
 800d52c:	9a01      	ldr	r2, [sp, #4]
 800d52e:	4605      	mov	r5, r0
 800d530:	b930      	cbnz	r0, 800d540 <_calloc_r+0x24>
 800d532:	4628      	mov	r0, r5
 800d534:	b003      	add	sp, #12
 800d536:	bd30      	pop	{r4, r5, pc}
 800d538:	220c      	movs	r2, #12
 800d53a:	6002      	str	r2, [r0, #0]
 800d53c:	2500      	movs	r5, #0
 800d53e:	e7f8      	b.n	800d532 <_calloc_r+0x16>
 800d540:	4621      	mov	r1, r4
 800d542:	f7ff ffe3 	bl	800d50c <memset>
 800d546:	e7f4      	b.n	800d532 <_calloc_r+0x16>

0800d548 <_free_r>:
 800d548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d54a:	2900      	cmp	r1, #0
 800d54c:	d044      	beq.n	800d5d8 <_free_r+0x90>
 800d54e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d552:	9001      	str	r0, [sp, #4]
 800d554:	2b00      	cmp	r3, #0
 800d556:	f1a1 0404 	sub.w	r4, r1, #4
 800d55a:	bfb8      	it	lt
 800d55c:	18e4      	addlt	r4, r4, r3
 800d55e:	f000 fb65 	bl	800dc2c <__malloc_lock>
 800d562:	4a1e      	ldr	r2, [pc, #120]	; (800d5dc <_free_r+0x94>)
 800d564:	9801      	ldr	r0, [sp, #4]
 800d566:	6813      	ldr	r3, [r2, #0]
 800d568:	b933      	cbnz	r3, 800d578 <_free_r+0x30>
 800d56a:	6063      	str	r3, [r4, #4]
 800d56c:	6014      	str	r4, [r2, #0]
 800d56e:	b003      	add	sp, #12
 800d570:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d574:	f000 bb60 	b.w	800dc38 <__malloc_unlock>
 800d578:	42a3      	cmp	r3, r4
 800d57a:	d908      	bls.n	800d58e <_free_r+0x46>
 800d57c:	6825      	ldr	r5, [r4, #0]
 800d57e:	1961      	adds	r1, r4, r5
 800d580:	428b      	cmp	r3, r1
 800d582:	bf01      	itttt	eq
 800d584:	6819      	ldreq	r1, [r3, #0]
 800d586:	685b      	ldreq	r3, [r3, #4]
 800d588:	1949      	addeq	r1, r1, r5
 800d58a:	6021      	streq	r1, [r4, #0]
 800d58c:	e7ed      	b.n	800d56a <_free_r+0x22>
 800d58e:	461a      	mov	r2, r3
 800d590:	685b      	ldr	r3, [r3, #4]
 800d592:	b10b      	cbz	r3, 800d598 <_free_r+0x50>
 800d594:	42a3      	cmp	r3, r4
 800d596:	d9fa      	bls.n	800d58e <_free_r+0x46>
 800d598:	6811      	ldr	r1, [r2, #0]
 800d59a:	1855      	adds	r5, r2, r1
 800d59c:	42a5      	cmp	r5, r4
 800d59e:	d10b      	bne.n	800d5b8 <_free_r+0x70>
 800d5a0:	6824      	ldr	r4, [r4, #0]
 800d5a2:	4421      	add	r1, r4
 800d5a4:	1854      	adds	r4, r2, r1
 800d5a6:	42a3      	cmp	r3, r4
 800d5a8:	6011      	str	r1, [r2, #0]
 800d5aa:	d1e0      	bne.n	800d56e <_free_r+0x26>
 800d5ac:	681c      	ldr	r4, [r3, #0]
 800d5ae:	685b      	ldr	r3, [r3, #4]
 800d5b0:	6053      	str	r3, [r2, #4]
 800d5b2:	4421      	add	r1, r4
 800d5b4:	6011      	str	r1, [r2, #0]
 800d5b6:	e7da      	b.n	800d56e <_free_r+0x26>
 800d5b8:	d902      	bls.n	800d5c0 <_free_r+0x78>
 800d5ba:	230c      	movs	r3, #12
 800d5bc:	6003      	str	r3, [r0, #0]
 800d5be:	e7d6      	b.n	800d56e <_free_r+0x26>
 800d5c0:	6825      	ldr	r5, [r4, #0]
 800d5c2:	1961      	adds	r1, r4, r5
 800d5c4:	428b      	cmp	r3, r1
 800d5c6:	bf04      	itt	eq
 800d5c8:	6819      	ldreq	r1, [r3, #0]
 800d5ca:	685b      	ldreq	r3, [r3, #4]
 800d5cc:	6063      	str	r3, [r4, #4]
 800d5ce:	bf04      	itt	eq
 800d5d0:	1949      	addeq	r1, r1, r5
 800d5d2:	6021      	streq	r1, [r4, #0]
 800d5d4:	6054      	str	r4, [r2, #4]
 800d5d6:	e7ca      	b.n	800d56e <_free_r+0x26>
 800d5d8:	b003      	add	sp, #12
 800d5da:	bd30      	pop	{r4, r5, pc}
 800d5dc:	2003456c 	.word	0x2003456c

0800d5e0 <sbrk_aligned>:
 800d5e0:	b570      	push	{r4, r5, r6, lr}
 800d5e2:	4e0e      	ldr	r6, [pc, #56]	; (800d61c <sbrk_aligned+0x3c>)
 800d5e4:	460c      	mov	r4, r1
 800d5e6:	6831      	ldr	r1, [r6, #0]
 800d5e8:	4605      	mov	r5, r0
 800d5ea:	b911      	cbnz	r1, 800d5f2 <sbrk_aligned+0x12>
 800d5ec:	f000 f8a4 	bl	800d738 <_sbrk_r>
 800d5f0:	6030      	str	r0, [r6, #0]
 800d5f2:	4621      	mov	r1, r4
 800d5f4:	4628      	mov	r0, r5
 800d5f6:	f000 f89f 	bl	800d738 <_sbrk_r>
 800d5fa:	1c43      	adds	r3, r0, #1
 800d5fc:	d00a      	beq.n	800d614 <sbrk_aligned+0x34>
 800d5fe:	1cc4      	adds	r4, r0, #3
 800d600:	f024 0403 	bic.w	r4, r4, #3
 800d604:	42a0      	cmp	r0, r4
 800d606:	d007      	beq.n	800d618 <sbrk_aligned+0x38>
 800d608:	1a21      	subs	r1, r4, r0
 800d60a:	4628      	mov	r0, r5
 800d60c:	f000 f894 	bl	800d738 <_sbrk_r>
 800d610:	3001      	adds	r0, #1
 800d612:	d101      	bne.n	800d618 <sbrk_aligned+0x38>
 800d614:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d618:	4620      	mov	r0, r4
 800d61a:	bd70      	pop	{r4, r5, r6, pc}
 800d61c:	20034570 	.word	0x20034570

0800d620 <_malloc_r>:
 800d620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d624:	1ccd      	adds	r5, r1, #3
 800d626:	f025 0503 	bic.w	r5, r5, #3
 800d62a:	3508      	adds	r5, #8
 800d62c:	2d0c      	cmp	r5, #12
 800d62e:	bf38      	it	cc
 800d630:	250c      	movcc	r5, #12
 800d632:	2d00      	cmp	r5, #0
 800d634:	4607      	mov	r7, r0
 800d636:	db01      	blt.n	800d63c <_malloc_r+0x1c>
 800d638:	42a9      	cmp	r1, r5
 800d63a:	d905      	bls.n	800d648 <_malloc_r+0x28>
 800d63c:	230c      	movs	r3, #12
 800d63e:	603b      	str	r3, [r7, #0]
 800d640:	2600      	movs	r6, #0
 800d642:	4630      	mov	r0, r6
 800d644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d648:	4e2e      	ldr	r6, [pc, #184]	; (800d704 <_malloc_r+0xe4>)
 800d64a:	f000 faef 	bl	800dc2c <__malloc_lock>
 800d64e:	6833      	ldr	r3, [r6, #0]
 800d650:	461c      	mov	r4, r3
 800d652:	bb34      	cbnz	r4, 800d6a2 <_malloc_r+0x82>
 800d654:	4629      	mov	r1, r5
 800d656:	4638      	mov	r0, r7
 800d658:	f7ff ffc2 	bl	800d5e0 <sbrk_aligned>
 800d65c:	1c43      	adds	r3, r0, #1
 800d65e:	4604      	mov	r4, r0
 800d660:	d14d      	bne.n	800d6fe <_malloc_r+0xde>
 800d662:	6834      	ldr	r4, [r6, #0]
 800d664:	4626      	mov	r6, r4
 800d666:	2e00      	cmp	r6, #0
 800d668:	d140      	bne.n	800d6ec <_malloc_r+0xcc>
 800d66a:	6823      	ldr	r3, [r4, #0]
 800d66c:	4631      	mov	r1, r6
 800d66e:	4638      	mov	r0, r7
 800d670:	eb04 0803 	add.w	r8, r4, r3
 800d674:	f000 f860 	bl	800d738 <_sbrk_r>
 800d678:	4580      	cmp	r8, r0
 800d67a:	d13a      	bne.n	800d6f2 <_malloc_r+0xd2>
 800d67c:	6821      	ldr	r1, [r4, #0]
 800d67e:	3503      	adds	r5, #3
 800d680:	1a6d      	subs	r5, r5, r1
 800d682:	f025 0503 	bic.w	r5, r5, #3
 800d686:	3508      	adds	r5, #8
 800d688:	2d0c      	cmp	r5, #12
 800d68a:	bf38      	it	cc
 800d68c:	250c      	movcc	r5, #12
 800d68e:	4629      	mov	r1, r5
 800d690:	4638      	mov	r0, r7
 800d692:	f7ff ffa5 	bl	800d5e0 <sbrk_aligned>
 800d696:	3001      	adds	r0, #1
 800d698:	d02b      	beq.n	800d6f2 <_malloc_r+0xd2>
 800d69a:	6823      	ldr	r3, [r4, #0]
 800d69c:	442b      	add	r3, r5
 800d69e:	6023      	str	r3, [r4, #0]
 800d6a0:	e00e      	b.n	800d6c0 <_malloc_r+0xa0>
 800d6a2:	6822      	ldr	r2, [r4, #0]
 800d6a4:	1b52      	subs	r2, r2, r5
 800d6a6:	d41e      	bmi.n	800d6e6 <_malloc_r+0xc6>
 800d6a8:	2a0b      	cmp	r2, #11
 800d6aa:	d916      	bls.n	800d6da <_malloc_r+0xba>
 800d6ac:	1961      	adds	r1, r4, r5
 800d6ae:	42a3      	cmp	r3, r4
 800d6b0:	6025      	str	r5, [r4, #0]
 800d6b2:	bf18      	it	ne
 800d6b4:	6059      	strne	r1, [r3, #4]
 800d6b6:	6863      	ldr	r3, [r4, #4]
 800d6b8:	bf08      	it	eq
 800d6ba:	6031      	streq	r1, [r6, #0]
 800d6bc:	5162      	str	r2, [r4, r5]
 800d6be:	604b      	str	r3, [r1, #4]
 800d6c0:	4638      	mov	r0, r7
 800d6c2:	f104 060b 	add.w	r6, r4, #11
 800d6c6:	f000 fab7 	bl	800dc38 <__malloc_unlock>
 800d6ca:	f026 0607 	bic.w	r6, r6, #7
 800d6ce:	1d23      	adds	r3, r4, #4
 800d6d0:	1af2      	subs	r2, r6, r3
 800d6d2:	d0b6      	beq.n	800d642 <_malloc_r+0x22>
 800d6d4:	1b9b      	subs	r3, r3, r6
 800d6d6:	50a3      	str	r3, [r4, r2]
 800d6d8:	e7b3      	b.n	800d642 <_malloc_r+0x22>
 800d6da:	6862      	ldr	r2, [r4, #4]
 800d6dc:	42a3      	cmp	r3, r4
 800d6de:	bf0c      	ite	eq
 800d6e0:	6032      	streq	r2, [r6, #0]
 800d6e2:	605a      	strne	r2, [r3, #4]
 800d6e4:	e7ec      	b.n	800d6c0 <_malloc_r+0xa0>
 800d6e6:	4623      	mov	r3, r4
 800d6e8:	6864      	ldr	r4, [r4, #4]
 800d6ea:	e7b2      	b.n	800d652 <_malloc_r+0x32>
 800d6ec:	4634      	mov	r4, r6
 800d6ee:	6876      	ldr	r6, [r6, #4]
 800d6f0:	e7b9      	b.n	800d666 <_malloc_r+0x46>
 800d6f2:	230c      	movs	r3, #12
 800d6f4:	603b      	str	r3, [r7, #0]
 800d6f6:	4638      	mov	r0, r7
 800d6f8:	f000 fa9e 	bl	800dc38 <__malloc_unlock>
 800d6fc:	e7a1      	b.n	800d642 <_malloc_r+0x22>
 800d6fe:	6025      	str	r5, [r4, #0]
 800d700:	e7de      	b.n	800d6c0 <_malloc_r+0xa0>
 800d702:	bf00      	nop
 800d704:	2003456c 	.word	0x2003456c

0800d708 <iprintf>:
 800d708:	b40f      	push	{r0, r1, r2, r3}
 800d70a:	4b0a      	ldr	r3, [pc, #40]	; (800d734 <iprintf+0x2c>)
 800d70c:	b513      	push	{r0, r1, r4, lr}
 800d70e:	681c      	ldr	r4, [r3, #0]
 800d710:	b124      	cbz	r4, 800d71c <iprintf+0x14>
 800d712:	69a3      	ldr	r3, [r4, #24]
 800d714:	b913      	cbnz	r3, 800d71c <iprintf+0x14>
 800d716:	4620      	mov	r0, r4
 800d718:	f000 f9d6 	bl	800dac8 <__sinit>
 800d71c:	ab05      	add	r3, sp, #20
 800d71e:	9a04      	ldr	r2, [sp, #16]
 800d720:	68a1      	ldr	r1, [r4, #8]
 800d722:	9301      	str	r3, [sp, #4]
 800d724:	4620      	mov	r0, r4
 800d726:	f000 fde5 	bl	800e2f4 <_vfiprintf_r>
 800d72a:	b002      	add	sp, #8
 800d72c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d730:	b004      	add	sp, #16
 800d732:	4770      	bx	lr
 800d734:	20000040 	.word	0x20000040

0800d738 <_sbrk_r>:
 800d738:	b538      	push	{r3, r4, r5, lr}
 800d73a:	4d06      	ldr	r5, [pc, #24]	; (800d754 <_sbrk_r+0x1c>)
 800d73c:	2300      	movs	r3, #0
 800d73e:	4604      	mov	r4, r0
 800d740:	4608      	mov	r0, r1
 800d742:	602b      	str	r3, [r5, #0]
 800d744:	f7f5 fbae 	bl	8002ea4 <_sbrk>
 800d748:	1c43      	adds	r3, r0, #1
 800d74a:	d102      	bne.n	800d752 <_sbrk_r+0x1a>
 800d74c:	682b      	ldr	r3, [r5, #0]
 800d74e:	b103      	cbz	r3, 800d752 <_sbrk_r+0x1a>
 800d750:	6023      	str	r3, [r4, #0]
 800d752:	bd38      	pop	{r3, r4, r5, pc}
 800d754:	20034578 	.word	0x20034578

0800d758 <siprintf>:
 800d758:	b40e      	push	{r1, r2, r3}
 800d75a:	b500      	push	{lr}
 800d75c:	b09c      	sub	sp, #112	; 0x70
 800d75e:	ab1d      	add	r3, sp, #116	; 0x74
 800d760:	9002      	str	r0, [sp, #8]
 800d762:	9006      	str	r0, [sp, #24]
 800d764:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d768:	4809      	ldr	r0, [pc, #36]	; (800d790 <siprintf+0x38>)
 800d76a:	9107      	str	r1, [sp, #28]
 800d76c:	9104      	str	r1, [sp, #16]
 800d76e:	4909      	ldr	r1, [pc, #36]	; (800d794 <siprintf+0x3c>)
 800d770:	f853 2b04 	ldr.w	r2, [r3], #4
 800d774:	9105      	str	r1, [sp, #20]
 800d776:	6800      	ldr	r0, [r0, #0]
 800d778:	9301      	str	r3, [sp, #4]
 800d77a:	a902      	add	r1, sp, #8
 800d77c:	f000 fabe 	bl	800dcfc <_svfiprintf_r>
 800d780:	9b02      	ldr	r3, [sp, #8]
 800d782:	2200      	movs	r2, #0
 800d784:	701a      	strb	r2, [r3, #0]
 800d786:	b01c      	add	sp, #112	; 0x70
 800d788:	f85d eb04 	ldr.w	lr, [sp], #4
 800d78c:	b003      	add	sp, #12
 800d78e:	4770      	bx	lr
 800d790:	20000040 	.word	0x20000040
 800d794:	ffff0208 	.word	0xffff0208

0800d798 <siscanf>:
 800d798:	b40e      	push	{r1, r2, r3}
 800d79a:	b510      	push	{r4, lr}
 800d79c:	b09f      	sub	sp, #124	; 0x7c
 800d79e:	ac21      	add	r4, sp, #132	; 0x84
 800d7a0:	f44f 7101 	mov.w	r1, #516	; 0x204
 800d7a4:	f854 2b04 	ldr.w	r2, [r4], #4
 800d7a8:	9201      	str	r2, [sp, #4]
 800d7aa:	f8ad 101c 	strh.w	r1, [sp, #28]
 800d7ae:	9004      	str	r0, [sp, #16]
 800d7b0:	9008      	str	r0, [sp, #32]
 800d7b2:	f7f2 fd2d 	bl	8000210 <strlen>
 800d7b6:	4b0c      	ldr	r3, [pc, #48]	; (800d7e8 <siscanf+0x50>)
 800d7b8:	9005      	str	r0, [sp, #20]
 800d7ba:	9009      	str	r0, [sp, #36]	; 0x24
 800d7bc:	930d      	str	r3, [sp, #52]	; 0x34
 800d7be:	480b      	ldr	r0, [pc, #44]	; (800d7ec <siscanf+0x54>)
 800d7c0:	9a01      	ldr	r2, [sp, #4]
 800d7c2:	6800      	ldr	r0, [r0, #0]
 800d7c4:	9403      	str	r4, [sp, #12]
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	9311      	str	r3, [sp, #68]	; 0x44
 800d7ca:	9316      	str	r3, [sp, #88]	; 0x58
 800d7cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d7d0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d7d4:	a904      	add	r1, sp, #16
 800d7d6:	4623      	mov	r3, r4
 800d7d8:	f000 fbea 	bl	800dfb0 <__ssvfiscanf_r>
 800d7dc:	b01f      	add	sp, #124	; 0x7c
 800d7de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7e2:	b003      	add	sp, #12
 800d7e4:	4770      	bx	lr
 800d7e6:	bf00      	nop
 800d7e8:	0800d813 	.word	0x0800d813
 800d7ec:	20000040 	.word	0x20000040

0800d7f0 <__sread>:
 800d7f0:	b510      	push	{r4, lr}
 800d7f2:	460c      	mov	r4, r1
 800d7f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7f8:	f001 f992 	bl	800eb20 <_read_r>
 800d7fc:	2800      	cmp	r0, #0
 800d7fe:	bfab      	itete	ge
 800d800:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d802:	89a3      	ldrhlt	r3, [r4, #12]
 800d804:	181b      	addge	r3, r3, r0
 800d806:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d80a:	bfac      	ite	ge
 800d80c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d80e:	81a3      	strhlt	r3, [r4, #12]
 800d810:	bd10      	pop	{r4, pc}

0800d812 <__seofread>:
 800d812:	2000      	movs	r0, #0
 800d814:	4770      	bx	lr

0800d816 <__swrite>:
 800d816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d81a:	461f      	mov	r7, r3
 800d81c:	898b      	ldrh	r3, [r1, #12]
 800d81e:	05db      	lsls	r3, r3, #23
 800d820:	4605      	mov	r5, r0
 800d822:	460c      	mov	r4, r1
 800d824:	4616      	mov	r6, r2
 800d826:	d505      	bpl.n	800d834 <__swrite+0x1e>
 800d828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d82c:	2302      	movs	r3, #2
 800d82e:	2200      	movs	r2, #0
 800d830:	f000 f9ea 	bl	800dc08 <_lseek_r>
 800d834:	89a3      	ldrh	r3, [r4, #12]
 800d836:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d83a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d83e:	81a3      	strh	r3, [r4, #12]
 800d840:	4632      	mov	r2, r6
 800d842:	463b      	mov	r3, r7
 800d844:	4628      	mov	r0, r5
 800d846:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d84a:	f000 b8c3 	b.w	800d9d4 <_write_r>

0800d84e <__sseek>:
 800d84e:	b510      	push	{r4, lr}
 800d850:	460c      	mov	r4, r1
 800d852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d856:	f000 f9d7 	bl	800dc08 <_lseek_r>
 800d85a:	1c43      	adds	r3, r0, #1
 800d85c:	89a3      	ldrh	r3, [r4, #12]
 800d85e:	bf15      	itete	ne
 800d860:	6560      	strne	r0, [r4, #84]	; 0x54
 800d862:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d866:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d86a:	81a3      	strheq	r3, [r4, #12]
 800d86c:	bf18      	it	ne
 800d86e:	81a3      	strhne	r3, [r4, #12]
 800d870:	bd10      	pop	{r4, pc}

0800d872 <__sclose>:
 800d872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d876:	f000 b8bf 	b.w	800d9f8 <_close_r>

0800d87a <strcpy>:
 800d87a:	4603      	mov	r3, r0
 800d87c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d880:	f803 2b01 	strb.w	r2, [r3], #1
 800d884:	2a00      	cmp	r2, #0
 800d886:	d1f9      	bne.n	800d87c <strcpy+0x2>
 800d888:	4770      	bx	lr

0800d88a <strstr>:
 800d88a:	780a      	ldrb	r2, [r1, #0]
 800d88c:	b570      	push	{r4, r5, r6, lr}
 800d88e:	b96a      	cbnz	r2, 800d8ac <strstr+0x22>
 800d890:	bd70      	pop	{r4, r5, r6, pc}
 800d892:	429a      	cmp	r2, r3
 800d894:	d109      	bne.n	800d8aa <strstr+0x20>
 800d896:	460c      	mov	r4, r1
 800d898:	4605      	mov	r5, r0
 800d89a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d0f6      	beq.n	800d890 <strstr+0x6>
 800d8a2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d8a6:	429e      	cmp	r6, r3
 800d8a8:	d0f7      	beq.n	800d89a <strstr+0x10>
 800d8aa:	3001      	adds	r0, #1
 800d8ac:	7803      	ldrb	r3, [r0, #0]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d1ef      	bne.n	800d892 <strstr+0x8>
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	e7ec      	b.n	800d890 <strstr+0x6>
	...

0800d8b8 <_strtol_l.constprop.0>:
 800d8b8:	2b01      	cmp	r3, #1
 800d8ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8be:	d001      	beq.n	800d8c4 <_strtol_l.constprop.0+0xc>
 800d8c0:	2b24      	cmp	r3, #36	; 0x24
 800d8c2:	d906      	bls.n	800d8d2 <_strtol_l.constprop.0+0x1a>
 800d8c4:	f7ff fde8 	bl	800d498 <__errno>
 800d8c8:	2316      	movs	r3, #22
 800d8ca:	6003      	str	r3, [r0, #0]
 800d8cc:	2000      	movs	r0, #0
 800d8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d9b8 <_strtol_l.constprop.0+0x100>
 800d8d6:	460d      	mov	r5, r1
 800d8d8:	462e      	mov	r6, r5
 800d8da:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d8de:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d8e2:	f017 0708 	ands.w	r7, r7, #8
 800d8e6:	d1f7      	bne.n	800d8d8 <_strtol_l.constprop.0+0x20>
 800d8e8:	2c2d      	cmp	r4, #45	; 0x2d
 800d8ea:	d132      	bne.n	800d952 <_strtol_l.constprop.0+0x9a>
 800d8ec:	782c      	ldrb	r4, [r5, #0]
 800d8ee:	2701      	movs	r7, #1
 800d8f0:	1cb5      	adds	r5, r6, #2
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d05b      	beq.n	800d9ae <_strtol_l.constprop.0+0xf6>
 800d8f6:	2b10      	cmp	r3, #16
 800d8f8:	d109      	bne.n	800d90e <_strtol_l.constprop.0+0x56>
 800d8fa:	2c30      	cmp	r4, #48	; 0x30
 800d8fc:	d107      	bne.n	800d90e <_strtol_l.constprop.0+0x56>
 800d8fe:	782c      	ldrb	r4, [r5, #0]
 800d900:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d904:	2c58      	cmp	r4, #88	; 0x58
 800d906:	d14d      	bne.n	800d9a4 <_strtol_l.constprop.0+0xec>
 800d908:	786c      	ldrb	r4, [r5, #1]
 800d90a:	2310      	movs	r3, #16
 800d90c:	3502      	adds	r5, #2
 800d90e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d912:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d916:	f04f 0c00 	mov.w	ip, #0
 800d91a:	fbb8 f9f3 	udiv	r9, r8, r3
 800d91e:	4666      	mov	r6, ip
 800d920:	fb03 8a19 	mls	sl, r3, r9, r8
 800d924:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d928:	f1be 0f09 	cmp.w	lr, #9
 800d92c:	d816      	bhi.n	800d95c <_strtol_l.constprop.0+0xa4>
 800d92e:	4674      	mov	r4, lr
 800d930:	42a3      	cmp	r3, r4
 800d932:	dd24      	ble.n	800d97e <_strtol_l.constprop.0+0xc6>
 800d934:	f1bc 0f00 	cmp.w	ip, #0
 800d938:	db1e      	blt.n	800d978 <_strtol_l.constprop.0+0xc0>
 800d93a:	45b1      	cmp	r9, r6
 800d93c:	d31c      	bcc.n	800d978 <_strtol_l.constprop.0+0xc0>
 800d93e:	d101      	bne.n	800d944 <_strtol_l.constprop.0+0x8c>
 800d940:	45a2      	cmp	sl, r4
 800d942:	db19      	blt.n	800d978 <_strtol_l.constprop.0+0xc0>
 800d944:	fb06 4603 	mla	r6, r6, r3, r4
 800d948:	f04f 0c01 	mov.w	ip, #1
 800d94c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d950:	e7e8      	b.n	800d924 <_strtol_l.constprop.0+0x6c>
 800d952:	2c2b      	cmp	r4, #43	; 0x2b
 800d954:	bf04      	itt	eq
 800d956:	782c      	ldrbeq	r4, [r5, #0]
 800d958:	1cb5      	addeq	r5, r6, #2
 800d95a:	e7ca      	b.n	800d8f2 <_strtol_l.constprop.0+0x3a>
 800d95c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d960:	f1be 0f19 	cmp.w	lr, #25
 800d964:	d801      	bhi.n	800d96a <_strtol_l.constprop.0+0xb2>
 800d966:	3c37      	subs	r4, #55	; 0x37
 800d968:	e7e2      	b.n	800d930 <_strtol_l.constprop.0+0x78>
 800d96a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d96e:	f1be 0f19 	cmp.w	lr, #25
 800d972:	d804      	bhi.n	800d97e <_strtol_l.constprop.0+0xc6>
 800d974:	3c57      	subs	r4, #87	; 0x57
 800d976:	e7db      	b.n	800d930 <_strtol_l.constprop.0+0x78>
 800d978:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800d97c:	e7e6      	b.n	800d94c <_strtol_l.constprop.0+0x94>
 800d97e:	f1bc 0f00 	cmp.w	ip, #0
 800d982:	da05      	bge.n	800d990 <_strtol_l.constprop.0+0xd8>
 800d984:	2322      	movs	r3, #34	; 0x22
 800d986:	6003      	str	r3, [r0, #0]
 800d988:	4646      	mov	r6, r8
 800d98a:	b942      	cbnz	r2, 800d99e <_strtol_l.constprop.0+0xe6>
 800d98c:	4630      	mov	r0, r6
 800d98e:	e79e      	b.n	800d8ce <_strtol_l.constprop.0+0x16>
 800d990:	b107      	cbz	r7, 800d994 <_strtol_l.constprop.0+0xdc>
 800d992:	4276      	negs	r6, r6
 800d994:	2a00      	cmp	r2, #0
 800d996:	d0f9      	beq.n	800d98c <_strtol_l.constprop.0+0xd4>
 800d998:	f1bc 0f00 	cmp.w	ip, #0
 800d99c:	d000      	beq.n	800d9a0 <_strtol_l.constprop.0+0xe8>
 800d99e:	1e69      	subs	r1, r5, #1
 800d9a0:	6011      	str	r1, [r2, #0]
 800d9a2:	e7f3      	b.n	800d98c <_strtol_l.constprop.0+0xd4>
 800d9a4:	2430      	movs	r4, #48	; 0x30
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d1b1      	bne.n	800d90e <_strtol_l.constprop.0+0x56>
 800d9aa:	2308      	movs	r3, #8
 800d9ac:	e7af      	b.n	800d90e <_strtol_l.constprop.0+0x56>
 800d9ae:	2c30      	cmp	r4, #48	; 0x30
 800d9b0:	d0a5      	beq.n	800d8fe <_strtol_l.constprop.0+0x46>
 800d9b2:	230a      	movs	r3, #10
 800d9b4:	e7ab      	b.n	800d90e <_strtol_l.constprop.0+0x56>
 800d9b6:	bf00      	nop
 800d9b8:	080112f1 	.word	0x080112f1

0800d9bc <_strtol_r>:
 800d9bc:	f7ff bf7c 	b.w	800d8b8 <_strtol_l.constprop.0>

0800d9c0 <strtol>:
 800d9c0:	4613      	mov	r3, r2
 800d9c2:	460a      	mov	r2, r1
 800d9c4:	4601      	mov	r1, r0
 800d9c6:	4802      	ldr	r0, [pc, #8]	; (800d9d0 <strtol+0x10>)
 800d9c8:	6800      	ldr	r0, [r0, #0]
 800d9ca:	f7ff bf75 	b.w	800d8b8 <_strtol_l.constprop.0>
 800d9ce:	bf00      	nop
 800d9d0:	20000040 	.word	0x20000040

0800d9d4 <_write_r>:
 800d9d4:	b538      	push	{r3, r4, r5, lr}
 800d9d6:	4d07      	ldr	r5, [pc, #28]	; (800d9f4 <_write_r+0x20>)
 800d9d8:	4604      	mov	r4, r0
 800d9da:	4608      	mov	r0, r1
 800d9dc:	4611      	mov	r1, r2
 800d9de:	2200      	movs	r2, #0
 800d9e0:	602a      	str	r2, [r5, #0]
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	f7f5 fa0d 	bl	8002e02 <_write>
 800d9e8:	1c43      	adds	r3, r0, #1
 800d9ea:	d102      	bne.n	800d9f2 <_write_r+0x1e>
 800d9ec:	682b      	ldr	r3, [r5, #0]
 800d9ee:	b103      	cbz	r3, 800d9f2 <_write_r+0x1e>
 800d9f0:	6023      	str	r3, [r4, #0]
 800d9f2:	bd38      	pop	{r3, r4, r5, pc}
 800d9f4:	20034578 	.word	0x20034578

0800d9f8 <_close_r>:
 800d9f8:	b538      	push	{r3, r4, r5, lr}
 800d9fa:	4d06      	ldr	r5, [pc, #24]	; (800da14 <_close_r+0x1c>)
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	4604      	mov	r4, r0
 800da00:	4608      	mov	r0, r1
 800da02:	602b      	str	r3, [r5, #0]
 800da04:	f7f5 fa19 	bl	8002e3a <_close>
 800da08:	1c43      	adds	r3, r0, #1
 800da0a:	d102      	bne.n	800da12 <_close_r+0x1a>
 800da0c:	682b      	ldr	r3, [r5, #0]
 800da0e:	b103      	cbz	r3, 800da12 <_close_r+0x1a>
 800da10:	6023      	str	r3, [r4, #0]
 800da12:	bd38      	pop	{r3, r4, r5, pc}
 800da14:	20034578 	.word	0x20034578

0800da18 <std>:
 800da18:	2300      	movs	r3, #0
 800da1a:	b510      	push	{r4, lr}
 800da1c:	4604      	mov	r4, r0
 800da1e:	e9c0 3300 	strd	r3, r3, [r0]
 800da22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800da26:	6083      	str	r3, [r0, #8]
 800da28:	8181      	strh	r1, [r0, #12]
 800da2a:	6643      	str	r3, [r0, #100]	; 0x64
 800da2c:	81c2      	strh	r2, [r0, #14]
 800da2e:	6183      	str	r3, [r0, #24]
 800da30:	4619      	mov	r1, r3
 800da32:	2208      	movs	r2, #8
 800da34:	305c      	adds	r0, #92	; 0x5c
 800da36:	f7ff fd69 	bl	800d50c <memset>
 800da3a:	4b05      	ldr	r3, [pc, #20]	; (800da50 <std+0x38>)
 800da3c:	6263      	str	r3, [r4, #36]	; 0x24
 800da3e:	4b05      	ldr	r3, [pc, #20]	; (800da54 <std+0x3c>)
 800da40:	62a3      	str	r3, [r4, #40]	; 0x28
 800da42:	4b05      	ldr	r3, [pc, #20]	; (800da58 <std+0x40>)
 800da44:	62e3      	str	r3, [r4, #44]	; 0x2c
 800da46:	4b05      	ldr	r3, [pc, #20]	; (800da5c <std+0x44>)
 800da48:	6224      	str	r4, [r4, #32]
 800da4a:	6323      	str	r3, [r4, #48]	; 0x30
 800da4c:	bd10      	pop	{r4, pc}
 800da4e:	bf00      	nop
 800da50:	0800d7f1 	.word	0x0800d7f1
 800da54:	0800d817 	.word	0x0800d817
 800da58:	0800d84f 	.word	0x0800d84f
 800da5c:	0800d873 	.word	0x0800d873

0800da60 <_cleanup_r>:
 800da60:	4901      	ldr	r1, [pc, #4]	; (800da68 <_cleanup_r+0x8>)
 800da62:	f000 b8af 	b.w	800dbc4 <_fwalk_reent>
 800da66:	bf00      	nop
 800da68:	0800ef9d 	.word	0x0800ef9d

0800da6c <__sfmoreglue>:
 800da6c:	b570      	push	{r4, r5, r6, lr}
 800da6e:	2268      	movs	r2, #104	; 0x68
 800da70:	1e4d      	subs	r5, r1, #1
 800da72:	4355      	muls	r5, r2
 800da74:	460e      	mov	r6, r1
 800da76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800da7a:	f7ff fdd1 	bl	800d620 <_malloc_r>
 800da7e:	4604      	mov	r4, r0
 800da80:	b140      	cbz	r0, 800da94 <__sfmoreglue+0x28>
 800da82:	2100      	movs	r1, #0
 800da84:	e9c0 1600 	strd	r1, r6, [r0]
 800da88:	300c      	adds	r0, #12
 800da8a:	60a0      	str	r0, [r4, #8]
 800da8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800da90:	f7ff fd3c 	bl	800d50c <memset>
 800da94:	4620      	mov	r0, r4
 800da96:	bd70      	pop	{r4, r5, r6, pc}

0800da98 <__sfp_lock_acquire>:
 800da98:	4801      	ldr	r0, [pc, #4]	; (800daa0 <__sfp_lock_acquire+0x8>)
 800da9a:	f000 b8b3 	b.w	800dc04 <__retarget_lock_acquire_recursive>
 800da9e:	bf00      	nop
 800daa0:	20034575 	.word	0x20034575

0800daa4 <__sfp_lock_release>:
 800daa4:	4801      	ldr	r0, [pc, #4]	; (800daac <__sfp_lock_release+0x8>)
 800daa6:	f000 b8ae 	b.w	800dc06 <__retarget_lock_release_recursive>
 800daaa:	bf00      	nop
 800daac:	20034575 	.word	0x20034575

0800dab0 <__sinit_lock_acquire>:
 800dab0:	4801      	ldr	r0, [pc, #4]	; (800dab8 <__sinit_lock_acquire+0x8>)
 800dab2:	f000 b8a7 	b.w	800dc04 <__retarget_lock_acquire_recursive>
 800dab6:	bf00      	nop
 800dab8:	20034576 	.word	0x20034576

0800dabc <__sinit_lock_release>:
 800dabc:	4801      	ldr	r0, [pc, #4]	; (800dac4 <__sinit_lock_release+0x8>)
 800dabe:	f000 b8a2 	b.w	800dc06 <__retarget_lock_release_recursive>
 800dac2:	bf00      	nop
 800dac4:	20034576 	.word	0x20034576

0800dac8 <__sinit>:
 800dac8:	b510      	push	{r4, lr}
 800daca:	4604      	mov	r4, r0
 800dacc:	f7ff fff0 	bl	800dab0 <__sinit_lock_acquire>
 800dad0:	69a3      	ldr	r3, [r4, #24]
 800dad2:	b11b      	cbz	r3, 800dadc <__sinit+0x14>
 800dad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dad8:	f7ff bff0 	b.w	800dabc <__sinit_lock_release>
 800dadc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dae0:	6523      	str	r3, [r4, #80]	; 0x50
 800dae2:	4b13      	ldr	r3, [pc, #76]	; (800db30 <__sinit+0x68>)
 800dae4:	4a13      	ldr	r2, [pc, #76]	; (800db34 <__sinit+0x6c>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	62a2      	str	r2, [r4, #40]	; 0x28
 800daea:	42a3      	cmp	r3, r4
 800daec:	bf04      	itt	eq
 800daee:	2301      	moveq	r3, #1
 800daf0:	61a3      	streq	r3, [r4, #24]
 800daf2:	4620      	mov	r0, r4
 800daf4:	f000 f820 	bl	800db38 <__sfp>
 800daf8:	6060      	str	r0, [r4, #4]
 800dafa:	4620      	mov	r0, r4
 800dafc:	f000 f81c 	bl	800db38 <__sfp>
 800db00:	60a0      	str	r0, [r4, #8]
 800db02:	4620      	mov	r0, r4
 800db04:	f000 f818 	bl	800db38 <__sfp>
 800db08:	2200      	movs	r2, #0
 800db0a:	60e0      	str	r0, [r4, #12]
 800db0c:	2104      	movs	r1, #4
 800db0e:	6860      	ldr	r0, [r4, #4]
 800db10:	f7ff ff82 	bl	800da18 <std>
 800db14:	68a0      	ldr	r0, [r4, #8]
 800db16:	2201      	movs	r2, #1
 800db18:	2109      	movs	r1, #9
 800db1a:	f7ff ff7d 	bl	800da18 <std>
 800db1e:	68e0      	ldr	r0, [r4, #12]
 800db20:	2202      	movs	r2, #2
 800db22:	2112      	movs	r1, #18
 800db24:	f7ff ff78 	bl	800da18 <std>
 800db28:	2301      	movs	r3, #1
 800db2a:	61a3      	str	r3, [r4, #24]
 800db2c:	e7d2      	b.n	800dad4 <__sinit+0xc>
 800db2e:	bf00      	nop
 800db30:	080113f4 	.word	0x080113f4
 800db34:	0800da61 	.word	0x0800da61

0800db38 <__sfp>:
 800db38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db3a:	4607      	mov	r7, r0
 800db3c:	f7ff ffac 	bl	800da98 <__sfp_lock_acquire>
 800db40:	4b1e      	ldr	r3, [pc, #120]	; (800dbbc <__sfp+0x84>)
 800db42:	681e      	ldr	r6, [r3, #0]
 800db44:	69b3      	ldr	r3, [r6, #24]
 800db46:	b913      	cbnz	r3, 800db4e <__sfp+0x16>
 800db48:	4630      	mov	r0, r6
 800db4a:	f7ff ffbd 	bl	800dac8 <__sinit>
 800db4e:	3648      	adds	r6, #72	; 0x48
 800db50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800db54:	3b01      	subs	r3, #1
 800db56:	d503      	bpl.n	800db60 <__sfp+0x28>
 800db58:	6833      	ldr	r3, [r6, #0]
 800db5a:	b30b      	cbz	r3, 800dba0 <__sfp+0x68>
 800db5c:	6836      	ldr	r6, [r6, #0]
 800db5e:	e7f7      	b.n	800db50 <__sfp+0x18>
 800db60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800db64:	b9d5      	cbnz	r5, 800db9c <__sfp+0x64>
 800db66:	4b16      	ldr	r3, [pc, #88]	; (800dbc0 <__sfp+0x88>)
 800db68:	60e3      	str	r3, [r4, #12]
 800db6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800db6e:	6665      	str	r5, [r4, #100]	; 0x64
 800db70:	f000 f847 	bl	800dc02 <__retarget_lock_init_recursive>
 800db74:	f7ff ff96 	bl	800daa4 <__sfp_lock_release>
 800db78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800db7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800db80:	6025      	str	r5, [r4, #0]
 800db82:	61a5      	str	r5, [r4, #24]
 800db84:	2208      	movs	r2, #8
 800db86:	4629      	mov	r1, r5
 800db88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800db8c:	f7ff fcbe 	bl	800d50c <memset>
 800db90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800db94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800db98:	4620      	mov	r0, r4
 800db9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db9c:	3468      	adds	r4, #104	; 0x68
 800db9e:	e7d9      	b.n	800db54 <__sfp+0x1c>
 800dba0:	2104      	movs	r1, #4
 800dba2:	4638      	mov	r0, r7
 800dba4:	f7ff ff62 	bl	800da6c <__sfmoreglue>
 800dba8:	4604      	mov	r4, r0
 800dbaa:	6030      	str	r0, [r6, #0]
 800dbac:	2800      	cmp	r0, #0
 800dbae:	d1d5      	bne.n	800db5c <__sfp+0x24>
 800dbb0:	f7ff ff78 	bl	800daa4 <__sfp_lock_release>
 800dbb4:	230c      	movs	r3, #12
 800dbb6:	603b      	str	r3, [r7, #0]
 800dbb8:	e7ee      	b.n	800db98 <__sfp+0x60>
 800dbba:	bf00      	nop
 800dbbc:	080113f4 	.word	0x080113f4
 800dbc0:	ffff0001 	.word	0xffff0001

0800dbc4 <_fwalk_reent>:
 800dbc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbc8:	4606      	mov	r6, r0
 800dbca:	4688      	mov	r8, r1
 800dbcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dbd0:	2700      	movs	r7, #0
 800dbd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dbd6:	f1b9 0901 	subs.w	r9, r9, #1
 800dbda:	d505      	bpl.n	800dbe8 <_fwalk_reent+0x24>
 800dbdc:	6824      	ldr	r4, [r4, #0]
 800dbde:	2c00      	cmp	r4, #0
 800dbe0:	d1f7      	bne.n	800dbd2 <_fwalk_reent+0xe>
 800dbe2:	4638      	mov	r0, r7
 800dbe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbe8:	89ab      	ldrh	r3, [r5, #12]
 800dbea:	2b01      	cmp	r3, #1
 800dbec:	d907      	bls.n	800dbfe <_fwalk_reent+0x3a>
 800dbee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dbf2:	3301      	adds	r3, #1
 800dbf4:	d003      	beq.n	800dbfe <_fwalk_reent+0x3a>
 800dbf6:	4629      	mov	r1, r5
 800dbf8:	4630      	mov	r0, r6
 800dbfa:	47c0      	blx	r8
 800dbfc:	4307      	orrs	r7, r0
 800dbfe:	3568      	adds	r5, #104	; 0x68
 800dc00:	e7e9      	b.n	800dbd6 <_fwalk_reent+0x12>

0800dc02 <__retarget_lock_init_recursive>:
 800dc02:	4770      	bx	lr

0800dc04 <__retarget_lock_acquire_recursive>:
 800dc04:	4770      	bx	lr

0800dc06 <__retarget_lock_release_recursive>:
 800dc06:	4770      	bx	lr

0800dc08 <_lseek_r>:
 800dc08:	b538      	push	{r3, r4, r5, lr}
 800dc0a:	4d07      	ldr	r5, [pc, #28]	; (800dc28 <_lseek_r+0x20>)
 800dc0c:	4604      	mov	r4, r0
 800dc0e:	4608      	mov	r0, r1
 800dc10:	4611      	mov	r1, r2
 800dc12:	2200      	movs	r2, #0
 800dc14:	602a      	str	r2, [r5, #0]
 800dc16:	461a      	mov	r2, r3
 800dc18:	f7f5 f936 	bl	8002e88 <_lseek>
 800dc1c:	1c43      	adds	r3, r0, #1
 800dc1e:	d102      	bne.n	800dc26 <_lseek_r+0x1e>
 800dc20:	682b      	ldr	r3, [r5, #0]
 800dc22:	b103      	cbz	r3, 800dc26 <_lseek_r+0x1e>
 800dc24:	6023      	str	r3, [r4, #0]
 800dc26:	bd38      	pop	{r3, r4, r5, pc}
 800dc28:	20034578 	.word	0x20034578

0800dc2c <__malloc_lock>:
 800dc2c:	4801      	ldr	r0, [pc, #4]	; (800dc34 <__malloc_lock+0x8>)
 800dc2e:	f7ff bfe9 	b.w	800dc04 <__retarget_lock_acquire_recursive>
 800dc32:	bf00      	nop
 800dc34:	20034574 	.word	0x20034574

0800dc38 <__malloc_unlock>:
 800dc38:	4801      	ldr	r0, [pc, #4]	; (800dc40 <__malloc_unlock+0x8>)
 800dc3a:	f7ff bfe4 	b.w	800dc06 <__retarget_lock_release_recursive>
 800dc3e:	bf00      	nop
 800dc40:	20034574 	.word	0x20034574

0800dc44 <__ssputs_r>:
 800dc44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc48:	688e      	ldr	r6, [r1, #8]
 800dc4a:	429e      	cmp	r6, r3
 800dc4c:	4682      	mov	sl, r0
 800dc4e:	460c      	mov	r4, r1
 800dc50:	4690      	mov	r8, r2
 800dc52:	461f      	mov	r7, r3
 800dc54:	d838      	bhi.n	800dcc8 <__ssputs_r+0x84>
 800dc56:	898a      	ldrh	r2, [r1, #12]
 800dc58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dc5c:	d032      	beq.n	800dcc4 <__ssputs_r+0x80>
 800dc5e:	6825      	ldr	r5, [r4, #0]
 800dc60:	6909      	ldr	r1, [r1, #16]
 800dc62:	eba5 0901 	sub.w	r9, r5, r1
 800dc66:	6965      	ldr	r5, [r4, #20]
 800dc68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dc6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dc70:	3301      	adds	r3, #1
 800dc72:	444b      	add	r3, r9
 800dc74:	106d      	asrs	r5, r5, #1
 800dc76:	429d      	cmp	r5, r3
 800dc78:	bf38      	it	cc
 800dc7a:	461d      	movcc	r5, r3
 800dc7c:	0553      	lsls	r3, r2, #21
 800dc7e:	d531      	bpl.n	800dce4 <__ssputs_r+0xa0>
 800dc80:	4629      	mov	r1, r5
 800dc82:	f7ff fccd 	bl	800d620 <_malloc_r>
 800dc86:	4606      	mov	r6, r0
 800dc88:	b950      	cbnz	r0, 800dca0 <__ssputs_r+0x5c>
 800dc8a:	230c      	movs	r3, #12
 800dc8c:	f8ca 3000 	str.w	r3, [sl]
 800dc90:	89a3      	ldrh	r3, [r4, #12]
 800dc92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc96:	81a3      	strh	r3, [r4, #12]
 800dc98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dca0:	6921      	ldr	r1, [r4, #16]
 800dca2:	464a      	mov	r2, r9
 800dca4:	f001 fa1c 	bl	800f0e0 <memcpy>
 800dca8:	89a3      	ldrh	r3, [r4, #12]
 800dcaa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dcae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcb2:	81a3      	strh	r3, [r4, #12]
 800dcb4:	6126      	str	r6, [r4, #16]
 800dcb6:	6165      	str	r5, [r4, #20]
 800dcb8:	444e      	add	r6, r9
 800dcba:	eba5 0509 	sub.w	r5, r5, r9
 800dcbe:	6026      	str	r6, [r4, #0]
 800dcc0:	60a5      	str	r5, [r4, #8]
 800dcc2:	463e      	mov	r6, r7
 800dcc4:	42be      	cmp	r6, r7
 800dcc6:	d900      	bls.n	800dcca <__ssputs_r+0x86>
 800dcc8:	463e      	mov	r6, r7
 800dcca:	6820      	ldr	r0, [r4, #0]
 800dccc:	4632      	mov	r2, r6
 800dcce:	4641      	mov	r1, r8
 800dcd0:	f001 fa14 	bl	800f0fc <memmove>
 800dcd4:	68a3      	ldr	r3, [r4, #8]
 800dcd6:	1b9b      	subs	r3, r3, r6
 800dcd8:	60a3      	str	r3, [r4, #8]
 800dcda:	6823      	ldr	r3, [r4, #0]
 800dcdc:	4433      	add	r3, r6
 800dcde:	6023      	str	r3, [r4, #0]
 800dce0:	2000      	movs	r0, #0
 800dce2:	e7db      	b.n	800dc9c <__ssputs_r+0x58>
 800dce4:	462a      	mov	r2, r5
 800dce6:	f001 fa23 	bl	800f130 <_realloc_r>
 800dcea:	4606      	mov	r6, r0
 800dcec:	2800      	cmp	r0, #0
 800dcee:	d1e1      	bne.n	800dcb4 <__ssputs_r+0x70>
 800dcf0:	6921      	ldr	r1, [r4, #16]
 800dcf2:	4650      	mov	r0, sl
 800dcf4:	f7ff fc28 	bl	800d548 <_free_r>
 800dcf8:	e7c7      	b.n	800dc8a <__ssputs_r+0x46>
	...

0800dcfc <_svfiprintf_r>:
 800dcfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd00:	4698      	mov	r8, r3
 800dd02:	898b      	ldrh	r3, [r1, #12]
 800dd04:	061b      	lsls	r3, r3, #24
 800dd06:	b09d      	sub	sp, #116	; 0x74
 800dd08:	4607      	mov	r7, r0
 800dd0a:	460d      	mov	r5, r1
 800dd0c:	4614      	mov	r4, r2
 800dd0e:	d50e      	bpl.n	800dd2e <_svfiprintf_r+0x32>
 800dd10:	690b      	ldr	r3, [r1, #16]
 800dd12:	b963      	cbnz	r3, 800dd2e <_svfiprintf_r+0x32>
 800dd14:	2140      	movs	r1, #64	; 0x40
 800dd16:	f7ff fc83 	bl	800d620 <_malloc_r>
 800dd1a:	6028      	str	r0, [r5, #0]
 800dd1c:	6128      	str	r0, [r5, #16]
 800dd1e:	b920      	cbnz	r0, 800dd2a <_svfiprintf_r+0x2e>
 800dd20:	230c      	movs	r3, #12
 800dd22:	603b      	str	r3, [r7, #0]
 800dd24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd28:	e0d1      	b.n	800dece <_svfiprintf_r+0x1d2>
 800dd2a:	2340      	movs	r3, #64	; 0x40
 800dd2c:	616b      	str	r3, [r5, #20]
 800dd2e:	2300      	movs	r3, #0
 800dd30:	9309      	str	r3, [sp, #36]	; 0x24
 800dd32:	2320      	movs	r3, #32
 800dd34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd38:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd3c:	2330      	movs	r3, #48	; 0x30
 800dd3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dee8 <_svfiprintf_r+0x1ec>
 800dd42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd46:	f04f 0901 	mov.w	r9, #1
 800dd4a:	4623      	mov	r3, r4
 800dd4c:	469a      	mov	sl, r3
 800dd4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd52:	b10a      	cbz	r2, 800dd58 <_svfiprintf_r+0x5c>
 800dd54:	2a25      	cmp	r2, #37	; 0x25
 800dd56:	d1f9      	bne.n	800dd4c <_svfiprintf_r+0x50>
 800dd58:	ebba 0b04 	subs.w	fp, sl, r4
 800dd5c:	d00b      	beq.n	800dd76 <_svfiprintf_r+0x7a>
 800dd5e:	465b      	mov	r3, fp
 800dd60:	4622      	mov	r2, r4
 800dd62:	4629      	mov	r1, r5
 800dd64:	4638      	mov	r0, r7
 800dd66:	f7ff ff6d 	bl	800dc44 <__ssputs_r>
 800dd6a:	3001      	adds	r0, #1
 800dd6c:	f000 80aa 	beq.w	800dec4 <_svfiprintf_r+0x1c8>
 800dd70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd72:	445a      	add	r2, fp
 800dd74:	9209      	str	r2, [sp, #36]	; 0x24
 800dd76:	f89a 3000 	ldrb.w	r3, [sl]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	f000 80a2 	beq.w	800dec4 <_svfiprintf_r+0x1c8>
 800dd80:	2300      	movs	r3, #0
 800dd82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd8a:	f10a 0a01 	add.w	sl, sl, #1
 800dd8e:	9304      	str	r3, [sp, #16]
 800dd90:	9307      	str	r3, [sp, #28]
 800dd92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd96:	931a      	str	r3, [sp, #104]	; 0x68
 800dd98:	4654      	mov	r4, sl
 800dd9a:	2205      	movs	r2, #5
 800dd9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dda0:	4851      	ldr	r0, [pc, #324]	; (800dee8 <_svfiprintf_r+0x1ec>)
 800dda2:	f7f2 fa3d 	bl	8000220 <memchr>
 800dda6:	9a04      	ldr	r2, [sp, #16]
 800dda8:	b9d8      	cbnz	r0, 800dde2 <_svfiprintf_r+0xe6>
 800ddaa:	06d0      	lsls	r0, r2, #27
 800ddac:	bf44      	itt	mi
 800ddae:	2320      	movmi	r3, #32
 800ddb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddb4:	0711      	lsls	r1, r2, #28
 800ddb6:	bf44      	itt	mi
 800ddb8:	232b      	movmi	r3, #43	; 0x2b
 800ddba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddbe:	f89a 3000 	ldrb.w	r3, [sl]
 800ddc2:	2b2a      	cmp	r3, #42	; 0x2a
 800ddc4:	d015      	beq.n	800ddf2 <_svfiprintf_r+0xf6>
 800ddc6:	9a07      	ldr	r2, [sp, #28]
 800ddc8:	4654      	mov	r4, sl
 800ddca:	2000      	movs	r0, #0
 800ddcc:	f04f 0c0a 	mov.w	ip, #10
 800ddd0:	4621      	mov	r1, r4
 800ddd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ddd6:	3b30      	subs	r3, #48	; 0x30
 800ddd8:	2b09      	cmp	r3, #9
 800ddda:	d94e      	bls.n	800de7a <_svfiprintf_r+0x17e>
 800dddc:	b1b0      	cbz	r0, 800de0c <_svfiprintf_r+0x110>
 800ddde:	9207      	str	r2, [sp, #28]
 800dde0:	e014      	b.n	800de0c <_svfiprintf_r+0x110>
 800dde2:	eba0 0308 	sub.w	r3, r0, r8
 800dde6:	fa09 f303 	lsl.w	r3, r9, r3
 800ddea:	4313      	orrs	r3, r2
 800ddec:	9304      	str	r3, [sp, #16]
 800ddee:	46a2      	mov	sl, r4
 800ddf0:	e7d2      	b.n	800dd98 <_svfiprintf_r+0x9c>
 800ddf2:	9b03      	ldr	r3, [sp, #12]
 800ddf4:	1d19      	adds	r1, r3, #4
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	9103      	str	r1, [sp, #12]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	bfbb      	ittet	lt
 800ddfe:	425b      	neglt	r3, r3
 800de00:	f042 0202 	orrlt.w	r2, r2, #2
 800de04:	9307      	strge	r3, [sp, #28]
 800de06:	9307      	strlt	r3, [sp, #28]
 800de08:	bfb8      	it	lt
 800de0a:	9204      	strlt	r2, [sp, #16]
 800de0c:	7823      	ldrb	r3, [r4, #0]
 800de0e:	2b2e      	cmp	r3, #46	; 0x2e
 800de10:	d10c      	bne.n	800de2c <_svfiprintf_r+0x130>
 800de12:	7863      	ldrb	r3, [r4, #1]
 800de14:	2b2a      	cmp	r3, #42	; 0x2a
 800de16:	d135      	bne.n	800de84 <_svfiprintf_r+0x188>
 800de18:	9b03      	ldr	r3, [sp, #12]
 800de1a:	1d1a      	adds	r2, r3, #4
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	9203      	str	r2, [sp, #12]
 800de20:	2b00      	cmp	r3, #0
 800de22:	bfb8      	it	lt
 800de24:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800de28:	3402      	adds	r4, #2
 800de2a:	9305      	str	r3, [sp, #20]
 800de2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800def8 <_svfiprintf_r+0x1fc>
 800de30:	7821      	ldrb	r1, [r4, #0]
 800de32:	2203      	movs	r2, #3
 800de34:	4650      	mov	r0, sl
 800de36:	f7f2 f9f3 	bl	8000220 <memchr>
 800de3a:	b140      	cbz	r0, 800de4e <_svfiprintf_r+0x152>
 800de3c:	2340      	movs	r3, #64	; 0x40
 800de3e:	eba0 000a 	sub.w	r0, r0, sl
 800de42:	fa03 f000 	lsl.w	r0, r3, r0
 800de46:	9b04      	ldr	r3, [sp, #16]
 800de48:	4303      	orrs	r3, r0
 800de4a:	3401      	adds	r4, #1
 800de4c:	9304      	str	r3, [sp, #16]
 800de4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de52:	4826      	ldr	r0, [pc, #152]	; (800deec <_svfiprintf_r+0x1f0>)
 800de54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de58:	2206      	movs	r2, #6
 800de5a:	f7f2 f9e1 	bl	8000220 <memchr>
 800de5e:	2800      	cmp	r0, #0
 800de60:	d038      	beq.n	800ded4 <_svfiprintf_r+0x1d8>
 800de62:	4b23      	ldr	r3, [pc, #140]	; (800def0 <_svfiprintf_r+0x1f4>)
 800de64:	bb1b      	cbnz	r3, 800deae <_svfiprintf_r+0x1b2>
 800de66:	9b03      	ldr	r3, [sp, #12]
 800de68:	3307      	adds	r3, #7
 800de6a:	f023 0307 	bic.w	r3, r3, #7
 800de6e:	3308      	adds	r3, #8
 800de70:	9303      	str	r3, [sp, #12]
 800de72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de74:	4433      	add	r3, r6
 800de76:	9309      	str	r3, [sp, #36]	; 0x24
 800de78:	e767      	b.n	800dd4a <_svfiprintf_r+0x4e>
 800de7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800de7e:	460c      	mov	r4, r1
 800de80:	2001      	movs	r0, #1
 800de82:	e7a5      	b.n	800ddd0 <_svfiprintf_r+0xd4>
 800de84:	2300      	movs	r3, #0
 800de86:	3401      	adds	r4, #1
 800de88:	9305      	str	r3, [sp, #20]
 800de8a:	4619      	mov	r1, r3
 800de8c:	f04f 0c0a 	mov.w	ip, #10
 800de90:	4620      	mov	r0, r4
 800de92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de96:	3a30      	subs	r2, #48	; 0x30
 800de98:	2a09      	cmp	r2, #9
 800de9a:	d903      	bls.n	800dea4 <_svfiprintf_r+0x1a8>
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d0c5      	beq.n	800de2c <_svfiprintf_r+0x130>
 800dea0:	9105      	str	r1, [sp, #20]
 800dea2:	e7c3      	b.n	800de2c <_svfiprintf_r+0x130>
 800dea4:	fb0c 2101 	mla	r1, ip, r1, r2
 800dea8:	4604      	mov	r4, r0
 800deaa:	2301      	movs	r3, #1
 800deac:	e7f0      	b.n	800de90 <_svfiprintf_r+0x194>
 800deae:	ab03      	add	r3, sp, #12
 800deb0:	9300      	str	r3, [sp, #0]
 800deb2:	462a      	mov	r2, r5
 800deb4:	4b0f      	ldr	r3, [pc, #60]	; (800def4 <_svfiprintf_r+0x1f8>)
 800deb6:	a904      	add	r1, sp, #16
 800deb8:	4638      	mov	r0, r7
 800deba:	f3af 8000 	nop.w
 800debe:	1c42      	adds	r2, r0, #1
 800dec0:	4606      	mov	r6, r0
 800dec2:	d1d6      	bne.n	800de72 <_svfiprintf_r+0x176>
 800dec4:	89ab      	ldrh	r3, [r5, #12]
 800dec6:	065b      	lsls	r3, r3, #25
 800dec8:	f53f af2c 	bmi.w	800dd24 <_svfiprintf_r+0x28>
 800decc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dece:	b01d      	add	sp, #116	; 0x74
 800ded0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ded4:	ab03      	add	r3, sp, #12
 800ded6:	9300      	str	r3, [sp, #0]
 800ded8:	462a      	mov	r2, r5
 800deda:	4b06      	ldr	r3, [pc, #24]	; (800def4 <_svfiprintf_r+0x1f8>)
 800dedc:	a904      	add	r1, sp, #16
 800dede:	4638      	mov	r0, r7
 800dee0:	f000 fba6 	bl	800e630 <_printf_i>
 800dee4:	e7eb      	b.n	800debe <_svfiprintf_r+0x1c2>
 800dee6:	bf00      	nop
 800dee8:	08011458 	.word	0x08011458
 800deec:	08011462 	.word	0x08011462
 800def0:	00000000 	.word	0x00000000
 800def4:	0800dc45 	.word	0x0800dc45
 800def8:	0801145e 	.word	0x0801145e

0800defc <_sungetc_r>:
 800defc:	b538      	push	{r3, r4, r5, lr}
 800defe:	1c4b      	adds	r3, r1, #1
 800df00:	4614      	mov	r4, r2
 800df02:	d103      	bne.n	800df0c <_sungetc_r+0x10>
 800df04:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800df08:	4628      	mov	r0, r5
 800df0a:	bd38      	pop	{r3, r4, r5, pc}
 800df0c:	8993      	ldrh	r3, [r2, #12]
 800df0e:	f023 0320 	bic.w	r3, r3, #32
 800df12:	8193      	strh	r3, [r2, #12]
 800df14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df16:	6852      	ldr	r2, [r2, #4]
 800df18:	b2cd      	uxtb	r5, r1
 800df1a:	b18b      	cbz	r3, 800df40 <_sungetc_r+0x44>
 800df1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df1e:	4293      	cmp	r3, r2
 800df20:	dd08      	ble.n	800df34 <_sungetc_r+0x38>
 800df22:	6823      	ldr	r3, [r4, #0]
 800df24:	1e5a      	subs	r2, r3, #1
 800df26:	6022      	str	r2, [r4, #0]
 800df28:	f803 5c01 	strb.w	r5, [r3, #-1]
 800df2c:	6863      	ldr	r3, [r4, #4]
 800df2e:	3301      	adds	r3, #1
 800df30:	6063      	str	r3, [r4, #4]
 800df32:	e7e9      	b.n	800df08 <_sungetc_r+0xc>
 800df34:	4621      	mov	r1, r4
 800df36:	f000 feb1 	bl	800ec9c <__submore>
 800df3a:	2800      	cmp	r0, #0
 800df3c:	d0f1      	beq.n	800df22 <_sungetc_r+0x26>
 800df3e:	e7e1      	b.n	800df04 <_sungetc_r+0x8>
 800df40:	6921      	ldr	r1, [r4, #16]
 800df42:	6823      	ldr	r3, [r4, #0]
 800df44:	b151      	cbz	r1, 800df5c <_sungetc_r+0x60>
 800df46:	4299      	cmp	r1, r3
 800df48:	d208      	bcs.n	800df5c <_sungetc_r+0x60>
 800df4a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800df4e:	42a9      	cmp	r1, r5
 800df50:	d104      	bne.n	800df5c <_sungetc_r+0x60>
 800df52:	3b01      	subs	r3, #1
 800df54:	3201      	adds	r2, #1
 800df56:	6023      	str	r3, [r4, #0]
 800df58:	6062      	str	r2, [r4, #4]
 800df5a:	e7d5      	b.n	800df08 <_sungetc_r+0xc>
 800df5c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800df60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df64:	6363      	str	r3, [r4, #52]	; 0x34
 800df66:	2303      	movs	r3, #3
 800df68:	63a3      	str	r3, [r4, #56]	; 0x38
 800df6a:	4623      	mov	r3, r4
 800df6c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800df70:	6023      	str	r3, [r4, #0]
 800df72:	2301      	movs	r3, #1
 800df74:	e7dc      	b.n	800df30 <_sungetc_r+0x34>

0800df76 <__ssrefill_r>:
 800df76:	b510      	push	{r4, lr}
 800df78:	460c      	mov	r4, r1
 800df7a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800df7c:	b169      	cbz	r1, 800df9a <__ssrefill_r+0x24>
 800df7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df82:	4299      	cmp	r1, r3
 800df84:	d001      	beq.n	800df8a <__ssrefill_r+0x14>
 800df86:	f7ff fadf 	bl	800d548 <_free_r>
 800df8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800df8c:	6063      	str	r3, [r4, #4]
 800df8e:	2000      	movs	r0, #0
 800df90:	6360      	str	r0, [r4, #52]	; 0x34
 800df92:	b113      	cbz	r3, 800df9a <__ssrefill_r+0x24>
 800df94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800df96:	6023      	str	r3, [r4, #0]
 800df98:	bd10      	pop	{r4, pc}
 800df9a:	6923      	ldr	r3, [r4, #16]
 800df9c:	6023      	str	r3, [r4, #0]
 800df9e:	2300      	movs	r3, #0
 800dfa0:	6063      	str	r3, [r4, #4]
 800dfa2:	89a3      	ldrh	r3, [r4, #12]
 800dfa4:	f043 0320 	orr.w	r3, r3, #32
 800dfa8:	81a3      	strh	r3, [r4, #12]
 800dfaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dfae:	e7f3      	b.n	800df98 <__ssrefill_r+0x22>

0800dfb0 <__ssvfiscanf_r>:
 800dfb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfb4:	460c      	mov	r4, r1
 800dfb6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800dfba:	2100      	movs	r1, #0
 800dfbc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800dfc0:	49a6      	ldr	r1, [pc, #664]	; (800e25c <__ssvfiscanf_r+0x2ac>)
 800dfc2:	91a0      	str	r1, [sp, #640]	; 0x280
 800dfc4:	f10d 0804 	add.w	r8, sp, #4
 800dfc8:	49a5      	ldr	r1, [pc, #660]	; (800e260 <__ssvfiscanf_r+0x2b0>)
 800dfca:	4fa6      	ldr	r7, [pc, #664]	; (800e264 <__ssvfiscanf_r+0x2b4>)
 800dfcc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800e268 <__ssvfiscanf_r+0x2b8>
 800dfd0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800dfd4:	4606      	mov	r6, r0
 800dfd6:	91a1      	str	r1, [sp, #644]	; 0x284
 800dfd8:	9300      	str	r3, [sp, #0]
 800dfda:	7813      	ldrb	r3, [r2, #0]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	f000 815a 	beq.w	800e296 <__ssvfiscanf_r+0x2e6>
 800dfe2:	5dd9      	ldrb	r1, [r3, r7]
 800dfe4:	f011 0108 	ands.w	r1, r1, #8
 800dfe8:	f102 0501 	add.w	r5, r2, #1
 800dfec:	d019      	beq.n	800e022 <__ssvfiscanf_r+0x72>
 800dfee:	6863      	ldr	r3, [r4, #4]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	dd0f      	ble.n	800e014 <__ssvfiscanf_r+0x64>
 800dff4:	6823      	ldr	r3, [r4, #0]
 800dff6:	781a      	ldrb	r2, [r3, #0]
 800dff8:	5cba      	ldrb	r2, [r7, r2]
 800dffa:	0712      	lsls	r2, r2, #28
 800dffc:	d401      	bmi.n	800e002 <__ssvfiscanf_r+0x52>
 800dffe:	462a      	mov	r2, r5
 800e000:	e7eb      	b.n	800dfda <__ssvfiscanf_r+0x2a>
 800e002:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e004:	3201      	adds	r2, #1
 800e006:	9245      	str	r2, [sp, #276]	; 0x114
 800e008:	6862      	ldr	r2, [r4, #4]
 800e00a:	3301      	adds	r3, #1
 800e00c:	3a01      	subs	r2, #1
 800e00e:	6062      	str	r2, [r4, #4]
 800e010:	6023      	str	r3, [r4, #0]
 800e012:	e7ec      	b.n	800dfee <__ssvfiscanf_r+0x3e>
 800e014:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e016:	4621      	mov	r1, r4
 800e018:	4630      	mov	r0, r6
 800e01a:	4798      	blx	r3
 800e01c:	2800      	cmp	r0, #0
 800e01e:	d0e9      	beq.n	800dff4 <__ssvfiscanf_r+0x44>
 800e020:	e7ed      	b.n	800dffe <__ssvfiscanf_r+0x4e>
 800e022:	2b25      	cmp	r3, #37	; 0x25
 800e024:	d012      	beq.n	800e04c <__ssvfiscanf_r+0x9c>
 800e026:	469a      	mov	sl, r3
 800e028:	6863      	ldr	r3, [r4, #4]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	f340 8091 	ble.w	800e152 <__ssvfiscanf_r+0x1a2>
 800e030:	6822      	ldr	r2, [r4, #0]
 800e032:	7813      	ldrb	r3, [r2, #0]
 800e034:	4553      	cmp	r3, sl
 800e036:	f040 812e 	bne.w	800e296 <__ssvfiscanf_r+0x2e6>
 800e03a:	6863      	ldr	r3, [r4, #4]
 800e03c:	3b01      	subs	r3, #1
 800e03e:	6063      	str	r3, [r4, #4]
 800e040:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e042:	3201      	adds	r2, #1
 800e044:	3301      	adds	r3, #1
 800e046:	6022      	str	r2, [r4, #0]
 800e048:	9345      	str	r3, [sp, #276]	; 0x114
 800e04a:	e7d8      	b.n	800dffe <__ssvfiscanf_r+0x4e>
 800e04c:	9141      	str	r1, [sp, #260]	; 0x104
 800e04e:	9143      	str	r1, [sp, #268]	; 0x10c
 800e050:	7853      	ldrb	r3, [r2, #1]
 800e052:	2b2a      	cmp	r3, #42	; 0x2a
 800e054:	bf02      	ittt	eq
 800e056:	2310      	moveq	r3, #16
 800e058:	1c95      	addeq	r5, r2, #2
 800e05a:	9341      	streq	r3, [sp, #260]	; 0x104
 800e05c:	220a      	movs	r2, #10
 800e05e:	46aa      	mov	sl, r5
 800e060:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e064:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e068:	2b09      	cmp	r3, #9
 800e06a:	d91d      	bls.n	800e0a8 <__ssvfiscanf_r+0xf8>
 800e06c:	487e      	ldr	r0, [pc, #504]	; (800e268 <__ssvfiscanf_r+0x2b8>)
 800e06e:	2203      	movs	r2, #3
 800e070:	f7f2 f8d6 	bl	8000220 <memchr>
 800e074:	b140      	cbz	r0, 800e088 <__ssvfiscanf_r+0xd8>
 800e076:	2301      	movs	r3, #1
 800e078:	eba0 0009 	sub.w	r0, r0, r9
 800e07c:	fa03 f000 	lsl.w	r0, r3, r0
 800e080:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e082:	4318      	orrs	r0, r3
 800e084:	9041      	str	r0, [sp, #260]	; 0x104
 800e086:	4655      	mov	r5, sl
 800e088:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e08c:	2b78      	cmp	r3, #120	; 0x78
 800e08e:	d806      	bhi.n	800e09e <__ssvfiscanf_r+0xee>
 800e090:	2b57      	cmp	r3, #87	; 0x57
 800e092:	d810      	bhi.n	800e0b6 <__ssvfiscanf_r+0x106>
 800e094:	2b25      	cmp	r3, #37	; 0x25
 800e096:	d0c6      	beq.n	800e026 <__ssvfiscanf_r+0x76>
 800e098:	d856      	bhi.n	800e148 <__ssvfiscanf_r+0x198>
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d064      	beq.n	800e168 <__ssvfiscanf_r+0x1b8>
 800e09e:	2303      	movs	r3, #3
 800e0a0:	9347      	str	r3, [sp, #284]	; 0x11c
 800e0a2:	230a      	movs	r3, #10
 800e0a4:	9342      	str	r3, [sp, #264]	; 0x108
 800e0a6:	e071      	b.n	800e18c <__ssvfiscanf_r+0x1dc>
 800e0a8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e0aa:	fb02 1103 	mla	r1, r2, r3, r1
 800e0ae:	3930      	subs	r1, #48	; 0x30
 800e0b0:	9143      	str	r1, [sp, #268]	; 0x10c
 800e0b2:	4655      	mov	r5, sl
 800e0b4:	e7d3      	b.n	800e05e <__ssvfiscanf_r+0xae>
 800e0b6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e0ba:	2a20      	cmp	r2, #32
 800e0bc:	d8ef      	bhi.n	800e09e <__ssvfiscanf_r+0xee>
 800e0be:	a101      	add	r1, pc, #4	; (adr r1, 800e0c4 <__ssvfiscanf_r+0x114>)
 800e0c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e0c4:	0800e177 	.word	0x0800e177
 800e0c8:	0800e09f 	.word	0x0800e09f
 800e0cc:	0800e09f 	.word	0x0800e09f
 800e0d0:	0800e1d5 	.word	0x0800e1d5
 800e0d4:	0800e09f 	.word	0x0800e09f
 800e0d8:	0800e09f 	.word	0x0800e09f
 800e0dc:	0800e09f 	.word	0x0800e09f
 800e0e0:	0800e09f 	.word	0x0800e09f
 800e0e4:	0800e09f 	.word	0x0800e09f
 800e0e8:	0800e09f 	.word	0x0800e09f
 800e0ec:	0800e09f 	.word	0x0800e09f
 800e0f0:	0800e1eb 	.word	0x0800e1eb
 800e0f4:	0800e1c1 	.word	0x0800e1c1
 800e0f8:	0800e14f 	.word	0x0800e14f
 800e0fc:	0800e14f 	.word	0x0800e14f
 800e100:	0800e14f 	.word	0x0800e14f
 800e104:	0800e09f 	.word	0x0800e09f
 800e108:	0800e1c5 	.word	0x0800e1c5
 800e10c:	0800e09f 	.word	0x0800e09f
 800e110:	0800e09f 	.word	0x0800e09f
 800e114:	0800e09f 	.word	0x0800e09f
 800e118:	0800e09f 	.word	0x0800e09f
 800e11c:	0800e1fb 	.word	0x0800e1fb
 800e120:	0800e1cd 	.word	0x0800e1cd
 800e124:	0800e16f 	.word	0x0800e16f
 800e128:	0800e09f 	.word	0x0800e09f
 800e12c:	0800e09f 	.word	0x0800e09f
 800e130:	0800e1f7 	.word	0x0800e1f7
 800e134:	0800e09f 	.word	0x0800e09f
 800e138:	0800e1c1 	.word	0x0800e1c1
 800e13c:	0800e09f 	.word	0x0800e09f
 800e140:	0800e09f 	.word	0x0800e09f
 800e144:	0800e177 	.word	0x0800e177
 800e148:	3b45      	subs	r3, #69	; 0x45
 800e14a:	2b02      	cmp	r3, #2
 800e14c:	d8a7      	bhi.n	800e09e <__ssvfiscanf_r+0xee>
 800e14e:	2305      	movs	r3, #5
 800e150:	e01b      	b.n	800e18a <__ssvfiscanf_r+0x1da>
 800e152:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e154:	4621      	mov	r1, r4
 800e156:	4630      	mov	r0, r6
 800e158:	4798      	blx	r3
 800e15a:	2800      	cmp	r0, #0
 800e15c:	f43f af68 	beq.w	800e030 <__ssvfiscanf_r+0x80>
 800e160:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e162:	2800      	cmp	r0, #0
 800e164:	f040 808d 	bne.w	800e282 <__ssvfiscanf_r+0x2d2>
 800e168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e16c:	e08f      	b.n	800e28e <__ssvfiscanf_r+0x2de>
 800e16e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e170:	f042 0220 	orr.w	r2, r2, #32
 800e174:	9241      	str	r2, [sp, #260]	; 0x104
 800e176:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e17c:	9241      	str	r2, [sp, #260]	; 0x104
 800e17e:	2210      	movs	r2, #16
 800e180:	2b6f      	cmp	r3, #111	; 0x6f
 800e182:	9242      	str	r2, [sp, #264]	; 0x108
 800e184:	bf34      	ite	cc
 800e186:	2303      	movcc	r3, #3
 800e188:	2304      	movcs	r3, #4
 800e18a:	9347      	str	r3, [sp, #284]	; 0x11c
 800e18c:	6863      	ldr	r3, [r4, #4]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	dd42      	ble.n	800e218 <__ssvfiscanf_r+0x268>
 800e192:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e194:	0659      	lsls	r1, r3, #25
 800e196:	d404      	bmi.n	800e1a2 <__ssvfiscanf_r+0x1f2>
 800e198:	6823      	ldr	r3, [r4, #0]
 800e19a:	781a      	ldrb	r2, [r3, #0]
 800e19c:	5cba      	ldrb	r2, [r7, r2]
 800e19e:	0712      	lsls	r2, r2, #28
 800e1a0:	d441      	bmi.n	800e226 <__ssvfiscanf_r+0x276>
 800e1a2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e1a4:	2b02      	cmp	r3, #2
 800e1a6:	dc50      	bgt.n	800e24a <__ssvfiscanf_r+0x29a>
 800e1a8:	466b      	mov	r3, sp
 800e1aa:	4622      	mov	r2, r4
 800e1ac:	a941      	add	r1, sp, #260	; 0x104
 800e1ae:	4630      	mov	r0, r6
 800e1b0:	f000 fb64 	bl	800e87c <_scanf_chars>
 800e1b4:	2801      	cmp	r0, #1
 800e1b6:	d06e      	beq.n	800e296 <__ssvfiscanf_r+0x2e6>
 800e1b8:	2802      	cmp	r0, #2
 800e1ba:	f47f af20 	bne.w	800dffe <__ssvfiscanf_r+0x4e>
 800e1be:	e7cf      	b.n	800e160 <__ssvfiscanf_r+0x1b0>
 800e1c0:	220a      	movs	r2, #10
 800e1c2:	e7dd      	b.n	800e180 <__ssvfiscanf_r+0x1d0>
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	9342      	str	r3, [sp, #264]	; 0x108
 800e1c8:	2303      	movs	r3, #3
 800e1ca:	e7de      	b.n	800e18a <__ssvfiscanf_r+0x1da>
 800e1cc:	2308      	movs	r3, #8
 800e1ce:	9342      	str	r3, [sp, #264]	; 0x108
 800e1d0:	2304      	movs	r3, #4
 800e1d2:	e7da      	b.n	800e18a <__ssvfiscanf_r+0x1da>
 800e1d4:	4629      	mov	r1, r5
 800e1d6:	4640      	mov	r0, r8
 800e1d8:	f000 fcb4 	bl	800eb44 <__sccl>
 800e1dc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e1de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1e2:	9341      	str	r3, [sp, #260]	; 0x104
 800e1e4:	4605      	mov	r5, r0
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	e7cf      	b.n	800e18a <__ssvfiscanf_r+0x1da>
 800e1ea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e1ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1f0:	9341      	str	r3, [sp, #260]	; 0x104
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	e7c9      	b.n	800e18a <__ssvfiscanf_r+0x1da>
 800e1f6:	2302      	movs	r3, #2
 800e1f8:	e7c7      	b.n	800e18a <__ssvfiscanf_r+0x1da>
 800e1fa:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e1fc:	06c3      	lsls	r3, r0, #27
 800e1fe:	f53f aefe 	bmi.w	800dffe <__ssvfiscanf_r+0x4e>
 800e202:	9b00      	ldr	r3, [sp, #0]
 800e204:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e206:	1d19      	adds	r1, r3, #4
 800e208:	9100      	str	r1, [sp, #0]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	f010 0f01 	tst.w	r0, #1
 800e210:	bf14      	ite	ne
 800e212:	801a      	strhne	r2, [r3, #0]
 800e214:	601a      	streq	r2, [r3, #0]
 800e216:	e6f2      	b.n	800dffe <__ssvfiscanf_r+0x4e>
 800e218:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e21a:	4621      	mov	r1, r4
 800e21c:	4630      	mov	r0, r6
 800e21e:	4798      	blx	r3
 800e220:	2800      	cmp	r0, #0
 800e222:	d0b6      	beq.n	800e192 <__ssvfiscanf_r+0x1e2>
 800e224:	e79c      	b.n	800e160 <__ssvfiscanf_r+0x1b0>
 800e226:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e228:	3201      	adds	r2, #1
 800e22a:	9245      	str	r2, [sp, #276]	; 0x114
 800e22c:	6862      	ldr	r2, [r4, #4]
 800e22e:	3a01      	subs	r2, #1
 800e230:	2a00      	cmp	r2, #0
 800e232:	6062      	str	r2, [r4, #4]
 800e234:	dd02      	ble.n	800e23c <__ssvfiscanf_r+0x28c>
 800e236:	3301      	adds	r3, #1
 800e238:	6023      	str	r3, [r4, #0]
 800e23a:	e7ad      	b.n	800e198 <__ssvfiscanf_r+0x1e8>
 800e23c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e23e:	4621      	mov	r1, r4
 800e240:	4630      	mov	r0, r6
 800e242:	4798      	blx	r3
 800e244:	2800      	cmp	r0, #0
 800e246:	d0a7      	beq.n	800e198 <__ssvfiscanf_r+0x1e8>
 800e248:	e78a      	b.n	800e160 <__ssvfiscanf_r+0x1b0>
 800e24a:	2b04      	cmp	r3, #4
 800e24c:	dc0e      	bgt.n	800e26c <__ssvfiscanf_r+0x2bc>
 800e24e:	466b      	mov	r3, sp
 800e250:	4622      	mov	r2, r4
 800e252:	a941      	add	r1, sp, #260	; 0x104
 800e254:	4630      	mov	r0, r6
 800e256:	f000 fb6b 	bl	800e930 <_scanf_i>
 800e25a:	e7ab      	b.n	800e1b4 <__ssvfiscanf_r+0x204>
 800e25c:	0800defd 	.word	0x0800defd
 800e260:	0800df77 	.word	0x0800df77
 800e264:	080112f1 	.word	0x080112f1
 800e268:	0801145e 	.word	0x0801145e
 800e26c:	4b0b      	ldr	r3, [pc, #44]	; (800e29c <__ssvfiscanf_r+0x2ec>)
 800e26e:	2b00      	cmp	r3, #0
 800e270:	f43f aec5 	beq.w	800dffe <__ssvfiscanf_r+0x4e>
 800e274:	466b      	mov	r3, sp
 800e276:	4622      	mov	r2, r4
 800e278:	a941      	add	r1, sp, #260	; 0x104
 800e27a:	4630      	mov	r0, r6
 800e27c:	f3af 8000 	nop.w
 800e280:	e798      	b.n	800e1b4 <__ssvfiscanf_r+0x204>
 800e282:	89a3      	ldrh	r3, [r4, #12]
 800e284:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e288:	bf18      	it	ne
 800e28a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800e28e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800e292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e296:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e298:	e7f9      	b.n	800e28e <__ssvfiscanf_r+0x2de>
 800e29a:	bf00      	nop
 800e29c:	00000000 	.word	0x00000000

0800e2a0 <__sfputc_r>:
 800e2a0:	6893      	ldr	r3, [r2, #8]
 800e2a2:	3b01      	subs	r3, #1
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	b410      	push	{r4}
 800e2a8:	6093      	str	r3, [r2, #8]
 800e2aa:	da08      	bge.n	800e2be <__sfputc_r+0x1e>
 800e2ac:	6994      	ldr	r4, [r2, #24]
 800e2ae:	42a3      	cmp	r3, r4
 800e2b0:	db01      	blt.n	800e2b6 <__sfputc_r+0x16>
 800e2b2:	290a      	cmp	r1, #10
 800e2b4:	d103      	bne.n	800e2be <__sfputc_r+0x1e>
 800e2b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2ba:	f000 bd29 	b.w	800ed10 <__swbuf_r>
 800e2be:	6813      	ldr	r3, [r2, #0]
 800e2c0:	1c58      	adds	r0, r3, #1
 800e2c2:	6010      	str	r0, [r2, #0]
 800e2c4:	7019      	strb	r1, [r3, #0]
 800e2c6:	4608      	mov	r0, r1
 800e2c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2cc:	4770      	bx	lr

0800e2ce <__sfputs_r>:
 800e2ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2d0:	4606      	mov	r6, r0
 800e2d2:	460f      	mov	r7, r1
 800e2d4:	4614      	mov	r4, r2
 800e2d6:	18d5      	adds	r5, r2, r3
 800e2d8:	42ac      	cmp	r4, r5
 800e2da:	d101      	bne.n	800e2e0 <__sfputs_r+0x12>
 800e2dc:	2000      	movs	r0, #0
 800e2de:	e007      	b.n	800e2f0 <__sfputs_r+0x22>
 800e2e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2e4:	463a      	mov	r2, r7
 800e2e6:	4630      	mov	r0, r6
 800e2e8:	f7ff ffda 	bl	800e2a0 <__sfputc_r>
 800e2ec:	1c43      	adds	r3, r0, #1
 800e2ee:	d1f3      	bne.n	800e2d8 <__sfputs_r+0xa>
 800e2f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e2f4 <_vfiprintf_r>:
 800e2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2f8:	460d      	mov	r5, r1
 800e2fa:	b09d      	sub	sp, #116	; 0x74
 800e2fc:	4614      	mov	r4, r2
 800e2fe:	4698      	mov	r8, r3
 800e300:	4606      	mov	r6, r0
 800e302:	b118      	cbz	r0, 800e30c <_vfiprintf_r+0x18>
 800e304:	6983      	ldr	r3, [r0, #24]
 800e306:	b90b      	cbnz	r3, 800e30c <_vfiprintf_r+0x18>
 800e308:	f7ff fbde 	bl	800dac8 <__sinit>
 800e30c:	4b89      	ldr	r3, [pc, #548]	; (800e534 <_vfiprintf_r+0x240>)
 800e30e:	429d      	cmp	r5, r3
 800e310:	d11b      	bne.n	800e34a <_vfiprintf_r+0x56>
 800e312:	6875      	ldr	r5, [r6, #4]
 800e314:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e316:	07d9      	lsls	r1, r3, #31
 800e318:	d405      	bmi.n	800e326 <_vfiprintf_r+0x32>
 800e31a:	89ab      	ldrh	r3, [r5, #12]
 800e31c:	059a      	lsls	r2, r3, #22
 800e31e:	d402      	bmi.n	800e326 <_vfiprintf_r+0x32>
 800e320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e322:	f7ff fc6f 	bl	800dc04 <__retarget_lock_acquire_recursive>
 800e326:	89ab      	ldrh	r3, [r5, #12]
 800e328:	071b      	lsls	r3, r3, #28
 800e32a:	d501      	bpl.n	800e330 <_vfiprintf_r+0x3c>
 800e32c:	692b      	ldr	r3, [r5, #16]
 800e32e:	b9eb      	cbnz	r3, 800e36c <_vfiprintf_r+0x78>
 800e330:	4629      	mov	r1, r5
 800e332:	4630      	mov	r0, r6
 800e334:	f000 fd3e 	bl	800edb4 <__swsetup_r>
 800e338:	b1c0      	cbz	r0, 800e36c <_vfiprintf_r+0x78>
 800e33a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e33c:	07dc      	lsls	r4, r3, #31
 800e33e:	d50e      	bpl.n	800e35e <_vfiprintf_r+0x6a>
 800e340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e344:	b01d      	add	sp, #116	; 0x74
 800e346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e34a:	4b7b      	ldr	r3, [pc, #492]	; (800e538 <_vfiprintf_r+0x244>)
 800e34c:	429d      	cmp	r5, r3
 800e34e:	d101      	bne.n	800e354 <_vfiprintf_r+0x60>
 800e350:	68b5      	ldr	r5, [r6, #8]
 800e352:	e7df      	b.n	800e314 <_vfiprintf_r+0x20>
 800e354:	4b79      	ldr	r3, [pc, #484]	; (800e53c <_vfiprintf_r+0x248>)
 800e356:	429d      	cmp	r5, r3
 800e358:	bf08      	it	eq
 800e35a:	68f5      	ldreq	r5, [r6, #12]
 800e35c:	e7da      	b.n	800e314 <_vfiprintf_r+0x20>
 800e35e:	89ab      	ldrh	r3, [r5, #12]
 800e360:	0598      	lsls	r0, r3, #22
 800e362:	d4ed      	bmi.n	800e340 <_vfiprintf_r+0x4c>
 800e364:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e366:	f7ff fc4e 	bl	800dc06 <__retarget_lock_release_recursive>
 800e36a:	e7e9      	b.n	800e340 <_vfiprintf_r+0x4c>
 800e36c:	2300      	movs	r3, #0
 800e36e:	9309      	str	r3, [sp, #36]	; 0x24
 800e370:	2320      	movs	r3, #32
 800e372:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e376:	f8cd 800c 	str.w	r8, [sp, #12]
 800e37a:	2330      	movs	r3, #48	; 0x30
 800e37c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e540 <_vfiprintf_r+0x24c>
 800e380:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e384:	f04f 0901 	mov.w	r9, #1
 800e388:	4623      	mov	r3, r4
 800e38a:	469a      	mov	sl, r3
 800e38c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e390:	b10a      	cbz	r2, 800e396 <_vfiprintf_r+0xa2>
 800e392:	2a25      	cmp	r2, #37	; 0x25
 800e394:	d1f9      	bne.n	800e38a <_vfiprintf_r+0x96>
 800e396:	ebba 0b04 	subs.w	fp, sl, r4
 800e39a:	d00b      	beq.n	800e3b4 <_vfiprintf_r+0xc0>
 800e39c:	465b      	mov	r3, fp
 800e39e:	4622      	mov	r2, r4
 800e3a0:	4629      	mov	r1, r5
 800e3a2:	4630      	mov	r0, r6
 800e3a4:	f7ff ff93 	bl	800e2ce <__sfputs_r>
 800e3a8:	3001      	adds	r0, #1
 800e3aa:	f000 80aa 	beq.w	800e502 <_vfiprintf_r+0x20e>
 800e3ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3b0:	445a      	add	r2, fp
 800e3b2:	9209      	str	r2, [sp, #36]	; 0x24
 800e3b4:	f89a 3000 	ldrb.w	r3, [sl]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	f000 80a2 	beq.w	800e502 <_vfiprintf_r+0x20e>
 800e3be:	2300      	movs	r3, #0
 800e3c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e3c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e3c8:	f10a 0a01 	add.w	sl, sl, #1
 800e3cc:	9304      	str	r3, [sp, #16]
 800e3ce:	9307      	str	r3, [sp, #28]
 800e3d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e3d4:	931a      	str	r3, [sp, #104]	; 0x68
 800e3d6:	4654      	mov	r4, sl
 800e3d8:	2205      	movs	r2, #5
 800e3da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3de:	4858      	ldr	r0, [pc, #352]	; (800e540 <_vfiprintf_r+0x24c>)
 800e3e0:	f7f1 ff1e 	bl	8000220 <memchr>
 800e3e4:	9a04      	ldr	r2, [sp, #16]
 800e3e6:	b9d8      	cbnz	r0, 800e420 <_vfiprintf_r+0x12c>
 800e3e8:	06d1      	lsls	r1, r2, #27
 800e3ea:	bf44      	itt	mi
 800e3ec:	2320      	movmi	r3, #32
 800e3ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e3f2:	0713      	lsls	r3, r2, #28
 800e3f4:	bf44      	itt	mi
 800e3f6:	232b      	movmi	r3, #43	; 0x2b
 800e3f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e3fc:	f89a 3000 	ldrb.w	r3, [sl]
 800e400:	2b2a      	cmp	r3, #42	; 0x2a
 800e402:	d015      	beq.n	800e430 <_vfiprintf_r+0x13c>
 800e404:	9a07      	ldr	r2, [sp, #28]
 800e406:	4654      	mov	r4, sl
 800e408:	2000      	movs	r0, #0
 800e40a:	f04f 0c0a 	mov.w	ip, #10
 800e40e:	4621      	mov	r1, r4
 800e410:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e414:	3b30      	subs	r3, #48	; 0x30
 800e416:	2b09      	cmp	r3, #9
 800e418:	d94e      	bls.n	800e4b8 <_vfiprintf_r+0x1c4>
 800e41a:	b1b0      	cbz	r0, 800e44a <_vfiprintf_r+0x156>
 800e41c:	9207      	str	r2, [sp, #28]
 800e41e:	e014      	b.n	800e44a <_vfiprintf_r+0x156>
 800e420:	eba0 0308 	sub.w	r3, r0, r8
 800e424:	fa09 f303 	lsl.w	r3, r9, r3
 800e428:	4313      	orrs	r3, r2
 800e42a:	9304      	str	r3, [sp, #16]
 800e42c:	46a2      	mov	sl, r4
 800e42e:	e7d2      	b.n	800e3d6 <_vfiprintf_r+0xe2>
 800e430:	9b03      	ldr	r3, [sp, #12]
 800e432:	1d19      	adds	r1, r3, #4
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	9103      	str	r1, [sp, #12]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	bfbb      	ittet	lt
 800e43c:	425b      	neglt	r3, r3
 800e43e:	f042 0202 	orrlt.w	r2, r2, #2
 800e442:	9307      	strge	r3, [sp, #28]
 800e444:	9307      	strlt	r3, [sp, #28]
 800e446:	bfb8      	it	lt
 800e448:	9204      	strlt	r2, [sp, #16]
 800e44a:	7823      	ldrb	r3, [r4, #0]
 800e44c:	2b2e      	cmp	r3, #46	; 0x2e
 800e44e:	d10c      	bne.n	800e46a <_vfiprintf_r+0x176>
 800e450:	7863      	ldrb	r3, [r4, #1]
 800e452:	2b2a      	cmp	r3, #42	; 0x2a
 800e454:	d135      	bne.n	800e4c2 <_vfiprintf_r+0x1ce>
 800e456:	9b03      	ldr	r3, [sp, #12]
 800e458:	1d1a      	adds	r2, r3, #4
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	9203      	str	r2, [sp, #12]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	bfb8      	it	lt
 800e462:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e466:	3402      	adds	r4, #2
 800e468:	9305      	str	r3, [sp, #20]
 800e46a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e550 <_vfiprintf_r+0x25c>
 800e46e:	7821      	ldrb	r1, [r4, #0]
 800e470:	2203      	movs	r2, #3
 800e472:	4650      	mov	r0, sl
 800e474:	f7f1 fed4 	bl	8000220 <memchr>
 800e478:	b140      	cbz	r0, 800e48c <_vfiprintf_r+0x198>
 800e47a:	2340      	movs	r3, #64	; 0x40
 800e47c:	eba0 000a 	sub.w	r0, r0, sl
 800e480:	fa03 f000 	lsl.w	r0, r3, r0
 800e484:	9b04      	ldr	r3, [sp, #16]
 800e486:	4303      	orrs	r3, r0
 800e488:	3401      	adds	r4, #1
 800e48a:	9304      	str	r3, [sp, #16]
 800e48c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e490:	482c      	ldr	r0, [pc, #176]	; (800e544 <_vfiprintf_r+0x250>)
 800e492:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e496:	2206      	movs	r2, #6
 800e498:	f7f1 fec2 	bl	8000220 <memchr>
 800e49c:	2800      	cmp	r0, #0
 800e49e:	d03f      	beq.n	800e520 <_vfiprintf_r+0x22c>
 800e4a0:	4b29      	ldr	r3, [pc, #164]	; (800e548 <_vfiprintf_r+0x254>)
 800e4a2:	bb1b      	cbnz	r3, 800e4ec <_vfiprintf_r+0x1f8>
 800e4a4:	9b03      	ldr	r3, [sp, #12]
 800e4a6:	3307      	adds	r3, #7
 800e4a8:	f023 0307 	bic.w	r3, r3, #7
 800e4ac:	3308      	adds	r3, #8
 800e4ae:	9303      	str	r3, [sp, #12]
 800e4b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4b2:	443b      	add	r3, r7
 800e4b4:	9309      	str	r3, [sp, #36]	; 0x24
 800e4b6:	e767      	b.n	800e388 <_vfiprintf_r+0x94>
 800e4b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4bc:	460c      	mov	r4, r1
 800e4be:	2001      	movs	r0, #1
 800e4c0:	e7a5      	b.n	800e40e <_vfiprintf_r+0x11a>
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	3401      	adds	r4, #1
 800e4c6:	9305      	str	r3, [sp, #20]
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	f04f 0c0a 	mov.w	ip, #10
 800e4ce:	4620      	mov	r0, r4
 800e4d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4d4:	3a30      	subs	r2, #48	; 0x30
 800e4d6:	2a09      	cmp	r2, #9
 800e4d8:	d903      	bls.n	800e4e2 <_vfiprintf_r+0x1ee>
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d0c5      	beq.n	800e46a <_vfiprintf_r+0x176>
 800e4de:	9105      	str	r1, [sp, #20]
 800e4e0:	e7c3      	b.n	800e46a <_vfiprintf_r+0x176>
 800e4e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e4e6:	4604      	mov	r4, r0
 800e4e8:	2301      	movs	r3, #1
 800e4ea:	e7f0      	b.n	800e4ce <_vfiprintf_r+0x1da>
 800e4ec:	ab03      	add	r3, sp, #12
 800e4ee:	9300      	str	r3, [sp, #0]
 800e4f0:	462a      	mov	r2, r5
 800e4f2:	4b16      	ldr	r3, [pc, #88]	; (800e54c <_vfiprintf_r+0x258>)
 800e4f4:	a904      	add	r1, sp, #16
 800e4f6:	4630      	mov	r0, r6
 800e4f8:	f3af 8000 	nop.w
 800e4fc:	4607      	mov	r7, r0
 800e4fe:	1c78      	adds	r0, r7, #1
 800e500:	d1d6      	bne.n	800e4b0 <_vfiprintf_r+0x1bc>
 800e502:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e504:	07d9      	lsls	r1, r3, #31
 800e506:	d405      	bmi.n	800e514 <_vfiprintf_r+0x220>
 800e508:	89ab      	ldrh	r3, [r5, #12]
 800e50a:	059a      	lsls	r2, r3, #22
 800e50c:	d402      	bmi.n	800e514 <_vfiprintf_r+0x220>
 800e50e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e510:	f7ff fb79 	bl	800dc06 <__retarget_lock_release_recursive>
 800e514:	89ab      	ldrh	r3, [r5, #12]
 800e516:	065b      	lsls	r3, r3, #25
 800e518:	f53f af12 	bmi.w	800e340 <_vfiprintf_r+0x4c>
 800e51c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e51e:	e711      	b.n	800e344 <_vfiprintf_r+0x50>
 800e520:	ab03      	add	r3, sp, #12
 800e522:	9300      	str	r3, [sp, #0]
 800e524:	462a      	mov	r2, r5
 800e526:	4b09      	ldr	r3, [pc, #36]	; (800e54c <_vfiprintf_r+0x258>)
 800e528:	a904      	add	r1, sp, #16
 800e52a:	4630      	mov	r0, r6
 800e52c:	f000 f880 	bl	800e630 <_printf_i>
 800e530:	e7e4      	b.n	800e4fc <_vfiprintf_r+0x208>
 800e532:	bf00      	nop
 800e534:	08011418 	.word	0x08011418
 800e538:	08011438 	.word	0x08011438
 800e53c:	080113f8 	.word	0x080113f8
 800e540:	08011458 	.word	0x08011458
 800e544:	08011462 	.word	0x08011462
 800e548:	00000000 	.word	0x00000000
 800e54c:	0800e2cf 	.word	0x0800e2cf
 800e550:	0801145e 	.word	0x0801145e

0800e554 <_printf_common>:
 800e554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e558:	4616      	mov	r6, r2
 800e55a:	4699      	mov	r9, r3
 800e55c:	688a      	ldr	r2, [r1, #8]
 800e55e:	690b      	ldr	r3, [r1, #16]
 800e560:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e564:	4293      	cmp	r3, r2
 800e566:	bfb8      	it	lt
 800e568:	4613      	movlt	r3, r2
 800e56a:	6033      	str	r3, [r6, #0]
 800e56c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e570:	4607      	mov	r7, r0
 800e572:	460c      	mov	r4, r1
 800e574:	b10a      	cbz	r2, 800e57a <_printf_common+0x26>
 800e576:	3301      	adds	r3, #1
 800e578:	6033      	str	r3, [r6, #0]
 800e57a:	6823      	ldr	r3, [r4, #0]
 800e57c:	0699      	lsls	r1, r3, #26
 800e57e:	bf42      	ittt	mi
 800e580:	6833      	ldrmi	r3, [r6, #0]
 800e582:	3302      	addmi	r3, #2
 800e584:	6033      	strmi	r3, [r6, #0]
 800e586:	6825      	ldr	r5, [r4, #0]
 800e588:	f015 0506 	ands.w	r5, r5, #6
 800e58c:	d106      	bne.n	800e59c <_printf_common+0x48>
 800e58e:	f104 0a19 	add.w	sl, r4, #25
 800e592:	68e3      	ldr	r3, [r4, #12]
 800e594:	6832      	ldr	r2, [r6, #0]
 800e596:	1a9b      	subs	r3, r3, r2
 800e598:	42ab      	cmp	r3, r5
 800e59a:	dc26      	bgt.n	800e5ea <_printf_common+0x96>
 800e59c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e5a0:	1e13      	subs	r3, r2, #0
 800e5a2:	6822      	ldr	r2, [r4, #0]
 800e5a4:	bf18      	it	ne
 800e5a6:	2301      	movne	r3, #1
 800e5a8:	0692      	lsls	r2, r2, #26
 800e5aa:	d42b      	bmi.n	800e604 <_printf_common+0xb0>
 800e5ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e5b0:	4649      	mov	r1, r9
 800e5b2:	4638      	mov	r0, r7
 800e5b4:	47c0      	blx	r8
 800e5b6:	3001      	adds	r0, #1
 800e5b8:	d01e      	beq.n	800e5f8 <_printf_common+0xa4>
 800e5ba:	6823      	ldr	r3, [r4, #0]
 800e5bc:	68e5      	ldr	r5, [r4, #12]
 800e5be:	6832      	ldr	r2, [r6, #0]
 800e5c0:	f003 0306 	and.w	r3, r3, #6
 800e5c4:	2b04      	cmp	r3, #4
 800e5c6:	bf08      	it	eq
 800e5c8:	1aad      	subeq	r5, r5, r2
 800e5ca:	68a3      	ldr	r3, [r4, #8]
 800e5cc:	6922      	ldr	r2, [r4, #16]
 800e5ce:	bf0c      	ite	eq
 800e5d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e5d4:	2500      	movne	r5, #0
 800e5d6:	4293      	cmp	r3, r2
 800e5d8:	bfc4      	itt	gt
 800e5da:	1a9b      	subgt	r3, r3, r2
 800e5dc:	18ed      	addgt	r5, r5, r3
 800e5de:	2600      	movs	r6, #0
 800e5e0:	341a      	adds	r4, #26
 800e5e2:	42b5      	cmp	r5, r6
 800e5e4:	d11a      	bne.n	800e61c <_printf_common+0xc8>
 800e5e6:	2000      	movs	r0, #0
 800e5e8:	e008      	b.n	800e5fc <_printf_common+0xa8>
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	4652      	mov	r2, sl
 800e5ee:	4649      	mov	r1, r9
 800e5f0:	4638      	mov	r0, r7
 800e5f2:	47c0      	blx	r8
 800e5f4:	3001      	adds	r0, #1
 800e5f6:	d103      	bne.n	800e600 <_printf_common+0xac>
 800e5f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e5fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e600:	3501      	adds	r5, #1
 800e602:	e7c6      	b.n	800e592 <_printf_common+0x3e>
 800e604:	18e1      	adds	r1, r4, r3
 800e606:	1c5a      	adds	r2, r3, #1
 800e608:	2030      	movs	r0, #48	; 0x30
 800e60a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e60e:	4422      	add	r2, r4
 800e610:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e614:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e618:	3302      	adds	r3, #2
 800e61a:	e7c7      	b.n	800e5ac <_printf_common+0x58>
 800e61c:	2301      	movs	r3, #1
 800e61e:	4622      	mov	r2, r4
 800e620:	4649      	mov	r1, r9
 800e622:	4638      	mov	r0, r7
 800e624:	47c0      	blx	r8
 800e626:	3001      	adds	r0, #1
 800e628:	d0e6      	beq.n	800e5f8 <_printf_common+0xa4>
 800e62a:	3601      	adds	r6, #1
 800e62c:	e7d9      	b.n	800e5e2 <_printf_common+0x8e>
	...

0800e630 <_printf_i>:
 800e630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e634:	7e0f      	ldrb	r7, [r1, #24]
 800e636:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e638:	2f78      	cmp	r7, #120	; 0x78
 800e63a:	4691      	mov	r9, r2
 800e63c:	4680      	mov	r8, r0
 800e63e:	460c      	mov	r4, r1
 800e640:	469a      	mov	sl, r3
 800e642:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e646:	d807      	bhi.n	800e658 <_printf_i+0x28>
 800e648:	2f62      	cmp	r7, #98	; 0x62
 800e64a:	d80a      	bhi.n	800e662 <_printf_i+0x32>
 800e64c:	2f00      	cmp	r7, #0
 800e64e:	f000 80d8 	beq.w	800e802 <_printf_i+0x1d2>
 800e652:	2f58      	cmp	r7, #88	; 0x58
 800e654:	f000 80a3 	beq.w	800e79e <_printf_i+0x16e>
 800e658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e65c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e660:	e03a      	b.n	800e6d8 <_printf_i+0xa8>
 800e662:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e666:	2b15      	cmp	r3, #21
 800e668:	d8f6      	bhi.n	800e658 <_printf_i+0x28>
 800e66a:	a101      	add	r1, pc, #4	; (adr r1, 800e670 <_printf_i+0x40>)
 800e66c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e670:	0800e6c9 	.word	0x0800e6c9
 800e674:	0800e6dd 	.word	0x0800e6dd
 800e678:	0800e659 	.word	0x0800e659
 800e67c:	0800e659 	.word	0x0800e659
 800e680:	0800e659 	.word	0x0800e659
 800e684:	0800e659 	.word	0x0800e659
 800e688:	0800e6dd 	.word	0x0800e6dd
 800e68c:	0800e659 	.word	0x0800e659
 800e690:	0800e659 	.word	0x0800e659
 800e694:	0800e659 	.word	0x0800e659
 800e698:	0800e659 	.word	0x0800e659
 800e69c:	0800e7e9 	.word	0x0800e7e9
 800e6a0:	0800e70d 	.word	0x0800e70d
 800e6a4:	0800e7cb 	.word	0x0800e7cb
 800e6a8:	0800e659 	.word	0x0800e659
 800e6ac:	0800e659 	.word	0x0800e659
 800e6b0:	0800e80b 	.word	0x0800e80b
 800e6b4:	0800e659 	.word	0x0800e659
 800e6b8:	0800e70d 	.word	0x0800e70d
 800e6bc:	0800e659 	.word	0x0800e659
 800e6c0:	0800e659 	.word	0x0800e659
 800e6c4:	0800e7d3 	.word	0x0800e7d3
 800e6c8:	682b      	ldr	r3, [r5, #0]
 800e6ca:	1d1a      	adds	r2, r3, #4
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	602a      	str	r2, [r5, #0]
 800e6d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e6d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e6d8:	2301      	movs	r3, #1
 800e6da:	e0a3      	b.n	800e824 <_printf_i+0x1f4>
 800e6dc:	6820      	ldr	r0, [r4, #0]
 800e6de:	6829      	ldr	r1, [r5, #0]
 800e6e0:	0606      	lsls	r6, r0, #24
 800e6e2:	f101 0304 	add.w	r3, r1, #4
 800e6e6:	d50a      	bpl.n	800e6fe <_printf_i+0xce>
 800e6e8:	680e      	ldr	r6, [r1, #0]
 800e6ea:	602b      	str	r3, [r5, #0]
 800e6ec:	2e00      	cmp	r6, #0
 800e6ee:	da03      	bge.n	800e6f8 <_printf_i+0xc8>
 800e6f0:	232d      	movs	r3, #45	; 0x2d
 800e6f2:	4276      	negs	r6, r6
 800e6f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6f8:	485e      	ldr	r0, [pc, #376]	; (800e874 <_printf_i+0x244>)
 800e6fa:	230a      	movs	r3, #10
 800e6fc:	e019      	b.n	800e732 <_printf_i+0x102>
 800e6fe:	680e      	ldr	r6, [r1, #0]
 800e700:	602b      	str	r3, [r5, #0]
 800e702:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e706:	bf18      	it	ne
 800e708:	b236      	sxthne	r6, r6
 800e70a:	e7ef      	b.n	800e6ec <_printf_i+0xbc>
 800e70c:	682b      	ldr	r3, [r5, #0]
 800e70e:	6820      	ldr	r0, [r4, #0]
 800e710:	1d19      	adds	r1, r3, #4
 800e712:	6029      	str	r1, [r5, #0]
 800e714:	0601      	lsls	r1, r0, #24
 800e716:	d501      	bpl.n	800e71c <_printf_i+0xec>
 800e718:	681e      	ldr	r6, [r3, #0]
 800e71a:	e002      	b.n	800e722 <_printf_i+0xf2>
 800e71c:	0646      	lsls	r6, r0, #25
 800e71e:	d5fb      	bpl.n	800e718 <_printf_i+0xe8>
 800e720:	881e      	ldrh	r6, [r3, #0]
 800e722:	4854      	ldr	r0, [pc, #336]	; (800e874 <_printf_i+0x244>)
 800e724:	2f6f      	cmp	r7, #111	; 0x6f
 800e726:	bf0c      	ite	eq
 800e728:	2308      	moveq	r3, #8
 800e72a:	230a      	movne	r3, #10
 800e72c:	2100      	movs	r1, #0
 800e72e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e732:	6865      	ldr	r5, [r4, #4]
 800e734:	60a5      	str	r5, [r4, #8]
 800e736:	2d00      	cmp	r5, #0
 800e738:	bfa2      	ittt	ge
 800e73a:	6821      	ldrge	r1, [r4, #0]
 800e73c:	f021 0104 	bicge.w	r1, r1, #4
 800e740:	6021      	strge	r1, [r4, #0]
 800e742:	b90e      	cbnz	r6, 800e748 <_printf_i+0x118>
 800e744:	2d00      	cmp	r5, #0
 800e746:	d04d      	beq.n	800e7e4 <_printf_i+0x1b4>
 800e748:	4615      	mov	r5, r2
 800e74a:	fbb6 f1f3 	udiv	r1, r6, r3
 800e74e:	fb03 6711 	mls	r7, r3, r1, r6
 800e752:	5dc7      	ldrb	r7, [r0, r7]
 800e754:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e758:	4637      	mov	r7, r6
 800e75a:	42bb      	cmp	r3, r7
 800e75c:	460e      	mov	r6, r1
 800e75e:	d9f4      	bls.n	800e74a <_printf_i+0x11a>
 800e760:	2b08      	cmp	r3, #8
 800e762:	d10b      	bne.n	800e77c <_printf_i+0x14c>
 800e764:	6823      	ldr	r3, [r4, #0]
 800e766:	07de      	lsls	r6, r3, #31
 800e768:	d508      	bpl.n	800e77c <_printf_i+0x14c>
 800e76a:	6923      	ldr	r3, [r4, #16]
 800e76c:	6861      	ldr	r1, [r4, #4]
 800e76e:	4299      	cmp	r1, r3
 800e770:	bfde      	ittt	le
 800e772:	2330      	movle	r3, #48	; 0x30
 800e774:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e778:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e77c:	1b52      	subs	r2, r2, r5
 800e77e:	6122      	str	r2, [r4, #16]
 800e780:	f8cd a000 	str.w	sl, [sp]
 800e784:	464b      	mov	r3, r9
 800e786:	aa03      	add	r2, sp, #12
 800e788:	4621      	mov	r1, r4
 800e78a:	4640      	mov	r0, r8
 800e78c:	f7ff fee2 	bl	800e554 <_printf_common>
 800e790:	3001      	adds	r0, #1
 800e792:	d14c      	bne.n	800e82e <_printf_i+0x1fe>
 800e794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e798:	b004      	add	sp, #16
 800e79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e79e:	4835      	ldr	r0, [pc, #212]	; (800e874 <_printf_i+0x244>)
 800e7a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e7a4:	6829      	ldr	r1, [r5, #0]
 800e7a6:	6823      	ldr	r3, [r4, #0]
 800e7a8:	f851 6b04 	ldr.w	r6, [r1], #4
 800e7ac:	6029      	str	r1, [r5, #0]
 800e7ae:	061d      	lsls	r5, r3, #24
 800e7b0:	d514      	bpl.n	800e7dc <_printf_i+0x1ac>
 800e7b2:	07df      	lsls	r7, r3, #31
 800e7b4:	bf44      	itt	mi
 800e7b6:	f043 0320 	orrmi.w	r3, r3, #32
 800e7ba:	6023      	strmi	r3, [r4, #0]
 800e7bc:	b91e      	cbnz	r6, 800e7c6 <_printf_i+0x196>
 800e7be:	6823      	ldr	r3, [r4, #0]
 800e7c0:	f023 0320 	bic.w	r3, r3, #32
 800e7c4:	6023      	str	r3, [r4, #0]
 800e7c6:	2310      	movs	r3, #16
 800e7c8:	e7b0      	b.n	800e72c <_printf_i+0xfc>
 800e7ca:	6823      	ldr	r3, [r4, #0]
 800e7cc:	f043 0320 	orr.w	r3, r3, #32
 800e7d0:	6023      	str	r3, [r4, #0]
 800e7d2:	2378      	movs	r3, #120	; 0x78
 800e7d4:	4828      	ldr	r0, [pc, #160]	; (800e878 <_printf_i+0x248>)
 800e7d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e7da:	e7e3      	b.n	800e7a4 <_printf_i+0x174>
 800e7dc:	0659      	lsls	r1, r3, #25
 800e7de:	bf48      	it	mi
 800e7e0:	b2b6      	uxthmi	r6, r6
 800e7e2:	e7e6      	b.n	800e7b2 <_printf_i+0x182>
 800e7e4:	4615      	mov	r5, r2
 800e7e6:	e7bb      	b.n	800e760 <_printf_i+0x130>
 800e7e8:	682b      	ldr	r3, [r5, #0]
 800e7ea:	6826      	ldr	r6, [r4, #0]
 800e7ec:	6961      	ldr	r1, [r4, #20]
 800e7ee:	1d18      	adds	r0, r3, #4
 800e7f0:	6028      	str	r0, [r5, #0]
 800e7f2:	0635      	lsls	r5, r6, #24
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	d501      	bpl.n	800e7fc <_printf_i+0x1cc>
 800e7f8:	6019      	str	r1, [r3, #0]
 800e7fa:	e002      	b.n	800e802 <_printf_i+0x1d2>
 800e7fc:	0670      	lsls	r0, r6, #25
 800e7fe:	d5fb      	bpl.n	800e7f8 <_printf_i+0x1c8>
 800e800:	8019      	strh	r1, [r3, #0]
 800e802:	2300      	movs	r3, #0
 800e804:	6123      	str	r3, [r4, #16]
 800e806:	4615      	mov	r5, r2
 800e808:	e7ba      	b.n	800e780 <_printf_i+0x150>
 800e80a:	682b      	ldr	r3, [r5, #0]
 800e80c:	1d1a      	adds	r2, r3, #4
 800e80e:	602a      	str	r2, [r5, #0]
 800e810:	681d      	ldr	r5, [r3, #0]
 800e812:	6862      	ldr	r2, [r4, #4]
 800e814:	2100      	movs	r1, #0
 800e816:	4628      	mov	r0, r5
 800e818:	f7f1 fd02 	bl	8000220 <memchr>
 800e81c:	b108      	cbz	r0, 800e822 <_printf_i+0x1f2>
 800e81e:	1b40      	subs	r0, r0, r5
 800e820:	6060      	str	r0, [r4, #4]
 800e822:	6863      	ldr	r3, [r4, #4]
 800e824:	6123      	str	r3, [r4, #16]
 800e826:	2300      	movs	r3, #0
 800e828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e82c:	e7a8      	b.n	800e780 <_printf_i+0x150>
 800e82e:	6923      	ldr	r3, [r4, #16]
 800e830:	462a      	mov	r2, r5
 800e832:	4649      	mov	r1, r9
 800e834:	4640      	mov	r0, r8
 800e836:	47d0      	blx	sl
 800e838:	3001      	adds	r0, #1
 800e83a:	d0ab      	beq.n	800e794 <_printf_i+0x164>
 800e83c:	6823      	ldr	r3, [r4, #0]
 800e83e:	079b      	lsls	r3, r3, #30
 800e840:	d413      	bmi.n	800e86a <_printf_i+0x23a>
 800e842:	68e0      	ldr	r0, [r4, #12]
 800e844:	9b03      	ldr	r3, [sp, #12]
 800e846:	4298      	cmp	r0, r3
 800e848:	bfb8      	it	lt
 800e84a:	4618      	movlt	r0, r3
 800e84c:	e7a4      	b.n	800e798 <_printf_i+0x168>
 800e84e:	2301      	movs	r3, #1
 800e850:	4632      	mov	r2, r6
 800e852:	4649      	mov	r1, r9
 800e854:	4640      	mov	r0, r8
 800e856:	47d0      	blx	sl
 800e858:	3001      	adds	r0, #1
 800e85a:	d09b      	beq.n	800e794 <_printf_i+0x164>
 800e85c:	3501      	adds	r5, #1
 800e85e:	68e3      	ldr	r3, [r4, #12]
 800e860:	9903      	ldr	r1, [sp, #12]
 800e862:	1a5b      	subs	r3, r3, r1
 800e864:	42ab      	cmp	r3, r5
 800e866:	dcf2      	bgt.n	800e84e <_printf_i+0x21e>
 800e868:	e7eb      	b.n	800e842 <_printf_i+0x212>
 800e86a:	2500      	movs	r5, #0
 800e86c:	f104 0619 	add.w	r6, r4, #25
 800e870:	e7f5      	b.n	800e85e <_printf_i+0x22e>
 800e872:	bf00      	nop
 800e874:	08011469 	.word	0x08011469
 800e878:	0801147a 	.word	0x0801147a

0800e87c <_scanf_chars>:
 800e87c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e880:	4615      	mov	r5, r2
 800e882:	688a      	ldr	r2, [r1, #8]
 800e884:	4680      	mov	r8, r0
 800e886:	460c      	mov	r4, r1
 800e888:	b932      	cbnz	r2, 800e898 <_scanf_chars+0x1c>
 800e88a:	698a      	ldr	r2, [r1, #24]
 800e88c:	2a00      	cmp	r2, #0
 800e88e:	bf0c      	ite	eq
 800e890:	2201      	moveq	r2, #1
 800e892:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800e896:	608a      	str	r2, [r1, #8]
 800e898:	6822      	ldr	r2, [r4, #0]
 800e89a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800e92c <_scanf_chars+0xb0>
 800e89e:	06d1      	lsls	r1, r2, #27
 800e8a0:	bf5f      	itttt	pl
 800e8a2:	681a      	ldrpl	r2, [r3, #0]
 800e8a4:	1d11      	addpl	r1, r2, #4
 800e8a6:	6019      	strpl	r1, [r3, #0]
 800e8a8:	6816      	ldrpl	r6, [r2, #0]
 800e8aa:	2700      	movs	r7, #0
 800e8ac:	69a0      	ldr	r0, [r4, #24]
 800e8ae:	b188      	cbz	r0, 800e8d4 <_scanf_chars+0x58>
 800e8b0:	2801      	cmp	r0, #1
 800e8b2:	d107      	bne.n	800e8c4 <_scanf_chars+0x48>
 800e8b4:	682a      	ldr	r2, [r5, #0]
 800e8b6:	7811      	ldrb	r1, [r2, #0]
 800e8b8:	6962      	ldr	r2, [r4, #20]
 800e8ba:	5c52      	ldrb	r2, [r2, r1]
 800e8bc:	b952      	cbnz	r2, 800e8d4 <_scanf_chars+0x58>
 800e8be:	2f00      	cmp	r7, #0
 800e8c0:	d031      	beq.n	800e926 <_scanf_chars+0xaa>
 800e8c2:	e022      	b.n	800e90a <_scanf_chars+0x8e>
 800e8c4:	2802      	cmp	r0, #2
 800e8c6:	d120      	bne.n	800e90a <_scanf_chars+0x8e>
 800e8c8:	682b      	ldr	r3, [r5, #0]
 800e8ca:	781b      	ldrb	r3, [r3, #0]
 800e8cc:	f813 3009 	ldrb.w	r3, [r3, r9]
 800e8d0:	071b      	lsls	r3, r3, #28
 800e8d2:	d41a      	bmi.n	800e90a <_scanf_chars+0x8e>
 800e8d4:	6823      	ldr	r3, [r4, #0]
 800e8d6:	06da      	lsls	r2, r3, #27
 800e8d8:	bf5e      	ittt	pl
 800e8da:	682b      	ldrpl	r3, [r5, #0]
 800e8dc:	781b      	ldrbpl	r3, [r3, #0]
 800e8de:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e8e2:	682a      	ldr	r2, [r5, #0]
 800e8e4:	686b      	ldr	r3, [r5, #4]
 800e8e6:	3201      	adds	r2, #1
 800e8e8:	602a      	str	r2, [r5, #0]
 800e8ea:	68a2      	ldr	r2, [r4, #8]
 800e8ec:	3b01      	subs	r3, #1
 800e8ee:	3a01      	subs	r2, #1
 800e8f0:	606b      	str	r3, [r5, #4]
 800e8f2:	3701      	adds	r7, #1
 800e8f4:	60a2      	str	r2, [r4, #8]
 800e8f6:	b142      	cbz	r2, 800e90a <_scanf_chars+0x8e>
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	dcd7      	bgt.n	800e8ac <_scanf_chars+0x30>
 800e8fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e900:	4629      	mov	r1, r5
 800e902:	4640      	mov	r0, r8
 800e904:	4798      	blx	r3
 800e906:	2800      	cmp	r0, #0
 800e908:	d0d0      	beq.n	800e8ac <_scanf_chars+0x30>
 800e90a:	6823      	ldr	r3, [r4, #0]
 800e90c:	f013 0310 	ands.w	r3, r3, #16
 800e910:	d105      	bne.n	800e91e <_scanf_chars+0xa2>
 800e912:	68e2      	ldr	r2, [r4, #12]
 800e914:	3201      	adds	r2, #1
 800e916:	60e2      	str	r2, [r4, #12]
 800e918:	69a2      	ldr	r2, [r4, #24]
 800e91a:	b102      	cbz	r2, 800e91e <_scanf_chars+0xa2>
 800e91c:	7033      	strb	r3, [r6, #0]
 800e91e:	6923      	ldr	r3, [r4, #16]
 800e920:	443b      	add	r3, r7
 800e922:	6123      	str	r3, [r4, #16]
 800e924:	2000      	movs	r0, #0
 800e926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e92a:	bf00      	nop
 800e92c:	080112f1 	.word	0x080112f1

0800e930 <_scanf_i>:
 800e930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e934:	4698      	mov	r8, r3
 800e936:	4b76      	ldr	r3, [pc, #472]	; (800eb10 <_scanf_i+0x1e0>)
 800e938:	460c      	mov	r4, r1
 800e93a:	4682      	mov	sl, r0
 800e93c:	4616      	mov	r6, r2
 800e93e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e942:	b087      	sub	sp, #28
 800e944:	ab03      	add	r3, sp, #12
 800e946:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e94a:	4b72      	ldr	r3, [pc, #456]	; (800eb14 <_scanf_i+0x1e4>)
 800e94c:	69a1      	ldr	r1, [r4, #24]
 800e94e:	4a72      	ldr	r2, [pc, #456]	; (800eb18 <_scanf_i+0x1e8>)
 800e950:	2903      	cmp	r1, #3
 800e952:	bf18      	it	ne
 800e954:	461a      	movne	r2, r3
 800e956:	68a3      	ldr	r3, [r4, #8]
 800e958:	9201      	str	r2, [sp, #4]
 800e95a:	1e5a      	subs	r2, r3, #1
 800e95c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e960:	bf88      	it	hi
 800e962:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e966:	4627      	mov	r7, r4
 800e968:	bf82      	ittt	hi
 800e96a:	eb03 0905 	addhi.w	r9, r3, r5
 800e96e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e972:	60a3      	strhi	r3, [r4, #8]
 800e974:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e978:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e97c:	bf98      	it	ls
 800e97e:	f04f 0900 	movls.w	r9, #0
 800e982:	6023      	str	r3, [r4, #0]
 800e984:	463d      	mov	r5, r7
 800e986:	f04f 0b00 	mov.w	fp, #0
 800e98a:	6831      	ldr	r1, [r6, #0]
 800e98c:	ab03      	add	r3, sp, #12
 800e98e:	7809      	ldrb	r1, [r1, #0]
 800e990:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e994:	2202      	movs	r2, #2
 800e996:	f7f1 fc43 	bl	8000220 <memchr>
 800e99a:	b328      	cbz	r0, 800e9e8 <_scanf_i+0xb8>
 800e99c:	f1bb 0f01 	cmp.w	fp, #1
 800e9a0:	d159      	bne.n	800ea56 <_scanf_i+0x126>
 800e9a2:	6862      	ldr	r2, [r4, #4]
 800e9a4:	b92a      	cbnz	r2, 800e9b2 <_scanf_i+0x82>
 800e9a6:	6822      	ldr	r2, [r4, #0]
 800e9a8:	2308      	movs	r3, #8
 800e9aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e9ae:	6063      	str	r3, [r4, #4]
 800e9b0:	6022      	str	r2, [r4, #0]
 800e9b2:	6822      	ldr	r2, [r4, #0]
 800e9b4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800e9b8:	6022      	str	r2, [r4, #0]
 800e9ba:	68a2      	ldr	r2, [r4, #8]
 800e9bc:	1e51      	subs	r1, r2, #1
 800e9be:	60a1      	str	r1, [r4, #8]
 800e9c0:	b192      	cbz	r2, 800e9e8 <_scanf_i+0xb8>
 800e9c2:	6832      	ldr	r2, [r6, #0]
 800e9c4:	1c51      	adds	r1, r2, #1
 800e9c6:	6031      	str	r1, [r6, #0]
 800e9c8:	7812      	ldrb	r2, [r2, #0]
 800e9ca:	f805 2b01 	strb.w	r2, [r5], #1
 800e9ce:	6872      	ldr	r2, [r6, #4]
 800e9d0:	3a01      	subs	r2, #1
 800e9d2:	2a00      	cmp	r2, #0
 800e9d4:	6072      	str	r2, [r6, #4]
 800e9d6:	dc07      	bgt.n	800e9e8 <_scanf_i+0xb8>
 800e9d8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800e9dc:	4631      	mov	r1, r6
 800e9de:	4650      	mov	r0, sl
 800e9e0:	4790      	blx	r2
 800e9e2:	2800      	cmp	r0, #0
 800e9e4:	f040 8085 	bne.w	800eaf2 <_scanf_i+0x1c2>
 800e9e8:	f10b 0b01 	add.w	fp, fp, #1
 800e9ec:	f1bb 0f03 	cmp.w	fp, #3
 800e9f0:	d1cb      	bne.n	800e98a <_scanf_i+0x5a>
 800e9f2:	6863      	ldr	r3, [r4, #4]
 800e9f4:	b90b      	cbnz	r3, 800e9fa <_scanf_i+0xca>
 800e9f6:	230a      	movs	r3, #10
 800e9f8:	6063      	str	r3, [r4, #4]
 800e9fa:	6863      	ldr	r3, [r4, #4]
 800e9fc:	4947      	ldr	r1, [pc, #284]	; (800eb1c <_scanf_i+0x1ec>)
 800e9fe:	6960      	ldr	r0, [r4, #20]
 800ea00:	1ac9      	subs	r1, r1, r3
 800ea02:	f000 f89f 	bl	800eb44 <__sccl>
 800ea06:	f04f 0b00 	mov.w	fp, #0
 800ea0a:	68a3      	ldr	r3, [r4, #8]
 800ea0c:	6822      	ldr	r2, [r4, #0]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d03d      	beq.n	800ea8e <_scanf_i+0x15e>
 800ea12:	6831      	ldr	r1, [r6, #0]
 800ea14:	6960      	ldr	r0, [r4, #20]
 800ea16:	f891 c000 	ldrb.w	ip, [r1]
 800ea1a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ea1e:	2800      	cmp	r0, #0
 800ea20:	d035      	beq.n	800ea8e <_scanf_i+0x15e>
 800ea22:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ea26:	d124      	bne.n	800ea72 <_scanf_i+0x142>
 800ea28:	0510      	lsls	r0, r2, #20
 800ea2a:	d522      	bpl.n	800ea72 <_scanf_i+0x142>
 800ea2c:	f10b 0b01 	add.w	fp, fp, #1
 800ea30:	f1b9 0f00 	cmp.w	r9, #0
 800ea34:	d003      	beq.n	800ea3e <_scanf_i+0x10e>
 800ea36:	3301      	adds	r3, #1
 800ea38:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800ea3c:	60a3      	str	r3, [r4, #8]
 800ea3e:	6873      	ldr	r3, [r6, #4]
 800ea40:	3b01      	subs	r3, #1
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	6073      	str	r3, [r6, #4]
 800ea46:	dd1b      	ble.n	800ea80 <_scanf_i+0x150>
 800ea48:	6833      	ldr	r3, [r6, #0]
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	6033      	str	r3, [r6, #0]
 800ea4e:	68a3      	ldr	r3, [r4, #8]
 800ea50:	3b01      	subs	r3, #1
 800ea52:	60a3      	str	r3, [r4, #8]
 800ea54:	e7d9      	b.n	800ea0a <_scanf_i+0xda>
 800ea56:	f1bb 0f02 	cmp.w	fp, #2
 800ea5a:	d1ae      	bne.n	800e9ba <_scanf_i+0x8a>
 800ea5c:	6822      	ldr	r2, [r4, #0]
 800ea5e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ea62:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ea66:	d1bf      	bne.n	800e9e8 <_scanf_i+0xb8>
 800ea68:	2310      	movs	r3, #16
 800ea6a:	6063      	str	r3, [r4, #4]
 800ea6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ea70:	e7a2      	b.n	800e9b8 <_scanf_i+0x88>
 800ea72:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ea76:	6022      	str	r2, [r4, #0]
 800ea78:	780b      	ldrb	r3, [r1, #0]
 800ea7a:	f805 3b01 	strb.w	r3, [r5], #1
 800ea7e:	e7de      	b.n	800ea3e <_scanf_i+0x10e>
 800ea80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ea84:	4631      	mov	r1, r6
 800ea86:	4650      	mov	r0, sl
 800ea88:	4798      	blx	r3
 800ea8a:	2800      	cmp	r0, #0
 800ea8c:	d0df      	beq.n	800ea4e <_scanf_i+0x11e>
 800ea8e:	6823      	ldr	r3, [r4, #0]
 800ea90:	05db      	lsls	r3, r3, #23
 800ea92:	d50d      	bpl.n	800eab0 <_scanf_i+0x180>
 800ea94:	42bd      	cmp	r5, r7
 800ea96:	d909      	bls.n	800eaac <_scanf_i+0x17c>
 800ea98:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ea9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eaa0:	4632      	mov	r2, r6
 800eaa2:	4650      	mov	r0, sl
 800eaa4:	4798      	blx	r3
 800eaa6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800eaaa:	464d      	mov	r5, r9
 800eaac:	42bd      	cmp	r5, r7
 800eaae:	d02d      	beq.n	800eb0c <_scanf_i+0x1dc>
 800eab0:	6822      	ldr	r2, [r4, #0]
 800eab2:	f012 0210 	ands.w	r2, r2, #16
 800eab6:	d113      	bne.n	800eae0 <_scanf_i+0x1b0>
 800eab8:	702a      	strb	r2, [r5, #0]
 800eaba:	6863      	ldr	r3, [r4, #4]
 800eabc:	9e01      	ldr	r6, [sp, #4]
 800eabe:	4639      	mov	r1, r7
 800eac0:	4650      	mov	r0, sl
 800eac2:	47b0      	blx	r6
 800eac4:	6821      	ldr	r1, [r4, #0]
 800eac6:	f8d8 3000 	ldr.w	r3, [r8]
 800eaca:	f011 0f20 	tst.w	r1, #32
 800eace:	d013      	beq.n	800eaf8 <_scanf_i+0x1c8>
 800ead0:	1d1a      	adds	r2, r3, #4
 800ead2:	f8c8 2000 	str.w	r2, [r8]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	6018      	str	r0, [r3, #0]
 800eada:	68e3      	ldr	r3, [r4, #12]
 800eadc:	3301      	adds	r3, #1
 800eade:	60e3      	str	r3, [r4, #12]
 800eae0:	1bed      	subs	r5, r5, r7
 800eae2:	44ab      	add	fp, r5
 800eae4:	6925      	ldr	r5, [r4, #16]
 800eae6:	445d      	add	r5, fp
 800eae8:	6125      	str	r5, [r4, #16]
 800eaea:	2000      	movs	r0, #0
 800eaec:	b007      	add	sp, #28
 800eaee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaf2:	f04f 0b00 	mov.w	fp, #0
 800eaf6:	e7ca      	b.n	800ea8e <_scanf_i+0x15e>
 800eaf8:	1d1a      	adds	r2, r3, #4
 800eafa:	f8c8 2000 	str.w	r2, [r8]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	f011 0f01 	tst.w	r1, #1
 800eb04:	bf14      	ite	ne
 800eb06:	8018      	strhne	r0, [r3, #0]
 800eb08:	6018      	streq	r0, [r3, #0]
 800eb0a:	e7e6      	b.n	800eada <_scanf_i+0x1aa>
 800eb0c:	2001      	movs	r0, #1
 800eb0e:	e7ed      	b.n	800eaec <_scanf_i+0x1bc>
 800eb10:	0800f3c0 	.word	0x0800f3c0
 800eb14:	0800ec99 	.word	0x0800ec99
 800eb18:	0800d9bd 	.word	0x0800d9bd
 800eb1c:	080114a4 	.word	0x080114a4

0800eb20 <_read_r>:
 800eb20:	b538      	push	{r3, r4, r5, lr}
 800eb22:	4d07      	ldr	r5, [pc, #28]	; (800eb40 <_read_r+0x20>)
 800eb24:	4604      	mov	r4, r0
 800eb26:	4608      	mov	r0, r1
 800eb28:	4611      	mov	r1, r2
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	602a      	str	r2, [r5, #0]
 800eb2e:	461a      	mov	r2, r3
 800eb30:	f7f4 f94a 	bl	8002dc8 <_read>
 800eb34:	1c43      	adds	r3, r0, #1
 800eb36:	d102      	bne.n	800eb3e <_read_r+0x1e>
 800eb38:	682b      	ldr	r3, [r5, #0]
 800eb3a:	b103      	cbz	r3, 800eb3e <_read_r+0x1e>
 800eb3c:	6023      	str	r3, [r4, #0]
 800eb3e:	bd38      	pop	{r3, r4, r5, pc}
 800eb40:	20034578 	.word	0x20034578

0800eb44 <__sccl>:
 800eb44:	b570      	push	{r4, r5, r6, lr}
 800eb46:	780b      	ldrb	r3, [r1, #0]
 800eb48:	4604      	mov	r4, r0
 800eb4a:	2b5e      	cmp	r3, #94	; 0x5e
 800eb4c:	bf0b      	itete	eq
 800eb4e:	784b      	ldrbeq	r3, [r1, #1]
 800eb50:	1c48      	addne	r0, r1, #1
 800eb52:	1c88      	addeq	r0, r1, #2
 800eb54:	2200      	movne	r2, #0
 800eb56:	bf08      	it	eq
 800eb58:	2201      	moveq	r2, #1
 800eb5a:	1e61      	subs	r1, r4, #1
 800eb5c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800eb60:	f801 2f01 	strb.w	r2, [r1, #1]!
 800eb64:	42a9      	cmp	r1, r5
 800eb66:	d1fb      	bne.n	800eb60 <__sccl+0x1c>
 800eb68:	b90b      	cbnz	r3, 800eb6e <__sccl+0x2a>
 800eb6a:	3801      	subs	r0, #1
 800eb6c:	bd70      	pop	{r4, r5, r6, pc}
 800eb6e:	f082 0201 	eor.w	r2, r2, #1
 800eb72:	54e2      	strb	r2, [r4, r3]
 800eb74:	4605      	mov	r5, r0
 800eb76:	4628      	mov	r0, r5
 800eb78:	f810 1b01 	ldrb.w	r1, [r0], #1
 800eb7c:	292d      	cmp	r1, #45	; 0x2d
 800eb7e:	d006      	beq.n	800eb8e <__sccl+0x4a>
 800eb80:	295d      	cmp	r1, #93	; 0x5d
 800eb82:	d0f3      	beq.n	800eb6c <__sccl+0x28>
 800eb84:	b909      	cbnz	r1, 800eb8a <__sccl+0x46>
 800eb86:	4628      	mov	r0, r5
 800eb88:	e7f0      	b.n	800eb6c <__sccl+0x28>
 800eb8a:	460b      	mov	r3, r1
 800eb8c:	e7f1      	b.n	800eb72 <__sccl+0x2e>
 800eb8e:	786e      	ldrb	r6, [r5, #1]
 800eb90:	2e5d      	cmp	r6, #93	; 0x5d
 800eb92:	d0fa      	beq.n	800eb8a <__sccl+0x46>
 800eb94:	42b3      	cmp	r3, r6
 800eb96:	dcf8      	bgt.n	800eb8a <__sccl+0x46>
 800eb98:	3502      	adds	r5, #2
 800eb9a:	4619      	mov	r1, r3
 800eb9c:	3101      	adds	r1, #1
 800eb9e:	428e      	cmp	r6, r1
 800eba0:	5462      	strb	r2, [r4, r1]
 800eba2:	dcfb      	bgt.n	800eb9c <__sccl+0x58>
 800eba4:	1af1      	subs	r1, r6, r3
 800eba6:	3901      	subs	r1, #1
 800eba8:	1c58      	adds	r0, r3, #1
 800ebaa:	42b3      	cmp	r3, r6
 800ebac:	bfa8      	it	ge
 800ebae:	2100      	movge	r1, #0
 800ebb0:	1843      	adds	r3, r0, r1
 800ebb2:	e7e0      	b.n	800eb76 <__sccl+0x32>

0800ebb4 <_strtoul_l.constprop.0>:
 800ebb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ebb8:	4f36      	ldr	r7, [pc, #216]	; (800ec94 <_strtoul_l.constprop.0+0xe0>)
 800ebba:	4686      	mov	lr, r0
 800ebbc:	460d      	mov	r5, r1
 800ebbe:	4628      	mov	r0, r5
 800ebc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ebc4:	5de6      	ldrb	r6, [r4, r7]
 800ebc6:	f016 0608 	ands.w	r6, r6, #8
 800ebca:	d1f8      	bne.n	800ebbe <_strtoul_l.constprop.0+0xa>
 800ebcc:	2c2d      	cmp	r4, #45	; 0x2d
 800ebce:	d12f      	bne.n	800ec30 <_strtoul_l.constprop.0+0x7c>
 800ebd0:	782c      	ldrb	r4, [r5, #0]
 800ebd2:	2601      	movs	r6, #1
 800ebd4:	1c85      	adds	r5, r0, #2
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d057      	beq.n	800ec8a <_strtoul_l.constprop.0+0xd6>
 800ebda:	2b10      	cmp	r3, #16
 800ebdc:	d109      	bne.n	800ebf2 <_strtoul_l.constprop.0+0x3e>
 800ebde:	2c30      	cmp	r4, #48	; 0x30
 800ebe0:	d107      	bne.n	800ebf2 <_strtoul_l.constprop.0+0x3e>
 800ebe2:	7828      	ldrb	r0, [r5, #0]
 800ebe4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ebe8:	2858      	cmp	r0, #88	; 0x58
 800ebea:	d149      	bne.n	800ec80 <_strtoul_l.constprop.0+0xcc>
 800ebec:	786c      	ldrb	r4, [r5, #1]
 800ebee:	2310      	movs	r3, #16
 800ebf0:	3502      	adds	r5, #2
 800ebf2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800ebf6:	2700      	movs	r7, #0
 800ebf8:	fbb8 f8f3 	udiv	r8, r8, r3
 800ebfc:	fb03 f908 	mul.w	r9, r3, r8
 800ec00:	ea6f 0909 	mvn.w	r9, r9
 800ec04:	4638      	mov	r0, r7
 800ec06:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ec0a:	f1bc 0f09 	cmp.w	ip, #9
 800ec0e:	d814      	bhi.n	800ec3a <_strtoul_l.constprop.0+0x86>
 800ec10:	4664      	mov	r4, ip
 800ec12:	42a3      	cmp	r3, r4
 800ec14:	dd22      	ble.n	800ec5c <_strtoul_l.constprop.0+0xa8>
 800ec16:	2f00      	cmp	r7, #0
 800ec18:	db1d      	blt.n	800ec56 <_strtoul_l.constprop.0+0xa2>
 800ec1a:	4580      	cmp	r8, r0
 800ec1c:	d31b      	bcc.n	800ec56 <_strtoul_l.constprop.0+0xa2>
 800ec1e:	d101      	bne.n	800ec24 <_strtoul_l.constprop.0+0x70>
 800ec20:	45a1      	cmp	r9, r4
 800ec22:	db18      	blt.n	800ec56 <_strtoul_l.constprop.0+0xa2>
 800ec24:	fb00 4003 	mla	r0, r0, r3, r4
 800ec28:	2701      	movs	r7, #1
 800ec2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ec2e:	e7ea      	b.n	800ec06 <_strtoul_l.constprop.0+0x52>
 800ec30:	2c2b      	cmp	r4, #43	; 0x2b
 800ec32:	bf04      	itt	eq
 800ec34:	782c      	ldrbeq	r4, [r5, #0]
 800ec36:	1c85      	addeq	r5, r0, #2
 800ec38:	e7cd      	b.n	800ebd6 <_strtoul_l.constprop.0+0x22>
 800ec3a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ec3e:	f1bc 0f19 	cmp.w	ip, #25
 800ec42:	d801      	bhi.n	800ec48 <_strtoul_l.constprop.0+0x94>
 800ec44:	3c37      	subs	r4, #55	; 0x37
 800ec46:	e7e4      	b.n	800ec12 <_strtoul_l.constprop.0+0x5e>
 800ec48:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ec4c:	f1bc 0f19 	cmp.w	ip, #25
 800ec50:	d804      	bhi.n	800ec5c <_strtoul_l.constprop.0+0xa8>
 800ec52:	3c57      	subs	r4, #87	; 0x57
 800ec54:	e7dd      	b.n	800ec12 <_strtoul_l.constprop.0+0x5e>
 800ec56:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ec5a:	e7e6      	b.n	800ec2a <_strtoul_l.constprop.0+0x76>
 800ec5c:	2f00      	cmp	r7, #0
 800ec5e:	da07      	bge.n	800ec70 <_strtoul_l.constprop.0+0xbc>
 800ec60:	2322      	movs	r3, #34	; 0x22
 800ec62:	f8ce 3000 	str.w	r3, [lr]
 800ec66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec6a:	b932      	cbnz	r2, 800ec7a <_strtoul_l.constprop.0+0xc6>
 800ec6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec70:	b106      	cbz	r6, 800ec74 <_strtoul_l.constprop.0+0xc0>
 800ec72:	4240      	negs	r0, r0
 800ec74:	2a00      	cmp	r2, #0
 800ec76:	d0f9      	beq.n	800ec6c <_strtoul_l.constprop.0+0xb8>
 800ec78:	b107      	cbz	r7, 800ec7c <_strtoul_l.constprop.0+0xc8>
 800ec7a:	1e69      	subs	r1, r5, #1
 800ec7c:	6011      	str	r1, [r2, #0]
 800ec7e:	e7f5      	b.n	800ec6c <_strtoul_l.constprop.0+0xb8>
 800ec80:	2430      	movs	r4, #48	; 0x30
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d1b5      	bne.n	800ebf2 <_strtoul_l.constprop.0+0x3e>
 800ec86:	2308      	movs	r3, #8
 800ec88:	e7b3      	b.n	800ebf2 <_strtoul_l.constprop.0+0x3e>
 800ec8a:	2c30      	cmp	r4, #48	; 0x30
 800ec8c:	d0a9      	beq.n	800ebe2 <_strtoul_l.constprop.0+0x2e>
 800ec8e:	230a      	movs	r3, #10
 800ec90:	e7af      	b.n	800ebf2 <_strtoul_l.constprop.0+0x3e>
 800ec92:	bf00      	nop
 800ec94:	080112f1 	.word	0x080112f1

0800ec98 <_strtoul_r>:
 800ec98:	f7ff bf8c 	b.w	800ebb4 <_strtoul_l.constprop.0>

0800ec9c <__submore>:
 800ec9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eca0:	460c      	mov	r4, r1
 800eca2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800eca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eca8:	4299      	cmp	r1, r3
 800ecaa:	d11d      	bne.n	800ece8 <__submore+0x4c>
 800ecac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ecb0:	f7fe fcb6 	bl	800d620 <_malloc_r>
 800ecb4:	b918      	cbnz	r0, 800ecbe <__submore+0x22>
 800ecb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ecba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ecc2:	63a3      	str	r3, [r4, #56]	; 0x38
 800ecc4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ecc8:	6360      	str	r0, [r4, #52]	; 0x34
 800ecca:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ecce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ecd2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ecd6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ecda:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ecde:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ece2:	6020      	str	r0, [r4, #0]
 800ece4:	2000      	movs	r0, #0
 800ece6:	e7e8      	b.n	800ecba <__submore+0x1e>
 800ece8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ecea:	0077      	lsls	r7, r6, #1
 800ecec:	463a      	mov	r2, r7
 800ecee:	f000 fa1f 	bl	800f130 <_realloc_r>
 800ecf2:	4605      	mov	r5, r0
 800ecf4:	2800      	cmp	r0, #0
 800ecf6:	d0de      	beq.n	800ecb6 <__submore+0x1a>
 800ecf8:	eb00 0806 	add.w	r8, r0, r6
 800ecfc:	4601      	mov	r1, r0
 800ecfe:	4632      	mov	r2, r6
 800ed00:	4640      	mov	r0, r8
 800ed02:	f000 f9ed 	bl	800f0e0 <memcpy>
 800ed06:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ed0a:	f8c4 8000 	str.w	r8, [r4]
 800ed0e:	e7e9      	b.n	800ece4 <__submore+0x48>

0800ed10 <__swbuf_r>:
 800ed10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed12:	460e      	mov	r6, r1
 800ed14:	4614      	mov	r4, r2
 800ed16:	4605      	mov	r5, r0
 800ed18:	b118      	cbz	r0, 800ed22 <__swbuf_r+0x12>
 800ed1a:	6983      	ldr	r3, [r0, #24]
 800ed1c:	b90b      	cbnz	r3, 800ed22 <__swbuf_r+0x12>
 800ed1e:	f7fe fed3 	bl	800dac8 <__sinit>
 800ed22:	4b21      	ldr	r3, [pc, #132]	; (800eda8 <__swbuf_r+0x98>)
 800ed24:	429c      	cmp	r4, r3
 800ed26:	d12b      	bne.n	800ed80 <__swbuf_r+0x70>
 800ed28:	686c      	ldr	r4, [r5, #4]
 800ed2a:	69a3      	ldr	r3, [r4, #24]
 800ed2c:	60a3      	str	r3, [r4, #8]
 800ed2e:	89a3      	ldrh	r3, [r4, #12]
 800ed30:	071a      	lsls	r2, r3, #28
 800ed32:	d52f      	bpl.n	800ed94 <__swbuf_r+0x84>
 800ed34:	6923      	ldr	r3, [r4, #16]
 800ed36:	b36b      	cbz	r3, 800ed94 <__swbuf_r+0x84>
 800ed38:	6923      	ldr	r3, [r4, #16]
 800ed3a:	6820      	ldr	r0, [r4, #0]
 800ed3c:	1ac0      	subs	r0, r0, r3
 800ed3e:	6963      	ldr	r3, [r4, #20]
 800ed40:	b2f6      	uxtb	r6, r6
 800ed42:	4283      	cmp	r3, r0
 800ed44:	4637      	mov	r7, r6
 800ed46:	dc04      	bgt.n	800ed52 <__swbuf_r+0x42>
 800ed48:	4621      	mov	r1, r4
 800ed4a:	4628      	mov	r0, r5
 800ed4c:	f000 f926 	bl	800ef9c <_fflush_r>
 800ed50:	bb30      	cbnz	r0, 800eda0 <__swbuf_r+0x90>
 800ed52:	68a3      	ldr	r3, [r4, #8]
 800ed54:	3b01      	subs	r3, #1
 800ed56:	60a3      	str	r3, [r4, #8]
 800ed58:	6823      	ldr	r3, [r4, #0]
 800ed5a:	1c5a      	adds	r2, r3, #1
 800ed5c:	6022      	str	r2, [r4, #0]
 800ed5e:	701e      	strb	r6, [r3, #0]
 800ed60:	6963      	ldr	r3, [r4, #20]
 800ed62:	3001      	adds	r0, #1
 800ed64:	4283      	cmp	r3, r0
 800ed66:	d004      	beq.n	800ed72 <__swbuf_r+0x62>
 800ed68:	89a3      	ldrh	r3, [r4, #12]
 800ed6a:	07db      	lsls	r3, r3, #31
 800ed6c:	d506      	bpl.n	800ed7c <__swbuf_r+0x6c>
 800ed6e:	2e0a      	cmp	r6, #10
 800ed70:	d104      	bne.n	800ed7c <__swbuf_r+0x6c>
 800ed72:	4621      	mov	r1, r4
 800ed74:	4628      	mov	r0, r5
 800ed76:	f000 f911 	bl	800ef9c <_fflush_r>
 800ed7a:	b988      	cbnz	r0, 800eda0 <__swbuf_r+0x90>
 800ed7c:	4638      	mov	r0, r7
 800ed7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed80:	4b0a      	ldr	r3, [pc, #40]	; (800edac <__swbuf_r+0x9c>)
 800ed82:	429c      	cmp	r4, r3
 800ed84:	d101      	bne.n	800ed8a <__swbuf_r+0x7a>
 800ed86:	68ac      	ldr	r4, [r5, #8]
 800ed88:	e7cf      	b.n	800ed2a <__swbuf_r+0x1a>
 800ed8a:	4b09      	ldr	r3, [pc, #36]	; (800edb0 <__swbuf_r+0xa0>)
 800ed8c:	429c      	cmp	r4, r3
 800ed8e:	bf08      	it	eq
 800ed90:	68ec      	ldreq	r4, [r5, #12]
 800ed92:	e7ca      	b.n	800ed2a <__swbuf_r+0x1a>
 800ed94:	4621      	mov	r1, r4
 800ed96:	4628      	mov	r0, r5
 800ed98:	f000 f80c 	bl	800edb4 <__swsetup_r>
 800ed9c:	2800      	cmp	r0, #0
 800ed9e:	d0cb      	beq.n	800ed38 <__swbuf_r+0x28>
 800eda0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800eda4:	e7ea      	b.n	800ed7c <__swbuf_r+0x6c>
 800eda6:	bf00      	nop
 800eda8:	08011418 	.word	0x08011418
 800edac:	08011438 	.word	0x08011438
 800edb0:	080113f8 	.word	0x080113f8

0800edb4 <__swsetup_r>:
 800edb4:	4b32      	ldr	r3, [pc, #200]	; (800ee80 <__swsetup_r+0xcc>)
 800edb6:	b570      	push	{r4, r5, r6, lr}
 800edb8:	681d      	ldr	r5, [r3, #0]
 800edba:	4606      	mov	r6, r0
 800edbc:	460c      	mov	r4, r1
 800edbe:	b125      	cbz	r5, 800edca <__swsetup_r+0x16>
 800edc0:	69ab      	ldr	r3, [r5, #24]
 800edc2:	b913      	cbnz	r3, 800edca <__swsetup_r+0x16>
 800edc4:	4628      	mov	r0, r5
 800edc6:	f7fe fe7f 	bl	800dac8 <__sinit>
 800edca:	4b2e      	ldr	r3, [pc, #184]	; (800ee84 <__swsetup_r+0xd0>)
 800edcc:	429c      	cmp	r4, r3
 800edce:	d10f      	bne.n	800edf0 <__swsetup_r+0x3c>
 800edd0:	686c      	ldr	r4, [r5, #4]
 800edd2:	89a3      	ldrh	r3, [r4, #12]
 800edd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800edd8:	0719      	lsls	r1, r3, #28
 800edda:	d42c      	bmi.n	800ee36 <__swsetup_r+0x82>
 800eddc:	06dd      	lsls	r5, r3, #27
 800edde:	d411      	bmi.n	800ee04 <__swsetup_r+0x50>
 800ede0:	2309      	movs	r3, #9
 800ede2:	6033      	str	r3, [r6, #0]
 800ede4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ede8:	81a3      	strh	r3, [r4, #12]
 800edea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800edee:	e03e      	b.n	800ee6e <__swsetup_r+0xba>
 800edf0:	4b25      	ldr	r3, [pc, #148]	; (800ee88 <__swsetup_r+0xd4>)
 800edf2:	429c      	cmp	r4, r3
 800edf4:	d101      	bne.n	800edfa <__swsetup_r+0x46>
 800edf6:	68ac      	ldr	r4, [r5, #8]
 800edf8:	e7eb      	b.n	800edd2 <__swsetup_r+0x1e>
 800edfa:	4b24      	ldr	r3, [pc, #144]	; (800ee8c <__swsetup_r+0xd8>)
 800edfc:	429c      	cmp	r4, r3
 800edfe:	bf08      	it	eq
 800ee00:	68ec      	ldreq	r4, [r5, #12]
 800ee02:	e7e6      	b.n	800edd2 <__swsetup_r+0x1e>
 800ee04:	0758      	lsls	r0, r3, #29
 800ee06:	d512      	bpl.n	800ee2e <__swsetup_r+0x7a>
 800ee08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee0a:	b141      	cbz	r1, 800ee1e <__swsetup_r+0x6a>
 800ee0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee10:	4299      	cmp	r1, r3
 800ee12:	d002      	beq.n	800ee1a <__swsetup_r+0x66>
 800ee14:	4630      	mov	r0, r6
 800ee16:	f7fe fb97 	bl	800d548 <_free_r>
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	6363      	str	r3, [r4, #52]	; 0x34
 800ee1e:	89a3      	ldrh	r3, [r4, #12]
 800ee20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ee24:	81a3      	strh	r3, [r4, #12]
 800ee26:	2300      	movs	r3, #0
 800ee28:	6063      	str	r3, [r4, #4]
 800ee2a:	6923      	ldr	r3, [r4, #16]
 800ee2c:	6023      	str	r3, [r4, #0]
 800ee2e:	89a3      	ldrh	r3, [r4, #12]
 800ee30:	f043 0308 	orr.w	r3, r3, #8
 800ee34:	81a3      	strh	r3, [r4, #12]
 800ee36:	6923      	ldr	r3, [r4, #16]
 800ee38:	b94b      	cbnz	r3, 800ee4e <__swsetup_r+0x9a>
 800ee3a:	89a3      	ldrh	r3, [r4, #12]
 800ee3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ee40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee44:	d003      	beq.n	800ee4e <__swsetup_r+0x9a>
 800ee46:	4621      	mov	r1, r4
 800ee48:	4630      	mov	r0, r6
 800ee4a:	f000 f909 	bl	800f060 <__smakebuf_r>
 800ee4e:	89a0      	ldrh	r0, [r4, #12]
 800ee50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee54:	f010 0301 	ands.w	r3, r0, #1
 800ee58:	d00a      	beq.n	800ee70 <__swsetup_r+0xbc>
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	60a3      	str	r3, [r4, #8]
 800ee5e:	6963      	ldr	r3, [r4, #20]
 800ee60:	425b      	negs	r3, r3
 800ee62:	61a3      	str	r3, [r4, #24]
 800ee64:	6923      	ldr	r3, [r4, #16]
 800ee66:	b943      	cbnz	r3, 800ee7a <__swsetup_r+0xc6>
 800ee68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ee6c:	d1ba      	bne.n	800ede4 <__swsetup_r+0x30>
 800ee6e:	bd70      	pop	{r4, r5, r6, pc}
 800ee70:	0781      	lsls	r1, r0, #30
 800ee72:	bf58      	it	pl
 800ee74:	6963      	ldrpl	r3, [r4, #20]
 800ee76:	60a3      	str	r3, [r4, #8]
 800ee78:	e7f4      	b.n	800ee64 <__swsetup_r+0xb0>
 800ee7a:	2000      	movs	r0, #0
 800ee7c:	e7f7      	b.n	800ee6e <__swsetup_r+0xba>
 800ee7e:	bf00      	nop
 800ee80:	20000040 	.word	0x20000040
 800ee84:	08011418 	.word	0x08011418
 800ee88:	08011438 	.word	0x08011438
 800ee8c:	080113f8 	.word	0x080113f8

0800ee90 <__sflush_r>:
 800ee90:	898a      	ldrh	r2, [r1, #12]
 800ee92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee96:	4605      	mov	r5, r0
 800ee98:	0710      	lsls	r0, r2, #28
 800ee9a:	460c      	mov	r4, r1
 800ee9c:	d458      	bmi.n	800ef50 <__sflush_r+0xc0>
 800ee9e:	684b      	ldr	r3, [r1, #4]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	dc05      	bgt.n	800eeb0 <__sflush_r+0x20>
 800eea4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	dc02      	bgt.n	800eeb0 <__sflush_r+0x20>
 800eeaa:	2000      	movs	r0, #0
 800eeac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eeb2:	2e00      	cmp	r6, #0
 800eeb4:	d0f9      	beq.n	800eeaa <__sflush_r+0x1a>
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eebc:	682f      	ldr	r7, [r5, #0]
 800eebe:	602b      	str	r3, [r5, #0]
 800eec0:	d032      	beq.n	800ef28 <__sflush_r+0x98>
 800eec2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eec4:	89a3      	ldrh	r3, [r4, #12]
 800eec6:	075a      	lsls	r2, r3, #29
 800eec8:	d505      	bpl.n	800eed6 <__sflush_r+0x46>
 800eeca:	6863      	ldr	r3, [r4, #4]
 800eecc:	1ac0      	subs	r0, r0, r3
 800eece:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eed0:	b10b      	cbz	r3, 800eed6 <__sflush_r+0x46>
 800eed2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eed4:	1ac0      	subs	r0, r0, r3
 800eed6:	2300      	movs	r3, #0
 800eed8:	4602      	mov	r2, r0
 800eeda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eedc:	6a21      	ldr	r1, [r4, #32]
 800eede:	4628      	mov	r0, r5
 800eee0:	47b0      	blx	r6
 800eee2:	1c43      	adds	r3, r0, #1
 800eee4:	89a3      	ldrh	r3, [r4, #12]
 800eee6:	d106      	bne.n	800eef6 <__sflush_r+0x66>
 800eee8:	6829      	ldr	r1, [r5, #0]
 800eeea:	291d      	cmp	r1, #29
 800eeec:	d82c      	bhi.n	800ef48 <__sflush_r+0xb8>
 800eeee:	4a2a      	ldr	r2, [pc, #168]	; (800ef98 <__sflush_r+0x108>)
 800eef0:	40ca      	lsrs	r2, r1
 800eef2:	07d6      	lsls	r6, r2, #31
 800eef4:	d528      	bpl.n	800ef48 <__sflush_r+0xb8>
 800eef6:	2200      	movs	r2, #0
 800eef8:	6062      	str	r2, [r4, #4]
 800eefa:	04d9      	lsls	r1, r3, #19
 800eefc:	6922      	ldr	r2, [r4, #16]
 800eefe:	6022      	str	r2, [r4, #0]
 800ef00:	d504      	bpl.n	800ef0c <__sflush_r+0x7c>
 800ef02:	1c42      	adds	r2, r0, #1
 800ef04:	d101      	bne.n	800ef0a <__sflush_r+0x7a>
 800ef06:	682b      	ldr	r3, [r5, #0]
 800ef08:	b903      	cbnz	r3, 800ef0c <__sflush_r+0x7c>
 800ef0a:	6560      	str	r0, [r4, #84]	; 0x54
 800ef0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef0e:	602f      	str	r7, [r5, #0]
 800ef10:	2900      	cmp	r1, #0
 800ef12:	d0ca      	beq.n	800eeaa <__sflush_r+0x1a>
 800ef14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef18:	4299      	cmp	r1, r3
 800ef1a:	d002      	beq.n	800ef22 <__sflush_r+0x92>
 800ef1c:	4628      	mov	r0, r5
 800ef1e:	f7fe fb13 	bl	800d548 <_free_r>
 800ef22:	2000      	movs	r0, #0
 800ef24:	6360      	str	r0, [r4, #52]	; 0x34
 800ef26:	e7c1      	b.n	800eeac <__sflush_r+0x1c>
 800ef28:	6a21      	ldr	r1, [r4, #32]
 800ef2a:	2301      	movs	r3, #1
 800ef2c:	4628      	mov	r0, r5
 800ef2e:	47b0      	blx	r6
 800ef30:	1c41      	adds	r1, r0, #1
 800ef32:	d1c7      	bne.n	800eec4 <__sflush_r+0x34>
 800ef34:	682b      	ldr	r3, [r5, #0]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d0c4      	beq.n	800eec4 <__sflush_r+0x34>
 800ef3a:	2b1d      	cmp	r3, #29
 800ef3c:	d001      	beq.n	800ef42 <__sflush_r+0xb2>
 800ef3e:	2b16      	cmp	r3, #22
 800ef40:	d101      	bne.n	800ef46 <__sflush_r+0xb6>
 800ef42:	602f      	str	r7, [r5, #0]
 800ef44:	e7b1      	b.n	800eeaa <__sflush_r+0x1a>
 800ef46:	89a3      	ldrh	r3, [r4, #12]
 800ef48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef4c:	81a3      	strh	r3, [r4, #12]
 800ef4e:	e7ad      	b.n	800eeac <__sflush_r+0x1c>
 800ef50:	690f      	ldr	r7, [r1, #16]
 800ef52:	2f00      	cmp	r7, #0
 800ef54:	d0a9      	beq.n	800eeaa <__sflush_r+0x1a>
 800ef56:	0793      	lsls	r3, r2, #30
 800ef58:	680e      	ldr	r6, [r1, #0]
 800ef5a:	bf08      	it	eq
 800ef5c:	694b      	ldreq	r3, [r1, #20]
 800ef5e:	600f      	str	r7, [r1, #0]
 800ef60:	bf18      	it	ne
 800ef62:	2300      	movne	r3, #0
 800ef64:	eba6 0807 	sub.w	r8, r6, r7
 800ef68:	608b      	str	r3, [r1, #8]
 800ef6a:	f1b8 0f00 	cmp.w	r8, #0
 800ef6e:	dd9c      	ble.n	800eeaa <__sflush_r+0x1a>
 800ef70:	6a21      	ldr	r1, [r4, #32]
 800ef72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ef74:	4643      	mov	r3, r8
 800ef76:	463a      	mov	r2, r7
 800ef78:	4628      	mov	r0, r5
 800ef7a:	47b0      	blx	r6
 800ef7c:	2800      	cmp	r0, #0
 800ef7e:	dc06      	bgt.n	800ef8e <__sflush_r+0xfe>
 800ef80:	89a3      	ldrh	r3, [r4, #12]
 800ef82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef86:	81a3      	strh	r3, [r4, #12]
 800ef88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef8c:	e78e      	b.n	800eeac <__sflush_r+0x1c>
 800ef8e:	4407      	add	r7, r0
 800ef90:	eba8 0800 	sub.w	r8, r8, r0
 800ef94:	e7e9      	b.n	800ef6a <__sflush_r+0xda>
 800ef96:	bf00      	nop
 800ef98:	20400001 	.word	0x20400001

0800ef9c <_fflush_r>:
 800ef9c:	b538      	push	{r3, r4, r5, lr}
 800ef9e:	690b      	ldr	r3, [r1, #16]
 800efa0:	4605      	mov	r5, r0
 800efa2:	460c      	mov	r4, r1
 800efa4:	b913      	cbnz	r3, 800efac <_fflush_r+0x10>
 800efa6:	2500      	movs	r5, #0
 800efa8:	4628      	mov	r0, r5
 800efaa:	bd38      	pop	{r3, r4, r5, pc}
 800efac:	b118      	cbz	r0, 800efb6 <_fflush_r+0x1a>
 800efae:	6983      	ldr	r3, [r0, #24]
 800efb0:	b90b      	cbnz	r3, 800efb6 <_fflush_r+0x1a>
 800efb2:	f7fe fd89 	bl	800dac8 <__sinit>
 800efb6:	4b14      	ldr	r3, [pc, #80]	; (800f008 <_fflush_r+0x6c>)
 800efb8:	429c      	cmp	r4, r3
 800efba:	d11b      	bne.n	800eff4 <_fflush_r+0x58>
 800efbc:	686c      	ldr	r4, [r5, #4]
 800efbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d0ef      	beq.n	800efa6 <_fflush_r+0xa>
 800efc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800efc8:	07d0      	lsls	r0, r2, #31
 800efca:	d404      	bmi.n	800efd6 <_fflush_r+0x3a>
 800efcc:	0599      	lsls	r1, r3, #22
 800efce:	d402      	bmi.n	800efd6 <_fflush_r+0x3a>
 800efd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800efd2:	f7fe fe17 	bl	800dc04 <__retarget_lock_acquire_recursive>
 800efd6:	4628      	mov	r0, r5
 800efd8:	4621      	mov	r1, r4
 800efda:	f7ff ff59 	bl	800ee90 <__sflush_r>
 800efde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800efe0:	07da      	lsls	r2, r3, #31
 800efe2:	4605      	mov	r5, r0
 800efe4:	d4e0      	bmi.n	800efa8 <_fflush_r+0xc>
 800efe6:	89a3      	ldrh	r3, [r4, #12]
 800efe8:	059b      	lsls	r3, r3, #22
 800efea:	d4dd      	bmi.n	800efa8 <_fflush_r+0xc>
 800efec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800efee:	f7fe fe0a 	bl	800dc06 <__retarget_lock_release_recursive>
 800eff2:	e7d9      	b.n	800efa8 <_fflush_r+0xc>
 800eff4:	4b05      	ldr	r3, [pc, #20]	; (800f00c <_fflush_r+0x70>)
 800eff6:	429c      	cmp	r4, r3
 800eff8:	d101      	bne.n	800effe <_fflush_r+0x62>
 800effa:	68ac      	ldr	r4, [r5, #8]
 800effc:	e7df      	b.n	800efbe <_fflush_r+0x22>
 800effe:	4b04      	ldr	r3, [pc, #16]	; (800f010 <_fflush_r+0x74>)
 800f000:	429c      	cmp	r4, r3
 800f002:	bf08      	it	eq
 800f004:	68ec      	ldreq	r4, [r5, #12]
 800f006:	e7da      	b.n	800efbe <_fflush_r+0x22>
 800f008:	08011418 	.word	0x08011418
 800f00c:	08011438 	.word	0x08011438
 800f010:	080113f8 	.word	0x080113f8

0800f014 <__swhatbuf_r>:
 800f014:	b570      	push	{r4, r5, r6, lr}
 800f016:	460e      	mov	r6, r1
 800f018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f01c:	2900      	cmp	r1, #0
 800f01e:	b096      	sub	sp, #88	; 0x58
 800f020:	4614      	mov	r4, r2
 800f022:	461d      	mov	r5, r3
 800f024:	da08      	bge.n	800f038 <__swhatbuf_r+0x24>
 800f026:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f02a:	2200      	movs	r2, #0
 800f02c:	602a      	str	r2, [r5, #0]
 800f02e:	061a      	lsls	r2, r3, #24
 800f030:	d410      	bmi.n	800f054 <__swhatbuf_r+0x40>
 800f032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f036:	e00e      	b.n	800f056 <__swhatbuf_r+0x42>
 800f038:	466a      	mov	r2, sp
 800f03a:	f000 f8a9 	bl	800f190 <_fstat_r>
 800f03e:	2800      	cmp	r0, #0
 800f040:	dbf1      	blt.n	800f026 <__swhatbuf_r+0x12>
 800f042:	9a01      	ldr	r2, [sp, #4]
 800f044:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f048:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f04c:	425a      	negs	r2, r3
 800f04e:	415a      	adcs	r2, r3
 800f050:	602a      	str	r2, [r5, #0]
 800f052:	e7ee      	b.n	800f032 <__swhatbuf_r+0x1e>
 800f054:	2340      	movs	r3, #64	; 0x40
 800f056:	2000      	movs	r0, #0
 800f058:	6023      	str	r3, [r4, #0]
 800f05a:	b016      	add	sp, #88	; 0x58
 800f05c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f060 <__smakebuf_r>:
 800f060:	898b      	ldrh	r3, [r1, #12]
 800f062:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f064:	079d      	lsls	r5, r3, #30
 800f066:	4606      	mov	r6, r0
 800f068:	460c      	mov	r4, r1
 800f06a:	d507      	bpl.n	800f07c <__smakebuf_r+0x1c>
 800f06c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f070:	6023      	str	r3, [r4, #0]
 800f072:	6123      	str	r3, [r4, #16]
 800f074:	2301      	movs	r3, #1
 800f076:	6163      	str	r3, [r4, #20]
 800f078:	b002      	add	sp, #8
 800f07a:	bd70      	pop	{r4, r5, r6, pc}
 800f07c:	ab01      	add	r3, sp, #4
 800f07e:	466a      	mov	r2, sp
 800f080:	f7ff ffc8 	bl	800f014 <__swhatbuf_r>
 800f084:	9900      	ldr	r1, [sp, #0]
 800f086:	4605      	mov	r5, r0
 800f088:	4630      	mov	r0, r6
 800f08a:	f7fe fac9 	bl	800d620 <_malloc_r>
 800f08e:	b948      	cbnz	r0, 800f0a4 <__smakebuf_r+0x44>
 800f090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f094:	059a      	lsls	r2, r3, #22
 800f096:	d4ef      	bmi.n	800f078 <__smakebuf_r+0x18>
 800f098:	f023 0303 	bic.w	r3, r3, #3
 800f09c:	f043 0302 	orr.w	r3, r3, #2
 800f0a0:	81a3      	strh	r3, [r4, #12]
 800f0a2:	e7e3      	b.n	800f06c <__smakebuf_r+0xc>
 800f0a4:	4b0d      	ldr	r3, [pc, #52]	; (800f0dc <__smakebuf_r+0x7c>)
 800f0a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800f0a8:	89a3      	ldrh	r3, [r4, #12]
 800f0aa:	6020      	str	r0, [r4, #0]
 800f0ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0b0:	81a3      	strh	r3, [r4, #12]
 800f0b2:	9b00      	ldr	r3, [sp, #0]
 800f0b4:	6163      	str	r3, [r4, #20]
 800f0b6:	9b01      	ldr	r3, [sp, #4]
 800f0b8:	6120      	str	r0, [r4, #16]
 800f0ba:	b15b      	cbz	r3, 800f0d4 <__smakebuf_r+0x74>
 800f0bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0c0:	4630      	mov	r0, r6
 800f0c2:	f000 f877 	bl	800f1b4 <_isatty_r>
 800f0c6:	b128      	cbz	r0, 800f0d4 <__smakebuf_r+0x74>
 800f0c8:	89a3      	ldrh	r3, [r4, #12]
 800f0ca:	f023 0303 	bic.w	r3, r3, #3
 800f0ce:	f043 0301 	orr.w	r3, r3, #1
 800f0d2:	81a3      	strh	r3, [r4, #12]
 800f0d4:	89a0      	ldrh	r0, [r4, #12]
 800f0d6:	4305      	orrs	r5, r0
 800f0d8:	81a5      	strh	r5, [r4, #12]
 800f0da:	e7cd      	b.n	800f078 <__smakebuf_r+0x18>
 800f0dc:	0800da61 	.word	0x0800da61

0800f0e0 <memcpy>:
 800f0e0:	440a      	add	r2, r1
 800f0e2:	4291      	cmp	r1, r2
 800f0e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f0e8:	d100      	bne.n	800f0ec <memcpy+0xc>
 800f0ea:	4770      	bx	lr
 800f0ec:	b510      	push	{r4, lr}
 800f0ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f0f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f0f6:	4291      	cmp	r1, r2
 800f0f8:	d1f9      	bne.n	800f0ee <memcpy+0xe>
 800f0fa:	bd10      	pop	{r4, pc}

0800f0fc <memmove>:
 800f0fc:	4288      	cmp	r0, r1
 800f0fe:	b510      	push	{r4, lr}
 800f100:	eb01 0402 	add.w	r4, r1, r2
 800f104:	d902      	bls.n	800f10c <memmove+0x10>
 800f106:	4284      	cmp	r4, r0
 800f108:	4623      	mov	r3, r4
 800f10a:	d807      	bhi.n	800f11c <memmove+0x20>
 800f10c:	1e43      	subs	r3, r0, #1
 800f10e:	42a1      	cmp	r1, r4
 800f110:	d008      	beq.n	800f124 <memmove+0x28>
 800f112:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f116:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f11a:	e7f8      	b.n	800f10e <memmove+0x12>
 800f11c:	4402      	add	r2, r0
 800f11e:	4601      	mov	r1, r0
 800f120:	428a      	cmp	r2, r1
 800f122:	d100      	bne.n	800f126 <memmove+0x2a>
 800f124:	bd10      	pop	{r4, pc}
 800f126:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f12a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f12e:	e7f7      	b.n	800f120 <memmove+0x24>

0800f130 <_realloc_r>:
 800f130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f134:	4680      	mov	r8, r0
 800f136:	4614      	mov	r4, r2
 800f138:	460e      	mov	r6, r1
 800f13a:	b921      	cbnz	r1, 800f146 <_realloc_r+0x16>
 800f13c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f140:	4611      	mov	r1, r2
 800f142:	f7fe ba6d 	b.w	800d620 <_malloc_r>
 800f146:	b92a      	cbnz	r2, 800f154 <_realloc_r+0x24>
 800f148:	f7fe f9fe 	bl	800d548 <_free_r>
 800f14c:	4625      	mov	r5, r4
 800f14e:	4628      	mov	r0, r5
 800f150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f154:	f000 f83e 	bl	800f1d4 <_malloc_usable_size_r>
 800f158:	4284      	cmp	r4, r0
 800f15a:	4607      	mov	r7, r0
 800f15c:	d802      	bhi.n	800f164 <_realloc_r+0x34>
 800f15e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f162:	d812      	bhi.n	800f18a <_realloc_r+0x5a>
 800f164:	4621      	mov	r1, r4
 800f166:	4640      	mov	r0, r8
 800f168:	f7fe fa5a 	bl	800d620 <_malloc_r>
 800f16c:	4605      	mov	r5, r0
 800f16e:	2800      	cmp	r0, #0
 800f170:	d0ed      	beq.n	800f14e <_realloc_r+0x1e>
 800f172:	42bc      	cmp	r4, r7
 800f174:	4622      	mov	r2, r4
 800f176:	4631      	mov	r1, r6
 800f178:	bf28      	it	cs
 800f17a:	463a      	movcs	r2, r7
 800f17c:	f7ff ffb0 	bl	800f0e0 <memcpy>
 800f180:	4631      	mov	r1, r6
 800f182:	4640      	mov	r0, r8
 800f184:	f7fe f9e0 	bl	800d548 <_free_r>
 800f188:	e7e1      	b.n	800f14e <_realloc_r+0x1e>
 800f18a:	4635      	mov	r5, r6
 800f18c:	e7df      	b.n	800f14e <_realloc_r+0x1e>
	...

0800f190 <_fstat_r>:
 800f190:	b538      	push	{r3, r4, r5, lr}
 800f192:	4d07      	ldr	r5, [pc, #28]	; (800f1b0 <_fstat_r+0x20>)
 800f194:	2300      	movs	r3, #0
 800f196:	4604      	mov	r4, r0
 800f198:	4608      	mov	r0, r1
 800f19a:	4611      	mov	r1, r2
 800f19c:	602b      	str	r3, [r5, #0]
 800f19e:	f7f3 fe58 	bl	8002e52 <_fstat>
 800f1a2:	1c43      	adds	r3, r0, #1
 800f1a4:	d102      	bne.n	800f1ac <_fstat_r+0x1c>
 800f1a6:	682b      	ldr	r3, [r5, #0]
 800f1a8:	b103      	cbz	r3, 800f1ac <_fstat_r+0x1c>
 800f1aa:	6023      	str	r3, [r4, #0]
 800f1ac:	bd38      	pop	{r3, r4, r5, pc}
 800f1ae:	bf00      	nop
 800f1b0:	20034578 	.word	0x20034578

0800f1b4 <_isatty_r>:
 800f1b4:	b538      	push	{r3, r4, r5, lr}
 800f1b6:	4d06      	ldr	r5, [pc, #24]	; (800f1d0 <_isatty_r+0x1c>)
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	4604      	mov	r4, r0
 800f1bc:	4608      	mov	r0, r1
 800f1be:	602b      	str	r3, [r5, #0]
 800f1c0:	f7f3 fe57 	bl	8002e72 <_isatty>
 800f1c4:	1c43      	adds	r3, r0, #1
 800f1c6:	d102      	bne.n	800f1ce <_isatty_r+0x1a>
 800f1c8:	682b      	ldr	r3, [r5, #0]
 800f1ca:	b103      	cbz	r3, 800f1ce <_isatty_r+0x1a>
 800f1cc:	6023      	str	r3, [r4, #0]
 800f1ce:	bd38      	pop	{r3, r4, r5, pc}
 800f1d0:	20034578 	.word	0x20034578

0800f1d4 <_malloc_usable_size_r>:
 800f1d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1d8:	1f18      	subs	r0, r3, #4
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	bfbc      	itt	lt
 800f1de:	580b      	ldrlt	r3, [r1, r0]
 800f1e0:	18c0      	addlt	r0, r0, r3
 800f1e2:	4770      	bx	lr

0800f1e4 <_init>:
 800f1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1e6:	bf00      	nop
 800f1e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1ea:	bc08      	pop	{r3}
 800f1ec:	469e      	mov	lr, r3
 800f1ee:	4770      	bx	lr

0800f1f0 <_fini>:
 800f1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1f2:	bf00      	nop
 800f1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1f6:	bc08      	pop	{r3}
 800f1f8:	469e      	mov	lr, r3
 800f1fa:	4770      	bx	lr
