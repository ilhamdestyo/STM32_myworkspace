
STM32F746_SDCARD_LCD_TOUCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b880  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d84  0800ba50  0800ba50  0001ba50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7d4  0800d7d4  000200d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d7d4  0800d7d4  0001d7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d7dc  0800d7dc  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7dc  0800d7dc  0001d7dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d7e0  0800d7e0  0001d7e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  0800d7e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008f8  200000d8  0800d8bc  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  200009d0  0800d8bc  000209d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d04f  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004455  00000000  00000000  0003d157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f8  00000000  00000000  000415b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016c8  00000000  00000000  00042ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b394  00000000  00000000  00044570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f074  00000000  00000000  0006f904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9980  00000000  00000000  0008e978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001882f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b14  00000000  00000000  00188348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000d8 	.word	0x200000d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ba38 	.word	0x0800ba38

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000dc 	.word	0x200000dc
 800020c:	0800ba38 	.word	0x0800ba38

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005b8:	f3bf 8f4f 	dsb	sy
}
 80005bc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <__NVIC_SystemReset+0x24>)
 80005c0:	68db      	ldr	r3, [r3, #12]
 80005c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005c6:	4904      	ldr	r1, [pc, #16]	; (80005d8 <__NVIC_SystemReset+0x24>)
 80005c8:	4b04      	ldr	r3, [pc, #16]	; (80005dc <__NVIC_SystemReset+0x28>)
 80005ca:	4313      	orrs	r3, r2
 80005cc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005ce:	f3bf 8f4f 	dsb	sy
}
 80005d2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005d4:	bf00      	nop
 80005d6:	e7fd      	b.n	80005d4 <__NVIC_SystemReset+0x20>
 80005d8:	e000ed00 	.word	0xe000ed00
 80005dc:	05fa0004 	.word	0x05fa0004

080005e0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80005e4:	f3bf 8f4f 	dsb	sy
}
 80005e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ea:	f3bf 8f6f 	isb	sy
}
 80005ee:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005f0:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <SCB_EnableICache+0x48>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005f8:	f3bf 8f4f 	dsb	sy
}
 80005fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005fe:	f3bf 8f6f 	isb	sy
}
 8000602:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <SCB_EnableICache+0x48>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4a07      	ldr	r2, [pc, #28]	; (8000628 <SCB_EnableICache+0x48>)
 800060a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000610:	f3bf 8f4f 	dsb	sy
}
 8000614:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000616:	f3bf 8f6f 	isb	sy
}
 800061a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000632:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <SCB_EnableDCache+0x84>)
 8000634:	2200      	movs	r2, #0
 8000636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800063a:	f3bf 8f4f 	dsb	sy
}
 800063e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000640:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <SCB_EnableDCache+0x84>)
 8000642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000646:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	0b5b      	lsrs	r3, r3, #13
 800064c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000650:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	08db      	lsrs	r3, r3, #3
 8000656:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800065a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	015a      	lsls	r2, r3, #5
 8000660:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000664:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000666:	68ba      	ldr	r2, [r7, #8]
 8000668:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800066a:	4911      	ldr	r1, [pc, #68]	; (80006b0 <SCB_EnableDCache+0x84>)
 800066c:	4313      	orrs	r3, r2
 800066e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	1e5a      	subs	r2, r3, #1
 8000676:	60ba      	str	r2, [r7, #8]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d1ef      	bne.n	800065c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	1e5a      	subs	r2, r3, #1
 8000680:	60fa      	str	r2, [r7, #12]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d1e5      	bne.n	8000652 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000686:	f3bf 8f4f 	dsb	sy
}
 800068a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <SCB_EnableDCache+0x84>)
 800068e:	695b      	ldr	r3, [r3, #20]
 8000690:	4a07      	ldr	r2, [pc, #28]	; (80006b0 <SCB_EnableDCache+0x84>)
 8000692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000696:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000698:	f3bf 8f4f 	dsb	sy
}
 800069c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800069e:	f3bf 8f6f 	isb	sy
}
 80006a2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80006a4:	bf00      	nop
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	e000ed00 	.word	0xe000ed00

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006ba:	f7ff ff91 	bl	80005e0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006be:	f7ff ffb5 	bl	800062c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c2:	f001 fa2f 	bl	8001b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c6:	f000 f8e5 	bl	8000894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ca:	f000 f9c5 	bl	8000a58 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 80006ce:	f000 f9a3 	bl	8000a18 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80006d2:	f005 fde1 	bl	8006298 <MX_FATFS_Init>
  MX_DMA2D_Init();
 80006d6:	f000 f96d 	bl	80009b4 <MX_DMA2D_Init>
  MX_CRC_Init();
 80006da:	f000 f949 	bl	8000970 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  BSP_SDRAM_Init(); /* Initializes the SDRAM device */
 80006de:	f007 f869 	bl	80077b4 <BSP_SDRAM_Init>
  __HAL_RCC_CRC_CLK_ENABLE(); /* Enable the CRC Module */
 80006e2:	4b60      	ldr	r3, [pc, #384]	; (8000864 <main+0x1b0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a5f      	ldr	r2, [pc, #380]	; (8000864 <main+0x1b0>)
 80006e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b5d      	ldr	r3, [pc, #372]	; (8000864 <main+0x1b0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
  BSP_TS_Init(480, 272); // Set panjang koordinat x dan y
 80006fa:	f44f 7188 	mov.w	r1, #272	; 0x110
 80006fe:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8000702:	f007 fa0d 	bl	8007b20 <BSP_TS_Init>
  BSP_LCD_Init(); // Inisialisasi LCD
 8000706:	f006 fb8b 	bl	8006e20 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FB_START_ADDRESS); // Inisialisasi Layer
 800070a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800070e:	2001      	movs	r0, #1
 8000710:	f006 fc1e 	bl	8006f50 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER); // Pilih layer
 8000714:	2001      	movs	r0, #1
 8000716:	f006 fc7b 	bl	8007010 <BSP_LCD_SelectLayer>

  // Membersihkan tampilan pada LCD dan set backgroung lcd menjadi warna putih
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800071a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800071e:	f006 fcd3 	bl	80070c8 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE); // background text putih
 8000722:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000726:	f006 fc9b 	bl	8007060 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK); // warna text hitam
 800072a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800072e:	f006 fc7f 	bl	8007030 <BSP_LCD_SetTextColor>
  // Display ke LCD isi dari buffrd pada koordinat X,Y dengan mode Center
  BSP_LCD_DisplayStringAt(0, 100, (uint8_t*)"LOADING...", CENTER_MODE);
 8000732:	2301      	movs	r3, #1
 8000734:	4a4c      	ldr	r2, [pc, #304]	; (8000868 <main+0x1b4>)
 8000736:	2164      	movs	r1, #100	; 0x64
 8000738:	2000      	movs	r0, #0
 800073a:	f006 fd31 	bl	80071a0 <BSP_LCD_DisplayStringAt>
  HAL_Delay(2000);
 800073e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000742:	f001 fa5b 	bl	8001bfc <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 sdinit();
 8000746:	f000 f9e9 	bl	8000b1c <sdinit>
	 sdmount();
 800074a:	f000 fa0d 	bl	8000b68 <sdmount>

	 decimal = atoi(buffrd);
 800074e:	4847      	ldr	r0, [pc, #284]	; (800086c <main+0x1b8>)
 8000750:	f00a fc39 	bl	800afc6 <atoi>
 8000754:	4603      	mov	r3, r0
 8000756:	4a46      	ldr	r2, [pc, #280]	; (8000870 <main+0x1bc>)
 8000758:	6013      	str	r3, [r2, #0]
	 data = IntToStr(decimal);
 800075a:	4b45      	ldr	r3, [pc, #276]	; (8000870 <main+0x1bc>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4618      	mov	r0, r3
 8000760:	f000 facc 	bl	8000cfc <IntToStr>
 8000764:	4603      	mov	r3, r0
 8000766:	4a43      	ldr	r2, [pc, #268]	; (8000874 <main+0x1c0>)
 8000768:	6013      	str	r3, [r2, #0]
//	 }

	 // Jika isi buffrd sama dengan isGanjil
//	 if(isGanjil(decimal)== 1){
		// Membersihkan tampilan pada LCD dan set backgroung lcd menjadi warna putih
		BSP_LCD_Clear(LCD_COLOR_WHITE);
 800076a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800076e:	f006 fcab 	bl	80070c8 <BSP_LCD_Clear>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE); // Mengatur warna backgroud text
 8000772:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000776:	f006 fc73 	bl	8007060 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);  // Mengatur warna text
 800077a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800077e:	f006 fc57 	bl	8007030 <BSP_LCD_SetTextColor>
		// Display ke LCD isi dari data pada koordinat X,Y dengan mode Center
		BSP_LCD_DisplayStringAt(50, 50, (uint8_t*)data, RIGHT_MODE);
 8000782:	4b3c      	ldr	r3, [pc, #240]	; (8000874 <main+0x1c0>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	2302      	movs	r3, #2
 8000788:	2132      	movs	r1, #50	; 0x32
 800078a:	2032      	movs	r0, #50	; 0x32
 800078c:	f006 fd08 	bl	80071a0 <BSP_LCD_DisplayStringAt>

		// Mengatur warna backgroud text LED ON
		BSP_TS_GetState(&ts); // Returns status and positions of the touch screen.
 8000790:	4839      	ldr	r0, [pc, #228]	; (8000878 <main+0x1c4>)
 8000792:	f007 fa05 	bl	8007ba0 <BSP_TS_GetState>
		BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 8000796:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800079a:	f006 fc61 	bl	8007060 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(50, 20, (uint8_t*)"SOAL 1", LEFT_MODE);
 800079e:	2303      	movs	r3, #3
 80007a0:	4a36      	ldr	r2, [pc, #216]	; (800087c <main+0x1c8>)
 80007a2:	2114      	movs	r1, #20
 80007a4:	2032      	movs	r0, #50	; 0x32
 80007a6:	f006 fcfb 	bl	80071a0 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 80007aa:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80007ae:	f006 fc57 	bl	8007060 <BSP_LCD_SetBackColor>
		if (ts.touchX[0] >= 50 && ts.touchX[0] <= 150 && ts.touchY[0] >= 20 && ts.touchY[0] <= 50){
 80007b2:	4b31      	ldr	r3, [pc, #196]	; (8000878 <main+0x1c4>)
 80007b4:	885b      	ldrh	r3, [r3, #2]
 80007b6:	2b31      	cmp	r3, #49	; 0x31
 80007b8:	d924      	bls.n	8000804 <main+0x150>
 80007ba:	4b2f      	ldr	r3, [pc, #188]	; (8000878 <main+0x1c4>)
 80007bc:	885b      	ldrh	r3, [r3, #2]
 80007be:	2b96      	cmp	r3, #150	; 0x96
 80007c0:	d820      	bhi.n	8000804 <main+0x150>
 80007c2:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <main+0x1c4>)
 80007c4:	899b      	ldrh	r3, [r3, #12]
 80007c6:	2b13      	cmp	r3, #19
 80007c8:	d91c      	bls.n	8000804 <main+0x150>
 80007ca:	4b2b      	ldr	r3, [pc, #172]	; (8000878 <main+0x1c4>)
 80007cc:	899b      	ldrh	r3, [r3, #12]
 80007ce:	2b32      	cmp	r3, #50	; 0x32
 80007d0:	d818      	bhi.n	8000804 <main+0x150>

			 writefile();
 80007d2:	f000 f9f7 	bl	8000bc4 <writefile>
		//	 sdopen();
			 sdread();
 80007d6:	f000 fa31 	bl	8000c3c <sdread>

			BSP_LCD_Clear(LCD_COLOR_WHITE);
 80007da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007de:	f006 fc73 	bl	80070c8 <BSP_LCD_Clear>
			BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80007e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007e6:	f006 fc3b 	bl	8007060 <BSP_LCD_SetBackColor>
			BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"SOAL1 BERHASIL DICONVERT", CENTER_MODE);
 80007ea:	2301      	movs	r3, #1
 80007ec:	4a24      	ldr	r2, [pc, #144]	; (8000880 <main+0x1cc>)
 80007ee:	2164      	movs	r1, #100	; 0x64
 80007f0:	2000      	movs	r0, #0
 80007f2:	f006 fcd5 	bl	80071a0 <BSP_LCD_DisplayStringAt>
			HAL_Delay(2000);
 80007f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007fa:	f001 f9ff 	bl	8001bfc <HAL_Delay>
			BSP_TS_ResetTouchData(&ts);
 80007fe:	481e      	ldr	r0, [pc, #120]	; (8000878 <main+0x1c4>)
 8000800:	f007 fc0a 	bl	8008018 <BSP_TS_ResetTouchData>
			}

			BSP_LCD_DisplayStringAt(50, 20, (uint8_t*)"SOAL 1", LEFT_MODE);
 8000804:	2303      	movs	r3, #3
 8000806:	4a1d      	ldr	r2, [pc, #116]	; (800087c <main+0x1c8>)
 8000808:	2114      	movs	r1, #20
 800080a:	2032      	movs	r0, #50	; 0x32
 800080c:	f006 fcc8 	bl	80071a0 <BSP_LCD_DisplayStringAt>
			BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 8000810:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000814:	f006 fc24 	bl	8007060 <BSP_LCD_SetBackColor>
			BSP_LCD_DisplayStringAt(50, 70, (uint8_t*)"SOAL 2", LEFT_MODE);
 8000818:	2303      	movs	r3, #3
 800081a:	4a1a      	ldr	r2, [pc, #104]	; (8000884 <main+0x1d0>)
 800081c:	2146      	movs	r1, #70	; 0x46
 800081e:	2032      	movs	r0, #50	; 0x32
 8000820:	f006 fcbe 	bl	80071a0 <BSP_LCD_DisplayStringAt>
			BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 8000824:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000828:	f006 fc1a 	bl	8007060 <BSP_LCD_SetBackColor>
			BSP_LCD_DisplayStringAt(50, 120, (uint8_t*)"SOAL 3", LEFT_MODE);
 800082c:	2303      	movs	r3, #3
 800082e:	4a16      	ldr	r2, [pc, #88]	; (8000888 <main+0x1d4>)
 8000830:	2178      	movs	r1, #120	; 0x78
 8000832:	2032      	movs	r0, #50	; 0x32
 8000834:	f006 fcb4 	bl	80071a0 <BSP_LCD_DisplayStringAt>
			BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 8000838:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800083c:	f006 fc10 	bl	8007060 <BSP_LCD_SetBackColor>
			BSP_LCD_DisplayStringAt(50, 170, (uint8_t*)"SOAL 4", LEFT_MODE);
 8000840:	2303      	movs	r3, #3
 8000842:	4a12      	ldr	r2, [pc, #72]	; (800088c <main+0x1d8>)
 8000844:	21aa      	movs	r1, #170	; 0xaa
 8000846:	2032      	movs	r0, #50	; 0x32
 8000848:	f006 fcaa 	bl	80071a0 <BSP_LCD_DisplayStringAt>
			BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 800084c:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000850:	f006 fc06 	bl	8007060 <BSP_LCD_SetBackColor>
			BSP_LCD_DisplayStringAt(50, 220, (uint8_t*)"SOAL 5", LEFT_MODE);
 8000854:	2303      	movs	r3, #3
 8000856:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <main+0x1dc>)
 8000858:	21dc      	movs	r1, #220	; 0xdc
 800085a:	2032      	movs	r0, #50	; 0x32
 800085c:	f006 fca0 	bl	80071a0 <BSP_LCD_DisplayStringAt>
	 sdinit();
 8000860:	e771      	b.n	8000746 <main+0x92>
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800
 8000868:	0800ba50 	.word	0x0800ba50
 800086c:	20000640 	.word	0x20000640
 8000870:	20000678 	.word	0x20000678
 8000874:	20000674 	.word	0x20000674
 8000878:	20000680 	.word	0x20000680
 800087c:	0800ba5c 	.word	0x0800ba5c
 8000880:	0800ba64 	.word	0x0800ba64
 8000884:	0800ba80 	.word	0x0800ba80
 8000888:	0800ba88 	.word	0x0800ba88
 800088c:	0800ba90 	.word	0x0800ba90
 8000890:	0800ba98 	.word	0x0800ba98

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b094      	sub	sp, #80	; 0x50
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 0320 	add.w	r3, r7, #32
 800089e:	2230      	movs	r2, #48	; 0x30
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f00a fbc6 	bl	800b034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008b8:	f002 ff86 	bl	80037c8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008bc:	4b2a      	ldr	r3, [pc, #168]	; (8000968 <SystemClock_Config+0xd4>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c0:	4a29      	ldr	r2, [pc, #164]	; (8000968 <SystemClock_Config+0xd4>)
 80008c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c6:	6413      	str	r3, [r2, #64]	; 0x40
 80008c8:	4b27      	ldr	r3, [pc, #156]	; (8000968 <SystemClock_Config+0xd4>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d4:	4b25      	ldr	r3, [pc, #148]	; (800096c <SystemClock_Config+0xd8>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a24      	ldr	r2, [pc, #144]	; (800096c <SystemClock_Config+0xd8>)
 80008da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008de:	6013      	str	r3, [r2, #0]
 80008e0:	4b22      	ldr	r3, [pc, #136]	; (800096c <SystemClock_Config+0xd8>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f0:	2301      	movs	r3, #1
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f4:	2310      	movs	r3, #16
 80008f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f8:	2302      	movs	r3, #2
 80008fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008fc:	2300      	movs	r3, #0
 80008fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000900:	2308      	movs	r3, #8
 8000902:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000904:	23c8      	movs	r3, #200	; 0xc8
 8000906:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000908:	2302      	movs	r3, #2
 800090a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800090c:	2308      	movs	r3, #8
 800090e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000910:	f107 0320 	add.w	r3, r7, #32
 8000914:	4618      	mov	r0, r3
 8000916:	f002 ffb7 	bl	8003888 <HAL_RCC_OscConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000920:	f000 fa0a 	bl	8000d38 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000924:	f002 ff60 	bl	80037e8 <HAL_PWREx_EnableOverDrive>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800092e:	f000 fa03 	bl	8000d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000932:	230f      	movs	r3, #15
 8000934:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000936:	2302      	movs	r3, #2
 8000938:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800093e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000942:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000948:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	2106      	movs	r1, #6
 8000950:	4618      	mov	r0, r3
 8000952:	f003 fa3d 	bl	8003dd0 <HAL_RCC_ClockConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800095c:	f000 f9ec 	bl	8000d38 <Error_Handler>
  }
}
 8000960:	bf00      	nop
 8000962:	3750      	adds	r7, #80	; 0x50
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40023800 	.word	0x40023800
 800096c:	40007000 	.word	0x40007000

08000970 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000974:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <MX_CRC_Init+0x3c>)
 8000976:	4a0e      	ldr	r2, [pc, #56]	; (80009b0 <MX_CRC_Init+0x40>)
 8000978:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_CRC_Init+0x3c>)
 800097c:	2200      	movs	r2, #0
 800097e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000980:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <MX_CRC_Init+0x3c>)
 8000982:	2200      	movs	r2, #0
 8000984:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_CRC_Init+0x3c>)
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800098c:	4b07      	ldr	r3, [pc, #28]	; (80009ac <MX_CRC_Init+0x3c>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_CRC_Init+0x3c>)
 8000994:	2201      	movs	r2, #1
 8000996:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_CRC_Init+0x3c>)
 800099a:	f001 fa65 	bl	8001e68 <HAL_CRC_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80009a4:	f000 f9c8 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200000f4 	.word	0x200000f4
 80009b0:	40023000 	.word	0x40023000

080009b4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <MX_DMA2D_Init+0x5c>)
 80009ba:	4a16      	ldr	r2, [pc, #88]	; (8000a14 <MX_DMA2D_Init+0x60>)
 80009bc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80009be:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_DMA2D_Init+0x5c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_DMA2D_Init+0x5c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_DMA2D_Init+0x5c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_DMA2D_Init+0x5c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_DMA2D_Init+0x5c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_DMA2D_Init+0x5c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_DMA2D_Init+0x5c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009e8:	4809      	ldr	r0, [pc, #36]	; (8000a10 <MX_DMA2D_Init+0x5c>)
 80009ea:	f001 fce5 	bl	80023b8 <HAL_DMA2D_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80009f4:	f000 f9a0 	bl	8000d38 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80009f8:	2101      	movs	r1, #1
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_DMA2D_Init+0x5c>)
 80009fc:	f001 fe3a 	bl	8002674 <HAL_DMA2D_ConfigLayer>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000a06:	f000 f997 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000118 	.word	0x20000118
 8000a14:	4002b000 	.word	0x4002b000

08000a18 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_SDMMC1_SD_Init+0x38>)
 8000a1e:	4a0d      	ldr	r2, [pc, #52]	; (8000a54 <MX_SDMMC1_SD_Init+0x3c>)
 8000a20:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <MX_SDMMC1_SD_Init+0x38>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_SDMMC1_SD_Init+0x38>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <MX_SDMMC1_SD_Init+0x38>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_SDMMC1_SD_Init+0x38>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000a3a:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <MX_SDMMC1_SD_Init+0x38>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <MX_SDMMC1_SD_Init+0x38>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	20000158 	.word	0x20000158
 8000a54:	40012c00 	.word	0x40012c00

08000a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6e:	4b29      	ldr	r3, [pc, #164]	; (8000b14 <MX_GPIO_Init+0xbc>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a28      	ldr	r2, [pc, #160]	; (8000b14 <MX_GPIO_Init+0xbc>)
 8000a74:	f043 0304 	orr.w	r3, r3, #4
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b26      	ldr	r3, [pc, #152]	; (8000b14 <MX_GPIO_Init+0xbc>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0304 	and.w	r3, r3, #4
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <MX_GPIO_Init+0xbc>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a22      	ldr	r2, [pc, #136]	; (8000b14 <MX_GPIO_Init+0xbc>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <MX_GPIO_Init+0xbc>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9e:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <MX_GPIO_Init+0xbc>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a1c      	ldr	r2, [pc, #112]	; (8000b14 <MX_GPIO_Init+0xbc>)
 8000aa4:	f043 0308 	orr.w	r3, r3, #8
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <MX_GPIO_Init+0xbc>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0308 	and.w	r3, r3, #8
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ab6:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <MX_GPIO_Init+0xbc>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a16      	ldr	r2, [pc, #88]	; (8000b14 <MX_GPIO_Init+0xbc>)
 8000abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_GPIO_Init+0xbc>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_GPIO_Init+0xbc>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a10      	ldr	r2, [pc, #64]	; (8000b14 <MX_GPIO_Init+0xbc>)
 8000ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <MX_GPIO_Init+0xbc>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2102      	movs	r1, #2
 8000aea:	480b      	ldr	r0, [pc, #44]	; (8000b18 <MX_GPIO_Init+0xc0>)
 8000aec:	f002 f89c 	bl	8002c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000af0:	2302      	movs	r3, #2
 8000af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	4804      	ldr	r0, [pc, #16]	; (8000b18 <MX_GPIO_Init+0xc0>)
 8000b08:	f001 fee2 	bl	80028d0 <HAL_GPIO_Init>

}
 8000b0c:	bf00      	nop
 8000b0e:	3728      	adds	r7, #40	; 0x28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40022000 	.word	0x40022000

08000b1c <sdinit>:

/* USER CODE BEGIN 4 */
void sdinit(){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	// Inisialisai SD
	res = BSP_SD_Init();
 8000b20:	f005 fbd4 	bl	80062cc <BSP_SD_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	461a      	mov	r2, r3
 8000b28:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <sdinit+0x44>)
 8000b2a:	701a      	strb	r2, [r3, #0]

	if(res != FR_OK){
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <sdinit+0x44>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d013      	beq.n	8000b5c <sdinit+0x40>
	// Membersihkan tampilan pada LCD dan set backgroung lcd menjadi warna putih
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b38:	f006 fac6 	bl	80070c8 <BSP_LCD_Clear>

	// Mengatur warna backgroud text
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b40:	f006 fa8e 	bl	8007060 <BSP_LCD_SetBackColor>

	// Meng  atur warna text
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000b44:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000b48:	f006 fa72 	bl	8007030 <BSP_LCD_SetTextColor>

	// Display ERROR ke LCD pada koordinat X,Y dengan mode Center
	BSP_LCD_DisplayStringAt(0, 100, (uint8_t*)"PLEASE INSERT MICRO SD", CENTER_MODE);
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	4a05      	ldr	r2, [pc, #20]	; (8000b64 <sdinit+0x48>)
 8000b50:	2164      	movs	r1, #100	; 0x64
 8000b52:	2000      	movs	r0, #0
 8000b54:	f006 fb24 	bl	80071a0 <BSP_LCD_DisplayStringAt>
	error1();
 8000b58:	f000 f8e6 	bl	8000d28 <error1>
	}
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	200001dc 	.word	0x200001dc
 8000b64:	0800baa0 	.word	0x0800baa0

08000b68 <sdmount>:

void sdmount(){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	// Mount SD card
	res = f_mount(&SDFatFs, "", 1);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	4911      	ldr	r1, [pc, #68]	; (8000bb4 <sdmount+0x4c>)
 8000b70:	4811      	ldr	r0, [pc, #68]	; (8000bb8 <sdmount+0x50>)
 8000b72:	f008 ffcf 	bl	8009b14 <f_mount>
 8000b76:	4603      	mov	r3, r0
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <sdmount+0x54>)
 8000b7c:	701a      	strb	r2, [r3, #0]
	if(res != FR_OK){
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <sdmount+0x54>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d013      	beq.n	8000bae <sdmount+0x46>
	// Membersihkan tampilan pada LCD dan set backgroung lcd menjadi warna putih
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000b86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b8a:	f006 fa9d 	bl	80070c8 <BSP_LCD_Clear>

	// Mengatur warna backgroud text
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000b8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b92:	f006 fa65 	bl	8007060 <BSP_LCD_SetBackColor>

	// Mengatur warna text
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000b96:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000b9a:	f006 fa49 	bl	8007030 <BSP_LCD_SetTextColor>

	// Display ERROR ke LCD pada koordinat X,Y dengan mode Center
	BSP_LCD_DisplayStringAt(0, 100, (uint8_t*)"Error! cannot mount SD Card!", CENTER_MODE);
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <sdmount+0x58>)
 8000ba2:	2164      	movs	r1, #100	; 0x64
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f006 fafb 	bl	80071a0 <BSP_LCD_DisplayStringAt>
	error1();
 8000baa:	f000 f8bd 	bl	8000d28 <error1>
	}
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	0800bab8 	.word	0x0800bab8
 8000bb8:	200001e0 	.word	0x200001e0
 8000bbc:	200001dc 	.word	0x200001dc
 8000bc0:	0800babc 	.word	0x0800babc

08000bc4 <writefile>:
//		fprintf(fileoutput, "%s %s %s \n",  datatulis.Input1[i], datatulis.Input2[i],datatulis.Input3[i]);
//	}
//    fclose(fileoutput);
//}

void writefile(){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
//	write file
	  res = f_open(&MyFile, "soal1.txt", FA_CREATE_ALWAYS|FA_WRITE);
 8000bc8:	220a      	movs	r2, #10
 8000bca:	4917      	ldr	r1, [pc, #92]	; (8000c28 <writefile+0x64>)
 8000bcc:	4817      	ldr	r0, [pc, #92]	; (8000c2c <writefile+0x68>)
 8000bce:	f008 ffe7 	bl	8009ba0 <f_open>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <writefile+0x6c>)
 8000bd8:	701a      	strb	r2, [r3, #0]
	  if(res != FR_OK){
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <writefile+0x6c>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <writefile+0x22>
		  error1();
 8000be2:	f000 f8a1 	bl	8000d28 <error1>
	  }

	  res = f_lseek(&MyFile, f_size(&MyFile));
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <writefile+0x68>)
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	4619      	mov	r1, r3
 8000bec:	480f      	ldr	r0, [pc, #60]	; (8000c2c <writefile+0x68>)
 8000bee:	f009 fcf1 	bl	800a5d4 <f_lseek>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <writefile+0x6c>)
 8000bf8:	701a      	strb	r2, [r3, #0]
	  if(res != FR_OK){
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <writefile+0x6c>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <writefile+0x42>
		  error1();
 8000c02:	f000 f891 	bl	8000d28 <error1>
	  }

	  f_printf(&MyFile, "%s", buffwr);
 8000c06:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <writefile+0x70>)
 8000c08:	490b      	ldr	r1, [pc, #44]	; (8000c38 <writefile+0x74>)
 8000c0a:	4808      	ldr	r0, [pc, #32]	; (8000c2c <writefile+0x68>)
 8000c0c:	f009 ff62 	bl	800aad4 <f_printf>
	  if(res != FR_OK){
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <writefile+0x6c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <writefile+0x58>
		  error1();
 8000c18:	f000 f886 	bl	8000d28 <error1>
	  }

	  f_close(&MyFile);
 8000c1c:	4803      	ldr	r0, [pc, #12]	; (8000c2c <writefile+0x68>)
 8000c1e:	f009 fcaf 	bl	800a580 <f_close>

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	0800badc 	.word	0x0800badc
 8000c2c:	20000410 	.word	0x20000410
 8000c30:	200001dc 	.word	0x200001dc
 8000c34:	20000000 	.word	0x20000000
 8000c38:	0800bae8 	.word	0x0800bae8

08000c3c <sdread>:

void sdread(){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	    res = f_open(&MyFile, "soal1.txt", FA_READ);
 8000c40:	2201      	movs	r2, #1
 8000c42:	4914      	ldr	r1, [pc, #80]	; (8000c94 <sdread+0x58>)
 8000c44:	4814      	ldr	r0, [pc, #80]	; (8000c98 <sdread+0x5c>)
 8000c46:	f008 ffab 	bl	8009ba0 <f_open>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <sdread+0x60>)
 8000c50:	701a      	strb	r2, [r3, #0]
	    if(res != FR_OK){
 8000c52:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <sdread+0x60>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <sdread+0x22>
	    	  error1();
 8000c5a:	f000 f865 	bl	8000d28 <error1>
	    }

	    // Read isi myfile line 1 simpan ke buffrd
	    res = f_read(&MyFile, buffrd, 50, (void*)&bytesread);
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <sdread+0x64>)
 8000c60:	2232      	movs	r2, #50	; 0x32
 8000c62:	4910      	ldr	r1, [pc, #64]	; (8000ca4 <sdread+0x68>)
 8000c64:	480c      	ldr	r0, [pc, #48]	; (8000c98 <sdread+0x5c>)
 8000c66:	f009 f959 	bl	8009f1c <f_read>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <sdread+0x60>)
 8000c70:	701a      	strb	r2, [r3, #0]
	    if(res != FR_OK){
 8000c72:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <sdread+0x60>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <sdread+0x42>
	    	  error1();
 8000c7a:	f000 f855 	bl	8000d28 <error1>

//	    data2 = atoi(buffrd); // Agar program bisa mendeteksi angka ganjil sampai 10 angka
	  //  data2 = IntToStr(data); // Agar tidak qr code dibelakangnya kalau diinput manual atau langusng di edit file txtnya

	    // Tutup myfile
	    f_close(&MyFile);
 8000c7e:	4806      	ldr	r0, [pc, #24]	; (8000c98 <sdread+0x5c>)
 8000c80:	f009 fc7e 	bl	800a580 <f_close>
	    f_mount(0, "", 1);
 8000c84:	2201      	movs	r2, #1
 8000c86:	4908      	ldr	r1, [pc, #32]	; (8000ca8 <sdread+0x6c>)
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f008 ff43 	bl	8009b14 <f_mount>
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	0800badc 	.word	0x0800badc
 8000c98:	20000410 	.word	0x20000410
 8000c9c:	200001dc 	.word	0x200001dc
 8000ca0:	2000067c 	.word	0x2000067c
 8000ca4:	20000640 	.word	0x20000640
 8000ca8:	0800bab8 	.word	0x0800bab8

08000cac <restart>:

void restart(){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	BSP_TS_GetState(&ts);
 8000cb0:	4810      	ldr	r0, [pc, #64]	; (8000cf4 <restart+0x48>)
 8000cb2:	f006 ff75 	bl	8007ba0 <BSP_TS_GetState>
	BSP_LCD_SetBackColor(LCD_COLOR_CYAN);
 8000cb6:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 8000cba:	f006 f9d1 	bl	8007060 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(0, 150, (uint8_t *)"RESTART", CENTER_MODE);
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <restart+0x4c>)
 8000cc2:	2196      	movs	r1, #150	; 0x96
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f006 fa6b 	bl	80071a0 <BSP_LCD_DisplayStringAt>
	if (ts.touchX[0] >= 180 && ts.touchX[0] <= 300 && ts.touchY[0] >= 140 && ts.touchY[0] <= 170){
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <restart+0x48>)
 8000ccc:	885b      	ldrh	r3, [r3, #2]
 8000cce:	2bb3      	cmp	r3, #179	; 0xb3
 8000cd0:	d90e      	bls.n	8000cf0 <restart+0x44>
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <restart+0x48>)
 8000cd4:	885b      	ldrh	r3, [r3, #2]
 8000cd6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000cda:	d809      	bhi.n	8000cf0 <restart+0x44>
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <restart+0x48>)
 8000cde:	899b      	ldrh	r3, [r3, #12]
 8000ce0:	2b8b      	cmp	r3, #139	; 0x8b
 8000ce2:	d905      	bls.n	8000cf0 <restart+0x44>
 8000ce4:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <restart+0x48>)
 8000ce6:	899b      	ldrh	r3, [r3, #12]
 8000ce8:	2baa      	cmp	r3, #170	; 0xaa
 8000cea:	d801      	bhi.n	8000cf0 <restart+0x44>
//		BSP_LCD_Clear(LCD_COLOR_WHITE);
//		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
//		BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"LOADING...", CENTER_MODE);
//		HAL_Delay(2000);
//		BSP_LCD_Clear(LCD_COLOR_WHITE);
		NVIC_SystemReset(); // Reset System
 8000cec:	f7ff fc62 	bl	80005b4 <__NVIC_SystemReset>
	}
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000680 	.word	0x20000680
 8000cf8:	0800baec 	.word	0x0800baec

08000cfc <IntToStr>:
		return 1;
	else
		return (c_modulus(num,2) == 0 ? 0 : 1) ;
}

char *IntToStr(int x){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	char *str=(char *)malloc(10 * sizeof (char));
 8000d04:	200a      	movs	r0, #10
 8000d06:	f00a f98d 	bl	800b024 <malloc>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	60fb      	str	r3, [r7, #12]
	sprintf(str, "%d", x);
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	4904      	ldr	r1, [pc, #16]	; (8000d24 <IntToStr+0x28>)
 8000d12:	68f8      	ldr	r0, [r7, #12]
 8000d14:	f00a fa86 	bl	800b224 <siprintf>
	return str;
 8000d18:	68fb      	ldr	r3, [r7, #12]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	0800baf4 	.word	0x0800baf4

08000d28 <error1>:

void error1(void){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	while(1){
	restart();
 8000d2c:	f7ff ffbe 	bl	8000cac <restart>
	HAL_Delay(100);
 8000d30:	2064      	movs	r0, #100	; 0x64
 8000d32:	f000 ff63 	bl	8001bfc <HAL_Delay>
	restart();
 8000d36:	e7f9      	b.n	8000d2c <error1+0x4>

08000d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3c:	b672      	cpsid	i
}
 8000d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <Error_Handler+0x8>
	...

08000d44 <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	2300      	movs	r3, #0
 8000d52:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d101      	bne.n	8000d5e <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e0c7      	b.n	8000eee <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d106      	bne.n	8000d78 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f000 f8c2 	bl	8000efc <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	699a      	ldr	r2, [r3, #24]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8000d8e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	6999      	ldr	r1, [r3, #24]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685a      	ldr	r2, [r3, #4]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000da4:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	691b      	ldr	r3, [r3, #16]
 8000daa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	430a      	orrs	r2, r1
 8000db2:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6899      	ldr	r1, [r3, #8]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	4b4e      	ldr	r3, [pc, #312]	; (8000ef8 <HAL_LTDC_Init+0x1b4>)
 8000dc0:	400b      	ands	r3, r1
 8000dc2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	695b      	ldr	r3, [r3, #20]
 8000dc8:	041b      	lsls	r3, r3, #16
 8000dca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	6899      	ldr	r1, [r3, #8]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	699a      	ldr	r2, [r3, #24]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	431a      	orrs	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	430a      	orrs	r2, r1
 8000de0:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	68d9      	ldr	r1, [r3, #12]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b42      	ldr	r3, [pc, #264]	; (8000ef8 <HAL_LTDC_Init+0x1b4>)
 8000dee:	400b      	ands	r3, r1
 8000df0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	041b      	lsls	r3, r3, #16
 8000df8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	68d9      	ldr	r1, [r3, #12]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6a1a      	ldr	r2, [r3, #32]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	431a      	orrs	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	6919      	ldr	r1, [r3, #16]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	4b37      	ldr	r3, [pc, #220]	; (8000ef8 <HAL_LTDC_Init+0x1b4>)
 8000e1c:	400b      	ands	r3, r1
 8000e1e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e24:	041b      	lsls	r3, r3, #16
 8000e26:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	6919      	ldr	r1, [r3, #16]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	431a      	orrs	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	6959      	ldr	r1, [r3, #20]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b2b      	ldr	r3, [pc, #172]	; (8000ef8 <HAL_LTDC_Init+0x1b4>)
 8000e4a:	400b      	ands	r3, r1
 8000e4c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e52:	041b      	lsls	r3, r3, #16
 8000e54:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	6959      	ldr	r1, [r3, #20]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	431a      	orrs	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e72:	021b      	lsls	r3, r3, #8
 8000e74:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000e7c:	041b      	lsls	r3, r3, #16
 8000e7e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8000e8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8000ea2:	431a      	orrs	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f042 0204 	orr.w	r2, r2, #4
 8000eba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f042 0202 	orr.w	r2, r2, #2
 8000eca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	699a      	ldr	r2, [r3, #24]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f042 0201 	orr.w	r2, r2, #1
 8000eda:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	f000f800 	.word	0xf000f800

08000efc <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */ 
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <HAL_LTDC_IRQHandler>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.  
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f1e:	f003 0304 	and.w	r3, r3, #4
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d025      	beq.n	8000f72 <HAL_LTDC_IRQHandler+0x62>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_TE) != RESET)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f2c:	f003 0304 	and.w	r3, r3, #4
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d01e      	beq.n	8000f72 <HAL_LTDC_IRQHandler+0x62>
    {
      /* Disable the transfer Error interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f022 0204 	bic.w	r2, r2, #4
 8000f42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the transfer error flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2204      	movs	r2, #4
 8000f4a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000f52:	f043 0201 	orr.w	r2, r3, #1
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2204      	movs	r2, #4
 8000f60:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 f87b 	bl	8001068 <HAL_LTDC_ErrorCallback>
    }
  }
  /* FIFO underrun Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_FU) != RESET)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d025      	beq.n	8000fcc <HAL_LTDC_IRQHandler+0xbc>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_FU) != RESET)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d01e      	beq.n	8000fcc <HAL_LTDC_IRQHandler+0xbc>
    {
      /* Disable the FIFO underrun interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f022 0202 	bic.w	r2, r2, #2
 8000f9c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the FIFO underrun flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000fac:	f043 0202 	orr.w	r2, r3, #2
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2204      	movs	r2, #4
 8000fba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f000 f84e 	bl	8001068 <HAL_LTDC_ErrorCallback>
    }
  }
  /* Line Interrupt management ************************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_LI) != RESET)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d01d      	beq.n	8001016 <HAL_LTDC_IRQHandler+0x106>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_LI) != RESET)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d016      	beq.n	8001016 <HAL_LTDC_IRQHandler+0x106>
    {
      /* Disable the Line interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f022 0201 	bic.w	r2, r2, #1
 8000ff6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the Line interrupt flag */  
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2201      	movs	r2, #1
 8001004:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

      /* Line interrupt Callback */
      HAL_LTDC_LineEventCallback(hltdc);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f000 f833 	bl	800107c <HAL_LTDC_LineEventCallback>
    }
  }
  /* Register reload Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_RR) != RESET)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800101c:	f003 0308 	and.w	r3, r3, #8
 8001020:	2b00      	cmp	r3, #0
 8001022:	d01d      	beq.n	8001060 <HAL_LTDC_IRQHandler+0x150>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_RR) != RESET)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800102a:	f003 0308 	and.w	r3, r3, #8
 800102e:	2b00      	cmp	r3, #0
 8001030:	d016      	beq.n	8001060 <HAL_LTDC_IRQHandler+0x150>
    {
      /* Disable the register reload interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f022 0208 	bic.w	r2, r2, #8
 8001040:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Clear the register reload flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2208      	movs	r2, #8
 8001048:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2201      	movs	r2, #1
 800104e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      
      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
      /* Register reload interrupt Callback */
      HAL_LTDC_ReloadEventCallback(hltdc);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f000 f818 	bl	8001090 <HAL_LTDC_ReloadEventCallback>
    }
  }  
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 80010a4:	b5b0      	push	{r4, r5, r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d101      	bne.n	80010be <HAL_LTDC_ConfigLayer+0x1a>
 80010ba:	2302      	movs	r3, #2
 80010bc:	e02c      	b.n	8001118 <HAL_LTDC_ConfigLayer+0x74>
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2201      	movs	r2, #1
 80010c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2202      	movs	r2, #2
 80010ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2134      	movs	r1, #52	; 0x34
 80010d4:	fb01 f303 	mul.w	r3, r1, r3
 80010d8:	4413      	add	r3, r2
 80010da:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	4614      	mov	r4, r2
 80010e2:	461d      	mov	r5, r3
 80010e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f0:	682b      	ldr	r3, [r5, #0]
 80010f2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	68b9      	ldr	r1, [r7, #8]
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f000 f81f 	bl	800113c <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2201      	movs	r2, #1
 8001104:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2201      	movs	r2, #1
 800110a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bdb0      	pop	{r4, r5, r7, pc}

08001120 <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800112e:	b2db      	uxtb	r3, r3
}
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	0c1b      	lsrs	r3, r3, #16
 8001160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001164:	4413      	add	r3, r2
 8001166:	041b      	lsls	r3, r3, #16
 8001168:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	01db      	lsls	r3, r3, #7
 8001174:	4413      	add	r3, r2
 8001176:	3384      	adds	r3, #132	; 0x84
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	6812      	ldr	r2, [r2, #0]
 800117e:	4611      	mov	r1, r2
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	01d2      	lsls	r2, r2, #7
 8001184:	440a      	add	r2, r1
 8001186:	3284      	adds	r2, #132	; 0x84
 8001188:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800118c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	0c1b      	lsrs	r3, r3, #16
 800119a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800119e:	4413      	add	r3, r2
 80011a0:	1c5a      	adds	r2, r3, #1
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4619      	mov	r1, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	01db      	lsls	r3, r3, #7
 80011ac:	440b      	add	r3, r1
 80011ae:	3384      	adds	r3, #132	; 0x84
 80011b0:	4619      	mov	r1, r3
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	68da      	ldr	r2, [r3, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011c6:	4413      	add	r3, r2
 80011c8:	041b      	lsls	r3, r3, #16
 80011ca:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	01db      	lsls	r3, r3, #7
 80011d6:	4413      	add	r3, r2
 80011d8:	3384      	adds	r3, #132	; 0x84
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	6812      	ldr	r2, [r2, #0]
 80011e0:	4611      	mov	r1, r2
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	01d2      	lsls	r2, r2, #7
 80011e6:	440a      	add	r2, r1
 80011e8:	3284      	adds	r2, #132	; 0x84
 80011ea:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80011ee:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011fe:	4413      	add	r3, r2
 8001200:	1c5a      	adds	r2, r3, #1
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4619      	mov	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	01db      	lsls	r3, r3, #7
 800120c:	440b      	add	r3, r1
 800120e:	3384      	adds	r3, #132	; 0x84
 8001210:	4619      	mov	r1, r3
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	4313      	orrs	r3, r2
 8001216:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	01db      	lsls	r3, r3, #7
 8001222:	4413      	add	r3, r2
 8001224:	3384      	adds	r3, #132	; 0x84
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	6812      	ldr	r2, [r2, #0]
 800122c:	4611      	mov	r1, r2
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	01d2      	lsls	r2, r2, #7
 8001232:	440a      	add	r2, r1
 8001234:	3284      	adds	r2, #132	; 0x84
 8001236:	f023 0307 	bic.w	r3, r3, #7
 800123a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	01db      	lsls	r3, r3, #7
 8001246:	4413      	add	r3, r2
 8001248:	3384      	adds	r3, #132	; 0x84
 800124a:	461a      	mov	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001262:	041b      	lsls	r3, r3, #16
 8001264:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	061b      	lsls	r3, r3, #24
 800126c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	01db      	lsls	r3, r3, #7
 8001278:	4413      	add	r3, r2
 800127a:	3384      	adds	r3, #132	; 0x84
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	461a      	mov	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	01db      	lsls	r3, r3, #7
 8001288:	4413      	add	r3, r2
 800128a:	3384      	adds	r3, #132	; 0x84
 800128c:	461a      	mov	r2, r3
 800128e:	2300      	movs	r3, #0
 8001290:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001298:	461a      	mov	r2, r3
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	431a      	orrs	r2, r3
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	431a      	orrs	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4619      	mov	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	01db      	lsls	r3, r3, #7
 80012ac:	440b      	add	r3, r1
 80012ae:	3384      	adds	r3, #132	; 0x84
 80012b0:	4619      	mov	r1, r3
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	01db      	lsls	r3, r3, #7
 80012c2:	4413      	add	r3, r2
 80012c4:	3384      	adds	r3, #132	; 0x84
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	68fa      	ldr	r2, [r7, #12]
 80012ca:	6812      	ldr	r2, [r2, #0]
 80012cc:	4611      	mov	r1, r2
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	01d2      	lsls	r2, r2, #7
 80012d2:	440a      	add	r2, r1
 80012d4:	3284      	adds	r2, #132	; 0x84
 80012d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012da:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	01db      	lsls	r3, r3, #7
 80012e6:	4413      	add	r3, r2
 80012e8:	3384      	adds	r3, #132	; 0x84
 80012ea:	461a      	mov	r2, r3
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	01db      	lsls	r3, r3, #7
 80012fc:	4413      	add	r3, r2
 80012fe:	3384      	adds	r3, #132	; 0x84
 8001300:	69da      	ldr	r2, [r3, #28]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4619      	mov	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	01db      	lsls	r3, r3, #7
 800130c:	440b      	add	r3, r1
 800130e:	3384      	adds	r3, #132	; 0x84
 8001310:	4619      	mov	r1, r3
 8001312:	4b58      	ldr	r3, [pc, #352]	; (8001474 <LTDC_SetConfig+0x338>)
 8001314:	4013      	ands	r3, r2
 8001316:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	68f9      	ldr	r1, [r7, #12]
 8001322:	6809      	ldr	r1, [r1, #0]
 8001324:	4608      	mov	r0, r1
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	01c9      	lsls	r1, r1, #7
 800132a:	4401      	add	r1, r0
 800132c:	3184      	adds	r1, #132	; 0x84
 800132e:	4313      	orrs	r3, r2
 8001330:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	01db      	lsls	r3, r3, #7
 800133c:	4413      	add	r3, r2
 800133e:	3384      	adds	r3, #132	; 0x84
 8001340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	01db      	lsls	r3, r3, #7
 800134c:	4413      	add	r3, r2
 800134e:	3384      	adds	r3, #132	; 0x84
 8001350:	461a      	mov	r2, r3
 8001352:	2300      	movs	r3, #0
 8001354:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	01db      	lsls	r3, r3, #7
 8001360:	4413      	add	r3, r2
 8001362:	3384      	adds	r3, #132	; 0x84
 8001364:	461a      	mov	r2, r3
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136a:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d102      	bne.n	800137a <LTDC_SetConfig+0x23e>
  {
    tmp = 4;
 8001374:	2304      	movs	r3, #4
 8001376:	61fb      	str	r3, [r7, #28]
 8001378:	e01b      	b.n	80013b2 <LTDC_SetConfig+0x276>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d102      	bne.n	8001388 <LTDC_SetConfig+0x24c>
  {
    tmp = 3;
 8001382:	2303      	movs	r3, #3
 8001384:	61fb      	str	r3, [r7, #28]
 8001386:	e014      	b.n	80013b2 <LTDC_SetConfig+0x276>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	2b04      	cmp	r3, #4
 800138e:	d00b      	beq.n	80013a8 <LTDC_SetConfig+0x26c>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001394:	2b02      	cmp	r3, #2
 8001396:	d007      	beq.n	80013a8 <LTDC_SetConfig+0x26c>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800139c:	2b03      	cmp	r3, #3
 800139e:	d003      	beq.n	80013a8 <LTDC_SetConfig+0x26c>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80013a4:	2b07      	cmp	r3, #7
 80013a6:	d102      	bne.n	80013ae <LTDC_SetConfig+0x272>
  {
    tmp = 2;
 80013a8:	2302      	movs	r3, #2
 80013aa:	61fb      	str	r3, [r7, #28]
 80013ac:	e001      	b.n	80013b2 <LTDC_SetConfig+0x276>
  }
  else
  {
    tmp = 1;
 80013ae:	2301      	movs	r3, #1
 80013b0:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	01db      	lsls	r3, r3, #7
 80013bc:	4413      	add	r3, r2
 80013be:	3384      	adds	r3, #132	; 0x84
 80013c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	6812      	ldr	r2, [r2, #0]
 80013c6:	4611      	mov	r1, r2
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	01d2      	lsls	r2, r2, #7
 80013cc:	440a      	add	r2, r1
 80013ce:	3284      	adds	r2, #132	; 0x84
 80013d0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80013d4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013da:	69fa      	ldr	r2, [r7, #28]
 80013dc:	fb02 f303 	mul.w	r3, r2, r3
 80013e0:	041a      	lsls	r2, r3, #16
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	6859      	ldr	r1, [r3, #4]
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	1acb      	subs	r3, r1, r3
 80013ec:	69f9      	ldr	r1, [r7, #28]
 80013ee:	fb01 f303 	mul.w	r3, r1, r3
 80013f2:	3303      	adds	r3, #3
 80013f4:	68f9      	ldr	r1, [r7, #12]
 80013f6:	6809      	ldr	r1, [r1, #0]
 80013f8:	4608      	mov	r0, r1
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	01c9      	lsls	r1, r1, #7
 80013fe:	4401      	add	r1, r0
 8001400:	3184      	adds	r1, #132	; 0x84
 8001402:	4313      	orrs	r3, r2
 8001404:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	01db      	lsls	r3, r3, #7
 8001410:	4413      	add	r3, r2
 8001412:	3384      	adds	r3, #132	; 0x84
 8001414:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4619      	mov	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	01db      	lsls	r3, r3, #7
 8001420:	440b      	add	r3, r1
 8001422:	3384      	adds	r3, #132	; 0x84
 8001424:	4619      	mov	r1, r3
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <LTDC_SetConfig+0x33c>)
 8001428:	4013      	ands	r3, r2
 800142a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	01db      	lsls	r3, r3, #7
 8001436:	4413      	add	r3, r2
 8001438:	3384      	adds	r3, #132	; 0x84
 800143a:	461a      	mov	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001440:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	01db      	lsls	r3, r3, #7
 800144c:	4413      	add	r3, r2
 800144e:	3384      	adds	r3, #132	; 0x84
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	6812      	ldr	r2, [r2, #0]
 8001456:	4611      	mov	r1, r2
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	01d2      	lsls	r2, r2, #7
 800145c:	440a      	add	r2, r1
 800145e:	3284      	adds	r2, #132	; 0x84
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6013      	str	r3, [r2, #0]
}
 8001466:	bf00      	nop
 8001468:	3724      	adds	r7, #36	; 0x24
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	fffff8f8 	.word	0xfffff8f8
 8001478:	fffff800 	.word	0xfffff800

0800147c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001482:	4b16      	ldr	r3, [pc, #88]	; (80014dc <HAL_MspInit+0x60>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a15      	ldr	r2, [pc, #84]	; (80014dc <HAL_MspInit+0x60>)
 8001488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	4b13      	ldr	r3, [pc, #76]	; (80014dc <HAL_MspInit+0x60>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <HAL_MspInit+0x60>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	4a0f      	ldr	r2, [pc, #60]	; (80014dc <HAL_MspInit+0x60>)
 80014a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a4:	6453      	str	r3, [r2, #68]	; 0x44
 80014a6:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <HAL_MspInit+0x60>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	2005      	movs	r0, #5
 80014b8:	f000 fc9f 	bl	8001dfa <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80014bc:	2005      	movs	r0, #5
 80014be:	f000 fcb8 	bl	8001e32 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	2005      	movs	r0, #5
 80014c8:	f000 fc97 	bl	8001dfa <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80014cc:	2005      	movs	r0, #5
 80014ce:	f000 fcb0 	bl	8001e32 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800

080014e0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <HAL_CRC_MspInit+0x38>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d10b      	bne.n	800150a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <HAL_CRC_MspInit+0x3c>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a09      	ldr	r2, [pc, #36]	; (800151c <HAL_CRC_MspInit+0x3c>)
 80014f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b07      	ldr	r3, [pc, #28]	; (800151c <HAL_CRC_MspInit+0x3c>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800150a:	bf00      	nop
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40023000 	.word	0x40023000
 800151c:	40023800 	.word	0x40023800

08001520 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <HAL_DMA2D_MspInit+0x38>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d10b      	bne.n	800154a <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <HAL_DMA2D_MspInit+0x3c>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a09      	ldr	r2, [pc, #36]	; (800155c <HAL_DMA2D_MspInit+0x3c>)
 8001538:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b07      	ldr	r3, [pc, #28]	; (800155c <HAL_DMA2D_MspInit+0x3c>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	4002b000 	.word	0x4002b000
 800155c:	40023800 	.word	0x40023800

08001560 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b0ac      	sub	sp, #176	; 0xb0
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001578:	f107 0318 	add.w	r3, r7, #24
 800157c:	2284      	movs	r2, #132	; 0x84
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f009 fd57 	bl	800b034 <memset>
  if(hsd->Instance==SDMMC1)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a34      	ldr	r2, [pc, #208]	; (800165c <HAL_SD_MspInit+0xfc>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d161      	bne.n	8001654 <HAL_SD_MspInit+0xf4>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8001590:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8001594:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001596:	2300      	movs	r3, #0
 8001598:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800159c:	2300      	movs	r3, #0
 800159e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015a2:	f107 0318 	add.w	r3, r7, #24
 80015a6:	4618      	mov	r0, r3
 80015a8:	f002 fdc4 	bl	8004134 <HAL_RCCEx_PeriphCLKConfig>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 80015b2:	f7ff fbc1 	bl	8000d38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80015b6:	4b2a      	ldr	r3, [pc, #168]	; (8001660 <HAL_SD_MspInit+0x100>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	4a29      	ldr	r2, [pc, #164]	; (8001660 <HAL_SD_MspInit+0x100>)
 80015bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015c0:	6453      	str	r3, [r2, #68]	; 0x44
 80015c2:	4b27      	ldr	r3, [pc, #156]	; (8001660 <HAL_SD_MspInit+0x100>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ce:	4b24      	ldr	r3, [pc, #144]	; (8001660 <HAL_SD_MspInit+0x100>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a23      	ldr	r2, [pc, #140]	; (8001660 <HAL_SD_MspInit+0x100>)
 80015d4:	f043 0304 	orr.w	r3, r3, #4
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b21      	ldr	r3, [pc, #132]	; (8001660 <HAL_SD_MspInit+0x100>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015e6:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <HAL_SD_MspInit+0x100>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a1d      	ldr	r2, [pc, #116]	; (8001660 <HAL_SD_MspInit+0x100>)
 80015ec:	f043 0308 	orr.w	r3, r3, #8
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <HAL_SD_MspInit+0x100>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 80015fe:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001602:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001612:	2303      	movs	r3, #3
 8001614:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001618:	230c      	movs	r3, #12
 800161a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001622:	4619      	mov	r1, r3
 8001624:	480f      	ldr	r0, [pc, #60]	; (8001664 <HAL_SD_MspInit+0x104>)
 8001626:	f001 f953 	bl	80028d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800162a:	2304      	movs	r3, #4
 800162c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163c:	2303      	movs	r3, #3
 800163e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001642:	230c      	movs	r3, #12
 8001644:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001648:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800164c:	4619      	mov	r1, r3
 800164e:	4806      	ldr	r0, [pc, #24]	; (8001668 <HAL_SD_MspInit+0x108>)
 8001650:	f001 f93e 	bl	80028d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001654:	bf00      	nop
 8001656:	37b0      	adds	r7, #176	; 0xb0
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40012c00 	.word	0x40012c00
 8001660:	40023800 	.word	0x40023800
 8001664:	40020800 	.word	0x40020800
 8001668:	40020c00 	.word	0x40020c00

0800166c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e025      	b.n	80016cc <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d106      	bne.n	800169a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f000 f81d 	bl	80016d4 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2202      	movs	r2, #2
 800169e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3304      	adds	r3, #4
 80016aa:	4619      	mov	r1, r3
 80016ac:	4610      	mov	r0, r2
 80016ae:	f000 f8a1 	bl	80017f4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6818      	ldr	r0, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	461a      	mov	r2, r3
 80016bc:	6839      	ldr	r1, [r7, #0]
 80016be:	f000 f90b 	bl	80018d8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2201      	movs	r2, #1
 80016c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d101      	bne.n	8001704 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8001700:	2302      	movs	r3, #2
 8001702:	e018      	b.n	8001736 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2202      	movs	r2, #2
 8001708:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	68b9      	ldr	r1, [r7, #8]
 8001714:	4618      	mov	r0, r3
 8001716:	f000 f95f 	bl	80019d8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d104      	bne.n	800172c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2205      	movs	r2, #5
 8001726:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800172a:	e003      	b.n	8001734 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d101      	bne.n	8001758 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8001754:	2302      	movs	r3, #2
 8001756:	e00e      	b.n	8001776 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2202      	movs	r2, #2
 800175c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6839      	ldr	r1, [r7, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f000 f957 	bl	8001a1a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001782:	e7fe      	b.n	8001782 <NMI_Handler+0x4>

08001784 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001788:	e7fe      	b.n	8001788 <HardFault_Handler+0x4>

0800178a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800178e:	e7fe      	b.n	800178e <MemManage_Handler+0x4>

08001790 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <BusFault_Handler+0x4>

08001796 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800179a:	e7fe      	b.n	800179a <UsageFault_Handler+0x4>

0800179c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ca:	f000 f9f7 	bl	8001bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <LTDC_IRQHandler>:

/* USER CODE BEGIN 1 */
void LTDC_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  HAL_LTDC_IRQHandler(&hLtdcHandler);
 80017e4:	4802      	ldr	r0, [pc, #8]	; (80017f0 <LTDC_IRQHandler+0x10>)
 80017e6:	f7ff fb93 	bl	8000f10 <HAL_LTDC_IRQHandler>
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000710 	.word	0x20000710

080017f4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d027      	beq.n	800185e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	4b2f      	ldr	r3, [pc, #188]	; (80018d4 <FMC_SDRAM_Init+0xe0>)
 8001818:	4013      	ands	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8001824:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800182a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8001830:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8001836:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800183c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8001842:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8001848:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800184e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	4313      	orrs	r3, r2
 8001854:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	e032      	b.n	80018c4 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800186a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8001874:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800187a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	4313      	orrs	r3, r2
 8001880:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8001888:	68ba      	ldr	r2, [r7, #8]
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <FMC_SDRAM_Init+0xe0>)
 800188c:	4013      	ands	r3, r2
 800188e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8001898:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800189e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 80018a4:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80018aa:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 80018b0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68ba      	ldr	r2, [r7, #8]
 80018c2:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	ffff8000 	.word	0xffff8000

080018d8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80018d8:	b480      	push	{r7}
 80018da:	b087      	sub	sp, #28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d02e      	beq.n	8001950 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80018fe:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800190e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	3b01      	subs	r3, #1
 8001916:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8001918:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	3b01      	subs	r3, #1
 8001920:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8001922:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	3b01      	subs	r3, #1
 800192a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800192c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	3b01      	subs	r3, #1
 8001934:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8001936:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	3b01      	subs	r3, #1
 800193e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8001940:	4313      	orrs	r3, r2
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	4313      	orrs	r3, r2
 8001946:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	e039      	b.n	80019c4 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	4b1e      	ldr	r3, [pc, #120]	; (80019d4 <FMC_SDRAM_Timing_Init+0xfc>)
 800195a:	4013      	ands	r3, r2
 800195c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	3b01      	subs	r3, #1
 8001964:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	3b01      	subs	r3, #1
 800196c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800196e:	4313      	orrs	r3, r2
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	4313      	orrs	r3, r2
 8001974:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001982:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	3b01      	subs	r3, #1
 8001990:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8001992:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	3b01      	subs	r3, #1
 800199a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800199c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80019a6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	3b01      	subs	r3, #1
 80019ae:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80019b0:	4313      	orrs	r3, r2
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	371c      	adds	r7, #28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	ff0f0fff 	.word	0xff0f0fff

080019d8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80019d8:	b480      	push	{r7}
 80019da:	b087      	sub	sp, #28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80019f0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80019fa:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8001a02:	4313      	orrs	r3, r2
 8001a04:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	371c      	adds	r7, #28
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	695a      	ldr	r2, [r3, #20]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a48:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <_sbrk+0x5c>)
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <_sbrk+0x60>)
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a54:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d102      	bne.n	8001a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <_sbrk+0x64>)
 8001a5e:	4a12      	ldr	r2, [pc, #72]	; (8001aa8 <_sbrk+0x68>)
 8001a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a62:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <_sbrk+0x64>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d207      	bcs.n	8001a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a70:	f009 faae 	bl	800afd0 <__errno>
 8001a74:	4603      	mov	r3, r0
 8001a76:	220c      	movs	r2, #12
 8001a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a7e:	e009      	b.n	8001a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <_sbrk+0x64>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a86:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <_sbrk+0x64>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <_sbrk+0x64>)
 8001a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a92:	68fb      	ldr	r3, [r7, #12]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20050000 	.word	0x20050000
 8001aa0:	00000800 	.word	0x00000800
 8001aa4:	200006ac 	.word	0x200006ac
 8001aa8:	200009d0 	.word	0x200009d0

08001aac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <SystemInit+0x20>)
 8001ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ab6:	4a05      	ldr	r2, [pc, #20]	; (8001acc <SystemInit+0x20>)
 8001ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ad4:	480d      	ldr	r0, [pc, #52]	; (8001b0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ad6:	490e      	ldr	r1, [pc, #56]	; (8001b10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ad8:	4a0e      	ldr	r2, [pc, #56]	; (8001b14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001adc:	e002      	b.n	8001ae4 <LoopCopyDataInit>

08001ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ae2:	3304      	adds	r3, #4

08001ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae8:	d3f9      	bcc.n	8001ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aea:	4a0b      	ldr	r2, [pc, #44]	; (8001b18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001aec:	4c0b      	ldr	r4, [pc, #44]	; (8001b1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af0:	e001      	b.n	8001af6 <LoopFillZerobss>

08001af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af4:	3204      	adds	r2, #4

08001af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af8:	d3fb      	bcc.n	8001af2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001afa:	f7ff ffd7 	bl	8001aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001afe:	f009 fa6d 	bl	800afdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b02:	f7fe fdd7 	bl	80006b4 <main>
  bx  lr    
 8001b06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b08:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b10:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8001b14:	0800d7e4 	.word	0x0800d7e4
  ldr r2, =_sbss
 8001b18:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8001b1c:	200009d0 	.word	0x200009d0

08001b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b20:	e7fe      	b.n	8001b20 <ADC_IRQHandler>
	...

08001b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8001b28:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <HAL_Init+0x34>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <HAL_Init+0x34>)
 8001b2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b32:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <HAL_Init+0x34>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a07      	ldr	r2, [pc, #28]	; (8001b58 <HAL_Init+0x34>)
 8001b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b40:	2003      	movs	r0, #3
 8001b42:	f000 f94f 	bl	8001de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b46:	2000      	movs	r0, #0
 8001b48:	f000 f808 	bl	8001b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b4c:	f7ff fc96 	bl	800147c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023c00 	.word	0x40023c00

08001b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_InitTick+0x54>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_InitTick+0x58>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 f967 	bl	8001e4e <HAL_SYSTICK_Config>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e00e      	b.n	8001ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b0f      	cmp	r3, #15
 8001b8e:	d80a      	bhi.n	8001ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b90:	2200      	movs	r2, #0
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b98:	f000 f92f 	bl	8001dfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b9c:	4a06      	ldr	r2, [pc, #24]	; (8001bb8 <HAL_InitTick+0x5c>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e000      	b.n	8001ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000034 	.word	0x20000034
 8001bb4:	2000003c 	.word	0x2000003c
 8001bb8:	20000038 	.word	0x20000038

08001bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_IncTick+0x20>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_IncTick+0x24>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <HAL_IncTick+0x24>)
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	2000003c 	.word	0x2000003c
 8001be0:	200006b0 	.word	0x200006b0

08001be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return uwTick;
 8001be8:	4b03      	ldr	r3, [pc, #12]	; (8001bf8 <HAL_GetTick+0x14>)
 8001bea:	681b      	ldr	r3, [r3, #0]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	200006b0 	.word	0x200006b0

08001bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c04:	f7ff ffee 	bl	8001be4 <HAL_GetTick>
 8001c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c14:	d005      	beq.n	8001c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_Delay+0x44>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4413      	add	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c22:	bf00      	nop
 8001c24:	f7ff ffde 	bl	8001be4 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d8f7      	bhi.n	8001c24 <HAL_Delay+0x28>
  {
  }
}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	2000003c 	.word	0x2000003c

08001c44 <__NVIC_SetPriorityGrouping>:
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <__NVIC_SetPriorityGrouping+0x40>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c60:	4013      	ands	r3, r2
 8001c62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c72:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <__NVIC_SetPriorityGrouping+0x40>)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	60d3      	str	r3, [r2, #12]
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed00 	.word	0xe000ed00
 8001c88:	05fa0000 	.word	0x05fa0000

08001c8c <__NVIC_GetPriorityGrouping>:
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	0a1b      	lsrs	r3, r3, #8
 8001c96:	f003 0307 	and.w	r3, r3, #7
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_EnableIRQ>:
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	db0b      	blt.n	8001cd2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	f003 021f 	and.w	r2, r3, #31
 8001cc0:	4907      	ldr	r1, [pc, #28]	; (8001ce0 <__NVIC_EnableIRQ+0x38>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	095b      	lsrs	r3, r3, #5
 8001cc8:	2001      	movs	r0, #1
 8001cca:	fa00 f202 	lsl.w	r2, r0, r2
 8001cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000e100 	.word	0xe000e100

08001ce4 <__NVIC_SetPriority>:
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	6039      	str	r1, [r7, #0]
 8001cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	db0a      	blt.n	8001d0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	490c      	ldr	r1, [pc, #48]	; (8001d30 <__NVIC_SetPriority+0x4c>)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	0112      	lsls	r2, r2, #4
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	440b      	add	r3, r1
 8001d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d0c:	e00a      	b.n	8001d24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	4908      	ldr	r1, [pc, #32]	; (8001d34 <__NVIC_SetPriority+0x50>)
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	3b04      	subs	r3, #4
 8001d1c:	0112      	lsls	r2, r2, #4
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	440b      	add	r3, r1
 8001d22:	761a      	strb	r2, [r3, #24]
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000e100 	.word	0xe000e100
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <NVIC_EncodePriority>:
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b089      	sub	sp, #36	; 0x24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f1c3 0307 	rsb	r3, r3, #7
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	bf28      	it	cs
 8001d56:	2304      	movcs	r3, #4
 8001d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	2b06      	cmp	r3, #6
 8001d60:	d902      	bls.n	8001d68 <NVIC_EncodePriority+0x30>
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3b03      	subs	r3, #3
 8001d66:	e000      	b.n	8001d6a <NVIC_EncodePriority+0x32>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43da      	mvns	r2, r3
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8a:	43d9      	mvns	r1, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d90:	4313      	orrs	r3, r2
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3724      	adds	r7, #36	; 0x24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001db0:	d301      	bcc.n	8001db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001db2:	2301      	movs	r3, #1
 8001db4:	e00f      	b.n	8001dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db6:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <SysTick_Config+0x40>)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dbe:	210f      	movs	r1, #15
 8001dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dc4:	f7ff ff8e 	bl	8001ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <SysTick_Config+0x40>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dce:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <SysTick_Config+0x40>)
 8001dd0:	2207      	movs	r2, #7
 8001dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	e000e010 	.word	0xe000e010

08001de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff ff29 	bl	8001c44 <__NVIC_SetPriorityGrouping>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b086      	sub	sp, #24
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	4603      	mov	r3, r0
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	607a      	str	r2, [r7, #4]
 8001e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e0c:	f7ff ff3e 	bl	8001c8c <__NVIC_GetPriorityGrouping>
 8001e10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	68b9      	ldr	r1, [r7, #8]
 8001e16:	6978      	ldr	r0, [r7, #20]
 8001e18:	f7ff ff8e 	bl	8001d38 <NVIC_EncodePriority>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e22:	4611      	mov	r1, r2
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff ff5d 	bl	8001ce4 <__NVIC_SetPriority>
}
 8001e2a:	bf00      	nop
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ff31 	bl	8001ca8 <__NVIC_EnableIRQ>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff ffa2 	bl	8001da0 <SysTick_Config>
 8001e5c:	4603      	mov	r3, r0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e054      	b.n	8001f24 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	7f5b      	ldrb	r3, [r3, #29]
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d105      	bne.n	8001e90 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff fb28 	bl	80014e0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2202      	movs	r2, #2
 8001e94:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	791b      	ldrb	r3, [r3, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a22      	ldr	r2, [pc, #136]	; (8001f2c <HAL_CRC_Init+0xc4>)
 8001ea4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0218 	bic.w	r2, r2, #24
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	e00c      	b.n	8001ed2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6899      	ldr	r1, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f834 	bl	8001f30 <HAL_CRCEx_Polynomial_Set>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e028      	b.n	8001f24 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	795b      	ldrb	r3, [r3, #5]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d105      	bne.n	8001ee6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ee2:	611a      	str	r2, [r3, #16]
 8001ee4:	e004      	b.n	8001ef0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6912      	ldr	r2, [r2, #16]
 8001eee:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695a      	ldr	r2, [r3, #20]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	699a      	ldr	r2, [r3, #24]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	04c11db7 	.word	0x04c11db7

08001f30 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b087      	sub	sp, #28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001f40:	231f      	movs	r3, #31
 8001f42:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001f44:	bf00      	nop
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1e5a      	subs	r2, r3, #1
 8001f4a:	613a      	str	r2, [r7, #16]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d009      	beq.n	8001f64 <HAL_CRCEx_Polynomial_Set+0x34>
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	f003 031f 	and.w	r3, r3, #31
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f0      	beq.n	8001f46 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b18      	cmp	r3, #24
 8001f68:	d846      	bhi.n	8001ff8 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001f6a:	a201      	add	r2, pc, #4	; (adr r2, 8001f70 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f70:	08001fff 	.word	0x08001fff
 8001f74:	08001ff9 	.word	0x08001ff9
 8001f78:	08001ff9 	.word	0x08001ff9
 8001f7c:	08001ff9 	.word	0x08001ff9
 8001f80:	08001ff9 	.word	0x08001ff9
 8001f84:	08001ff9 	.word	0x08001ff9
 8001f88:	08001ff9 	.word	0x08001ff9
 8001f8c:	08001ff9 	.word	0x08001ff9
 8001f90:	08001fed 	.word	0x08001fed
 8001f94:	08001ff9 	.word	0x08001ff9
 8001f98:	08001ff9 	.word	0x08001ff9
 8001f9c:	08001ff9 	.word	0x08001ff9
 8001fa0:	08001ff9 	.word	0x08001ff9
 8001fa4:	08001ff9 	.word	0x08001ff9
 8001fa8:	08001ff9 	.word	0x08001ff9
 8001fac:	08001ff9 	.word	0x08001ff9
 8001fb0:	08001fe1 	.word	0x08001fe1
 8001fb4:	08001ff9 	.word	0x08001ff9
 8001fb8:	08001ff9 	.word	0x08001ff9
 8001fbc:	08001ff9 	.word	0x08001ff9
 8001fc0:	08001ff9 	.word	0x08001ff9
 8001fc4:	08001ff9 	.word	0x08001ff9
 8001fc8:	08001ff9 	.word	0x08001ff9
 8001fcc:	08001ff9 	.word	0x08001ff9
 8001fd0:	08001fd5 	.word	0x08001fd5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d913      	bls.n	8002002 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001fde:	e010      	b.n	8002002 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	2b07      	cmp	r3, #7
 8001fe4:	d90f      	bls.n	8002006 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001fea:	e00c      	b.n	8002006 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	2b0f      	cmp	r3, #15
 8001ff0:	d90b      	bls.n	800200a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001ff6:	e008      	b.n	800200a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	75fb      	strb	r3, [r7, #23]
      break;
 8001ffc:	e006      	b.n	800200c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001ffe:	bf00      	nop
 8002000:	e004      	b.n	800200c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002002:	bf00      	nop
 8002004:	e002      	b.n	800200c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002006:	bf00      	nop
 8002008:	e000      	b.n	800200c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800200a:	bf00      	nop
  }
  if (status == HAL_OK)
 800200c:	7dfb      	ldrb	r3, [r7, #23]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10d      	bne.n	800202e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f023 0118 	bic.w	r1, r3, #24
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	430a      	orrs	r2, r1
 800202c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800202e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002030:	4618      	mov	r0, r3
 8002032:	371c      	adds	r7, #28
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002048:	f7ff fdcc 	bl	8001be4 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e099      	b.n	800218c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2202      	movs	r2, #2
 800205c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0201 	bic.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002078:	e00f      	b.n	800209a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800207a:	f7ff fdb3 	bl	8001be4 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b05      	cmp	r3, #5
 8002086:	d908      	bls.n	800209a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2220      	movs	r2, #32
 800208c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2203      	movs	r2, #3
 8002092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e078      	b.n	800218c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1e8      	bne.n	800207a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	4b38      	ldr	r3, [pc, #224]	; (8002194 <HAL_DMA_Init+0x158>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d107      	bne.n	8002104 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fc:	4313      	orrs	r3, r2
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	4313      	orrs	r3, r2
 8002102:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f023 0307 	bic.w	r3, r3, #7
 800211a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	4313      	orrs	r3, r2
 8002124:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	2b04      	cmp	r3, #4
 800212c:	d117      	bne.n	800215e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	4313      	orrs	r3, r2
 8002136:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00e      	beq.n	800215e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f8bd 	bl	80022c0 <DMA_CheckFifoParam>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d008      	beq.n	800215e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2240      	movs	r2, #64	; 0x40
 8002150:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800215a:	2301      	movs	r3, #1
 800215c:	e016      	b.n	800218c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f874 	bl	8002254 <DMA_CalcBaseAndBitshift>
 800216c:	4603      	mov	r3, r0
 800216e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002174:	223f      	movs	r2, #63	; 0x3f
 8002176:	409a      	lsls	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	f010803f 	.word	0xf010803f

08002198 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e050      	b.n	800224c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d101      	bne.n	80021ba <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80021b6:	2302      	movs	r3, #2
 80021b8:	e048      	b.n	800224c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0201 	bic.w	r2, r2, #1
 80021c8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2200      	movs	r2, #0
 80021d8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2200      	movs	r2, #0
 80021e0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2200      	movs	r2, #0
 80021e8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2200      	movs	r2, #0
 80021f0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2221      	movs	r2, #33	; 0x21
 80021f8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f82a 	bl	8002254 <DMA_CalcBaseAndBitshift>
 8002200:	4603      	mov	r3, r0
 8002202:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002208:	223f      	movs	r2, #63	; 0x3f
 800220a:	409a      	lsls	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	b2db      	uxtb	r3, r3
 8002262:	3b10      	subs	r3, #16
 8002264:	4a13      	ldr	r2, [pc, #76]	; (80022b4 <DMA_CalcBaseAndBitshift+0x60>)
 8002266:	fba2 2303 	umull	r2, r3, r2, r3
 800226a:	091b      	lsrs	r3, r3, #4
 800226c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800226e:	4a12      	ldr	r2, [pc, #72]	; (80022b8 <DMA_CalcBaseAndBitshift+0x64>)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4413      	add	r3, r2
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	461a      	mov	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b03      	cmp	r3, #3
 8002280:	d908      	bls.n	8002294 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <DMA_CalcBaseAndBitshift+0x68>)
 800228a:	4013      	ands	r3, r2
 800228c:	1d1a      	adds	r2, r3, #4
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	659a      	str	r2, [r3, #88]	; 0x58
 8002292:	e006      	b.n	80022a2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	461a      	mov	r2, r3
 800229a:	4b08      	ldr	r3, [pc, #32]	; (80022bc <DMA_CalcBaseAndBitshift+0x68>)
 800229c:	4013      	ands	r3, r2
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	aaaaaaab 	.word	0xaaaaaaab
 80022b8:	0800bb4c 	.word	0x0800bb4c
 80022bc:	fffffc00 	.word	0xfffffc00

080022c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d11f      	bne.n	800231a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d856      	bhi.n	800238e <DMA_CheckFifoParam+0xce>
 80022e0:	a201      	add	r2, pc, #4	; (adr r2, 80022e8 <DMA_CheckFifoParam+0x28>)
 80022e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e6:	bf00      	nop
 80022e8:	080022f9 	.word	0x080022f9
 80022ec:	0800230b 	.word	0x0800230b
 80022f0:	080022f9 	.word	0x080022f9
 80022f4:	0800238f 	.word	0x0800238f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d046      	beq.n	8002392 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002308:	e043      	b.n	8002392 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002312:	d140      	bne.n	8002396 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002318:	e03d      	b.n	8002396 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002322:	d121      	bne.n	8002368 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b03      	cmp	r3, #3
 8002328:	d837      	bhi.n	800239a <DMA_CheckFifoParam+0xda>
 800232a:	a201      	add	r2, pc, #4	; (adr r2, 8002330 <DMA_CheckFifoParam+0x70>)
 800232c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002330:	08002341 	.word	0x08002341
 8002334:	08002347 	.word	0x08002347
 8002338:	08002341 	.word	0x08002341
 800233c:	08002359 	.word	0x08002359
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	73fb      	strb	r3, [r7, #15]
      break;
 8002344:	e030      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d025      	beq.n	800239e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002356:	e022      	b.n	800239e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002360:	d11f      	bne.n	80023a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002366:	e01c      	b.n	80023a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d903      	bls.n	8002376 <DMA_CheckFifoParam+0xb6>
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2b03      	cmp	r3, #3
 8002372:	d003      	beq.n	800237c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002374:	e018      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	73fb      	strb	r3, [r7, #15]
      break;
 800237a:	e015      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002380:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00e      	beq.n	80023a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
      break;
 800238c:	e00b      	b.n	80023a6 <DMA_CheckFifoParam+0xe6>
      break;
 800238e:	bf00      	nop
 8002390:	e00a      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002392:	bf00      	nop
 8002394:	e008      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002396:	bf00      	nop
 8002398:	e006      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      break;
 800239a:	bf00      	nop
 800239c:	e004      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      break;
 800239e:	bf00      	nop
 80023a0:	e002      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80023a2:	bf00      	nop
 80023a4:	e000      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      break;
 80023a6:	bf00      	nop
    }
  } 
  
  return status; 
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop

080023b8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e039      	b.n	800243e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d106      	bne.n	80023e4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff f89e 	bl	8001520 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002408:	f023 0107 	bic.w	r1, r3, #7
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800241e:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <HAL_DMA2D_Init+0x90>)
 8002420:	4013      	ands	r3, r2
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	68d1      	ldr	r1, [r2, #12]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	430b      	orrs	r3, r1
 800242c:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	ffffc000 	.word	0xffffc000

0800244c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af02      	add	r7, sp, #8
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002460:	2b01      	cmp	r3, #1
 8002462:	d101      	bne.n	8002468 <HAL_DMA2D_Start+0x1c>
 8002464:	2302      	movs	r3, #2
 8002466:	e018      	b.n	800249a <HAL_DMA2D_Start+0x4e>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2202      	movs	r2, #2
 8002474:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68b9      	ldr	r1, [r7, #8]
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 f988 	bl	8002798 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b086      	sub	sp, #24
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d056      	beq.n	800256c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80024be:	f7ff fb91 	bl	8001be4 <HAL_GetTick>
 80024c2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80024c4:	e04b      	b.n	800255e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d023      	beq.n	8002520 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f003 0320 	and.w	r3, r3, #32
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d005      	beq.n	80024ee <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e6:	f043 0202 	orr.w	r2, r3, #2
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fc:	f043 0201 	orr.w	r2, r3, #1
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2221      	movs	r2, #33	; 0x21
 800250a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2204      	movs	r2, #4
 8002510:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0a5      	b.n	800266c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002526:	d01a      	beq.n	800255e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002528:	f7ff fb5c 	bl	8001be4 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	429a      	cmp	r2, r3
 8002536:	d302      	bcc.n	800253e <HAL_DMA2D_PollForTransfer+0x9c>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10f      	bne.n	800255e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002542:	f043 0220 	orr.w	r2, r3, #32
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2203      	movs	r2, #3
 800254e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e086      	b.n	800266c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0ac      	beq.n	80024c6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	f003 0320 	and.w	r3, r3, #32
 8002576:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	f003 0320 	and.w	r3, r3, #32
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d061      	beq.n	8002652 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800258e:	f7ff fb29 	bl	8001be4 <HAL_GetTick>
 8002592:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002594:	e056      	b.n	8002644 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d02e      	beq.n	8002606 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d005      	beq.n	80025be <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b6:	f043 0204 	orr.w	r2, r3, #4
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f003 0320 	and.w	r3, r3, #32
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025cc:	f043 0202 	orr.w	r2, r3, #2
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e2:	f043 0201 	orr.w	r2, r3, #1
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2229      	movs	r2, #41	; 0x29
 80025f0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2204      	movs	r2, #4
 80025f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e032      	b.n	800266c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800260c:	d01a      	beq.n	8002644 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800260e:	f7ff fae9 	bl	8001be4 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d302      	bcc.n	8002624 <HAL_DMA2D_PollForTransfer+0x182>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10f      	bne.n	8002644 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002628:	f043 0220 	orr.w	r2, r3, #32
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2203      	movs	r2, #3
 8002634:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e013      	b.n	800266c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 0310 	and.w	r3, r3, #16
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0a1      	beq.n	8002596 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2212      	movs	r2, #18
 8002658:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002674:	b480      	push	{r7}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <HAL_DMA2D_ConfigLayer+0x20>
 8002690:	2302      	movs	r3, #2
 8002692:	e079      	b.n	8002788 <HAL_DMA2D_ConfigLayer+0x114>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	3318      	adds	r3, #24
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	4413      	add	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	041b      	lsls	r3, r3, #16
 80026ba:	4313      	orrs	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80026be:	4b35      	ldr	r3, [pc, #212]	; (8002794 <HAL_DMA2D_ConfigLayer+0x120>)
 80026c0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b0a      	cmp	r3, #10
 80026c8:	d003      	beq.n	80026d2 <HAL_DMA2D_ConfigLayer+0x5e>
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b09      	cmp	r3, #9
 80026d0:	d107      	bne.n	80026e2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	4313      	orrs	r3, r2
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	e005      	b.n	80026ee <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	061b      	lsls	r3, r3, #24
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d120      	bne.n	8002736 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	ea02 0103 	and.w	r1, r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	430a      	orrs	r2, r1
 800270a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b0a      	cmp	r3, #10
 800271c:	d003      	beq.n	8002726 <HAL_DMA2D_ConfigLayer+0xb2>
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b09      	cmp	r3, #9
 8002724:	d127      	bne.n	8002776 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002732:	629a      	str	r2, [r3, #40]	; 0x28
 8002734:	e01f      	b.n	8002776 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	69da      	ldr	r2, [r3, #28]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	43db      	mvns	r3, r3
 8002740:	ea02 0103 	and.w	r1, r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	430a      	orrs	r2, r1
 800274c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	6812      	ldr	r2, [r2, #0]
 8002756:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b0a      	cmp	r3, #10
 800275e:	d003      	beq.n	8002768 <HAL_DMA2D_ConfigLayer+0xf4>
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b09      	cmp	r3, #9
 8002766:	d106      	bne.n	8002776 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002774:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	371c      	adds	r7, #28
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	ff03000f 	.word	0xff03000f

08002798 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002798:	b480      	push	{r7}
 800279a:	b08b      	sub	sp, #44	; 0x2c
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
 80027a4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ac:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	041a      	lsls	r2, r3, #16
 80027b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b6:	431a      	orrs	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80027d0:	d174      	bne.n	80028bc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80027d8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80027e0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80027e8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d108      	bne.n	800280a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	431a      	orrs	r2, r3
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	4313      	orrs	r3, r2
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	4313      	orrs	r3, r2
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
 8002808:	e053      	b.n	80028b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d106      	bne.n	8002820 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	4313      	orrs	r3, r2
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	4313      	orrs	r3, r2
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
 800281e:	e048      	b.n	80028b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b02      	cmp	r3, #2
 8002826:	d111      	bne.n	800284c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	0cdb      	lsrs	r3, r3, #19
 800282c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	0a9b      	lsrs	r3, r3, #10
 8002832:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	08db      	lsrs	r3, r3, #3
 8002838:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	015a      	lsls	r2, r3, #5
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	02db      	lsls	r3, r3, #11
 8002842:	4313      	orrs	r3, r2
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	4313      	orrs	r3, r2
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
 800284a:	e032      	b.n	80028b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	2b03      	cmp	r3, #3
 8002852:	d117      	bne.n	8002884 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	0fdb      	lsrs	r3, r3, #31
 8002858:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	0cdb      	lsrs	r3, r3, #19
 800285e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	0adb      	lsrs	r3, r3, #11
 8002864:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	08db      	lsrs	r3, r3, #3
 800286a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	015a      	lsls	r2, r3, #5
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	029b      	lsls	r3, r3, #10
 8002874:	431a      	orrs	r2, r3
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	03db      	lsls	r3, r3, #15
 800287a:	4313      	orrs	r3, r2
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	4313      	orrs	r3, r2
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
 8002882:	e016      	b.n	80028b2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002884:	6a3b      	ldr	r3, [r7, #32]
 8002886:	0f1b      	lsrs	r3, r3, #28
 8002888:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	0d1b      	lsrs	r3, r3, #20
 800288e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	0b1b      	lsrs	r3, r3, #12
 8002894:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	011a      	lsls	r2, r3, #4
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	021b      	lsls	r3, r3, #8
 80028a4:	431a      	orrs	r2, r3
 80028a6:	6a3b      	ldr	r3, [r7, #32]
 80028a8:	031b      	lsls	r3, r3, #12
 80028aa:	4313      	orrs	r3, r2
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80028ba:	e003      	b.n	80028c4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	60da      	str	r2, [r3, #12]
}
 80028c4:	bf00      	nop
 80028c6:	372c      	adds	r7, #44	; 0x2c
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b089      	sub	sp, #36	; 0x24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80028da:	2300      	movs	r3, #0
 80028dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80028e2:	2300      	movs	r3, #0
 80028e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80028ea:	2300      	movs	r3, #0
 80028ec:	61fb      	str	r3, [r7, #28]
 80028ee:	e175      	b.n	8002bdc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80028f0:	2201      	movs	r2, #1
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	4013      	ands	r3, r2
 8002902:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	429a      	cmp	r2, r3
 800290a:	f040 8164 	bne.w	8002bd6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	2b01      	cmp	r3, #1
 8002918:	d005      	beq.n	8002926 <HAL_GPIO_Init+0x56>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d130      	bne.n	8002988 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	2203      	movs	r2, #3
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4013      	ands	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800295c:	2201      	movs	r2, #1
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	f003 0201 	and.w	r2, r3, #1
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	2b03      	cmp	r3, #3
 8002992:	d017      	beq.n	80029c4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	2203      	movs	r2, #3
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4013      	ands	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 0303 	and.w	r3, r3, #3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d123      	bne.n	8002a18 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	08da      	lsrs	r2, r3, #3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3208      	adds	r2, #8
 80029d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	220f      	movs	r2, #15
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	08da      	lsrs	r2, r3, #3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3208      	adds	r2, #8
 8002a12:	69b9      	ldr	r1, [r7, #24]
 8002a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	2203      	movs	r2, #3
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 0203 	and.w	r2, r3, #3
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 80be 	beq.w	8002bd6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a5a:	4b66      	ldr	r3, [pc, #408]	; (8002bf4 <HAL_GPIO_Init+0x324>)
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5e:	4a65      	ldr	r2, [pc, #404]	; (8002bf4 <HAL_GPIO_Init+0x324>)
 8002a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a64:	6453      	str	r3, [r2, #68]	; 0x44
 8002a66:	4b63      	ldr	r3, [pc, #396]	; (8002bf4 <HAL_GPIO_Init+0x324>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a72:	4a61      	ldr	r2, [pc, #388]	; (8002bf8 <HAL_GPIO_Init+0x328>)
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	089b      	lsrs	r3, r3, #2
 8002a78:	3302      	adds	r3, #2
 8002a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	220f      	movs	r2, #15
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4013      	ands	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a58      	ldr	r2, [pc, #352]	; (8002bfc <HAL_GPIO_Init+0x32c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d037      	beq.n	8002b0e <HAL_GPIO_Init+0x23e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a57      	ldr	r2, [pc, #348]	; (8002c00 <HAL_GPIO_Init+0x330>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d031      	beq.n	8002b0a <HAL_GPIO_Init+0x23a>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a56      	ldr	r2, [pc, #344]	; (8002c04 <HAL_GPIO_Init+0x334>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d02b      	beq.n	8002b06 <HAL_GPIO_Init+0x236>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a55      	ldr	r2, [pc, #340]	; (8002c08 <HAL_GPIO_Init+0x338>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d025      	beq.n	8002b02 <HAL_GPIO_Init+0x232>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a54      	ldr	r2, [pc, #336]	; (8002c0c <HAL_GPIO_Init+0x33c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d01f      	beq.n	8002afe <HAL_GPIO_Init+0x22e>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a53      	ldr	r2, [pc, #332]	; (8002c10 <HAL_GPIO_Init+0x340>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d019      	beq.n	8002afa <HAL_GPIO_Init+0x22a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a52      	ldr	r2, [pc, #328]	; (8002c14 <HAL_GPIO_Init+0x344>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d013      	beq.n	8002af6 <HAL_GPIO_Init+0x226>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a51      	ldr	r2, [pc, #324]	; (8002c18 <HAL_GPIO_Init+0x348>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d00d      	beq.n	8002af2 <HAL_GPIO_Init+0x222>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a50      	ldr	r2, [pc, #320]	; (8002c1c <HAL_GPIO_Init+0x34c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d007      	beq.n	8002aee <HAL_GPIO_Init+0x21e>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a4f      	ldr	r2, [pc, #316]	; (8002c20 <HAL_GPIO_Init+0x350>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d101      	bne.n	8002aea <HAL_GPIO_Init+0x21a>
 8002ae6:	2309      	movs	r3, #9
 8002ae8:	e012      	b.n	8002b10 <HAL_GPIO_Init+0x240>
 8002aea:	230a      	movs	r3, #10
 8002aec:	e010      	b.n	8002b10 <HAL_GPIO_Init+0x240>
 8002aee:	2308      	movs	r3, #8
 8002af0:	e00e      	b.n	8002b10 <HAL_GPIO_Init+0x240>
 8002af2:	2307      	movs	r3, #7
 8002af4:	e00c      	b.n	8002b10 <HAL_GPIO_Init+0x240>
 8002af6:	2306      	movs	r3, #6
 8002af8:	e00a      	b.n	8002b10 <HAL_GPIO_Init+0x240>
 8002afa:	2305      	movs	r3, #5
 8002afc:	e008      	b.n	8002b10 <HAL_GPIO_Init+0x240>
 8002afe:	2304      	movs	r3, #4
 8002b00:	e006      	b.n	8002b10 <HAL_GPIO_Init+0x240>
 8002b02:	2303      	movs	r3, #3
 8002b04:	e004      	b.n	8002b10 <HAL_GPIO_Init+0x240>
 8002b06:	2302      	movs	r3, #2
 8002b08:	e002      	b.n	8002b10 <HAL_GPIO_Init+0x240>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <HAL_GPIO_Init+0x240>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	69fa      	ldr	r2, [r7, #28]
 8002b12:	f002 0203 	and.w	r2, r2, #3
 8002b16:	0092      	lsls	r2, r2, #2
 8002b18:	4093      	lsls	r3, r2
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b20:	4935      	ldr	r1, [pc, #212]	; (8002bf8 <HAL_GPIO_Init+0x328>)
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	089b      	lsrs	r3, r3, #2
 8002b26:	3302      	adds	r3, #2
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b2e:	4b3d      	ldr	r3, [pc, #244]	; (8002c24 <HAL_GPIO_Init+0x354>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	43db      	mvns	r3, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b52:	4a34      	ldr	r2, [pc, #208]	; (8002c24 <HAL_GPIO_Init+0x354>)
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b58:	4b32      	ldr	r3, [pc, #200]	; (8002c24 <HAL_GPIO_Init+0x354>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	43db      	mvns	r3, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4013      	ands	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b7c:	4a29      	ldr	r2, [pc, #164]	; (8002c24 <HAL_GPIO_Init+0x354>)
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b82:	4b28      	ldr	r3, [pc, #160]	; (8002c24 <HAL_GPIO_Init+0x354>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ba6:	4a1f      	ldr	r2, [pc, #124]	; (8002c24 <HAL_GPIO_Init+0x354>)
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bac:	4b1d      	ldr	r3, [pc, #116]	; (8002c24 <HAL_GPIO_Init+0x354>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bd0:	4a14      	ldr	r2, [pc, #80]	; (8002c24 <HAL_GPIO_Init+0x354>)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	61fb      	str	r3, [r7, #28]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	2b0f      	cmp	r3, #15
 8002be0:	f67f ae86 	bls.w	80028f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002be4:	bf00      	nop
 8002be6:	bf00      	nop
 8002be8:	3724      	adds	r7, #36	; 0x24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40013800 	.word	0x40013800
 8002bfc:	40020000 	.word	0x40020000
 8002c00:	40020400 	.word	0x40020400
 8002c04:	40020800 	.word	0x40020800
 8002c08:	40020c00 	.word	0x40020c00
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	40021400 	.word	0x40021400
 8002c14:	40021800 	.word	0x40021800
 8002c18:	40021c00 	.word	0x40021c00
 8002c1c:	40022000 	.word	0x40022000
 8002c20:	40022400 	.word	0x40022400
 8002c24:	40013c00 	.word	0x40013c00

08002c28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	807b      	strh	r3, [r7, #2]
 8002c34:	4613      	mov	r3, r2
 8002c36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c38:	787b      	ldrb	r3, [r7, #1]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c3e:	887a      	ldrh	r2, [r7, #2]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002c44:	e003      	b.n	8002c4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c46:	887b      	ldrh	r3, [r7, #2]
 8002c48:	041a      	lsls	r2, r3, #16
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	619a      	str	r2, [r3, #24]
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
	...

08002c5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e07f      	b.n	8002d6e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d106      	bne.n	8002c88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f8a9 	bl	8002dda <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2224      	movs	r2, #36	; 0x24
 8002c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0201 	bic.w	r2, r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cbc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d107      	bne.n	8002cd6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	e006      	b.n	8002ce4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ce2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d104      	bne.n	8002cf6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cf4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6859      	ldr	r1, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	4b1d      	ldr	r3, [pc, #116]	; (8002d78 <HAL_I2C_Init+0x11c>)
 8002d02:	430b      	orrs	r3, r1
 8002d04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691a      	ldr	r2, [r3, #16]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	69d9      	ldr	r1, [r3, #28]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1a      	ldr	r2, [r3, #32]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0201 	orr.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	02008000 	.word	0x02008000

08002d7c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e021      	b.n	8002dd2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2224      	movs	r2, #36	; 0x24
 8002d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0201 	bic.w	r2, r2, #1
 8002da4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f821 	bl	8002dee <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
	...

08002e04 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af02      	add	r7, sp, #8
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	4608      	mov	r0, r1
 8002e0e:	4611      	mov	r1, r2
 8002e10:	461a      	mov	r2, r3
 8002e12:	4603      	mov	r3, r0
 8002e14:	817b      	strh	r3, [r7, #10]
 8002e16:	460b      	mov	r3, r1
 8002e18:	813b      	strh	r3, [r7, #8]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b20      	cmp	r3, #32
 8002e28:	f040 80f9 	bne.w	800301e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <HAL_I2C_Mem_Write+0x34>
 8002e32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d105      	bne.n	8002e44 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e3e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0ed      	b.n	8003020 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d101      	bne.n	8002e52 <HAL_I2C_Mem_Write+0x4e>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e0e6      	b.n	8003020 <HAL_I2C_Mem_Write+0x21c>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e5a:	f7fe fec3 	bl	8001be4 <HAL_GetTick>
 8002e5e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	2319      	movs	r3, #25
 8002e66:	2201      	movs	r2, #1
 8002e68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 fad1 	bl	8003414 <I2C_WaitOnFlagUntilTimeout>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0d1      	b.n	8003020 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2221      	movs	r2, #33	; 0x21
 8002e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2240      	movs	r2, #64	; 0x40
 8002e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6a3a      	ldr	r2, [r7, #32]
 8002e96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ea4:	88f8      	ldrh	r0, [r7, #6]
 8002ea6:	893a      	ldrh	r2, [r7, #8]
 8002ea8:	8979      	ldrh	r1, [r7, #10]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	9301      	str	r3, [sp, #4]
 8002eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 f9e1 	bl	800327c <I2C_RequestMemoryWrite>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d005      	beq.n	8002ecc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e0a9      	b.n	8003020 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2bff      	cmp	r3, #255	; 0xff
 8002ed4:	d90e      	bls.n	8002ef4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	22ff      	movs	r2, #255	; 0xff
 8002eda:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	8979      	ldrh	r1, [r7, #10]
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 fc39 	bl	8003764 <I2C_TransferConfig>
 8002ef2:	e00f      	b.n	8002f14 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	8979      	ldrh	r1, [r7, #10]
 8002f06:	2300      	movs	r3, #0
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 fc28 	bl	8003764 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 fabb 	bl	8003494 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e07b      	b.n	8003020 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	781a      	ldrb	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d034      	beq.n	8002fcc <HAL_I2C_Mem_Write+0x1c8>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d130      	bne.n	8002fcc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f70:	2200      	movs	r2, #0
 8002f72:	2180      	movs	r1, #128	; 0x80
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 fa4d 	bl	8003414 <I2C_WaitOnFlagUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e04d      	b.n	8003020 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	2bff      	cmp	r3, #255	; 0xff
 8002f8c:	d90e      	bls.n	8002fac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	22ff      	movs	r2, #255	; 0xff
 8002f92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	8979      	ldrh	r1, [r7, #10]
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 fbdd 	bl	8003764 <I2C_TransferConfig>
 8002faa:	e00f      	b.n	8002fcc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	8979      	ldrh	r1, [r7, #10]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 fbcc 	bl	8003764 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d19e      	bne.n	8002f14 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 fa9a 	bl	8003514 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e01a      	b.n	8003020 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6859      	ldr	r1, [r3, #4]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <HAL_I2C_Mem_Write+0x224>)
 8002ffe:	400b      	ands	r3, r1
 8003000:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2220      	movs	r2, #32
 8003006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	e000      	b.n	8003020 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800301e:	2302      	movs	r3, #2
  }
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	fe00e800 	.word	0xfe00e800

0800302c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af02      	add	r7, sp, #8
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	4608      	mov	r0, r1
 8003036:	4611      	mov	r1, r2
 8003038:	461a      	mov	r2, r3
 800303a:	4603      	mov	r3, r0
 800303c:	817b      	strh	r3, [r7, #10]
 800303e:	460b      	mov	r3, r1
 8003040:	813b      	strh	r3, [r7, #8]
 8003042:	4613      	mov	r3, r2
 8003044:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b20      	cmp	r3, #32
 8003050:	f040 80fd 	bne.w	800324e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <HAL_I2C_Mem_Read+0x34>
 800305a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800305c:	2b00      	cmp	r3, #0
 800305e:	d105      	bne.n	800306c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003066:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e0f1      	b.n	8003250 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003072:	2b01      	cmp	r3, #1
 8003074:	d101      	bne.n	800307a <HAL_I2C_Mem_Read+0x4e>
 8003076:	2302      	movs	r3, #2
 8003078:	e0ea      	b.n	8003250 <HAL_I2C_Mem_Read+0x224>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003082:	f7fe fdaf 	bl	8001be4 <HAL_GetTick>
 8003086:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	2319      	movs	r3, #25
 800308e:	2201      	movs	r2, #1
 8003090:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 f9bd 	bl	8003414 <I2C_WaitOnFlagUntilTimeout>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e0d5      	b.n	8003250 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2222      	movs	r2, #34	; 0x22
 80030a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2240      	movs	r2, #64	; 0x40
 80030b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a3a      	ldr	r2, [r7, #32]
 80030be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030cc:	88f8      	ldrh	r0, [r7, #6]
 80030ce:	893a      	ldrh	r2, [r7, #8]
 80030d0:	8979      	ldrh	r1, [r7, #10]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	9301      	str	r3, [sp, #4]
 80030d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	4603      	mov	r3, r0
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 f921 	bl	8003324 <I2C_RequestMemoryRead>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0ad      	b.n	8003250 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2bff      	cmp	r3, #255	; 0xff
 80030fc:	d90e      	bls.n	800311c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	22ff      	movs	r2, #255	; 0xff
 8003102:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003108:	b2da      	uxtb	r2, r3
 800310a:	8979      	ldrh	r1, [r7, #10]
 800310c:	4b52      	ldr	r3, [pc, #328]	; (8003258 <HAL_I2C_Mem_Read+0x22c>)
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 fb25 	bl	8003764 <I2C_TransferConfig>
 800311a:	e00f      	b.n	800313c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312a:	b2da      	uxtb	r2, r3
 800312c:	8979      	ldrh	r1, [r7, #10]
 800312e:	4b4a      	ldr	r3, [pc, #296]	; (8003258 <HAL_I2C_Mem_Read+0x22c>)
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 fb14 	bl	8003764 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003142:	2200      	movs	r2, #0
 8003144:	2104      	movs	r1, #4
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f964 	bl	8003414 <I2C_WaitOnFlagUntilTimeout>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e07c      	b.n	8003250 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d034      	beq.n	80031fc <HAL_I2C_Mem_Read+0x1d0>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003196:	2b00      	cmp	r3, #0
 8003198:	d130      	bne.n	80031fc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a0:	2200      	movs	r2, #0
 80031a2:	2180      	movs	r1, #128	; 0x80
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 f935 	bl	8003414 <I2C_WaitOnFlagUntilTimeout>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e04d      	b.n	8003250 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2bff      	cmp	r3, #255	; 0xff
 80031bc:	d90e      	bls.n	80031dc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	22ff      	movs	r2, #255	; 0xff
 80031c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	8979      	ldrh	r1, [r7, #10]
 80031cc:	2300      	movs	r3, #0
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 fac5 	bl	8003764 <I2C_TransferConfig>
 80031da:	e00f      	b.n	80031fc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	8979      	ldrh	r1, [r7, #10]
 80031ee:	2300      	movs	r3, #0
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 fab4 	bl	8003764 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d19a      	bne.n	800313c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 f982 	bl	8003514 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e01a      	b.n	8003250 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2220      	movs	r2, #32
 8003220:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6859      	ldr	r1, [r3, #4]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	4b0b      	ldr	r3, [pc, #44]	; (800325c <HAL_I2C_Mem_Read+0x230>)
 800322e:	400b      	ands	r3, r1
 8003230:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2220      	movs	r2, #32
 8003236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	e000      	b.n	8003250 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800324e:	2302      	movs	r3, #2
  }
}
 8003250:	4618      	mov	r0, r3
 8003252:	3718      	adds	r7, #24
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	80002400 	.word	0x80002400
 800325c:	fe00e800 	.word	0xfe00e800

08003260 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800326e:	b2db      	uxtb	r3, r3
}
 8003270:	4618      	mov	r0, r3
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af02      	add	r7, sp, #8
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	4608      	mov	r0, r1
 8003286:	4611      	mov	r1, r2
 8003288:	461a      	mov	r2, r3
 800328a:	4603      	mov	r3, r0
 800328c:	817b      	strh	r3, [r7, #10]
 800328e:	460b      	mov	r3, r1
 8003290:	813b      	strh	r3, [r7, #8]
 8003292:	4613      	mov	r3, r2
 8003294:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003296:	88fb      	ldrh	r3, [r7, #6]
 8003298:	b2da      	uxtb	r2, r3
 800329a:	8979      	ldrh	r1, [r7, #10]
 800329c:	4b20      	ldr	r3, [pc, #128]	; (8003320 <I2C_RequestMemoryWrite+0xa4>)
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 fa5d 	bl	8003764 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032aa:	69fa      	ldr	r2, [r7, #28]
 80032ac:	69b9      	ldr	r1, [r7, #24]
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 f8f0 	bl	8003494 <I2C_WaitOnTXISFlagUntilTimeout>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e02c      	b.n	8003318 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032be:	88fb      	ldrh	r3, [r7, #6]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d105      	bne.n	80032d0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032c4:	893b      	ldrh	r3, [r7, #8]
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	629a      	str	r2, [r3, #40]	; 0x28
 80032ce:	e015      	b.n	80032fc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80032d0:	893b      	ldrh	r3, [r7, #8]
 80032d2:	0a1b      	lsrs	r3, r3, #8
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032de:	69fa      	ldr	r2, [r7, #28]
 80032e0:	69b9      	ldr	r1, [r7, #24]
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 f8d6 	bl	8003494 <I2C_WaitOnTXISFlagUntilTimeout>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e012      	b.n	8003318 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032f2:	893b      	ldrh	r3, [r7, #8]
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	2200      	movs	r2, #0
 8003304:	2180      	movs	r1, #128	; 0x80
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 f884 	bl	8003414 <I2C_WaitOnFlagUntilTimeout>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	80002000 	.word	0x80002000

08003324 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af02      	add	r7, sp, #8
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	4608      	mov	r0, r1
 800332e:	4611      	mov	r1, r2
 8003330:	461a      	mov	r2, r3
 8003332:	4603      	mov	r3, r0
 8003334:	817b      	strh	r3, [r7, #10]
 8003336:	460b      	mov	r3, r1
 8003338:	813b      	strh	r3, [r7, #8]
 800333a:	4613      	mov	r3, r2
 800333c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800333e:	88fb      	ldrh	r3, [r7, #6]
 8003340:	b2da      	uxtb	r2, r3
 8003342:	8979      	ldrh	r1, [r7, #10]
 8003344:	4b20      	ldr	r3, [pc, #128]	; (80033c8 <I2C_RequestMemoryRead+0xa4>)
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	2300      	movs	r3, #0
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 fa0a 	bl	8003764 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003350:	69fa      	ldr	r2, [r7, #28]
 8003352:	69b9      	ldr	r1, [r7, #24]
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 f89d 	bl	8003494 <I2C_WaitOnTXISFlagUntilTimeout>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e02c      	b.n	80033be <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003364:	88fb      	ldrh	r3, [r7, #6]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d105      	bne.n	8003376 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800336a:	893b      	ldrh	r3, [r7, #8]
 800336c:	b2da      	uxtb	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	629a      	str	r2, [r3, #40]	; 0x28
 8003374:	e015      	b.n	80033a2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003376:	893b      	ldrh	r3, [r7, #8]
 8003378:	0a1b      	lsrs	r3, r3, #8
 800337a:	b29b      	uxth	r3, r3
 800337c:	b2da      	uxtb	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003384:	69fa      	ldr	r2, [r7, #28]
 8003386:	69b9      	ldr	r1, [r7, #24]
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 f883 	bl	8003494 <I2C_WaitOnTXISFlagUntilTimeout>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e012      	b.n	80033be <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003398:	893b      	ldrh	r3, [r7, #8]
 800339a:	b2da      	uxtb	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	2200      	movs	r2, #0
 80033aa:	2140      	movs	r1, #64	; 0x40
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 f831 	bl	8003414 <I2C_WaitOnFlagUntilTimeout>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	80002000 	.word	0x80002000

080033cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d103      	bne.n	80033ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2200      	movs	r2, #0
 80033e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d007      	beq.n	8003408 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699a      	ldr	r2, [r3, #24]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0201 	orr.w	r2, r2, #1
 8003406:	619a      	str	r2, [r3, #24]
  }
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	4613      	mov	r3, r2
 8003422:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003424:	e022      	b.n	800346c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800342c:	d01e      	beq.n	800346c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342e:	f7fe fbd9 	bl	8001be4 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d302      	bcc.n	8003444 <I2C_WaitOnFlagUntilTimeout+0x30>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d113      	bne.n	800346c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003448:	f043 0220 	orr.w	r2, r3, #32
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e00f      	b.n	800348c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699a      	ldr	r2, [r3, #24]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	4013      	ands	r3, r2
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	429a      	cmp	r2, r3
 800347a:	bf0c      	ite	eq
 800347c:	2301      	moveq	r3, #1
 800347e:	2300      	movne	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	461a      	mov	r2, r3
 8003484:	79fb      	ldrb	r3, [r7, #7]
 8003486:	429a      	cmp	r2, r3
 8003488:	d0cd      	beq.n	8003426 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034a0:	e02c      	b.n	80034fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	68b9      	ldr	r1, [r7, #8]
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 f870 	bl	800358c <I2C_IsErrorOccurred>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e02a      	b.n	800350c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034bc:	d01e      	beq.n	80034fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034be:	f7fe fb91 	bl	8001be4 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d302      	bcc.n	80034d4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d113      	bne.n	80034fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d8:	f043 0220 	orr.w	r2, r3, #32
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e007      	b.n	800350c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b02      	cmp	r3, #2
 8003508:	d1cb      	bne.n	80034a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003520:	e028      	b.n	8003574 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	68b9      	ldr	r1, [r7, #8]
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 f830 	bl	800358c <I2C_IsErrorOccurred>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e026      	b.n	8003584 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003536:	f7fe fb55 	bl	8001be4 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	429a      	cmp	r2, r3
 8003544:	d302      	bcc.n	800354c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d113      	bne.n	8003574 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003550:	f043 0220 	orr.w	r2, r3, #32
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e007      	b.n	8003584 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	f003 0320 	and.w	r3, r3, #32
 800357e:	2b20      	cmp	r3, #32
 8003580:	d1cf      	bne.n	8003522 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08a      	sub	sp, #40	; 0x28
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003598:	2300      	movs	r3, #0
 800359a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80035a6:	2300      	movs	r3, #0
 80035a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	f003 0310 	and.w	r3, r3, #16
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d075      	beq.n	80036a4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2210      	movs	r2, #16
 80035be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035c0:	e056      	b.n	8003670 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035c8:	d052      	beq.n	8003670 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035ca:	f7fe fb0b 	bl	8001be4 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d302      	bcc.n	80035e0 <I2C_IsErrorOccurred+0x54>
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d147      	bne.n	8003670 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003602:	d12e      	bne.n	8003662 <I2C_IsErrorOccurred+0xd6>
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800360a:	d02a      	beq.n	8003662 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800360c:	7cfb      	ldrb	r3, [r7, #19]
 800360e:	2b20      	cmp	r3, #32
 8003610:	d027      	beq.n	8003662 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003620:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003622:	f7fe fadf 	bl	8001be4 <HAL_GetTick>
 8003626:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003628:	e01b      	b.n	8003662 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800362a:	f7fe fadb 	bl	8001be4 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b19      	cmp	r3, #25
 8003636:	d914      	bls.n	8003662 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363c:	f043 0220 	orr.w	r2, r3, #32
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	f003 0320 	and.w	r3, r3, #32
 800366c:	2b20      	cmp	r3, #32
 800366e:	d1dc      	bne.n	800362a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b20      	cmp	r3, #32
 800367c:	d003      	beq.n	8003686 <I2C_IsErrorOccurred+0xfa>
 800367e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003682:	2b00      	cmp	r3, #0
 8003684:	d09d      	beq.n	80035c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003686:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800368a:	2b00      	cmp	r3, #0
 800368c:	d103      	bne.n	8003696 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2220      	movs	r2, #32
 8003694:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	f043 0304 	orr.w	r3, r3, #4
 800369c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00b      	beq.n	80036ce <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00b      	beq.n	80036f0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	f043 0308 	orr.w	r3, r3, #8
 80036de:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00b      	beq.n	8003712 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	f043 0302 	orr.w	r3, r3, #2
 8003700:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800370a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003712:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003716:	2b00      	cmp	r3, #0
 8003718:	d01c      	beq.n	8003754 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f7ff fe56 	bl	80033cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6859      	ldr	r1, [r3, #4]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	4b0d      	ldr	r3, [pc, #52]	; (8003760 <I2C_IsErrorOccurred+0x1d4>)
 800372c:	400b      	ands	r3, r1
 800372e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	431a      	orrs	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2220      	movs	r2, #32
 8003740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003754:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003758:	4618      	mov	r0, r3
 800375a:	3728      	adds	r7, #40	; 0x28
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	fe00e800 	.word	0xfe00e800

08003764 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	607b      	str	r3, [r7, #4]
 800376e:	460b      	mov	r3, r1
 8003770:	817b      	strh	r3, [r7, #10]
 8003772:	4613      	mov	r3, r2
 8003774:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003776:	897b      	ldrh	r3, [r7, #10]
 8003778:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800377c:	7a7b      	ldrb	r3, [r7, #9]
 800377e:	041b      	lsls	r3, r3, #16
 8003780:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003784:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	4313      	orrs	r3, r2
 800378e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003792:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	0d5b      	lsrs	r3, r3, #21
 800379e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80037a2:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <I2C_TransferConfig+0x60>)
 80037a4:	430b      	orrs	r3, r1
 80037a6:	43db      	mvns	r3, r3
 80037a8:	ea02 0103 	and.w	r1, r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80037b6:	bf00      	nop
 80037b8:	371c      	adds	r7, #28
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	03ff63ff 	.word	0x03ff63ff

080037c8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a04      	ldr	r2, [pc, #16]	; (80037e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d6:	6013      	str	r3, [r2, #0]
}
 80037d8:	bf00      	nop
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40007000 	.word	0x40007000

080037e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80037ee:	2300      	movs	r3, #0
 80037f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80037f2:	4b23      	ldr	r3, [pc, #140]	; (8003880 <HAL_PWREx_EnableOverDrive+0x98>)
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	4a22      	ldr	r2, [pc, #136]	; (8003880 <HAL_PWREx_EnableOverDrive+0x98>)
 80037f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037fc:	6413      	str	r3, [r2, #64]	; 0x40
 80037fe:	4b20      	ldr	r3, [pc, #128]	; (8003880 <HAL_PWREx_EnableOverDrive+0x98>)
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003806:	603b      	str	r3, [r7, #0]
 8003808:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800380a:	4b1e      	ldr	r3, [pc, #120]	; (8003884 <HAL_PWREx_EnableOverDrive+0x9c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a1d      	ldr	r2, [pc, #116]	; (8003884 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003814:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003816:	f7fe f9e5 	bl	8001be4 <HAL_GetTick>
 800381a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800381c:	e009      	b.n	8003832 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800381e:	f7fe f9e1 	bl	8001be4 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800382c:	d901      	bls.n	8003832 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e022      	b.n	8003878 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003832:	4b14      	ldr	r3, [pc, #80]	; (8003884 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800383a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800383e:	d1ee      	bne.n	800381e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003840:	4b10      	ldr	r3, [pc, #64]	; (8003884 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a0f      	ldr	r2, [pc, #60]	; (8003884 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800384a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800384c:	f7fe f9ca 	bl	8001be4 <HAL_GetTick>
 8003850:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003852:	e009      	b.n	8003868 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003854:	f7fe f9c6 	bl	8001be4 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003862:	d901      	bls.n	8003868 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e007      	b.n	8003878 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003868:	4b06      	ldr	r3, [pc, #24]	; (8003884 <HAL_PWREx_EnableOverDrive+0x9c>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003870:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003874:	d1ee      	bne.n	8003854 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40023800 	.word	0x40023800
 8003884:	40007000 	.word	0x40007000

08003888 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003890:	2300      	movs	r3, #0
 8003892:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e291      	b.n	8003dc2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 8087 	beq.w	80039ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038ac:	4b96      	ldr	r3, [pc, #600]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f003 030c 	and.w	r3, r3, #12
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d00c      	beq.n	80038d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038b8:	4b93      	ldr	r3, [pc, #588]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 030c 	and.w	r3, r3, #12
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d112      	bne.n	80038ea <HAL_RCC_OscConfig+0x62>
 80038c4:	4b90      	ldr	r3, [pc, #576]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038d0:	d10b      	bne.n	80038ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d2:	4b8d      	ldr	r3, [pc, #564]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d06c      	beq.n	80039b8 <HAL_RCC_OscConfig+0x130>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d168      	bne.n	80039b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e26b      	b.n	8003dc2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f2:	d106      	bne.n	8003902 <HAL_RCC_OscConfig+0x7a>
 80038f4:	4b84      	ldr	r3, [pc, #528]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a83      	ldr	r2, [pc, #524]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 80038fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	e02e      	b.n	8003960 <HAL_RCC_OscConfig+0xd8>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10c      	bne.n	8003924 <HAL_RCC_OscConfig+0x9c>
 800390a:	4b7f      	ldr	r3, [pc, #508]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a7e      	ldr	r2, [pc, #504]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 8003910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	4b7c      	ldr	r3, [pc, #496]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a7b      	ldr	r2, [pc, #492]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 800391c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	e01d      	b.n	8003960 <HAL_RCC_OscConfig+0xd8>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800392c:	d10c      	bne.n	8003948 <HAL_RCC_OscConfig+0xc0>
 800392e:	4b76      	ldr	r3, [pc, #472]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a75      	ldr	r2, [pc, #468]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 8003934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	4b73      	ldr	r3, [pc, #460]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a72      	ldr	r2, [pc, #456]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 8003940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	e00b      	b.n	8003960 <HAL_RCC_OscConfig+0xd8>
 8003948:	4b6f      	ldr	r3, [pc, #444]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a6e      	ldr	r2, [pc, #440]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 800394e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	4b6c      	ldr	r3, [pc, #432]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a6b      	ldr	r2, [pc, #428]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 800395a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800395e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d013      	beq.n	8003990 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003968:	f7fe f93c 	bl	8001be4 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003970:	f7fe f938 	bl	8001be4 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b64      	cmp	r3, #100	; 0x64
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e21f      	b.n	8003dc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003982:	4b61      	ldr	r3, [pc, #388]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0f0      	beq.n	8003970 <HAL_RCC_OscConfig+0xe8>
 800398e:	e014      	b.n	80039ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003990:	f7fe f928 	bl	8001be4 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003998:	f7fe f924 	bl	8001be4 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b64      	cmp	r3, #100	; 0x64
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e20b      	b.n	8003dc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039aa:	4b57      	ldr	r3, [pc, #348]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCC_OscConfig+0x110>
 80039b6:	e000      	b.n	80039ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d069      	beq.n	8003a9a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039c6:	4b50      	ldr	r3, [pc, #320]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 030c 	and.w	r3, r3, #12
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00b      	beq.n	80039ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039d2:	4b4d      	ldr	r3, [pc, #308]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 030c 	and.w	r3, r3, #12
 80039da:	2b08      	cmp	r3, #8
 80039dc:	d11c      	bne.n	8003a18 <HAL_RCC_OscConfig+0x190>
 80039de:	4b4a      	ldr	r3, [pc, #296]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d116      	bne.n	8003a18 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ea:	4b47      	ldr	r3, [pc, #284]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d005      	beq.n	8003a02 <HAL_RCC_OscConfig+0x17a>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d001      	beq.n	8003a02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e1df      	b.n	8003dc2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a02:	4b41      	ldr	r3, [pc, #260]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	493d      	ldr	r1, [pc, #244]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a16:	e040      	b.n	8003a9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d023      	beq.n	8003a68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a20:	4b39      	ldr	r3, [pc, #228]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a38      	ldr	r2, [pc, #224]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 8003a26:	f043 0301 	orr.w	r3, r3, #1
 8003a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2c:	f7fe f8da 	bl	8001be4 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a34:	f7fe f8d6 	bl	8001be4 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e1bd      	b.n	8003dc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a46:	4b30      	ldr	r3, [pc, #192]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a52:	4b2d      	ldr	r3, [pc, #180]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4929      	ldr	r1, [pc, #164]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	600b      	str	r3, [r1, #0]
 8003a66:	e018      	b.n	8003a9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a68:	4b27      	ldr	r3, [pc, #156]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a26      	ldr	r2, [pc, #152]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 8003a6e:	f023 0301 	bic.w	r3, r3, #1
 8003a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a74:	f7fe f8b6 	bl	8001be4 <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a7c:	f7fe f8b2 	bl	8001be4 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e199      	b.n	8003dc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a8e:	4b1e      	ldr	r3, [pc, #120]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1f0      	bne.n	8003a7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d038      	beq.n	8003b18 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d019      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aae:	4b16      	ldr	r3, [pc, #88]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 8003ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab2:	4a15      	ldr	r2, [pc, #84]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 8003ab4:	f043 0301 	orr.w	r3, r3, #1
 8003ab8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aba:	f7fe f893 	bl	8001be4 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ac2:	f7fe f88f 	bl	8001be4 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e176      	b.n	8003dc2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ad4:	4b0c      	ldr	r3, [pc, #48]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 8003ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0f0      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x23a>
 8003ae0:	e01a      	b.n	8003b18 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ae2:	4b09      	ldr	r3, [pc, #36]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 8003ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae6:	4a08      	ldr	r2, [pc, #32]	; (8003b08 <HAL_RCC_OscConfig+0x280>)
 8003ae8:	f023 0301 	bic.w	r3, r3, #1
 8003aec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aee:	f7fe f879 	bl	8001be4 <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af4:	e00a      	b.n	8003b0c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003af6:	f7fe f875 	bl	8001be4 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d903      	bls.n	8003b0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e15c      	b.n	8003dc2 <HAL_RCC_OscConfig+0x53a>
 8003b08:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b0c:	4b91      	ldr	r3, [pc, #580]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1ee      	bne.n	8003af6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 80a4 	beq.w	8003c6e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b26:	4b8b      	ldr	r3, [pc, #556]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10d      	bne.n	8003b4e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b32:	4b88      	ldr	r3, [pc, #544]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	4a87      	ldr	r2, [pc, #540]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b3e:	4b85      	ldr	r3, [pc, #532]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b46:	60bb      	str	r3, [r7, #8]
 8003b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b4e:	4b82      	ldr	r3, [pc, #520]	; (8003d58 <HAL_RCC_OscConfig+0x4d0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d118      	bne.n	8003b8c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003b5a:	4b7f      	ldr	r3, [pc, #508]	; (8003d58 <HAL_RCC_OscConfig+0x4d0>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a7e      	ldr	r2, [pc, #504]	; (8003d58 <HAL_RCC_OscConfig+0x4d0>)
 8003b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b66:	f7fe f83d 	bl	8001be4 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b6e:	f7fe f839 	bl	8001be4 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b64      	cmp	r3, #100	; 0x64
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e120      	b.n	8003dc2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b80:	4b75      	ldr	r3, [pc, #468]	; (8003d58 <HAL_RCC_OscConfig+0x4d0>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0f0      	beq.n	8003b6e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d106      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x31a>
 8003b94:	4b6f      	ldr	r3, [pc, #444]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b98:	4a6e      	ldr	r2, [pc, #440]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003b9a:	f043 0301 	orr.w	r3, r3, #1
 8003b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba0:	e02d      	b.n	8003bfe <HAL_RCC_OscConfig+0x376>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10c      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x33c>
 8003baa:	4b6a      	ldr	r3, [pc, #424]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bae:	4a69      	ldr	r2, [pc, #420]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003bb0:	f023 0301 	bic.w	r3, r3, #1
 8003bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb6:	4b67      	ldr	r3, [pc, #412]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bba:	4a66      	ldr	r2, [pc, #408]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003bbc:	f023 0304 	bic.w	r3, r3, #4
 8003bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc2:	e01c      	b.n	8003bfe <HAL_RCC_OscConfig+0x376>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	2b05      	cmp	r3, #5
 8003bca:	d10c      	bne.n	8003be6 <HAL_RCC_OscConfig+0x35e>
 8003bcc:	4b61      	ldr	r3, [pc, #388]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd0:	4a60      	ldr	r2, [pc, #384]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003bd2:	f043 0304 	orr.w	r3, r3, #4
 8003bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd8:	4b5e      	ldr	r3, [pc, #376]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bdc:	4a5d      	ldr	r2, [pc, #372]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003bde:	f043 0301 	orr.w	r3, r3, #1
 8003be2:	6713      	str	r3, [r2, #112]	; 0x70
 8003be4:	e00b      	b.n	8003bfe <HAL_RCC_OscConfig+0x376>
 8003be6:	4b5b      	ldr	r3, [pc, #364]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bea:	4a5a      	ldr	r2, [pc, #360]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003bec:	f023 0301 	bic.w	r3, r3, #1
 8003bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf2:	4b58      	ldr	r3, [pc, #352]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf6:	4a57      	ldr	r2, [pc, #348]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003bf8:	f023 0304 	bic.w	r3, r3, #4
 8003bfc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d015      	beq.n	8003c32 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c06:	f7fd ffed 	bl	8001be4 <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0c:	e00a      	b.n	8003c24 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0e:	f7fd ffe9 	bl	8001be4 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e0ce      	b.n	8003dc2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c24:	4b4b      	ldr	r3, [pc, #300]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0ee      	beq.n	8003c0e <HAL_RCC_OscConfig+0x386>
 8003c30:	e014      	b.n	8003c5c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c32:	f7fd ffd7 	bl	8001be4 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c38:	e00a      	b.n	8003c50 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3a:	f7fd ffd3 	bl	8001be4 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e0b8      	b.n	8003dc2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c50:	4b40      	ldr	r3, [pc, #256]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1ee      	bne.n	8003c3a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c5c:	7dfb      	ldrb	r3, [r7, #23]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d105      	bne.n	8003c6e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c62:	4b3c      	ldr	r3, [pc, #240]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	4a3b      	ldr	r2, [pc, #236]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003c68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 80a4 	beq.w	8003dc0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c78:	4b36      	ldr	r3, [pc, #216]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 030c 	and.w	r3, r3, #12
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	d06b      	beq.n	8003d5c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d149      	bne.n	8003d20 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c8c:	4b31      	ldr	r3, [pc, #196]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a30      	ldr	r2, [pc, #192]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003c92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c98:	f7fd ffa4 	bl	8001be4 <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca0:	f7fd ffa0 	bl	8001be4 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e087      	b.n	8003dc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb2:	4b28      	ldr	r3, [pc, #160]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1f0      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69da      	ldr	r2, [r3, #28]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	019b      	lsls	r3, r3, #6
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd4:	085b      	lsrs	r3, r3, #1
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	041b      	lsls	r3, r3, #16
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	061b      	lsls	r3, r3, #24
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	4a1b      	ldr	r2, [pc, #108]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003ce6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003cea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cec:	4b19      	ldr	r3, [pc, #100]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a18      	ldr	r2, [pc, #96]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003cf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf8:	f7fd ff74 	bl	8001be4 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d00:	f7fd ff70 	bl	8001be4 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e057      	b.n	8003dc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d12:	4b10      	ldr	r3, [pc, #64]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0f0      	beq.n	8003d00 <HAL_RCC_OscConfig+0x478>
 8003d1e:	e04f      	b.n	8003dc0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d20:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a0b      	ldr	r2, [pc, #44]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003d26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2c:	f7fd ff5a 	bl	8001be4 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d34:	f7fd ff56 	bl	8001be4 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e03d      	b.n	8003dc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d46:	4b03      	ldr	r3, [pc, #12]	; (8003d54 <HAL_RCC_OscConfig+0x4cc>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0x4ac>
 8003d52:	e035      	b.n	8003dc0 <HAL_RCC_OscConfig+0x538>
 8003d54:	40023800 	.word	0x40023800
 8003d58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003d5c:	4b1b      	ldr	r3, [pc, #108]	; (8003dcc <HAL_RCC_OscConfig+0x544>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d028      	beq.n	8003dbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d121      	bne.n	8003dbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d11a      	bne.n	8003dbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d92:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d111      	bne.n	8003dbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da2:	085b      	lsrs	r3, r3, #1
 8003da4:	3b01      	subs	r3, #1
 8003da6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d107      	bne.n	8003dbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d001      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e000      	b.n	8003dc2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40023800 	.word	0x40023800

08003dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e0d0      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003de8:	4b6a      	ldr	r3, [pc, #424]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 030f 	and.w	r3, r3, #15
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d910      	bls.n	8003e18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df6:	4b67      	ldr	r3, [pc, #412]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f023 020f 	bic.w	r2, r3, #15
 8003dfe:	4965      	ldr	r1, [pc, #404]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e06:	4b63      	ldr	r3, [pc, #396]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d001      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0b8      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d020      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d005      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e30:	4b59      	ldr	r3, [pc, #356]	; (8003f98 <HAL_RCC_ClockConfig+0x1c8>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	4a58      	ldr	r2, [pc, #352]	; (8003f98 <HAL_RCC_ClockConfig+0x1c8>)
 8003e36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e48:	4b53      	ldr	r3, [pc, #332]	; (8003f98 <HAL_RCC_ClockConfig+0x1c8>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	4a52      	ldr	r2, [pc, #328]	; (8003f98 <HAL_RCC_ClockConfig+0x1c8>)
 8003e4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e54:	4b50      	ldr	r3, [pc, #320]	; (8003f98 <HAL_RCC_ClockConfig+0x1c8>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	494d      	ldr	r1, [pc, #308]	; (8003f98 <HAL_RCC_ClockConfig+0x1c8>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d040      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d107      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7a:	4b47      	ldr	r3, [pc, #284]	; (8003f98 <HAL_RCC_ClockConfig+0x1c8>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d115      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e07f      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d107      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e92:	4b41      	ldr	r3, [pc, #260]	; (8003f98 <HAL_RCC_ClockConfig+0x1c8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d109      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e073      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea2:	4b3d      	ldr	r3, [pc, #244]	; (8003f98 <HAL_RCC_ClockConfig+0x1c8>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e06b      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eb2:	4b39      	ldr	r3, [pc, #228]	; (8003f98 <HAL_RCC_ClockConfig+0x1c8>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f023 0203 	bic.w	r2, r3, #3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	4936      	ldr	r1, [pc, #216]	; (8003f98 <HAL_RCC_ClockConfig+0x1c8>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ec4:	f7fd fe8e 	bl	8001be4 <HAL_GetTick>
 8003ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eca:	e00a      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ecc:	f7fd fe8a 	bl	8001be4 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e053      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee2:	4b2d      	ldr	r3, [pc, #180]	; (8003f98 <HAL_RCC_ClockConfig+0x1c8>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 020c 	and.w	r2, r3, #12
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d1eb      	bne.n	8003ecc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ef4:	4b27      	ldr	r3, [pc, #156]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 030f 	and.w	r3, r3, #15
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d210      	bcs.n	8003f24 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f02:	4b24      	ldr	r3, [pc, #144]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f023 020f 	bic.w	r2, r3, #15
 8003f0a:	4922      	ldr	r1, [pc, #136]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f12:	4b20      	ldr	r3, [pc, #128]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d001      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e032      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d008      	beq.n	8003f42 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f30:	4b19      	ldr	r3, [pc, #100]	; (8003f98 <HAL_RCC_ClockConfig+0x1c8>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	4916      	ldr	r1, [pc, #88]	; (8003f98 <HAL_RCC_ClockConfig+0x1c8>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d009      	beq.n	8003f62 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f4e:	4b12      	ldr	r3, [pc, #72]	; (8003f98 <HAL_RCC_ClockConfig+0x1c8>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	490e      	ldr	r1, [pc, #56]	; (8003f98 <HAL_RCC_ClockConfig+0x1c8>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f62:	f000 f821 	bl	8003fa8 <HAL_RCC_GetSysClockFreq>
 8003f66:	4602      	mov	r2, r0
 8003f68:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <HAL_RCC_ClockConfig+0x1c8>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	091b      	lsrs	r3, r3, #4
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	490a      	ldr	r1, [pc, #40]	; (8003f9c <HAL_RCC_ClockConfig+0x1cc>)
 8003f74:	5ccb      	ldrb	r3, [r1, r3]
 8003f76:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7a:	4a09      	ldr	r2, [pc, #36]	; (8003fa0 <HAL_RCC_ClockConfig+0x1d0>)
 8003f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f7e:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <HAL_RCC_ClockConfig+0x1d4>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fd fdea 	bl	8001b5c <HAL_InitTick>

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40023c00 	.word	0x40023c00
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	0800bb3c 	.word	0x0800bb3c
 8003fa0:	20000034 	.word	0x20000034
 8003fa4:	20000038 	.word	0x20000038

08003fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fac:	b090      	sub	sp, #64	; 0x40
 8003fae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fb8:	2300      	movs	r3, #0
 8003fba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fc0:	4b59      	ldr	r3, [pc, #356]	; (8004128 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 030c 	and.w	r3, r3, #12
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d00d      	beq.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x40>
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	f200 80a1 	bhi.w	8004114 <HAL_RCC_GetSysClockFreq+0x16c>
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <HAL_RCC_GetSysClockFreq+0x34>
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	d003      	beq.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003fda:	e09b      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fdc:	4b53      	ldr	r3, [pc, #332]	; (800412c <HAL_RCC_GetSysClockFreq+0x184>)
 8003fde:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fe0:	e09b      	b.n	800411a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fe2:	4b53      	ldr	r3, [pc, #332]	; (8004130 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fe4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fe6:	e098      	b.n	800411a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fe8:	4b4f      	ldr	r3, [pc, #316]	; (8004128 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ff0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003ff2:	4b4d      	ldr	r3, [pc, #308]	; (8004128 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d028      	beq.n	8004050 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ffe:	4b4a      	ldr	r3, [pc, #296]	; (8004128 <HAL_RCC_GetSysClockFreq+0x180>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	099b      	lsrs	r3, r3, #6
 8004004:	2200      	movs	r2, #0
 8004006:	623b      	str	r3, [r7, #32]
 8004008:	627a      	str	r2, [r7, #36]	; 0x24
 800400a:	6a3b      	ldr	r3, [r7, #32]
 800400c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004010:	2100      	movs	r1, #0
 8004012:	4b47      	ldr	r3, [pc, #284]	; (8004130 <HAL_RCC_GetSysClockFreq+0x188>)
 8004014:	fb03 f201 	mul.w	r2, r3, r1
 8004018:	2300      	movs	r3, #0
 800401a:	fb00 f303 	mul.w	r3, r0, r3
 800401e:	4413      	add	r3, r2
 8004020:	4a43      	ldr	r2, [pc, #268]	; (8004130 <HAL_RCC_GetSysClockFreq+0x188>)
 8004022:	fba0 1202 	umull	r1, r2, r0, r2
 8004026:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004028:	460a      	mov	r2, r1
 800402a:	62ba      	str	r2, [r7, #40]	; 0x28
 800402c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800402e:	4413      	add	r3, r2
 8004030:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004034:	2200      	movs	r2, #0
 8004036:	61bb      	str	r3, [r7, #24]
 8004038:	61fa      	str	r2, [r7, #28]
 800403a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800403e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004042:	f7fc f935 	bl	80002b0 <__aeabi_uldivmod>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4613      	mov	r3, r2
 800404c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800404e:	e053      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004050:	4b35      	ldr	r3, [pc, #212]	; (8004128 <HAL_RCC_GetSysClockFreq+0x180>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	099b      	lsrs	r3, r3, #6
 8004056:	2200      	movs	r2, #0
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	617a      	str	r2, [r7, #20]
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004062:	f04f 0b00 	mov.w	fp, #0
 8004066:	4652      	mov	r2, sl
 8004068:	465b      	mov	r3, fp
 800406a:	f04f 0000 	mov.w	r0, #0
 800406e:	f04f 0100 	mov.w	r1, #0
 8004072:	0159      	lsls	r1, r3, #5
 8004074:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004078:	0150      	lsls	r0, r2, #5
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	ebb2 080a 	subs.w	r8, r2, sl
 8004082:	eb63 090b 	sbc.w	r9, r3, fp
 8004086:	f04f 0200 	mov.w	r2, #0
 800408a:	f04f 0300 	mov.w	r3, #0
 800408e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004092:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004096:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800409a:	ebb2 0408 	subs.w	r4, r2, r8
 800409e:	eb63 0509 	sbc.w	r5, r3, r9
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	00eb      	lsls	r3, r5, #3
 80040ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040b0:	00e2      	lsls	r2, r4, #3
 80040b2:	4614      	mov	r4, r2
 80040b4:	461d      	mov	r5, r3
 80040b6:	eb14 030a 	adds.w	r3, r4, sl
 80040ba:	603b      	str	r3, [r7, #0]
 80040bc:	eb45 030b 	adc.w	r3, r5, fp
 80040c0:	607b      	str	r3, [r7, #4]
 80040c2:	f04f 0200 	mov.w	r2, #0
 80040c6:	f04f 0300 	mov.w	r3, #0
 80040ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040ce:	4629      	mov	r1, r5
 80040d0:	028b      	lsls	r3, r1, #10
 80040d2:	4621      	mov	r1, r4
 80040d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040d8:	4621      	mov	r1, r4
 80040da:	028a      	lsls	r2, r1, #10
 80040dc:	4610      	mov	r0, r2
 80040de:	4619      	mov	r1, r3
 80040e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e2:	2200      	movs	r2, #0
 80040e4:	60bb      	str	r3, [r7, #8]
 80040e6:	60fa      	str	r2, [r7, #12]
 80040e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040ec:	f7fc f8e0 	bl	80002b0 <__aeabi_uldivmod>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4613      	mov	r3, r2
 80040f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80040f8:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <HAL_RCC_GetSysClockFreq+0x180>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	0c1b      	lsrs	r3, r3, #16
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	3301      	adds	r3, #1
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004108:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800410a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004110:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004112:	e002      	b.n	800411a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004114:	4b05      	ldr	r3, [pc, #20]	; (800412c <HAL_RCC_GetSysClockFreq+0x184>)
 8004116:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004118:	bf00      	nop
    }
  }
  return sysclockfreq;
 800411a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800411c:	4618      	mov	r0, r3
 800411e:	3740      	adds	r7, #64	; 0x40
 8004120:	46bd      	mov	sp, r7
 8004122:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004126:	bf00      	nop
 8004128:	40023800 	.word	0x40023800
 800412c:	00f42400 	.word	0x00f42400
 8004130:	017d7840 	.word	0x017d7840

08004134 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800413c:	2300      	movs	r3, #0
 800413e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004140:	2300      	movs	r3, #0
 8004142:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004144:	2300      	movs	r3, #0
 8004146:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004148:	2300      	movs	r3, #0
 800414a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800414c:	2300      	movs	r3, #0
 800414e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d012      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800415c:	4b69      	ldr	r3, [pc, #420]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	4a68      	ldr	r2, [pc, #416]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004162:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004166:	6093      	str	r3, [r2, #8]
 8004168:	4b66      	ldr	r3, [pc, #408]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004170:	4964      	ldr	r1, [pc, #400]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004172:	4313      	orrs	r3, r2
 8004174:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800417e:	2301      	movs	r3, #1
 8004180:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d017      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800418e:	4b5d      	ldr	r3, [pc, #372]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004194:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800419c:	4959      	ldr	r1, [pc, #356]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041ac:	d101      	bne.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80041ae:	2301      	movs	r3, #1
 80041b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80041ba:	2301      	movs	r3, #1
 80041bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d017      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041ca:	4b4e      	ldr	r3, [pc, #312]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	494a      	ldr	r1, [pc, #296]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041e8:	d101      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80041ea:	2301      	movs	r3, #1
 80041ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80041f6:	2301      	movs	r3, #1
 80041f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004206:	2301      	movs	r3, #1
 8004208:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0320 	and.w	r3, r3, #32
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 808b 	beq.w	800432e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004218:	4b3a      	ldr	r3, [pc, #232]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	4a39      	ldr	r2, [pc, #228]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800421e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004222:	6413      	str	r3, [r2, #64]	; 0x40
 8004224:	4b37      	ldr	r3, [pc, #220]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004230:	4b35      	ldr	r3, [pc, #212]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a34      	ldr	r2, [pc, #208]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800423a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800423c:	f7fd fcd2 	bl	8001be4 <HAL_GetTick>
 8004240:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004244:	f7fd fcce 	bl	8001be4 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b64      	cmp	r3, #100	; 0x64
 8004250:	d901      	bls.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e357      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004256:	4b2c      	ldr	r3, [pc, #176]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0f0      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004262:	4b28      	ldr	r3, [pc, #160]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800426a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d035      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	429a      	cmp	r2, r3
 800427e:	d02e      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004280:	4b20      	ldr	r3, [pc, #128]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004288:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800428a:	4b1e      	ldr	r3, [pc, #120]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428e:	4a1d      	ldr	r2, [pc, #116]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004294:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004296:	4b1b      	ldr	r3, [pc, #108]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	4a1a      	ldr	r2, [pc, #104]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80042a2:	4a18      	ldr	r2, [pc, #96]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042a8:	4b16      	ldr	r3, [pc, #88]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d114      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b4:	f7fd fc96 	bl	8001be4 <HAL_GetTick>
 80042b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ba:	e00a      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042bc:	f7fd fc92 	bl	8001be4 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e319      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d2:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d0ee      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042ea:	d111      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80042ec:	4b05      	ldr	r3, [pc, #20]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042f8:	4b04      	ldr	r3, [pc, #16]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80042fa:	400b      	ands	r3, r1
 80042fc:	4901      	ldr	r1, [pc, #4]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	608b      	str	r3, [r1, #8]
 8004302:	e00b      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004304:	40023800 	.word	0x40023800
 8004308:	40007000 	.word	0x40007000
 800430c:	0ffffcff 	.word	0x0ffffcff
 8004310:	4baa      	ldr	r3, [pc, #680]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	4aa9      	ldr	r2, [pc, #676]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004316:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800431a:	6093      	str	r3, [r2, #8]
 800431c:	4ba7      	ldr	r3, [pc, #668]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800431e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004328:	49a4      	ldr	r1, [pc, #656]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800432a:	4313      	orrs	r3, r2
 800432c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0310 	and.w	r3, r3, #16
 8004336:	2b00      	cmp	r3, #0
 8004338:	d010      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800433a:	4ba0      	ldr	r3, [pc, #640]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800433c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004340:	4a9e      	ldr	r2, [pc, #632]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004346:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800434a:	4b9c      	ldr	r3, [pc, #624]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800434c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004354:	4999      	ldr	r1, [pc, #612]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00a      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004368:	4b94      	ldr	r3, [pc, #592]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800436a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004376:	4991      	ldr	r1, [pc, #580]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800438a:	4b8c      	ldr	r3, [pc, #560]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800438c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004390:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004398:	4988      	ldr	r1, [pc, #544]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00a      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043ac:	4b83      	ldr	r3, [pc, #524]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043ba:	4980      	ldr	r1, [pc, #512]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043ce:	4b7b      	ldr	r3, [pc, #492]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043dc:	4977      	ldr	r1, [pc, #476]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043f0:	4b72      	ldr	r3, [pc, #456]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f6:	f023 0203 	bic.w	r2, r3, #3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fe:	496f      	ldr	r1, [pc, #444]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004400:	4313      	orrs	r3, r2
 8004402:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004412:	4b6a      	ldr	r3, [pc, #424]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004418:	f023 020c 	bic.w	r2, r3, #12
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004420:	4966      	ldr	r1, [pc, #408]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00a      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004434:	4b61      	ldr	r3, [pc, #388]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004442:	495e      	ldr	r1, [pc, #376]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004444:	4313      	orrs	r3, r2
 8004446:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00a      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004456:	4b59      	ldr	r3, [pc, #356]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004464:	4955      	ldr	r1, [pc, #340]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004466:	4313      	orrs	r3, r2
 8004468:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00a      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004478:	4b50      	ldr	r3, [pc, #320]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800447a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004486:	494d      	ldr	r1, [pc, #308]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004488:	4313      	orrs	r3, r2
 800448a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00a      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800449a:	4b48      	ldr	r3, [pc, #288]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800449c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a8:	4944      	ldr	r1, [pc, #272]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00a      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80044bc:	4b3f      	ldr	r3, [pc, #252]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ca:	493c      	ldr	r1, [pc, #240]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00a      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80044de:	4b37      	ldr	r3, [pc, #220]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ec:	4933      	ldr	r1, [pc, #204]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00a      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004500:	4b2e      	ldr	r3, [pc, #184]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004506:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800450e:	492b      	ldr	r1, [pc, #172]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004510:	4313      	orrs	r3, r2
 8004512:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d011      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004522:	4b26      	ldr	r3, [pc, #152]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004528:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004530:	4922      	ldr	r1, [pc, #136]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004532:	4313      	orrs	r3, r2
 8004534:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800453c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004540:	d101      	bne.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004542:	2301      	movs	r3, #1
 8004544:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004552:	2301      	movs	r3, #1
 8004554:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004562:	4b16      	ldr	r3, [pc, #88]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004568:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004570:	4912      	ldr	r1, [pc, #72]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00b      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004584:	4b0d      	ldr	r3, [pc, #52]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004594:	4909      	ldr	r1, [pc, #36]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004596:	4313      	orrs	r3, r2
 8004598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d006      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f000 80d9 	beq.w	8004762 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045b0:	4b02      	ldr	r3, [pc, #8]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a01      	ldr	r2, [pc, #4]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045ba:	e001      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80045bc:	40023800 	.word	0x40023800
 80045c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c2:	f7fd fb0f 	bl	8001be4 <HAL_GetTick>
 80045c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045c8:	e008      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80045ca:	f7fd fb0b 	bl	8001be4 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b64      	cmp	r3, #100	; 0x64
 80045d6:	d901      	bls.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e194      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045dc:	4b6c      	ldr	r3, [pc, #432]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1f0      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d021      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d11d      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80045fc:	4b64      	ldr	r3, [pc, #400]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004602:	0c1b      	lsrs	r3, r3, #16
 8004604:	f003 0303 	and.w	r3, r3, #3
 8004608:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800460a:	4b61      	ldr	r3, [pc, #388]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800460c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004610:	0e1b      	lsrs	r3, r3, #24
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	019a      	lsls	r2, r3, #6
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	041b      	lsls	r3, r3, #16
 8004622:	431a      	orrs	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	061b      	lsls	r3, r3, #24
 8004628:	431a      	orrs	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	071b      	lsls	r3, r3, #28
 8004630:	4957      	ldr	r1, [pc, #348]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004632:	4313      	orrs	r3, r2
 8004634:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d004      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004648:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800464c:	d00a      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004656:	2b00      	cmp	r3, #0
 8004658:	d02e      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004662:	d129      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004664:	4b4a      	ldr	r3, [pc, #296]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800466a:	0c1b      	lsrs	r3, r3, #16
 800466c:	f003 0303 	and.w	r3, r3, #3
 8004670:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004672:	4b47      	ldr	r3, [pc, #284]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004678:	0f1b      	lsrs	r3, r3, #28
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	019a      	lsls	r2, r3, #6
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	041b      	lsls	r3, r3, #16
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	061b      	lsls	r3, r3, #24
 8004692:	431a      	orrs	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	071b      	lsls	r3, r3, #28
 8004698:	493d      	ldr	r1, [pc, #244]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800469a:	4313      	orrs	r3, r2
 800469c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80046a0:	4b3b      	ldr	r3, [pc, #236]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046a6:	f023 021f 	bic.w	r2, r3, #31
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	3b01      	subs	r3, #1
 80046b0:	4937      	ldr	r1, [pc, #220]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d01d      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80046c4:	4b32      	ldr	r3, [pc, #200]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ca:	0e1b      	lsrs	r3, r3, #24
 80046cc:	f003 030f 	and.w	r3, r3, #15
 80046d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046d2:	4b2f      	ldr	r3, [pc, #188]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d8:	0f1b      	lsrs	r3, r3, #28
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	019a      	lsls	r2, r3, #6
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	041b      	lsls	r3, r3, #16
 80046ec:	431a      	orrs	r2, r3
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	061b      	lsls	r3, r3, #24
 80046f2:	431a      	orrs	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	071b      	lsls	r3, r3, #28
 80046f8:	4925      	ldr	r1, [pc, #148]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d011      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	019a      	lsls	r2, r3, #6
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	041b      	lsls	r3, r3, #16
 8004718:	431a      	orrs	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	061b      	lsls	r3, r3, #24
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	071b      	lsls	r3, r3, #28
 8004728:	4919      	ldr	r1, [pc, #100]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800472a:	4313      	orrs	r3, r2
 800472c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004730:	4b17      	ldr	r3, [pc, #92]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a16      	ldr	r2, [pc, #88]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004736:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800473a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800473c:	f7fd fa52 	bl	8001be4 <HAL_GetTick>
 8004740:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004742:	e008      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004744:	f7fd fa4e 	bl	8001be4 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b64      	cmp	r3, #100	; 0x64
 8004750:	d901      	bls.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e0d7      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004756:	4b0e      	ldr	r3, [pc, #56]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0f0      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	2b01      	cmp	r3, #1
 8004766:	f040 80cd 	bne.w	8004904 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800476a:	4b09      	ldr	r3, [pc, #36]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a08      	ldr	r2, [pc, #32]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004774:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004776:	f7fd fa35 	bl	8001be4 <HAL_GetTick>
 800477a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800477c:	e00a      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800477e:	f7fd fa31 	bl	8001be4 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b64      	cmp	r3, #100	; 0x64
 800478a:	d903      	bls.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e0ba      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004790:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004794:	4b5e      	ldr	r3, [pc, #376]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800479c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047a0:	d0ed      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d009      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d02e      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d12a      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80047ca:	4b51      	ldr	r3, [pc, #324]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d0:	0c1b      	lsrs	r3, r3, #16
 80047d2:	f003 0303 	and.w	r3, r3, #3
 80047d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80047d8:	4b4d      	ldr	r3, [pc, #308]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047de:	0f1b      	lsrs	r3, r3, #28
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	019a      	lsls	r2, r3, #6
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	041b      	lsls	r3, r3, #16
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	061b      	lsls	r3, r3, #24
 80047f8:	431a      	orrs	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	071b      	lsls	r3, r3, #28
 80047fe:	4944      	ldr	r1, [pc, #272]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004800:	4313      	orrs	r3, r2
 8004802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004806:	4b42      	ldr	r3, [pc, #264]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800480c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004814:	3b01      	subs	r3, #1
 8004816:	021b      	lsls	r3, r3, #8
 8004818:	493d      	ldr	r1, [pc, #244]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800481a:	4313      	orrs	r3, r2
 800481c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d022      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004830:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004834:	d11d      	bne.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004836:	4b36      	ldr	r3, [pc, #216]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483c:	0e1b      	lsrs	r3, r3, #24
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004844:	4b32      	ldr	r3, [pc, #200]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484a:	0f1b      	lsrs	r3, r3, #28
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	019a      	lsls	r2, r3, #6
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	041b      	lsls	r3, r3, #16
 800485e:	431a      	orrs	r2, r3
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	061b      	lsls	r3, r3, #24
 8004864:	431a      	orrs	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	071b      	lsls	r3, r3, #28
 800486a:	4929      	ldr	r1, [pc, #164]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b00      	cmp	r3, #0
 800487c:	d028      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800487e:	4b24      	ldr	r3, [pc, #144]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004884:	0e1b      	lsrs	r3, r3, #24
 8004886:	f003 030f 	and.w	r3, r3, #15
 800488a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800488c:	4b20      	ldr	r3, [pc, #128]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800488e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004892:	0c1b      	lsrs	r3, r3, #16
 8004894:	f003 0303 	and.w	r3, r3, #3
 8004898:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	019a      	lsls	r2, r3, #6
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	041b      	lsls	r3, r3, #16
 80048a4:	431a      	orrs	r2, r3
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	061b      	lsls	r3, r3, #24
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	071b      	lsls	r3, r3, #28
 80048b2:	4917      	ldr	r1, [pc, #92]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80048ba:	4b15      	ldr	r3, [pc, #84]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	4911      	ldr	r1, [pc, #68]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80048d0:	4b0f      	ldr	r3, [pc, #60]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a0e      	ldr	r2, [pc, #56]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048dc:	f7fd f982 	bl	8001be4 <HAL_GetTick>
 80048e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048e2:	e008      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048e4:	f7fd f97e 	bl	8001be4 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b64      	cmp	r3, #100	; 0x64
 80048f0:	d901      	bls.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e007      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048f6:	4b06      	ldr	r3, [pc, #24]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004902:	d1ef      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3720      	adds	r7, #32
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	40023800 	.word	0x40023800

08004914 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e022      	b.n	800496c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d105      	bne.n	800493e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7fc fe11 	bl	8001560 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2203      	movs	r2, #3
 8004942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f814 	bl	8004974 <HAL_SD_InitCard>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e00a      	b.n	800496c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004974:	b5b0      	push	{r4, r5, r7, lr}
 8004976:	b08e      	sub	sp, #56	; 0x38
 8004978:	af04      	add	r7, sp, #16
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800497c:	2300      	movs	r3, #0
 800497e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8004980:	2300      	movs	r3, #0
 8004982:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004984:	2300      	movs	r3, #0
 8004986:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004988:	2300      	movs	r3, #0
 800498a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800498c:	2300      	movs	r3, #0
 800498e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8004990:	2376      	movs	r3, #118	; 0x76
 8004992:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681d      	ldr	r5, [r3, #0]
 8004998:	466c      	mov	r4, sp
 800499a:	f107 0314 	add.w	r3, r7, #20
 800499e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80049a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80049a6:	f107 0308 	add.w	r3, r7, #8
 80049aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049ac:	4628      	mov	r0, r5
 80049ae:	f000 ff41 	bl	8005834 <SDMMC_Init>
 80049b2:	4603      	mov	r3, r0
 80049b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80049b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e059      	b.n	8004a78 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049d2:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 ff75 	bl	80058c8 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049ec:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80049ee:	2002      	movs	r0, #2
 80049f0:	f7fd f904 	bl	8001bfc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 fe67 	bl	80056c8 <SD_PowerON>
 80049fa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00b      	beq.n	8004a1a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	431a      	orrs	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e02e      	b.n	8004a78 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fd86 	bl	800552c <SD_InitCard>
 8004a20:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a22:	6a3b      	ldr	r3, [r7, #32]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00b      	beq.n	8004a40 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e01b      	b.n	8004a78 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 ffcf 	bl	80059ec <SDMMC_CmdBlockLength>
 8004a4e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00f      	beq.n	8004a76 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a09      	ldr	r2, [pc, #36]	; (8004a80 <HAL_SD_InitCard+0x10c>)
 8004a5c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	431a      	orrs	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e000      	b.n	8004a78 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3728      	adds	r7, #40	; 0x28
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bdb0      	pop	{r4, r5, r7, pc}
 8004a80:	004005ff 	.word	0x004005ff

08004a84 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b092      	sub	sp, #72	; 0x48
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
 8004a90:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004a92:	f7fd f8a7 	bl	8001be4 <HAL_GetTick>
 8004a96:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d107      	bne.n	8004ab6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aaa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e1bd      	b.n	8004e32 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	f040 81b0 	bne.w	8004e24 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004aca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	441a      	add	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d907      	bls.n	8004ae8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004adc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e1a4      	b.n	8004e32 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2203      	movs	r2, #3
 8004aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2200      	movs	r2, #0
 8004af6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d002      	beq.n	8004b06 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b02:	025b      	lsls	r3, r3, #9
 8004b04:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004b06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b0a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	025b      	lsls	r3, r3, #9
 8004b10:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004b12:	2390      	movs	r3, #144	; 0x90
 8004b14:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004b16:	2302      	movs	r3, #2
 8004b18:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f107 0214 	add.w	r2, r7, #20
 8004b2a:	4611      	mov	r1, r2
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f000 ff31 	bl	8005994 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d90a      	bls.n	8004b4e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 ff95 	bl	8005a74 <SDMMC_CmdReadMultiBlock>
 8004b4a:	6478      	str	r0, [r7, #68]	; 0x44
 8004b4c:	e009      	b.n	8004b62 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2201      	movs	r2, #1
 8004b52:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 ff68 	bl	8005a30 <SDMMC_CmdReadSingleBlock>
 8004b60:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d012      	beq.n	8004b8e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a7a      	ldr	r2, [pc, #488]	; (8004d58 <HAL_SD_ReadBlocks+0x2d4>)
 8004b6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b76:	431a      	orrs	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e151      	b.n	8004e32 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004b92:	e061      	b.n	8004c58 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d03c      	beq.n	8004c1c <HAL_SD_ReadBlocks+0x198>
 8004ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d039      	beq.n	8004c1c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8004ba8:	2300      	movs	r3, #0
 8004baa:	643b      	str	r3, [r7, #64]	; 0x40
 8004bac:	e033      	b.n	8004c16 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 fe6a 	bl	800588c <SDMMC_ReadFIFO>
 8004bb8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd0:	0a1b      	lsrs	r3, r3, #8
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bda:	3301      	adds	r3, #1
 8004bdc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be0:	3b01      	subs	r3, #1
 8004be2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be6:	0c1b      	lsrs	r3, r3, #16
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bec:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfc:	0e1b      	lsrs	r3, r3, #24
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c02:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c06:	3301      	adds	r3, #1
 8004c08:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8004c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c12:	3301      	adds	r3, #1
 8004c14:	643b      	str	r3, [r7, #64]	; 0x40
 8004c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c18:	2b07      	cmp	r3, #7
 8004c1a:	d9c8      	bls.n	8004bae <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004c1c:	f7fc ffe2 	bl	8001be4 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d902      	bls.n	8004c32 <HAL_SD_ReadBlocks+0x1ae>
 8004c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d112      	bne.n	8004c58 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a48      	ldr	r2, [pc, #288]	; (8004d58 <HAL_SD_ReadBlocks+0x2d4>)
 8004c38:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e0ec      	b.n	8004e32 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d096      	beq.n	8004b94 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d022      	beq.n	8004cba <HAL_SD_ReadBlocks+0x236>
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d91f      	bls.n	8004cba <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7e:	2b03      	cmp	r3, #3
 8004c80:	d01b      	beq.n	8004cba <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 ff5a 	bl	8005b40 <SDMMC_CmdStopTransfer>
 8004c8c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004c8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d012      	beq.n	8004cba <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a2f      	ldr	r2, [pc, #188]	; (8004d58 <HAL_SD_ReadBlocks+0x2d4>)
 8004c9a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e0bb      	b.n	8004e32 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc0:	f003 0308 	and.w	r3, r3, #8
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d012      	beq.n	8004cee <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a22      	ldr	r2, [pc, #136]	; (8004d58 <HAL_SD_ReadBlocks+0x2d4>)
 8004cce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd4:	f043 0208 	orr.w	r2, r3, #8
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e0a1      	b.n	8004e32 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d012      	beq.n	8004d22 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a15      	ldr	r2, [pc, #84]	; (8004d58 <HAL_SD_ReadBlocks+0x2d4>)
 8004d02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d08:	f043 0202 	orr.w	r2, r3, #2
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e087      	b.n	8004e32 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d28:	f003 0320 	and.w	r3, r3, #32
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d064      	beq.n	8004dfa <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a08      	ldr	r2, [pc, #32]	; (8004d58 <HAL_SD_ReadBlocks+0x2d4>)
 8004d36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3c:	f043 0220 	orr.w	r2, r3, #32
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e06d      	b.n	8004e32 <HAL_SD_ReadBlocks+0x3ae>
 8004d56:	bf00      	nop
 8004d58:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f000 fd93 	bl	800588c <SDMMC_ReadFIFO>
 8004d66:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8004d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d6e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d72:	3301      	adds	r3, #1
 8004d74:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7e:	0a1b      	lsrs	r3, r3, #8
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d84:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d88:	3301      	adds	r3, #1
 8004d8a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d94:	0c1b      	lsrs	r3, r3, #16
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9e:	3301      	adds	r3, #1
 8004da0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004da4:	3b01      	subs	r3, #1
 8004da6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004daa:	0e1b      	lsrs	r3, r3, #24
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db4:	3301      	adds	r3, #1
 8004db6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004dbe:	f7fc ff11 	bl	8001be4 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d902      	bls.n	8004dd4 <HAL_SD_ReadBlocks+0x350>
 8004dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d112      	bne.n	8004dfa <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a18      	ldr	r2, [pc, #96]	; (8004e3c <HAL_SD_ReadBlocks+0x3b8>)
 8004dda:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e01b      	b.n	8004e32 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <HAL_SD_ReadBlocks+0x38a>
 8004e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1a6      	bne.n	8004d5c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f240 523a 	movw	r2, #1338	; 0x53a
 8004e16:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004e20:	2300      	movs	r3, #0
 8004e22:	e006      	b.n	8004e32 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e28:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
  }
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3748      	adds	r7, #72	; 0x48
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	004005ff 	.word	0x004005ff

08004e40 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b092      	sub	sp, #72	; 0x48
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
 8004e4c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004e4e:	f7fc fec9 	bl	8001be4 <HAL_GetTick>
 8004e52:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d107      	bne.n	8004e72 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e66:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e165      	b.n	800513e <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	f040 8158 	bne.w	8005130 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004e86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	441a      	add	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d907      	bls.n	8004ea4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e14c      	b.n	800513e <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2203      	movs	r2, #3
 8004ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d002      	beq.n	8004ec2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8004ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebe:	025b      	lsls	r3, r3, #9
 8004ec0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004ec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ec6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	025b      	lsls	r3, r3, #9
 8004ecc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004ece:	2390      	movs	r3, #144	; 0x90
 8004ed0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8004eda:	2301      	movs	r3, #1
 8004edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f107 0218 	add.w	r2, r7, #24
 8004ee6:	4611      	mov	r1, r2
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f000 fd53 	bl	8005994 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d90a      	bls.n	8004f0a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 fdfb 	bl	8005afc <SDMMC_CmdWriteMultiBlock>
 8004f06:	6478      	str	r0, [r7, #68]	; 0x44
 8004f08:	e009      	b.n	8004f1e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2210      	movs	r2, #16
 8004f0e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 fdce 	bl	8005ab8 <SDMMC_CmdWriteSingleBlock>
 8004f1c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d012      	beq.n	8004f4a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a87      	ldr	r2, [pc, #540]	; (8005148 <HAL_SD_WriteBlocks+0x308>)
 8004f2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f32:	431a      	orrs	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e0f9      	b.n	800513e <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004f4e:	e065      	b.n	800501c <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d040      	beq.n	8004fe0 <HAL_SD_WriteBlocks+0x1a0>
 8004f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d03d      	beq.n	8004fe0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8004f64:	2300      	movs	r3, #0
 8004f66:	643b      	str	r3, [r7, #64]	; 0x40
 8004f68:	e037      	b.n	8004fda <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8004f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f72:	3301      	adds	r3, #1
 8004f74:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8004f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	021a      	lsls	r2, r3, #8
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f90:	3b01      	subs	r3, #1
 8004f92:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8004f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	041a      	lsls	r2, r3, #16
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8004fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	061a      	lsls	r2, r3, #24
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fba:	3301      	adds	r3, #1
 8004fbc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f107 0214 	add.w	r2, r7, #20
 8004fcc:	4611      	mov	r1, r2
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 fc69 	bl	80058a6 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	643b      	str	r3, [r7, #64]	; 0x40
 8004fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fdc:	2b07      	cmp	r3, #7
 8004fde:	d9c4      	bls.n	8004f6a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004fe0:	f7fc fe00 	bl	8001be4 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d902      	bls.n	8004ff6 <HAL_SD_WriteBlocks+0x1b6>
 8004ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d112      	bne.n	800501c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a53      	ldr	r2, [pc, #332]	; (8005148 <HAL_SD_WriteBlocks+0x308>)
 8004ffc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005004:	431a      	orrs	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e090      	b.n	800513e <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005022:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8005026:	2b00      	cmp	r3, #0
 8005028:	d092      	beq.n	8004f50 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005034:	2b00      	cmp	r3, #0
 8005036:	d022      	beq.n	800507e <HAL_SD_WriteBlocks+0x23e>
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d91f      	bls.n	800507e <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005042:	2b03      	cmp	r3, #3
 8005044:	d01b      	beq.n	800507e <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4618      	mov	r0, r3
 800504c:	f000 fd78 	bl	8005b40 <SDMMC_CmdStopTransfer>
 8005050:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005054:	2b00      	cmp	r3, #0
 8005056:	d012      	beq.n	800507e <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a3a      	ldr	r2, [pc, #232]	; (8005148 <HAL_SD_WriteBlocks+0x308>)
 800505e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005066:	431a      	orrs	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e05f      	b.n	800513e <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005084:	f003 0308 	and.w	r3, r3, #8
 8005088:	2b00      	cmp	r3, #0
 800508a:	d012      	beq.n	80050b2 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a2d      	ldr	r2, [pc, #180]	; (8005148 <HAL_SD_WriteBlocks+0x308>)
 8005092:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005098:	f043 0208 	orr.w	r2, r3, #8
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e045      	b.n	800513e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d012      	beq.n	80050e6 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a20      	ldr	r2, [pc, #128]	; (8005148 <HAL_SD_WriteBlocks+0x308>)
 80050c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050cc:	f043 0202 	orr.w	r2, r3, #2
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e02b      	b.n	800513e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ec:	f003 0310 	and.w	r3, r3, #16
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d012      	beq.n	800511a <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a13      	ldr	r2, [pc, #76]	; (8005148 <HAL_SD_WriteBlocks+0x308>)
 80050fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005100:	f043 0210 	orr.w	r2, r3, #16
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e011      	b.n	800513e <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f240 523a 	movw	r2, #1338	; 0x53a
 8005122:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	e006      	b.n	800513e <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005134:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
  }
}
 800513e:	4618      	mov	r0, r3
 8005140:	3748      	adds	r7, #72	; 0x48
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	004005ff 	.word	0x004005ff

0800514c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800515a:	0f9b      	lsrs	r3, r3, #30
 800515c:	b2da      	uxtb	r2, r3
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005166:	0e9b      	lsrs	r3, r3, #26
 8005168:	b2db      	uxtb	r3, r3
 800516a:	f003 030f 	and.w	r3, r3, #15
 800516e:	b2da      	uxtb	r2, r3
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005178:	0e1b      	lsrs	r3, r3, #24
 800517a:	b2db      	uxtb	r3, r3
 800517c:	f003 0303 	and.w	r3, r3, #3
 8005180:	b2da      	uxtb	r2, r3
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800518a:	0c1b      	lsrs	r3, r3, #16
 800518c:	b2da      	uxtb	r2, r3
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005196:	0a1b      	lsrs	r3, r3, #8
 8005198:	b2da      	uxtb	r2, r3
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051a2:	b2da      	uxtb	r2, r3
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051ac:	0d1b      	lsrs	r3, r3, #20
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051b8:	0c1b      	lsrs	r3, r3, #16
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	f003 030f 	and.w	r3, r3, #15
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051ca:	0bdb      	lsrs	r3, r3, #15
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051dc:	0b9b      	lsrs	r3, r3, #14
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051ee:	0b5b      	lsrs	r3, r3, #13
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005200:	0b1b      	lsrs	r3, r3, #12
 8005202:	b2db      	uxtb	r3, r3
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	b2da      	uxtb	r2, r3
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2200      	movs	r2, #0
 8005212:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005218:	2b00      	cmp	r3, #0
 800521a:	d163      	bne.n	80052e4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005220:	009a      	lsls	r2, r3, #2
 8005222:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005226:	4013      	ands	r3, r2
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800522c:	0f92      	lsrs	r2, r2, #30
 800522e:	431a      	orrs	r2, r3
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005238:	0edb      	lsrs	r3, r3, #27
 800523a:	b2db      	uxtb	r3, r3
 800523c:	f003 0307 	and.w	r3, r3, #7
 8005240:	b2da      	uxtb	r2, r3
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800524a:	0e1b      	lsrs	r3, r3, #24
 800524c:	b2db      	uxtb	r3, r3
 800524e:	f003 0307 	and.w	r3, r3, #7
 8005252:	b2da      	uxtb	r2, r3
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800525c:	0d5b      	lsrs	r3, r3, #21
 800525e:	b2db      	uxtb	r3, r3
 8005260:	f003 0307 	and.w	r3, r3, #7
 8005264:	b2da      	uxtb	r2, r3
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800526e:	0c9b      	lsrs	r3, r3, #18
 8005270:	b2db      	uxtb	r3, r3
 8005272:	f003 0307 	and.w	r3, r3, #7
 8005276:	b2da      	uxtb	r2, r3
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005280:	0bdb      	lsrs	r3, r3, #15
 8005282:	b2db      	uxtb	r3, r3
 8005284:	f003 0307 	and.w	r3, r3, #7
 8005288:	b2da      	uxtb	r2, r3
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	1c5a      	adds	r2, r3, #1
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	7e1b      	ldrb	r3, [r3, #24]
 800529c:	b2db      	uxtb	r3, r3
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	3302      	adds	r3, #2
 80052a4:	2201      	movs	r2, #1
 80052a6:	fa02 f303 	lsl.w	r3, r2, r3
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80052ae:	fb03 f202 	mul.w	r2, r3, r2
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	7a1b      	ldrb	r3, [r3, #8]
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	f003 030f 	and.w	r3, r3, #15
 80052c0:	2201      	movs	r2, #1
 80052c2:	409a      	lsls	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80052d0:	0a52      	lsrs	r2, r2, #9
 80052d2:	fb03 f202 	mul.w	r2, r3, r2
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052e0:	661a      	str	r2, [r3, #96]	; 0x60
 80052e2:	e031      	b.n	8005348 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d11d      	bne.n	8005328 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052f0:	041b      	lsls	r3, r3, #16
 80052f2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052fa:	0c1b      	lsrs	r3, r3, #16
 80052fc:	431a      	orrs	r2, r3
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	3301      	adds	r3, #1
 8005308:	029a      	lsls	r2, r3, #10
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f44f 7200 	mov.w	r2, #512	; 0x200
 800531c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	661a      	str	r2, [r3, #96]	; 0x60
 8005326:	e00f      	b.n	8005348 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a58      	ldr	r2, [pc, #352]	; (8005490 <HAL_SD_GetCardCSD+0x344>)
 800532e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005334:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e09d      	b.n	8005484 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800534c:	0b9b      	lsrs	r3, r3, #14
 800534e:	b2db      	uxtb	r3, r3
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	b2da      	uxtb	r2, r3
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800535e:	09db      	lsrs	r3, r3, #7
 8005360:	b2db      	uxtb	r3, r3
 8005362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005366:	b2da      	uxtb	r2, r3
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005370:	b2db      	uxtb	r3, r3
 8005372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005376:	b2da      	uxtb	r2, r3
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005380:	0fdb      	lsrs	r3, r3, #31
 8005382:	b2da      	uxtb	r2, r3
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538c:	0f5b      	lsrs	r3, r3, #29
 800538e:	b2db      	uxtb	r3, r3
 8005390:	f003 0303 	and.w	r3, r3, #3
 8005394:	b2da      	uxtb	r2, r3
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539e:	0e9b      	lsrs	r3, r3, #26
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	f003 0307 	and.w	r3, r3, #7
 80053a6:	b2da      	uxtb	r2, r3
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b0:	0d9b      	lsrs	r3, r3, #22
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	f003 030f 	and.w	r3, r3, #15
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c2:	0d5b      	lsrs	r3, r3, #21
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053de:	0c1b      	lsrs	r3, r3, #16
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f2:	0bdb      	lsrs	r3, r3, #15
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	b2da      	uxtb	r2, r3
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005406:	0b9b      	lsrs	r3, r3, #14
 8005408:	b2db      	uxtb	r3, r3
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	b2da      	uxtb	r2, r3
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541a:	0b5b      	lsrs	r3, r3, #13
 800541c:	b2db      	uxtb	r3, r3
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	b2da      	uxtb	r2, r3
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542e:	0b1b      	lsrs	r3, r3, #12
 8005430:	b2db      	uxtb	r3, r3
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	b2da      	uxtb	r2, r3
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005442:	0a9b      	lsrs	r3, r3, #10
 8005444:	b2db      	uxtb	r3, r3
 8005446:	f003 0303 	and.w	r3, r3, #3
 800544a:	b2da      	uxtb	r2, r3
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005456:	0a1b      	lsrs	r3, r3, #8
 8005458:	b2db      	uxtb	r3, r3
 800545a:	f003 0303 	and.w	r3, r3, #3
 800545e:	b2da      	uxtb	r2, r3
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546a:	085b      	lsrs	r3, r3, #1
 800546c:	b2db      	uxtb	r3, r3
 800546e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005472:	b2da      	uxtb	r2, r3
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	004005ff 	.word	0x004005ff

08005494 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80054f4:	2300      	movs	r3, #0
 80054f6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80054f8:	f107 030c 	add.w	r3, r7, #12
 80054fc:	4619      	mov	r1, r3
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f970 	bl	80057e4 <SD_SendStatus>
 8005504:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d005      	beq.n	8005518 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	431a      	orrs	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	0a5b      	lsrs	r3, r3, #9
 800551c:	f003 030f 	and.w	r3, r3, #15
 8005520:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005522:	693b      	ldr	r3, [r7, #16]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800552c:	b5b0      	push	{r4, r5, r7, lr}
 800552e:	b094      	sub	sp, #80	; 0x50
 8005530:	af04      	add	r7, sp, #16
 8005532:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005534:	2301      	movs	r3, #1
 8005536:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4618      	mov	r0, r3
 800553e:	f000 f9d1 	bl	80058e4 <SDMMC_GetPowerState>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d102      	bne.n	800554e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005548:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800554c:	e0b8      	b.n	80056c0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005552:	2b03      	cmp	r3, #3
 8005554:	d02f      	beq.n	80055b6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4618      	mov	r0, r3
 800555c:	f000 fbb8 	bl	8005cd0 <SDMMC_CmdSendCID>
 8005560:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <SD_InitCard+0x40>
    {
      return errorstate;
 8005568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800556a:	e0a9      	b.n	80056c0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2100      	movs	r1, #0
 8005572:	4618      	mov	r0, r3
 8005574:	f000 f9fb 	bl	800596e <SDMMC_GetResponse>
 8005578:	4602      	mov	r2, r0
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2104      	movs	r1, #4
 8005584:	4618      	mov	r0, r3
 8005586:	f000 f9f2 	bl	800596e <SDMMC_GetResponse>
 800558a:	4602      	mov	r2, r0
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2108      	movs	r1, #8
 8005596:	4618      	mov	r0, r3
 8005598:	f000 f9e9 	bl	800596e <SDMMC_GetResponse>
 800559c:	4602      	mov	r2, r0
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	210c      	movs	r1, #12
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 f9e0 	bl	800596e <SDMMC_GetResponse>
 80055ae:	4602      	mov	r2, r0
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d00d      	beq.n	80055da <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f107 020e 	add.w	r2, r7, #14
 80055c6:	4611      	mov	r1, r2
 80055c8:	4618      	mov	r0, r3
 80055ca:	f000 fbbe 	bl	8005d4a <SDMMC_CmdSetRelAdd>
 80055ce:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80055d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <SD_InitCard+0xae>
    {
      return errorstate;
 80055d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d8:	e072      	b.n	80056c0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055de:	2b03      	cmp	r3, #3
 80055e0:	d036      	beq.n	8005650 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80055e2:	89fb      	ldrh	r3, [r7, #14]
 80055e4:	461a      	mov	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f2:	041b      	lsls	r3, r3, #16
 80055f4:	4619      	mov	r1, r3
 80055f6:	4610      	mov	r0, r2
 80055f8:	f000 fb88 	bl	8005d0c <SDMMC_CmdSendCSD>
 80055fc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80055fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005606:	e05b      	b.n	80056c0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2100      	movs	r1, #0
 800560e:	4618      	mov	r0, r3
 8005610:	f000 f9ad 	bl	800596e <SDMMC_GetResponse>
 8005614:	4602      	mov	r2, r0
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2104      	movs	r1, #4
 8005620:	4618      	mov	r0, r3
 8005622:	f000 f9a4 	bl	800596e <SDMMC_GetResponse>
 8005626:	4602      	mov	r2, r0
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2108      	movs	r1, #8
 8005632:	4618      	mov	r0, r3
 8005634:	f000 f99b 	bl	800596e <SDMMC_GetResponse>
 8005638:	4602      	mov	r2, r0
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	210c      	movs	r1, #12
 8005644:	4618      	mov	r0, r3
 8005646:	f000 f992 	bl	800596e <SDMMC_GetResponse>
 800564a:	4602      	mov	r2, r0
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2104      	movs	r1, #4
 8005656:	4618      	mov	r0, r3
 8005658:	f000 f989 	bl	800596e <SDMMC_GetResponse>
 800565c:	4603      	mov	r3, r0
 800565e:	0d1a      	lsrs	r2, r3, #20
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005664:	f107 0310 	add.w	r3, r7, #16
 8005668:	4619      	mov	r1, r3
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f7ff fd6e 	bl	800514c <HAL_SD_GetCardCSD>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005676:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800567a:	e021      	b.n	80056c0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6819      	ldr	r1, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005684:	041b      	lsls	r3, r3, #16
 8005686:	2200      	movs	r2, #0
 8005688:	461c      	mov	r4, r3
 800568a:	4615      	mov	r5, r2
 800568c:	4622      	mov	r2, r4
 800568e:	462b      	mov	r3, r5
 8005690:	4608      	mov	r0, r1
 8005692:	f000 fa77 	bl	8005b84 <SDMMC_CmdSelDesel>
 8005696:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <SD_InitCard+0x176>
  {
    return errorstate;
 800569e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a0:	e00e      	b.n	80056c0 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681d      	ldr	r5, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	466c      	mov	r4, sp
 80056aa:	f103 0210 	add.w	r2, r3, #16
 80056ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80056b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80056b4:	3304      	adds	r3, #4
 80056b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056b8:	4628      	mov	r0, r5
 80056ba:	f000 f8bb 	bl	8005834 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3740      	adds	r7, #64	; 0x40
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bdb0      	pop	{r4, r5, r7, pc}

080056c8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056d0:	2300      	movs	r3, #0
 80056d2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80056d4:	2300      	movs	r3, #0
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	2300      	movs	r3, #0
 80056da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 fa72 	bl	8005bca <SDMMC_CmdGoIdleState>
 80056e6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	e072      	b.n	80057d8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 fa85 	bl	8005c06 <SDMMC_CmdOperCond>
 80056fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00d      	beq.n	8005720 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4618      	mov	r0, r3
 8005710:	f000 fa5b 	bl	8005bca <SDMMC_CmdGoIdleState>
 8005714:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d004      	beq.n	8005726 <SD_PowerON+0x5e>
    {
      return errorstate;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	e05b      	b.n	80057d8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800572a:	2b01      	cmp	r3, #1
 800572c:	d137      	bne.n	800579e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2100      	movs	r1, #0
 8005734:	4618      	mov	r0, r3
 8005736:	f000 fa85 	bl	8005c44 <SDMMC_CmdAppCommand>
 800573a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d02d      	beq.n	800579e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005742:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005746:	e047      	b.n	80057d8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2100      	movs	r1, #0
 800574e:	4618      	mov	r0, r3
 8005750:	f000 fa78 	bl	8005c44 <SDMMC_CmdAppCommand>
 8005754:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <SD_PowerON+0x98>
    {
      return errorstate;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	e03b      	b.n	80057d8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	491e      	ldr	r1, [pc, #120]	; (80057e0 <SD_PowerON+0x118>)
 8005766:	4618      	mov	r0, r3
 8005768:	f000 fa8e 	bl	8005c88 <SDMMC_CmdAppOperCommand>
 800576c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005774:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005778:	e02e      	b.n	80057d8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2100      	movs	r1, #0
 8005780:	4618      	mov	r0, r3
 8005782:	f000 f8f4 	bl	800596e <SDMMC_GetResponse>
 8005786:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	0fdb      	lsrs	r3, r3, #31
 800578c:	2b01      	cmp	r3, #1
 800578e:	d101      	bne.n	8005794 <SD_PowerON+0xcc>
 8005790:	2301      	movs	r3, #1
 8005792:	e000      	b.n	8005796 <SD_PowerON+0xce>
 8005794:	2300      	movs	r3, #0
 8005796:	613b      	str	r3, [r7, #16]

    count++;
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	3301      	adds	r3, #1
 800579c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d802      	bhi.n	80057ae <SD_PowerON+0xe6>
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0cc      	beq.n	8005748 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d902      	bls.n	80057be <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80057b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057bc:	e00c      	b.n	80057d8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d003      	beq.n	80057d0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	645a      	str	r2, [r3, #68]	; 0x44
 80057ce:	e002      	b.n	80057d6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3718      	adds	r7, #24
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	c1100000 	.word	0xc1100000

080057e4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d102      	bne.n	80057fa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80057f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057f8:	e018      	b.n	800582c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005802:	041b      	lsls	r3, r3, #16
 8005804:	4619      	mov	r1, r3
 8005806:	4610      	mov	r0, r2
 8005808:	f000 fac0 	bl	8005d8c <SDMMC_CmdSendStatus>
 800580c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d001      	beq.n	8005818 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	e009      	b.n	800582c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2100      	movs	r1, #0
 800581e:	4618      	mov	r0, r3
 8005820:	f000 f8a5 	bl	800596e <SDMMC_GetResponse>
 8005824:	4602      	mov	r2, r0
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005834:	b084      	sub	sp, #16
 8005836:	b480      	push	{r7}
 8005838:	b085      	sub	sp, #20
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
 800583e:	f107 001c 	add.w	r0, r7, #28
 8005842:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005846:	2300      	movs	r3, #0
 8005848:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800584a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800584c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800584e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005852:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005854:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005856:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800585a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800585c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800585e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	4313      	orrs	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	4b07      	ldr	r3, [pc, #28]	; (8005888 <SDMMC_Init+0x54>)
 800586c:	4013      	ands	r3, r2
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	431a      	orrs	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	b004      	add	sp, #16
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	ffff8100 	.word	0xffff8100

0800588c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800589a:	4618      	mov	r0, r3
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80058a6:	b480      	push	{r7}
 80058a8:	b083      	sub	sp, #12
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2203      	movs	r2, #3
 80058d4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0303 	and.w	r3, r3, #3
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800590a:	2300      	movs	r3, #0
 800590c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800591e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005924:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800592a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	4313      	orrs	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	4b06      	ldr	r3, [pc, #24]	; (8005950 <SDMMC_SendCommand+0x50>)
 8005938:	4013      	ands	r3, r2
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	431a      	orrs	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	fffff000 	.word	0xfffff000

08005954 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	b2db      	uxtb	r3, r3
}
 8005962:	4618      	mov	r0, r3
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800596e:	b480      	push	{r7}
 8005970:	b085      	sub	sp, #20
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
 8005976:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	3314      	adds	r3, #20
 800597c:	461a      	mov	r2, r3
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	4413      	add	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
}  
 8005988:	4618      	mov	r0, r3
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800599e:	2300      	movs	r3, #0
 80059a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80059ba:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80059c0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80059c6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	431a      	orrs	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80059de:	2300      	movs	r3, #0

}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b088      	sub	sp, #32
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80059fa:	2310      	movs	r3, #16
 80059fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80059fe:	2340      	movs	r3, #64	; 0x40
 8005a00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005a02:	2300      	movs	r3, #0
 8005a04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005a0c:	f107 0308 	add.w	r3, r7, #8
 8005a10:	4619      	mov	r1, r3
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7ff ff74 	bl	8005900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a1c:	2110      	movs	r1, #16
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f9d6 	bl	8005dd0 <SDMMC_GetCmdResp1>
 8005a24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a26:	69fb      	ldr	r3, [r7, #28]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3720      	adds	r7, #32
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005a3e:	2311      	movs	r3, #17
 8005a40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005a42:	2340      	movs	r3, #64	; 0x40
 8005a44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005a46:	2300      	movs	r3, #0
 8005a48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005a50:	f107 0308 	add.w	r3, r7, #8
 8005a54:	4619      	mov	r1, r3
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7ff ff52 	bl	8005900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a60:	2111      	movs	r1, #17
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f9b4 	bl	8005dd0 <SDMMC_GetCmdResp1>
 8005a68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a6a:	69fb      	ldr	r3, [r7, #28]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3720      	adds	r7, #32
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b088      	sub	sp, #32
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005a82:	2312      	movs	r3, #18
 8005a84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005a86:	2340      	movs	r3, #64	; 0x40
 8005a88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005a8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005a94:	f107 0308 	add.w	r3, r7, #8
 8005a98:	4619      	mov	r1, r3
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7ff ff30 	bl	8005900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aa4:	2112      	movs	r1, #18
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f992 	bl	8005dd0 <SDMMC_GetCmdResp1>
 8005aac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005aae:	69fb      	ldr	r3, [r7, #28]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3720      	adds	r7, #32
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b088      	sub	sp, #32
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005ac6:	2318      	movs	r3, #24
 8005ac8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005aca:	2340      	movs	r3, #64	; 0x40
 8005acc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ad6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ad8:	f107 0308 	add.w	r3, r7, #8
 8005adc:	4619      	mov	r1, r3
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7ff ff0e 	bl	8005900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae8:	2118      	movs	r1, #24
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f970 	bl	8005dd0 <SDMMC_GetCmdResp1>
 8005af0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005af2:	69fb      	ldr	r3, [r7, #28]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3720      	adds	r7, #32
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b088      	sub	sp, #32
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005b0a:	2319      	movs	r3, #25
 8005b0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005b0e:	2340      	movs	r3, #64	; 0x40
 8005b10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b12:	2300      	movs	r3, #0
 8005b14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b1c:	f107 0308 	add.w	r3, r7, #8
 8005b20:	4619      	mov	r1, r3
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7ff feec 	bl	8005900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b2c:	2119      	movs	r1, #25
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f94e 	bl	8005dd0 <SDMMC_GetCmdResp1>
 8005b34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b36:	69fb      	ldr	r3, [r7, #28]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3720      	adds	r7, #32
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b088      	sub	sp, #32
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005b4c:	230c      	movs	r3, #12
 8005b4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005b50:	2340      	movs	r3, #64	; 0x40
 8005b52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b54:	2300      	movs	r3, #0
 8005b56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b5e:	f107 0308 	add.w	r3, r7, #8
 8005b62:	4619      	mov	r1, r3
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7ff fecb 	bl	8005900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8005b6a:	4a05      	ldr	r2, [pc, #20]	; (8005b80 <SDMMC_CmdStopTransfer+0x40>)
 8005b6c:	210c      	movs	r1, #12
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f92e 	bl	8005dd0 <SDMMC_GetCmdResp1>
 8005b74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b76:	69fb      	ldr	r3, [r7, #28]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3720      	adds	r7, #32
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	05f5e100 	.word	0x05f5e100

08005b84 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b08a      	sub	sp, #40	; 0x28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005b94:	2307      	movs	r3, #7
 8005b96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005b98:	2340      	movs	r3, #64	; 0x40
 8005b9a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ba0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ba4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ba6:	f107 0310 	add.w	r3, r7, #16
 8005baa:	4619      	mov	r1, r3
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f7ff fea7 	bl	8005900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8005bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb6:	2107      	movs	r1, #7
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f000 f909 	bl	8005dd0 <SDMMC_GetCmdResp1>
 8005bbe:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3728      	adds	r7, #40	; 0x28
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b088      	sub	sp, #32
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005bde:	2300      	movs	r3, #0
 8005be0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005be6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005be8:	f107 0308 	add.w	r3, r7, #8
 8005bec:	4619      	mov	r1, r3
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7ff fe86 	bl	8005900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 fb23 	bl	8006240 <SDMMC_GetCmdError>
 8005bfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005bfc:	69fb      	ldr	r3, [r7, #28]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3720      	adds	r7, #32
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b088      	sub	sp, #32
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005c0e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005c12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005c14:	2308      	movs	r3, #8
 8005c16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c18:	2340      	movs	r3, #64	; 0x40
 8005c1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005c26:	f107 0308 	add.w	r3, r7, #8
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f7ff fe67 	bl	8005900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 fab6 	bl	80061a4 <SDMMC_GetCmdResp7>
 8005c38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c3a:	69fb      	ldr	r3, [r7, #28]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3720      	adds	r7, #32
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b088      	sub	sp, #32
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005c52:	2337      	movs	r3, #55	; 0x37
 8005c54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c56:	2340      	movs	r3, #64	; 0x40
 8005c58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005c64:	f107 0308 	add.w	r3, r7, #8
 8005c68:	4619      	mov	r1, r3
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f7ff fe48 	bl	8005900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c74:	2137      	movs	r1, #55	; 0x37
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f8aa 	bl	8005dd0 <SDMMC_GetCmdResp1>
 8005c7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c7e:	69fb      	ldr	r3, [r7, #28]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3720      	adds	r7, #32
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b088      	sub	sp, #32
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	4b0d      	ldr	r3, [pc, #52]	; (8005ccc <SDMMC_CmdAppOperCommand+0x44>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005c9a:	2329      	movs	r3, #41	; 0x29
 8005c9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c9e:	2340      	movs	r3, #64	; 0x40
 8005ca0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005caa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005cac:	f107 0308 	add.w	r3, r7, #8
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff fe24 	bl	8005900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f9bf 	bl	800603c <SDMMC_GetCmdResp3>
 8005cbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005cc0:	69fb      	ldr	r3, [r7, #28]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3720      	adds	r7, #32
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	80100000 	.word	0x80100000

08005cd0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b088      	sub	sp, #32
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005cdc:	2302      	movs	r3, #2
 8005cde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005ce0:	23c0      	movs	r3, #192	; 0xc0
 8005ce2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005cee:	f107 0308 	add.w	r3, r7, #8
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7ff fe03 	bl	8005900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f956 	bl	8005fac <SDMMC_GetCmdResp2>
 8005d00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d02:	69fb      	ldr	r3, [r7, #28]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3720      	adds	r7, #32
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b088      	sub	sp, #32
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005d1a:	2309      	movs	r3, #9
 8005d1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005d1e:	23c0      	movs	r3, #192	; 0xc0
 8005d20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005d22:	2300      	movs	r3, #0
 8005d24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005d2c:	f107 0308 	add.w	r3, r7, #8
 8005d30:	4619      	mov	r1, r3
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7ff fde4 	bl	8005900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f937 	bl	8005fac <SDMMC_GetCmdResp2>
 8005d3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d40:	69fb      	ldr	r3, [r7, #28]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3720      	adds	r7, #32
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b088      	sub	sp, #32
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005d54:	2300      	movs	r3, #0
 8005d56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005d5c:	2340      	movs	r3, #64	; 0x40
 8005d5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005d60:	2300      	movs	r3, #0
 8005d62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005d6a:	f107 0308 	add.w	r3, r7, #8
 8005d6e:	4619      	mov	r1, r3
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f7ff fdc5 	bl	8005900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	2103      	movs	r1, #3
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f99c 	bl	80060b8 <SDMMC_GetCmdResp6>
 8005d80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d82:	69fb      	ldr	r3, [r7, #28]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3720      	adds	r7, #32
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b088      	sub	sp, #32
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005d9a:	230d      	movs	r3, #13
 8005d9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005d9e:	2340      	movs	r3, #64	; 0x40
 8005da0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005da2:	2300      	movs	r3, #0
 8005da4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005daa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005dac:	f107 0308 	add.w	r3, r7, #8
 8005db0:	4619      	mov	r1, r3
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7ff fda4 	bl	8005900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8005db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dbc:	210d      	movs	r1, #13
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f806 	bl	8005dd0 <SDMMC_GetCmdResp1>
 8005dc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005dc6:	69fb      	ldr	r3, [r7, #28]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3720      	adds	r7, #32
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b088      	sub	sp, #32
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	460b      	mov	r3, r1
 8005dda:	607a      	str	r2, [r7, #4]
 8005ddc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005dde:	4b70      	ldr	r3, [pc, #448]	; (8005fa0 <SDMMC_GetCmdResp1+0x1d0>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a70      	ldr	r2, [pc, #448]	; (8005fa4 <SDMMC_GetCmdResp1+0x1d4>)
 8005de4:	fba2 2303 	umull	r2, r3, r2, r3
 8005de8:	0a5a      	lsrs	r2, r3, #9
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	fb02 f303 	mul.w	r3, r2, r3
 8005df0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	1e5a      	subs	r2, r3, #1
 8005df6:	61fa      	str	r2, [r7, #28]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d102      	bne.n	8005e02 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005dfc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e00:	e0c9      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e06:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d0ef      	beq.n	8005df2 <SDMMC_GetCmdResp1+0x22>
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1ea      	bne.n	8005df2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d004      	beq.n	8005e32 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2204      	movs	r2, #4
 8005e2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005e2e:	2304      	movs	r3, #4
 8005e30:	e0b1      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d004      	beq.n	8005e48 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2201      	movs	r2, #1
 8005e42:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e0a6      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	22c5      	movs	r2, #197	; 0xc5
 8005e4c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f7ff fd80 	bl	8005954 <SDMMC_GetCommandResponse>
 8005e54:	4603      	mov	r3, r0
 8005e56:	461a      	mov	r2, r3
 8005e58:	7afb      	ldrb	r3, [r7, #11]
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d001      	beq.n	8005e62 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e099      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005e62:	2100      	movs	r1, #0
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f7ff fd82 	bl	800596e <SDMMC_GetResponse>
 8005e6a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	4b4e      	ldr	r3, [pc, #312]	; (8005fa8 <SDMMC_GetCmdResp1+0x1d8>)
 8005e70:	4013      	ands	r3, r2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005e76:	2300      	movs	r3, #0
 8005e78:	e08d      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	da02      	bge.n	8005e86 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005e80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e84:	e087      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005e90:	2340      	movs	r3, #64	; 0x40
 8005e92:	e080      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005e9e:	2380      	movs	r3, #128	; 0x80
 8005ea0:	e079      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d002      	beq.n	8005eb2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005eac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005eb0:	e071      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d002      	beq.n	8005ec2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005ebc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ec0:	e069      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005ecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ed0:	e061      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005edc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ee0:	e059      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d002      	beq.n	8005ef2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ef0:	e051      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005efc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f00:	e049      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d002      	beq.n	8005f12 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005f0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005f10:	e041      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d002      	beq.n	8005f22 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005f1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f20:	e039      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d002      	beq.n	8005f32 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005f2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f30:	e031      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005f3c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005f40:	e029      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005f4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005f50:	e021      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d002      	beq.n	8005f62 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005f5c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005f60:	e019      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d002      	beq.n	8005f72 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005f6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005f70:	e011      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d002      	beq.n	8005f82 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005f7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005f80:	e009      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f003 0308 	and.w	r3, r3, #8
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d002      	beq.n	8005f92 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005f8c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005f90:	e001      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005f92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3720      	adds	r7, #32
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	20000034 	.word	0x20000034
 8005fa4:	10624dd3 	.word	0x10624dd3
 8005fa8:	fdffe008 	.word	0xfdffe008

08005fac <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005fb4:	4b1f      	ldr	r3, [pc, #124]	; (8006034 <SDMMC_GetCmdResp2+0x88>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a1f      	ldr	r2, [pc, #124]	; (8006038 <SDMMC_GetCmdResp2+0x8c>)
 8005fba:	fba2 2303 	umull	r2, r3, r2, r3
 8005fbe:	0a5b      	lsrs	r3, r3, #9
 8005fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fc4:	fb02 f303 	mul.w	r3, r2, r3
 8005fc8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	1e5a      	subs	r2, r3, #1
 8005fce:	60fa      	str	r2, [r7, #12]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d102      	bne.n	8005fda <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005fd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005fd8:	e026      	b.n	8006028 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fde:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d0ef      	beq.n	8005fca <SDMMC_GetCmdResp2+0x1e>
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1ea      	bne.n	8005fca <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff8:	f003 0304 	and.w	r3, r3, #4
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d004      	beq.n	800600a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2204      	movs	r2, #4
 8006004:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006006:	2304      	movs	r3, #4
 8006008:	e00e      	b.n	8006028 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d004      	beq.n	8006020 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800601c:	2301      	movs	r3, #1
 800601e:	e003      	b.n	8006028 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	22c5      	movs	r2, #197	; 0xc5
 8006024:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3714      	adds	r7, #20
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr
 8006034:	20000034 	.word	0x20000034
 8006038:	10624dd3 	.word	0x10624dd3

0800603c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006044:	4b1a      	ldr	r3, [pc, #104]	; (80060b0 <SDMMC_GetCmdResp3+0x74>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a1a      	ldr	r2, [pc, #104]	; (80060b4 <SDMMC_GetCmdResp3+0x78>)
 800604a:	fba2 2303 	umull	r2, r3, r2, r3
 800604e:	0a5b      	lsrs	r3, r3, #9
 8006050:	f241 3288 	movw	r2, #5000	; 0x1388
 8006054:	fb02 f303 	mul.w	r3, r2, r3
 8006058:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	1e5a      	subs	r2, r3, #1
 800605e:	60fa      	str	r2, [r7, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d102      	bne.n	800606a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006064:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006068:	e01b      	b.n	80060a2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800606e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0ef      	beq.n	800605a <SDMMC_GetCmdResp3+0x1e>
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1ea      	bne.n	800605a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006088:	f003 0304 	and.w	r3, r3, #4
 800608c:	2b00      	cmp	r3, #0
 800608e:	d004      	beq.n	800609a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2204      	movs	r2, #4
 8006094:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006096:	2304      	movs	r3, #4
 8006098:	e003      	b.n	80060a2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	22c5      	movs	r2, #197	; 0xc5
 800609e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	20000034 	.word	0x20000034
 80060b4:	10624dd3 	.word	0x10624dd3

080060b8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b088      	sub	sp, #32
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	460b      	mov	r3, r1
 80060c2:	607a      	str	r2, [r7, #4]
 80060c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80060c6:	4b35      	ldr	r3, [pc, #212]	; (800619c <SDMMC_GetCmdResp6+0xe4>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a35      	ldr	r2, [pc, #212]	; (80061a0 <SDMMC_GetCmdResp6+0xe8>)
 80060cc:	fba2 2303 	umull	r2, r3, r2, r3
 80060d0:	0a5b      	lsrs	r3, r3, #9
 80060d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80060d6:	fb02 f303 	mul.w	r3, r2, r3
 80060da:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	1e5a      	subs	r2, r3, #1
 80060e0:	61fa      	str	r2, [r7, #28]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d102      	bne.n	80060ec <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80060e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80060ea:	e052      	b.n	8006192 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d0ef      	beq.n	80060dc <SDMMC_GetCmdResp6+0x24>
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1ea      	bne.n	80060dc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800610a:	f003 0304 	and.w	r3, r3, #4
 800610e:	2b00      	cmp	r3, #0
 8006110:	d004      	beq.n	800611c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2204      	movs	r2, #4
 8006116:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006118:	2304      	movs	r3, #4
 800611a:	e03a      	b.n	8006192 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b00      	cmp	r3, #0
 8006126:	d004      	beq.n	8006132 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2201      	movs	r2, #1
 800612c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800612e:	2301      	movs	r3, #1
 8006130:	e02f      	b.n	8006192 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f7ff fc0e 	bl	8005954 <SDMMC_GetCommandResponse>
 8006138:	4603      	mov	r3, r0
 800613a:	461a      	mov	r2, r3
 800613c:	7afb      	ldrb	r3, [r7, #11]
 800613e:	4293      	cmp	r3, r2
 8006140:	d001      	beq.n	8006146 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006142:	2301      	movs	r3, #1
 8006144:	e025      	b.n	8006192 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	22c5      	movs	r2, #197	; 0xc5
 800614a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800614c:	2100      	movs	r1, #0
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f7ff fc0d 	bl	800596e <SDMMC_GetResponse>
 8006154:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d106      	bne.n	800616e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	0c1b      	lsrs	r3, r3, #16
 8006164:	b29a      	uxth	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800616a:	2300      	movs	r3, #0
 800616c:	e011      	b.n	8006192 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d002      	beq.n	800617e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006178:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800617c:	e009      	b.n	8006192 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800618c:	e001      	b.n	8006192 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800618e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006192:	4618      	mov	r0, r3
 8006194:	3720      	adds	r7, #32
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	20000034 	.word	0x20000034
 80061a0:	10624dd3 	.word	0x10624dd3

080061a4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80061ac:	4b22      	ldr	r3, [pc, #136]	; (8006238 <SDMMC_GetCmdResp7+0x94>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a22      	ldr	r2, [pc, #136]	; (800623c <SDMMC_GetCmdResp7+0x98>)
 80061b2:	fba2 2303 	umull	r2, r3, r2, r3
 80061b6:	0a5b      	lsrs	r3, r3, #9
 80061b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80061bc:	fb02 f303 	mul.w	r3, r2, r3
 80061c0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	1e5a      	subs	r2, r3, #1
 80061c6:	60fa      	str	r2, [r7, #12]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d102      	bne.n	80061d2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80061cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80061d0:	e02c      	b.n	800622c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d0ef      	beq.n	80061c2 <SDMMC_GetCmdResp7+0x1e>
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1ea      	bne.n	80061c2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f0:	f003 0304 	and.w	r3, r3, #4
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d004      	beq.n	8006202 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2204      	movs	r2, #4
 80061fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80061fe:	2304      	movs	r3, #4
 8006200:	e014      	b.n	800622c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	d004      	beq.n	8006218 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006214:	2301      	movs	r3, #1
 8006216:	e009      	b.n	800622c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800621c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006220:	2b00      	cmp	r3, #0
 8006222:	d002      	beq.n	800622a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2240      	movs	r2, #64	; 0x40
 8006228:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800622a:	2300      	movs	r3, #0
  
}
 800622c:	4618      	mov	r0, r3
 800622e:	3714      	adds	r7, #20
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr
 8006238:	20000034 	.word	0x20000034
 800623c:	10624dd3 	.word	0x10624dd3

08006240 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006248:	4b11      	ldr	r3, [pc, #68]	; (8006290 <SDMMC_GetCmdError+0x50>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a11      	ldr	r2, [pc, #68]	; (8006294 <SDMMC_GetCmdError+0x54>)
 800624e:	fba2 2303 	umull	r2, r3, r2, r3
 8006252:	0a5b      	lsrs	r3, r3, #9
 8006254:	f241 3288 	movw	r2, #5000	; 0x1388
 8006258:	fb02 f303 	mul.w	r3, r2, r3
 800625c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	1e5a      	subs	r2, r3, #1
 8006262:	60fa      	str	r2, [r7, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d102      	bne.n	800626e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006268:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800626c:	e009      	b.n	8006282 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006276:	2b00      	cmp	r3, #0
 8006278:	d0f1      	beq.n	800625e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	22c5      	movs	r2, #197	; 0xc5
 800627e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3714      	adds	r7, #20
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	20000034 	.word	0x20000034
 8006294:	10624dd3 	.word	0x10624dd3

08006298 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800629c:	4904      	ldr	r1, [pc, #16]	; (80062b0 <MX_FATFS_Init+0x18>)
 800629e:	4805      	ldr	r0, [pc, #20]	; (80062b4 <MX_FATFS_Init+0x1c>)
 80062a0:	f004 fe82 	bl	800afa8 <FATFS_LinkDriver>
 80062a4:	4603      	mov	r3, r0
 80062a6:	461a      	mov	r2, r3
 80062a8:	4b03      	ldr	r3, [pc, #12]	; (80062b8 <MX_FATFS_Init+0x20>)
 80062aa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80062ac:	bf00      	nop
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	200006b8 	.word	0x200006b8
 80062b4:	0800bb54 	.word	0x0800bb54
 80062b8:	200006b4 	.word	0x200006b4

080062bc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80062bc:	b480      	push	{r7}
 80062be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80062c0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80062d6:	f000 f86b 	bl	80063b0 <BSP_SD_IsDetected>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d001      	beq.n	80062e4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80062e0:	2302      	movs	r3, #2
 80062e2:	e005      	b.n	80062f0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80062e4:	4804      	ldr	r0, [pc, #16]	; (80062f8 <BSP_SD_Init+0x2c>)
 80062e6:	f7fe fb15 	bl	8004914 <HAL_SD_Init>
 80062ea:	4603      	mov	r3, r0
 80062ec:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80062ee:	79fb      	ldrb	r3, [r7, #7]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3708      	adds	r7, #8
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	20000158 	.word	0x20000158

080062fc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b088      	sub	sp, #32
 8006300:	af02      	add	r7, sp, #8
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800630a:	2300      	movs	r3, #0
 800630c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	68f9      	ldr	r1, [r7, #12]
 8006318:	4806      	ldr	r0, [pc, #24]	; (8006334 <BSP_SD_ReadBlocks+0x38>)
 800631a:	f7fe fbb3 	bl	8004a84 <HAL_SD_ReadBlocks>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d001      	beq.n	8006328 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006328:	7dfb      	ldrb	r3, [r7, #23]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3718      	adds	r7, #24
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	20000158 	.word	0x20000158

08006338 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af02      	add	r7, sp, #8
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
 8006344:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006346:	2300      	movs	r3, #0
 8006348:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	68f9      	ldr	r1, [r7, #12]
 8006354:	4806      	ldr	r0, [pc, #24]	; (8006370 <BSP_SD_WriteBlocks+0x38>)
 8006356:	f7fe fd73 	bl	8004e40 <HAL_SD_WriteBlocks>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006364:	7dfb      	ldrb	r3, [r7, #23]
}
 8006366:	4618      	mov	r0, r3
 8006368:	3718      	adds	r7, #24
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	20000158 	.word	0x20000158

08006374 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006378:	4805      	ldr	r0, [pc, #20]	; (8006390 <BSP_SD_GetCardState+0x1c>)
 800637a:	f7ff f8b7 	bl	80054ec <HAL_SD_GetCardState>
 800637e:	4603      	mov	r3, r0
 8006380:	2b04      	cmp	r3, #4
 8006382:	bf14      	ite	ne
 8006384:	2301      	movne	r3, #1
 8006386:	2300      	moveq	r3, #0
 8006388:	b2db      	uxtb	r3, r3
}
 800638a:	4618      	mov	r0, r3
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	20000158 	.word	0x20000158

08006394 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800639c:	6879      	ldr	r1, [r7, #4]
 800639e:	4803      	ldr	r0, [pc, #12]	; (80063ac <BSP_SD_GetCardInfo+0x18>)
 80063a0:	f7ff f878 	bl	8005494 <HAL_SD_GetCardInfo>
}
 80063a4:	bf00      	nop
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	20000158 	.word	0x20000158

080063b0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80063b6:	2301      	movs	r3, #1
 80063b8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80063ba:	79fb      	ldrb	r3, [r7, #7]
 80063bc:	b2db      	uxtb	r3, r3
}
 80063be:	4618      	mov	r0, r3
 80063c0:	370c      	adds	r7, #12
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
	...

080063cc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	4603      	mov	r3, r0
 80063d4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80063d6:	4b0b      	ldr	r3, [pc, #44]	; (8006404 <SD_CheckStatus+0x38>)
 80063d8:	2201      	movs	r2, #1
 80063da:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80063dc:	f7ff ffca 	bl	8006374 <BSP_SD_GetCardState>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d107      	bne.n	80063f6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80063e6:	4b07      	ldr	r3, [pc, #28]	; (8006404 <SD_CheckStatus+0x38>)
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	f023 0301 	bic.w	r3, r3, #1
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	4b04      	ldr	r3, [pc, #16]	; (8006404 <SD_CheckStatus+0x38>)
 80063f4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80063f6:	4b03      	ldr	r3, [pc, #12]	; (8006404 <SD_CheckStatus+0x38>)
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	b2db      	uxtb	r3, r3
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	2000003d 	.word	0x2000003d

08006408 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	4603      	mov	r3, r0
 8006410:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8006412:	4b0b      	ldr	r3, [pc, #44]	; (8006440 <SD_initialize+0x38>)
 8006414:	2201      	movs	r2, #1
 8006416:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006418:	f7ff ff58 	bl	80062cc <BSP_SD_Init>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d107      	bne.n	8006432 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8006422:	79fb      	ldrb	r3, [r7, #7]
 8006424:	4618      	mov	r0, r3
 8006426:	f7ff ffd1 	bl	80063cc <SD_CheckStatus>
 800642a:	4603      	mov	r3, r0
 800642c:	461a      	mov	r2, r3
 800642e:	4b04      	ldr	r3, [pc, #16]	; (8006440 <SD_initialize+0x38>)
 8006430:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006432:	4b03      	ldr	r3, [pc, #12]	; (8006440 <SD_initialize+0x38>)
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	b2db      	uxtb	r3, r3
}
 8006438:	4618      	mov	r0, r3
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	2000003d 	.word	0x2000003d

08006444 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	4603      	mov	r3, r0
 800644c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800644e:	79fb      	ldrb	r3, [r7, #7]
 8006450:	4618      	mov	r0, r3
 8006452:	f7ff ffbb 	bl	80063cc <SD_CheckStatus>
 8006456:	4603      	mov	r3, r0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	60b9      	str	r1, [r7, #8]
 8006468:	607a      	str	r2, [r7, #4]
 800646a:	603b      	str	r3, [r7, #0]
 800646c:	4603      	mov	r3, r0
 800646e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8006474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006478:	683a      	ldr	r2, [r7, #0]
 800647a:	6879      	ldr	r1, [r7, #4]
 800647c:	68b8      	ldr	r0, [r7, #8]
 800647e:	f7ff ff3d 	bl	80062fc <BSP_SD_ReadBlocks>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d107      	bne.n	8006498 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8006488:	bf00      	nop
 800648a:	f7ff ff73 	bl	8006374 <BSP_SD_GetCardState>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1fa      	bne.n	800648a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8006494:	2300      	movs	r3, #0
 8006496:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006498:	7dfb      	ldrb	r3, [r7, #23]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3718      	adds	r7, #24
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b086      	sub	sp, #24
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	607a      	str	r2, [r7, #4]
 80064ac:	603b      	str	r3, [r7, #0]
 80064ae:	4603      	mov	r3, r0
 80064b0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80064b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064ba:	683a      	ldr	r2, [r7, #0]
 80064bc:	6879      	ldr	r1, [r7, #4]
 80064be:	68b8      	ldr	r0, [r7, #8]
 80064c0:	f7ff ff3a 	bl	8006338 <BSP_SD_WriteBlocks>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d107      	bne.n	80064da <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80064ca:	bf00      	nop
 80064cc:	f7ff ff52 	bl	8006374 <BSP_SD_GetCardState>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1fa      	bne.n	80064cc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80064d6:	2300      	movs	r3, #0
 80064d8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80064da:	7dfb      	ldrb	r3, [r7, #23]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3718      	adds	r7, #24
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b08c      	sub	sp, #48	; 0x30
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	4603      	mov	r3, r0
 80064ec:	603a      	str	r2, [r7, #0]
 80064ee:	71fb      	strb	r3, [r7, #7]
 80064f0:	460b      	mov	r3, r1
 80064f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80064fa:	4b25      	ldr	r3, [pc, #148]	; (8006590 <SD_ioctl+0xac>)
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	f003 0301 	and.w	r3, r3, #1
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <SD_ioctl+0x28>
 8006508:	2303      	movs	r3, #3
 800650a:	e03c      	b.n	8006586 <SD_ioctl+0xa2>

  switch (cmd)
 800650c:	79bb      	ldrb	r3, [r7, #6]
 800650e:	2b03      	cmp	r3, #3
 8006510:	d834      	bhi.n	800657c <SD_ioctl+0x98>
 8006512:	a201      	add	r2, pc, #4	; (adr r2, 8006518 <SD_ioctl+0x34>)
 8006514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006518:	08006529 	.word	0x08006529
 800651c:	08006531 	.word	0x08006531
 8006520:	08006549 	.word	0x08006549
 8006524:	08006563 	.word	0x08006563
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006528:	2300      	movs	r3, #0
 800652a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800652e:	e028      	b.n	8006582 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006530:	f107 030c 	add.w	r3, r7, #12
 8006534:	4618      	mov	r0, r3
 8006536:	f7ff ff2d 	bl	8006394 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800653a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006540:	2300      	movs	r3, #0
 8006542:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006546:	e01c      	b.n	8006582 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006548:	f107 030c 	add.w	r3, r7, #12
 800654c:	4618      	mov	r0, r3
 800654e:	f7ff ff21 	bl	8006394 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006554:	b29a      	uxth	r2, r3
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800655a:	2300      	movs	r3, #0
 800655c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006560:	e00f      	b.n	8006582 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006562:	f107 030c 	add.w	r3, r7, #12
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff ff14 	bl	8006394 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800656c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656e:	0a5a      	lsrs	r2, r3, #9
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006574:	2300      	movs	r3, #0
 8006576:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800657a:	e002      	b.n	8006582 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800657c:	2304      	movs	r3, #4
 800657e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006582:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006586:	4618      	mov	r0, r3
 8006588:	3730      	adds	r7, #48	; 0x30
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	2000003d 	.word	0x2000003d

08006594 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	4603      	mov	r3, r0
 800659c:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 800659e:	20c8      	movs	r0, #200	; 0xc8
 80065a0:	f000 fc32 	bl	8006e08 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80065a4:	f000 fa7a 	bl	8006a9c <ft5336_I2C_InitializeIfRequired>
}
 80065a8:	bf00      	nop
 80065aa:	3708      	adds	r7, #8
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	4603      	mov	r3, r0
 80065b8:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80065ba:	bf00      	nop
 80065bc:	370c      	adds	r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b084      	sub	sp, #16
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	4603      	mov	r3, r0
 80065ce:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80065d0:	2300      	movs	r3, #0
 80065d2:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80065d4:	2300      	movs	r3, #0
 80065d6:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80065d8:	2300      	movs	r3, #0
 80065da:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80065dc:	f000 fa5e 	bl	8006a9c <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80065e0:	2300      	movs	r3, #0
 80065e2:	73fb      	strb	r3, [r7, #15]
 80065e4:	e010      	b.n	8006608 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80065e6:	88fb      	ldrh	r3, [r7, #6]
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	21a8      	movs	r1, #168	; 0xa8
 80065ec:	4618      	mov	r0, r3
 80065ee:	f000 fbed 	bl	8006dcc <TS_IO_Read>
 80065f2:	4603      	mov	r3, r0
 80065f4:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 80065f6:	7b7b      	ldrb	r3, [r7, #13]
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b51      	cmp	r3, #81	; 0x51
 80065fc:	d101      	bne.n	8006602 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80065fe:	2301      	movs	r3, #1
 8006600:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8006602:	7bfb      	ldrb	r3, [r7, #15]
 8006604:	3301      	adds	r3, #1
 8006606:	73fb      	strb	r3, [r7, #15]
 8006608:	7bfb      	ldrb	r3, [r7, #15]
 800660a:	2b02      	cmp	r3, #2
 800660c:	d802      	bhi.n	8006614 <ft5336_ReadID+0x4e>
 800660e:	7bbb      	ldrb	r3, [r7, #14]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d0e8      	beq.n	80065e6 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8006614:	7b7b      	ldrb	r3, [r7, #13]
 8006616:	b2db      	uxtb	r3, r3
 8006618:	b29b      	uxth	r3, r3
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b082      	sub	sp, #8
 8006626:	af00      	add	r7, sp, #0
 8006628:	4603      	mov	r3, r0
 800662a:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 800662c:	88fb      	ldrh	r3, [r7, #6]
 800662e:	4618      	mov	r0, r3
 8006630:	f000 fa44 	bl	8006abc <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8006634:	88fb      	ldrh	r3, [r7, #6]
 8006636:	4618      	mov	r0, r3
 8006638:	f000 f932 	bl	80068a0 <ft5336_TS_DisableIT>
}
 800663c:	bf00      	nop
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	4603      	mov	r3, r0
 800664c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800664e:	2300      	movs	r3, #0
 8006650:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8006652:	88fb      	ldrh	r3, [r7, #6]
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2102      	movs	r1, #2
 8006658:	4618      	mov	r0, r3
 800665a:	f000 fbb7 	bl	8006dcc <TS_IO_Read>
 800665e:	4603      	mov	r3, r0
 8006660:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8006662:	7bfb      	ldrb	r3, [r7, #15]
 8006664:	b2db      	uxtb	r3, r3
 8006666:	f003 030f 	and.w	r3, r3, #15
 800666a:	b2db      	uxtb	r3, r3
 800666c:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800666e:	7bfb      	ldrb	r3, [r7, #15]
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b05      	cmp	r3, #5
 8006674:	d901      	bls.n	800667a <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8006676:	2300      	movs	r3, #0
 8006678:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 800667a:	7bfb      	ldrb	r3, [r7, #15]
 800667c:	b2da      	uxtb	r2, r3
 800667e:	4b05      	ldr	r3, [pc, #20]	; (8006694 <ft5336_TS_DetectTouch+0x50>)
 8006680:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8006682:	4b04      	ldr	r3, [pc, #16]	; (8006694 <ft5336_TS_DetectTouch+0x50>)
 8006684:	2200      	movs	r2, #0
 8006686:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8006688:	7bfb      	ldrb	r3, [r7, #15]
 800668a:	b2db      	uxtb	r3, r3
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	200006bc 	.word	0x200006bc

08006698 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
 800669e:	4603      	mov	r3, r0
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
 80066a4:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80066a6:	2300      	movs	r3, #0
 80066a8:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80066aa:	2300      	movs	r3, #0
 80066ac:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80066ae:	2300      	movs	r3, #0
 80066b0:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80066b2:	2300      	movs	r3, #0
 80066b4:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80066b6:	2300      	movs	r3, #0
 80066b8:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80066ba:	4b6d      	ldr	r3, [pc, #436]	; (8006870 <ft5336_TS_GetXY+0x1d8>)
 80066bc:	789a      	ldrb	r2, [r3, #2]
 80066be:	4b6c      	ldr	r3, [pc, #432]	; (8006870 <ft5336_TS_GetXY+0x1d8>)
 80066c0:	785b      	ldrb	r3, [r3, #1]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	f080 80cf 	bcs.w	8006866 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80066c8:	4b69      	ldr	r3, [pc, #420]	; (8006870 <ft5336_TS_GetXY+0x1d8>)
 80066ca:	789b      	ldrb	r3, [r3, #2]
 80066cc:	2b09      	cmp	r3, #9
 80066ce:	d871      	bhi.n	80067b4 <ft5336_TS_GetXY+0x11c>
 80066d0:	a201      	add	r2, pc, #4	; (adr r2, 80066d8 <ft5336_TS_GetXY+0x40>)
 80066d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d6:	bf00      	nop
 80066d8:	08006701 	.word	0x08006701
 80066dc:	08006713 	.word	0x08006713
 80066e0:	08006725 	.word	0x08006725
 80066e4:	08006737 	.word	0x08006737
 80066e8:	08006749 	.word	0x08006749
 80066ec:	0800675b 	.word	0x0800675b
 80066f0:	0800676d 	.word	0x0800676d
 80066f4:	0800677f 	.word	0x0800677f
 80066f8:	08006791 	.word	0x08006791
 80066fc:	080067a3 	.word	0x080067a3
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8006700:	2304      	movs	r3, #4
 8006702:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8006704:	2303      	movs	r3, #3
 8006706:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8006708:	2306      	movs	r3, #6
 800670a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 800670c:	2305      	movs	r3, #5
 800670e:	753b      	strb	r3, [r7, #20]
      break;
 8006710:	e051      	b.n	80067b6 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8006712:	230a      	movs	r3, #10
 8006714:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8006716:	2309      	movs	r3, #9
 8006718:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800671a:	230c      	movs	r3, #12
 800671c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800671e:	230b      	movs	r3, #11
 8006720:	753b      	strb	r3, [r7, #20]
      break;
 8006722:	e048      	b.n	80067b6 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8006724:	2310      	movs	r3, #16
 8006726:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8006728:	230f      	movs	r3, #15
 800672a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 800672c:	2312      	movs	r3, #18
 800672e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8006730:	2311      	movs	r3, #17
 8006732:	753b      	strb	r3, [r7, #20]
      break;
 8006734:	e03f      	b.n	80067b6 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8006736:	2316      	movs	r3, #22
 8006738:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 800673a:	2315      	movs	r3, #21
 800673c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800673e:	2318      	movs	r3, #24
 8006740:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8006742:	2317      	movs	r3, #23
 8006744:	753b      	strb	r3, [r7, #20]
      break;
 8006746:	e036      	b.n	80067b6 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8006748:	231c      	movs	r3, #28
 800674a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 800674c:	231b      	movs	r3, #27
 800674e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8006750:	231e      	movs	r3, #30
 8006752:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8006754:	231d      	movs	r3, #29
 8006756:	753b      	strb	r3, [r7, #20]
      break;
 8006758:	e02d      	b.n	80067b6 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 800675a:	2322      	movs	r3, #34	; 0x22
 800675c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800675e:	2321      	movs	r3, #33	; 0x21
 8006760:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8006762:	2324      	movs	r3, #36	; 0x24
 8006764:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8006766:	2323      	movs	r3, #35	; 0x23
 8006768:	753b      	strb	r3, [r7, #20]
      break;
 800676a:	e024      	b.n	80067b6 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 800676c:	2328      	movs	r3, #40	; 0x28
 800676e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8006770:	2327      	movs	r3, #39	; 0x27
 8006772:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8006774:	232a      	movs	r3, #42	; 0x2a
 8006776:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8006778:	2329      	movs	r3, #41	; 0x29
 800677a:	753b      	strb	r3, [r7, #20]
      break;
 800677c:	e01b      	b.n	80067b6 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800677e:	232e      	movs	r3, #46	; 0x2e
 8006780:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8006782:	232d      	movs	r3, #45	; 0x2d
 8006784:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8006786:	2330      	movs	r3, #48	; 0x30
 8006788:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 800678a:	232f      	movs	r3, #47	; 0x2f
 800678c:	753b      	strb	r3, [r7, #20]
      break;
 800678e:	e012      	b.n	80067b6 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8006790:	2334      	movs	r3, #52	; 0x34
 8006792:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8006794:	2333      	movs	r3, #51	; 0x33
 8006796:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8006798:	2336      	movs	r3, #54	; 0x36
 800679a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 800679c:	2335      	movs	r3, #53	; 0x35
 800679e:	753b      	strb	r3, [r7, #20]
      break;
 80067a0:	e009      	b.n	80067b6 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80067a2:	233a      	movs	r3, #58	; 0x3a
 80067a4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80067a6:	2339      	movs	r3, #57	; 0x39
 80067a8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80067aa:	233c      	movs	r3, #60	; 0x3c
 80067ac:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80067ae:	233b      	movs	r3, #59	; 0x3b
 80067b0:	753b      	strb	r3, [r7, #20]
      break;
 80067b2:	e000      	b.n	80067b6 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80067b4:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80067b6:	89fb      	ldrh	r3, [r7, #14]
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	7dfa      	ldrb	r2, [r7, #23]
 80067bc:	4611      	mov	r1, r2
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 fb04 	bl	8006dcc <TS_IO_Read>
 80067c4:	4603      	mov	r3, r0
 80067c6:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80067c8:	7cfb      	ldrb	r3, [r7, #19]
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	4b29      	ldr	r3, [pc, #164]	; (8006874 <ft5336_TS_GetXY+0x1dc>)
 80067d0:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80067d2:	89fb      	ldrh	r3, [r7, #14]
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	7dba      	ldrb	r2, [r7, #22]
 80067d8:	4611      	mov	r1, r2
 80067da:	4618      	mov	r0, r3
 80067dc:	f000 faf6 	bl	8006dcc <TS_IO_Read>
 80067e0:	4603      	mov	r3, r0
 80067e2:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80067e4:	7cfb      	ldrb	r3, [r7, #19]
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	021b      	lsls	r3, r3, #8
 80067ea:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80067ee:	b21a      	sxth	r2, r3
 80067f0:	4b20      	ldr	r3, [pc, #128]	; (8006874 <ft5336_TS_GetXY+0x1dc>)
 80067f2:	881b      	ldrh	r3, [r3, #0]
 80067f4:	b21b      	sxth	r3, r3
 80067f6:	4313      	orrs	r3, r2
 80067f8:	b21b      	sxth	r3, r3
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	4b1d      	ldr	r3, [pc, #116]	; (8006874 <ft5336_TS_GetXY+0x1dc>)
 80067fe:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8006800:	4b1c      	ldr	r3, [pc, #112]	; (8006874 <ft5336_TS_GetXY+0x1dc>)
 8006802:	881a      	ldrh	r2, [r3, #0]
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8006808:	89fb      	ldrh	r3, [r7, #14]
 800680a:	b2db      	uxtb	r3, r3
 800680c:	7d7a      	ldrb	r2, [r7, #21]
 800680e:	4611      	mov	r1, r2
 8006810:	4618      	mov	r0, r3
 8006812:	f000 fadb 	bl	8006dcc <TS_IO_Read>
 8006816:	4603      	mov	r3, r0
 8006818:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800681a:	7cfb      	ldrb	r3, [r7, #19]
 800681c:	b2db      	uxtb	r3, r3
 800681e:	b29a      	uxth	r2, r3
 8006820:	4b14      	ldr	r3, [pc, #80]	; (8006874 <ft5336_TS_GetXY+0x1dc>)
 8006822:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8006824:	89fb      	ldrh	r3, [r7, #14]
 8006826:	b2db      	uxtb	r3, r3
 8006828:	7d3a      	ldrb	r2, [r7, #20]
 800682a:	4611      	mov	r1, r2
 800682c:	4618      	mov	r0, r3
 800682e:	f000 facd 	bl	8006dcc <TS_IO_Read>
 8006832:	4603      	mov	r3, r0
 8006834:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8006836:	7cfb      	ldrb	r3, [r7, #19]
 8006838:	b2db      	uxtb	r3, r3
 800683a:	021b      	lsls	r3, r3, #8
 800683c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006840:	b21a      	sxth	r2, r3
 8006842:	4b0c      	ldr	r3, [pc, #48]	; (8006874 <ft5336_TS_GetXY+0x1dc>)
 8006844:	881b      	ldrh	r3, [r3, #0]
 8006846:	b21b      	sxth	r3, r3
 8006848:	4313      	orrs	r3, r2
 800684a:	b21b      	sxth	r3, r3
 800684c:	b29a      	uxth	r2, r3
 800684e:	4b09      	ldr	r3, [pc, #36]	; (8006874 <ft5336_TS_GetXY+0x1dc>)
 8006850:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8006852:	4b08      	ldr	r3, [pc, #32]	; (8006874 <ft5336_TS_GetXY+0x1dc>)
 8006854:	881a      	ldrh	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800685a:	4b05      	ldr	r3, [pc, #20]	; (8006870 <ft5336_TS_GetXY+0x1d8>)
 800685c:	789b      	ldrb	r3, [r3, #2]
 800685e:	3301      	adds	r3, #1
 8006860:	b2da      	uxtb	r2, r3
 8006862:	4b03      	ldr	r3, [pc, #12]	; (8006870 <ft5336_TS_GetXY+0x1d8>)
 8006864:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8006866:	bf00      	nop
 8006868:	3718      	adds	r7, #24
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	200006bc 	.word	0x200006bc
 8006874:	200006c0 	.word	0x200006c0

08006878 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	4603      	mov	r3, r0
 8006880:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8006882:	2300      	movs	r3, #0
 8006884:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8006886:	2301      	movs	r3, #1
 8006888:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800688a:	88fb      	ldrh	r3, [r7, #6]
 800688c:	b2db      	uxtb	r3, r3
 800688e:	7bfa      	ldrb	r2, [r7, #15]
 8006890:	21a4      	movs	r1, #164	; 0xa4
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fa80 	bl	8006d98 <TS_IO_Write>
}
 8006898:	bf00      	nop
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	4603      	mov	r3, r0
 80068a8:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80068aa:	2300      	movs	r3, #0
 80068ac:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80068ae:	2300      	movs	r3, #0
 80068b0:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80068b2:	88fb      	ldrh	r3, [r7, #6]
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	7bfa      	ldrb	r2, [r7, #15]
 80068b8:	21a4      	movs	r1, #164	; 0xa4
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 fa6c 	bl	8006d98 <TS_IO_Write>
}
 80068c0:	bf00      	nop
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	4603      	mov	r3, r0
 80068d0:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	4603      	mov	r3, r0
 80068e8:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 80068ea:	bf00      	nop
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr

080068f6 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b084      	sub	sp, #16
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	4603      	mov	r3, r0
 80068fe:	6039      	str	r1, [r7, #0]
 8006900:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8006902:	2300      	movs	r3, #0
 8006904:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8006906:	88fb      	ldrh	r3, [r7, #6]
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2101      	movs	r1, #1
 800690c:	4618      	mov	r0, r3
 800690e:	f000 fa5d 	bl	8006dcc <TS_IO_Read>
 8006912:	4603      	mov	r3, r0
 8006914:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8006916:	7bfb      	ldrb	r3, [r7, #15]
 8006918:	b2db      	uxtb	r3, r3
 800691a:	461a      	mov	r2, r3
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	601a      	str	r2, [r3, #0]
}
 8006920:	bf00      	nop
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	60b9      	str	r1, [r7, #8]
 8006930:	607a      	str	r2, [r7, #4]
 8006932:	603b      	str	r3, [r7, #0]
 8006934:	4603      	mov	r3, r0
 8006936:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8006938:	2300      	movs	r3, #0
 800693a:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 800693c:	2300      	movs	r3, #0
 800693e:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8006940:	2300      	movs	r3, #0
 8006942:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8006944:	2300      	movs	r3, #0
 8006946:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8006948:	4b4d      	ldr	r3, [pc, #308]	; (8006a80 <ft5336_TS_GetTouchInfo+0x158>)
 800694a:	785b      	ldrb	r3, [r3, #1]
 800694c:	461a      	mov	r2, r3
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	4293      	cmp	r3, r2
 8006952:	f080 8090 	bcs.w	8006a76 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	2b09      	cmp	r3, #9
 800695a:	d85d      	bhi.n	8006a18 <ft5336_TS_GetTouchInfo+0xf0>
 800695c:	a201      	add	r2, pc, #4	; (adr r2, 8006964 <ft5336_TS_GetTouchInfo+0x3c>)
 800695e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006962:	bf00      	nop
 8006964:	0800698d 	.word	0x0800698d
 8006968:	0800699b 	.word	0x0800699b
 800696c:	080069a9 	.word	0x080069a9
 8006970:	080069b7 	.word	0x080069b7
 8006974:	080069c5 	.word	0x080069c5
 8006978:	080069d3 	.word	0x080069d3
 800697c:	080069e1 	.word	0x080069e1
 8006980:	080069ef 	.word	0x080069ef
 8006984:	080069fd 	.word	0x080069fd
 8006988:	08006a0b 	.word	0x08006a0b
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 800698c:	2303      	movs	r3, #3
 800698e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8006990:	2307      	movs	r3, #7
 8006992:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8006994:	2308      	movs	r3, #8
 8006996:	757b      	strb	r3, [r7, #21]
      break;
 8006998:	e03f      	b.n	8006a1a <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 800699a:	2309      	movs	r3, #9
 800699c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 800699e:	230d      	movs	r3, #13
 80069a0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80069a2:	230e      	movs	r3, #14
 80069a4:	757b      	strb	r3, [r7, #21]
      break;
 80069a6:	e038      	b.n	8006a1a <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 80069a8:	230f      	movs	r3, #15
 80069aa:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 80069ac:	2313      	movs	r3, #19
 80069ae:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 80069b0:	2314      	movs	r3, #20
 80069b2:	757b      	strb	r3, [r7, #21]
      break;
 80069b4:	e031      	b.n	8006a1a <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 80069b6:	2315      	movs	r3, #21
 80069b8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 80069ba:	2319      	movs	r3, #25
 80069bc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 80069be:	231a      	movs	r3, #26
 80069c0:	757b      	strb	r3, [r7, #21]
      break;
 80069c2:	e02a      	b.n	8006a1a <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 80069c4:	231b      	movs	r3, #27
 80069c6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 80069c8:	231f      	movs	r3, #31
 80069ca:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 80069cc:	2320      	movs	r3, #32
 80069ce:	757b      	strb	r3, [r7, #21]
      break;
 80069d0:	e023      	b.n	8006a1a <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 80069d2:	2321      	movs	r3, #33	; 0x21
 80069d4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 80069d6:	2325      	movs	r3, #37	; 0x25
 80069d8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 80069da:	2326      	movs	r3, #38	; 0x26
 80069dc:	757b      	strb	r3, [r7, #21]
      break;
 80069de:	e01c      	b.n	8006a1a <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 80069e0:	2327      	movs	r3, #39	; 0x27
 80069e2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 80069e4:	232b      	movs	r3, #43	; 0x2b
 80069e6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 80069e8:	232c      	movs	r3, #44	; 0x2c
 80069ea:	757b      	strb	r3, [r7, #21]
      break;
 80069ec:	e015      	b.n	8006a1a <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 80069ee:	232d      	movs	r3, #45	; 0x2d
 80069f0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 80069f2:	2331      	movs	r3, #49	; 0x31
 80069f4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 80069f6:	2332      	movs	r3, #50	; 0x32
 80069f8:	757b      	strb	r3, [r7, #21]
      break;
 80069fa:	e00e      	b.n	8006a1a <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 80069fc:	2333      	movs	r3, #51	; 0x33
 80069fe:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8006a00:	2337      	movs	r3, #55	; 0x37
 8006a02:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8006a04:	2338      	movs	r3, #56	; 0x38
 8006a06:	757b      	strb	r3, [r7, #21]
      break;
 8006a08:	e007      	b.n	8006a1a <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8006a0a:	2339      	movs	r3, #57	; 0x39
 8006a0c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8006a0e:	233d      	movs	r3, #61	; 0x3d
 8006a10:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8006a12:	233e      	movs	r3, #62	; 0x3e
 8006a14:	757b      	strb	r3, [r7, #21]
      break;
 8006a16:	e000      	b.n	8006a1a <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8006a18:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8006a1a:	89fb      	ldrh	r3, [r7, #14]
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	7dfa      	ldrb	r2, [r7, #23]
 8006a20:	4611      	mov	r1, r2
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 f9d2 	bl	8006dcc <TS_IO_Read>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8006a2c:	7d3b      	ldrb	r3, [r7, #20]
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	119b      	asrs	r3, r3, #6
 8006a32:	f003 0203 	and.w	r2, r3, #3
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8006a3a:	89fb      	ldrh	r3, [r7, #14]
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	7dba      	ldrb	r2, [r7, #22]
 8006a40:	4611      	mov	r1, r2
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 f9c2 	bl	8006dcc <TS_IO_Read>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8006a4c:	7d3b      	ldrb	r3, [r7, #20]
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	461a      	mov	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8006a56:	89fb      	ldrh	r3, [r7, #14]
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	7d7a      	ldrb	r2, [r7, #21]
 8006a5c:	4611      	mov	r1, r2
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 f9b4 	bl	8006dcc <TS_IO_Read>
 8006a64:	4603      	mov	r3, r0
 8006a66:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8006a68:	7d3b      	ldrb	r3, [r7, #20]
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	111b      	asrs	r3, r3, #4
 8006a6e:	f003 0204 	and.w	r2, r3, #4
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8006a76:	bf00      	nop
 8006a78:	3718      	adds	r7, #24
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	200006bc 	.word	0x200006bc

08006a84 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8006a84:	b480      	push	{r7}
 8006a86:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8006a88:	4b03      	ldr	r3, [pc, #12]	; (8006a98 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8006a8a:	781b      	ldrb	r3, [r3, #0]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	200006bc 	.word	0x200006bc

08006a9c <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8006aa0:	f7ff fff0 	bl	8006a84 <ft5336_Get_I2C_InitializedStatus>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d104      	bne.n	8006ab4 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8006aaa:	f000 f96b 	bl	8006d84 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8006aae:	4b02      	ldr	r3, [pc, #8]	; (8006ab8 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	701a      	strb	r2, [r3, #0]
  }
}
 8006ab4:	bf00      	nop
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	200006bc 	.word	0x200006bc

08006abc <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8006aca:	68fb      	ldr	r3, [r7, #12]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b08c      	sub	sp, #48	; 0x30
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a51      	ldr	r2, [pc, #324]	; (8006c28 <I2Cx_MspInit+0x150>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d14d      	bne.n	8006b84 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006ae8:	4b50      	ldr	r3, [pc, #320]	; (8006c2c <I2Cx_MspInit+0x154>)
 8006aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aec:	4a4f      	ldr	r2, [pc, #316]	; (8006c2c <I2Cx_MspInit+0x154>)
 8006aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af2:	6313      	str	r3, [r2, #48]	; 0x30
 8006af4:	4b4d      	ldr	r3, [pc, #308]	; (8006c2c <I2Cx_MspInit+0x154>)
 8006af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afc:	61bb      	str	r3, [r7, #24]
 8006afe:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8006b00:	2380      	movs	r3, #128	; 0x80
 8006b02:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8006b04:	2312      	movs	r3, #18
 8006b06:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8006b10:	2304      	movs	r3, #4
 8006b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006b14:	f107 031c 	add.w	r3, r7, #28
 8006b18:	4619      	mov	r1, r3
 8006b1a:	4845      	ldr	r0, [pc, #276]	; (8006c30 <I2Cx_MspInit+0x158>)
 8006b1c:	f7fb fed8 	bl	80028d0 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8006b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006b26:	f107 031c 	add.w	r3, r7, #28
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	4840      	ldr	r0, [pc, #256]	; (8006c30 <I2Cx_MspInit+0x158>)
 8006b2e:	f7fb fecf 	bl	80028d0 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8006b32:	4b3e      	ldr	r3, [pc, #248]	; (8006c2c <I2Cx_MspInit+0x154>)
 8006b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b36:	4a3d      	ldr	r2, [pc, #244]	; (8006c2c <I2Cx_MspInit+0x154>)
 8006b38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8006b3e:	4b3b      	ldr	r3, [pc, #236]	; (8006c2c <I2Cx_MspInit+0x154>)
 8006b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b46:	617b      	str	r3, [r7, #20]
 8006b48:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8006b4a:	4b38      	ldr	r3, [pc, #224]	; (8006c2c <I2Cx_MspInit+0x154>)
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	4a37      	ldr	r2, [pc, #220]	; (8006c2c <I2Cx_MspInit+0x154>)
 8006b50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006b54:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8006b56:	4b35      	ldr	r3, [pc, #212]	; (8006c2c <I2Cx_MspInit+0x154>)
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	4a34      	ldr	r2, [pc, #208]	; (8006c2c <I2Cx_MspInit+0x154>)
 8006b5c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006b60:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8006b62:	2200      	movs	r2, #0
 8006b64:	210f      	movs	r1, #15
 8006b66:	2048      	movs	r0, #72	; 0x48
 8006b68:	f7fb f947 	bl	8001dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8006b6c:	2048      	movs	r0, #72	; 0x48
 8006b6e:	f7fb f960 	bl	8001e32 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8006b72:	2200      	movs	r2, #0
 8006b74:	210f      	movs	r1, #15
 8006b76:	2049      	movs	r0, #73	; 0x49
 8006b78:	f7fb f93f 	bl	8001dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8006b7c:	2049      	movs	r0, #73	; 0x49
 8006b7e:	f7fb f958 	bl	8001e32 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8006b82:	e04d      	b.n	8006c20 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006b84:	4b29      	ldr	r3, [pc, #164]	; (8006c2c <I2Cx_MspInit+0x154>)
 8006b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b88:	4a28      	ldr	r2, [pc, #160]	; (8006c2c <I2Cx_MspInit+0x154>)
 8006b8a:	f043 0302 	orr.w	r3, r3, #2
 8006b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8006b90:	4b26      	ldr	r3, [pc, #152]	; (8006c2c <I2Cx_MspInit+0x154>)
 8006b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b94:	f003 0302 	and.w	r3, r3, #2
 8006b98:	613b      	str	r3, [r7, #16]
 8006b9a:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8006b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ba0:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8006ba2:	2312      	movs	r3, #18
 8006ba4:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8006baa:	2302      	movs	r3, #2
 8006bac:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8006bae:	2304      	movs	r3, #4
 8006bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006bb2:	f107 031c 	add.w	r3, r7, #28
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	481e      	ldr	r0, [pc, #120]	; (8006c34 <I2Cx_MspInit+0x15c>)
 8006bba:	f7fb fe89 	bl	80028d0 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8006bbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006bc4:	f107 031c 	add.w	r3, r7, #28
 8006bc8:	4619      	mov	r1, r3
 8006bca:	481a      	ldr	r0, [pc, #104]	; (8006c34 <I2Cx_MspInit+0x15c>)
 8006bcc:	f7fb fe80 	bl	80028d0 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8006bd0:	4b16      	ldr	r3, [pc, #88]	; (8006c2c <I2Cx_MspInit+0x154>)
 8006bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd4:	4a15      	ldr	r2, [pc, #84]	; (8006c2c <I2Cx_MspInit+0x154>)
 8006bd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006bda:	6413      	str	r3, [r2, #64]	; 0x40
 8006bdc:	4b13      	ldr	r3, [pc, #76]	; (8006c2c <I2Cx_MspInit+0x154>)
 8006bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006be4:	60fb      	str	r3, [r7, #12]
 8006be6:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8006be8:	4b10      	ldr	r3, [pc, #64]	; (8006c2c <I2Cx_MspInit+0x154>)
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	4a0f      	ldr	r2, [pc, #60]	; (8006c2c <I2Cx_MspInit+0x154>)
 8006bee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006bf2:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8006bf4:	4b0d      	ldr	r3, [pc, #52]	; (8006c2c <I2Cx_MspInit+0x154>)
 8006bf6:	6a1b      	ldr	r3, [r3, #32]
 8006bf8:	4a0c      	ldr	r2, [pc, #48]	; (8006c2c <I2Cx_MspInit+0x154>)
 8006bfa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006bfe:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8006c00:	2200      	movs	r2, #0
 8006c02:	210f      	movs	r1, #15
 8006c04:	201f      	movs	r0, #31
 8006c06:	f7fb f8f8 	bl	8001dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8006c0a:	201f      	movs	r0, #31
 8006c0c:	f7fb f911 	bl	8001e32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8006c10:	2200      	movs	r2, #0
 8006c12:	210f      	movs	r1, #15
 8006c14:	2020      	movs	r0, #32
 8006c16:	f7fb f8f0 	bl	8001dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8006c1a:	2020      	movs	r0, #32
 8006c1c:	f7fb f909 	bl	8001e32 <HAL_NVIC_EnableIRQ>
}
 8006c20:	bf00      	nop
 8006c22:	3730      	adds	r7, #48	; 0x30
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	200006c4 	.word	0x200006c4
 8006c2c:	40023800 	.word	0x40023800
 8006c30:	40021c00 	.word	0x40021c00
 8006c34:	40020400 	.word	0x40020400

08006c38 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f7fc fb0d 	bl	8003260 <HAL_I2C_GetState>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d125      	bne.n	8006c98 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a14      	ldr	r2, [pc, #80]	; (8006ca0 <I2Cx_Init+0x68>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d103      	bne.n	8006c5c <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a13      	ldr	r2, [pc, #76]	; (8006ca4 <I2Cx_Init+0x6c>)
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	e002      	b.n	8006c62 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a12      	ldr	r2, [pc, #72]	; (8006ca8 <I2Cx_Init+0x70>)
 8006c60:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a11      	ldr	r2, [pc, #68]	; (8006cac <I2Cx_Init+0x74>)
 8006c66:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7ff ff23 	bl	8006ad8 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f7fb ffe2 	bl	8002c5c <HAL_I2C_Init>
  }
}
 8006c98:	bf00      	nop
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	200006c4 	.word	0x200006c4
 8006ca4:	40005c00 	.word	0x40005c00
 8006ca8:	40005400 	.word	0x40005400
 8006cac:	40912732 	.word	0x40912732

08006cb0 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b08a      	sub	sp, #40	; 0x28
 8006cb4:	af04      	add	r7, sp, #16
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	4608      	mov	r0, r1
 8006cba:	4611      	mov	r1, r2
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	72fb      	strb	r3, [r7, #11]
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	813b      	strh	r3, [r7, #8]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8006cce:	7afb      	ldrb	r3, [r7, #11]
 8006cd0:	b299      	uxth	r1, r3
 8006cd2:	88f8      	ldrh	r0, [r7, #6]
 8006cd4:	893a      	ldrh	r2, [r7, #8]
 8006cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006cda:	9302      	str	r3, [sp, #8]
 8006cdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cde:	9301      	str	r3, [sp, #4]
 8006ce0:	6a3b      	ldr	r3, [r7, #32]
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f7fc f9a0 	bl	800302c <HAL_I2C_Mem_Read>
 8006cec:	4603      	mov	r3, r0
 8006cee:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8006cf0:	7dfb      	ldrb	r3, [r7, #23]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d004      	beq.n	8006d00 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8006cf6:	7afb      	ldrb	r3, [r7, #11]
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f000 f832 	bl	8006d64 <I2Cx_Error>
  }
  return status;    
 8006d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3718      	adds	r7, #24
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b08a      	sub	sp, #40	; 0x28
 8006d0e:	af04      	add	r7, sp, #16
 8006d10:	60f8      	str	r0, [r7, #12]
 8006d12:	4608      	mov	r0, r1
 8006d14:	4611      	mov	r1, r2
 8006d16:	461a      	mov	r2, r3
 8006d18:	4603      	mov	r3, r0
 8006d1a:	72fb      	strb	r3, [r7, #11]
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	813b      	strh	r3, [r7, #8]
 8006d20:	4613      	mov	r3, r2
 8006d22:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8006d24:	2300      	movs	r3, #0
 8006d26:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8006d28:	7afb      	ldrb	r3, [r7, #11]
 8006d2a:	b299      	uxth	r1, r3
 8006d2c:	88f8      	ldrh	r0, [r7, #6]
 8006d2e:	893a      	ldrh	r2, [r7, #8]
 8006d30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d34:	9302      	str	r3, [sp, #8]
 8006d36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d38:	9301      	str	r3, [sp, #4]
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	9300      	str	r3, [sp, #0]
 8006d3e:	4603      	mov	r3, r0
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f7fc f85f 	bl	8002e04 <HAL_I2C_Mem_Write>
 8006d46:	4603      	mov	r3, r0
 8006d48:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8006d4a:	7dfb      	ldrb	r3, [r7, #23]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d004      	beq.n	8006d5a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8006d50:	7afb      	ldrb	r3, [r7, #11]
 8006d52:	4619      	mov	r1, r3
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	f000 f805 	bl	8006d64 <I2Cx_Error>
  }
  return status;
 8006d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3718      	adds	r7, #24
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f7fc f803 	bl	8002d7c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7ff ff5e 	bl	8006c38 <I2Cx_Init>
}
 8006d7c:	bf00      	nop
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8006d88:	4802      	ldr	r0, [pc, #8]	; (8006d94 <TS_IO_Init+0x10>)
 8006d8a:	f7ff ff55 	bl	8006c38 <I2Cx_Init>
}
 8006d8e:	bf00      	nop
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	200006c4 	.word	0x200006c4

08006d98 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af02      	add	r7, sp, #8
 8006d9e:	4603      	mov	r3, r0
 8006da0:	71fb      	strb	r3, [r7, #7]
 8006da2:	460b      	mov	r3, r1
 8006da4:	71bb      	strb	r3, [r7, #6]
 8006da6:	4613      	mov	r3, r2
 8006da8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8006daa:	79bb      	ldrb	r3, [r7, #6]
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	79f9      	ldrb	r1, [r7, #7]
 8006db0:	2301      	movs	r3, #1
 8006db2:	9301      	str	r3, [sp, #4]
 8006db4:	1d7b      	adds	r3, r7, #5
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	2301      	movs	r3, #1
 8006dba:	4803      	ldr	r0, [pc, #12]	; (8006dc8 <TS_IO_Write+0x30>)
 8006dbc:	f7ff ffa5 	bl	8006d0a <I2Cx_WriteMultiple>
}
 8006dc0:	bf00      	nop
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	200006c4 	.word	0x200006c4

08006dcc <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af02      	add	r7, sp, #8
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	460a      	mov	r2, r1
 8006dd6:	71fb      	strb	r3, [r7, #7]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8006de0:	79bb      	ldrb	r3, [r7, #6]
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	79f9      	ldrb	r1, [r7, #7]
 8006de6:	2301      	movs	r3, #1
 8006de8:	9301      	str	r3, [sp, #4]
 8006dea:	f107 030f 	add.w	r3, r7, #15
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	2301      	movs	r3, #1
 8006df2:	4804      	ldr	r0, [pc, #16]	; (8006e04 <TS_IO_Read+0x38>)
 8006df4:	f7ff ff5c 	bl	8006cb0 <I2Cx_ReadMultiple>

  return read_value;
 8006df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	200006c4 	.word	0x200006c4

08006e08 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f7fa fef3 	bl	8001bfc <HAL_Delay>
}
 8006e16:	bf00      	nop
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
	...

08006e20 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8006e20:	b580      	push	{r7, lr}
 8006e22:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8006e24:	4b31      	ldr	r3, [pc, #196]	; (8006eec <BSP_LCD_Init+0xcc>)
 8006e26:	2228      	movs	r2, #40	; 0x28
 8006e28:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8006e2a:	4b30      	ldr	r3, [pc, #192]	; (8006eec <BSP_LCD_Init+0xcc>)
 8006e2c:	2209      	movs	r2, #9
 8006e2e:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8006e30:	4b2e      	ldr	r3, [pc, #184]	; (8006eec <BSP_LCD_Init+0xcc>)
 8006e32:	2235      	movs	r2, #53	; 0x35
 8006e34:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8006e36:	4b2d      	ldr	r3, [pc, #180]	; (8006eec <BSP_LCD_Init+0xcc>)
 8006e38:	220b      	movs	r2, #11
 8006e3a:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8006e3c:	4b2b      	ldr	r3, [pc, #172]	; (8006eec <BSP_LCD_Init+0xcc>)
 8006e3e:	f240 121b 	movw	r2, #283	; 0x11b
 8006e42:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8006e44:	4b29      	ldr	r3, [pc, #164]	; (8006eec <BSP_LCD_Init+0xcc>)
 8006e46:	f240 2215 	movw	r2, #533	; 0x215
 8006e4a:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8006e4c:	4b27      	ldr	r3, [pc, #156]	; (8006eec <BSP_LCD_Init+0xcc>)
 8006e4e:	f240 121d 	movw	r2, #285	; 0x11d
 8006e52:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8006e54:	4b25      	ldr	r3, [pc, #148]	; (8006eec <BSP_LCD_Init+0xcc>)
 8006e56:	f240 2235 	movw	r2, #565	; 0x235
 8006e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	4823      	ldr	r0, [pc, #140]	; (8006eec <BSP_LCD_Init+0xcc>)
 8006e60:	f000 fb88 	bl	8007574 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8006e64:	4b21      	ldr	r3, [pc, #132]	; (8006eec <BSP_LCD_Init+0xcc>)
 8006e66:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006e6a:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8006e6c:	4b1f      	ldr	r3, [pc, #124]	; (8006eec <BSP_LCD_Init+0xcc>)
 8006e6e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8006e72:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8006e74:	4b1d      	ldr	r3, [pc, #116]	; (8006eec <BSP_LCD_Init+0xcc>)
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8006e7c:	4b1b      	ldr	r3, [pc, #108]	; (8006eec <BSP_LCD_Init+0xcc>)
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8006e84:	4b19      	ldr	r3, [pc, #100]	; (8006eec <BSP_LCD_Init+0xcc>)
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8006e8c:	4b17      	ldr	r3, [pc, #92]	; (8006eec <BSP_LCD_Init+0xcc>)
 8006e8e:	2200      	movs	r2, #0
 8006e90:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8006e92:	4b16      	ldr	r3, [pc, #88]	; (8006eec <BSP_LCD_Init+0xcc>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8006e98:	4b14      	ldr	r3, [pc, #80]	; (8006eec <BSP_LCD_Init+0xcc>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8006e9e:	4b13      	ldr	r3, [pc, #76]	; (8006eec <BSP_LCD_Init+0xcc>)
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8006ea4:	4b11      	ldr	r3, [pc, #68]	; (8006eec <BSP_LCD_Init+0xcc>)
 8006ea6:	4a12      	ldr	r2, [pc, #72]	; (8006ef0 <BSP_LCD_Init+0xd0>)
 8006ea8:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8006eaa:	4810      	ldr	r0, [pc, #64]	; (8006eec <BSP_LCD_Init+0xcc>)
 8006eac:	f7fa f938 	bl	8001120 <HAL_LTDC_GetState>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d103      	bne.n	8006ebe <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	480c      	ldr	r0, [pc, #48]	; (8006eec <BSP_LCD_Init+0xcc>)
 8006eba:	f000 fa81 	bl	80073c0 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8006ebe:	480b      	ldr	r0, [pc, #44]	; (8006eec <BSP_LCD_Init+0xcc>)
 8006ec0:	f7f9 ff40 	bl	8000d44 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006eca:	480a      	ldr	r0, [pc, #40]	; (8006ef4 <BSP_LCD_Init+0xd4>)
 8006ecc:	f7fb feac 	bl	8002c28 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	2108      	movs	r1, #8
 8006ed4:	4808      	ldr	r0, [pc, #32]	; (8006ef8 <BSP_LCD_Init+0xd8>)
 8006ed6:	f7fb fea7 	bl	8002c28 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8006eda:	f000 fc6b 	bl	80077b4 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8006ede:	4807      	ldr	r0, [pc, #28]	; (8006efc <BSP_LCD_Init+0xdc>)
 8006ee0:	f000 f8d8 	bl	8007094 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	20000710 	.word	0x20000710
 8006ef0:	40016800 	.word	0x40016800
 8006ef4:	40022000 	.word	0x40022000
 8006ef8:	40022800 	.word	0x40022800
 8006efc:	20000040 	.word	0x20000040

08006f00 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8006f00:	b480      	push	{r7}
 8006f02:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8006f04:	4b06      	ldr	r3, [pc, #24]	; (8006f20 <BSP_LCD_GetXSize+0x20>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a06      	ldr	r2, [pc, #24]	; (8006f24 <BSP_LCD_GetXSize+0x24>)
 8006f0a:	2134      	movs	r1, #52	; 0x34
 8006f0c:	fb01 f303 	mul.w	r3, r1, r3
 8006f10:	4413      	add	r3, r2
 8006f12:	3360      	adds	r3, #96	; 0x60
 8006f14:	681b      	ldr	r3, [r3, #0]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	200007f8 	.word	0x200007f8
 8006f24:	20000710 	.word	0x20000710

08006f28 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8006f2c:	4b06      	ldr	r3, [pc, #24]	; (8006f48 <BSP_LCD_GetYSize+0x20>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a06      	ldr	r2, [pc, #24]	; (8006f4c <BSP_LCD_GetYSize+0x24>)
 8006f32:	2134      	movs	r1, #52	; 0x34
 8006f34:	fb01 f303 	mul.w	r3, r1, r3
 8006f38:	4413      	add	r3, r2
 8006f3a:	3364      	adds	r3, #100	; 0x64
 8006f3c:	681b      	ldr	r3, [r3, #0]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr
 8006f48:	200007f8 	.word	0x200007f8
 8006f4c:	20000710 	.word	0x20000710

08006f50 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b090      	sub	sp, #64	; 0x40
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	4603      	mov	r3, r0
 8006f58:	6039      	str	r1, [r7, #0]
 8006f5a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8006f60:	f7ff ffce 	bl	8006f00 <BSP_LCD_GetXSize>
 8006f64:	4603      	mov	r3, r0
 8006f66:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8006f6c:	f7ff ffdc 	bl	8006f28 <BSP_LCD_GetYSize>
 8006f70:	4603      	mov	r3, r0
 8006f72:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8006f74:	2300      	movs	r3, #0
 8006f76:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8006f7c:	23ff      	movs	r3, #255	; 0xff
 8006f7e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8006f80:	2300      	movs	r3, #0
 8006f82:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8006f84:	2300      	movs	r3, #0
 8006f86:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8006f90:	2300      	movs	r3, #0
 8006f92:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8006f96:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8006f9c:	2307      	movs	r3, #7
 8006f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8006fa0:	f7ff ffae 	bl	8006f00 <BSP_LCD_GetXSize>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8006fa8:	f7ff ffbe 	bl	8006f28 <BSP_LCD_GetYSize>
 8006fac:	4603      	mov	r3, r0
 8006fae:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8006fb0:	88fa      	ldrh	r2, [r7, #6]
 8006fb2:	f107 030c 	add.w	r3, r7, #12
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	4812      	ldr	r0, [pc, #72]	; (8007004 <BSP_LCD_LayerDefaultInit+0xb4>)
 8006fba:	f7fa f873 	bl	80010a4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8006fbe:	88fa      	ldrh	r2, [r7, #6]
 8006fc0:	4911      	ldr	r1, [pc, #68]	; (8007008 <BSP_LCD_LayerDefaultInit+0xb8>)
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	005b      	lsls	r3, r3, #1
 8006fc6:	4413      	add	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	440b      	add	r3, r1
 8006fcc:	3304      	adds	r3, #4
 8006fce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fd2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8006fd4:	88fa      	ldrh	r2, [r7, #6]
 8006fd6:	490c      	ldr	r1, [pc, #48]	; (8007008 <BSP_LCD_LayerDefaultInit+0xb8>)
 8006fd8:	4613      	mov	r3, r2
 8006fda:	005b      	lsls	r3, r3, #1
 8006fdc:	4413      	add	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	440b      	add	r3, r1
 8006fe2:	3308      	adds	r3, #8
 8006fe4:	4a09      	ldr	r2, [pc, #36]	; (800700c <BSP_LCD_LayerDefaultInit+0xbc>)
 8006fe6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8006fe8:	88fa      	ldrh	r2, [r7, #6]
 8006fea:	4907      	ldr	r1, [pc, #28]	; (8007008 <BSP_LCD_LayerDefaultInit+0xb8>)
 8006fec:	4613      	mov	r3, r2
 8006fee:	005b      	lsls	r3, r3, #1
 8006ff0:	4413      	add	r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	440b      	add	r3, r1
 8006ff6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8006ffa:	601a      	str	r2, [r3, #0]
}
 8006ffc:	bf00      	nop
 8006ffe:	3740      	adds	r7, #64	; 0x40
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	20000710 	.word	0x20000710
 8007008:	200007fc 	.word	0x200007fc
 800700c:	20000040 	.word	0x20000040

08007010 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8007018:	4a04      	ldr	r2, [pc, #16]	; (800702c <BSP_LCD_SelectLayer+0x1c>)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6013      	str	r3, [r2, #0]
} 
 800701e:	bf00      	nop
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	200007f8 	.word	0x200007f8

08007030 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8007038:	4b07      	ldr	r3, [pc, #28]	; (8007058 <BSP_LCD_SetTextColor+0x28>)
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	4907      	ldr	r1, [pc, #28]	; (800705c <BSP_LCD_SetTextColor+0x2c>)
 800703e:	4613      	mov	r3, r2
 8007040:	005b      	lsls	r3, r3, #1
 8007042:	4413      	add	r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	440b      	add	r3, r1
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	601a      	str	r2, [r3, #0]
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr
 8007058:	200007f8 	.word	0x200007f8
 800705c:	200007fc 	.word	0x200007fc

08007060 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8007068:	4b08      	ldr	r3, [pc, #32]	; (800708c <BSP_LCD_SetBackColor+0x2c>)
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	4908      	ldr	r1, [pc, #32]	; (8007090 <BSP_LCD_SetBackColor+0x30>)
 800706e:	4613      	mov	r3, r2
 8007070:	005b      	lsls	r3, r3, #1
 8007072:	4413      	add	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	440b      	add	r3, r1
 8007078:	3304      	adds	r3, #4
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	601a      	str	r2, [r3, #0]
}
 800707e:	bf00      	nop
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	200007f8 	.word	0x200007f8
 8007090:	200007fc 	.word	0x200007fc

08007094 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 800709c:	4b08      	ldr	r3, [pc, #32]	; (80070c0 <BSP_LCD_SetFont+0x2c>)
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	4908      	ldr	r1, [pc, #32]	; (80070c4 <BSP_LCD_SetFont+0x30>)
 80070a2:	4613      	mov	r3, r2
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	4413      	add	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	440b      	add	r3, r1
 80070ac:	3308      	adds	r3, #8
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	601a      	str	r2, [r3, #0]
}
 80070b2:	bf00      	nop
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	200007f8 	.word	0x200007f8
 80070c4:	200007fc 	.word	0x200007fc

080070c8 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80070c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af02      	add	r7, sp, #8
 80070ce:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80070d0:	4b0f      	ldr	r3, [pc, #60]	; (8007110 <BSP_LCD_Clear+0x48>)
 80070d2:	681c      	ldr	r4, [r3, #0]
 80070d4:	4b0e      	ldr	r3, [pc, #56]	; (8007110 <BSP_LCD_Clear+0x48>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a0e      	ldr	r2, [pc, #56]	; (8007114 <BSP_LCD_Clear+0x4c>)
 80070da:	2134      	movs	r1, #52	; 0x34
 80070dc:	fb01 f303 	mul.w	r3, r1, r3
 80070e0:	4413      	add	r3, r2
 80070e2:	335c      	adds	r3, #92	; 0x5c
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	461e      	mov	r6, r3
 80070e8:	f7ff ff0a 	bl	8006f00 <BSP_LCD_GetXSize>
 80070ec:	4605      	mov	r5, r0
 80070ee:	f7ff ff1b 	bl	8006f28 <BSP_LCD_GetYSize>
 80070f2:	4602      	mov	r2, r0
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	9301      	str	r3, [sp, #4]
 80070f8:	2300      	movs	r3, #0
 80070fa:	9300      	str	r3, [sp, #0]
 80070fc:	4613      	mov	r3, r2
 80070fe:	462a      	mov	r2, r5
 8007100:	4631      	mov	r1, r6
 8007102:	4620      	mov	r0, r4
 8007104:	f000 fb0a 	bl	800771c <LL_FillBuffer>
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007110:	200007f8 	.word	0x200007f8
 8007114:	20000710 	.word	0x20000710

08007118 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8007118:	b590      	push	{r4, r7, lr}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	4603      	mov	r3, r0
 8007120:	80fb      	strh	r3, [r7, #6]
 8007122:	460b      	mov	r3, r1
 8007124:	80bb      	strh	r3, [r7, #4]
 8007126:	4613      	mov	r3, r2
 8007128:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800712a:	4b1b      	ldr	r3, [pc, #108]	; (8007198 <BSP_LCD_DisplayChar+0x80>)
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	491b      	ldr	r1, [pc, #108]	; (800719c <BSP_LCD_DisplayChar+0x84>)
 8007130:	4613      	mov	r3, r2
 8007132:	005b      	lsls	r3, r3, #1
 8007134:	4413      	add	r3, r2
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	440b      	add	r3, r1
 800713a:	3308      	adds	r3, #8
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	6819      	ldr	r1, [r3, #0]
 8007140:	78fb      	ldrb	r3, [r7, #3]
 8007142:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8007146:	4b14      	ldr	r3, [pc, #80]	; (8007198 <BSP_LCD_DisplayChar+0x80>)
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	4c14      	ldr	r4, [pc, #80]	; (800719c <BSP_LCD_DisplayChar+0x84>)
 800714c:	4613      	mov	r3, r2
 800714e:	005b      	lsls	r3, r3, #1
 8007150:	4413      	add	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4423      	add	r3, r4
 8007156:	3308      	adds	r3, #8
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800715c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8007160:	4b0d      	ldr	r3, [pc, #52]	; (8007198 <BSP_LCD_DisplayChar+0x80>)
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	4c0d      	ldr	r4, [pc, #52]	; (800719c <BSP_LCD_DisplayChar+0x84>)
 8007166:	4613      	mov	r3, r2
 8007168:	005b      	lsls	r3, r3, #1
 800716a:	4413      	add	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4423      	add	r3, r4
 8007170:	3308      	adds	r3, #8
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	889b      	ldrh	r3, [r3, #4]
 8007176:	3307      	adds	r3, #7
 8007178:	2b00      	cmp	r3, #0
 800717a:	da00      	bge.n	800717e <BSP_LCD_DisplayChar+0x66>
 800717c:	3307      	adds	r3, #7
 800717e:	10db      	asrs	r3, r3, #3
 8007180:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8007184:	18ca      	adds	r2, r1, r3
 8007186:	88b9      	ldrh	r1, [r7, #4]
 8007188:	88fb      	ldrh	r3, [r7, #6]
 800718a:	4618      	mov	r0, r3
 800718c:	f000 fa0e 	bl	80075ac <DrawChar>
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	bd90      	pop	{r4, r7, pc}
 8007198:	200007f8 	.word	0x200007f8
 800719c:	200007fc 	.word	0x200007fc

080071a0 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80071a0:	b5b0      	push	{r4, r5, r7, lr}
 80071a2:	b088      	sub	sp, #32
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60ba      	str	r2, [r7, #8]
 80071a8:	461a      	mov	r2, r3
 80071aa:	4603      	mov	r3, r0
 80071ac:	81fb      	strh	r3, [r7, #14]
 80071ae:	460b      	mov	r3, r1
 80071b0:	81bb      	strh	r3, [r7, #12]
 80071b2:	4613      	mov	r3, r2
 80071b4:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80071b6:	2301      	movs	r3, #1
 80071b8:	83fb      	strh	r3, [r7, #30]
 80071ba:	2300      	movs	r3, #0
 80071bc:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80071be:	2300      	movs	r3, #0
 80071c0:	61bb      	str	r3, [r7, #24]
 80071c2:	2300      	movs	r3, #0
 80071c4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80071ca:	e002      	b.n	80071d2 <BSP_LCD_DisplayStringAt+0x32>
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	3301      	adds	r3, #1
 80071d0:	61bb      	str	r3, [r7, #24]
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	1c5a      	adds	r2, r3, #1
 80071d6:	617a      	str	r2, [r7, #20]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1f6      	bne.n	80071cc <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80071de:	f7ff fe8f 	bl	8006f00 <BSP_LCD_GetXSize>
 80071e2:	4601      	mov	r1, r0
 80071e4:	4b50      	ldr	r3, [pc, #320]	; (8007328 <BSP_LCD_DisplayStringAt+0x188>)
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	4850      	ldr	r0, [pc, #320]	; (800732c <BSP_LCD_DisplayStringAt+0x18c>)
 80071ea:	4613      	mov	r3, r2
 80071ec:	005b      	lsls	r3, r3, #1
 80071ee:	4413      	add	r3, r2
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4403      	add	r3, r0
 80071f4:	3308      	adds	r3, #8
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	889b      	ldrh	r3, [r3, #4]
 80071fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80071fe:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8007200:	79fb      	ldrb	r3, [r7, #7]
 8007202:	2b03      	cmp	r3, #3
 8007204:	d01c      	beq.n	8007240 <BSP_LCD_DisplayStringAt+0xa0>
 8007206:	2b03      	cmp	r3, #3
 8007208:	dc33      	bgt.n	8007272 <BSP_LCD_DisplayStringAt+0xd2>
 800720a:	2b01      	cmp	r3, #1
 800720c:	d002      	beq.n	8007214 <BSP_LCD_DisplayStringAt+0x74>
 800720e:	2b02      	cmp	r3, #2
 8007210:	d019      	beq.n	8007246 <BSP_LCD_DisplayStringAt+0xa6>
 8007212:	e02e      	b.n	8007272 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	1ad1      	subs	r1, r2, r3
 800721a:	4b43      	ldr	r3, [pc, #268]	; (8007328 <BSP_LCD_DisplayStringAt+0x188>)
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	4843      	ldr	r0, [pc, #268]	; (800732c <BSP_LCD_DisplayStringAt+0x18c>)
 8007220:	4613      	mov	r3, r2
 8007222:	005b      	lsls	r3, r3, #1
 8007224:	4413      	add	r3, r2
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4403      	add	r3, r0
 800722a:	3308      	adds	r3, #8
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	889b      	ldrh	r3, [r3, #4]
 8007230:	fb01 f303 	mul.w	r3, r1, r3
 8007234:	085b      	lsrs	r3, r3, #1
 8007236:	b29a      	uxth	r2, r3
 8007238:	89fb      	ldrh	r3, [r7, #14]
 800723a:	4413      	add	r3, r2
 800723c:	83fb      	strh	r3, [r7, #30]
      break;
 800723e:	e01b      	b.n	8007278 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8007240:	89fb      	ldrh	r3, [r7, #14]
 8007242:	83fb      	strh	r3, [r7, #30]
      break;
 8007244:	e018      	b.n	8007278 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	b299      	uxth	r1, r3
 800724e:	4b36      	ldr	r3, [pc, #216]	; (8007328 <BSP_LCD_DisplayStringAt+0x188>)
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	4836      	ldr	r0, [pc, #216]	; (800732c <BSP_LCD_DisplayStringAt+0x18c>)
 8007254:	4613      	mov	r3, r2
 8007256:	005b      	lsls	r3, r3, #1
 8007258:	4413      	add	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4403      	add	r3, r0
 800725e:	3308      	adds	r3, #8
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	889b      	ldrh	r3, [r3, #4]
 8007264:	fb11 f303 	smulbb	r3, r1, r3
 8007268:	b29a      	uxth	r2, r3
 800726a:	89fb      	ldrh	r3, [r7, #14]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	83fb      	strh	r3, [r7, #30]
      break;
 8007270:	e002      	b.n	8007278 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8007272:	89fb      	ldrh	r3, [r7, #14]
 8007274:	83fb      	strh	r3, [r7, #30]
      break;
 8007276:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8007278:	8bfb      	ldrh	r3, [r7, #30]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <BSP_LCD_DisplayStringAt+0xe6>
 800727e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007282:	2b00      	cmp	r3, #0
 8007284:	da1d      	bge.n	80072c2 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8007286:	2301      	movs	r3, #1
 8007288:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800728a:	e01a      	b.n	80072c2 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	781a      	ldrb	r2, [r3, #0]
 8007290:	89b9      	ldrh	r1, [r7, #12]
 8007292:	8bfb      	ldrh	r3, [r7, #30]
 8007294:	4618      	mov	r0, r3
 8007296:	f7ff ff3f 	bl	8007118 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800729a:	4b23      	ldr	r3, [pc, #140]	; (8007328 <BSP_LCD_DisplayStringAt+0x188>)
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	4923      	ldr	r1, [pc, #140]	; (800732c <BSP_LCD_DisplayStringAt+0x18c>)
 80072a0:	4613      	mov	r3, r2
 80072a2:	005b      	lsls	r3, r3, #1
 80072a4:	4413      	add	r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	440b      	add	r3, r1
 80072aa:	3308      	adds	r3, #8
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	889a      	ldrh	r2, [r3, #4]
 80072b0:	8bfb      	ldrh	r3, [r7, #30]
 80072b2:	4413      	add	r3, r2
 80072b4:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	3301      	adds	r3, #1
 80072ba:	60bb      	str	r3, [r7, #8]
    i++;
 80072bc:	8bbb      	ldrh	r3, [r7, #28]
 80072be:	3301      	adds	r3, #1
 80072c0:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	bf14      	ite	ne
 80072ca:	2301      	movne	r3, #1
 80072cc:	2300      	moveq	r3, #0
 80072ce:	b2dc      	uxtb	r4, r3
 80072d0:	f7ff fe16 	bl	8006f00 <BSP_LCD_GetXSize>
 80072d4:	8bb9      	ldrh	r1, [r7, #28]
 80072d6:	4b14      	ldr	r3, [pc, #80]	; (8007328 <BSP_LCD_DisplayStringAt+0x188>)
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	4d14      	ldr	r5, [pc, #80]	; (800732c <BSP_LCD_DisplayStringAt+0x18c>)
 80072dc:	4613      	mov	r3, r2
 80072de:	005b      	lsls	r3, r3, #1
 80072e0:	4413      	add	r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	442b      	add	r3, r5
 80072e6:	3308      	adds	r3, #8
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	889b      	ldrh	r3, [r3, #4]
 80072ec:	fb01 f303 	mul.w	r3, r1, r3
 80072f0:	1ac3      	subs	r3, r0, r3
 80072f2:	b299      	uxth	r1, r3
 80072f4:	4b0c      	ldr	r3, [pc, #48]	; (8007328 <BSP_LCD_DisplayStringAt+0x188>)
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	480c      	ldr	r0, [pc, #48]	; (800732c <BSP_LCD_DisplayStringAt+0x18c>)
 80072fa:	4613      	mov	r3, r2
 80072fc:	005b      	lsls	r3, r3, #1
 80072fe:	4413      	add	r3, r2
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	4403      	add	r3, r0
 8007304:	3308      	adds	r3, #8
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	889b      	ldrh	r3, [r3, #4]
 800730a:	4299      	cmp	r1, r3
 800730c:	bf2c      	ite	cs
 800730e:	2301      	movcs	r3, #1
 8007310:	2300      	movcc	r3, #0
 8007312:	b2db      	uxtb	r3, r3
 8007314:	4023      	ands	r3, r4
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1b7      	bne.n	800728c <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 800731c:	bf00      	nop
 800731e:	bf00      	nop
 8007320:	3720      	adds	r7, #32
 8007322:	46bd      	mov	sp, r7
 8007324:	bdb0      	pop	{r4, r5, r7, pc}
 8007326:	bf00      	nop
 8007328:	200007f8 	.word	0x200007f8
 800732c:	200007fc 	.word	0x200007fc

08007330 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8007330:	b5b0      	push	{r4, r5, r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	4603      	mov	r3, r0
 8007338:	603a      	str	r2, [r7, #0]
 800733a:	80fb      	strh	r3, [r7, #6]
 800733c:	460b      	mov	r3, r1
 800733e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8007340:	4b1d      	ldr	r3, [pc, #116]	; (80073b8 <BSP_LCD_DrawPixel+0x88>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a1d      	ldr	r2, [pc, #116]	; (80073bc <BSP_LCD_DrawPixel+0x8c>)
 8007346:	2134      	movs	r1, #52	; 0x34
 8007348:	fb01 f303 	mul.w	r3, r1, r3
 800734c:	4413      	add	r3, r2
 800734e:	3348      	adds	r3, #72	; 0x48
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b02      	cmp	r3, #2
 8007354:	d116      	bne.n	8007384 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8007356:	4b18      	ldr	r3, [pc, #96]	; (80073b8 <BSP_LCD_DrawPixel+0x88>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a18      	ldr	r2, [pc, #96]	; (80073bc <BSP_LCD_DrawPixel+0x8c>)
 800735c:	2134      	movs	r1, #52	; 0x34
 800735e:	fb01 f303 	mul.w	r3, r1, r3
 8007362:	4413      	add	r3, r2
 8007364:	335c      	adds	r3, #92	; 0x5c
 8007366:	681c      	ldr	r4, [r3, #0]
 8007368:	88bd      	ldrh	r5, [r7, #4]
 800736a:	f7ff fdc9 	bl	8006f00 <BSP_LCD_GetXSize>
 800736e:	4603      	mov	r3, r0
 8007370:	fb03 f205 	mul.w	r2, r3, r5
 8007374:	88fb      	ldrh	r3, [r7, #6]
 8007376:	4413      	add	r3, r2
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	4423      	add	r3, r4
 800737c:	683a      	ldr	r2, [r7, #0]
 800737e:	b292      	uxth	r2, r2
 8007380:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8007382:	e015      	b.n	80073b0 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8007384:	4b0c      	ldr	r3, [pc, #48]	; (80073b8 <BSP_LCD_DrawPixel+0x88>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a0c      	ldr	r2, [pc, #48]	; (80073bc <BSP_LCD_DrawPixel+0x8c>)
 800738a:	2134      	movs	r1, #52	; 0x34
 800738c:	fb01 f303 	mul.w	r3, r1, r3
 8007390:	4413      	add	r3, r2
 8007392:	335c      	adds	r3, #92	; 0x5c
 8007394:	681c      	ldr	r4, [r3, #0]
 8007396:	88bd      	ldrh	r5, [r7, #4]
 8007398:	f7ff fdb2 	bl	8006f00 <BSP_LCD_GetXSize>
 800739c:	4603      	mov	r3, r0
 800739e:	fb03 f205 	mul.w	r2, r3, r5
 80073a2:	88fb      	ldrh	r3, [r7, #6]
 80073a4:	4413      	add	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4423      	add	r3, r4
 80073aa:	461a      	mov	r2, r3
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	6013      	str	r3, [r2, #0]
}
 80073b0:	bf00      	nop
 80073b2:	3708      	adds	r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bdb0      	pop	{r4, r5, r7, pc}
 80073b8:	200007f8 	.word	0x200007f8
 80073bc:	20000710 	.word	0x20000710

080073c0 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b090      	sub	sp, #64	; 0x40
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80073ca:	4b64      	ldr	r3, [pc, #400]	; (800755c <BSP_LCD_MspInit+0x19c>)
 80073cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ce:	4a63      	ldr	r2, [pc, #396]	; (800755c <BSP_LCD_MspInit+0x19c>)
 80073d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073d4:	6453      	str	r3, [r2, #68]	; 0x44
 80073d6:	4b61      	ldr	r3, [pc, #388]	; (800755c <BSP_LCD_MspInit+0x19c>)
 80073d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80073de:	62bb      	str	r3, [r7, #40]	; 0x28
 80073e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80073e2:	4b5e      	ldr	r3, [pc, #376]	; (800755c <BSP_LCD_MspInit+0x19c>)
 80073e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e6:	4a5d      	ldr	r2, [pc, #372]	; (800755c <BSP_LCD_MspInit+0x19c>)
 80073e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80073ec:	6313      	str	r3, [r2, #48]	; 0x30
 80073ee:	4b5b      	ldr	r3, [pc, #364]	; (800755c <BSP_LCD_MspInit+0x19c>)
 80073f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073f6:	627b      	str	r3, [r7, #36]	; 0x24
 80073f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80073fa:	4b58      	ldr	r3, [pc, #352]	; (800755c <BSP_LCD_MspInit+0x19c>)
 80073fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073fe:	4a57      	ldr	r2, [pc, #348]	; (800755c <BSP_LCD_MspInit+0x19c>)
 8007400:	f043 0310 	orr.w	r3, r3, #16
 8007404:	6313      	str	r3, [r2, #48]	; 0x30
 8007406:	4b55      	ldr	r3, [pc, #340]	; (800755c <BSP_LCD_MspInit+0x19c>)
 8007408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740a:	f003 0310 	and.w	r3, r3, #16
 800740e:	623b      	str	r3, [r7, #32]
 8007410:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007412:	4b52      	ldr	r3, [pc, #328]	; (800755c <BSP_LCD_MspInit+0x19c>)
 8007414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007416:	4a51      	ldr	r2, [pc, #324]	; (800755c <BSP_LCD_MspInit+0x19c>)
 8007418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800741c:	6313      	str	r3, [r2, #48]	; 0x30
 800741e:	4b4f      	ldr	r3, [pc, #316]	; (800755c <BSP_LCD_MspInit+0x19c>)
 8007420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007426:	61fb      	str	r3, [r7, #28]
 8007428:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800742a:	4b4c      	ldr	r3, [pc, #304]	; (800755c <BSP_LCD_MspInit+0x19c>)
 800742c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742e:	4a4b      	ldr	r2, [pc, #300]	; (800755c <BSP_LCD_MspInit+0x19c>)
 8007430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007434:	6313      	str	r3, [r2, #48]	; 0x30
 8007436:	4b49      	ldr	r3, [pc, #292]	; (800755c <BSP_LCD_MspInit+0x19c>)
 8007438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800743e:	61bb      	str	r3, [r7, #24]
 8007440:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8007442:	4b46      	ldr	r3, [pc, #280]	; (800755c <BSP_LCD_MspInit+0x19c>)
 8007444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007446:	4a45      	ldr	r2, [pc, #276]	; (800755c <BSP_LCD_MspInit+0x19c>)
 8007448:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800744c:	6313      	str	r3, [r2, #48]	; 0x30
 800744e:	4b43      	ldr	r3, [pc, #268]	; (800755c <BSP_LCD_MspInit+0x19c>)
 8007450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007456:	617b      	str	r3, [r7, #20]
 8007458:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800745a:	4b40      	ldr	r3, [pc, #256]	; (800755c <BSP_LCD_MspInit+0x19c>)
 800745c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745e:	4a3f      	ldr	r2, [pc, #252]	; (800755c <BSP_LCD_MspInit+0x19c>)
 8007460:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007464:	6313      	str	r3, [r2, #48]	; 0x30
 8007466:	4b3d      	ldr	r3, [pc, #244]	; (800755c <BSP_LCD_MspInit+0x19c>)
 8007468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800746a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800746e:	613b      	str	r3, [r7, #16]
 8007470:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8007472:	4b3a      	ldr	r3, [pc, #232]	; (800755c <BSP_LCD_MspInit+0x19c>)
 8007474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007476:	4a39      	ldr	r2, [pc, #228]	; (800755c <BSP_LCD_MspInit+0x19c>)
 8007478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800747c:	6313      	str	r3, [r2, #48]	; 0x30
 800747e:	4b37      	ldr	r3, [pc, #220]	; (800755c <BSP_LCD_MspInit+0x19c>)
 8007480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007486:	60fb      	str	r3, [r7, #12]
 8007488:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800748a:	4b34      	ldr	r3, [pc, #208]	; (800755c <BSP_LCD_MspInit+0x19c>)
 800748c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748e:	4a33      	ldr	r2, [pc, #204]	; (800755c <BSP_LCD_MspInit+0x19c>)
 8007490:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007494:	6313      	str	r3, [r2, #48]	; 0x30
 8007496:	4b31      	ldr	r3, [pc, #196]	; (800755c <BSP_LCD_MspInit+0x19c>)
 8007498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800749e:	60bb      	str	r3, [r7, #8]
 80074a0:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80074a2:	2310      	movs	r3, #16
 80074a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80074a6:	2302      	movs	r3, #2
 80074a8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80074aa:	2300      	movs	r3, #0
 80074ac:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80074ae:	2302      	movs	r3, #2
 80074b0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80074b2:	230e      	movs	r3, #14
 80074b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80074b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80074ba:	4619      	mov	r1, r3
 80074bc:	4828      	ldr	r0, [pc, #160]	; (8007560 <BSP_LCD_MspInit+0x1a0>)
 80074be:	f7fb fa07 	bl	80028d0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80074c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80074c8:	2302      	movs	r3, #2
 80074ca:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80074cc:	2309      	movs	r3, #9
 80074ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80074d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80074d4:	4619      	mov	r1, r3
 80074d6:	4823      	ldr	r0, [pc, #140]	; (8007564 <BSP_LCD_MspInit+0x1a4>)
 80074d8:	f7fb f9fa 	bl	80028d0 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80074dc:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80074e0:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80074e2:	2302      	movs	r3, #2
 80074e4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80074e6:	230e      	movs	r3, #14
 80074e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80074ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80074ee:	4619      	mov	r1, r3
 80074f0:	481d      	ldr	r0, [pc, #116]	; (8007568 <BSP_LCD_MspInit+0x1a8>)
 80074f2:	f7fb f9ed 	bl	80028d0 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80074f6:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80074fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80074fc:	2302      	movs	r3, #2
 80074fe:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8007500:	230e      	movs	r3, #14
 8007502:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8007504:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007508:	4619      	mov	r1, r3
 800750a:	4818      	ldr	r0, [pc, #96]	; (800756c <BSP_LCD_MspInit+0x1ac>)
 800750c:	f7fb f9e0 	bl	80028d0 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8007510:	23f7      	movs	r3, #247	; 0xf7
 8007512:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007514:	2302      	movs	r3, #2
 8007516:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8007518:	230e      	movs	r3, #14
 800751a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800751c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007520:	4619      	mov	r1, r3
 8007522:	4813      	ldr	r0, [pc, #76]	; (8007570 <BSP_LCD_MspInit+0x1b0>)
 8007524:	f7fb f9d4 	bl	80028d0 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8007528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800752c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800752e:	2301      	movs	r3, #1
 8007530:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8007532:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007536:	4619      	mov	r1, r3
 8007538:	480b      	ldr	r0, [pc, #44]	; (8007568 <BSP_LCD_MspInit+0x1a8>)
 800753a:	f7fb f9c9 	bl	80028d0 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800753e:	2308      	movs	r3, #8
 8007540:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8007542:	2301      	movs	r3, #1
 8007544:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8007546:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800754a:	4619      	mov	r1, r3
 800754c:	4808      	ldr	r0, [pc, #32]	; (8007570 <BSP_LCD_MspInit+0x1b0>)
 800754e:	f7fb f9bf 	bl	80028d0 <HAL_GPIO_Init>
}
 8007552:	bf00      	nop
 8007554:	3740      	adds	r7, #64	; 0x40
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	40023800 	.word	0x40023800
 8007560:	40021000 	.word	0x40021000
 8007564:	40021800 	.word	0x40021800
 8007568:	40022000 	.word	0x40022000
 800756c:	40022400 	.word	0x40022400
 8007570:	40022800 	.word	0x40022800

08007574 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800757e:	4b0a      	ldr	r3, [pc, #40]	; (80075a8 <BSP_LCD_ClockConfig+0x34>)
 8007580:	2208      	movs	r2, #8
 8007582:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8007584:	4b08      	ldr	r3, [pc, #32]	; (80075a8 <BSP_LCD_ClockConfig+0x34>)
 8007586:	22c0      	movs	r2, #192	; 0xc0
 8007588:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800758a:	4b07      	ldr	r3, [pc, #28]	; (80075a8 <BSP_LCD_ClockConfig+0x34>)
 800758c:	2205      	movs	r2, #5
 800758e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8007590:	4b05      	ldr	r3, [pc, #20]	; (80075a8 <BSP_LCD_ClockConfig+0x34>)
 8007592:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007596:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8007598:	4803      	ldr	r0, [pc, #12]	; (80075a8 <BSP_LCD_ClockConfig+0x34>)
 800759a:	f7fc fdcb 	bl	8004134 <HAL_RCCEx_PeriphCLKConfig>
}
 800759e:	bf00      	nop
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	20000814 	.word	0x20000814

080075ac <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b088      	sub	sp, #32
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	4603      	mov	r3, r0
 80075b4:	603a      	str	r2, [r7, #0]
 80075b6:	80fb      	strh	r3, [r7, #6]
 80075b8:	460b      	mov	r3, r1
 80075ba:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80075bc:	2300      	movs	r3, #0
 80075be:	61fb      	str	r3, [r7, #28]
 80075c0:	2300      	movs	r3, #0
 80075c2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80075c4:	4b53      	ldr	r3, [pc, #332]	; (8007714 <DrawChar+0x168>)
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	4953      	ldr	r1, [pc, #332]	; (8007718 <DrawChar+0x16c>)
 80075ca:	4613      	mov	r3, r2
 80075cc:	005b      	lsls	r3, r3, #1
 80075ce:	4413      	add	r3, r2
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	440b      	add	r3, r1
 80075d4:	3308      	adds	r3, #8
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	88db      	ldrh	r3, [r3, #6]
 80075da:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80075dc:	4b4d      	ldr	r3, [pc, #308]	; (8007714 <DrawChar+0x168>)
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	494d      	ldr	r1, [pc, #308]	; (8007718 <DrawChar+0x16c>)
 80075e2:	4613      	mov	r3, r2
 80075e4:	005b      	lsls	r3, r3, #1
 80075e6:	4413      	add	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	440b      	add	r3, r1
 80075ec:	3308      	adds	r3, #8
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	889b      	ldrh	r3, [r3, #4]
 80075f2:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80075f4:	8a3b      	ldrh	r3, [r7, #16]
 80075f6:	3307      	adds	r3, #7
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	da00      	bge.n	80075fe <DrawChar+0x52>
 80075fc:	3307      	adds	r3, #7
 80075fe:	10db      	asrs	r3, r3, #3
 8007600:	b2db      	uxtb	r3, r3
 8007602:	00db      	lsls	r3, r3, #3
 8007604:	b2da      	uxtb	r2, r3
 8007606:	8a3b      	ldrh	r3, [r7, #16]
 8007608:	b2db      	uxtb	r3, r3
 800760a:	1ad3      	subs	r3, r2, r3
 800760c:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800760e:	2300      	movs	r3, #0
 8007610:	61fb      	str	r3, [r7, #28]
 8007612:	e076      	b.n	8007702 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8007614:	8a3b      	ldrh	r3, [r7, #16]
 8007616:	3307      	adds	r3, #7
 8007618:	2b00      	cmp	r3, #0
 800761a:	da00      	bge.n	800761e <DrawChar+0x72>
 800761c:	3307      	adds	r3, #7
 800761e:	10db      	asrs	r3, r3, #3
 8007620:	461a      	mov	r2, r3
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	fb02 f303 	mul.w	r3, r2, r3
 8007628:	683a      	ldr	r2, [r7, #0]
 800762a:	4413      	add	r3, r2
 800762c:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800762e:	8a3b      	ldrh	r3, [r7, #16]
 8007630:	3307      	adds	r3, #7
 8007632:	2b00      	cmp	r3, #0
 8007634:	da00      	bge.n	8007638 <DrawChar+0x8c>
 8007636:	3307      	adds	r3, #7
 8007638:	10db      	asrs	r3, r3, #3
 800763a:	2b01      	cmp	r3, #1
 800763c:	d002      	beq.n	8007644 <DrawChar+0x98>
 800763e:	2b02      	cmp	r3, #2
 8007640:	d004      	beq.n	800764c <DrawChar+0xa0>
 8007642:	e00c      	b.n	800765e <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	617b      	str	r3, [r7, #20]
      break;
 800764a:	e016      	b.n	800767a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	021b      	lsls	r3, r3, #8
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	3201      	adds	r2, #1
 8007656:	7812      	ldrb	r2, [r2, #0]
 8007658:	4313      	orrs	r3, r2
 800765a:	617b      	str	r3, [r7, #20]
      break;
 800765c:	e00d      	b.n	800767a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	041a      	lsls	r2, r3, #16
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	3301      	adds	r3, #1
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	021b      	lsls	r3, r3, #8
 800766c:	4313      	orrs	r3, r2
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	3202      	adds	r2, #2
 8007672:	7812      	ldrb	r2, [r2, #0]
 8007674:	4313      	orrs	r3, r2
 8007676:	617b      	str	r3, [r7, #20]
      break;
 8007678:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800767a:	2300      	movs	r3, #0
 800767c:	61bb      	str	r3, [r7, #24]
 800767e:	e036      	b.n	80076ee <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8007680:	8a3a      	ldrh	r2, [r7, #16]
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	1ad2      	subs	r2, r2, r3
 8007686:	7bfb      	ldrb	r3, [r7, #15]
 8007688:	4413      	add	r3, r2
 800768a:	3b01      	subs	r3, #1
 800768c:	2201      	movs	r2, #1
 800768e:	fa02 f303 	lsl.w	r3, r2, r3
 8007692:	461a      	mov	r2, r3
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	4013      	ands	r3, r2
 8007698:	2b00      	cmp	r3, #0
 800769a:	d012      	beq.n	80076c2 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	b29a      	uxth	r2, r3
 80076a0:	88fb      	ldrh	r3, [r7, #6]
 80076a2:	4413      	add	r3, r2
 80076a4:	b298      	uxth	r0, r3
 80076a6:	4b1b      	ldr	r3, [pc, #108]	; (8007714 <DrawChar+0x168>)
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	491b      	ldr	r1, [pc, #108]	; (8007718 <DrawChar+0x16c>)
 80076ac:	4613      	mov	r3, r2
 80076ae:	005b      	lsls	r3, r3, #1
 80076b0:	4413      	add	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	440b      	add	r3, r1
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	88bb      	ldrh	r3, [r7, #4]
 80076ba:	4619      	mov	r1, r3
 80076bc:	f7ff fe38 	bl	8007330 <BSP_LCD_DrawPixel>
 80076c0:	e012      	b.n	80076e8 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	88fb      	ldrh	r3, [r7, #6]
 80076c8:	4413      	add	r3, r2
 80076ca:	b298      	uxth	r0, r3
 80076cc:	4b11      	ldr	r3, [pc, #68]	; (8007714 <DrawChar+0x168>)
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	4911      	ldr	r1, [pc, #68]	; (8007718 <DrawChar+0x16c>)
 80076d2:	4613      	mov	r3, r2
 80076d4:	005b      	lsls	r3, r3, #1
 80076d6:	4413      	add	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	440b      	add	r3, r1
 80076dc:	3304      	adds	r3, #4
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	88bb      	ldrh	r3, [r7, #4]
 80076e2:	4619      	mov	r1, r3
 80076e4:	f7ff fe24 	bl	8007330 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	3301      	adds	r3, #1
 80076ec:	61bb      	str	r3, [r7, #24]
 80076ee:	8a3b      	ldrh	r3, [r7, #16]
 80076f0:	69ba      	ldr	r2, [r7, #24]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d3c4      	bcc.n	8007680 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80076f6:	88bb      	ldrh	r3, [r7, #4]
 80076f8:	3301      	adds	r3, #1
 80076fa:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	3301      	adds	r3, #1
 8007700:	61fb      	str	r3, [r7, #28]
 8007702:	8a7b      	ldrh	r3, [r7, #18]
 8007704:	69fa      	ldr	r2, [r7, #28]
 8007706:	429a      	cmp	r2, r3
 8007708:	d384      	bcc.n	8007614 <DrawChar+0x68>
  }
}
 800770a:	bf00      	nop
 800770c:	bf00      	nop
 800770e:	3720      	adds	r7, #32
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	200007f8 	.word	0x200007f8
 8007718:	200007fc 	.word	0x200007fc

0800771c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b086      	sub	sp, #24
 8007720:	af02      	add	r7, sp, #8
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
 8007728:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800772a:	4b1e      	ldr	r3, [pc, #120]	; (80077a4 <LL_FillBuffer+0x88>)
 800772c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007730:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8007732:	4b1d      	ldr	r3, [pc, #116]	; (80077a8 <LL_FillBuffer+0x8c>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a1d      	ldr	r2, [pc, #116]	; (80077ac <LL_FillBuffer+0x90>)
 8007738:	2134      	movs	r1, #52	; 0x34
 800773a:	fb01 f303 	mul.w	r3, r1, r3
 800773e:	4413      	add	r3, r2
 8007740:	3348      	adds	r3, #72	; 0x48
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b02      	cmp	r3, #2
 8007746:	d103      	bne.n	8007750 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8007748:	4b16      	ldr	r3, [pc, #88]	; (80077a4 <LL_FillBuffer+0x88>)
 800774a:	2202      	movs	r2, #2
 800774c:	609a      	str	r2, [r3, #8]
 800774e:	e002      	b.n	8007756 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8007750:	4b14      	ldr	r3, [pc, #80]	; (80077a4 <LL_FillBuffer+0x88>)
 8007752:	2200      	movs	r2, #0
 8007754:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8007756:	4a13      	ldr	r2, [pc, #76]	; (80077a4 <LL_FillBuffer+0x88>)
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 800775c:	4b11      	ldr	r3, [pc, #68]	; (80077a4 <LL_FillBuffer+0x88>)
 800775e:	4a14      	ldr	r2, [pc, #80]	; (80077b0 <LL_FillBuffer+0x94>)
 8007760:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8007762:	4810      	ldr	r0, [pc, #64]	; (80077a4 <LL_FillBuffer+0x88>)
 8007764:	f7fa fe28 	bl	80023b8 <HAL_DMA2D_Init>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d115      	bne.n	800779a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800776e:	68f9      	ldr	r1, [r7, #12]
 8007770:	480c      	ldr	r0, [pc, #48]	; (80077a4 <LL_FillBuffer+0x88>)
 8007772:	f7fa ff7f 	bl	8002674 <HAL_DMA2D_ConfigLayer>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d10e      	bne.n	800779a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	69f9      	ldr	r1, [r7, #28]
 8007786:	4807      	ldr	r0, [pc, #28]	; (80077a4 <LL_FillBuffer+0x88>)
 8007788:	f7fa fe60 	bl	800244c <HAL_DMA2D_Start>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d103      	bne.n	800779a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8007792:	210a      	movs	r1, #10
 8007794:	4803      	ldr	r0, [pc, #12]	; (80077a4 <LL_FillBuffer+0x88>)
 8007796:	f7fa fe84 	bl	80024a2 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800779a:	bf00      	nop
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	200007b8 	.word	0x200007b8
 80077a8:	200007f8 	.word	0x200007f8
 80077ac:	20000710 	.word	0x20000710
 80077b0:	4002b000 	.word	0x4002b000

080077b4 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80077b4:	b580      	push	{r7, lr}
 80077b6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80077b8:	4b29      	ldr	r3, [pc, #164]	; (8007860 <BSP_SDRAM_Init+0xac>)
 80077ba:	4a2a      	ldr	r2, [pc, #168]	; (8007864 <BSP_SDRAM_Init+0xb0>)
 80077bc:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80077be:	4b2a      	ldr	r3, [pc, #168]	; (8007868 <BSP_SDRAM_Init+0xb4>)
 80077c0:	2202      	movs	r2, #2
 80077c2:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80077c4:	4b28      	ldr	r3, [pc, #160]	; (8007868 <BSP_SDRAM_Init+0xb4>)
 80077c6:	2207      	movs	r2, #7
 80077c8:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80077ca:	4b27      	ldr	r3, [pc, #156]	; (8007868 <BSP_SDRAM_Init+0xb4>)
 80077cc:	2204      	movs	r2, #4
 80077ce:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80077d0:	4b25      	ldr	r3, [pc, #148]	; (8007868 <BSP_SDRAM_Init+0xb4>)
 80077d2:	2207      	movs	r2, #7
 80077d4:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80077d6:	4b24      	ldr	r3, [pc, #144]	; (8007868 <BSP_SDRAM_Init+0xb4>)
 80077d8:	2202      	movs	r2, #2
 80077da:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80077dc:	4b22      	ldr	r3, [pc, #136]	; (8007868 <BSP_SDRAM_Init+0xb4>)
 80077de:	2202      	movs	r2, #2
 80077e0:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80077e2:	4b21      	ldr	r3, [pc, #132]	; (8007868 <BSP_SDRAM_Init+0xb4>)
 80077e4:	2202      	movs	r2, #2
 80077e6:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80077e8:	4b1d      	ldr	r3, [pc, #116]	; (8007860 <BSP_SDRAM_Init+0xac>)
 80077ea:	2200      	movs	r2, #0
 80077ec:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80077ee:	4b1c      	ldr	r3, [pc, #112]	; (8007860 <BSP_SDRAM_Init+0xac>)
 80077f0:	2200      	movs	r2, #0
 80077f2:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80077f4:	4b1a      	ldr	r3, [pc, #104]	; (8007860 <BSP_SDRAM_Init+0xac>)
 80077f6:	2204      	movs	r2, #4
 80077f8:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80077fa:	4b19      	ldr	r3, [pc, #100]	; (8007860 <BSP_SDRAM_Init+0xac>)
 80077fc:	2210      	movs	r2, #16
 80077fe:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8007800:	4b17      	ldr	r3, [pc, #92]	; (8007860 <BSP_SDRAM_Init+0xac>)
 8007802:	2240      	movs	r2, #64	; 0x40
 8007804:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8007806:	4b16      	ldr	r3, [pc, #88]	; (8007860 <BSP_SDRAM_Init+0xac>)
 8007808:	f44f 7280 	mov.w	r2, #256	; 0x100
 800780c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800780e:	4b14      	ldr	r3, [pc, #80]	; (8007860 <BSP_SDRAM_Init+0xac>)
 8007810:	2200      	movs	r2, #0
 8007812:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8007814:	4b12      	ldr	r3, [pc, #72]	; (8007860 <BSP_SDRAM_Init+0xac>)
 8007816:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800781a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800781c:	4b10      	ldr	r3, [pc, #64]	; (8007860 <BSP_SDRAM_Init+0xac>)
 800781e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007822:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8007824:	4b0e      	ldr	r3, [pc, #56]	; (8007860 <BSP_SDRAM_Init+0xac>)
 8007826:	2200      	movs	r2, #0
 8007828:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800782a:	2100      	movs	r1, #0
 800782c:	480c      	ldr	r0, [pc, #48]	; (8007860 <BSP_SDRAM_Init+0xac>)
 800782e:	f000 f87f 	bl	8007930 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8007832:	490d      	ldr	r1, [pc, #52]	; (8007868 <BSP_SDRAM_Init+0xb4>)
 8007834:	480a      	ldr	r0, [pc, #40]	; (8007860 <BSP_SDRAM_Init+0xac>)
 8007836:	f7f9 ff19 	bl	800166c <HAL_SDRAM_Init>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d003      	beq.n	8007848 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8007840:	4b0a      	ldr	r3, [pc, #40]	; (800786c <BSP_SDRAM_Init+0xb8>)
 8007842:	2201      	movs	r2, #1
 8007844:	701a      	strb	r2, [r3, #0]
 8007846:	e002      	b.n	800784e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8007848:	4b08      	ldr	r3, [pc, #32]	; (800786c <BSP_SDRAM_Init+0xb8>)
 800784a:	2200      	movs	r2, #0
 800784c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800784e:	f240 6003 	movw	r0, #1539	; 0x603
 8007852:	f000 f80d 	bl	8007870 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8007856:	4b05      	ldr	r3, [pc, #20]	; (800786c <BSP_SDRAM_Init+0xb8>)
 8007858:	781b      	ldrb	r3, [r3, #0]
}
 800785a:	4618      	mov	r0, r3
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	20000898 	.word	0x20000898
 8007864:	a0000140 	.word	0xa0000140
 8007868:	200008cc 	.word	0x200008cc
 800786c:	20000070 	.word	0x20000070

08007870 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8007878:	2300      	movs	r3, #0
 800787a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800787c:	4b2a      	ldr	r3, [pc, #168]	; (8007928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800787e:	2201      	movs	r2, #1
 8007880:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007882:	4b29      	ldr	r3, [pc, #164]	; (8007928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007884:	2210      	movs	r2, #16
 8007886:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8007888:	4b27      	ldr	r3, [pc, #156]	; (8007928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800788a:	2201      	movs	r2, #1
 800788c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800788e:	4b26      	ldr	r3, [pc, #152]	; (8007928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007890:	2200      	movs	r2, #0
 8007892:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8007894:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007898:	4923      	ldr	r1, [pc, #140]	; (8007928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800789a:	4824      	ldr	r0, [pc, #144]	; (800792c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800789c:	f7f9 ff24 	bl	80016e8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80078a0:	2001      	movs	r0, #1
 80078a2:	f7fa f9ab 	bl	8001bfc <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80078a6:	4b20      	ldr	r3, [pc, #128]	; (8007928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80078a8:	2202      	movs	r2, #2
 80078aa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80078ac:	4b1e      	ldr	r3, [pc, #120]	; (8007928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80078ae:	2210      	movs	r2, #16
 80078b0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80078b2:	4b1d      	ldr	r3, [pc, #116]	; (8007928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80078b4:	2201      	movs	r2, #1
 80078b6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80078b8:	4b1b      	ldr	r3, [pc, #108]	; (8007928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80078ba:	2200      	movs	r2, #0
 80078bc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80078be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078c2:	4919      	ldr	r1, [pc, #100]	; (8007928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80078c4:	4819      	ldr	r0, [pc, #100]	; (800792c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80078c6:	f7f9 ff0f 	bl	80016e8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80078ca:	4b17      	ldr	r3, [pc, #92]	; (8007928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80078cc:	2203      	movs	r2, #3
 80078ce:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80078d0:	4b15      	ldr	r3, [pc, #84]	; (8007928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80078d2:	2210      	movs	r2, #16
 80078d4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80078d6:	4b14      	ldr	r3, [pc, #80]	; (8007928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80078d8:	2208      	movs	r2, #8
 80078da:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80078dc:	4b12      	ldr	r3, [pc, #72]	; (8007928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80078de:	2200      	movs	r2, #0
 80078e0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80078e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078e6:	4910      	ldr	r1, [pc, #64]	; (8007928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80078e8:	4810      	ldr	r0, [pc, #64]	; (800792c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80078ea:	f7f9 fefd 	bl	80016e8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80078ee:	f44f 7308 	mov.w	r3, #544	; 0x220
 80078f2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80078f4:	4b0c      	ldr	r3, [pc, #48]	; (8007928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80078f6:	2204      	movs	r2, #4
 80078f8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80078fa:	4b0b      	ldr	r3, [pc, #44]	; (8007928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80078fc:	2210      	movs	r2, #16
 80078fe:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8007900:	4b09      	ldr	r3, [pc, #36]	; (8007928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007902:	2201      	movs	r2, #1
 8007904:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	4a07      	ldr	r2, [pc, #28]	; (8007928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800790a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800790c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007910:	4905      	ldr	r1, [pc, #20]	; (8007928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007912:	4806      	ldr	r0, [pc, #24]	; (800792c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007914:	f7f9 fee8 	bl	80016e8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8007918:	6879      	ldr	r1, [r7, #4]
 800791a:	4804      	ldr	r0, [pc, #16]	; (800792c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800791c:	f7f9 ff0f 	bl	800173e <HAL_SDRAM_ProgramRefreshRate>
}
 8007920:	bf00      	nop
 8007922:	3710      	adds	r7, #16
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	200008e8 	.word	0x200008e8
 800792c:	20000898 	.word	0x20000898

08007930 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8007930:	b580      	push	{r7, lr}
 8007932:	b090      	sub	sp, #64	; 0x40
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800793a:	4b70      	ldr	r3, [pc, #448]	; (8007afc <BSP_SDRAM_MspInit+0x1cc>)
 800793c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793e:	4a6f      	ldr	r2, [pc, #444]	; (8007afc <BSP_SDRAM_MspInit+0x1cc>)
 8007940:	f043 0301 	orr.w	r3, r3, #1
 8007944:	6393      	str	r3, [r2, #56]	; 0x38
 8007946:	4b6d      	ldr	r3, [pc, #436]	; (8007afc <BSP_SDRAM_MspInit+0x1cc>)
 8007948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794a:	f003 0301 	and.w	r3, r3, #1
 800794e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007950:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8007952:	4b6a      	ldr	r3, [pc, #424]	; (8007afc <BSP_SDRAM_MspInit+0x1cc>)
 8007954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007956:	4a69      	ldr	r2, [pc, #420]	; (8007afc <BSP_SDRAM_MspInit+0x1cc>)
 8007958:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800795c:	6313      	str	r3, [r2, #48]	; 0x30
 800795e:	4b67      	ldr	r3, [pc, #412]	; (8007afc <BSP_SDRAM_MspInit+0x1cc>)
 8007960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007966:	627b      	str	r3, [r7, #36]	; 0x24
 8007968:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800796a:	4b64      	ldr	r3, [pc, #400]	; (8007afc <BSP_SDRAM_MspInit+0x1cc>)
 800796c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796e:	4a63      	ldr	r2, [pc, #396]	; (8007afc <BSP_SDRAM_MspInit+0x1cc>)
 8007970:	f043 0304 	orr.w	r3, r3, #4
 8007974:	6313      	str	r3, [r2, #48]	; 0x30
 8007976:	4b61      	ldr	r3, [pc, #388]	; (8007afc <BSP_SDRAM_MspInit+0x1cc>)
 8007978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800797a:	f003 0304 	and.w	r3, r3, #4
 800797e:	623b      	str	r3, [r7, #32]
 8007980:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007982:	4b5e      	ldr	r3, [pc, #376]	; (8007afc <BSP_SDRAM_MspInit+0x1cc>)
 8007984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007986:	4a5d      	ldr	r2, [pc, #372]	; (8007afc <BSP_SDRAM_MspInit+0x1cc>)
 8007988:	f043 0308 	orr.w	r3, r3, #8
 800798c:	6313      	str	r3, [r2, #48]	; 0x30
 800798e:	4b5b      	ldr	r3, [pc, #364]	; (8007afc <BSP_SDRAM_MspInit+0x1cc>)
 8007990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007992:	f003 0308 	and.w	r3, r3, #8
 8007996:	61fb      	str	r3, [r7, #28]
 8007998:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800799a:	4b58      	ldr	r3, [pc, #352]	; (8007afc <BSP_SDRAM_MspInit+0x1cc>)
 800799c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800799e:	4a57      	ldr	r2, [pc, #348]	; (8007afc <BSP_SDRAM_MspInit+0x1cc>)
 80079a0:	f043 0310 	orr.w	r3, r3, #16
 80079a4:	6313      	str	r3, [r2, #48]	; 0x30
 80079a6:	4b55      	ldr	r3, [pc, #340]	; (8007afc <BSP_SDRAM_MspInit+0x1cc>)
 80079a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079aa:	f003 0310 	and.w	r3, r3, #16
 80079ae:	61bb      	str	r3, [r7, #24]
 80079b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80079b2:	4b52      	ldr	r3, [pc, #328]	; (8007afc <BSP_SDRAM_MspInit+0x1cc>)
 80079b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b6:	4a51      	ldr	r2, [pc, #324]	; (8007afc <BSP_SDRAM_MspInit+0x1cc>)
 80079b8:	f043 0320 	orr.w	r3, r3, #32
 80079bc:	6313      	str	r3, [r2, #48]	; 0x30
 80079be:	4b4f      	ldr	r3, [pc, #316]	; (8007afc <BSP_SDRAM_MspInit+0x1cc>)
 80079c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c2:	f003 0320 	and.w	r3, r3, #32
 80079c6:	617b      	str	r3, [r7, #20]
 80079c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80079ca:	4b4c      	ldr	r3, [pc, #304]	; (8007afc <BSP_SDRAM_MspInit+0x1cc>)
 80079cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ce:	4a4b      	ldr	r2, [pc, #300]	; (8007afc <BSP_SDRAM_MspInit+0x1cc>)
 80079d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079d4:	6313      	str	r3, [r2, #48]	; 0x30
 80079d6:	4b49      	ldr	r3, [pc, #292]	; (8007afc <BSP_SDRAM_MspInit+0x1cc>)
 80079d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079de:	613b      	str	r3, [r7, #16]
 80079e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80079e2:	4b46      	ldr	r3, [pc, #280]	; (8007afc <BSP_SDRAM_MspInit+0x1cc>)
 80079e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e6:	4a45      	ldr	r2, [pc, #276]	; (8007afc <BSP_SDRAM_MspInit+0x1cc>)
 80079e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ec:	6313      	str	r3, [r2, #48]	; 0x30
 80079ee:	4b43      	ldr	r3, [pc, #268]	; (8007afc <BSP_SDRAM_MspInit+0x1cc>)
 80079f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079f6:	60fb      	str	r3, [r7, #12]
 80079f8:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80079fa:	2302      	movs	r3, #2
 80079fc:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80079fe:	2301      	movs	r3, #1
 8007a00:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8007a02:	2302      	movs	r3, #2
 8007a04:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8007a06:	230c      	movs	r3, #12
 8007a08:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8007a0a:	2308      	movs	r3, #8
 8007a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8007a0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007a12:	4619      	mov	r1, r3
 8007a14:	483a      	ldr	r0, [pc, #232]	; (8007b00 <BSP_SDRAM_MspInit+0x1d0>)
 8007a16:	f7fa ff5b 	bl	80028d0 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8007a1a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8007a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8007a20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007a24:	4619      	mov	r1, r3
 8007a26:	4837      	ldr	r0, [pc, #220]	; (8007b04 <BSP_SDRAM_MspInit+0x1d4>)
 8007a28:	f7fa ff52 	bl	80028d0 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8007a2c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8007a30:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8007a32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007a36:	4619      	mov	r1, r3
 8007a38:	4833      	ldr	r0, [pc, #204]	; (8007b08 <BSP_SDRAM_MspInit+0x1d8>)
 8007a3a:	f7fa ff49 	bl	80028d0 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8007a3e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8007a42:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8007a44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007a48:	4619      	mov	r1, r3
 8007a4a:	4830      	ldr	r0, [pc, #192]	; (8007b0c <BSP_SDRAM_MspInit+0x1dc>)
 8007a4c:	f7fa ff40 	bl	80028d0 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8007a50:	f248 1333 	movw	r3, #33075	; 0x8133
 8007a54:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8007a56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	482c      	ldr	r0, [pc, #176]	; (8007b10 <BSP_SDRAM_MspInit+0x1e0>)
 8007a5e:	f7fa ff37 	bl	80028d0 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8007a62:	2328      	movs	r3, #40	; 0x28
 8007a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8007a66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	4829      	ldr	r0, [pc, #164]	; (8007b14 <BSP_SDRAM_MspInit+0x1e4>)
 8007a6e:	f7fa ff2f 	bl	80028d0 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8007a72:	4b29      	ldr	r3, [pc, #164]	; (8007b18 <BSP_SDRAM_MspInit+0x1e8>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8007a78:	4b27      	ldr	r3, [pc, #156]	; (8007b18 <BSP_SDRAM_MspInit+0x1e8>)
 8007a7a:	2280      	movs	r2, #128	; 0x80
 8007a7c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8007a7e:	4b26      	ldr	r3, [pc, #152]	; (8007b18 <BSP_SDRAM_MspInit+0x1e8>)
 8007a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a84:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8007a86:	4b24      	ldr	r3, [pc, #144]	; (8007b18 <BSP_SDRAM_MspInit+0x1e8>)
 8007a88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a8c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007a8e:	4b22      	ldr	r3, [pc, #136]	; (8007b18 <BSP_SDRAM_MspInit+0x1e8>)
 8007a90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007a94:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8007a96:	4b20      	ldr	r3, [pc, #128]	; (8007b18 <BSP_SDRAM_MspInit+0x1e8>)
 8007a98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007a9c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8007a9e:	4b1e      	ldr	r3, [pc, #120]	; (8007b18 <BSP_SDRAM_MspInit+0x1e8>)
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8007aa4:	4b1c      	ldr	r3, [pc, #112]	; (8007b18 <BSP_SDRAM_MspInit+0x1e8>)
 8007aa6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007aaa:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8007aac:	4b1a      	ldr	r3, [pc, #104]	; (8007b18 <BSP_SDRAM_MspInit+0x1e8>)
 8007aae:	2200      	movs	r2, #0
 8007ab0:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8007ab2:	4b19      	ldr	r3, [pc, #100]	; (8007b18 <BSP_SDRAM_MspInit+0x1e8>)
 8007ab4:	2203      	movs	r2, #3
 8007ab6:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8007ab8:	4b17      	ldr	r3, [pc, #92]	; (8007b18 <BSP_SDRAM_MspInit+0x1e8>)
 8007aba:	2200      	movs	r2, #0
 8007abc:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8007abe:	4b16      	ldr	r3, [pc, #88]	; (8007b18 <BSP_SDRAM_MspInit+0x1e8>)
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8007ac4:	4b14      	ldr	r3, [pc, #80]	; (8007b18 <BSP_SDRAM_MspInit+0x1e8>)
 8007ac6:	4a15      	ldr	r2, [pc, #84]	; (8007b1c <BSP_SDRAM_MspInit+0x1ec>)
 8007ac8:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a12      	ldr	r2, [pc, #72]	; (8007b18 <BSP_SDRAM_MspInit+0x1e8>)
 8007ace:	631a      	str	r2, [r3, #48]	; 0x30
 8007ad0:	4a11      	ldr	r2, [pc, #68]	; (8007b18 <BSP_SDRAM_MspInit+0x1e8>)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8007ad6:	4810      	ldr	r0, [pc, #64]	; (8007b18 <BSP_SDRAM_MspInit+0x1e8>)
 8007ad8:	f7fa fb5e 	bl	8002198 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8007adc:	480e      	ldr	r0, [pc, #56]	; (8007b18 <BSP_SDRAM_MspInit+0x1e8>)
 8007ade:	f7fa faad 	bl	800203c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	210f      	movs	r1, #15
 8007ae6:	2038      	movs	r0, #56	; 0x38
 8007ae8:	f7fa f987 	bl	8001dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8007aec:	2038      	movs	r0, #56	; 0x38
 8007aee:	f7fa f9a0 	bl	8001e32 <HAL_NVIC_EnableIRQ>
}
 8007af2:	bf00      	nop
 8007af4:	3740      	adds	r7, #64	; 0x40
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	40023800 	.word	0x40023800
 8007b00:	40020800 	.word	0x40020800
 8007b04:	40020c00 	.word	0x40020c00
 8007b08:	40021000 	.word	0x40021000
 8007b0c:	40021400 	.word	0x40021400
 8007b10:	40021800 	.word	0x40021800
 8007b14:	40021c00 	.word	0x40021c00
 8007b18:	200008f8 	.word	0x200008f8
 8007b1c:	40026410 	.word	0x40026410

08007b20 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	4603      	mov	r3, r0
 8007b28:	460a      	mov	r2, r1
 8007b2a:	80fb      	strh	r3, [r7, #6]
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8007b34:	4a14      	ldr	r2, [pc, #80]	; (8007b88 <BSP_TS_Init+0x68>)
 8007b36:	88fb      	ldrh	r3, [r7, #6]
 8007b38:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8007b3a:	4a14      	ldr	r2, [pc, #80]	; (8007b8c <BSP_TS_Init+0x6c>)
 8007b3c:	88bb      	ldrh	r3, [r7, #4]
 8007b3e:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8007b40:	4b13      	ldr	r3, [pc, #76]	; (8007b90 <BSP_TS_Init+0x70>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2070      	movs	r0, #112	; 0x70
 8007b46:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8007b48:	4b11      	ldr	r3, [pc, #68]	; (8007b90 <BSP_TS_Init+0x70>)
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	2070      	movs	r0, #112	; 0x70
 8007b4e:	4798      	blx	r3
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b51      	cmp	r3, #81	; 0x51
 8007b54:	d111      	bne.n	8007b7a <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8007b56:	4b0f      	ldr	r3, [pc, #60]	; (8007b94 <BSP_TS_Init+0x74>)
 8007b58:	4a0d      	ldr	r2, [pc, #52]	; (8007b90 <BSP_TS_Init+0x70>)
 8007b5a:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8007b5c:	4b0e      	ldr	r3, [pc, #56]	; (8007b98 <BSP_TS_Init+0x78>)
 8007b5e:	2270      	movs	r2, #112	; 0x70
 8007b60:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8007b62:	4b0e      	ldr	r3, [pc, #56]	; (8007b9c <BSP_TS_Init+0x7c>)
 8007b64:	2208      	movs	r2, #8
 8007b66:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8007b68:	4b0a      	ldr	r3, [pc, #40]	; (8007b94 <BSP_TS_Init+0x74>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	4a0a      	ldr	r2, [pc, #40]	; (8007b98 <BSP_TS_Init+0x78>)
 8007b70:	7812      	ldrb	r2, [r2, #0]
 8007b72:	b292      	uxth	r2, r2
 8007b74:	4610      	mov	r0, r2
 8007b76:	4798      	blx	r3
 8007b78:	e001      	b.n	8007b7e <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3710      	adds	r7, #16
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	2000095c 	.word	0x2000095c
 8007b8c:	2000095e 	.word	0x2000095e
 8007b90:	20000048 	.word	0x20000048
 8007b94:	20000958 	.word	0x20000958
 8007b98:	20000961 	.word	0x20000961
 8007b9c:	20000960 	.word	0x20000960

08007ba0 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8007ba0:	b590      	push	{r4, r7, lr}
 8007ba2:	b097      	sub	sp, #92	; 0x5c
 8007ba4:	af02      	add	r7, sp, #8
 8007ba6:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8007bba:	4bb4      	ldr	r3, [pc, #720]	; (8007e8c <BSP_TS_GetState+0x2ec>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	4ab3      	ldr	r2, [pc, #716]	; (8007e90 <BSP_TS_GetState+0x2f0>)
 8007bc2:	7812      	ldrb	r2, [r2, #0]
 8007bc4:	b292      	uxth	r2, r2
 8007bc6:	4610      	mov	r0, r2
 8007bc8:	4798      	blx	r3
 8007bca:	4603      	mov	r3, r0
 8007bcc:	461a      	mov	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f000 8196 	beq.w	8007f08 <BSP_TS_GetState+0x368>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8007bdc:	2300      	movs	r3, #0
 8007bde:	64bb      	str	r3, [r7, #72]	; 0x48
 8007be0:	e185      	b.n	8007eee <BSP_TS_GetState+0x34e>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8007be2:	4baa      	ldr	r3, [pc, #680]	; (8007e8c <BSP_TS_GetState+0x2ec>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	695b      	ldr	r3, [r3, #20]
 8007be8:	4aa9      	ldr	r2, [pc, #676]	; (8007e90 <BSP_TS_GetState+0x2f0>)
 8007bea:	7812      	ldrb	r2, [r2, #0]
 8007bec:	b290      	uxth	r0, r2
 8007bee:	f107 0120 	add.w	r1, r7, #32
 8007bf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bf4:	0052      	lsls	r2, r2, #1
 8007bf6:	188c      	adds	r4, r1, r2
 8007bf8:	f107 0114 	add.w	r1, r7, #20
 8007bfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bfe:	0052      	lsls	r2, r2, #1
 8007c00:	440a      	add	r2, r1
 8007c02:	4621      	mov	r1, r4
 8007c04:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8007c06:	4ba3      	ldr	r3, [pc, #652]	; (8007e94 <BSP_TS_GetState+0x2f4>)
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d117      	bne.n	8007c3e <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 8007c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c10:	005b      	lsls	r3, r3, #1
 8007c12:	3350      	adds	r3, #80	; 0x50
 8007c14:	443b      	add	r3, r7
 8007c16:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8007c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c1c:	005b      	lsls	r3, r3, #1
 8007c1e:	3350      	adds	r3, #80	; 0x50
 8007c20:	443b      	add	r3, r7
 8007c22:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8007c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c28:	005b      	lsls	r3, r3, #1
 8007c2a:	3350      	adds	r3, #80	; 0x50
 8007c2c:	443b      	add	r3, r7
 8007c2e:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8007c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c34:	005b      	lsls	r3, r3, #1
 8007c36:	3350      	adds	r3, #80	; 0x50
 8007c38:	443b      	add	r3, r7
 8007c3a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8007c3e:	4b95      	ldr	r3, [pc, #596]	; (8007e94 <BSP_TS_GetState+0x2f4>)
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	f003 0302 	and.w	r3, r3, #2
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00e      	beq.n	8007c68 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8007c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c4c:	005b      	lsls	r3, r3, #1
 8007c4e:	3350      	adds	r3, #80	; 0x50
 8007c50:	443b      	add	r3, r7
 8007c52:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8007c56:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c5e:	005b      	lsls	r3, r3, #1
 8007c60:	3350      	adds	r3, #80	; 0x50
 8007c62:	443b      	add	r3, r7
 8007c64:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8007c68:	4b8a      	ldr	r3, [pc, #552]	; (8007e94 <BSP_TS_GetState+0x2f4>)
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	f003 0304 	and.w	r3, r3, #4
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00e      	beq.n	8007c92 <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8007c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c76:	005b      	lsls	r3, r3, #1
 8007c78:	3350      	adds	r3, #80	; 0x50
 8007c7a:	443b      	add	r3, r7
 8007c7c:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8007c80:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c88:	005b      	lsls	r3, r3, #1
 8007c8a:	3350      	adds	r3, #80	; 0x50
 8007c8c:	443b      	add	r3, r7
 8007c8e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8007c92:	4b80      	ldr	r3, [pc, #512]	; (8007e94 <BSP_TS_GetState+0x2f4>)
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	f003 0308 	and.w	r3, r3, #8
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d017      	beq.n	8007cce <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8007c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ca0:	005b      	lsls	r3, r3, #1
 8007ca2:	3350      	adds	r3, #80	; 0x50
 8007ca4:	443b      	add	r3, r7
 8007ca6:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8007caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cac:	005b      	lsls	r3, r3, #1
 8007cae:	3350      	adds	r3, #80	; 0x50
 8007cb0:	443b      	add	r3, r7
 8007cb2:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8007cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cb8:	005b      	lsls	r3, r3, #1
 8007cba:	3350      	adds	r3, #80	; 0x50
 8007cbc:	443b      	add	r3, r7
 8007cbe:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8007cc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cc4:	005b      	lsls	r3, r3, #1
 8007cc6:	3350      	adds	r3, #80	; 0x50
 8007cc8:	443b      	add	r3, r7
 8007cca:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8007cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cd0:	005b      	lsls	r3, r3, #1
 8007cd2:	3350      	adds	r3, #80	; 0x50
 8007cd4:	443b      	add	r3, r7
 8007cd6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007cda:	4619      	mov	r1, r3
 8007cdc:	4a6e      	ldr	r2, [pc, #440]	; (8007e98 <BSP_TS_GetState+0x2f8>)
 8007cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ce4:	4299      	cmp	r1, r3
 8007ce6:	d90d      	bls.n	8007d04 <BSP_TS_GetState+0x164>
 8007ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cea:	005b      	lsls	r3, r3, #1
 8007cec:	3350      	adds	r3, #80	; 0x50
 8007cee:	443b      	add	r3, r7
 8007cf0:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8007cf4:	4968      	ldr	r1, [pc, #416]	; (8007e98 <BSP_TS_GetState+0x2f8>)
 8007cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cf8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	e00c      	b.n	8007d1e <BSP_TS_GetState+0x17e>
 8007d04:	4a64      	ldr	r2, [pc, #400]	; (8007e98 <BSP_TS_GetState+0x2f8>)
 8007d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d10:	005b      	lsls	r3, r3, #1
 8007d12:	3350      	adds	r3, #80	; 0x50
 8007d14:	443b      	add	r3, r7
 8007d16:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8007d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d24:	005b      	lsls	r3, r3, #1
 8007d26:	3350      	adds	r3, #80	; 0x50
 8007d28:	443b      	add	r3, r7
 8007d2a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8007d2e:	4619      	mov	r1, r3
 8007d30:	4a5a      	ldr	r2, [pc, #360]	; (8007e9c <BSP_TS_GetState+0x2fc>)
 8007d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d38:	4299      	cmp	r1, r3
 8007d3a:	d90d      	bls.n	8007d58 <BSP_TS_GetState+0x1b8>
 8007d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d3e:	005b      	lsls	r3, r3, #1
 8007d40:	3350      	adds	r3, #80	; 0x50
 8007d42:	443b      	add	r3, r7
 8007d44:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8007d48:	4954      	ldr	r1, [pc, #336]	; (8007e9c <BSP_TS_GetState+0x2fc>)
 8007d4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d4c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	e00c      	b.n	8007d72 <BSP_TS_GetState+0x1d2>
 8007d58:	4a50      	ldr	r2, [pc, #320]	; (8007e9c <BSP_TS_GetState+0x2fc>)
 8007d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d64:	005b      	lsls	r3, r3, #1
 8007d66:	3350      	adds	r3, #80	; 0x50
 8007d68:	443b      	add	r3, r7
 8007d6a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8007d6e:	1ad3      	subs	r3, r2, r3
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8007d76:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8007d7a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007d7e:	4413      	add	r3, r2
 8007d80:	2b05      	cmp	r3, #5
 8007d82:	dd15      	ble.n	8007db0 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8007d84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	3350      	adds	r3, #80	; 0x50
 8007d8a:	443b      	add	r3, r7
 8007d8c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007d90:	4619      	mov	r1, r3
 8007d92:	4a41      	ldr	r2, [pc, #260]	; (8007e98 <BSP_TS_GetState+0x2f8>)
 8007d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8007d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d9c:	005b      	lsls	r3, r3, #1
 8007d9e:	3350      	adds	r3, #80	; 0x50
 8007da0:	443b      	add	r3, r7
 8007da2:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8007da6:	4619      	mov	r1, r3
 8007da8:	4a3c      	ldr	r2, [pc, #240]	; (8007e9c <BSP_TS_GetState+0x2fc>)
 8007daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8007db0:	4b37      	ldr	r3, [pc, #220]	; (8007e90 <BSP_TS_GetState+0x2f0>)
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	2b70      	cmp	r3, #112	; 0x70
 8007db6:	d119      	bne.n	8007dec <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8007db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dba:	005b      	lsls	r3, r3, #1
 8007dbc:	3350      	adds	r3, #80	; 0x50
 8007dbe:	443b      	add	r3, r7
 8007dc0:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dc8:	005b      	lsls	r3, r3, #1
 8007dca:	4413      	add	r3, r2
 8007dcc:	460a      	mov	r2, r1
 8007dce:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8007dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dd2:	005b      	lsls	r3, r3, #1
 8007dd4:	3350      	adds	r3, #80	; 0x50
 8007dd6:	443b      	add	r3, r7
 8007dd8:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007de0:	3304      	adds	r3, #4
 8007de2:	005b      	lsls	r3, r3, #1
 8007de4:	4413      	add	r3, r2
 8007de6:	460a      	mov	r2, r1
 8007de8:	809a      	strh	r2, [r3, #4]
 8007dea:	e022      	b.n	8007e32 <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8007dec:	4b2c      	ldr	r3, [pc, #176]	; (8007ea0 <BSP_TS_GetState+0x300>)
 8007dee:	881b      	ldrh	r3, [r3, #0]
 8007df0:	4619      	mov	r1, r3
 8007df2:	4a29      	ldr	r2, [pc, #164]	; (8007e98 <BSP_TS_GetState+0x2f8>)
 8007df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dfa:	fb01 f303 	mul.w	r3, r1, r3
 8007dfe:	0b1b      	lsrs	r3, r3, #12
 8007e00:	b299      	uxth	r1, r3
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e06:	005b      	lsls	r3, r3, #1
 8007e08:	4413      	add	r3, r2
 8007e0a:	460a      	mov	r2, r1
 8007e0c:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8007e0e:	4b25      	ldr	r3, [pc, #148]	; (8007ea4 <BSP_TS_GetState+0x304>)
 8007e10:	881b      	ldrh	r3, [r3, #0]
 8007e12:	4619      	mov	r1, r3
 8007e14:	4a21      	ldr	r2, [pc, #132]	; (8007e9c <BSP_TS_GetState+0x2fc>)
 8007e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e1c:	fb01 f303 	mul.w	r3, r1, r3
 8007e20:	0b1b      	lsrs	r3, r3, #12
 8007e22:	b299      	uxth	r1, r3
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e28:	3304      	adds	r3, #4
 8007e2a:	005b      	lsls	r3, r3, #1
 8007e2c:	4413      	add	r3, r2
 8007e2e:	460a      	mov	r2, r1
 8007e30:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8007e32:	4b17      	ldr	r3, [pc, #92]	; (8007e90 <BSP_TS_GetState+0x2f0>)
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	b298      	uxth	r0, r3
 8007e38:	f107 010c 	add.w	r1, r7, #12
 8007e3c:	f107 0210 	add.w	r2, r7, #16
 8007e40:	f107 0308 	add.w	r3, r7, #8
 8007e44:	9300      	str	r3, [sp, #0]
 8007e46:	460b      	mov	r3, r1
 8007e48:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007e4a:	f7fe fd6d 	bl	8006928 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	b2d9      	uxtb	r1, r3
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e56:	4413      	add	r3, r2
 8007e58:	3316      	adds	r3, #22
 8007e5a:	460a      	mov	r2, r1
 8007e5c:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	b2d9      	uxtb	r1, r3
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e66:	4413      	add	r3, r2
 8007e68:	3320      	adds	r3, #32
 8007e6a:	460a      	mov	r2, r1
 8007e6c:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	2b03      	cmp	r3, #3
 8007e72:	d835      	bhi.n	8007ee0 <BSP_TS_GetState+0x340>
 8007e74:	a201      	add	r2, pc, #4	; (adr r2, 8007e7c <BSP_TS_GetState+0x2dc>)
 8007e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e7a:	bf00      	nop
 8007e7c:	08007ea9 	.word	0x08007ea9
 8007e80:	08007eb7 	.word	0x08007eb7
 8007e84:	08007ec5 	.word	0x08007ec5
 8007e88:	08007ed3 	.word	0x08007ed3
 8007e8c:	20000958 	.word	0x20000958
 8007e90:	20000961 	.word	0x20000961
 8007e94:	20000960 	.word	0x20000960
 8007e98:	20000964 	.word	0x20000964
 8007e9c:	20000978 	.word	0x20000978
 8007ea0:	2000095c 	.word	0x2000095c
 8007ea4:	2000095e 	.word	0x2000095e
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eac:	4413      	add	r3, r2
 8007eae:	331b      	adds	r3, #27
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	701a      	strb	r2, [r3, #0]
          break;
 8007eb4:	e018      	b.n	8007ee8 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eba:	4413      	add	r3, r2
 8007ebc:	331b      	adds	r3, #27
 8007ebe:	2202      	movs	r2, #2
 8007ec0:	701a      	strb	r2, [r3, #0]
          break;
 8007ec2:	e011      	b.n	8007ee8 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ec8:	4413      	add	r3, r2
 8007eca:	331b      	adds	r3, #27
 8007ecc:	2203      	movs	r2, #3
 8007ece:	701a      	strb	r2, [r3, #0]
          break;
 8007ed0:	e00a      	b.n	8007ee8 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ed6:	4413      	add	r3, r2
 8007ed8:	331b      	adds	r3, #27
 8007eda:	2200      	movs	r2, #0
 8007edc:	701a      	strb	r2, [r3, #0]
          break;
 8007ede:	e003      	b.n	8007ee8 <BSP_TS_GetState+0x348>
        default :
          ts_status = TS_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8007ee6:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8007ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eea:	3301      	adds	r3, #1
 8007eec:	64bb      	str	r3, [r7, #72]	; 0x48
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	f4ff ae73 	bcc.w	8007be2 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 f809 	bl	8007f14 <BSP_TS_Get_GestureId>
 8007f02:	4603      	mov	r3, r0
 8007f04:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8007f08:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3754      	adds	r7, #84	; 0x54
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd90      	pop	{r4, r7, pc}

08007f14 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8007f20:	2300      	movs	r3, #0
 8007f22:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8007f24:	4b3b      	ldr	r3, [pc, #236]	; (8008014 <BSP_TS_Get_GestureId+0x100>)
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	f107 0208 	add.w	r2, r7, #8
 8007f2e:	4611      	mov	r1, r2
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7fe fce0 	bl	80068f6 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	2b49      	cmp	r3, #73	; 0x49
 8007f3a:	d05e      	beq.n	8007ffa <BSP_TS_Get_GestureId+0xe6>
 8007f3c:	2b49      	cmp	r3, #73	; 0x49
 8007f3e:	d860      	bhi.n	8008002 <BSP_TS_Get_GestureId+0xee>
 8007f40:	2b1c      	cmp	r3, #28
 8007f42:	d83f      	bhi.n	8007fc4 <BSP_TS_Get_GestureId+0xb0>
 8007f44:	2b1c      	cmp	r3, #28
 8007f46:	d85c      	bhi.n	8008002 <BSP_TS_Get_GestureId+0xee>
 8007f48:	a201      	add	r2, pc, #4	; (adr r2, 8007f50 <BSP_TS_Get_GestureId+0x3c>)
 8007f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4e:	bf00      	nop
 8007f50:	08007fcb 	.word	0x08007fcb
 8007f54:	08008003 	.word	0x08008003
 8007f58:	08008003 	.word	0x08008003
 8007f5c:	08008003 	.word	0x08008003
 8007f60:	08008003 	.word	0x08008003
 8007f64:	08008003 	.word	0x08008003
 8007f68:	08008003 	.word	0x08008003
 8007f6c:	08008003 	.word	0x08008003
 8007f70:	08008003 	.word	0x08008003
 8007f74:	08008003 	.word	0x08008003
 8007f78:	08008003 	.word	0x08008003
 8007f7c:	08008003 	.word	0x08008003
 8007f80:	08008003 	.word	0x08008003
 8007f84:	08008003 	.word	0x08008003
 8007f88:	08008003 	.word	0x08008003
 8007f8c:	08008003 	.word	0x08008003
 8007f90:	08007fd3 	.word	0x08007fd3
 8007f94:	08008003 	.word	0x08008003
 8007f98:	08008003 	.word	0x08008003
 8007f9c:	08008003 	.word	0x08008003
 8007fa0:	08007fdb 	.word	0x08007fdb
 8007fa4:	08008003 	.word	0x08008003
 8007fa8:	08008003 	.word	0x08008003
 8007fac:	08008003 	.word	0x08008003
 8007fb0:	08007fe3 	.word	0x08007fe3
 8007fb4:	08008003 	.word	0x08008003
 8007fb8:	08008003 	.word	0x08008003
 8007fbc:	08008003 	.word	0x08008003
 8007fc0:	08007feb 	.word	0x08007feb
 8007fc4:	2b40      	cmp	r3, #64	; 0x40
 8007fc6:	d014      	beq.n	8007ff2 <BSP_TS_Get_GestureId+0xde>
 8007fc8:	e01b      	b.n	8008002 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8007fd0:	e01a      	b.n	8008008 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8007fd8:	e016      	b.n	8008008 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2202      	movs	r2, #2
 8007fde:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8007fe0:	e012      	b.n	8008008 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2203      	movs	r2, #3
 8007fe6:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8007fe8:	e00e      	b.n	8008008 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2204      	movs	r2, #4
 8007fee:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8007ff0:	e00a      	b.n	8008008 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2205      	movs	r2, #5
 8007ff6:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8007ff8:	e006      	b.n	8008008 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2206      	movs	r2, #6
 8007ffe:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8008000:	e002      	b.n	8008008 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	73fb      	strb	r3, [r7, #15]
      break;
 8008006:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8008008:	7bfb      	ldrb	r3, [r7, #15]
}
 800800a:	4618      	mov	r0, r3
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	20000961 	.word	0x20000961

08008018 <BSP_TS_ResetTouchData>:
  *         of touch information.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if OK, TE_ERROR if problem found.
  */
uint8_t BSP_TS_ResetTouchData(TS_StateTypeDef *TS_State)
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  uint8_t ts_status = TS_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	73fb      	strb	r3, [r7, #15]
  uint32_t index;

  if (TS_State != (TS_StateTypeDef *)NULL)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d02f      	beq.n	800808a <BSP_TS_ResetTouchData+0x72>
  {
    TS_State->gestureId = GEST_ID_NO_GESTURE;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	629a      	str	r2, [r3, #40]	; 0x28
    TS_State->touchDetected = 0;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	701a      	strb	r2, [r3, #0]

    for(index = 0; index < TS_MAX_NB_TOUCH; index++)
 8008036:	2300      	movs	r3, #0
 8008038:	60bb      	str	r3, [r7, #8]
 800803a:	e021      	b.n	8008080 <BSP_TS_ResetTouchData+0x68>
    {
      TS_State->touchX[index]       = 0;
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	005b      	lsls	r3, r3, #1
 8008042:	4413      	add	r3, r2
 8008044:	2200      	movs	r2, #0
 8008046:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index]       = 0;
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	3304      	adds	r3, #4
 800804e:	005b      	lsls	r3, r3, #1
 8008050:	4413      	add	r3, r2
 8008052:	2200      	movs	r2, #0
 8008054:	809a      	strh	r2, [r3, #4]
      TS_State->touchArea[index]    = 0;
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	4413      	add	r3, r2
 800805c:	3320      	adds	r3, #32
 800805e:	2200      	movs	r2, #0
 8008060:	701a      	strb	r2, [r3, #0]
      TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	4413      	add	r3, r2
 8008068:	331b      	adds	r3, #27
 800806a:	2200      	movs	r2, #0
 800806c:	701a      	strb	r2, [r3, #0]
      TS_State->touchWeight[index]  = 0;
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	4413      	add	r3, r2
 8008074:	3316      	adds	r3, #22
 8008076:	2200      	movs	r2, #0
 8008078:	701a      	strb	r2, [r3, #0]
    for(index = 0; index < TS_MAX_NB_TOUCH; index++)
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	3301      	adds	r3, #1
 800807e:	60bb      	str	r3, [r7, #8]
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	2b04      	cmp	r3, #4
 8008084:	d9da      	bls.n	800803c <BSP_TS_ResetTouchData+0x24>
    }

    ts_status = TS_OK;
 8008086:	2300      	movs	r3, #0
 8008088:	73fb      	strb	r3, [r7, #15]

  } /* of if (TS_State != (TS_StateTypeDef *)NULL) */

  return (ts_status);
 800808a:	7bfb      	ldrb	r3, [r7, #15]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3714      	adds	r7, #20
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	4603      	mov	r3, r0
 80080a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80080a2:	79fb      	ldrb	r3, [r7, #7]
 80080a4:	4a08      	ldr	r2, [pc, #32]	; (80080c8 <disk_status+0x30>)
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	4413      	add	r3, r2
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	79fa      	ldrb	r2, [r7, #7]
 80080b0:	4905      	ldr	r1, [pc, #20]	; (80080c8 <disk_status+0x30>)
 80080b2:	440a      	add	r2, r1
 80080b4:	7a12      	ldrb	r2, [r2, #8]
 80080b6:	4610      	mov	r0, r2
 80080b8:	4798      	blx	r3
 80080ba:	4603      	mov	r3, r0
 80080bc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80080be:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	200009b4 	.word	0x200009b4

080080cc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	4603      	mov	r3, r0
 80080d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80080d6:	2300      	movs	r3, #0
 80080d8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80080da:	79fb      	ldrb	r3, [r7, #7]
 80080dc:	4a0d      	ldr	r2, [pc, #52]	; (8008114 <disk_initialize+0x48>)
 80080de:	5cd3      	ldrb	r3, [r2, r3]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d111      	bne.n	8008108 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80080e4:	79fb      	ldrb	r3, [r7, #7]
 80080e6:	4a0b      	ldr	r2, [pc, #44]	; (8008114 <disk_initialize+0x48>)
 80080e8:	2101      	movs	r1, #1
 80080ea:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80080ec:	79fb      	ldrb	r3, [r7, #7]
 80080ee:	4a09      	ldr	r2, [pc, #36]	; (8008114 <disk_initialize+0x48>)
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	4413      	add	r3, r2
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	79fa      	ldrb	r2, [r7, #7]
 80080fa:	4906      	ldr	r1, [pc, #24]	; (8008114 <disk_initialize+0x48>)
 80080fc:	440a      	add	r2, r1
 80080fe:	7a12      	ldrb	r2, [r2, #8]
 8008100:	4610      	mov	r0, r2
 8008102:	4798      	blx	r3
 8008104:	4603      	mov	r3, r0
 8008106:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008108:	7bfb      	ldrb	r3, [r7, #15]
}
 800810a:	4618      	mov	r0, r3
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	200009b4 	.word	0x200009b4

08008118 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008118:	b590      	push	{r4, r7, lr}
 800811a:	b087      	sub	sp, #28
 800811c:	af00      	add	r7, sp, #0
 800811e:	60b9      	str	r1, [r7, #8]
 8008120:	607a      	str	r2, [r7, #4]
 8008122:	603b      	str	r3, [r7, #0]
 8008124:	4603      	mov	r3, r0
 8008126:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008128:	7bfb      	ldrb	r3, [r7, #15]
 800812a:	4a0a      	ldr	r2, [pc, #40]	; (8008154 <disk_read+0x3c>)
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4413      	add	r3, r2
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	689c      	ldr	r4, [r3, #8]
 8008134:	7bfb      	ldrb	r3, [r7, #15]
 8008136:	4a07      	ldr	r2, [pc, #28]	; (8008154 <disk_read+0x3c>)
 8008138:	4413      	add	r3, r2
 800813a:	7a18      	ldrb	r0, [r3, #8]
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	68b9      	ldr	r1, [r7, #8]
 8008142:	47a0      	blx	r4
 8008144:	4603      	mov	r3, r0
 8008146:	75fb      	strb	r3, [r7, #23]
  return res;
 8008148:	7dfb      	ldrb	r3, [r7, #23]
}
 800814a:	4618      	mov	r0, r3
 800814c:	371c      	adds	r7, #28
 800814e:	46bd      	mov	sp, r7
 8008150:	bd90      	pop	{r4, r7, pc}
 8008152:	bf00      	nop
 8008154:	200009b4 	.word	0x200009b4

08008158 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008158:	b590      	push	{r4, r7, lr}
 800815a:	b087      	sub	sp, #28
 800815c:	af00      	add	r7, sp, #0
 800815e:	60b9      	str	r1, [r7, #8]
 8008160:	607a      	str	r2, [r7, #4]
 8008162:	603b      	str	r3, [r7, #0]
 8008164:	4603      	mov	r3, r0
 8008166:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008168:	7bfb      	ldrb	r3, [r7, #15]
 800816a:	4a0a      	ldr	r2, [pc, #40]	; (8008194 <disk_write+0x3c>)
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	4413      	add	r3, r2
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	68dc      	ldr	r4, [r3, #12]
 8008174:	7bfb      	ldrb	r3, [r7, #15]
 8008176:	4a07      	ldr	r2, [pc, #28]	; (8008194 <disk_write+0x3c>)
 8008178:	4413      	add	r3, r2
 800817a:	7a18      	ldrb	r0, [r3, #8]
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	68b9      	ldr	r1, [r7, #8]
 8008182:	47a0      	blx	r4
 8008184:	4603      	mov	r3, r0
 8008186:	75fb      	strb	r3, [r7, #23]
  return res;
 8008188:	7dfb      	ldrb	r3, [r7, #23]
}
 800818a:	4618      	mov	r0, r3
 800818c:	371c      	adds	r7, #28
 800818e:	46bd      	mov	sp, r7
 8008190:	bd90      	pop	{r4, r7, pc}
 8008192:	bf00      	nop
 8008194:	200009b4 	.word	0x200009b4

08008198 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	4603      	mov	r3, r0
 80081a0:	603a      	str	r2, [r7, #0]
 80081a2:	71fb      	strb	r3, [r7, #7]
 80081a4:	460b      	mov	r3, r1
 80081a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80081a8:	79fb      	ldrb	r3, [r7, #7]
 80081aa:	4a09      	ldr	r2, [pc, #36]	; (80081d0 <disk_ioctl+0x38>)
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	4413      	add	r3, r2
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	79fa      	ldrb	r2, [r7, #7]
 80081b6:	4906      	ldr	r1, [pc, #24]	; (80081d0 <disk_ioctl+0x38>)
 80081b8:	440a      	add	r2, r1
 80081ba:	7a10      	ldrb	r0, [r2, #8]
 80081bc:	79b9      	ldrb	r1, [r7, #6]
 80081be:	683a      	ldr	r2, [r7, #0]
 80081c0:	4798      	blx	r3
 80081c2:	4603      	mov	r3, r0
 80081c4:	73fb      	strb	r3, [r7, #15]
  return res;
 80081c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	200009b4 	.word	0x200009b4

080081d4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	3301      	adds	r3, #1
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80081e4:	89fb      	ldrh	r3, [r7, #14]
 80081e6:	021b      	lsls	r3, r3, #8
 80081e8:	b21a      	sxth	r2, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	b21b      	sxth	r3, r3
 80081f0:	4313      	orrs	r3, r2
 80081f2:	b21b      	sxth	r3, r3
 80081f4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80081f6:	89fb      	ldrh	r3, [r7, #14]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3714      	adds	r7, #20
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	3303      	adds	r3, #3
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	021b      	lsls	r3, r3, #8
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	3202      	adds	r2, #2
 800821c:	7812      	ldrb	r2, [r2, #0]
 800821e:	4313      	orrs	r3, r2
 8008220:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	021b      	lsls	r3, r3, #8
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	3201      	adds	r2, #1
 800822a:	7812      	ldrb	r2, [r2, #0]
 800822c:	4313      	orrs	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	021b      	lsls	r3, r3, #8
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	7812      	ldrb	r2, [r2, #0]
 8008238:	4313      	orrs	r3, r2
 800823a:	60fb      	str	r3, [r7, #12]
	return rv;
 800823c:	68fb      	ldr	r3, [r7, #12]
}
 800823e:	4618      	mov	r0, r3
 8008240:	3714      	adds	r7, #20
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800824a:	b480      	push	{r7}
 800824c:	b083      	sub	sp, #12
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	460b      	mov	r3, r1
 8008254:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	1c5a      	adds	r2, r3, #1
 800825a:	607a      	str	r2, [r7, #4]
 800825c:	887a      	ldrh	r2, [r7, #2]
 800825e:	b2d2      	uxtb	r2, r2
 8008260:	701a      	strb	r2, [r3, #0]
 8008262:	887b      	ldrh	r3, [r7, #2]
 8008264:	0a1b      	lsrs	r3, r3, #8
 8008266:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	1c5a      	adds	r2, r3, #1
 800826c:	607a      	str	r2, [r7, #4]
 800826e:	887a      	ldrh	r2, [r7, #2]
 8008270:	b2d2      	uxtb	r2, r2
 8008272:	701a      	strb	r2, [r3, #0]
}
 8008274:	bf00      	nop
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	1c5a      	adds	r2, r3, #1
 800828e:	607a      	str	r2, [r7, #4]
 8008290:	683a      	ldr	r2, [r7, #0]
 8008292:	b2d2      	uxtb	r2, r2
 8008294:	701a      	strb	r2, [r3, #0]
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	0a1b      	lsrs	r3, r3, #8
 800829a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	1c5a      	adds	r2, r3, #1
 80082a0:	607a      	str	r2, [r7, #4]
 80082a2:	683a      	ldr	r2, [r7, #0]
 80082a4:	b2d2      	uxtb	r2, r2
 80082a6:	701a      	strb	r2, [r3, #0]
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	0a1b      	lsrs	r3, r3, #8
 80082ac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	1c5a      	adds	r2, r3, #1
 80082b2:	607a      	str	r2, [r7, #4]
 80082b4:	683a      	ldr	r2, [r7, #0]
 80082b6:	b2d2      	uxtb	r2, r2
 80082b8:	701a      	strb	r2, [r3, #0]
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	0a1b      	lsrs	r3, r3, #8
 80082be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	1c5a      	adds	r2, r3, #1
 80082c4:	607a      	str	r2, [r7, #4]
 80082c6:	683a      	ldr	r2, [r7, #0]
 80082c8:	b2d2      	uxtb	r2, r2
 80082ca:	701a      	strb	r2, [r3, #0]
}
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80082d8:	b480      	push	{r7}
 80082da:	b087      	sub	sp, #28
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d00d      	beq.n	800830e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80082f2:	693a      	ldr	r2, [r7, #16]
 80082f4:	1c53      	adds	r3, r2, #1
 80082f6:	613b      	str	r3, [r7, #16]
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	1c59      	adds	r1, r3, #1
 80082fc:	6179      	str	r1, [r7, #20]
 80082fe:	7812      	ldrb	r2, [r2, #0]
 8008300:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	3b01      	subs	r3, #1
 8008306:	607b      	str	r3, [r7, #4]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1f1      	bne.n	80082f2 <mem_cpy+0x1a>
	}
}
 800830e:	bf00      	nop
 8008310:	371c      	adds	r7, #28
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr

0800831a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800831a:	b480      	push	{r7}
 800831c:	b087      	sub	sp, #28
 800831e:	af00      	add	r7, sp, #0
 8008320:	60f8      	str	r0, [r7, #12]
 8008322:	60b9      	str	r1, [r7, #8]
 8008324:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	1c5a      	adds	r2, r3, #1
 800832e:	617a      	str	r2, [r7, #20]
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	b2d2      	uxtb	r2, r2
 8008334:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	3b01      	subs	r3, #1
 800833a:	607b      	str	r3, [r7, #4]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1f3      	bne.n	800832a <mem_set+0x10>
}
 8008342:	bf00      	nop
 8008344:	bf00      	nop
 8008346:	371c      	adds	r7, #28
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008350:	b480      	push	{r7}
 8008352:	b089      	sub	sp, #36	; 0x24
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	61fb      	str	r3, [r7, #28]
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008364:	2300      	movs	r3, #0
 8008366:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	1c5a      	adds	r2, r3, #1
 800836c:	61fa      	str	r2, [r7, #28]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	4619      	mov	r1, r3
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	1c5a      	adds	r2, r3, #1
 8008376:	61ba      	str	r2, [r7, #24]
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	1acb      	subs	r3, r1, r3
 800837c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	3b01      	subs	r3, #1
 8008382:	607b      	str	r3, [r7, #4]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d002      	beq.n	8008390 <mem_cmp+0x40>
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d0eb      	beq.n	8008368 <mem_cmp+0x18>

	return r;
 8008390:	697b      	ldr	r3, [r7, #20]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3724      	adds	r7, #36	; 0x24
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr

0800839e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800839e:	b480      	push	{r7}
 80083a0:	b083      	sub	sp, #12
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
 80083a6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80083a8:	e002      	b.n	80083b0 <chk_chr+0x12>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	3301      	adds	r3, #1
 80083ae:	607b      	str	r3, [r7, #4]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d005      	beq.n	80083c4 <chk_chr+0x26>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	461a      	mov	r2, r3
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d1f2      	bne.n	80083aa <chk_chr+0xc>
	return *str;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	781b      	ldrb	r3, [r3, #0]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80083de:	2300      	movs	r3, #0
 80083e0:	60bb      	str	r3, [r7, #8]
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	60fb      	str	r3, [r7, #12]
 80083e6:	e029      	b.n	800843c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80083e8:	4a27      	ldr	r2, [pc, #156]	; (8008488 <chk_lock+0xb4>)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	011b      	lsls	r3, r3, #4
 80083ee:	4413      	add	r3, r2
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d01d      	beq.n	8008432 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80083f6:	4a24      	ldr	r2, [pc, #144]	; (8008488 <chk_lock+0xb4>)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	011b      	lsls	r3, r3, #4
 80083fc:	4413      	add	r3, r2
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	429a      	cmp	r2, r3
 8008406:	d116      	bne.n	8008436 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008408:	4a1f      	ldr	r2, [pc, #124]	; (8008488 <chk_lock+0xb4>)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	011b      	lsls	r3, r3, #4
 800840e:	4413      	add	r3, r2
 8008410:	3304      	adds	r3, #4
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008418:	429a      	cmp	r2, r3
 800841a:	d10c      	bne.n	8008436 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800841c:	4a1a      	ldr	r2, [pc, #104]	; (8008488 <chk_lock+0xb4>)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	011b      	lsls	r3, r3, #4
 8008422:	4413      	add	r3, r2
 8008424:	3308      	adds	r3, #8
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800842c:	429a      	cmp	r2, r3
 800842e:	d102      	bne.n	8008436 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008430:	e007      	b.n	8008442 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008432:	2301      	movs	r3, #1
 8008434:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	3301      	adds	r3, #1
 800843a:	60fb      	str	r3, [r7, #12]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2b01      	cmp	r3, #1
 8008440:	d9d2      	bls.n	80083e8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2b02      	cmp	r3, #2
 8008446:	d109      	bne.n	800845c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d102      	bne.n	8008454 <chk_lock+0x80>
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	2b02      	cmp	r3, #2
 8008452:	d101      	bne.n	8008458 <chk_lock+0x84>
 8008454:	2300      	movs	r3, #0
 8008456:	e010      	b.n	800847a <chk_lock+0xa6>
 8008458:	2312      	movs	r3, #18
 800845a:	e00e      	b.n	800847a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d108      	bne.n	8008474 <chk_lock+0xa0>
 8008462:	4a09      	ldr	r2, [pc, #36]	; (8008488 <chk_lock+0xb4>)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	011b      	lsls	r3, r3, #4
 8008468:	4413      	add	r3, r2
 800846a:	330c      	adds	r3, #12
 800846c:	881b      	ldrh	r3, [r3, #0]
 800846e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008472:	d101      	bne.n	8008478 <chk_lock+0xa4>
 8008474:	2310      	movs	r3, #16
 8008476:	e000      	b.n	800847a <chk_lock+0xa6>
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3714      	adds	r7, #20
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	20000994 	.word	0x20000994

0800848c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008492:	2300      	movs	r3, #0
 8008494:	607b      	str	r3, [r7, #4]
 8008496:	e002      	b.n	800849e <enq_lock+0x12>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	3301      	adds	r3, #1
 800849c:	607b      	str	r3, [r7, #4]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d806      	bhi.n	80084b2 <enq_lock+0x26>
 80084a4:	4a09      	ldr	r2, [pc, #36]	; (80084cc <enq_lock+0x40>)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	011b      	lsls	r3, r3, #4
 80084aa:	4413      	add	r3, r2
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1f2      	bne.n	8008498 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2b02      	cmp	r3, #2
 80084b6:	bf14      	ite	ne
 80084b8:	2301      	movne	r3, #1
 80084ba:	2300      	moveq	r3, #0
 80084bc:	b2db      	uxtb	r3, r3
}
 80084be:	4618      	mov	r0, r3
 80084c0:	370c      	adds	r7, #12
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	20000994 	.word	0x20000994

080084d0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80084da:	2300      	movs	r3, #0
 80084dc:	60fb      	str	r3, [r7, #12]
 80084de:	e01f      	b.n	8008520 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80084e0:	4a41      	ldr	r2, [pc, #260]	; (80085e8 <inc_lock+0x118>)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	011b      	lsls	r3, r3, #4
 80084e6:	4413      	add	r3, r2
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d113      	bne.n	800851a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80084f2:	4a3d      	ldr	r2, [pc, #244]	; (80085e8 <inc_lock+0x118>)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	011b      	lsls	r3, r3, #4
 80084f8:	4413      	add	r3, r2
 80084fa:	3304      	adds	r3, #4
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008502:	429a      	cmp	r2, r3
 8008504:	d109      	bne.n	800851a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008506:	4a38      	ldr	r2, [pc, #224]	; (80085e8 <inc_lock+0x118>)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	011b      	lsls	r3, r3, #4
 800850c:	4413      	add	r3, r2
 800850e:	3308      	adds	r3, #8
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008516:	429a      	cmp	r2, r3
 8008518:	d006      	beq.n	8008528 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	3301      	adds	r3, #1
 800851e:	60fb      	str	r3, [r7, #12]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2b01      	cmp	r3, #1
 8008524:	d9dc      	bls.n	80084e0 <inc_lock+0x10>
 8008526:	e000      	b.n	800852a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008528:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2b02      	cmp	r3, #2
 800852e:	d132      	bne.n	8008596 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008530:	2300      	movs	r3, #0
 8008532:	60fb      	str	r3, [r7, #12]
 8008534:	e002      	b.n	800853c <inc_lock+0x6c>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	3301      	adds	r3, #1
 800853a:	60fb      	str	r3, [r7, #12]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2b01      	cmp	r3, #1
 8008540:	d806      	bhi.n	8008550 <inc_lock+0x80>
 8008542:	4a29      	ldr	r2, [pc, #164]	; (80085e8 <inc_lock+0x118>)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	011b      	lsls	r3, r3, #4
 8008548:	4413      	add	r3, r2
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1f2      	bne.n	8008536 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2b02      	cmp	r3, #2
 8008554:	d101      	bne.n	800855a <inc_lock+0x8a>
 8008556:	2300      	movs	r3, #0
 8008558:	e040      	b.n	80085dc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	4922      	ldr	r1, [pc, #136]	; (80085e8 <inc_lock+0x118>)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	011b      	lsls	r3, r3, #4
 8008564:	440b      	add	r3, r1
 8008566:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	689a      	ldr	r2, [r3, #8]
 800856c:	491e      	ldr	r1, [pc, #120]	; (80085e8 <inc_lock+0x118>)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	011b      	lsls	r3, r3, #4
 8008572:	440b      	add	r3, r1
 8008574:	3304      	adds	r3, #4
 8008576:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	695a      	ldr	r2, [r3, #20]
 800857c:	491a      	ldr	r1, [pc, #104]	; (80085e8 <inc_lock+0x118>)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	011b      	lsls	r3, r3, #4
 8008582:	440b      	add	r3, r1
 8008584:	3308      	adds	r3, #8
 8008586:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008588:	4a17      	ldr	r2, [pc, #92]	; (80085e8 <inc_lock+0x118>)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	011b      	lsls	r3, r3, #4
 800858e:	4413      	add	r3, r2
 8008590:	330c      	adds	r3, #12
 8008592:	2200      	movs	r2, #0
 8008594:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d009      	beq.n	80085b0 <inc_lock+0xe0>
 800859c:	4a12      	ldr	r2, [pc, #72]	; (80085e8 <inc_lock+0x118>)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	011b      	lsls	r3, r3, #4
 80085a2:	4413      	add	r3, r2
 80085a4:	330c      	adds	r3, #12
 80085a6:	881b      	ldrh	r3, [r3, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d001      	beq.n	80085b0 <inc_lock+0xe0>
 80085ac:	2300      	movs	r3, #0
 80085ae:	e015      	b.n	80085dc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d108      	bne.n	80085c8 <inc_lock+0xf8>
 80085b6:	4a0c      	ldr	r2, [pc, #48]	; (80085e8 <inc_lock+0x118>)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	011b      	lsls	r3, r3, #4
 80085bc:	4413      	add	r3, r2
 80085be:	330c      	adds	r3, #12
 80085c0:	881b      	ldrh	r3, [r3, #0]
 80085c2:	3301      	adds	r3, #1
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	e001      	b.n	80085cc <inc_lock+0xfc>
 80085c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80085cc:	4906      	ldr	r1, [pc, #24]	; (80085e8 <inc_lock+0x118>)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	011b      	lsls	r3, r3, #4
 80085d2:	440b      	add	r3, r1
 80085d4:	330c      	adds	r3, #12
 80085d6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	3301      	adds	r3, #1
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3714      	adds	r7, #20
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr
 80085e8:	20000994 	.word	0x20000994

080085ec <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	3b01      	subs	r3, #1
 80085f8:	607b      	str	r3, [r7, #4]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d825      	bhi.n	800864c <dec_lock+0x60>
		n = Files[i].ctr;
 8008600:	4a17      	ldr	r2, [pc, #92]	; (8008660 <dec_lock+0x74>)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	011b      	lsls	r3, r3, #4
 8008606:	4413      	add	r3, r2
 8008608:	330c      	adds	r3, #12
 800860a:	881b      	ldrh	r3, [r3, #0]
 800860c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800860e:	89fb      	ldrh	r3, [r7, #14]
 8008610:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008614:	d101      	bne.n	800861a <dec_lock+0x2e>
 8008616:	2300      	movs	r3, #0
 8008618:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800861a:	89fb      	ldrh	r3, [r7, #14]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d002      	beq.n	8008626 <dec_lock+0x3a>
 8008620:	89fb      	ldrh	r3, [r7, #14]
 8008622:	3b01      	subs	r3, #1
 8008624:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008626:	4a0e      	ldr	r2, [pc, #56]	; (8008660 <dec_lock+0x74>)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	011b      	lsls	r3, r3, #4
 800862c:	4413      	add	r3, r2
 800862e:	330c      	adds	r3, #12
 8008630:	89fa      	ldrh	r2, [r7, #14]
 8008632:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008634:	89fb      	ldrh	r3, [r7, #14]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d105      	bne.n	8008646 <dec_lock+0x5a>
 800863a:	4a09      	ldr	r2, [pc, #36]	; (8008660 <dec_lock+0x74>)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	011b      	lsls	r3, r3, #4
 8008640:	4413      	add	r3, r2
 8008642:	2200      	movs	r2, #0
 8008644:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008646:	2300      	movs	r3, #0
 8008648:	737b      	strb	r3, [r7, #13]
 800864a:	e001      	b.n	8008650 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800864c:	2302      	movs	r3, #2
 800864e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008650:	7b7b      	ldrb	r3, [r7, #13]
}
 8008652:	4618      	mov	r0, r3
 8008654:	3714      	adds	r7, #20
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	20000994 	.word	0x20000994

08008664 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800866c:	2300      	movs	r3, #0
 800866e:	60fb      	str	r3, [r7, #12]
 8008670:	e010      	b.n	8008694 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008672:	4a0d      	ldr	r2, [pc, #52]	; (80086a8 <clear_lock+0x44>)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	011b      	lsls	r3, r3, #4
 8008678:	4413      	add	r3, r2
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	429a      	cmp	r2, r3
 8008680:	d105      	bne.n	800868e <clear_lock+0x2a>
 8008682:	4a09      	ldr	r2, [pc, #36]	; (80086a8 <clear_lock+0x44>)
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	011b      	lsls	r3, r3, #4
 8008688:	4413      	add	r3, r2
 800868a:	2200      	movs	r2, #0
 800868c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	3301      	adds	r3, #1
 8008692:	60fb      	str	r3, [r7, #12]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d9eb      	bls.n	8008672 <clear_lock+0xe>
	}
}
 800869a:	bf00      	nop
 800869c:	bf00      	nop
 800869e:	3714      	adds	r7, #20
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr
 80086a8:	20000994 	.word	0x20000994

080086ac <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b086      	sub	sp, #24
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80086b4:	2300      	movs	r3, #0
 80086b6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	78db      	ldrb	r3, [r3, #3]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d034      	beq.n	800872a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	7858      	ldrb	r0, [r3, #1]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80086d0:	2301      	movs	r3, #1
 80086d2:	697a      	ldr	r2, [r7, #20]
 80086d4:	f7ff fd40 	bl	8008158 <disk_write>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d002      	beq.n	80086e4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80086de:	2301      	movs	r3, #1
 80086e0:	73fb      	strb	r3, [r7, #15]
 80086e2:	e022      	b.n	800872a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a1b      	ldr	r3, [r3, #32]
 80086ee:	697a      	ldr	r2, [r7, #20]
 80086f0:	1ad2      	subs	r2, r2, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	699b      	ldr	r3, [r3, #24]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d217      	bcs.n	800872a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	789b      	ldrb	r3, [r3, #2]
 80086fe:	613b      	str	r3, [r7, #16]
 8008700:	e010      	b.n	8008724 <sync_window+0x78>
					wsect += fs->fsize;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	699b      	ldr	r3, [r3, #24]
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	4413      	add	r3, r2
 800870a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	7858      	ldrb	r0, [r3, #1]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008716:	2301      	movs	r3, #1
 8008718:	697a      	ldr	r2, [r7, #20]
 800871a:	f7ff fd1d 	bl	8008158 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	3b01      	subs	r3, #1
 8008722:	613b      	str	r3, [r7, #16]
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	2b01      	cmp	r3, #1
 8008728:	d8eb      	bhi.n	8008702 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800872a:	7bfb      	ldrb	r3, [r7, #15]
}
 800872c:	4618      	mov	r0, r3
 800872e:	3718      	adds	r7, #24
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800873e:	2300      	movs	r3, #0
 8008740:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	429a      	cmp	r2, r3
 800874a:	d01b      	beq.n	8008784 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f7ff ffad 	bl	80086ac <sync_window>
 8008752:	4603      	mov	r3, r0
 8008754:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008756:	7bfb      	ldrb	r3, [r7, #15]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d113      	bne.n	8008784 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	7858      	ldrb	r0, [r3, #1]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008766:	2301      	movs	r3, #1
 8008768:	683a      	ldr	r2, [r7, #0]
 800876a:	f7ff fcd5 	bl	8008118 <disk_read>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d004      	beq.n	800877e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008778:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800877a:	2301      	movs	r3, #1
 800877c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	683a      	ldr	r2, [r7, #0]
 8008782:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8008784:	7bfb      	ldrb	r3, [r7, #15]
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
	...

08008790 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f7ff ff87 	bl	80086ac <sync_window>
 800879e:	4603      	mov	r3, r0
 80087a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80087a2:	7bfb      	ldrb	r3, [r7, #15]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d158      	bne.n	800885a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	2b03      	cmp	r3, #3
 80087ae:	d148      	bne.n	8008842 <sync_fs+0xb2>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	791b      	ldrb	r3, [r3, #4]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d144      	bne.n	8008842 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	3330      	adds	r3, #48	; 0x30
 80087bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087c0:	2100      	movs	r1, #0
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7ff fda9 	bl	800831a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	3330      	adds	r3, #48	; 0x30
 80087cc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80087d0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7ff fd38 	bl	800824a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	3330      	adds	r3, #48	; 0x30
 80087de:	4921      	ldr	r1, [pc, #132]	; (8008864 <sync_fs+0xd4>)
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7ff fd4d 	bl	8008280 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	3330      	adds	r3, #48	; 0x30
 80087ea:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80087ee:	491e      	ldr	r1, [pc, #120]	; (8008868 <sync_fs+0xd8>)
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7ff fd45 	bl	8008280 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	3330      	adds	r3, #48	; 0x30
 80087fa:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	4619      	mov	r1, r3
 8008804:	4610      	mov	r0, r2
 8008806:	f7ff fd3b 	bl	8008280 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	3330      	adds	r3, #48	; 0x30
 800880e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	4619      	mov	r1, r3
 8008818:	4610      	mov	r0, r2
 800881a:	f7ff fd31 	bl	8008280 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	69db      	ldr	r3, [r3, #28]
 8008822:	1c5a      	adds	r2, r3, #1
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	7858      	ldrb	r0, [r3, #1]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008836:	2301      	movs	r3, #1
 8008838:	f7ff fc8e 	bl	8008158 <disk_write>
			fs->fsi_flag = 0;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	785b      	ldrb	r3, [r3, #1]
 8008846:	2200      	movs	r2, #0
 8008848:	2100      	movs	r1, #0
 800884a:	4618      	mov	r0, r3
 800884c:	f7ff fca4 	bl	8008198 <disk_ioctl>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d001      	beq.n	800885a <sync_fs+0xca>
 8008856:	2301      	movs	r3, #1
 8008858:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800885a:	7bfb      	ldrb	r3, [r7, #15]
}
 800885c:	4618      	mov	r0, r3
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	41615252 	.word	0x41615252
 8008868:	61417272 	.word	0x61417272

0800886c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	3b02      	subs	r3, #2
 800887a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	695b      	ldr	r3, [r3, #20]
 8008880:	3b02      	subs	r3, #2
 8008882:	683a      	ldr	r2, [r7, #0]
 8008884:	429a      	cmp	r2, r3
 8008886:	d301      	bcc.n	800888c <clust2sect+0x20>
 8008888:	2300      	movs	r3, #0
 800888a:	e008      	b.n	800889e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	895b      	ldrh	r3, [r3, #10]
 8008890:	461a      	mov	r2, r3
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	fb03 f202 	mul.w	r2, r3, r2
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800889c:	4413      	add	r3, r2
}
 800889e:	4618      	mov	r0, r3
 80088a0:	370c      	adds	r7, #12
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr

080088aa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b086      	sub	sp, #24
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
 80088b2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d904      	bls.n	80088ca <get_fat+0x20>
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	695b      	ldr	r3, [r3, #20]
 80088c4:	683a      	ldr	r2, [r7, #0]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d302      	bcc.n	80088d0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80088ca:	2301      	movs	r3, #1
 80088cc:	617b      	str	r3, [r7, #20]
 80088ce:	e08f      	b.n	80089f0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80088d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088d4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	2b03      	cmp	r3, #3
 80088dc:	d062      	beq.n	80089a4 <get_fat+0xfa>
 80088de:	2b03      	cmp	r3, #3
 80088e0:	dc7c      	bgt.n	80089dc <get_fat+0x132>
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d002      	beq.n	80088ec <get_fat+0x42>
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d042      	beq.n	8008970 <get_fat+0xc6>
 80088ea:	e077      	b.n	80089dc <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	60fb      	str	r3, [r7, #12]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	085b      	lsrs	r3, r3, #1
 80088f4:	68fa      	ldr	r2, [r7, #12]
 80088f6:	4413      	add	r3, r2
 80088f8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	6a1a      	ldr	r2, [r3, #32]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	0a5b      	lsrs	r3, r3, #9
 8008902:	4413      	add	r3, r2
 8008904:	4619      	mov	r1, r3
 8008906:	6938      	ldr	r0, [r7, #16]
 8008908:	f7ff ff14 	bl	8008734 <move_window>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d167      	bne.n	80089e2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	1c5a      	adds	r2, r3, #1
 8008916:	60fa      	str	r2, [r7, #12]
 8008918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800891c:	693a      	ldr	r2, [r7, #16]
 800891e:	4413      	add	r3, r2
 8008920:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008924:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	6a1a      	ldr	r2, [r3, #32]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	0a5b      	lsrs	r3, r3, #9
 800892e:	4413      	add	r3, r2
 8008930:	4619      	mov	r1, r3
 8008932:	6938      	ldr	r0, [r7, #16]
 8008934:	f7ff fefe 	bl	8008734 <move_window>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d153      	bne.n	80089e6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008944:	693a      	ldr	r2, [r7, #16]
 8008946:	4413      	add	r3, r2
 8008948:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800894c:	021b      	lsls	r3, r3, #8
 800894e:	461a      	mov	r2, r3
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	4313      	orrs	r3, r2
 8008954:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	f003 0301 	and.w	r3, r3, #1
 800895c:	2b00      	cmp	r3, #0
 800895e:	d002      	beq.n	8008966 <get_fat+0xbc>
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	091b      	lsrs	r3, r3, #4
 8008964:	e002      	b.n	800896c <get_fat+0xc2>
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800896c:	617b      	str	r3, [r7, #20]
			break;
 800896e:	e03f      	b.n	80089f0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	6a1a      	ldr	r2, [r3, #32]
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	0a1b      	lsrs	r3, r3, #8
 8008978:	4413      	add	r3, r2
 800897a:	4619      	mov	r1, r3
 800897c:	6938      	ldr	r0, [r7, #16]
 800897e:	f7ff fed9 	bl	8008734 <move_window>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d130      	bne.n	80089ea <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	005b      	lsls	r3, r3, #1
 8008992:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008996:	4413      	add	r3, r2
 8008998:	4618      	mov	r0, r3
 800899a:	f7ff fc1b 	bl	80081d4 <ld_word>
 800899e:	4603      	mov	r3, r0
 80089a0:	617b      	str	r3, [r7, #20]
			break;
 80089a2:	e025      	b.n	80089f0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	6a1a      	ldr	r2, [r3, #32]
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	09db      	lsrs	r3, r3, #7
 80089ac:	4413      	add	r3, r2
 80089ae:	4619      	mov	r1, r3
 80089b0:	6938      	ldr	r0, [r7, #16]
 80089b2:	f7ff febf 	bl	8008734 <move_window>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d118      	bne.n	80089ee <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80089ca:	4413      	add	r3, r2
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7ff fc19 	bl	8008204 <ld_dword>
 80089d2:	4603      	mov	r3, r0
 80089d4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80089d8:	617b      	str	r3, [r7, #20]
			break;
 80089da:	e009      	b.n	80089f0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80089dc:	2301      	movs	r3, #1
 80089de:	617b      	str	r3, [r7, #20]
 80089e0:	e006      	b.n	80089f0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80089e2:	bf00      	nop
 80089e4:	e004      	b.n	80089f0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80089e6:	bf00      	nop
 80089e8:	e002      	b.n	80089f0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80089ea:	bf00      	nop
 80089ec:	e000      	b.n	80089f0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80089ee:	bf00      	nop
		}
	}

	return val;
 80089f0:	697b      	ldr	r3, [r7, #20]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3718      	adds	r7, #24
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80089fa:	b590      	push	{r4, r7, lr}
 80089fc:	b089      	sub	sp, #36	; 0x24
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	60f8      	str	r0, [r7, #12]
 8008a02:	60b9      	str	r1, [r7, #8]
 8008a04:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008a06:	2302      	movs	r3, #2
 8008a08:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	f240 80d2 	bls.w	8008bb6 <put_fat+0x1bc>
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	695b      	ldr	r3, [r3, #20]
 8008a16:	68ba      	ldr	r2, [r7, #8]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	f080 80cc 	bcs.w	8008bb6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	2b03      	cmp	r3, #3
 8008a24:	f000 8096 	beq.w	8008b54 <put_fat+0x15a>
 8008a28:	2b03      	cmp	r3, #3
 8008a2a:	f300 80cd 	bgt.w	8008bc8 <put_fat+0x1ce>
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d002      	beq.n	8008a38 <put_fat+0x3e>
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d06e      	beq.n	8008b14 <put_fat+0x11a>
 8008a36:	e0c7      	b.n	8008bc8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	61bb      	str	r3, [r7, #24]
 8008a3c:	69bb      	ldr	r3, [r7, #24]
 8008a3e:	085b      	lsrs	r3, r3, #1
 8008a40:	69ba      	ldr	r2, [r7, #24]
 8008a42:	4413      	add	r3, r2
 8008a44:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	6a1a      	ldr	r2, [r3, #32]
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	0a5b      	lsrs	r3, r3, #9
 8008a4e:	4413      	add	r3, r2
 8008a50:	4619      	mov	r1, r3
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f7ff fe6e 	bl	8008734 <move_window>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a5c:	7ffb      	ldrb	r3, [r7, #31]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f040 80ab 	bne.w	8008bba <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	1c59      	adds	r1, r3, #1
 8008a6e:	61b9      	str	r1, [r7, #24]
 8008a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a74:	4413      	add	r3, r2
 8008a76:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	f003 0301 	and.w	r3, r3, #1
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00d      	beq.n	8008a9e <put_fat+0xa4>
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	b25b      	sxtb	r3, r3
 8008a88:	f003 030f 	and.w	r3, r3, #15
 8008a8c:	b25a      	sxtb	r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	011b      	lsls	r3, r3, #4
 8008a94:	b25b      	sxtb	r3, r3
 8008a96:	4313      	orrs	r3, r2
 8008a98:	b25b      	sxtb	r3, r3
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	e001      	b.n	8008aa2 <put_fat+0xa8>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	697a      	ldr	r2, [r7, #20]
 8008aa4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6a1a      	ldr	r2, [r3, #32]
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	0a5b      	lsrs	r3, r3, #9
 8008ab4:	4413      	add	r3, r2
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f7ff fe3b 	bl	8008734 <move_window>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008ac2:	7ffb      	ldrb	r3, [r7, #31]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d17a      	bne.n	8008bbe <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ad4:	4413      	add	r3, r2
 8008ad6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	f003 0301 	and.w	r3, r3, #1
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d003      	beq.n	8008aea <put_fat+0xf0>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	091b      	lsrs	r3, r3, #4
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	e00e      	b.n	8008b08 <put_fat+0x10e>
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	b25b      	sxtb	r3, r3
 8008af0:	f023 030f 	bic.w	r3, r3, #15
 8008af4:	b25a      	sxtb	r2, r3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	0a1b      	lsrs	r3, r3, #8
 8008afa:	b25b      	sxtb	r3, r3
 8008afc:	f003 030f 	and.w	r3, r3, #15
 8008b00:	b25b      	sxtb	r3, r3
 8008b02:	4313      	orrs	r3, r2
 8008b04:	b25b      	sxtb	r3, r3
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	697a      	ldr	r2, [r7, #20]
 8008b0a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	70da      	strb	r2, [r3, #3]
			break;
 8008b12:	e059      	b.n	8008bc8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6a1a      	ldr	r2, [r3, #32]
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	0a1b      	lsrs	r3, r3, #8
 8008b1c:	4413      	add	r3, r2
 8008b1e:	4619      	mov	r1, r3
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f7ff fe07 	bl	8008734 <move_window>
 8008b26:	4603      	mov	r3, r0
 8008b28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b2a:	7ffb      	ldrb	r3, [r7, #31]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d148      	bne.n	8008bc2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	005b      	lsls	r3, r3, #1
 8008b3a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008b3e:	4413      	add	r3, r2
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	b292      	uxth	r2, r2
 8008b44:	4611      	mov	r1, r2
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7ff fb7f 	bl	800824a <st_word>
			fs->wflag = 1;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	70da      	strb	r2, [r3, #3]
			break;
 8008b52:	e039      	b.n	8008bc8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6a1a      	ldr	r2, [r3, #32]
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	09db      	lsrs	r3, r3, #7
 8008b5c:	4413      	add	r3, r2
 8008b5e:	4619      	mov	r1, r3
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f7ff fde7 	bl	8008734 <move_window>
 8008b66:	4603      	mov	r3, r0
 8008b68:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b6a:	7ffb      	ldrb	r3, [r7, #31]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d12a      	bne.n	8008bc6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008b84:	4413      	add	r3, r2
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7ff fb3c 	bl	8008204 <ld_dword>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008b92:	4323      	orrs	r3, r4
 8008b94:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008ba4:	4413      	add	r3, r2
 8008ba6:	6879      	ldr	r1, [r7, #4]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7ff fb69 	bl	8008280 <st_dword>
			fs->wflag = 1;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	70da      	strb	r2, [r3, #3]
			break;
 8008bb4:	e008      	b.n	8008bc8 <put_fat+0x1ce>
		}
	}
 8008bb6:	bf00      	nop
 8008bb8:	e006      	b.n	8008bc8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008bba:	bf00      	nop
 8008bbc:	e004      	b.n	8008bc8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008bbe:	bf00      	nop
 8008bc0:	e002      	b.n	8008bc8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008bc2:	bf00      	nop
 8008bc4:	e000      	b.n	8008bc8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008bc6:	bf00      	nop
	return res;
 8008bc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3724      	adds	r7, #36	; 0x24
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd90      	pop	{r4, r7, pc}

08008bd2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b088      	sub	sp, #32
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	60f8      	str	r0, [r7, #12]
 8008bda:	60b9      	str	r1, [r7, #8]
 8008bdc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008bde:	2300      	movs	r3, #0
 8008be0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d904      	bls.n	8008bf8 <remove_chain+0x26>
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	695b      	ldr	r3, [r3, #20]
 8008bf2:	68ba      	ldr	r2, [r7, #8]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d301      	bcc.n	8008bfc <remove_chain+0x2a>
 8008bf8:	2302      	movs	r3, #2
 8008bfa:	e04b      	b.n	8008c94 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00c      	beq.n	8008c1c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008c02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c06:	6879      	ldr	r1, [r7, #4]
 8008c08:	69b8      	ldr	r0, [r7, #24]
 8008c0a:	f7ff fef6 	bl	80089fa <put_fat>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008c12:	7ffb      	ldrb	r3, [r7, #31]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d001      	beq.n	8008c1c <remove_chain+0x4a>
 8008c18:	7ffb      	ldrb	r3, [r7, #31]
 8008c1a:	e03b      	b.n	8008c94 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008c1c:	68b9      	ldr	r1, [r7, #8]
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f7ff fe43 	bl	80088aa <get_fat>
 8008c24:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d031      	beq.n	8008c90 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d101      	bne.n	8008c36 <remove_chain+0x64>
 8008c32:	2302      	movs	r3, #2
 8008c34:	e02e      	b.n	8008c94 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c3c:	d101      	bne.n	8008c42 <remove_chain+0x70>
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e028      	b.n	8008c94 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008c42:	2200      	movs	r2, #0
 8008c44:	68b9      	ldr	r1, [r7, #8]
 8008c46:	69b8      	ldr	r0, [r7, #24]
 8008c48:	f7ff fed7 	bl	80089fa <put_fat>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008c50:	7ffb      	ldrb	r3, [r7, #31]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d001      	beq.n	8008c5a <remove_chain+0x88>
 8008c56:	7ffb      	ldrb	r3, [r7, #31]
 8008c58:	e01c      	b.n	8008c94 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	691a      	ldr	r2, [r3, #16]
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	695b      	ldr	r3, [r3, #20]
 8008c62:	3b02      	subs	r3, #2
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d20b      	bcs.n	8008c80 <remove_chain+0xae>
			fs->free_clst++;
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	1c5a      	adds	r2, r3, #1
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	791b      	ldrb	r3, [r3, #4]
 8008c76:	f043 0301 	orr.w	r3, r3, #1
 8008c7a:	b2da      	uxtb	r2, r3
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	695b      	ldr	r3, [r3, #20]
 8008c88:	68ba      	ldr	r2, [r7, #8]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d3c6      	bcc.n	8008c1c <remove_chain+0x4a>
 8008c8e:	e000      	b.n	8008c92 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008c90:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3720      	adds	r7, #32
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b088      	sub	sp, #32
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10d      	bne.n	8008cce <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d004      	beq.n	8008cc8 <create_chain+0x2c>
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	695b      	ldr	r3, [r3, #20]
 8008cc2:	69ba      	ldr	r2, [r7, #24]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d31b      	bcc.n	8008d00 <create_chain+0x64>
 8008cc8:	2301      	movs	r3, #1
 8008cca:	61bb      	str	r3, [r7, #24]
 8008ccc:	e018      	b.n	8008d00 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008cce:	6839      	ldr	r1, [r7, #0]
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f7ff fdea 	bl	80088aa <get_fat>
 8008cd6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d801      	bhi.n	8008ce2 <create_chain+0x46>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e070      	b.n	8008dc4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ce8:	d101      	bne.n	8008cee <create_chain+0x52>
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	e06a      	b.n	8008dc4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	695b      	ldr	r3, [r3, #20]
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d201      	bcs.n	8008cfc <create_chain+0x60>
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	e063      	b.n	8008dc4 <create_chain+0x128>
		scl = clst;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	3301      	adds	r3, #1
 8008d08:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	695b      	ldr	r3, [r3, #20]
 8008d0e:	69fa      	ldr	r2, [r7, #28]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d307      	bcc.n	8008d24 <create_chain+0x88>
				ncl = 2;
 8008d14:	2302      	movs	r3, #2
 8008d16:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008d18:	69fa      	ldr	r2, [r7, #28]
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d901      	bls.n	8008d24 <create_chain+0x88>
 8008d20:	2300      	movs	r3, #0
 8008d22:	e04f      	b.n	8008dc4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008d24:	69f9      	ldr	r1, [r7, #28]
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f7ff fdbf 	bl	80088aa <get_fat>
 8008d2c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d00e      	beq.n	8008d52 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d003      	beq.n	8008d42 <create_chain+0xa6>
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d40:	d101      	bne.n	8008d46 <create_chain+0xaa>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	e03e      	b.n	8008dc4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008d46:	69fa      	ldr	r2, [r7, #28]
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d1da      	bne.n	8008d04 <create_chain+0x68>
 8008d4e:	2300      	movs	r3, #0
 8008d50:	e038      	b.n	8008dc4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008d52:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008d54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d58:	69f9      	ldr	r1, [r7, #28]
 8008d5a:	6938      	ldr	r0, [r7, #16]
 8008d5c:	f7ff fe4d 	bl	80089fa <put_fat>
 8008d60:	4603      	mov	r3, r0
 8008d62:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008d64:	7dfb      	ldrb	r3, [r7, #23]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d109      	bne.n	8008d7e <create_chain+0xe2>
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d006      	beq.n	8008d7e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008d70:	69fa      	ldr	r2, [r7, #28]
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	6938      	ldr	r0, [r7, #16]
 8008d76:	f7ff fe40 	bl	80089fa <put_fat>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008d7e:	7dfb      	ldrb	r3, [r7, #23]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d116      	bne.n	8008db2 <create_chain+0x116>
		fs->last_clst = ncl;
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	69fa      	ldr	r2, [r7, #28]
 8008d88:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	691a      	ldr	r2, [r3, #16]
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	695b      	ldr	r3, [r3, #20]
 8008d92:	3b02      	subs	r3, #2
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d804      	bhi.n	8008da2 <create_chain+0x106>
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	691b      	ldr	r3, [r3, #16]
 8008d9c:	1e5a      	subs	r2, r3, #1
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	791b      	ldrb	r3, [r3, #4]
 8008da6:	f043 0301 	orr.w	r3, r3, #1
 8008daa:	b2da      	uxtb	r2, r3
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	711a      	strb	r2, [r3, #4]
 8008db0:	e007      	b.n	8008dc2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008db2:	7dfb      	ldrb	r3, [r7, #23]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d102      	bne.n	8008dbe <create_chain+0x122>
 8008db8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008dbc:	e000      	b.n	8008dc0 <create_chain+0x124>
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008dc2:	69fb      	ldr	r3, [r7, #28]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3720      	adds	r7, #32
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b087      	sub	sp, #28
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de0:	3304      	adds	r3, #4
 8008de2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	0a5b      	lsrs	r3, r3, #9
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	8952      	ldrh	r2, [r2, #10]
 8008dec:	fbb3 f3f2 	udiv	r3, r3, r2
 8008df0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	1d1a      	adds	r2, r3, #4
 8008df6:	613a      	str	r2, [r7, #16]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d101      	bne.n	8008e06 <clmt_clust+0x3a>
 8008e02:	2300      	movs	r3, #0
 8008e04:	e010      	b.n	8008e28 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008e06:	697a      	ldr	r2, [r7, #20]
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d307      	bcc.n	8008e1e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008e0e:	697a      	ldr	r2, [r7, #20]
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	617b      	str	r3, [r7, #20]
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	3304      	adds	r3, #4
 8008e1a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008e1c:	e7e9      	b.n	8008df2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008e1e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	4413      	add	r3, r2
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	371c      	adds	r7, #28
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b086      	sub	sp, #24
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e4a:	d204      	bcs.n	8008e56 <dir_sdi+0x22>
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	f003 031f 	and.w	r3, r3, #31
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d001      	beq.n	8008e5a <dir_sdi+0x26>
		return FR_INT_ERR;
 8008e56:	2302      	movs	r3, #2
 8008e58:	e063      	b.n	8008f22 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	683a      	ldr	r2, [r7, #0]
 8008e5e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d106      	bne.n	8008e7a <dir_sdi+0x46>
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d902      	bls.n	8008e7a <dir_sdi+0x46>
		clst = fs->dirbase;
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e78:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d10c      	bne.n	8008e9a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	095b      	lsrs	r3, r3, #5
 8008e84:	693a      	ldr	r2, [r7, #16]
 8008e86:	8912      	ldrh	r2, [r2, #8]
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d301      	bcc.n	8008e90 <dir_sdi+0x5c>
 8008e8c:	2302      	movs	r3, #2
 8008e8e:	e048      	b.n	8008f22 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	61da      	str	r2, [r3, #28]
 8008e98:	e029      	b.n	8008eee <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	895b      	ldrh	r3, [r3, #10]
 8008e9e:	025b      	lsls	r3, r3, #9
 8008ea0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008ea2:	e019      	b.n	8008ed8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6979      	ldr	r1, [r7, #20]
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f7ff fcfe 	bl	80088aa <get_fat>
 8008eae:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008eb6:	d101      	bne.n	8008ebc <dir_sdi+0x88>
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e032      	b.n	8008f22 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d904      	bls.n	8008ecc <dir_sdi+0x98>
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d301      	bcc.n	8008ed0 <dir_sdi+0x9c>
 8008ecc:	2302      	movs	r3, #2
 8008ece:	e028      	b.n	8008f22 <dir_sdi+0xee>
			ofs -= csz;
 8008ed0:	683a      	ldr	r2, [r7, #0]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008ed8:	683a      	ldr	r2, [r7, #0]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d2e1      	bcs.n	8008ea4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008ee0:	6979      	ldr	r1, [r7, #20]
 8008ee2:	6938      	ldr	r0, [r7, #16]
 8008ee4:	f7ff fcc2 	bl	800886c <clust2sect>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	697a      	ldr	r2, [r7, #20]
 8008ef2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	69db      	ldr	r3, [r3, #28]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d101      	bne.n	8008f00 <dir_sdi+0xcc>
 8008efc:	2302      	movs	r3, #2
 8008efe:	e010      	b.n	8008f22 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	69da      	ldr	r2, [r3, #28]
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	0a5b      	lsrs	r3, r3, #9
 8008f08:	441a      	add	r2, r3
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f1a:	441a      	add	r2, r3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3718      	adds	r7, #24
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b086      	sub	sp, #24
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
 8008f32:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	695b      	ldr	r3, [r3, #20]
 8008f3e:	3320      	adds	r3, #32
 8008f40:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	69db      	ldr	r3, [r3, #28]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d003      	beq.n	8008f52 <dir_next+0x28>
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f50:	d301      	bcc.n	8008f56 <dir_next+0x2c>
 8008f52:	2304      	movs	r3, #4
 8008f54:	e0aa      	b.n	80090ac <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f040 8098 	bne.w	8009092 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	69db      	ldr	r3, [r3, #28]
 8008f66:	1c5a      	adds	r2, r3, #1
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	699b      	ldr	r3, [r3, #24]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10b      	bne.n	8008f8c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	095b      	lsrs	r3, r3, #5
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	8912      	ldrh	r2, [r2, #8]
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	f0c0 8088 	bcc.w	8009092 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	61da      	str	r2, [r3, #28]
 8008f88:	2304      	movs	r3, #4
 8008f8a:	e08f      	b.n	80090ac <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	0a5b      	lsrs	r3, r3, #9
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	8952      	ldrh	r2, [r2, #10]
 8008f94:	3a01      	subs	r2, #1
 8008f96:	4013      	ands	r3, r2
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d17a      	bne.n	8009092 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	699b      	ldr	r3, [r3, #24]
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	4610      	mov	r0, r2
 8008fa6:	f7ff fc80 	bl	80088aa <get_fat>
 8008faa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d801      	bhi.n	8008fb6 <dir_next+0x8c>
 8008fb2:	2302      	movs	r3, #2
 8008fb4:	e07a      	b.n	80090ac <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fbc:	d101      	bne.n	8008fc2 <dir_next+0x98>
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e074      	b.n	80090ac <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	695b      	ldr	r3, [r3, #20]
 8008fc6:	697a      	ldr	r2, [r7, #20]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d358      	bcc.n	800907e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d104      	bne.n	8008fdc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	61da      	str	r2, [r3, #28]
 8008fd8:	2304      	movs	r3, #4
 8008fda:	e067      	b.n	80090ac <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	699b      	ldr	r3, [r3, #24]
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	4610      	mov	r0, r2
 8008fe6:	f7ff fe59 	bl	8008c9c <create_chain>
 8008fea:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d101      	bne.n	8008ff6 <dir_next+0xcc>
 8008ff2:	2307      	movs	r3, #7
 8008ff4:	e05a      	b.n	80090ac <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d101      	bne.n	8009000 <dir_next+0xd6>
 8008ffc:	2302      	movs	r3, #2
 8008ffe:	e055      	b.n	80090ac <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009006:	d101      	bne.n	800900c <dir_next+0xe2>
 8009008:	2301      	movs	r3, #1
 800900a:	e04f      	b.n	80090ac <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	f7ff fb4d 	bl	80086ac <sync_window>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d001      	beq.n	800901c <dir_next+0xf2>
 8009018:	2301      	movs	r3, #1
 800901a:	e047      	b.n	80090ac <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	3330      	adds	r3, #48	; 0x30
 8009020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009024:	2100      	movs	r1, #0
 8009026:	4618      	mov	r0, r3
 8009028:	f7ff f977 	bl	800831a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800902c:	2300      	movs	r3, #0
 800902e:	613b      	str	r3, [r7, #16]
 8009030:	6979      	ldr	r1, [r7, #20]
 8009032:	68f8      	ldr	r0, [r7, #12]
 8009034:	f7ff fc1a 	bl	800886c <clust2sect>
 8009038:	4602      	mov	r2, r0
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	62da      	str	r2, [r3, #44]	; 0x2c
 800903e:	e012      	b.n	8009066 <dir_next+0x13c>
						fs->wflag = 1;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2201      	movs	r2, #1
 8009044:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	f7ff fb30 	bl	80086ac <sync_window>
 800904c:	4603      	mov	r3, r0
 800904e:	2b00      	cmp	r3, #0
 8009050:	d001      	beq.n	8009056 <dir_next+0x12c>
 8009052:	2301      	movs	r3, #1
 8009054:	e02a      	b.n	80090ac <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	3301      	adds	r3, #1
 800905a:	613b      	str	r3, [r7, #16]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009060:	1c5a      	adds	r2, r3, #1
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	62da      	str	r2, [r3, #44]	; 0x2c
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	895b      	ldrh	r3, [r3, #10]
 800906a:	461a      	mov	r2, r3
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	4293      	cmp	r3, r2
 8009070:	d3e6      	bcc.n	8009040 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	1ad2      	subs	r2, r2, r3
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	697a      	ldr	r2, [r7, #20]
 8009082:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009084:	6979      	ldr	r1, [r7, #20]
 8009086:	68f8      	ldr	r0, [r7, #12]
 8009088:	f7ff fbf0 	bl	800886c <clust2sect>
 800908c:	4602      	mov	r2, r0
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090a4:	441a      	add	r2, r3
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80090aa:	2300      	movs	r3, #0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3718      	adds	r7, #24
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b086      	sub	sp, #24
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80090c4:	2100      	movs	r1, #0
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f7ff feb4 	bl	8008e34 <dir_sdi>
 80090cc:	4603      	mov	r3, r0
 80090ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80090d0:	7dfb      	ldrb	r3, [r7, #23]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d12b      	bne.n	800912e <dir_alloc+0x7a>
		n = 0;
 80090d6:	2300      	movs	r3, #0
 80090d8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	69db      	ldr	r3, [r3, #28]
 80090de:	4619      	mov	r1, r3
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f7ff fb27 	bl	8008734 <move_window>
 80090e6:	4603      	mov	r3, r0
 80090e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80090ea:	7dfb      	ldrb	r3, [r7, #23]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d11d      	bne.n	800912c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6a1b      	ldr	r3, [r3, #32]
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	2be5      	cmp	r3, #229	; 0xe5
 80090f8:	d004      	beq.n	8009104 <dir_alloc+0x50>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6a1b      	ldr	r3, [r3, #32]
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d107      	bne.n	8009114 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	3301      	adds	r3, #1
 8009108:	613b      	str	r3, [r7, #16]
 800910a:	693a      	ldr	r2, [r7, #16]
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	429a      	cmp	r2, r3
 8009110:	d102      	bne.n	8009118 <dir_alloc+0x64>
 8009112:	e00c      	b.n	800912e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009114:	2300      	movs	r3, #0
 8009116:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009118:	2101      	movs	r1, #1
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f7ff ff05 	bl	8008f2a <dir_next>
 8009120:	4603      	mov	r3, r0
 8009122:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009124:	7dfb      	ldrb	r3, [r7, #23]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d0d7      	beq.n	80090da <dir_alloc+0x26>
 800912a:	e000      	b.n	800912e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800912c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800912e:	7dfb      	ldrb	r3, [r7, #23]
 8009130:	2b04      	cmp	r3, #4
 8009132:	d101      	bne.n	8009138 <dir_alloc+0x84>
 8009134:	2307      	movs	r3, #7
 8009136:	75fb      	strb	r3, [r7, #23]
	return res;
 8009138:	7dfb      	ldrb	r3, [r7, #23]
}
 800913a:	4618      	mov	r0, r3
 800913c:	3718      	adds	r7, #24
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009142:	b580      	push	{r7, lr}
 8009144:	b084      	sub	sp, #16
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
 800914a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	331a      	adds	r3, #26
 8009150:	4618      	mov	r0, r3
 8009152:	f7ff f83f 	bl	80081d4 <ld_word>
 8009156:	4603      	mov	r3, r0
 8009158:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	2b03      	cmp	r3, #3
 8009160:	d109      	bne.n	8009176 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	3314      	adds	r3, #20
 8009166:	4618      	mov	r0, r3
 8009168:	f7ff f834 	bl	80081d4 <ld_word>
 800916c:	4603      	mov	r3, r0
 800916e:	041b      	lsls	r3, r3, #16
 8009170:	68fa      	ldr	r2, [r7, #12]
 8009172:	4313      	orrs	r3, r2
 8009174:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009176:	68fb      	ldr	r3, [r7, #12]
}
 8009178:	4618      	mov	r0, r3
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	331a      	adds	r3, #26
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	b292      	uxth	r2, r2
 8009194:	4611      	mov	r1, r2
 8009196:	4618      	mov	r0, r3
 8009198:	f7ff f857 	bl	800824a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	2b03      	cmp	r3, #3
 80091a2:	d109      	bne.n	80091b8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	f103 0214 	add.w	r2, r3, #20
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	0c1b      	lsrs	r3, r3, #16
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	4619      	mov	r1, r3
 80091b2:	4610      	mov	r0, r2
 80091b4:	f7ff f849 	bl	800824a <st_word>
	}
}
 80091b8:	bf00      	nop
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b086      	sub	sp, #24
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80091ce:	2100      	movs	r1, #0
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f7ff fe2f 	bl	8008e34 <dir_sdi>
 80091d6:	4603      	mov	r3, r0
 80091d8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80091da:	7dfb      	ldrb	r3, [r7, #23]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d001      	beq.n	80091e4 <dir_find+0x24>
 80091e0:	7dfb      	ldrb	r3, [r7, #23]
 80091e2:	e03e      	b.n	8009262 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	69db      	ldr	r3, [r3, #28]
 80091e8:	4619      	mov	r1, r3
 80091ea:	6938      	ldr	r0, [r7, #16]
 80091ec:	f7ff faa2 	bl	8008734 <move_window>
 80091f0:	4603      	mov	r3, r0
 80091f2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80091f4:	7dfb      	ldrb	r3, [r7, #23]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d12f      	bne.n	800925a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6a1b      	ldr	r3, [r3, #32]
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009202:	7bfb      	ldrb	r3, [r7, #15]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d102      	bne.n	800920e <dir_find+0x4e>
 8009208:	2304      	movs	r3, #4
 800920a:	75fb      	strb	r3, [r7, #23]
 800920c:	e028      	b.n	8009260 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a1b      	ldr	r3, [r3, #32]
 8009212:	330b      	adds	r3, #11
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800921a:	b2da      	uxtb	r2, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a1b      	ldr	r3, [r3, #32]
 8009224:	330b      	adds	r3, #11
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	f003 0308 	and.w	r3, r3, #8
 800922c:	2b00      	cmp	r3, #0
 800922e:	d10a      	bne.n	8009246 <dir_find+0x86>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6a18      	ldr	r0, [r3, #32]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	3324      	adds	r3, #36	; 0x24
 8009238:	220b      	movs	r2, #11
 800923a:	4619      	mov	r1, r3
 800923c:	f7ff f888 	bl	8008350 <mem_cmp>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00b      	beq.n	800925e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009246:	2100      	movs	r1, #0
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f7ff fe6e 	bl	8008f2a <dir_next>
 800924e:	4603      	mov	r3, r0
 8009250:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009252:	7dfb      	ldrb	r3, [r7, #23]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d0c5      	beq.n	80091e4 <dir_find+0x24>
 8009258:	e002      	b.n	8009260 <dir_find+0xa0>
		if (res != FR_OK) break;
 800925a:	bf00      	nop
 800925c:	e000      	b.n	8009260 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800925e:	bf00      	nop

	return res;
 8009260:	7dfb      	ldrb	r3, [r7, #23]
}
 8009262:	4618      	mov	r0, r3
 8009264:	3718      	adds	r7, #24
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b084      	sub	sp, #16
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009278:	2101      	movs	r1, #1
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f7ff ff1a 	bl	80090b4 <dir_alloc>
 8009280:	4603      	mov	r3, r0
 8009282:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009284:	7bfb      	ldrb	r3, [r7, #15]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d11c      	bne.n	80092c4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	69db      	ldr	r3, [r3, #28]
 800928e:	4619      	mov	r1, r3
 8009290:	68b8      	ldr	r0, [r7, #8]
 8009292:	f7ff fa4f 	bl	8008734 <move_window>
 8009296:	4603      	mov	r3, r0
 8009298:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800929a:	7bfb      	ldrb	r3, [r7, #15]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d111      	bne.n	80092c4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6a1b      	ldr	r3, [r3, #32]
 80092a4:	2220      	movs	r2, #32
 80092a6:	2100      	movs	r1, #0
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7ff f836 	bl	800831a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a18      	ldr	r0, [r3, #32]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	3324      	adds	r3, #36	; 0x24
 80092b6:	220b      	movs	r2, #11
 80092b8:	4619      	mov	r1, r3
 80092ba:	f7ff f80d 	bl	80082d8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	2201      	movs	r2, #1
 80092c2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80092c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
	...

080092d0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b088      	sub	sp, #32
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	60fb      	str	r3, [r7, #12]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	3324      	adds	r3, #36	; 0x24
 80092e4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80092e6:	220b      	movs	r2, #11
 80092e8:	2120      	movs	r1, #32
 80092ea:	68b8      	ldr	r0, [r7, #8]
 80092ec:	f7ff f815 	bl	800831a <mem_set>
	si = i = 0; ni = 8;
 80092f0:	2300      	movs	r3, #0
 80092f2:	613b      	str	r3, [r7, #16]
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	61fb      	str	r3, [r7, #28]
 80092f8:	2308      	movs	r3, #8
 80092fa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80092fc:	69fb      	ldr	r3, [r7, #28]
 80092fe:	1c5a      	adds	r2, r3, #1
 8009300:	61fa      	str	r2, [r7, #28]
 8009302:	68fa      	ldr	r2, [r7, #12]
 8009304:	4413      	add	r3, r2
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800930a:	7efb      	ldrb	r3, [r7, #27]
 800930c:	2b20      	cmp	r3, #32
 800930e:	d94e      	bls.n	80093ae <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009310:	7efb      	ldrb	r3, [r7, #27]
 8009312:	2b2f      	cmp	r3, #47	; 0x2f
 8009314:	d006      	beq.n	8009324 <create_name+0x54>
 8009316:	7efb      	ldrb	r3, [r7, #27]
 8009318:	2b5c      	cmp	r3, #92	; 0x5c
 800931a:	d110      	bne.n	800933e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800931c:	e002      	b.n	8009324 <create_name+0x54>
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	3301      	adds	r3, #1
 8009322:	61fb      	str	r3, [r7, #28]
 8009324:	68fa      	ldr	r2, [r7, #12]
 8009326:	69fb      	ldr	r3, [r7, #28]
 8009328:	4413      	add	r3, r2
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	2b2f      	cmp	r3, #47	; 0x2f
 800932e:	d0f6      	beq.n	800931e <create_name+0x4e>
 8009330:	68fa      	ldr	r2, [r7, #12]
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	4413      	add	r3, r2
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	2b5c      	cmp	r3, #92	; 0x5c
 800933a:	d0f0      	beq.n	800931e <create_name+0x4e>
			break;
 800933c:	e038      	b.n	80093b0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800933e:	7efb      	ldrb	r3, [r7, #27]
 8009340:	2b2e      	cmp	r3, #46	; 0x2e
 8009342:	d003      	beq.n	800934c <create_name+0x7c>
 8009344:	693a      	ldr	r2, [r7, #16]
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	429a      	cmp	r2, r3
 800934a:	d30c      	bcc.n	8009366 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	2b0b      	cmp	r3, #11
 8009350:	d002      	beq.n	8009358 <create_name+0x88>
 8009352:	7efb      	ldrb	r3, [r7, #27]
 8009354:	2b2e      	cmp	r3, #46	; 0x2e
 8009356:	d001      	beq.n	800935c <create_name+0x8c>
 8009358:	2306      	movs	r3, #6
 800935a:	e044      	b.n	80093e6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800935c:	2308      	movs	r3, #8
 800935e:	613b      	str	r3, [r7, #16]
 8009360:	230b      	movs	r3, #11
 8009362:	617b      	str	r3, [r7, #20]
			continue;
 8009364:	e022      	b.n	80093ac <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009366:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800936a:	2b00      	cmp	r3, #0
 800936c:	da04      	bge.n	8009378 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800936e:	7efb      	ldrb	r3, [r7, #27]
 8009370:	3b80      	subs	r3, #128	; 0x80
 8009372:	4a1f      	ldr	r2, [pc, #124]	; (80093f0 <create_name+0x120>)
 8009374:	5cd3      	ldrb	r3, [r2, r3]
 8009376:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009378:	7efb      	ldrb	r3, [r7, #27]
 800937a:	4619      	mov	r1, r3
 800937c:	481d      	ldr	r0, [pc, #116]	; (80093f4 <create_name+0x124>)
 800937e:	f7ff f80e 	bl	800839e <chk_chr>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d001      	beq.n	800938c <create_name+0xbc>
 8009388:	2306      	movs	r3, #6
 800938a:	e02c      	b.n	80093e6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800938c:	7efb      	ldrb	r3, [r7, #27]
 800938e:	2b60      	cmp	r3, #96	; 0x60
 8009390:	d905      	bls.n	800939e <create_name+0xce>
 8009392:	7efb      	ldrb	r3, [r7, #27]
 8009394:	2b7a      	cmp	r3, #122	; 0x7a
 8009396:	d802      	bhi.n	800939e <create_name+0xce>
 8009398:	7efb      	ldrb	r3, [r7, #27]
 800939a:	3b20      	subs	r3, #32
 800939c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	1c5a      	adds	r2, r3, #1
 80093a2:	613a      	str	r2, [r7, #16]
 80093a4:	68ba      	ldr	r2, [r7, #8]
 80093a6:	4413      	add	r3, r2
 80093a8:	7efa      	ldrb	r2, [r7, #27]
 80093aa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80093ac:	e7a6      	b.n	80092fc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80093ae:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	441a      	add	r2, r3
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d101      	bne.n	80093c4 <create_name+0xf4>
 80093c0:	2306      	movs	r3, #6
 80093c2:	e010      	b.n	80093e6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	2be5      	cmp	r3, #229	; 0xe5
 80093ca:	d102      	bne.n	80093d2 <create_name+0x102>
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	2205      	movs	r2, #5
 80093d0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80093d2:	7efb      	ldrb	r3, [r7, #27]
 80093d4:	2b20      	cmp	r3, #32
 80093d6:	d801      	bhi.n	80093dc <create_name+0x10c>
 80093d8:	2204      	movs	r2, #4
 80093da:	e000      	b.n	80093de <create_name+0x10e>
 80093dc:	2200      	movs	r2, #0
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	330b      	adds	r3, #11
 80093e2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80093e4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3720      	adds	r7, #32
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop
 80093f0:	0800d620 	.word	0x0800d620
 80093f4:	0800baf8 	.word	0x0800baf8

080093f8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b086      	sub	sp, #24
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800940c:	e002      	b.n	8009414 <follow_path+0x1c>
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	3301      	adds	r3, #1
 8009412:	603b      	str	r3, [r7, #0]
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	2b2f      	cmp	r3, #47	; 0x2f
 800941a:	d0f8      	beq.n	800940e <follow_path+0x16>
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	2b5c      	cmp	r3, #92	; 0x5c
 8009422:	d0f4      	beq.n	800940e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	2200      	movs	r2, #0
 8009428:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	2b1f      	cmp	r3, #31
 8009430:	d80a      	bhi.n	8009448 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2280      	movs	r2, #128	; 0x80
 8009436:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800943a:	2100      	movs	r1, #0
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f7ff fcf9 	bl	8008e34 <dir_sdi>
 8009442:	4603      	mov	r3, r0
 8009444:	75fb      	strb	r3, [r7, #23]
 8009446:	e043      	b.n	80094d0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009448:	463b      	mov	r3, r7
 800944a:	4619      	mov	r1, r3
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f7ff ff3f 	bl	80092d0 <create_name>
 8009452:	4603      	mov	r3, r0
 8009454:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009456:	7dfb      	ldrb	r3, [r7, #23]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d134      	bne.n	80094c6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f7ff feaf 	bl	80091c0 <dir_find>
 8009462:	4603      	mov	r3, r0
 8009464:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800946c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800946e:	7dfb      	ldrb	r3, [r7, #23]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d00a      	beq.n	800948a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009474:	7dfb      	ldrb	r3, [r7, #23]
 8009476:	2b04      	cmp	r3, #4
 8009478:	d127      	bne.n	80094ca <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800947a:	7afb      	ldrb	r3, [r7, #11]
 800947c:	f003 0304 	and.w	r3, r3, #4
 8009480:	2b00      	cmp	r3, #0
 8009482:	d122      	bne.n	80094ca <follow_path+0xd2>
 8009484:	2305      	movs	r3, #5
 8009486:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009488:	e01f      	b.n	80094ca <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800948a:	7afb      	ldrb	r3, [r7, #11]
 800948c:	f003 0304 	and.w	r3, r3, #4
 8009490:	2b00      	cmp	r3, #0
 8009492:	d11c      	bne.n	80094ce <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	799b      	ldrb	r3, [r3, #6]
 8009498:	f003 0310 	and.w	r3, r3, #16
 800949c:	2b00      	cmp	r3, #0
 800949e:	d102      	bne.n	80094a6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80094a0:	2305      	movs	r3, #5
 80094a2:	75fb      	strb	r3, [r7, #23]
 80094a4:	e014      	b.n	80094d0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	695b      	ldr	r3, [r3, #20]
 80094b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094b4:	4413      	add	r3, r2
 80094b6:	4619      	mov	r1, r3
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f7ff fe42 	bl	8009142 <ld_clust>
 80094be:	4602      	mov	r2, r0
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80094c4:	e7c0      	b.n	8009448 <follow_path+0x50>
			if (res != FR_OK) break;
 80094c6:	bf00      	nop
 80094c8:	e002      	b.n	80094d0 <follow_path+0xd8>
				break;
 80094ca:	bf00      	nop
 80094cc:	e000      	b.n	80094d0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80094ce:	bf00      	nop
			}
		}
	}

	return res;
 80094d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3718      	adds	r7, #24
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80094da:	b480      	push	{r7}
 80094dc:	b087      	sub	sp, #28
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80094e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094e6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d031      	beq.n	8009554 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	617b      	str	r3, [r7, #20]
 80094f6:	e002      	b.n	80094fe <get_ldnumber+0x24>
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	3301      	adds	r3, #1
 80094fc:	617b      	str	r3, [r7, #20]
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	2b20      	cmp	r3, #32
 8009504:	d903      	bls.n	800950e <get_ldnumber+0x34>
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	2b3a      	cmp	r3, #58	; 0x3a
 800950c:	d1f4      	bne.n	80094f8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	2b3a      	cmp	r3, #58	; 0x3a
 8009514:	d11c      	bne.n	8009550 <get_ldnumber+0x76>
			tp = *path;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	1c5a      	adds	r2, r3, #1
 8009520:	60fa      	str	r2, [r7, #12]
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	3b30      	subs	r3, #48	; 0x30
 8009526:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	2b09      	cmp	r3, #9
 800952c:	d80e      	bhi.n	800954c <get_ldnumber+0x72>
 800952e:	68fa      	ldr	r2, [r7, #12]
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	429a      	cmp	r2, r3
 8009534:	d10a      	bne.n	800954c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d107      	bne.n	800954c <get_ldnumber+0x72>
					vol = (int)i;
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	3301      	adds	r3, #1
 8009544:	617b      	str	r3, [r7, #20]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	697a      	ldr	r2, [r7, #20]
 800954a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	e002      	b.n	8009556 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009550:	2300      	movs	r3, #0
 8009552:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009554:	693b      	ldr	r3, [r7, #16]
}
 8009556:	4618      	mov	r0, r3
 8009558:	371c      	adds	r7, #28
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr
	...

08009564 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	70da      	strb	r2, [r3, #3]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800957a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800957c:	6839      	ldr	r1, [r7, #0]
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f7ff f8d8 	bl	8008734 <move_window>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <check_fs+0x2a>
 800958a:	2304      	movs	r3, #4
 800958c:	e038      	b.n	8009600 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	3330      	adds	r3, #48	; 0x30
 8009592:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009596:	4618      	mov	r0, r3
 8009598:	f7fe fe1c 	bl	80081d4 <ld_word>
 800959c:	4603      	mov	r3, r0
 800959e:	461a      	mov	r2, r3
 80095a0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d001      	beq.n	80095ac <check_fs+0x48>
 80095a8:	2303      	movs	r3, #3
 80095aa:	e029      	b.n	8009600 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80095b2:	2be9      	cmp	r3, #233	; 0xe9
 80095b4:	d009      	beq.n	80095ca <check_fs+0x66>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80095bc:	2beb      	cmp	r3, #235	; 0xeb
 80095be:	d11e      	bne.n	80095fe <check_fs+0x9a>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80095c6:	2b90      	cmp	r3, #144	; 0x90
 80095c8:	d119      	bne.n	80095fe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	3330      	adds	r3, #48	; 0x30
 80095ce:	3336      	adds	r3, #54	; 0x36
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7fe fe17 	bl	8008204 <ld_dword>
 80095d6:	4603      	mov	r3, r0
 80095d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80095dc:	4a0a      	ldr	r2, [pc, #40]	; (8009608 <check_fs+0xa4>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d101      	bne.n	80095e6 <check_fs+0x82>
 80095e2:	2300      	movs	r3, #0
 80095e4:	e00c      	b.n	8009600 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	3330      	adds	r3, #48	; 0x30
 80095ea:	3352      	adds	r3, #82	; 0x52
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7fe fe09 	bl	8008204 <ld_dword>
 80095f2:	4603      	mov	r3, r0
 80095f4:	4a05      	ldr	r2, [pc, #20]	; (800960c <check_fs+0xa8>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d101      	bne.n	80095fe <check_fs+0x9a>
 80095fa:	2300      	movs	r3, #0
 80095fc:	e000      	b.n	8009600 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80095fe:	2302      	movs	r3, #2
}
 8009600:	4618      	mov	r0, r3
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}
 8009608:	00544146 	.word	0x00544146
 800960c:	33544146 	.word	0x33544146

08009610 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b096      	sub	sp, #88	; 0x58
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	4613      	mov	r3, r2
 800961c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	2200      	movs	r2, #0
 8009622:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009624:	68f8      	ldr	r0, [r7, #12]
 8009626:	f7ff ff58 	bl	80094da <get_ldnumber>
 800962a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800962c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800962e:	2b00      	cmp	r3, #0
 8009630:	da01      	bge.n	8009636 <find_volume+0x26>
 8009632:	230b      	movs	r3, #11
 8009634:	e22d      	b.n	8009a92 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009636:	4aa1      	ldr	r2, [pc, #644]	; (80098bc <find_volume+0x2ac>)
 8009638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800963a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800963e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009642:	2b00      	cmp	r3, #0
 8009644:	d101      	bne.n	800964a <find_volume+0x3a>
 8009646:	230c      	movs	r3, #12
 8009648:	e223      	b.n	8009a92 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800964e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009650:	79fb      	ldrb	r3, [r7, #7]
 8009652:	f023 0301 	bic.w	r3, r3, #1
 8009656:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d01a      	beq.n	8009696 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009662:	785b      	ldrb	r3, [r3, #1]
 8009664:	4618      	mov	r0, r3
 8009666:	f7fe fd17 	bl	8008098 <disk_status>
 800966a:	4603      	mov	r3, r0
 800966c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009670:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009674:	f003 0301 	and.w	r3, r3, #1
 8009678:	2b00      	cmp	r3, #0
 800967a:	d10c      	bne.n	8009696 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800967c:	79fb      	ldrb	r3, [r7, #7]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d007      	beq.n	8009692 <find_volume+0x82>
 8009682:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009686:	f003 0304 	and.w	r3, r3, #4
 800968a:	2b00      	cmp	r3, #0
 800968c:	d001      	beq.n	8009692 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800968e:	230a      	movs	r3, #10
 8009690:	e1ff      	b.n	8009a92 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8009692:	2300      	movs	r3, #0
 8009694:	e1fd      	b.n	8009a92 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009698:	2200      	movs	r2, #0
 800969a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800969c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800969e:	b2da      	uxtb	r2, r3
 80096a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80096a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a6:	785b      	ldrb	r3, [r3, #1]
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7fe fd0f 	bl	80080cc <disk_initialize>
 80096ae:	4603      	mov	r3, r0
 80096b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80096b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80096b8:	f003 0301 	and.w	r3, r3, #1
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d001      	beq.n	80096c4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80096c0:	2303      	movs	r3, #3
 80096c2:	e1e6      	b.n	8009a92 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80096c4:	79fb      	ldrb	r3, [r7, #7]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d007      	beq.n	80096da <find_volume+0xca>
 80096ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80096ce:	f003 0304 	and.w	r3, r3, #4
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d001      	beq.n	80096da <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80096d6:	230a      	movs	r3, #10
 80096d8:	e1db      	b.n	8009a92 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80096da:	2300      	movs	r3, #0
 80096dc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80096de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80096e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80096e2:	f7ff ff3f 	bl	8009564 <check_fs>
 80096e6:	4603      	mov	r3, r0
 80096e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80096ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80096f0:	2b02      	cmp	r3, #2
 80096f2:	d149      	bne.n	8009788 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80096f4:	2300      	movs	r3, #0
 80096f6:	643b      	str	r3, [r7, #64]	; 0x40
 80096f8:	e01e      	b.n	8009738 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80096fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009702:	011b      	lsls	r3, r3, #4
 8009704:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009708:	4413      	add	r3, r2
 800970a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800970c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970e:	3304      	adds	r3, #4
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d006      	beq.n	8009724 <find_volume+0x114>
 8009716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009718:	3308      	adds	r3, #8
 800971a:	4618      	mov	r0, r3
 800971c:	f7fe fd72 	bl	8008204 <ld_dword>
 8009720:	4602      	mov	r2, r0
 8009722:	e000      	b.n	8009726 <find_volume+0x116>
 8009724:	2200      	movs	r2, #0
 8009726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	3358      	adds	r3, #88	; 0x58
 800972c:	443b      	add	r3, r7
 800972e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009734:	3301      	adds	r3, #1
 8009736:	643b      	str	r3, [r7, #64]	; 0x40
 8009738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800973a:	2b03      	cmp	r3, #3
 800973c:	d9dd      	bls.n	80096fa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800973e:	2300      	movs	r3, #0
 8009740:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009744:	2b00      	cmp	r3, #0
 8009746:	d002      	beq.n	800974e <find_volume+0x13e>
 8009748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800974a:	3b01      	subs	r3, #1
 800974c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800974e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	3358      	adds	r3, #88	; 0x58
 8009754:	443b      	add	r3, r7
 8009756:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800975a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800975c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800975e:	2b00      	cmp	r3, #0
 8009760:	d005      	beq.n	800976e <find_volume+0x15e>
 8009762:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009764:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009766:	f7ff fefd 	bl	8009564 <check_fs>
 800976a:	4603      	mov	r3, r0
 800976c:	e000      	b.n	8009770 <find_volume+0x160>
 800976e:	2303      	movs	r3, #3
 8009770:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009774:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009778:	2b01      	cmp	r3, #1
 800977a:	d905      	bls.n	8009788 <find_volume+0x178>
 800977c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800977e:	3301      	adds	r3, #1
 8009780:	643b      	str	r3, [r7, #64]	; 0x40
 8009782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009784:	2b03      	cmp	r3, #3
 8009786:	d9e2      	bls.n	800974e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009788:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800978c:	2b04      	cmp	r3, #4
 800978e:	d101      	bne.n	8009794 <find_volume+0x184>
 8009790:	2301      	movs	r3, #1
 8009792:	e17e      	b.n	8009a92 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009794:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009798:	2b01      	cmp	r3, #1
 800979a:	d901      	bls.n	80097a0 <find_volume+0x190>
 800979c:	230d      	movs	r3, #13
 800979e:	e178      	b.n	8009a92 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80097a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a2:	3330      	adds	r3, #48	; 0x30
 80097a4:	330b      	adds	r3, #11
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7fe fd14 	bl	80081d4 <ld_word>
 80097ac:	4603      	mov	r3, r0
 80097ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097b2:	d001      	beq.n	80097b8 <find_volume+0x1a8>
 80097b4:	230d      	movs	r3, #13
 80097b6:	e16c      	b.n	8009a92 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80097b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ba:	3330      	adds	r3, #48	; 0x30
 80097bc:	3316      	adds	r3, #22
 80097be:	4618      	mov	r0, r3
 80097c0:	f7fe fd08 	bl	80081d4 <ld_word>
 80097c4:	4603      	mov	r3, r0
 80097c6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80097c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d106      	bne.n	80097dc <find_volume+0x1cc>
 80097ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d0:	3330      	adds	r3, #48	; 0x30
 80097d2:	3324      	adds	r3, #36	; 0x24
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7fe fd15 	bl	8008204 <ld_dword>
 80097da:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80097dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80097e0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80097e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80097e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80097ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ee:	789b      	ldrb	r3, [r3, #2]
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d005      	beq.n	8009800 <find_volume+0x1f0>
 80097f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f6:	789b      	ldrb	r3, [r3, #2]
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	d001      	beq.n	8009800 <find_volume+0x1f0>
 80097fc:	230d      	movs	r3, #13
 80097fe:	e148      	b.n	8009a92 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009802:	789b      	ldrb	r3, [r3, #2]
 8009804:	461a      	mov	r2, r3
 8009806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009808:	fb02 f303 	mul.w	r3, r2, r3
 800980c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800980e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009814:	b29a      	uxth	r2, r3
 8009816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009818:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800981a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981c:	895b      	ldrh	r3, [r3, #10]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d008      	beq.n	8009834 <find_volume+0x224>
 8009822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009824:	895b      	ldrh	r3, [r3, #10]
 8009826:	461a      	mov	r2, r3
 8009828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982a:	895b      	ldrh	r3, [r3, #10]
 800982c:	3b01      	subs	r3, #1
 800982e:	4013      	ands	r3, r2
 8009830:	2b00      	cmp	r3, #0
 8009832:	d001      	beq.n	8009838 <find_volume+0x228>
 8009834:	230d      	movs	r3, #13
 8009836:	e12c      	b.n	8009a92 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800983a:	3330      	adds	r3, #48	; 0x30
 800983c:	3311      	adds	r3, #17
 800983e:	4618      	mov	r0, r3
 8009840:	f7fe fcc8 	bl	80081d4 <ld_word>
 8009844:	4603      	mov	r3, r0
 8009846:	461a      	mov	r2, r3
 8009848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800984c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984e:	891b      	ldrh	r3, [r3, #8]
 8009850:	f003 030f 	and.w	r3, r3, #15
 8009854:	b29b      	uxth	r3, r3
 8009856:	2b00      	cmp	r3, #0
 8009858:	d001      	beq.n	800985e <find_volume+0x24e>
 800985a:	230d      	movs	r3, #13
 800985c:	e119      	b.n	8009a92 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800985e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009860:	3330      	adds	r3, #48	; 0x30
 8009862:	3313      	adds	r3, #19
 8009864:	4618      	mov	r0, r3
 8009866:	f7fe fcb5 	bl	80081d4 <ld_word>
 800986a:	4603      	mov	r3, r0
 800986c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800986e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009870:	2b00      	cmp	r3, #0
 8009872:	d106      	bne.n	8009882 <find_volume+0x272>
 8009874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009876:	3330      	adds	r3, #48	; 0x30
 8009878:	3320      	adds	r3, #32
 800987a:	4618      	mov	r0, r3
 800987c:	f7fe fcc2 	bl	8008204 <ld_dword>
 8009880:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009884:	3330      	adds	r3, #48	; 0x30
 8009886:	330e      	adds	r3, #14
 8009888:	4618      	mov	r0, r3
 800988a:	f7fe fca3 	bl	80081d4 <ld_word>
 800988e:	4603      	mov	r3, r0
 8009890:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009892:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009894:	2b00      	cmp	r3, #0
 8009896:	d101      	bne.n	800989c <find_volume+0x28c>
 8009898:	230d      	movs	r3, #13
 800989a:	e0fa      	b.n	8009a92 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800989c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800989e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098a0:	4413      	add	r3, r2
 80098a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098a4:	8912      	ldrh	r2, [r2, #8]
 80098a6:	0912      	lsrs	r2, r2, #4
 80098a8:	b292      	uxth	r2, r2
 80098aa:	4413      	add	r3, r2
 80098ac:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80098ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d204      	bcs.n	80098c0 <find_volume+0x2b0>
 80098b6:	230d      	movs	r3, #13
 80098b8:	e0eb      	b.n	8009a92 <find_volume+0x482>
 80098ba:	bf00      	nop
 80098bc:	2000098c 	.word	0x2000098c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80098c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c4:	1ad3      	subs	r3, r2, r3
 80098c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098c8:	8952      	ldrh	r2, [r2, #10]
 80098ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80098ce:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80098d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d101      	bne.n	80098da <find_volume+0x2ca>
 80098d6:	230d      	movs	r3, #13
 80098d8:	e0db      	b.n	8009a92 <find_volume+0x482>
		fmt = FS_FAT32;
 80098da:	2303      	movs	r3, #3
 80098dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80098e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d802      	bhi.n	80098f0 <find_volume+0x2e0>
 80098ea:	2302      	movs	r3, #2
 80098ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80098f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d802      	bhi.n	8009900 <find_volume+0x2f0>
 80098fa:	2301      	movs	r3, #1
 80098fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009902:	1c9a      	adds	r2, r3, #2
 8009904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009906:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800990c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800990e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009912:	441a      	add	r2, r3
 8009914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009916:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009918:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800991a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991c:	441a      	add	r2, r3
 800991e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009920:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8009922:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009926:	2b03      	cmp	r3, #3
 8009928:	d11e      	bne.n	8009968 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800992a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992c:	3330      	adds	r3, #48	; 0x30
 800992e:	332a      	adds	r3, #42	; 0x2a
 8009930:	4618      	mov	r0, r3
 8009932:	f7fe fc4f 	bl	80081d4 <ld_word>
 8009936:	4603      	mov	r3, r0
 8009938:	2b00      	cmp	r3, #0
 800993a:	d001      	beq.n	8009940 <find_volume+0x330>
 800993c:	230d      	movs	r3, #13
 800993e:	e0a8      	b.n	8009a92 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009942:	891b      	ldrh	r3, [r3, #8]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d001      	beq.n	800994c <find_volume+0x33c>
 8009948:	230d      	movs	r3, #13
 800994a:	e0a2      	b.n	8009a92 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800994c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994e:	3330      	adds	r3, #48	; 0x30
 8009950:	332c      	adds	r3, #44	; 0x2c
 8009952:	4618      	mov	r0, r3
 8009954:	f7fe fc56 	bl	8008204 <ld_dword>
 8009958:	4602      	mov	r2, r0
 800995a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800995c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800995e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009960:	695b      	ldr	r3, [r3, #20]
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	647b      	str	r3, [r7, #68]	; 0x44
 8009966:	e01f      	b.n	80099a8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800996a:	891b      	ldrh	r3, [r3, #8]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d101      	bne.n	8009974 <find_volume+0x364>
 8009970:	230d      	movs	r3, #13
 8009972:	e08e      	b.n	8009a92 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009976:	6a1a      	ldr	r2, [r3, #32]
 8009978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800997a:	441a      	add	r2, r3
 800997c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009980:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009984:	2b02      	cmp	r3, #2
 8009986:	d103      	bne.n	8009990 <find_volume+0x380>
 8009988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800998a:	695b      	ldr	r3, [r3, #20]
 800998c:	005b      	lsls	r3, r3, #1
 800998e:	e00a      	b.n	80099a6 <find_volume+0x396>
 8009990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009992:	695a      	ldr	r2, [r3, #20]
 8009994:	4613      	mov	r3, r2
 8009996:	005b      	lsls	r3, r3, #1
 8009998:	4413      	add	r3, r2
 800999a:	085a      	lsrs	r2, r3, #1
 800999c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800999e:	695b      	ldr	r3, [r3, #20]
 80099a0:	f003 0301 	and.w	r3, r3, #1
 80099a4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80099a6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80099a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099aa:	699a      	ldr	r2, [r3, #24]
 80099ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099ae:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80099b2:	0a5b      	lsrs	r3, r3, #9
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d201      	bcs.n	80099bc <find_volume+0x3ac>
 80099b8:	230d      	movs	r3, #13
 80099ba:	e06a      	b.n	8009a92 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80099bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099c2:	611a      	str	r2, [r3, #16]
 80099c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c6:	691a      	ldr	r2, [r3, #16]
 80099c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ca:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80099cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ce:	2280      	movs	r2, #128	; 0x80
 80099d0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80099d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80099d6:	2b03      	cmp	r3, #3
 80099d8:	d149      	bne.n	8009a6e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80099da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099dc:	3330      	adds	r3, #48	; 0x30
 80099de:	3330      	adds	r3, #48	; 0x30
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7fe fbf7 	bl	80081d4 <ld_word>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d140      	bne.n	8009a6e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80099ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099ee:	3301      	adds	r3, #1
 80099f0:	4619      	mov	r1, r3
 80099f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80099f4:	f7fe fe9e 	bl	8008734 <move_window>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d137      	bne.n	8009a6e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80099fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a00:	2200      	movs	r2, #0
 8009a02:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a06:	3330      	adds	r3, #48	; 0x30
 8009a08:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7fe fbe1 	bl	80081d4 <ld_word>
 8009a12:	4603      	mov	r3, r0
 8009a14:	461a      	mov	r2, r3
 8009a16:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d127      	bne.n	8009a6e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a20:	3330      	adds	r3, #48	; 0x30
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7fe fbee 	bl	8008204 <ld_dword>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	4a1c      	ldr	r2, [pc, #112]	; (8009a9c <find_volume+0x48c>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d11e      	bne.n	8009a6e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a32:	3330      	adds	r3, #48	; 0x30
 8009a34:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7fe fbe3 	bl	8008204 <ld_dword>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	4a17      	ldr	r2, [pc, #92]	; (8009aa0 <find_volume+0x490>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d113      	bne.n	8009a6e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a48:	3330      	adds	r3, #48	; 0x30
 8009a4a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7fe fbd8 	bl	8008204 <ld_dword>
 8009a54:	4602      	mov	r2, r0
 8009a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a58:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a5c:	3330      	adds	r3, #48	; 0x30
 8009a5e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7fe fbce 	bl	8008204 <ld_dword>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a70:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009a74:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009a76:	4b0b      	ldr	r3, [pc, #44]	; (8009aa4 <find_volume+0x494>)
 8009a78:	881b      	ldrh	r3, [r3, #0]
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	4b09      	ldr	r3, [pc, #36]	; (8009aa4 <find_volume+0x494>)
 8009a80:	801a      	strh	r2, [r3, #0]
 8009a82:	4b08      	ldr	r3, [pc, #32]	; (8009aa4 <find_volume+0x494>)
 8009a84:	881a      	ldrh	r2, [r3, #0]
 8009a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a88:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009a8a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a8c:	f7fe fdea 	bl	8008664 <clear_lock>
#endif
	return FR_OK;
 8009a90:	2300      	movs	r3, #0
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3758      	adds	r7, #88	; 0x58
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	41615252 	.word	0x41615252
 8009aa0:	61417272 	.word	0x61417272
 8009aa4:	20000990 	.word	0x20000990

08009aa8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009ab2:	2309      	movs	r3, #9
 8009ab4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d01c      	beq.n	8009af6 <validate+0x4e>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d018      	beq.n	8009af6 <validate+0x4e>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d013      	beq.n	8009af6 <validate+0x4e>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	889a      	ldrh	r2, [r3, #4]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	88db      	ldrh	r3, [r3, #6]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d10c      	bne.n	8009af6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	785b      	ldrb	r3, [r3, #1]
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7fe fad8 	bl	8008098 <disk_status>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	f003 0301 	and.w	r3, r3, #1
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d101      	bne.n	8009af6 <validate+0x4e>
			res = FR_OK;
 8009af2:	2300      	movs	r3, #0
 8009af4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009af6:	7bfb      	ldrb	r3, [r7, #15]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d102      	bne.n	8009b02 <validate+0x5a>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	e000      	b.n	8009b04 <validate+0x5c>
 8009b02:	2300      	movs	r3, #0
 8009b04:	683a      	ldr	r2, [r7, #0]
 8009b06:	6013      	str	r3, [r2, #0]
	return res;
 8009b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
	...

08009b14 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b088      	sub	sp, #32
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	4613      	mov	r3, r2
 8009b20:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009b26:	f107 0310 	add.w	r3, r7, #16
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7ff fcd5 	bl	80094da <get_ldnumber>
 8009b30:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	da01      	bge.n	8009b3c <f_mount+0x28>
 8009b38:	230b      	movs	r3, #11
 8009b3a:	e02b      	b.n	8009b94 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009b3c:	4a17      	ldr	r2, [pc, #92]	; (8009b9c <f_mount+0x88>)
 8009b3e:	69fb      	ldr	r3, [r7, #28]
 8009b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b44:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d005      	beq.n	8009b58 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009b4c:	69b8      	ldr	r0, [r7, #24]
 8009b4e:	f7fe fd89 	bl	8008664 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	2200      	movs	r2, #0
 8009b56:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d002      	beq.n	8009b64 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2200      	movs	r2, #0
 8009b62:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009b64:	68fa      	ldr	r2, [r7, #12]
 8009b66:	490d      	ldr	r1, [pc, #52]	; (8009b9c <f_mount+0x88>)
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d002      	beq.n	8009b7a <f_mount+0x66>
 8009b74:	79fb      	ldrb	r3, [r7, #7]
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d001      	beq.n	8009b7e <f_mount+0x6a>
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	e00a      	b.n	8009b94 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009b7e:	f107 010c 	add.w	r1, r7, #12
 8009b82:	f107 0308 	add.w	r3, r7, #8
 8009b86:	2200      	movs	r2, #0
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f7ff fd41 	bl	8009610 <find_volume>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3720      	adds	r7, #32
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	2000098c 	.word	0x2000098c

08009ba0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b098      	sub	sp, #96	; 0x60
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	4613      	mov	r3, r2
 8009bac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d101      	bne.n	8009bb8 <f_open+0x18>
 8009bb4:	2309      	movs	r3, #9
 8009bb6:	e1ad      	b.n	8009f14 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009bb8:	79fb      	ldrb	r3, [r7, #7]
 8009bba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009bbe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009bc0:	79fa      	ldrb	r2, [r7, #7]
 8009bc2:	f107 0110 	add.w	r1, r7, #16
 8009bc6:	f107 0308 	add.w	r3, r7, #8
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7ff fd20 	bl	8009610 <find_volume>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009bd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	f040 8191 	bne.w	8009f02 <f_open+0x362>
		dj.obj.fs = fs;
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009be4:	68ba      	ldr	r2, [r7, #8]
 8009be6:	f107 0314 	add.w	r3, r7, #20
 8009bea:	4611      	mov	r1, r2
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7ff fc03 	bl	80093f8 <follow_path>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009bf8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d11a      	bne.n	8009c36 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009c00:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009c04:	b25b      	sxtb	r3, r3
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	da03      	bge.n	8009c12 <f_open+0x72>
				res = FR_INVALID_NAME;
 8009c0a:	2306      	movs	r3, #6
 8009c0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009c10:	e011      	b.n	8009c36 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009c12:	79fb      	ldrb	r3, [r7, #7]
 8009c14:	f023 0301 	bic.w	r3, r3, #1
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	bf14      	ite	ne
 8009c1c:	2301      	movne	r3, #1
 8009c1e:	2300      	moveq	r3, #0
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	461a      	mov	r2, r3
 8009c24:	f107 0314 	add.w	r3, r7, #20
 8009c28:	4611      	mov	r1, r2
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7fe fbd2 	bl	80083d4 <chk_lock>
 8009c30:	4603      	mov	r3, r0
 8009c32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009c36:	79fb      	ldrb	r3, [r7, #7]
 8009c38:	f003 031c 	and.w	r3, r3, #28
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d07f      	beq.n	8009d40 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009c40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d017      	beq.n	8009c78 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009c48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c4c:	2b04      	cmp	r3, #4
 8009c4e:	d10e      	bne.n	8009c6e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009c50:	f7fe fc1c 	bl	800848c <enq_lock>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d006      	beq.n	8009c68 <f_open+0xc8>
 8009c5a:	f107 0314 	add.w	r3, r7, #20
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7ff fb03 	bl	800926a <dir_register>
 8009c64:	4603      	mov	r3, r0
 8009c66:	e000      	b.n	8009c6a <f_open+0xca>
 8009c68:	2312      	movs	r3, #18
 8009c6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009c6e:	79fb      	ldrb	r3, [r7, #7]
 8009c70:	f043 0308 	orr.w	r3, r3, #8
 8009c74:	71fb      	strb	r3, [r7, #7]
 8009c76:	e010      	b.n	8009c9a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009c78:	7ebb      	ldrb	r3, [r7, #26]
 8009c7a:	f003 0311 	and.w	r3, r3, #17
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d003      	beq.n	8009c8a <f_open+0xea>
					res = FR_DENIED;
 8009c82:	2307      	movs	r3, #7
 8009c84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009c88:	e007      	b.n	8009c9a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009c8a:	79fb      	ldrb	r3, [r7, #7]
 8009c8c:	f003 0304 	and.w	r3, r3, #4
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d002      	beq.n	8009c9a <f_open+0xfa>
 8009c94:	2308      	movs	r3, #8
 8009c96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009c9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d168      	bne.n	8009d74 <f_open+0x1d4>
 8009ca2:	79fb      	ldrb	r3, [r7, #7]
 8009ca4:	f003 0308 	and.w	r3, r3, #8
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d063      	beq.n	8009d74 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009cac:	f7fc fb06 	bl	80062bc <get_fattime>
 8009cb0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cb4:	330e      	adds	r3, #14
 8009cb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7fe fae1 	bl	8008280 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cc0:	3316      	adds	r3, #22
 8009cc2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f7fe fadb 	bl	8008280 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ccc:	330b      	adds	r3, #11
 8009cce:	2220      	movs	r2, #32
 8009cd0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cd6:	4611      	mov	r1, r2
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f7ff fa32 	bl	8009142 <ld_clust>
 8009cde:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7ff fa4a 	bl	8009180 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cee:	331c      	adds	r3, #28
 8009cf0:	2100      	movs	r1, #0
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7fe fac4 	bl	8008280 <st_dword>
					fs->wflag = 1;
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d037      	beq.n	8009d74 <f_open+0x1d4>
						dw = fs->winsect;
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d08:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009d0a:	f107 0314 	add.w	r3, r7, #20
 8009d0e:	2200      	movs	r2, #0
 8009d10:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7fe ff5d 	bl	8008bd2 <remove_chain>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009d1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d126      	bne.n	8009d74 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7fe fd02 	bl	8008734 <move_window>
 8009d30:	4603      	mov	r3, r0
 8009d32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d3a:	3a01      	subs	r2, #1
 8009d3c:	60da      	str	r2, [r3, #12]
 8009d3e:	e019      	b.n	8009d74 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009d40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d115      	bne.n	8009d74 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009d48:	7ebb      	ldrb	r3, [r7, #26]
 8009d4a:	f003 0310 	and.w	r3, r3, #16
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d003      	beq.n	8009d5a <f_open+0x1ba>
					res = FR_NO_FILE;
 8009d52:	2304      	movs	r3, #4
 8009d54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009d58:	e00c      	b.n	8009d74 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009d5a:	79fb      	ldrb	r3, [r7, #7]
 8009d5c:	f003 0302 	and.w	r3, r3, #2
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d007      	beq.n	8009d74 <f_open+0x1d4>
 8009d64:	7ebb      	ldrb	r3, [r7, #26]
 8009d66:	f003 0301 	and.w	r3, r3, #1
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d002      	beq.n	8009d74 <f_open+0x1d4>
						res = FR_DENIED;
 8009d6e:	2307      	movs	r3, #7
 8009d70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009d74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d128      	bne.n	8009dce <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009d7c:	79fb      	ldrb	r3, [r7, #7]
 8009d7e:	f003 0308 	and.w	r3, r3, #8
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d003      	beq.n	8009d8e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009d86:	79fb      	ldrb	r3, [r7, #7]
 8009d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d8c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009d96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009d9c:	79fb      	ldrb	r3, [r7, #7]
 8009d9e:	f023 0301 	bic.w	r3, r3, #1
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	bf14      	ite	ne
 8009da6:	2301      	movne	r3, #1
 8009da8:	2300      	moveq	r3, #0
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	461a      	mov	r2, r3
 8009dae:	f107 0314 	add.w	r3, r7, #20
 8009db2:	4611      	mov	r1, r2
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7fe fb8b 	bl	80084d0 <inc_lock>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	691b      	ldr	r3, [r3, #16]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d102      	bne.n	8009dce <f_open+0x22e>
 8009dc8:	2302      	movs	r3, #2
 8009dca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009dce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	f040 8095 	bne.w	8009f02 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ddc:	4611      	mov	r1, r2
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7ff f9af 	bl	8009142 <ld_clust>
 8009de4:	4602      	mov	r2, r0
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dec:	331c      	adds	r3, #28
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7fe fa08 	bl	8008204 <ld_dword>
 8009df4:	4602      	mov	r2, r0
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009e00:	693a      	ldr	r2, [r7, #16]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	88da      	ldrh	r2, [r3, #6]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	79fa      	ldrb	r2, [r7, #7]
 8009e12:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2200      	movs	r2, #0
 8009e18:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2200      	movs	r2, #0
 8009e24:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	3330      	adds	r3, #48	; 0x30
 8009e2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e2e:	2100      	movs	r1, #0
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7fe fa72 	bl	800831a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009e36:	79fb      	ldrb	r3, [r7, #7]
 8009e38:	f003 0320 	and.w	r3, r3, #32
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d060      	beq.n	8009f02 <f_open+0x362>
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	68db      	ldr	r3, [r3, #12]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d05c      	beq.n	8009f02 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	68da      	ldr	r2, [r3, #12]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	895b      	ldrh	r3, [r3, #10]
 8009e54:	025b      	lsls	r3, r3, #9
 8009e56:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	657b      	str	r3, [r7, #84]	; 0x54
 8009e64:	e016      	b.n	8009e94 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7fe fd1d 	bl	80088aa <get_fat>
 8009e70:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009e72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d802      	bhi.n	8009e7e <f_open+0x2de>
 8009e78:	2302      	movs	r3, #2
 8009e7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009e7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e84:	d102      	bne.n	8009e8c <f_open+0x2ec>
 8009e86:	2301      	movs	r3, #1
 8009e88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009e8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e90:	1ad3      	subs	r3, r2, r3
 8009e92:	657b      	str	r3, [r7, #84]	; 0x54
 8009e94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d103      	bne.n	8009ea4 <f_open+0x304>
 8009e9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d8e0      	bhi.n	8009e66 <f_open+0x2c6>
				}
				fp->clust = clst;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ea8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009eaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d127      	bne.n	8009f02 <f_open+0x362>
 8009eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d022      	beq.n	8009f02 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7fe fcd3 	bl	800886c <clust2sect>
 8009ec6:	6478      	str	r0, [r7, #68]	; 0x44
 8009ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d103      	bne.n	8009ed6 <f_open+0x336>
						res = FR_INT_ERR;
 8009ece:	2302      	movs	r3, #2
 8009ed0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009ed4:	e015      	b.n	8009f02 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ed8:	0a5a      	lsrs	r2, r3, #9
 8009eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009edc:	441a      	add	r2, r3
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	7858      	ldrb	r0, [r3, #1]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6a1a      	ldr	r2, [r3, #32]
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	f7fe f911 	bl	8008118 <disk_read>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d002      	beq.n	8009f02 <f_open+0x362>
 8009efc:	2301      	movs	r3, #1
 8009efe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009f02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d002      	beq.n	8009f10 <f_open+0x370>
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009f10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3760      	adds	r7, #96	; 0x60
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b08e      	sub	sp, #56	; 0x38
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	607a      	str	r2, [r7, #4]
 8009f28:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	2200      	movs	r2, #0
 8009f32:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f107 0214 	add.w	r2, r7, #20
 8009f3a:	4611      	mov	r1, r2
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7ff fdb3 	bl	8009aa8 <validate>
 8009f42:	4603      	mov	r3, r0
 8009f44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009f48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d107      	bne.n	8009f60 <f_read+0x44>
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	7d5b      	ldrb	r3, [r3, #21]
 8009f54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009f58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d002      	beq.n	8009f66 <f_read+0x4a>
 8009f60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f64:	e115      	b.n	800a192 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	7d1b      	ldrb	r3, [r3, #20]
 8009f6a:	f003 0301 	and.w	r3, r3, #1
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d101      	bne.n	8009f76 <f_read+0x5a>
 8009f72:	2307      	movs	r3, #7
 8009f74:	e10d      	b.n	800a192 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	68da      	ldr	r2, [r3, #12]
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	699b      	ldr	r3, [r3, #24]
 8009f7e:	1ad3      	subs	r3, r2, r3
 8009f80:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	6a3b      	ldr	r3, [r7, #32]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	f240 80fe 	bls.w	800a188 <f_read+0x26c>
 8009f8c:	6a3b      	ldr	r3, [r7, #32]
 8009f8e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009f90:	e0fa      	b.n	800a188 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	699b      	ldr	r3, [r3, #24]
 8009f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f040 80c6 	bne.w	800a12c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	699b      	ldr	r3, [r3, #24]
 8009fa4:	0a5b      	lsrs	r3, r3, #9
 8009fa6:	697a      	ldr	r2, [r7, #20]
 8009fa8:	8952      	ldrh	r2, [r2, #10]
 8009faa:	3a01      	subs	r2, #1
 8009fac:	4013      	ands	r3, r2
 8009fae:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009fb0:	69fb      	ldr	r3, [r7, #28]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d12f      	bne.n	800a016 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	699b      	ldr	r3, [r3, #24]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d103      	bne.n	8009fc6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	689b      	ldr	r3, [r3, #8]
 8009fc2:	633b      	str	r3, [r7, #48]	; 0x30
 8009fc4:	e013      	b.n	8009fee <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d007      	beq.n	8009fde <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	699b      	ldr	r3, [r3, #24]
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	68f8      	ldr	r0, [r7, #12]
 8009fd6:	f7fe fef9 	bl	8008dcc <clmt_clust>
 8009fda:	6338      	str	r0, [r7, #48]	; 0x30
 8009fdc:	e007      	b.n	8009fee <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009fde:	68fa      	ldr	r2, [r7, #12]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	69db      	ldr	r3, [r3, #28]
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	4610      	mov	r0, r2
 8009fe8:	f7fe fc5f 	bl	80088aa <get_fat>
 8009fec:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d804      	bhi.n	8009ffe <f_read+0xe2>
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2202      	movs	r2, #2
 8009ff8:	755a      	strb	r2, [r3, #21]
 8009ffa:	2302      	movs	r3, #2
 8009ffc:	e0c9      	b.n	800a192 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a004:	d104      	bne.n	800a010 <f_read+0xf4>
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2201      	movs	r2, #1
 800a00a:	755a      	strb	r2, [r3, #21]
 800a00c:	2301      	movs	r3, #1
 800a00e:	e0c0      	b.n	800a192 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a014:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a016:	697a      	ldr	r2, [r7, #20]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	69db      	ldr	r3, [r3, #28]
 800a01c:	4619      	mov	r1, r3
 800a01e:	4610      	mov	r0, r2
 800a020:	f7fe fc24 	bl	800886c <clust2sect>
 800a024:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a026:	69bb      	ldr	r3, [r7, #24]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d104      	bne.n	800a036 <f_read+0x11a>
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2202      	movs	r2, #2
 800a030:	755a      	strb	r2, [r3, #21]
 800a032:	2302      	movs	r3, #2
 800a034:	e0ad      	b.n	800a192 <f_read+0x276>
			sect += csect;
 800a036:	69ba      	ldr	r2, [r7, #24]
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	4413      	add	r3, r2
 800a03c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	0a5b      	lsrs	r3, r3, #9
 800a042:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a046:	2b00      	cmp	r3, #0
 800a048:	d039      	beq.n	800a0be <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a04a:	69fa      	ldr	r2, [r7, #28]
 800a04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a04e:	4413      	add	r3, r2
 800a050:	697a      	ldr	r2, [r7, #20]
 800a052:	8952      	ldrh	r2, [r2, #10]
 800a054:	4293      	cmp	r3, r2
 800a056:	d905      	bls.n	800a064 <f_read+0x148>
					cc = fs->csize - csect;
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	895b      	ldrh	r3, [r3, #10]
 800a05c:	461a      	mov	r2, r3
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	1ad3      	subs	r3, r2, r3
 800a062:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	7858      	ldrb	r0, [r3, #1]
 800a068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a06a:	69ba      	ldr	r2, [r7, #24]
 800a06c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a06e:	f7fe f853 	bl	8008118 <disk_read>
 800a072:	4603      	mov	r3, r0
 800a074:	2b00      	cmp	r3, #0
 800a076:	d004      	beq.n	800a082 <f_read+0x166>
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2201      	movs	r2, #1
 800a07c:	755a      	strb	r2, [r3, #21]
 800a07e:	2301      	movs	r3, #1
 800a080:	e087      	b.n	800a192 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	7d1b      	ldrb	r3, [r3, #20]
 800a086:	b25b      	sxtb	r3, r3
 800a088:	2b00      	cmp	r3, #0
 800a08a:	da14      	bge.n	800a0b6 <f_read+0x19a>
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6a1a      	ldr	r2, [r3, #32]
 800a090:	69bb      	ldr	r3, [r7, #24]
 800a092:	1ad3      	subs	r3, r2, r3
 800a094:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a096:	429a      	cmp	r2, r3
 800a098:	d90d      	bls.n	800a0b6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6a1a      	ldr	r2, [r3, #32]
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	1ad3      	subs	r3, r2, r3
 800a0a2:	025b      	lsls	r3, r3, #9
 800a0a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0a6:	18d0      	adds	r0, r2, r3
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	3330      	adds	r3, #48	; 0x30
 800a0ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	f7fe f911 	bl	80082d8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b8:	025b      	lsls	r3, r3, #9
 800a0ba:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800a0bc:	e050      	b.n	800a160 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	6a1b      	ldr	r3, [r3, #32]
 800a0c2:	69ba      	ldr	r2, [r7, #24]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d02e      	beq.n	800a126 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	7d1b      	ldrb	r3, [r3, #20]
 800a0cc:	b25b      	sxtb	r3, r3
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	da18      	bge.n	800a104 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	7858      	ldrb	r0, [r3, #1]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6a1a      	ldr	r2, [r3, #32]
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	f7fe f839 	bl	8008158 <disk_write>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d004      	beq.n	800a0f6 <f_read+0x1da>
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	755a      	strb	r2, [r3, #21]
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	e04d      	b.n	800a192 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	7d1b      	ldrb	r3, [r3, #20]
 800a0fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0fe:	b2da      	uxtb	r2, r3
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	7858      	ldrb	r0, [r3, #1]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a10e:	2301      	movs	r3, #1
 800a110:	69ba      	ldr	r2, [r7, #24]
 800a112:	f7fe f801 	bl	8008118 <disk_read>
 800a116:	4603      	mov	r3, r0
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d004      	beq.n	800a126 <f_read+0x20a>
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2201      	movs	r2, #1
 800a120:	755a      	strb	r2, [r3, #21]
 800a122:	2301      	movs	r3, #1
 800a124:	e035      	b.n	800a192 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	69ba      	ldr	r2, [r7, #24]
 800a12a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	699b      	ldr	r3, [r3, #24]
 800a130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a134:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a138:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a13a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d901      	bls.n	800a146 <f_read+0x22a>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	699b      	ldr	r3, [r3, #24]
 800a150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a154:	4413      	add	r3, r2
 800a156:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a158:	4619      	mov	r1, r3
 800a15a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a15c:	f7fe f8bc 	bl	80082d8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a164:	4413      	add	r3, r2
 800a166:	627b      	str	r3, [r7, #36]	; 0x24
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	699a      	ldr	r2, [r3, #24]
 800a16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16e:	441a      	add	r2, r3
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	619a      	str	r2, [r3, #24]
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17a:	441a      	add	r2, r3
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	601a      	str	r2, [r3, #0]
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a184:	1ad3      	subs	r3, r2, r3
 800a186:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	f47f af01 	bne.w	8009f92 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	3738      	adds	r7, #56	; 0x38
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b08c      	sub	sp, #48	; 0x30
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	60f8      	str	r0, [r7, #12]
 800a1a2:	60b9      	str	r1, [r7, #8]
 800a1a4:	607a      	str	r2, [r7, #4]
 800a1a6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f107 0210 	add.w	r2, r7, #16
 800a1b8:	4611      	mov	r1, r2
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7ff fc74 	bl	8009aa8 <validate>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a1c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d107      	bne.n	800a1de <f_write+0x44>
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	7d5b      	ldrb	r3, [r3, #21]
 800a1d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a1d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d002      	beq.n	800a1e4 <f_write+0x4a>
 800a1de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1e2:	e14b      	b.n	800a47c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	7d1b      	ldrb	r3, [r3, #20]
 800a1e8:	f003 0302 	and.w	r3, r3, #2
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d101      	bne.n	800a1f4 <f_write+0x5a>
 800a1f0:	2307      	movs	r3, #7
 800a1f2:	e143      	b.n	800a47c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	699a      	ldr	r2, [r3, #24]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	441a      	add	r2, r3
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	699b      	ldr	r3, [r3, #24]
 800a200:	429a      	cmp	r2, r3
 800a202:	f080 812d 	bcs.w	800a460 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	699b      	ldr	r3, [r3, #24]
 800a20a:	43db      	mvns	r3, r3
 800a20c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a20e:	e127      	b.n	800a460 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	699b      	ldr	r3, [r3, #24]
 800a214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f040 80e3 	bne.w	800a3e4 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	699b      	ldr	r3, [r3, #24]
 800a222:	0a5b      	lsrs	r3, r3, #9
 800a224:	693a      	ldr	r2, [r7, #16]
 800a226:	8952      	ldrh	r2, [r2, #10]
 800a228:	3a01      	subs	r2, #1
 800a22a:	4013      	ands	r3, r2
 800a22c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a22e:	69bb      	ldr	r3, [r7, #24]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d143      	bne.n	800a2bc <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	699b      	ldr	r3, [r3, #24]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d10c      	bne.n	800a256 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	689b      	ldr	r3, [r3, #8]
 800a240:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a244:	2b00      	cmp	r3, #0
 800a246:	d11a      	bne.n	800a27e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2100      	movs	r1, #0
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7fe fd25 	bl	8008c9c <create_chain>
 800a252:	62b8      	str	r0, [r7, #40]	; 0x28
 800a254:	e013      	b.n	800a27e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d007      	beq.n	800a26e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	699b      	ldr	r3, [r3, #24]
 800a262:	4619      	mov	r1, r3
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f7fe fdb1 	bl	8008dcc <clmt_clust>
 800a26a:	62b8      	str	r0, [r7, #40]	; 0x28
 800a26c:	e007      	b.n	800a27e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a26e:	68fa      	ldr	r2, [r7, #12]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	69db      	ldr	r3, [r3, #28]
 800a274:	4619      	mov	r1, r3
 800a276:	4610      	mov	r0, r2
 800a278:	f7fe fd10 	bl	8008c9c <create_chain>
 800a27c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a280:	2b00      	cmp	r3, #0
 800a282:	f000 80f2 	beq.w	800a46a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d104      	bne.n	800a296 <f_write+0xfc>
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	2202      	movs	r2, #2
 800a290:	755a      	strb	r2, [r3, #21]
 800a292:	2302      	movs	r3, #2
 800a294:	e0f2      	b.n	800a47c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a298:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a29c:	d104      	bne.n	800a2a8 <f_write+0x10e>
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	755a      	strb	r2, [r3, #21]
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	e0e9      	b.n	800a47c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2ac:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d102      	bne.n	800a2bc <f_write+0x122>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2ba:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	7d1b      	ldrb	r3, [r3, #20]
 800a2c0:	b25b      	sxtb	r3, r3
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	da18      	bge.n	800a2f8 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	7858      	ldrb	r0, [r3, #1]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	6a1a      	ldr	r2, [r3, #32]
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	f7fd ff3f 	bl	8008158 <disk_write>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d004      	beq.n	800a2ea <f_write+0x150>
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	755a      	strb	r2, [r3, #21]
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e0c8      	b.n	800a47c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	7d1b      	ldrb	r3, [r3, #20]
 800a2ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2f2:	b2da      	uxtb	r2, r3
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a2f8:	693a      	ldr	r2, [r7, #16]
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	69db      	ldr	r3, [r3, #28]
 800a2fe:	4619      	mov	r1, r3
 800a300:	4610      	mov	r0, r2
 800a302:	f7fe fab3 	bl	800886c <clust2sect>
 800a306:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d104      	bne.n	800a318 <f_write+0x17e>
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2202      	movs	r2, #2
 800a312:	755a      	strb	r2, [r3, #21]
 800a314:	2302      	movs	r3, #2
 800a316:	e0b1      	b.n	800a47c <f_write+0x2e2>
			sect += csect;
 800a318:	697a      	ldr	r2, [r7, #20]
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	4413      	add	r3, r2
 800a31e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	0a5b      	lsrs	r3, r3, #9
 800a324:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a326:	6a3b      	ldr	r3, [r7, #32]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d03c      	beq.n	800a3a6 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a32c:	69ba      	ldr	r2, [r7, #24]
 800a32e:	6a3b      	ldr	r3, [r7, #32]
 800a330:	4413      	add	r3, r2
 800a332:	693a      	ldr	r2, [r7, #16]
 800a334:	8952      	ldrh	r2, [r2, #10]
 800a336:	4293      	cmp	r3, r2
 800a338:	d905      	bls.n	800a346 <f_write+0x1ac>
					cc = fs->csize - csect;
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	895b      	ldrh	r3, [r3, #10]
 800a33e:	461a      	mov	r2, r3
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	1ad3      	subs	r3, r2, r3
 800a344:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	7858      	ldrb	r0, [r3, #1]
 800a34a:	6a3b      	ldr	r3, [r7, #32]
 800a34c:	697a      	ldr	r2, [r7, #20]
 800a34e:	69f9      	ldr	r1, [r7, #28]
 800a350:	f7fd ff02 	bl	8008158 <disk_write>
 800a354:	4603      	mov	r3, r0
 800a356:	2b00      	cmp	r3, #0
 800a358:	d004      	beq.n	800a364 <f_write+0x1ca>
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2201      	movs	r2, #1
 800a35e:	755a      	strb	r2, [r3, #21]
 800a360:	2301      	movs	r3, #1
 800a362:	e08b      	b.n	800a47c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	6a1a      	ldr	r2, [r3, #32]
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	1ad3      	subs	r3, r2, r3
 800a36c:	6a3a      	ldr	r2, [r7, #32]
 800a36e:	429a      	cmp	r2, r3
 800a370:	d915      	bls.n	800a39e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	6a1a      	ldr	r2, [r3, #32]
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	1ad3      	subs	r3, r2, r3
 800a380:	025b      	lsls	r3, r3, #9
 800a382:	69fa      	ldr	r2, [r7, #28]
 800a384:	4413      	add	r3, r2
 800a386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a38a:	4619      	mov	r1, r3
 800a38c:	f7fd ffa4 	bl	80082d8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	7d1b      	ldrb	r3, [r3, #20]
 800a394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a398:	b2da      	uxtb	r2, r3
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a39e:	6a3b      	ldr	r3, [r7, #32]
 800a3a0:	025b      	lsls	r3, r3, #9
 800a3a2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a3a4:	e03f      	b.n	800a426 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6a1b      	ldr	r3, [r3, #32]
 800a3aa:	697a      	ldr	r2, [r7, #20]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d016      	beq.n	800a3de <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	699a      	ldr	r2, [r3, #24]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d210      	bcs.n	800a3de <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	7858      	ldrb	r0, [r3, #1]
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	697a      	ldr	r2, [r7, #20]
 800a3ca:	f7fd fea5 	bl	8008118 <disk_read>
 800a3ce:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d004      	beq.n	800a3de <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	755a      	strb	r2, [r3, #21]
 800a3da:	2301      	movs	r3, #1
 800a3dc:	e04e      	b.n	800a47c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	697a      	ldr	r2, [r7, #20]
 800a3e2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	699b      	ldr	r3, [r3, #24]
 800a3e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3ec:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a3f0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a3f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d901      	bls.n	800a3fe <f_write+0x264>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	699b      	ldr	r3, [r3, #24]
 800a408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a40c:	4413      	add	r3, r2
 800a40e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a410:	69f9      	ldr	r1, [r7, #28]
 800a412:	4618      	mov	r0, r3
 800a414:	f7fd ff60 	bl	80082d8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	7d1b      	ldrb	r3, [r3, #20]
 800a41c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a420:	b2da      	uxtb	r2, r3
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a426:	69fa      	ldr	r2, [r7, #28]
 800a428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42a:	4413      	add	r3, r2
 800a42c:	61fb      	str	r3, [r7, #28]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	699a      	ldr	r2, [r3, #24]
 800a432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a434:	441a      	add	r2, r3
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	619a      	str	r2, [r3, #24]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	68da      	ldr	r2, [r3, #12]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	699b      	ldr	r3, [r3, #24]
 800a442:	429a      	cmp	r2, r3
 800a444:	bf38      	it	cc
 800a446:	461a      	movcc	r2, r3
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	60da      	str	r2, [r3, #12]
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a452:	441a      	add	r2, r3
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	601a      	str	r2, [r3, #0]
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45c:	1ad3      	subs	r3, r2, r3
 800a45e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2b00      	cmp	r3, #0
 800a464:	f47f aed4 	bne.w	800a210 <f_write+0x76>
 800a468:	e000      	b.n	800a46c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a46a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	7d1b      	ldrb	r3, [r3, #20]
 800a470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a474:	b2da      	uxtb	r2, r3
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a47a:	2300      	movs	r3, #0
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3730      	adds	r7, #48	; 0x30
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b086      	sub	sp, #24
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f107 0208 	add.w	r2, r7, #8
 800a492:	4611      	mov	r1, r2
 800a494:	4618      	mov	r0, r3
 800a496:	f7ff fb07 	bl	8009aa8 <validate>
 800a49a:	4603      	mov	r3, r0
 800a49c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a49e:	7dfb      	ldrb	r3, [r7, #23]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d168      	bne.n	800a576 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	7d1b      	ldrb	r3, [r3, #20]
 800a4a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d062      	beq.n	800a576 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	7d1b      	ldrb	r3, [r3, #20]
 800a4b4:	b25b      	sxtb	r3, r3
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	da15      	bge.n	800a4e6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	7858      	ldrb	r0, [r3, #1]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6a1a      	ldr	r2, [r3, #32]
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	f7fd fe45 	bl	8008158 <disk_write>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d001      	beq.n	800a4d8 <f_sync+0x54>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e04f      	b.n	800a578 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	7d1b      	ldrb	r3, [r3, #20]
 800a4dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4e0:	b2da      	uxtb	r2, r3
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a4e6:	f7fb fee9 	bl	80062bc <get_fattime>
 800a4ea:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a4ec:	68ba      	ldr	r2, [r7, #8]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	4610      	mov	r0, r2
 800a4f6:	f7fe f91d 	bl	8008734 <move_window>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a4fe:	7dfb      	ldrb	r3, [r7, #23]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d138      	bne.n	800a576 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a508:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	330b      	adds	r3, #11
 800a50e:	781a      	ldrb	r2, [r3, #0]
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	330b      	adds	r3, #11
 800a514:	f042 0220 	orr.w	r2, r2, #32
 800a518:	b2d2      	uxtb	r2, r2
 800a51a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6818      	ldr	r0, [r3, #0]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	689b      	ldr	r3, [r3, #8]
 800a524:	461a      	mov	r2, r3
 800a526:	68f9      	ldr	r1, [r7, #12]
 800a528:	f7fe fe2a 	bl	8009180 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f103 021c 	add.w	r2, r3, #28
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	4619      	mov	r1, r3
 800a538:	4610      	mov	r0, r2
 800a53a:	f7fd fea1 	bl	8008280 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	3316      	adds	r3, #22
 800a542:	6939      	ldr	r1, [r7, #16]
 800a544:	4618      	mov	r0, r3
 800a546:	f7fd fe9b 	bl	8008280 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	3312      	adds	r3, #18
 800a54e:	2100      	movs	r1, #0
 800a550:	4618      	mov	r0, r3
 800a552:	f7fd fe7a 	bl	800824a <st_word>
					fs->wflag = 1;
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	2201      	movs	r2, #1
 800a55a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	4618      	mov	r0, r3
 800a560:	f7fe f916 	bl	8008790 <sync_fs>
 800a564:	4603      	mov	r3, r0
 800a566:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	7d1b      	ldrb	r3, [r3, #20]
 800a56c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a570:	b2da      	uxtb	r2, r3
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a576:	7dfb      	ldrb	r3, [r7, #23]
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3718      	adds	r7, #24
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f7ff ff7b 	bl	800a484 <f_sync>
 800a58e:	4603      	mov	r3, r0
 800a590:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a592:	7bfb      	ldrb	r3, [r7, #15]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d118      	bne.n	800a5ca <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f107 0208 	add.w	r2, r7, #8
 800a59e:	4611      	mov	r1, r2
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f7ff fa81 	bl	8009aa8 <validate>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a5aa:	7bfb      	ldrb	r3, [r7, #15]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d10c      	bne.n	800a5ca <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	691b      	ldr	r3, [r3, #16]
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7fe f819 	bl	80085ec <dec_lock>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a5be:	7bfb      	ldrb	r3, [r7, #15]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d102      	bne.n	800a5ca <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a5ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3710      	adds	r7, #16
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b090      	sub	sp, #64	; 0x40
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f107 0208 	add.w	r2, r7, #8
 800a5e4:	4611      	mov	r1, r2
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7ff fa5e 	bl	8009aa8 <validate>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800a5f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d103      	bne.n	800a602 <f_lseek+0x2e>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	7d5b      	ldrb	r3, [r3, #21]
 800a5fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a602:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a606:	2b00      	cmp	r3, #0
 800a608:	d002      	beq.n	800a610 <f_lseek+0x3c>
 800a60a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a60e:	e1e6      	b.n	800a9de <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a614:	2b00      	cmp	r3, #0
 800a616:	f000 80d1 	beq.w	800a7bc <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a620:	d15a      	bne.n	800a6d8 <f_lseek+0x104>
			tbl = fp->cltbl;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a626:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62a:	1d1a      	adds	r2, r3, #4
 800a62c:	627a      	str	r2, [r7, #36]	; 0x24
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	617b      	str	r3, [r7, #20]
 800a632:	2302      	movs	r3, #2
 800a634:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800a63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d03a      	beq.n	800a6b8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a644:	613b      	str	r3, [r7, #16]
 800a646:	2300      	movs	r3, #0
 800a648:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64c:	3302      	adds	r3, #2
 800a64e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800a650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a652:	60fb      	str	r3, [r7, #12]
 800a654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a656:	3301      	adds	r3, #1
 800a658:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a65e:	4618      	mov	r0, r3
 800a660:	f7fe f923 	bl	80088aa <get_fat>
 800a664:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d804      	bhi.n	800a676 <f_lseek+0xa2>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2202      	movs	r2, #2
 800a670:	755a      	strb	r2, [r3, #21]
 800a672:	2302      	movs	r3, #2
 800a674:	e1b3      	b.n	800a9de <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a67c:	d104      	bne.n	800a688 <f_lseek+0xb4>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2201      	movs	r2, #1
 800a682:	755a      	strb	r2, [r3, #21]
 800a684:	2301      	movs	r3, #1
 800a686:	e1aa      	b.n	800a9de <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	3301      	adds	r3, #1
 800a68c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a68e:	429a      	cmp	r2, r3
 800a690:	d0de      	beq.n	800a650 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a692:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	429a      	cmp	r2, r3
 800a698:	d809      	bhi.n	800a6ae <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800a69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69c:	1d1a      	adds	r2, r3, #4
 800a69e:	627a      	str	r2, [r7, #36]	; 0x24
 800a6a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6a2:	601a      	str	r2, [r3, #0]
 800a6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a6:	1d1a      	adds	r2, r3, #4
 800a6a8:	627a      	str	r2, [r7, #36]	; 0x24
 800a6aa:	693a      	ldr	r2, [r7, #16]
 800a6ac:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	695b      	ldr	r3, [r3, #20]
 800a6b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d3c4      	bcc.n	800a642 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6be:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800a6c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d803      	bhi.n	800a6d0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800a6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	601a      	str	r2, [r3, #0]
 800a6ce:	e184      	b.n	800a9da <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a6d0:	2311      	movs	r3, #17
 800a6d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a6d6:	e180      	b.n	800a9da <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	683a      	ldr	r2, [r7, #0]
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d902      	bls.n	800a6e8 <f_lseek+0x114>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	68db      	ldr	r3, [r3, #12]
 800a6e6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	683a      	ldr	r2, [r7, #0]
 800a6ec:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f000 8172 	beq.w	800a9da <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	3b01      	subs	r3, #1
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f7fe fb65 	bl	8008dcc <clmt_clust>
 800a702:	4602      	mov	r2, r0
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800a708:	68ba      	ldr	r2, [r7, #8]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	69db      	ldr	r3, [r3, #28]
 800a70e:	4619      	mov	r1, r3
 800a710:	4610      	mov	r0, r2
 800a712:	f7fe f8ab 	bl	800886c <clust2sect>
 800a716:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a718:	69bb      	ldr	r3, [r7, #24]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d104      	bne.n	800a728 <f_lseek+0x154>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2202      	movs	r2, #2
 800a722:	755a      	strb	r2, [r3, #21]
 800a724:	2302      	movs	r3, #2
 800a726:	e15a      	b.n	800a9de <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	3b01      	subs	r3, #1
 800a72c:	0a5b      	lsrs	r3, r3, #9
 800a72e:	68ba      	ldr	r2, [r7, #8]
 800a730:	8952      	ldrh	r2, [r2, #10]
 800a732:	3a01      	subs	r2, #1
 800a734:	4013      	ands	r3, r2
 800a736:	69ba      	ldr	r2, [r7, #24]
 800a738:	4413      	add	r3, r2
 800a73a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	699b      	ldr	r3, [r3, #24]
 800a740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a744:	2b00      	cmp	r3, #0
 800a746:	f000 8148 	beq.w	800a9da <f_lseek+0x406>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6a1b      	ldr	r3, [r3, #32]
 800a74e:	69ba      	ldr	r2, [r7, #24]
 800a750:	429a      	cmp	r2, r3
 800a752:	f000 8142 	beq.w	800a9da <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	7d1b      	ldrb	r3, [r3, #20]
 800a75a:	b25b      	sxtb	r3, r3
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	da18      	bge.n	800a792 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	7858      	ldrb	r0, [r3, #1]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6a1a      	ldr	r2, [r3, #32]
 800a76e:	2301      	movs	r3, #1
 800a770:	f7fd fcf2 	bl	8008158 <disk_write>
 800a774:	4603      	mov	r3, r0
 800a776:	2b00      	cmp	r3, #0
 800a778:	d004      	beq.n	800a784 <f_lseek+0x1b0>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2201      	movs	r2, #1
 800a77e:	755a      	strb	r2, [r3, #21]
 800a780:	2301      	movs	r3, #1
 800a782:	e12c      	b.n	800a9de <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	7d1b      	ldrb	r3, [r3, #20]
 800a788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a78c:	b2da      	uxtb	r2, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	7858      	ldrb	r0, [r3, #1]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a79c:	2301      	movs	r3, #1
 800a79e:	69ba      	ldr	r2, [r7, #24]
 800a7a0:	f7fd fcba 	bl	8008118 <disk_read>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d004      	beq.n	800a7b4 <f_lseek+0x1e0>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	755a      	strb	r2, [r3, #21]
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	e114      	b.n	800a9de <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	69ba      	ldr	r2, [r7, #24]
 800a7b8:	621a      	str	r2, [r3, #32]
 800a7ba:	e10e      	b.n	800a9da <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	683a      	ldr	r2, [r7, #0]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d908      	bls.n	800a7d8 <f_lseek+0x204>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	7d1b      	ldrb	r3, [r3, #20]
 800a7ca:	f003 0302 	and.w	r3, r3, #2
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d102      	bne.n	800a7d8 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	699b      	ldr	r3, [r3, #24]
 800a7dc:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	637b      	str	r3, [r7, #52]	; 0x34
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7e6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	f000 80a7 	beq.w	800a93e <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	895b      	ldrh	r3, [r3, #10]
 800a7f4:	025b      	lsls	r3, r3, #9
 800a7f6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a7f8:	6a3b      	ldr	r3, [r7, #32]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d01b      	beq.n	800a836 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	1e5a      	subs	r2, r3, #1
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	fbb2 f2f3 	udiv	r2, r2, r3
 800a808:	6a3b      	ldr	r3, [r7, #32]
 800a80a:	1e59      	subs	r1, r3, #1
 800a80c:	69fb      	ldr	r3, [r7, #28]
 800a80e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a812:	429a      	cmp	r2, r3
 800a814:	d30f      	bcc.n	800a836 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a816:	6a3b      	ldr	r3, [r7, #32]
 800a818:	1e5a      	subs	r2, r3, #1
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	425b      	negs	r3, r3
 800a81e:	401a      	ands	r2, r3
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	699b      	ldr	r3, [r3, #24]
 800a828:	683a      	ldr	r2, [r7, #0]
 800a82a:	1ad3      	subs	r3, r2, r3
 800a82c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	69db      	ldr	r3, [r3, #28]
 800a832:	63bb      	str	r3, [r7, #56]	; 0x38
 800a834:	e022      	b.n	800a87c <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	689b      	ldr	r3, [r3, #8]
 800a83a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d119      	bne.n	800a876 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2100      	movs	r1, #0
 800a846:	4618      	mov	r0, r3
 800a848:	f7fe fa28 	bl	8008c9c <create_chain>
 800a84c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a850:	2b01      	cmp	r3, #1
 800a852:	d104      	bne.n	800a85e <f_lseek+0x28a>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2202      	movs	r2, #2
 800a858:	755a      	strb	r2, [r3, #21]
 800a85a:	2302      	movs	r3, #2
 800a85c:	e0bf      	b.n	800a9de <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a860:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a864:	d104      	bne.n	800a870 <f_lseek+0x29c>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2201      	movs	r2, #1
 800a86a:	755a      	strb	r2, [r3, #21]
 800a86c:	2301      	movs	r3, #1
 800a86e:	e0b6      	b.n	800a9de <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a874:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a87a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d05d      	beq.n	800a93e <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800a882:	e03a      	b.n	800a8fa <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800a884:	683a      	ldr	r2, [r7, #0]
 800a886:	69fb      	ldr	r3, [r7, #28]
 800a888:	1ad3      	subs	r3, r2, r3
 800a88a:	603b      	str	r3, [r7, #0]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	699a      	ldr	r2, [r3, #24]
 800a890:	69fb      	ldr	r3, [r7, #28]
 800a892:	441a      	add	r2, r3
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	7d1b      	ldrb	r3, [r3, #20]
 800a89c:	f003 0302 	and.w	r3, r3, #2
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d00b      	beq.n	800a8bc <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f7fe f9f7 	bl	8008c9c <create_chain>
 800a8ae:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d108      	bne.n	800a8c8 <f_lseek+0x2f4>
							ofs = 0; break;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	603b      	str	r3, [r7, #0]
 800a8ba:	e022      	b.n	800a902 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7fd fff2 	bl	80088aa <get_fat>
 800a8c6:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8ce:	d104      	bne.n	800a8da <f_lseek+0x306>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	755a      	strb	r2, [r3, #21]
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e081      	b.n	800a9de <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	d904      	bls.n	800a8ea <f_lseek+0x316>
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	695b      	ldr	r3, [r3, #20]
 800a8e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d304      	bcc.n	800a8f4 <f_lseek+0x320>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2202      	movs	r2, #2
 800a8ee:	755a      	strb	r2, [r3, #21]
 800a8f0:	2302      	movs	r3, #2
 800a8f2:	e074      	b.n	800a9de <f_lseek+0x40a>
					fp->clust = clst;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8f8:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a8fa:	683a      	ldr	r2, [r7, #0]
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d8c0      	bhi.n	800a884 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	699a      	ldr	r2, [r3, #24]
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	441a      	add	r2, r3
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a914:	2b00      	cmp	r3, #0
 800a916:	d012      	beq.n	800a93e <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a91c:	4618      	mov	r0, r3
 800a91e:	f7fd ffa5 	bl	800886c <clust2sect>
 800a922:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a926:	2b00      	cmp	r3, #0
 800a928:	d104      	bne.n	800a934 <f_lseek+0x360>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2202      	movs	r2, #2
 800a92e:	755a      	strb	r2, [r3, #21]
 800a930:	2302      	movs	r3, #2
 800a932:	e054      	b.n	800a9de <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	0a5b      	lsrs	r3, r3, #9
 800a938:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a93a:	4413      	add	r3, r2
 800a93c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	699a      	ldr	r2, [r3, #24]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	68db      	ldr	r3, [r3, #12]
 800a946:	429a      	cmp	r2, r3
 800a948:	d90a      	bls.n	800a960 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	699a      	ldr	r2, [r3, #24]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	7d1b      	ldrb	r3, [r3, #20]
 800a956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a95a:	b2da      	uxtb	r2, r3
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	699b      	ldr	r3, [r3, #24]
 800a964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d036      	beq.n	800a9da <f_lseek+0x406>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6a1b      	ldr	r3, [r3, #32]
 800a970:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a972:	429a      	cmp	r2, r3
 800a974:	d031      	beq.n	800a9da <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	7d1b      	ldrb	r3, [r3, #20]
 800a97a:	b25b      	sxtb	r3, r3
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	da18      	bge.n	800a9b2 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	7858      	ldrb	r0, [r3, #1]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6a1a      	ldr	r2, [r3, #32]
 800a98e:	2301      	movs	r3, #1
 800a990:	f7fd fbe2 	bl	8008158 <disk_write>
 800a994:	4603      	mov	r3, r0
 800a996:	2b00      	cmp	r3, #0
 800a998:	d004      	beq.n	800a9a4 <f_lseek+0x3d0>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2201      	movs	r2, #1
 800a99e:	755a      	strb	r2, [r3, #21]
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e01c      	b.n	800a9de <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	7d1b      	ldrb	r3, [r3, #20]
 800a9a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9ac:	b2da      	uxtb	r2, r3
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	7858      	ldrb	r0, [r3, #1]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a9bc:	2301      	movs	r3, #1
 800a9be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9c0:	f7fd fbaa 	bl	8008118 <disk_read>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d004      	beq.n	800a9d4 <f_lseek+0x400>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	755a      	strb	r2, [r3, #21]
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	e004      	b.n	800a9de <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9d8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a9da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3740      	adds	r7, #64	; 0x40
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b084      	sub	sp, #16
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800a9f2:	78fb      	ldrb	r3, [r7, #3]
 800a9f4:	2b0a      	cmp	r3, #10
 800a9f6:	d103      	bne.n	800aa00 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a9f8:	210d      	movs	r1, #13
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f7ff fff3 	bl	800a9e6 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	db25      	blt.n	800aa58 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	1c5a      	adds	r2, r3, #1
 800aa10:	60fa      	str	r2, [r7, #12]
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	4413      	add	r3, r2
 800aa16:	78fa      	ldrb	r2, [r7, #3]
 800aa18:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2b3c      	cmp	r3, #60	; 0x3c
 800aa1e:	dd12      	ble.n	800aa46 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6818      	ldr	r0, [r3, #0]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f103 010c 	add.w	r1, r3, #12
 800aa2a:	68fa      	ldr	r2, [r7, #12]
 800aa2c:	f107 0308 	add.w	r3, r7, #8
 800aa30:	f7ff fbb3 	bl	800a19a <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800aa34:	68ba      	ldr	r2, [r7, #8]
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d101      	bne.n	800aa40 <putc_bfd+0x5a>
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	e001      	b.n	800aa44 <putc_bfd+0x5e>
 800aa40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa44:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	68fa      	ldr	r2, [r7, #12]
 800aa4a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	1c5a      	adds	r2, r3, #1
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	609a      	str	r2, [r3, #8]
 800aa56:	e000      	b.n	800aa5a <putc_bfd+0x74>
	if (i < 0) return;
 800aa58:	bf00      	nop
}
 800aa5a:	3710      	adds	r7, #16
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	db16      	blt.n	800aa9e <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6818      	ldr	r0, [r3, #0]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f103 010c 	add.w	r1, r3, #12
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	461a      	mov	r2, r3
 800aa80:	f107 030c 	add.w	r3, r7, #12
 800aa84:	f7ff fb89 	bl	800a19a <f_write>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d107      	bne.n	800aa9e <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d102      	bne.n	800aa9e <putc_flush+0x3e>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	e001      	b.n	800aaa2 <putc_flush+0x42>
	return EOF;
 800aa9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3710      	adds	r7, #16
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}

0800aaaa <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800aaaa:	b480      	push	{r7}
 800aaac:	b083      	sub	sp, #12
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
 800aab2:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	683a      	ldr	r2, [r7, #0]
 800aab8:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2200      	movs	r2, #0
 800aabe:	605a      	str	r2, [r3, #4]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	685a      	ldr	r2, [r3, #4]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	609a      	str	r2, [r3, #8]
}
 800aac8:	bf00      	nop
 800aaca:	370c      	adds	r7, #12
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr

0800aad4 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800aad4:	b40e      	push	{r1, r2, r3}
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b0a7      	sub	sp, #156	; 0x9c
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800aade:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aae2:	6879      	ldr	r1, [r7, #4]
 800aae4:	4618      	mov	r0, r3
 800aae6:	f7ff ffe0 	bl	800aaaa <putc_init>

	va_start(arp, fmt);
 800aaea:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800aaee:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800aaf0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aaf4:	1c5a      	adds	r2, r3, #1
 800aaf6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800ab00:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f000 81f2 	beq.w	800aeee <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800ab0a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ab0e:	2b25      	cmp	r3, #37	; 0x25
 800ab10:	d008      	beq.n	800ab24 <f_printf+0x50>
			putc_bfd(&pb, c);
 800ab12:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800ab16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ab1a:	4611      	mov	r1, r2
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f7ff ff62 	bl	800a9e6 <putc_bfd>
			continue;
 800ab22:	e1e3      	b.n	800aeec <f_printf+0x418>
		}
		w = f = 0;
 800ab24:	2300      	movs	r3, #0
 800ab26:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800ab30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ab34:	1c5a      	adds	r2, r3, #1
 800ab36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800ab40:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ab44:	2b30      	cmp	r3, #48	; 0x30
 800ab46:	d10b      	bne.n	800ab60 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ab4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ab52:	1c5a      	adds	r2, r3, #1
 800ab54:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800ab5e:	e024      	b.n	800abaa <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800ab60:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ab64:	2b2d      	cmp	r3, #45	; 0x2d
 800ab66:	d120      	bne.n	800abaa <f_printf+0xd6>
				f = 2; c = *fmt++;
 800ab68:	2302      	movs	r3, #2
 800ab6a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ab6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ab72:	1c5a      	adds	r2, r3, #1
 800ab74:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800ab7e:	e014      	b.n	800abaa <f_printf+0xd6>
			w = w * 10 + c - '0';
 800ab80:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ab84:	4613      	mov	r3, r2
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	4413      	add	r3, r2
 800ab8a:	005b      	lsls	r3, r3, #1
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ab92:	4413      	add	r3, r2
 800ab94:	3b30      	subs	r3, #48	; 0x30
 800ab96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800ab9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ab9e:	1c5a      	adds	r2, r3, #1
 800aba0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800abaa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800abae:	2b2f      	cmp	r3, #47	; 0x2f
 800abb0:	d903      	bls.n	800abba <f_printf+0xe6>
 800abb2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800abb6:	2b39      	cmp	r3, #57	; 0x39
 800abb8:	d9e2      	bls.n	800ab80 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800abba:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800abbe:	2b6c      	cmp	r3, #108	; 0x6c
 800abc0:	d003      	beq.n	800abca <f_printf+0xf6>
 800abc2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800abc6:	2b4c      	cmp	r3, #76	; 0x4c
 800abc8:	d10d      	bne.n	800abe6 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800abca:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800abce:	f043 0304 	orr.w	r3, r3, #4
 800abd2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800abd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800abda:	1c5a      	adds	r2, r3, #1
 800abdc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800abe6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800abea:	2b00      	cmp	r3, #0
 800abec:	f000 8181 	beq.w	800aef2 <f_printf+0x41e>
		d = c;
 800abf0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800abf4:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800abf8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800abfc:	2b60      	cmp	r3, #96	; 0x60
 800abfe:	d908      	bls.n	800ac12 <f_printf+0x13e>
 800ac00:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ac04:	2b7a      	cmp	r3, #122	; 0x7a
 800ac06:	d804      	bhi.n	800ac12 <f_printf+0x13e>
 800ac08:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ac0c:	3b20      	subs	r3, #32
 800ac0e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800ac12:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ac16:	3b42      	subs	r3, #66	; 0x42
 800ac18:	2b16      	cmp	r3, #22
 800ac1a:	f200 8098 	bhi.w	800ad4e <f_printf+0x27a>
 800ac1e:	a201      	add	r2, pc, #4	; (adr r2, 800ac24 <f_printf+0x150>)
 800ac20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac24:	0800ad2f 	.word	0x0800ad2f
 800ac28:	0800ad17 	.word	0x0800ad17
 800ac2c:	0800ad3f 	.word	0x0800ad3f
 800ac30:	0800ad4f 	.word	0x0800ad4f
 800ac34:	0800ad4f 	.word	0x0800ad4f
 800ac38:	0800ad4f 	.word	0x0800ad4f
 800ac3c:	0800ad4f 	.word	0x0800ad4f
 800ac40:	0800ad4f 	.word	0x0800ad4f
 800ac44:	0800ad4f 	.word	0x0800ad4f
 800ac48:	0800ad4f 	.word	0x0800ad4f
 800ac4c:	0800ad4f 	.word	0x0800ad4f
 800ac50:	0800ad4f 	.word	0x0800ad4f
 800ac54:	0800ad4f 	.word	0x0800ad4f
 800ac58:	0800ad37 	.word	0x0800ad37
 800ac5c:	0800ad4f 	.word	0x0800ad4f
 800ac60:	0800ad4f 	.word	0x0800ad4f
 800ac64:	0800ad4f 	.word	0x0800ad4f
 800ac68:	0800ac81 	.word	0x0800ac81
 800ac6c:	0800ad4f 	.word	0x0800ad4f
 800ac70:	0800ad3f 	.word	0x0800ad3f
 800ac74:	0800ad4f 	.word	0x0800ad4f
 800ac78:	0800ad4f 	.word	0x0800ad4f
 800ac7c:	0800ad47 	.word	0x0800ad47
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800ac80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac82:	1d1a      	adds	r2, r3, #4
 800ac84:	67ba      	str	r2, [r7, #120]	; 0x78
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ac90:	e004      	b.n	800ac9c <f_printf+0x1c8>
 800ac92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac96:	3301      	adds	r3, #1
 800ac98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ac9c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ac9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aca2:	4413      	add	r3, r2
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d1f3      	bne.n	800ac92 <f_printf+0x1be>
			if (!(f & 2)) {
 800acaa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800acae:	f003 0302 	and.w	r3, r3, #2
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d11a      	bne.n	800acec <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800acb6:	e005      	b.n	800acc4 <f_printf+0x1f0>
 800acb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800acbc:	2120      	movs	r1, #32
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7ff fe91 	bl	800a9e6 <putc_bfd>
 800acc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800acc8:	1c5a      	adds	r2, r3, #1
 800acca:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800acce:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d8f0      	bhi.n	800acb8 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800acd6:	e009      	b.n	800acec <f_printf+0x218>
 800acd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800acda:	1c5a      	adds	r2, r3, #1
 800acdc:	67fa      	str	r2, [r7, #124]	; 0x7c
 800acde:	781a      	ldrb	r2, [r3, #0]
 800ace0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ace4:	4611      	mov	r1, r2
 800ace6:	4618      	mov	r0, r3
 800ace8:	f7ff fe7d 	bl	800a9e6 <putc_bfd>
 800acec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d1f1      	bne.n	800acd8 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800acf4:	e005      	b.n	800ad02 <f_printf+0x22e>
 800acf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800acfa:	2120      	movs	r1, #32
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7ff fe72 	bl	800a9e6 <putc_bfd>
 800ad02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad06:	1c5a      	adds	r2, r3, #1
 800ad08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ad0c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d8f0      	bhi.n	800acf6 <f_printf+0x222>
			continue;
 800ad14:	e0ea      	b.n	800aeec <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800ad16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad18:	1d1a      	adds	r2, r3, #4
 800ad1a:	67ba      	str	r2, [r7, #120]	; 0x78
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	b2da      	uxtb	r2, r3
 800ad20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ad24:	4611      	mov	r1, r2
 800ad26:	4618      	mov	r0, r3
 800ad28:	f7ff fe5d 	bl	800a9e6 <putc_bfd>
 800ad2c:	e0de      	b.n	800aeec <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800ad2e:	2302      	movs	r3, #2
 800ad30:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ad34:	e014      	b.n	800ad60 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800ad36:	2308      	movs	r3, #8
 800ad38:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ad3c:	e010      	b.n	800ad60 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800ad3e:	230a      	movs	r3, #10
 800ad40:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ad44:	e00c      	b.n	800ad60 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800ad46:	2310      	movs	r3, #16
 800ad48:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ad4c:	e008      	b.n	800ad60 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800ad4e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800ad52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ad56:	4611      	mov	r1, r2
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7ff fe44 	bl	800a9e6 <putc_bfd>
 800ad5e:	e0c5      	b.n	800aeec <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800ad60:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ad64:	f003 0304 	and.w	r3, r3, #4
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d004      	beq.n	800ad76 <f_printf+0x2a2>
 800ad6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad6e:	1d1a      	adds	r2, r3, #4
 800ad70:	67ba      	str	r2, [r7, #120]	; 0x78
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	e00c      	b.n	800ad90 <f_printf+0x2bc>
 800ad76:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ad7a:	2b44      	cmp	r3, #68	; 0x44
 800ad7c:	d104      	bne.n	800ad88 <f_printf+0x2b4>
 800ad7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad80:	1d1a      	adds	r2, r3, #4
 800ad82:	67ba      	str	r2, [r7, #120]	; 0x78
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	e003      	b.n	800ad90 <f_printf+0x2bc>
 800ad88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad8a:	1d1a      	adds	r2, r3, #4
 800ad8c:	67ba      	str	r2, [r7, #120]	; 0x78
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800ad94:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ad98:	2b44      	cmp	r3, #68	; 0x44
 800ad9a:	d10e      	bne.n	800adba <f_printf+0x2e6>
 800ad9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	da0a      	bge.n	800adba <f_printf+0x2e6>
			v = 0 - v;
 800ada4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ada8:	425b      	negs	r3, r3
 800adaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800adae:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800adb2:	f043 0308 	orr.w	r3, r3, #8
 800adb6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800adba:	2300      	movs	r3, #0
 800adbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800adc0:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800adc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800adc8:	fbb3 f1f2 	udiv	r1, r3, r2
 800adcc:	fb01 f202 	mul.w	r2, r1, r2
 800add0:	1a9b      	subs	r3, r3, r2
 800add2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800add6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800adda:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800adde:	fbb2 f3f3 	udiv	r3, r2, r3
 800ade2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800ade6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800adea:	2b09      	cmp	r3, #9
 800adec:	d90b      	bls.n	800ae06 <f_printf+0x332>
 800adee:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800adf2:	2b78      	cmp	r3, #120	; 0x78
 800adf4:	d101      	bne.n	800adfa <f_printf+0x326>
 800adf6:	2227      	movs	r2, #39	; 0x27
 800adf8:	e000      	b.n	800adfc <f_printf+0x328>
 800adfa:	2207      	movs	r2, #7
 800adfc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ae00:	4413      	add	r3, r2
 800ae02:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800ae06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ae0a:	1c5a      	adds	r2, r3, #1
 800ae0c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800ae10:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800ae14:	3230      	adds	r2, #48	; 0x30
 800ae16:	b2d2      	uxtb	r2, r2
 800ae18:	3398      	adds	r3, #152	; 0x98
 800ae1a:	443b      	add	r3, r7
 800ae1c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800ae20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d003      	beq.n	800ae30 <f_printf+0x35c>
 800ae28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ae2c:	2b1f      	cmp	r3, #31
 800ae2e:	d9c7      	bls.n	800adc0 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800ae30:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ae34:	f003 0308 	and.w	r3, r3, #8
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d009      	beq.n	800ae50 <f_printf+0x37c>
 800ae3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ae40:	1c5a      	adds	r2, r3, #1
 800ae42:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800ae46:	3398      	adds	r3, #152	; 0x98
 800ae48:	443b      	add	r3, r7
 800ae4a:	222d      	movs	r2, #45	; 0x2d
 800ae4c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800ae50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ae54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ae58:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ae5c:	f003 0301 	and.w	r3, r3, #1
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d001      	beq.n	800ae68 <f_printf+0x394>
 800ae64:	2330      	movs	r3, #48	; 0x30
 800ae66:	e000      	b.n	800ae6a <f_printf+0x396>
 800ae68:	2320      	movs	r3, #32
 800ae6a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800ae6e:	e007      	b.n	800ae80 <f_printf+0x3ac>
 800ae70:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800ae74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ae78:	4611      	mov	r1, r2
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f7ff fdb3 	bl	800a9e6 <putc_bfd>
 800ae80:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ae84:	f003 0302 	and.w	r3, r3, #2
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d108      	bne.n	800ae9e <f_printf+0x3ca>
 800ae8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae90:	1c5a      	adds	r2, r3, #1
 800ae92:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ae96:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d8e8      	bhi.n	800ae70 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800ae9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aea2:	3b01      	subs	r3, #1
 800aea4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aea8:	f107 020c 	add.w	r2, r7, #12
 800aeac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aeb0:	4413      	add	r3, r2
 800aeb2:	781a      	ldrb	r2, [r3, #0]
 800aeb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aeb8:	4611      	mov	r1, r2
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7ff fd93 	bl	800a9e6 <putc_bfd>
		} while (i);
 800aec0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d1ea      	bne.n	800ae9e <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800aec8:	e007      	b.n	800aeda <f_printf+0x406>
 800aeca:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800aece:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aed2:	4611      	mov	r1, r2
 800aed4:	4618      	mov	r0, r3
 800aed6:	f7ff fd86 	bl	800a9e6 <putc_bfd>
 800aeda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aede:	1c5a      	adds	r2, r3, #1
 800aee0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800aee4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d8ee      	bhi.n	800aeca <f_printf+0x3f6>
		c = *fmt++;
 800aeec:	e600      	b.n	800aaf0 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800aeee:	bf00      	nop
 800aef0:	e000      	b.n	800aef4 <f_printf+0x420>
		if (!c) break;
 800aef2:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800aef4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aef8:	4618      	mov	r0, r3
 800aefa:	f7ff fdb1 	bl	800aa60 <putc_flush>
 800aefe:	4603      	mov	r3, r0
}
 800af00:	4618      	mov	r0, r3
 800af02:	379c      	adds	r7, #156	; 0x9c
 800af04:	46bd      	mov	sp, r7
 800af06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800af0a:	b003      	add	sp, #12
 800af0c:	4770      	bx	lr
 800af0e:	bf00      	nop

0800af10 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800af10:	b480      	push	{r7}
 800af12:	b087      	sub	sp, #28
 800af14:	af00      	add	r7, sp, #0
 800af16:	60f8      	str	r0, [r7, #12]
 800af18:	60b9      	str	r1, [r7, #8]
 800af1a:	4613      	mov	r3, r2
 800af1c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800af1e:	2301      	movs	r3, #1
 800af20:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800af22:	2300      	movs	r3, #0
 800af24:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800af26:	4b1f      	ldr	r3, [pc, #124]	; (800afa4 <FATFS_LinkDriverEx+0x94>)
 800af28:	7a5b      	ldrb	r3, [r3, #9]
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d131      	bne.n	800af94 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800af30:	4b1c      	ldr	r3, [pc, #112]	; (800afa4 <FATFS_LinkDriverEx+0x94>)
 800af32:	7a5b      	ldrb	r3, [r3, #9]
 800af34:	b2db      	uxtb	r3, r3
 800af36:	461a      	mov	r2, r3
 800af38:	4b1a      	ldr	r3, [pc, #104]	; (800afa4 <FATFS_LinkDriverEx+0x94>)
 800af3a:	2100      	movs	r1, #0
 800af3c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800af3e:	4b19      	ldr	r3, [pc, #100]	; (800afa4 <FATFS_LinkDriverEx+0x94>)
 800af40:	7a5b      	ldrb	r3, [r3, #9]
 800af42:	b2db      	uxtb	r3, r3
 800af44:	4a17      	ldr	r2, [pc, #92]	; (800afa4 <FATFS_LinkDriverEx+0x94>)
 800af46:	009b      	lsls	r3, r3, #2
 800af48:	4413      	add	r3, r2
 800af4a:	68fa      	ldr	r2, [r7, #12]
 800af4c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800af4e:	4b15      	ldr	r3, [pc, #84]	; (800afa4 <FATFS_LinkDriverEx+0x94>)
 800af50:	7a5b      	ldrb	r3, [r3, #9]
 800af52:	b2db      	uxtb	r3, r3
 800af54:	461a      	mov	r2, r3
 800af56:	4b13      	ldr	r3, [pc, #76]	; (800afa4 <FATFS_LinkDriverEx+0x94>)
 800af58:	4413      	add	r3, r2
 800af5a:	79fa      	ldrb	r2, [r7, #7]
 800af5c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800af5e:	4b11      	ldr	r3, [pc, #68]	; (800afa4 <FATFS_LinkDriverEx+0x94>)
 800af60:	7a5b      	ldrb	r3, [r3, #9]
 800af62:	b2db      	uxtb	r3, r3
 800af64:	1c5a      	adds	r2, r3, #1
 800af66:	b2d1      	uxtb	r1, r2
 800af68:	4a0e      	ldr	r2, [pc, #56]	; (800afa4 <FATFS_LinkDriverEx+0x94>)
 800af6a:	7251      	strb	r1, [r2, #9]
 800af6c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800af6e:	7dbb      	ldrb	r3, [r7, #22]
 800af70:	3330      	adds	r3, #48	; 0x30
 800af72:	b2da      	uxtb	r2, r3
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	3301      	adds	r3, #1
 800af7c:	223a      	movs	r2, #58	; 0x3a
 800af7e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	3302      	adds	r3, #2
 800af84:	222f      	movs	r2, #47	; 0x2f
 800af86:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	3303      	adds	r3, #3
 800af8c:	2200      	movs	r2, #0
 800af8e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800af90:	2300      	movs	r3, #0
 800af92:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800af94:	7dfb      	ldrb	r3, [r7, #23]
}
 800af96:	4618      	mov	r0, r3
 800af98:	371c      	adds	r7, #28
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	200009b4 	.word	0x200009b4

0800afa8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800afb2:	2200      	movs	r2, #0
 800afb4:	6839      	ldr	r1, [r7, #0]
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f7ff ffaa 	bl	800af10 <FATFS_LinkDriverEx>
 800afbc:	4603      	mov	r3, r0
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3708      	adds	r7, #8
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}

0800afc6 <atoi>:
 800afc6:	220a      	movs	r2, #10
 800afc8:	2100      	movs	r1, #0
 800afca:	f000 b9cd 	b.w	800b368 <strtol>
	...

0800afd0 <__errno>:
 800afd0:	4b01      	ldr	r3, [pc, #4]	; (800afd8 <__errno+0x8>)
 800afd2:	6818      	ldr	r0, [r3, #0]
 800afd4:	4770      	bx	lr
 800afd6:	bf00      	nop
 800afd8:	20000074 	.word	0x20000074

0800afdc <__libc_init_array>:
 800afdc:	b570      	push	{r4, r5, r6, lr}
 800afde:	4d0d      	ldr	r5, [pc, #52]	; (800b014 <__libc_init_array+0x38>)
 800afe0:	4c0d      	ldr	r4, [pc, #52]	; (800b018 <__libc_init_array+0x3c>)
 800afe2:	1b64      	subs	r4, r4, r5
 800afe4:	10a4      	asrs	r4, r4, #2
 800afe6:	2600      	movs	r6, #0
 800afe8:	42a6      	cmp	r6, r4
 800afea:	d109      	bne.n	800b000 <__libc_init_array+0x24>
 800afec:	4d0b      	ldr	r5, [pc, #44]	; (800b01c <__libc_init_array+0x40>)
 800afee:	4c0c      	ldr	r4, [pc, #48]	; (800b020 <__libc_init_array+0x44>)
 800aff0:	f000 fd22 	bl	800ba38 <_init>
 800aff4:	1b64      	subs	r4, r4, r5
 800aff6:	10a4      	asrs	r4, r4, #2
 800aff8:	2600      	movs	r6, #0
 800affa:	42a6      	cmp	r6, r4
 800affc:	d105      	bne.n	800b00a <__libc_init_array+0x2e>
 800affe:	bd70      	pop	{r4, r5, r6, pc}
 800b000:	f855 3b04 	ldr.w	r3, [r5], #4
 800b004:	4798      	blx	r3
 800b006:	3601      	adds	r6, #1
 800b008:	e7ee      	b.n	800afe8 <__libc_init_array+0xc>
 800b00a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b00e:	4798      	blx	r3
 800b010:	3601      	adds	r6, #1
 800b012:	e7f2      	b.n	800affa <__libc_init_array+0x1e>
 800b014:	0800d7dc 	.word	0x0800d7dc
 800b018:	0800d7dc 	.word	0x0800d7dc
 800b01c:	0800d7dc 	.word	0x0800d7dc
 800b020:	0800d7e0 	.word	0x0800d7e0

0800b024 <malloc>:
 800b024:	4b02      	ldr	r3, [pc, #8]	; (800b030 <malloc+0xc>)
 800b026:	4601      	mov	r1, r0
 800b028:	6818      	ldr	r0, [r3, #0]
 800b02a:	f000 b877 	b.w	800b11c <_malloc_r>
 800b02e:	bf00      	nop
 800b030:	20000074 	.word	0x20000074

0800b034 <memset>:
 800b034:	4402      	add	r2, r0
 800b036:	4603      	mov	r3, r0
 800b038:	4293      	cmp	r3, r2
 800b03a:	d100      	bne.n	800b03e <memset+0xa>
 800b03c:	4770      	bx	lr
 800b03e:	f803 1b01 	strb.w	r1, [r3], #1
 800b042:	e7f9      	b.n	800b038 <memset+0x4>

0800b044 <_free_r>:
 800b044:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b046:	2900      	cmp	r1, #0
 800b048:	d044      	beq.n	800b0d4 <_free_r+0x90>
 800b04a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b04e:	9001      	str	r0, [sp, #4]
 800b050:	2b00      	cmp	r3, #0
 800b052:	f1a1 0404 	sub.w	r4, r1, #4
 800b056:	bfb8      	it	lt
 800b058:	18e4      	addlt	r4, r4, r3
 800b05a:	f000 f98f 	bl	800b37c <__malloc_lock>
 800b05e:	4a1e      	ldr	r2, [pc, #120]	; (800b0d8 <_free_r+0x94>)
 800b060:	9801      	ldr	r0, [sp, #4]
 800b062:	6813      	ldr	r3, [r2, #0]
 800b064:	b933      	cbnz	r3, 800b074 <_free_r+0x30>
 800b066:	6063      	str	r3, [r4, #4]
 800b068:	6014      	str	r4, [r2, #0]
 800b06a:	b003      	add	sp, #12
 800b06c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b070:	f000 b98a 	b.w	800b388 <__malloc_unlock>
 800b074:	42a3      	cmp	r3, r4
 800b076:	d908      	bls.n	800b08a <_free_r+0x46>
 800b078:	6825      	ldr	r5, [r4, #0]
 800b07a:	1961      	adds	r1, r4, r5
 800b07c:	428b      	cmp	r3, r1
 800b07e:	bf01      	itttt	eq
 800b080:	6819      	ldreq	r1, [r3, #0]
 800b082:	685b      	ldreq	r3, [r3, #4]
 800b084:	1949      	addeq	r1, r1, r5
 800b086:	6021      	streq	r1, [r4, #0]
 800b088:	e7ed      	b.n	800b066 <_free_r+0x22>
 800b08a:	461a      	mov	r2, r3
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	b10b      	cbz	r3, 800b094 <_free_r+0x50>
 800b090:	42a3      	cmp	r3, r4
 800b092:	d9fa      	bls.n	800b08a <_free_r+0x46>
 800b094:	6811      	ldr	r1, [r2, #0]
 800b096:	1855      	adds	r5, r2, r1
 800b098:	42a5      	cmp	r5, r4
 800b09a:	d10b      	bne.n	800b0b4 <_free_r+0x70>
 800b09c:	6824      	ldr	r4, [r4, #0]
 800b09e:	4421      	add	r1, r4
 800b0a0:	1854      	adds	r4, r2, r1
 800b0a2:	42a3      	cmp	r3, r4
 800b0a4:	6011      	str	r1, [r2, #0]
 800b0a6:	d1e0      	bne.n	800b06a <_free_r+0x26>
 800b0a8:	681c      	ldr	r4, [r3, #0]
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	6053      	str	r3, [r2, #4]
 800b0ae:	4421      	add	r1, r4
 800b0b0:	6011      	str	r1, [r2, #0]
 800b0b2:	e7da      	b.n	800b06a <_free_r+0x26>
 800b0b4:	d902      	bls.n	800b0bc <_free_r+0x78>
 800b0b6:	230c      	movs	r3, #12
 800b0b8:	6003      	str	r3, [r0, #0]
 800b0ba:	e7d6      	b.n	800b06a <_free_r+0x26>
 800b0bc:	6825      	ldr	r5, [r4, #0]
 800b0be:	1961      	adds	r1, r4, r5
 800b0c0:	428b      	cmp	r3, r1
 800b0c2:	bf04      	itt	eq
 800b0c4:	6819      	ldreq	r1, [r3, #0]
 800b0c6:	685b      	ldreq	r3, [r3, #4]
 800b0c8:	6063      	str	r3, [r4, #4]
 800b0ca:	bf04      	itt	eq
 800b0cc:	1949      	addeq	r1, r1, r5
 800b0ce:	6021      	streq	r1, [r4, #0]
 800b0d0:	6054      	str	r4, [r2, #4]
 800b0d2:	e7ca      	b.n	800b06a <_free_r+0x26>
 800b0d4:	b003      	add	sp, #12
 800b0d6:	bd30      	pop	{r4, r5, pc}
 800b0d8:	200009c0 	.word	0x200009c0

0800b0dc <sbrk_aligned>:
 800b0dc:	b570      	push	{r4, r5, r6, lr}
 800b0de:	4e0e      	ldr	r6, [pc, #56]	; (800b118 <sbrk_aligned+0x3c>)
 800b0e0:	460c      	mov	r4, r1
 800b0e2:	6831      	ldr	r1, [r6, #0]
 800b0e4:	4605      	mov	r5, r0
 800b0e6:	b911      	cbnz	r1, 800b0ee <sbrk_aligned+0x12>
 800b0e8:	f000 f88c 	bl	800b204 <_sbrk_r>
 800b0ec:	6030      	str	r0, [r6, #0]
 800b0ee:	4621      	mov	r1, r4
 800b0f0:	4628      	mov	r0, r5
 800b0f2:	f000 f887 	bl	800b204 <_sbrk_r>
 800b0f6:	1c43      	adds	r3, r0, #1
 800b0f8:	d00a      	beq.n	800b110 <sbrk_aligned+0x34>
 800b0fa:	1cc4      	adds	r4, r0, #3
 800b0fc:	f024 0403 	bic.w	r4, r4, #3
 800b100:	42a0      	cmp	r0, r4
 800b102:	d007      	beq.n	800b114 <sbrk_aligned+0x38>
 800b104:	1a21      	subs	r1, r4, r0
 800b106:	4628      	mov	r0, r5
 800b108:	f000 f87c 	bl	800b204 <_sbrk_r>
 800b10c:	3001      	adds	r0, #1
 800b10e:	d101      	bne.n	800b114 <sbrk_aligned+0x38>
 800b110:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b114:	4620      	mov	r0, r4
 800b116:	bd70      	pop	{r4, r5, r6, pc}
 800b118:	200009c4 	.word	0x200009c4

0800b11c <_malloc_r>:
 800b11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b120:	1ccd      	adds	r5, r1, #3
 800b122:	f025 0503 	bic.w	r5, r5, #3
 800b126:	3508      	adds	r5, #8
 800b128:	2d0c      	cmp	r5, #12
 800b12a:	bf38      	it	cc
 800b12c:	250c      	movcc	r5, #12
 800b12e:	2d00      	cmp	r5, #0
 800b130:	4607      	mov	r7, r0
 800b132:	db01      	blt.n	800b138 <_malloc_r+0x1c>
 800b134:	42a9      	cmp	r1, r5
 800b136:	d905      	bls.n	800b144 <_malloc_r+0x28>
 800b138:	230c      	movs	r3, #12
 800b13a:	603b      	str	r3, [r7, #0]
 800b13c:	2600      	movs	r6, #0
 800b13e:	4630      	mov	r0, r6
 800b140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b144:	4e2e      	ldr	r6, [pc, #184]	; (800b200 <_malloc_r+0xe4>)
 800b146:	f000 f919 	bl	800b37c <__malloc_lock>
 800b14a:	6833      	ldr	r3, [r6, #0]
 800b14c:	461c      	mov	r4, r3
 800b14e:	bb34      	cbnz	r4, 800b19e <_malloc_r+0x82>
 800b150:	4629      	mov	r1, r5
 800b152:	4638      	mov	r0, r7
 800b154:	f7ff ffc2 	bl	800b0dc <sbrk_aligned>
 800b158:	1c43      	adds	r3, r0, #1
 800b15a:	4604      	mov	r4, r0
 800b15c:	d14d      	bne.n	800b1fa <_malloc_r+0xde>
 800b15e:	6834      	ldr	r4, [r6, #0]
 800b160:	4626      	mov	r6, r4
 800b162:	2e00      	cmp	r6, #0
 800b164:	d140      	bne.n	800b1e8 <_malloc_r+0xcc>
 800b166:	6823      	ldr	r3, [r4, #0]
 800b168:	4631      	mov	r1, r6
 800b16a:	4638      	mov	r0, r7
 800b16c:	eb04 0803 	add.w	r8, r4, r3
 800b170:	f000 f848 	bl	800b204 <_sbrk_r>
 800b174:	4580      	cmp	r8, r0
 800b176:	d13a      	bne.n	800b1ee <_malloc_r+0xd2>
 800b178:	6821      	ldr	r1, [r4, #0]
 800b17a:	3503      	adds	r5, #3
 800b17c:	1a6d      	subs	r5, r5, r1
 800b17e:	f025 0503 	bic.w	r5, r5, #3
 800b182:	3508      	adds	r5, #8
 800b184:	2d0c      	cmp	r5, #12
 800b186:	bf38      	it	cc
 800b188:	250c      	movcc	r5, #12
 800b18a:	4629      	mov	r1, r5
 800b18c:	4638      	mov	r0, r7
 800b18e:	f7ff ffa5 	bl	800b0dc <sbrk_aligned>
 800b192:	3001      	adds	r0, #1
 800b194:	d02b      	beq.n	800b1ee <_malloc_r+0xd2>
 800b196:	6823      	ldr	r3, [r4, #0]
 800b198:	442b      	add	r3, r5
 800b19a:	6023      	str	r3, [r4, #0]
 800b19c:	e00e      	b.n	800b1bc <_malloc_r+0xa0>
 800b19e:	6822      	ldr	r2, [r4, #0]
 800b1a0:	1b52      	subs	r2, r2, r5
 800b1a2:	d41e      	bmi.n	800b1e2 <_malloc_r+0xc6>
 800b1a4:	2a0b      	cmp	r2, #11
 800b1a6:	d916      	bls.n	800b1d6 <_malloc_r+0xba>
 800b1a8:	1961      	adds	r1, r4, r5
 800b1aa:	42a3      	cmp	r3, r4
 800b1ac:	6025      	str	r5, [r4, #0]
 800b1ae:	bf18      	it	ne
 800b1b0:	6059      	strne	r1, [r3, #4]
 800b1b2:	6863      	ldr	r3, [r4, #4]
 800b1b4:	bf08      	it	eq
 800b1b6:	6031      	streq	r1, [r6, #0]
 800b1b8:	5162      	str	r2, [r4, r5]
 800b1ba:	604b      	str	r3, [r1, #4]
 800b1bc:	4638      	mov	r0, r7
 800b1be:	f104 060b 	add.w	r6, r4, #11
 800b1c2:	f000 f8e1 	bl	800b388 <__malloc_unlock>
 800b1c6:	f026 0607 	bic.w	r6, r6, #7
 800b1ca:	1d23      	adds	r3, r4, #4
 800b1cc:	1af2      	subs	r2, r6, r3
 800b1ce:	d0b6      	beq.n	800b13e <_malloc_r+0x22>
 800b1d0:	1b9b      	subs	r3, r3, r6
 800b1d2:	50a3      	str	r3, [r4, r2]
 800b1d4:	e7b3      	b.n	800b13e <_malloc_r+0x22>
 800b1d6:	6862      	ldr	r2, [r4, #4]
 800b1d8:	42a3      	cmp	r3, r4
 800b1da:	bf0c      	ite	eq
 800b1dc:	6032      	streq	r2, [r6, #0]
 800b1de:	605a      	strne	r2, [r3, #4]
 800b1e0:	e7ec      	b.n	800b1bc <_malloc_r+0xa0>
 800b1e2:	4623      	mov	r3, r4
 800b1e4:	6864      	ldr	r4, [r4, #4]
 800b1e6:	e7b2      	b.n	800b14e <_malloc_r+0x32>
 800b1e8:	4634      	mov	r4, r6
 800b1ea:	6876      	ldr	r6, [r6, #4]
 800b1ec:	e7b9      	b.n	800b162 <_malloc_r+0x46>
 800b1ee:	230c      	movs	r3, #12
 800b1f0:	603b      	str	r3, [r7, #0]
 800b1f2:	4638      	mov	r0, r7
 800b1f4:	f000 f8c8 	bl	800b388 <__malloc_unlock>
 800b1f8:	e7a1      	b.n	800b13e <_malloc_r+0x22>
 800b1fa:	6025      	str	r5, [r4, #0]
 800b1fc:	e7de      	b.n	800b1bc <_malloc_r+0xa0>
 800b1fe:	bf00      	nop
 800b200:	200009c0 	.word	0x200009c0

0800b204 <_sbrk_r>:
 800b204:	b538      	push	{r3, r4, r5, lr}
 800b206:	4d06      	ldr	r5, [pc, #24]	; (800b220 <_sbrk_r+0x1c>)
 800b208:	2300      	movs	r3, #0
 800b20a:	4604      	mov	r4, r0
 800b20c:	4608      	mov	r0, r1
 800b20e:	602b      	str	r3, [r5, #0]
 800b210:	f7f6 fc16 	bl	8001a40 <_sbrk>
 800b214:	1c43      	adds	r3, r0, #1
 800b216:	d102      	bne.n	800b21e <_sbrk_r+0x1a>
 800b218:	682b      	ldr	r3, [r5, #0]
 800b21a:	b103      	cbz	r3, 800b21e <_sbrk_r+0x1a>
 800b21c:	6023      	str	r3, [r4, #0]
 800b21e:	bd38      	pop	{r3, r4, r5, pc}
 800b220:	200009c8 	.word	0x200009c8

0800b224 <siprintf>:
 800b224:	b40e      	push	{r1, r2, r3}
 800b226:	b500      	push	{lr}
 800b228:	b09c      	sub	sp, #112	; 0x70
 800b22a:	ab1d      	add	r3, sp, #116	; 0x74
 800b22c:	9002      	str	r0, [sp, #8]
 800b22e:	9006      	str	r0, [sp, #24]
 800b230:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b234:	4809      	ldr	r0, [pc, #36]	; (800b25c <siprintf+0x38>)
 800b236:	9107      	str	r1, [sp, #28]
 800b238:	9104      	str	r1, [sp, #16]
 800b23a:	4909      	ldr	r1, [pc, #36]	; (800b260 <siprintf+0x3c>)
 800b23c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b240:	9105      	str	r1, [sp, #20]
 800b242:	6800      	ldr	r0, [r0, #0]
 800b244:	9301      	str	r3, [sp, #4]
 800b246:	a902      	add	r1, sp, #8
 800b248:	f000 f900 	bl	800b44c <_svfiprintf_r>
 800b24c:	9b02      	ldr	r3, [sp, #8]
 800b24e:	2200      	movs	r2, #0
 800b250:	701a      	strb	r2, [r3, #0]
 800b252:	b01c      	add	sp, #112	; 0x70
 800b254:	f85d eb04 	ldr.w	lr, [sp], #4
 800b258:	b003      	add	sp, #12
 800b25a:	4770      	bx	lr
 800b25c:	20000074 	.word	0x20000074
 800b260:	ffff0208 	.word	0xffff0208

0800b264 <_strtol_l.constprop.0>:
 800b264:	2b01      	cmp	r3, #1
 800b266:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b26a:	d001      	beq.n	800b270 <_strtol_l.constprop.0+0xc>
 800b26c:	2b24      	cmp	r3, #36	; 0x24
 800b26e:	d906      	bls.n	800b27e <_strtol_l.constprop.0+0x1a>
 800b270:	f7ff feae 	bl	800afd0 <__errno>
 800b274:	2316      	movs	r3, #22
 800b276:	6003      	str	r3, [r0, #0]
 800b278:	2000      	movs	r0, #0
 800b27a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b27e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b364 <_strtol_l.constprop.0+0x100>
 800b282:	460d      	mov	r5, r1
 800b284:	462e      	mov	r6, r5
 800b286:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b28a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b28e:	f017 0708 	ands.w	r7, r7, #8
 800b292:	d1f7      	bne.n	800b284 <_strtol_l.constprop.0+0x20>
 800b294:	2c2d      	cmp	r4, #45	; 0x2d
 800b296:	d132      	bne.n	800b2fe <_strtol_l.constprop.0+0x9a>
 800b298:	782c      	ldrb	r4, [r5, #0]
 800b29a:	2701      	movs	r7, #1
 800b29c:	1cb5      	adds	r5, r6, #2
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d05b      	beq.n	800b35a <_strtol_l.constprop.0+0xf6>
 800b2a2:	2b10      	cmp	r3, #16
 800b2a4:	d109      	bne.n	800b2ba <_strtol_l.constprop.0+0x56>
 800b2a6:	2c30      	cmp	r4, #48	; 0x30
 800b2a8:	d107      	bne.n	800b2ba <_strtol_l.constprop.0+0x56>
 800b2aa:	782c      	ldrb	r4, [r5, #0]
 800b2ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b2b0:	2c58      	cmp	r4, #88	; 0x58
 800b2b2:	d14d      	bne.n	800b350 <_strtol_l.constprop.0+0xec>
 800b2b4:	786c      	ldrb	r4, [r5, #1]
 800b2b6:	2310      	movs	r3, #16
 800b2b8:	3502      	adds	r5, #2
 800b2ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b2be:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b2c2:	f04f 0c00 	mov.w	ip, #0
 800b2c6:	fbb8 f9f3 	udiv	r9, r8, r3
 800b2ca:	4666      	mov	r6, ip
 800b2cc:	fb03 8a19 	mls	sl, r3, r9, r8
 800b2d0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b2d4:	f1be 0f09 	cmp.w	lr, #9
 800b2d8:	d816      	bhi.n	800b308 <_strtol_l.constprop.0+0xa4>
 800b2da:	4674      	mov	r4, lr
 800b2dc:	42a3      	cmp	r3, r4
 800b2de:	dd24      	ble.n	800b32a <_strtol_l.constprop.0+0xc6>
 800b2e0:	f1bc 0f00 	cmp.w	ip, #0
 800b2e4:	db1e      	blt.n	800b324 <_strtol_l.constprop.0+0xc0>
 800b2e6:	45b1      	cmp	r9, r6
 800b2e8:	d31c      	bcc.n	800b324 <_strtol_l.constprop.0+0xc0>
 800b2ea:	d101      	bne.n	800b2f0 <_strtol_l.constprop.0+0x8c>
 800b2ec:	45a2      	cmp	sl, r4
 800b2ee:	db19      	blt.n	800b324 <_strtol_l.constprop.0+0xc0>
 800b2f0:	fb06 4603 	mla	r6, r6, r3, r4
 800b2f4:	f04f 0c01 	mov.w	ip, #1
 800b2f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2fc:	e7e8      	b.n	800b2d0 <_strtol_l.constprop.0+0x6c>
 800b2fe:	2c2b      	cmp	r4, #43	; 0x2b
 800b300:	bf04      	itt	eq
 800b302:	782c      	ldrbeq	r4, [r5, #0]
 800b304:	1cb5      	addeq	r5, r6, #2
 800b306:	e7ca      	b.n	800b29e <_strtol_l.constprop.0+0x3a>
 800b308:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b30c:	f1be 0f19 	cmp.w	lr, #25
 800b310:	d801      	bhi.n	800b316 <_strtol_l.constprop.0+0xb2>
 800b312:	3c37      	subs	r4, #55	; 0x37
 800b314:	e7e2      	b.n	800b2dc <_strtol_l.constprop.0+0x78>
 800b316:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b31a:	f1be 0f19 	cmp.w	lr, #25
 800b31e:	d804      	bhi.n	800b32a <_strtol_l.constprop.0+0xc6>
 800b320:	3c57      	subs	r4, #87	; 0x57
 800b322:	e7db      	b.n	800b2dc <_strtol_l.constprop.0+0x78>
 800b324:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800b328:	e7e6      	b.n	800b2f8 <_strtol_l.constprop.0+0x94>
 800b32a:	f1bc 0f00 	cmp.w	ip, #0
 800b32e:	da05      	bge.n	800b33c <_strtol_l.constprop.0+0xd8>
 800b330:	2322      	movs	r3, #34	; 0x22
 800b332:	6003      	str	r3, [r0, #0]
 800b334:	4646      	mov	r6, r8
 800b336:	b942      	cbnz	r2, 800b34a <_strtol_l.constprop.0+0xe6>
 800b338:	4630      	mov	r0, r6
 800b33a:	e79e      	b.n	800b27a <_strtol_l.constprop.0+0x16>
 800b33c:	b107      	cbz	r7, 800b340 <_strtol_l.constprop.0+0xdc>
 800b33e:	4276      	negs	r6, r6
 800b340:	2a00      	cmp	r2, #0
 800b342:	d0f9      	beq.n	800b338 <_strtol_l.constprop.0+0xd4>
 800b344:	f1bc 0f00 	cmp.w	ip, #0
 800b348:	d000      	beq.n	800b34c <_strtol_l.constprop.0+0xe8>
 800b34a:	1e69      	subs	r1, r5, #1
 800b34c:	6011      	str	r1, [r2, #0]
 800b34e:	e7f3      	b.n	800b338 <_strtol_l.constprop.0+0xd4>
 800b350:	2430      	movs	r4, #48	; 0x30
 800b352:	2b00      	cmp	r3, #0
 800b354:	d1b1      	bne.n	800b2ba <_strtol_l.constprop.0+0x56>
 800b356:	2308      	movs	r3, #8
 800b358:	e7af      	b.n	800b2ba <_strtol_l.constprop.0+0x56>
 800b35a:	2c30      	cmp	r4, #48	; 0x30
 800b35c:	d0a5      	beq.n	800b2aa <_strtol_l.constprop.0+0x46>
 800b35e:	230a      	movs	r3, #10
 800b360:	e7ab      	b.n	800b2ba <_strtol_l.constprop.0+0x56>
 800b362:	bf00      	nop
 800b364:	0800d6a1 	.word	0x0800d6a1

0800b368 <strtol>:
 800b368:	4613      	mov	r3, r2
 800b36a:	460a      	mov	r2, r1
 800b36c:	4601      	mov	r1, r0
 800b36e:	4802      	ldr	r0, [pc, #8]	; (800b378 <strtol+0x10>)
 800b370:	6800      	ldr	r0, [r0, #0]
 800b372:	f7ff bf77 	b.w	800b264 <_strtol_l.constprop.0>
 800b376:	bf00      	nop
 800b378:	20000074 	.word	0x20000074

0800b37c <__malloc_lock>:
 800b37c:	4801      	ldr	r0, [pc, #4]	; (800b384 <__malloc_lock+0x8>)
 800b37e:	f000 baf9 	b.w	800b974 <__retarget_lock_acquire_recursive>
 800b382:	bf00      	nop
 800b384:	200009cc 	.word	0x200009cc

0800b388 <__malloc_unlock>:
 800b388:	4801      	ldr	r0, [pc, #4]	; (800b390 <__malloc_unlock+0x8>)
 800b38a:	f000 baf4 	b.w	800b976 <__retarget_lock_release_recursive>
 800b38e:	bf00      	nop
 800b390:	200009cc 	.word	0x200009cc

0800b394 <__ssputs_r>:
 800b394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b398:	688e      	ldr	r6, [r1, #8]
 800b39a:	429e      	cmp	r6, r3
 800b39c:	4682      	mov	sl, r0
 800b39e:	460c      	mov	r4, r1
 800b3a0:	4690      	mov	r8, r2
 800b3a2:	461f      	mov	r7, r3
 800b3a4:	d838      	bhi.n	800b418 <__ssputs_r+0x84>
 800b3a6:	898a      	ldrh	r2, [r1, #12]
 800b3a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b3ac:	d032      	beq.n	800b414 <__ssputs_r+0x80>
 800b3ae:	6825      	ldr	r5, [r4, #0]
 800b3b0:	6909      	ldr	r1, [r1, #16]
 800b3b2:	eba5 0901 	sub.w	r9, r5, r1
 800b3b6:	6965      	ldr	r5, [r4, #20]
 800b3b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	444b      	add	r3, r9
 800b3c4:	106d      	asrs	r5, r5, #1
 800b3c6:	429d      	cmp	r5, r3
 800b3c8:	bf38      	it	cc
 800b3ca:	461d      	movcc	r5, r3
 800b3cc:	0553      	lsls	r3, r2, #21
 800b3ce:	d531      	bpl.n	800b434 <__ssputs_r+0xa0>
 800b3d0:	4629      	mov	r1, r5
 800b3d2:	f7ff fea3 	bl	800b11c <_malloc_r>
 800b3d6:	4606      	mov	r6, r0
 800b3d8:	b950      	cbnz	r0, 800b3f0 <__ssputs_r+0x5c>
 800b3da:	230c      	movs	r3, #12
 800b3dc:	f8ca 3000 	str.w	r3, [sl]
 800b3e0:	89a3      	ldrh	r3, [r4, #12]
 800b3e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3e6:	81a3      	strh	r3, [r4, #12]
 800b3e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3f0:	6921      	ldr	r1, [r4, #16]
 800b3f2:	464a      	mov	r2, r9
 800b3f4:	f000 fac0 	bl	800b978 <memcpy>
 800b3f8:	89a3      	ldrh	r3, [r4, #12]
 800b3fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b402:	81a3      	strh	r3, [r4, #12]
 800b404:	6126      	str	r6, [r4, #16]
 800b406:	6165      	str	r5, [r4, #20]
 800b408:	444e      	add	r6, r9
 800b40a:	eba5 0509 	sub.w	r5, r5, r9
 800b40e:	6026      	str	r6, [r4, #0]
 800b410:	60a5      	str	r5, [r4, #8]
 800b412:	463e      	mov	r6, r7
 800b414:	42be      	cmp	r6, r7
 800b416:	d900      	bls.n	800b41a <__ssputs_r+0x86>
 800b418:	463e      	mov	r6, r7
 800b41a:	6820      	ldr	r0, [r4, #0]
 800b41c:	4632      	mov	r2, r6
 800b41e:	4641      	mov	r1, r8
 800b420:	f000 fab8 	bl	800b994 <memmove>
 800b424:	68a3      	ldr	r3, [r4, #8]
 800b426:	1b9b      	subs	r3, r3, r6
 800b428:	60a3      	str	r3, [r4, #8]
 800b42a:	6823      	ldr	r3, [r4, #0]
 800b42c:	4433      	add	r3, r6
 800b42e:	6023      	str	r3, [r4, #0]
 800b430:	2000      	movs	r0, #0
 800b432:	e7db      	b.n	800b3ec <__ssputs_r+0x58>
 800b434:	462a      	mov	r2, r5
 800b436:	f000 fac7 	bl	800b9c8 <_realloc_r>
 800b43a:	4606      	mov	r6, r0
 800b43c:	2800      	cmp	r0, #0
 800b43e:	d1e1      	bne.n	800b404 <__ssputs_r+0x70>
 800b440:	6921      	ldr	r1, [r4, #16]
 800b442:	4650      	mov	r0, sl
 800b444:	f7ff fdfe 	bl	800b044 <_free_r>
 800b448:	e7c7      	b.n	800b3da <__ssputs_r+0x46>
	...

0800b44c <_svfiprintf_r>:
 800b44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b450:	4698      	mov	r8, r3
 800b452:	898b      	ldrh	r3, [r1, #12]
 800b454:	061b      	lsls	r3, r3, #24
 800b456:	b09d      	sub	sp, #116	; 0x74
 800b458:	4607      	mov	r7, r0
 800b45a:	460d      	mov	r5, r1
 800b45c:	4614      	mov	r4, r2
 800b45e:	d50e      	bpl.n	800b47e <_svfiprintf_r+0x32>
 800b460:	690b      	ldr	r3, [r1, #16]
 800b462:	b963      	cbnz	r3, 800b47e <_svfiprintf_r+0x32>
 800b464:	2140      	movs	r1, #64	; 0x40
 800b466:	f7ff fe59 	bl	800b11c <_malloc_r>
 800b46a:	6028      	str	r0, [r5, #0]
 800b46c:	6128      	str	r0, [r5, #16]
 800b46e:	b920      	cbnz	r0, 800b47a <_svfiprintf_r+0x2e>
 800b470:	230c      	movs	r3, #12
 800b472:	603b      	str	r3, [r7, #0]
 800b474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b478:	e0d1      	b.n	800b61e <_svfiprintf_r+0x1d2>
 800b47a:	2340      	movs	r3, #64	; 0x40
 800b47c:	616b      	str	r3, [r5, #20]
 800b47e:	2300      	movs	r3, #0
 800b480:	9309      	str	r3, [sp, #36]	; 0x24
 800b482:	2320      	movs	r3, #32
 800b484:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b488:	f8cd 800c 	str.w	r8, [sp, #12]
 800b48c:	2330      	movs	r3, #48	; 0x30
 800b48e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b638 <_svfiprintf_r+0x1ec>
 800b492:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b496:	f04f 0901 	mov.w	r9, #1
 800b49a:	4623      	mov	r3, r4
 800b49c:	469a      	mov	sl, r3
 800b49e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4a2:	b10a      	cbz	r2, 800b4a8 <_svfiprintf_r+0x5c>
 800b4a4:	2a25      	cmp	r2, #37	; 0x25
 800b4a6:	d1f9      	bne.n	800b49c <_svfiprintf_r+0x50>
 800b4a8:	ebba 0b04 	subs.w	fp, sl, r4
 800b4ac:	d00b      	beq.n	800b4c6 <_svfiprintf_r+0x7a>
 800b4ae:	465b      	mov	r3, fp
 800b4b0:	4622      	mov	r2, r4
 800b4b2:	4629      	mov	r1, r5
 800b4b4:	4638      	mov	r0, r7
 800b4b6:	f7ff ff6d 	bl	800b394 <__ssputs_r>
 800b4ba:	3001      	adds	r0, #1
 800b4bc:	f000 80aa 	beq.w	800b614 <_svfiprintf_r+0x1c8>
 800b4c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4c2:	445a      	add	r2, fp
 800b4c4:	9209      	str	r2, [sp, #36]	; 0x24
 800b4c6:	f89a 3000 	ldrb.w	r3, [sl]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	f000 80a2 	beq.w	800b614 <_svfiprintf_r+0x1c8>
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4da:	f10a 0a01 	add.w	sl, sl, #1
 800b4de:	9304      	str	r3, [sp, #16]
 800b4e0:	9307      	str	r3, [sp, #28]
 800b4e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4e6:	931a      	str	r3, [sp, #104]	; 0x68
 800b4e8:	4654      	mov	r4, sl
 800b4ea:	2205      	movs	r2, #5
 800b4ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4f0:	4851      	ldr	r0, [pc, #324]	; (800b638 <_svfiprintf_r+0x1ec>)
 800b4f2:	f7f4 fe8d 	bl	8000210 <memchr>
 800b4f6:	9a04      	ldr	r2, [sp, #16]
 800b4f8:	b9d8      	cbnz	r0, 800b532 <_svfiprintf_r+0xe6>
 800b4fa:	06d0      	lsls	r0, r2, #27
 800b4fc:	bf44      	itt	mi
 800b4fe:	2320      	movmi	r3, #32
 800b500:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b504:	0711      	lsls	r1, r2, #28
 800b506:	bf44      	itt	mi
 800b508:	232b      	movmi	r3, #43	; 0x2b
 800b50a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b50e:	f89a 3000 	ldrb.w	r3, [sl]
 800b512:	2b2a      	cmp	r3, #42	; 0x2a
 800b514:	d015      	beq.n	800b542 <_svfiprintf_r+0xf6>
 800b516:	9a07      	ldr	r2, [sp, #28]
 800b518:	4654      	mov	r4, sl
 800b51a:	2000      	movs	r0, #0
 800b51c:	f04f 0c0a 	mov.w	ip, #10
 800b520:	4621      	mov	r1, r4
 800b522:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b526:	3b30      	subs	r3, #48	; 0x30
 800b528:	2b09      	cmp	r3, #9
 800b52a:	d94e      	bls.n	800b5ca <_svfiprintf_r+0x17e>
 800b52c:	b1b0      	cbz	r0, 800b55c <_svfiprintf_r+0x110>
 800b52e:	9207      	str	r2, [sp, #28]
 800b530:	e014      	b.n	800b55c <_svfiprintf_r+0x110>
 800b532:	eba0 0308 	sub.w	r3, r0, r8
 800b536:	fa09 f303 	lsl.w	r3, r9, r3
 800b53a:	4313      	orrs	r3, r2
 800b53c:	9304      	str	r3, [sp, #16]
 800b53e:	46a2      	mov	sl, r4
 800b540:	e7d2      	b.n	800b4e8 <_svfiprintf_r+0x9c>
 800b542:	9b03      	ldr	r3, [sp, #12]
 800b544:	1d19      	adds	r1, r3, #4
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	9103      	str	r1, [sp, #12]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	bfbb      	ittet	lt
 800b54e:	425b      	neglt	r3, r3
 800b550:	f042 0202 	orrlt.w	r2, r2, #2
 800b554:	9307      	strge	r3, [sp, #28]
 800b556:	9307      	strlt	r3, [sp, #28]
 800b558:	bfb8      	it	lt
 800b55a:	9204      	strlt	r2, [sp, #16]
 800b55c:	7823      	ldrb	r3, [r4, #0]
 800b55e:	2b2e      	cmp	r3, #46	; 0x2e
 800b560:	d10c      	bne.n	800b57c <_svfiprintf_r+0x130>
 800b562:	7863      	ldrb	r3, [r4, #1]
 800b564:	2b2a      	cmp	r3, #42	; 0x2a
 800b566:	d135      	bne.n	800b5d4 <_svfiprintf_r+0x188>
 800b568:	9b03      	ldr	r3, [sp, #12]
 800b56a:	1d1a      	adds	r2, r3, #4
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	9203      	str	r2, [sp, #12]
 800b570:	2b00      	cmp	r3, #0
 800b572:	bfb8      	it	lt
 800b574:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b578:	3402      	adds	r4, #2
 800b57a:	9305      	str	r3, [sp, #20]
 800b57c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b648 <_svfiprintf_r+0x1fc>
 800b580:	7821      	ldrb	r1, [r4, #0]
 800b582:	2203      	movs	r2, #3
 800b584:	4650      	mov	r0, sl
 800b586:	f7f4 fe43 	bl	8000210 <memchr>
 800b58a:	b140      	cbz	r0, 800b59e <_svfiprintf_r+0x152>
 800b58c:	2340      	movs	r3, #64	; 0x40
 800b58e:	eba0 000a 	sub.w	r0, r0, sl
 800b592:	fa03 f000 	lsl.w	r0, r3, r0
 800b596:	9b04      	ldr	r3, [sp, #16]
 800b598:	4303      	orrs	r3, r0
 800b59a:	3401      	adds	r4, #1
 800b59c:	9304      	str	r3, [sp, #16]
 800b59e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5a2:	4826      	ldr	r0, [pc, #152]	; (800b63c <_svfiprintf_r+0x1f0>)
 800b5a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5a8:	2206      	movs	r2, #6
 800b5aa:	f7f4 fe31 	bl	8000210 <memchr>
 800b5ae:	2800      	cmp	r0, #0
 800b5b0:	d038      	beq.n	800b624 <_svfiprintf_r+0x1d8>
 800b5b2:	4b23      	ldr	r3, [pc, #140]	; (800b640 <_svfiprintf_r+0x1f4>)
 800b5b4:	bb1b      	cbnz	r3, 800b5fe <_svfiprintf_r+0x1b2>
 800b5b6:	9b03      	ldr	r3, [sp, #12]
 800b5b8:	3307      	adds	r3, #7
 800b5ba:	f023 0307 	bic.w	r3, r3, #7
 800b5be:	3308      	adds	r3, #8
 800b5c0:	9303      	str	r3, [sp, #12]
 800b5c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5c4:	4433      	add	r3, r6
 800b5c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b5c8:	e767      	b.n	800b49a <_svfiprintf_r+0x4e>
 800b5ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5ce:	460c      	mov	r4, r1
 800b5d0:	2001      	movs	r0, #1
 800b5d2:	e7a5      	b.n	800b520 <_svfiprintf_r+0xd4>
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	3401      	adds	r4, #1
 800b5d8:	9305      	str	r3, [sp, #20]
 800b5da:	4619      	mov	r1, r3
 800b5dc:	f04f 0c0a 	mov.w	ip, #10
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5e6:	3a30      	subs	r2, #48	; 0x30
 800b5e8:	2a09      	cmp	r2, #9
 800b5ea:	d903      	bls.n	800b5f4 <_svfiprintf_r+0x1a8>
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d0c5      	beq.n	800b57c <_svfiprintf_r+0x130>
 800b5f0:	9105      	str	r1, [sp, #20]
 800b5f2:	e7c3      	b.n	800b57c <_svfiprintf_r+0x130>
 800b5f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5f8:	4604      	mov	r4, r0
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	e7f0      	b.n	800b5e0 <_svfiprintf_r+0x194>
 800b5fe:	ab03      	add	r3, sp, #12
 800b600:	9300      	str	r3, [sp, #0]
 800b602:	462a      	mov	r2, r5
 800b604:	4b0f      	ldr	r3, [pc, #60]	; (800b644 <_svfiprintf_r+0x1f8>)
 800b606:	a904      	add	r1, sp, #16
 800b608:	4638      	mov	r0, r7
 800b60a:	f3af 8000 	nop.w
 800b60e:	1c42      	adds	r2, r0, #1
 800b610:	4606      	mov	r6, r0
 800b612:	d1d6      	bne.n	800b5c2 <_svfiprintf_r+0x176>
 800b614:	89ab      	ldrh	r3, [r5, #12]
 800b616:	065b      	lsls	r3, r3, #25
 800b618:	f53f af2c 	bmi.w	800b474 <_svfiprintf_r+0x28>
 800b61c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b61e:	b01d      	add	sp, #116	; 0x74
 800b620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b624:	ab03      	add	r3, sp, #12
 800b626:	9300      	str	r3, [sp, #0]
 800b628:	462a      	mov	r2, r5
 800b62a:	4b06      	ldr	r3, [pc, #24]	; (800b644 <_svfiprintf_r+0x1f8>)
 800b62c:	a904      	add	r1, sp, #16
 800b62e:	4638      	mov	r0, r7
 800b630:	f000 f87a 	bl	800b728 <_printf_i>
 800b634:	e7eb      	b.n	800b60e <_svfiprintf_r+0x1c2>
 800b636:	bf00      	nop
 800b638:	0800d7a1 	.word	0x0800d7a1
 800b63c:	0800d7ab 	.word	0x0800d7ab
 800b640:	00000000 	.word	0x00000000
 800b644:	0800b395 	.word	0x0800b395
 800b648:	0800d7a7 	.word	0x0800d7a7

0800b64c <_printf_common>:
 800b64c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b650:	4616      	mov	r6, r2
 800b652:	4699      	mov	r9, r3
 800b654:	688a      	ldr	r2, [r1, #8]
 800b656:	690b      	ldr	r3, [r1, #16]
 800b658:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b65c:	4293      	cmp	r3, r2
 800b65e:	bfb8      	it	lt
 800b660:	4613      	movlt	r3, r2
 800b662:	6033      	str	r3, [r6, #0]
 800b664:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b668:	4607      	mov	r7, r0
 800b66a:	460c      	mov	r4, r1
 800b66c:	b10a      	cbz	r2, 800b672 <_printf_common+0x26>
 800b66e:	3301      	adds	r3, #1
 800b670:	6033      	str	r3, [r6, #0]
 800b672:	6823      	ldr	r3, [r4, #0]
 800b674:	0699      	lsls	r1, r3, #26
 800b676:	bf42      	ittt	mi
 800b678:	6833      	ldrmi	r3, [r6, #0]
 800b67a:	3302      	addmi	r3, #2
 800b67c:	6033      	strmi	r3, [r6, #0]
 800b67e:	6825      	ldr	r5, [r4, #0]
 800b680:	f015 0506 	ands.w	r5, r5, #6
 800b684:	d106      	bne.n	800b694 <_printf_common+0x48>
 800b686:	f104 0a19 	add.w	sl, r4, #25
 800b68a:	68e3      	ldr	r3, [r4, #12]
 800b68c:	6832      	ldr	r2, [r6, #0]
 800b68e:	1a9b      	subs	r3, r3, r2
 800b690:	42ab      	cmp	r3, r5
 800b692:	dc26      	bgt.n	800b6e2 <_printf_common+0x96>
 800b694:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b698:	1e13      	subs	r3, r2, #0
 800b69a:	6822      	ldr	r2, [r4, #0]
 800b69c:	bf18      	it	ne
 800b69e:	2301      	movne	r3, #1
 800b6a0:	0692      	lsls	r2, r2, #26
 800b6a2:	d42b      	bmi.n	800b6fc <_printf_common+0xb0>
 800b6a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b6a8:	4649      	mov	r1, r9
 800b6aa:	4638      	mov	r0, r7
 800b6ac:	47c0      	blx	r8
 800b6ae:	3001      	adds	r0, #1
 800b6b0:	d01e      	beq.n	800b6f0 <_printf_common+0xa4>
 800b6b2:	6823      	ldr	r3, [r4, #0]
 800b6b4:	68e5      	ldr	r5, [r4, #12]
 800b6b6:	6832      	ldr	r2, [r6, #0]
 800b6b8:	f003 0306 	and.w	r3, r3, #6
 800b6bc:	2b04      	cmp	r3, #4
 800b6be:	bf08      	it	eq
 800b6c0:	1aad      	subeq	r5, r5, r2
 800b6c2:	68a3      	ldr	r3, [r4, #8]
 800b6c4:	6922      	ldr	r2, [r4, #16]
 800b6c6:	bf0c      	ite	eq
 800b6c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6cc:	2500      	movne	r5, #0
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	bfc4      	itt	gt
 800b6d2:	1a9b      	subgt	r3, r3, r2
 800b6d4:	18ed      	addgt	r5, r5, r3
 800b6d6:	2600      	movs	r6, #0
 800b6d8:	341a      	adds	r4, #26
 800b6da:	42b5      	cmp	r5, r6
 800b6dc:	d11a      	bne.n	800b714 <_printf_common+0xc8>
 800b6de:	2000      	movs	r0, #0
 800b6e0:	e008      	b.n	800b6f4 <_printf_common+0xa8>
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	4652      	mov	r2, sl
 800b6e6:	4649      	mov	r1, r9
 800b6e8:	4638      	mov	r0, r7
 800b6ea:	47c0      	blx	r8
 800b6ec:	3001      	adds	r0, #1
 800b6ee:	d103      	bne.n	800b6f8 <_printf_common+0xac>
 800b6f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6f8:	3501      	adds	r5, #1
 800b6fa:	e7c6      	b.n	800b68a <_printf_common+0x3e>
 800b6fc:	18e1      	adds	r1, r4, r3
 800b6fe:	1c5a      	adds	r2, r3, #1
 800b700:	2030      	movs	r0, #48	; 0x30
 800b702:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b706:	4422      	add	r2, r4
 800b708:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b70c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b710:	3302      	adds	r3, #2
 800b712:	e7c7      	b.n	800b6a4 <_printf_common+0x58>
 800b714:	2301      	movs	r3, #1
 800b716:	4622      	mov	r2, r4
 800b718:	4649      	mov	r1, r9
 800b71a:	4638      	mov	r0, r7
 800b71c:	47c0      	blx	r8
 800b71e:	3001      	adds	r0, #1
 800b720:	d0e6      	beq.n	800b6f0 <_printf_common+0xa4>
 800b722:	3601      	adds	r6, #1
 800b724:	e7d9      	b.n	800b6da <_printf_common+0x8e>
	...

0800b728 <_printf_i>:
 800b728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b72c:	7e0f      	ldrb	r7, [r1, #24]
 800b72e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b730:	2f78      	cmp	r7, #120	; 0x78
 800b732:	4691      	mov	r9, r2
 800b734:	4680      	mov	r8, r0
 800b736:	460c      	mov	r4, r1
 800b738:	469a      	mov	sl, r3
 800b73a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b73e:	d807      	bhi.n	800b750 <_printf_i+0x28>
 800b740:	2f62      	cmp	r7, #98	; 0x62
 800b742:	d80a      	bhi.n	800b75a <_printf_i+0x32>
 800b744:	2f00      	cmp	r7, #0
 800b746:	f000 80d8 	beq.w	800b8fa <_printf_i+0x1d2>
 800b74a:	2f58      	cmp	r7, #88	; 0x58
 800b74c:	f000 80a3 	beq.w	800b896 <_printf_i+0x16e>
 800b750:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b754:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b758:	e03a      	b.n	800b7d0 <_printf_i+0xa8>
 800b75a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b75e:	2b15      	cmp	r3, #21
 800b760:	d8f6      	bhi.n	800b750 <_printf_i+0x28>
 800b762:	a101      	add	r1, pc, #4	; (adr r1, 800b768 <_printf_i+0x40>)
 800b764:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b768:	0800b7c1 	.word	0x0800b7c1
 800b76c:	0800b7d5 	.word	0x0800b7d5
 800b770:	0800b751 	.word	0x0800b751
 800b774:	0800b751 	.word	0x0800b751
 800b778:	0800b751 	.word	0x0800b751
 800b77c:	0800b751 	.word	0x0800b751
 800b780:	0800b7d5 	.word	0x0800b7d5
 800b784:	0800b751 	.word	0x0800b751
 800b788:	0800b751 	.word	0x0800b751
 800b78c:	0800b751 	.word	0x0800b751
 800b790:	0800b751 	.word	0x0800b751
 800b794:	0800b8e1 	.word	0x0800b8e1
 800b798:	0800b805 	.word	0x0800b805
 800b79c:	0800b8c3 	.word	0x0800b8c3
 800b7a0:	0800b751 	.word	0x0800b751
 800b7a4:	0800b751 	.word	0x0800b751
 800b7a8:	0800b903 	.word	0x0800b903
 800b7ac:	0800b751 	.word	0x0800b751
 800b7b0:	0800b805 	.word	0x0800b805
 800b7b4:	0800b751 	.word	0x0800b751
 800b7b8:	0800b751 	.word	0x0800b751
 800b7bc:	0800b8cb 	.word	0x0800b8cb
 800b7c0:	682b      	ldr	r3, [r5, #0]
 800b7c2:	1d1a      	adds	r2, r3, #4
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	602a      	str	r2, [r5, #0]
 800b7c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	e0a3      	b.n	800b91c <_printf_i+0x1f4>
 800b7d4:	6820      	ldr	r0, [r4, #0]
 800b7d6:	6829      	ldr	r1, [r5, #0]
 800b7d8:	0606      	lsls	r6, r0, #24
 800b7da:	f101 0304 	add.w	r3, r1, #4
 800b7de:	d50a      	bpl.n	800b7f6 <_printf_i+0xce>
 800b7e0:	680e      	ldr	r6, [r1, #0]
 800b7e2:	602b      	str	r3, [r5, #0]
 800b7e4:	2e00      	cmp	r6, #0
 800b7e6:	da03      	bge.n	800b7f0 <_printf_i+0xc8>
 800b7e8:	232d      	movs	r3, #45	; 0x2d
 800b7ea:	4276      	negs	r6, r6
 800b7ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7f0:	485e      	ldr	r0, [pc, #376]	; (800b96c <_printf_i+0x244>)
 800b7f2:	230a      	movs	r3, #10
 800b7f4:	e019      	b.n	800b82a <_printf_i+0x102>
 800b7f6:	680e      	ldr	r6, [r1, #0]
 800b7f8:	602b      	str	r3, [r5, #0]
 800b7fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b7fe:	bf18      	it	ne
 800b800:	b236      	sxthne	r6, r6
 800b802:	e7ef      	b.n	800b7e4 <_printf_i+0xbc>
 800b804:	682b      	ldr	r3, [r5, #0]
 800b806:	6820      	ldr	r0, [r4, #0]
 800b808:	1d19      	adds	r1, r3, #4
 800b80a:	6029      	str	r1, [r5, #0]
 800b80c:	0601      	lsls	r1, r0, #24
 800b80e:	d501      	bpl.n	800b814 <_printf_i+0xec>
 800b810:	681e      	ldr	r6, [r3, #0]
 800b812:	e002      	b.n	800b81a <_printf_i+0xf2>
 800b814:	0646      	lsls	r6, r0, #25
 800b816:	d5fb      	bpl.n	800b810 <_printf_i+0xe8>
 800b818:	881e      	ldrh	r6, [r3, #0]
 800b81a:	4854      	ldr	r0, [pc, #336]	; (800b96c <_printf_i+0x244>)
 800b81c:	2f6f      	cmp	r7, #111	; 0x6f
 800b81e:	bf0c      	ite	eq
 800b820:	2308      	moveq	r3, #8
 800b822:	230a      	movne	r3, #10
 800b824:	2100      	movs	r1, #0
 800b826:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b82a:	6865      	ldr	r5, [r4, #4]
 800b82c:	60a5      	str	r5, [r4, #8]
 800b82e:	2d00      	cmp	r5, #0
 800b830:	bfa2      	ittt	ge
 800b832:	6821      	ldrge	r1, [r4, #0]
 800b834:	f021 0104 	bicge.w	r1, r1, #4
 800b838:	6021      	strge	r1, [r4, #0]
 800b83a:	b90e      	cbnz	r6, 800b840 <_printf_i+0x118>
 800b83c:	2d00      	cmp	r5, #0
 800b83e:	d04d      	beq.n	800b8dc <_printf_i+0x1b4>
 800b840:	4615      	mov	r5, r2
 800b842:	fbb6 f1f3 	udiv	r1, r6, r3
 800b846:	fb03 6711 	mls	r7, r3, r1, r6
 800b84a:	5dc7      	ldrb	r7, [r0, r7]
 800b84c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b850:	4637      	mov	r7, r6
 800b852:	42bb      	cmp	r3, r7
 800b854:	460e      	mov	r6, r1
 800b856:	d9f4      	bls.n	800b842 <_printf_i+0x11a>
 800b858:	2b08      	cmp	r3, #8
 800b85a:	d10b      	bne.n	800b874 <_printf_i+0x14c>
 800b85c:	6823      	ldr	r3, [r4, #0]
 800b85e:	07de      	lsls	r6, r3, #31
 800b860:	d508      	bpl.n	800b874 <_printf_i+0x14c>
 800b862:	6923      	ldr	r3, [r4, #16]
 800b864:	6861      	ldr	r1, [r4, #4]
 800b866:	4299      	cmp	r1, r3
 800b868:	bfde      	ittt	le
 800b86a:	2330      	movle	r3, #48	; 0x30
 800b86c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b870:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b874:	1b52      	subs	r2, r2, r5
 800b876:	6122      	str	r2, [r4, #16]
 800b878:	f8cd a000 	str.w	sl, [sp]
 800b87c:	464b      	mov	r3, r9
 800b87e:	aa03      	add	r2, sp, #12
 800b880:	4621      	mov	r1, r4
 800b882:	4640      	mov	r0, r8
 800b884:	f7ff fee2 	bl	800b64c <_printf_common>
 800b888:	3001      	adds	r0, #1
 800b88a:	d14c      	bne.n	800b926 <_printf_i+0x1fe>
 800b88c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b890:	b004      	add	sp, #16
 800b892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b896:	4835      	ldr	r0, [pc, #212]	; (800b96c <_printf_i+0x244>)
 800b898:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b89c:	6829      	ldr	r1, [r5, #0]
 800b89e:	6823      	ldr	r3, [r4, #0]
 800b8a0:	f851 6b04 	ldr.w	r6, [r1], #4
 800b8a4:	6029      	str	r1, [r5, #0]
 800b8a6:	061d      	lsls	r5, r3, #24
 800b8a8:	d514      	bpl.n	800b8d4 <_printf_i+0x1ac>
 800b8aa:	07df      	lsls	r7, r3, #31
 800b8ac:	bf44      	itt	mi
 800b8ae:	f043 0320 	orrmi.w	r3, r3, #32
 800b8b2:	6023      	strmi	r3, [r4, #0]
 800b8b4:	b91e      	cbnz	r6, 800b8be <_printf_i+0x196>
 800b8b6:	6823      	ldr	r3, [r4, #0]
 800b8b8:	f023 0320 	bic.w	r3, r3, #32
 800b8bc:	6023      	str	r3, [r4, #0]
 800b8be:	2310      	movs	r3, #16
 800b8c0:	e7b0      	b.n	800b824 <_printf_i+0xfc>
 800b8c2:	6823      	ldr	r3, [r4, #0]
 800b8c4:	f043 0320 	orr.w	r3, r3, #32
 800b8c8:	6023      	str	r3, [r4, #0]
 800b8ca:	2378      	movs	r3, #120	; 0x78
 800b8cc:	4828      	ldr	r0, [pc, #160]	; (800b970 <_printf_i+0x248>)
 800b8ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b8d2:	e7e3      	b.n	800b89c <_printf_i+0x174>
 800b8d4:	0659      	lsls	r1, r3, #25
 800b8d6:	bf48      	it	mi
 800b8d8:	b2b6      	uxthmi	r6, r6
 800b8da:	e7e6      	b.n	800b8aa <_printf_i+0x182>
 800b8dc:	4615      	mov	r5, r2
 800b8de:	e7bb      	b.n	800b858 <_printf_i+0x130>
 800b8e0:	682b      	ldr	r3, [r5, #0]
 800b8e2:	6826      	ldr	r6, [r4, #0]
 800b8e4:	6961      	ldr	r1, [r4, #20]
 800b8e6:	1d18      	adds	r0, r3, #4
 800b8e8:	6028      	str	r0, [r5, #0]
 800b8ea:	0635      	lsls	r5, r6, #24
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	d501      	bpl.n	800b8f4 <_printf_i+0x1cc>
 800b8f0:	6019      	str	r1, [r3, #0]
 800b8f2:	e002      	b.n	800b8fa <_printf_i+0x1d2>
 800b8f4:	0670      	lsls	r0, r6, #25
 800b8f6:	d5fb      	bpl.n	800b8f0 <_printf_i+0x1c8>
 800b8f8:	8019      	strh	r1, [r3, #0]
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	6123      	str	r3, [r4, #16]
 800b8fe:	4615      	mov	r5, r2
 800b900:	e7ba      	b.n	800b878 <_printf_i+0x150>
 800b902:	682b      	ldr	r3, [r5, #0]
 800b904:	1d1a      	adds	r2, r3, #4
 800b906:	602a      	str	r2, [r5, #0]
 800b908:	681d      	ldr	r5, [r3, #0]
 800b90a:	6862      	ldr	r2, [r4, #4]
 800b90c:	2100      	movs	r1, #0
 800b90e:	4628      	mov	r0, r5
 800b910:	f7f4 fc7e 	bl	8000210 <memchr>
 800b914:	b108      	cbz	r0, 800b91a <_printf_i+0x1f2>
 800b916:	1b40      	subs	r0, r0, r5
 800b918:	6060      	str	r0, [r4, #4]
 800b91a:	6863      	ldr	r3, [r4, #4]
 800b91c:	6123      	str	r3, [r4, #16]
 800b91e:	2300      	movs	r3, #0
 800b920:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b924:	e7a8      	b.n	800b878 <_printf_i+0x150>
 800b926:	6923      	ldr	r3, [r4, #16]
 800b928:	462a      	mov	r2, r5
 800b92a:	4649      	mov	r1, r9
 800b92c:	4640      	mov	r0, r8
 800b92e:	47d0      	blx	sl
 800b930:	3001      	adds	r0, #1
 800b932:	d0ab      	beq.n	800b88c <_printf_i+0x164>
 800b934:	6823      	ldr	r3, [r4, #0]
 800b936:	079b      	lsls	r3, r3, #30
 800b938:	d413      	bmi.n	800b962 <_printf_i+0x23a>
 800b93a:	68e0      	ldr	r0, [r4, #12]
 800b93c:	9b03      	ldr	r3, [sp, #12]
 800b93e:	4298      	cmp	r0, r3
 800b940:	bfb8      	it	lt
 800b942:	4618      	movlt	r0, r3
 800b944:	e7a4      	b.n	800b890 <_printf_i+0x168>
 800b946:	2301      	movs	r3, #1
 800b948:	4632      	mov	r2, r6
 800b94a:	4649      	mov	r1, r9
 800b94c:	4640      	mov	r0, r8
 800b94e:	47d0      	blx	sl
 800b950:	3001      	adds	r0, #1
 800b952:	d09b      	beq.n	800b88c <_printf_i+0x164>
 800b954:	3501      	adds	r5, #1
 800b956:	68e3      	ldr	r3, [r4, #12]
 800b958:	9903      	ldr	r1, [sp, #12]
 800b95a:	1a5b      	subs	r3, r3, r1
 800b95c:	42ab      	cmp	r3, r5
 800b95e:	dcf2      	bgt.n	800b946 <_printf_i+0x21e>
 800b960:	e7eb      	b.n	800b93a <_printf_i+0x212>
 800b962:	2500      	movs	r5, #0
 800b964:	f104 0619 	add.w	r6, r4, #25
 800b968:	e7f5      	b.n	800b956 <_printf_i+0x22e>
 800b96a:	bf00      	nop
 800b96c:	0800d7b2 	.word	0x0800d7b2
 800b970:	0800d7c3 	.word	0x0800d7c3

0800b974 <__retarget_lock_acquire_recursive>:
 800b974:	4770      	bx	lr

0800b976 <__retarget_lock_release_recursive>:
 800b976:	4770      	bx	lr

0800b978 <memcpy>:
 800b978:	440a      	add	r2, r1
 800b97a:	4291      	cmp	r1, r2
 800b97c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b980:	d100      	bne.n	800b984 <memcpy+0xc>
 800b982:	4770      	bx	lr
 800b984:	b510      	push	{r4, lr}
 800b986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b98a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b98e:	4291      	cmp	r1, r2
 800b990:	d1f9      	bne.n	800b986 <memcpy+0xe>
 800b992:	bd10      	pop	{r4, pc}

0800b994 <memmove>:
 800b994:	4288      	cmp	r0, r1
 800b996:	b510      	push	{r4, lr}
 800b998:	eb01 0402 	add.w	r4, r1, r2
 800b99c:	d902      	bls.n	800b9a4 <memmove+0x10>
 800b99e:	4284      	cmp	r4, r0
 800b9a0:	4623      	mov	r3, r4
 800b9a2:	d807      	bhi.n	800b9b4 <memmove+0x20>
 800b9a4:	1e43      	subs	r3, r0, #1
 800b9a6:	42a1      	cmp	r1, r4
 800b9a8:	d008      	beq.n	800b9bc <memmove+0x28>
 800b9aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b9b2:	e7f8      	b.n	800b9a6 <memmove+0x12>
 800b9b4:	4402      	add	r2, r0
 800b9b6:	4601      	mov	r1, r0
 800b9b8:	428a      	cmp	r2, r1
 800b9ba:	d100      	bne.n	800b9be <memmove+0x2a>
 800b9bc:	bd10      	pop	{r4, pc}
 800b9be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b9c6:	e7f7      	b.n	800b9b8 <memmove+0x24>

0800b9c8 <_realloc_r>:
 800b9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9cc:	4680      	mov	r8, r0
 800b9ce:	4614      	mov	r4, r2
 800b9d0:	460e      	mov	r6, r1
 800b9d2:	b921      	cbnz	r1, 800b9de <_realloc_r+0x16>
 800b9d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9d8:	4611      	mov	r1, r2
 800b9da:	f7ff bb9f 	b.w	800b11c <_malloc_r>
 800b9de:	b92a      	cbnz	r2, 800b9ec <_realloc_r+0x24>
 800b9e0:	f7ff fb30 	bl	800b044 <_free_r>
 800b9e4:	4625      	mov	r5, r4
 800b9e6:	4628      	mov	r0, r5
 800b9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9ec:	f000 f81b 	bl	800ba26 <_malloc_usable_size_r>
 800b9f0:	4284      	cmp	r4, r0
 800b9f2:	4607      	mov	r7, r0
 800b9f4:	d802      	bhi.n	800b9fc <_realloc_r+0x34>
 800b9f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b9fa:	d812      	bhi.n	800ba22 <_realloc_r+0x5a>
 800b9fc:	4621      	mov	r1, r4
 800b9fe:	4640      	mov	r0, r8
 800ba00:	f7ff fb8c 	bl	800b11c <_malloc_r>
 800ba04:	4605      	mov	r5, r0
 800ba06:	2800      	cmp	r0, #0
 800ba08:	d0ed      	beq.n	800b9e6 <_realloc_r+0x1e>
 800ba0a:	42bc      	cmp	r4, r7
 800ba0c:	4622      	mov	r2, r4
 800ba0e:	4631      	mov	r1, r6
 800ba10:	bf28      	it	cs
 800ba12:	463a      	movcs	r2, r7
 800ba14:	f7ff ffb0 	bl	800b978 <memcpy>
 800ba18:	4631      	mov	r1, r6
 800ba1a:	4640      	mov	r0, r8
 800ba1c:	f7ff fb12 	bl	800b044 <_free_r>
 800ba20:	e7e1      	b.n	800b9e6 <_realloc_r+0x1e>
 800ba22:	4635      	mov	r5, r6
 800ba24:	e7df      	b.n	800b9e6 <_realloc_r+0x1e>

0800ba26 <_malloc_usable_size_r>:
 800ba26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba2a:	1f18      	subs	r0, r3, #4
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	bfbc      	itt	lt
 800ba30:	580b      	ldrlt	r3, [r1, r0]
 800ba32:	18c0      	addlt	r0, r0, r3
 800ba34:	4770      	bx	lr
	...

0800ba38 <_init>:
 800ba38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba3a:	bf00      	nop
 800ba3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba3e:	bc08      	pop	{r3}
 800ba40:	469e      	mov	lr, r3
 800ba42:	4770      	bx	lr

0800ba44 <_fini>:
 800ba44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba46:	bf00      	nop
 800ba48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba4a:	bc08      	pop	{r3}
 800ba4c:	469e      	mov	lr, r3
 800ba4e:	4770      	bx	lr
