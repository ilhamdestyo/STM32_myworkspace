
Proj_STM32F746DISCO_SPI_RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006740  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  08006910  08006910  00016910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c0c  08006c0c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006c0c  08006c0c  00016c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c14  08006c14  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c14  08006c14  00016c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c18  08006c18  00016c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006c1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000070  08006c8c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08006c8c  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f295  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000232a  00000000  00000000  0002f335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  00031660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa0  00000000  00000000  000321e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f9e  00000000  00000000  00032c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee1b  00000000  00000000  00059c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eaf54  00000000  00000000  00068a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00153995  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003824  00000000  00000000  001539e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080068f8 	.word	0x080068f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080068f8 	.word	0x080068f8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <string_compare>:
/* USER CODE BEGIN 0 */
char buffer[50];
uint8_t timer_count = 0, buffer_index = 0;

uint8_t string_compare(char array1[], char array2[], uint16_t length)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b087      	sub	sp, #28
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	4613      	mov	r3, r2
 80005d0:	80fb      	strh	r3, [r7, #6]
	 uint8_t comVAR=0, i;
 80005d2:	2300      	movs	r3, #0
 80005d4:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 80005d6:	2300      	movs	r3, #0
 80005d8:	75bb      	strb	r3, [r7, #22]
 80005da:	e012      	b.n	8000602 <string_compare+0x3e>
	   	{
	   		  if(array1[i]==array2[i])
 80005dc:	7dbb      	ldrb	r3, [r7, #22]
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	4413      	add	r3, r2
 80005e2:	781a      	ldrb	r2, [r3, #0]
 80005e4:	7dbb      	ldrb	r3, [r7, #22]
 80005e6:	68b9      	ldr	r1, [r7, #8]
 80005e8:	440b      	add	r3, r1
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d103      	bne.n	80005f8 <string_compare+0x34>
	   	  		  comVAR++;
 80005f0:	7dfb      	ldrb	r3, [r7, #23]
 80005f2:	3301      	adds	r3, #1
 80005f4:	75fb      	strb	r3, [r7, #23]
 80005f6:	e001      	b.n	80005fc <string_compare+0x38>
	   	  	  else comVAR=0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 80005fc:	7dbb      	ldrb	r3, [r7, #22]
 80005fe:	3301      	adds	r3, #1
 8000600:	75bb      	strb	r3, [r7, #22]
 8000602:	7dbb      	ldrb	r3, [r7, #22]
 8000604:	b29b      	uxth	r3, r3
 8000606:	88fa      	ldrh	r2, [r7, #6]
 8000608:	429a      	cmp	r2, r3
 800060a:	d8e7      	bhi.n	80005dc <string_compare+0x18>
	   	}
	 if (comVAR==length)
 800060c:	7dfb      	ldrb	r3, [r7, #23]
 800060e:	b29b      	uxth	r3, r3
 8000610:	88fa      	ldrh	r2, [r7, #6]
 8000612:	429a      	cmp	r2, r3
 8000614:	d101      	bne.n	800061a <string_compare+0x56>
		 	return 1;
 8000616:	2301      	movs	r3, #1
 8000618:	e000      	b.n	800061c <string_compare+0x58>
	 else 	return 0;
 800061a:	2300      	movs	r3, #0
}
 800061c:	4618      	mov	r0, r3
 800061e:	371c      	adds	r7, #28
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <Message_handler>:

void Message_handler()
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	if(string_compare(buffer, "LED ON", strlen("LED ON")))
 800062c:	2206      	movs	r2, #6
 800062e:	4921      	ldr	r1, [pc, #132]	; (80006b4 <Message_handler+0x8c>)
 8000630:	4821      	ldr	r0, [pc, #132]	; (80006b8 <Message_handler+0x90>)
 8000632:	f7ff ffc7 	bl	80005c4 <string_compare>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d007      	beq.n	800064c <Message_handler+0x24>
	{
		HAL_UART_Transmit(&huart6, (uint8_t*)"LED is ON.\n", strlen("LED is ON.\n"), 500);
 800063c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000640:	220b      	movs	r2, #11
 8000642:	491e      	ldr	r1, [pc, #120]	; (80006bc <Message_handler+0x94>)
 8000644:	481e      	ldr	r0, [pc, #120]	; (80006c0 <Message_handler+0x98>)
 8000646:	f003 fe53 	bl	80042f0 <HAL_UART_Transmit>
 800064a:	e026      	b.n	800069a <Message_handler+0x72>
	}else
	if(string_compare(buffer, "LED OFF", strlen("LED OFF")))
 800064c:	2207      	movs	r2, #7
 800064e:	491d      	ldr	r1, [pc, #116]	; (80006c4 <Message_handler+0x9c>)
 8000650:	4819      	ldr	r0, [pc, #100]	; (80006b8 <Message_handler+0x90>)
 8000652:	f7ff ffb7 	bl	80005c4 <string_compare>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d007      	beq.n	800066c <Message_handler+0x44>
	{
		HAL_UART_Transmit(&huart6, (uint8_t*)"LED is OFF.\n", strlen("LED is OFF.\n"), 500);
 800065c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000660:	220c      	movs	r2, #12
 8000662:	4919      	ldr	r1, [pc, #100]	; (80006c8 <Message_handler+0xa0>)
 8000664:	4816      	ldr	r0, [pc, #88]	; (80006c0 <Message_handler+0x98>)
 8000666:	f003 fe43 	bl	80042f0 <HAL_UART_Transmit>
 800066a:	e016      	b.n	800069a <Message_handler+0x72>
	}else
	{
		strcat(buffer, "\n");
 800066c:	4812      	ldr	r0, [pc, #72]	; (80006b8 <Message_handler+0x90>)
 800066e:	f7ff fdcf 	bl	8000210 <strlen>
 8000672:	4603      	mov	r3, r0
 8000674:	461a      	mov	r2, r3
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <Message_handler+0x90>)
 8000678:	4413      	add	r3, r2
 800067a:	4914      	ldr	r1, [pc, #80]	; (80006cc <Message_handler+0xa4>)
 800067c:	461a      	mov	r2, r3
 800067e:	460b      	mov	r3, r1
 8000680:	881b      	ldrh	r3, [r3, #0]
 8000682:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), 500);
 8000684:	480c      	ldr	r0, [pc, #48]	; (80006b8 <Message_handler+0x90>)
 8000686:	f7ff fdc3 	bl	8000210 <strlen>
 800068a:	4603      	mov	r3, r0
 800068c:	b29a      	uxth	r2, r3
 800068e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000692:	4909      	ldr	r1, [pc, #36]	; (80006b8 <Message_handler+0x90>)
 8000694:	480a      	ldr	r0, [pc, #40]	; (80006c0 <Message_handler+0x98>)
 8000696:	f003 fe2b 	bl	80042f0 <HAL_UART_Transmit>
	}

	memset(buffer, 0, sizeof(buffer));
 800069a:	2232      	movs	r2, #50	; 0x32
 800069c:	2100      	movs	r1, #0
 800069e:	4806      	ldr	r0, [pc, #24]	; (80006b8 <Message_handler+0x90>)
 80006a0:	f004 ff32 	bl	8005508 <memset>
	buffer_index = 0;
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <Message_handler+0xa8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
	timer_count = 0;
 80006aa:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <Message_handler+0xac>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	08006910 	.word	0x08006910
 80006b8:	200002e8 	.word	0x200002e8
 80006bc:	08006918 	.word	0x08006918
 80006c0:	200000f0 	.word	0x200000f0
 80006c4:	08006924 	.word	0x08006924
 80006c8:	0800692c 	.word	0x0800692c
 80006cc:	0800693c 	.word	0x0800693c
 80006d0:	2000031b 	.word	0x2000031b
 80006d4:	2000031a 	.word	0x2000031a

080006d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006de:	f001 f9cb 	bl	8001a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e2:	f000 f8c7 	bl	8000874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e6:	f000 f9bf 	bl	8000a68 <MX_GPIO_Init>
  MX_DMA_Init();
 80006ea:	f000 f99f 	bl	8000a2c <MX_DMA_Init>
  MX_SPI2_Init();
 80006ee:	f000 f92f 	bl	8000950 <MX_SPI2_Init>
  MX_USART6_UART_Init();
 80006f2:	f000 f96b 	bl	80009cc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(200);
 80006f6:	20c8      	movs	r0, #200	; 0xc8
 80006f8:	f001 fa24 	bl	8001b44 <HAL_Delay>
  memset(buffer, 0, sizeof(buffer));
 80006fc:	2232      	movs	r2, #50	; 0x32
 80006fe:	2100      	movs	r1, #0
 8000700:	4850      	ldr	r0, [pc, #320]	; (8000844 <main+0x16c>)
 8000702:	f004 ff01 	bl	8005508 <memset>
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8000706:	4b50      	ldr	r3, [pc, #320]	; (8000848 <main+0x170>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4b4e      	ldr	r3, [pc, #312]	; (8000848 <main+0x170>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f042 0220 	orr.w	r2, r2, #32
 8000714:	601a      	str	r2, [r3, #0]

  printf("Hello!\r\n");
 8000716:	484d      	ldr	r0, [pc, #308]	; (800084c <main+0x174>)
 8000718:	f004 ff84 	bl	8005624 <puts>
  PN532 pn532;
  PN532_SPI_Init(&pn532); //PN532 init
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	4618      	mov	r0, r3
 8000722:	f000 ff27 	bl	8001574 <PN532_SPI_Init>
  //PN532_I2C_Init(&pn532);
  PN532_GetFirmwareVersion(&pn532, buff);
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	4949      	ldr	r1, [pc, #292]	; (8000850 <main+0x178>)
 800072c:	4618      	mov	r0, r3
 800072e:	f000 fd2f 	bl	8001190 <PN532_GetFirmwareVersion>
  if (PN532_GetFirmwareVersion(&pn532, buff) == PN532_STATUS_OK) {
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	4946      	ldr	r1, [pc, #280]	; (8000850 <main+0x178>)
 8000738:	4618      	mov	r0, r3
 800073a:	f000 fd29 	bl	8001190 <PN532_GetFirmwareVersion>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d111      	bne.n	8000768 <main+0x90>
    printf("Found PN532 with firmware version: %d.%d\r\n", buff[1], buff[2]);
 8000744:	4b42      	ldr	r3, [pc, #264]	; (8000850 <main+0x178>)
 8000746:	785b      	ldrb	r3, [r3, #1]
 8000748:	4619      	mov	r1, r3
 800074a:	4b41      	ldr	r3, [pc, #260]	; (8000850 <main+0x178>)
 800074c:	789b      	ldrb	r3, [r3, #2]
 800074e:	461a      	mov	r2, r3
 8000750:	4840      	ldr	r0, [pc, #256]	; (8000854 <main+0x17c>)
 8000752:	f004 fee1 	bl	8005518 <iprintf>
  } else {
    return -1;
  }

  PN532_SamConfiguration(&pn532);
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	4618      	mov	r0, r3
 800075c:	f000 fd3c 	bl	80011d8 <PN532_SamConfiguration>
  printf("Waiting for RFID/NFC card...\r\n");
 8000760:	483d      	ldr	r0, [pc, #244]	; (8000858 <main+0x180>)
 8000762:	f004 ff5f 	bl	8005624 <puts>
 8000766:	e002      	b.n	800076e <main+0x96>
    return -1;
 8000768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800076c:	e066      	b.n	800083c <main+0x164>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// Check if a card is available to read
	memset(uid,0, sizeof(uid));
 800076e:	220a      	movs	r2, #10
 8000770:	2100      	movs	r1, #0
 8000772:	483a      	ldr	r0, [pc, #232]	; (800085c <main+0x184>)
 8000774:	f004 fec8 	bl	8005508 <memset>
	uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 8000778:	f107 000c 	add.w	r0, r7, #12
 800077c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000780:	2200      	movs	r2, #0
 8000782:	4936      	ldr	r1, [pc, #216]	; (800085c <main+0x184>)
 8000784:	f000 fd4a 	bl	800121c <PN532_ReadPassiveTarget>
 8000788:	4603      	mov	r3, r0
 800078a:	4a35      	ldr	r2, [pc, #212]	; (8000860 <main+0x188>)
 800078c:	6013      	str	r3, [r2, #0]
	if (uid_len != PN532_STATUS_ERROR) {
 800078e:	4b34      	ldr	r3, [pc, #208]	; (8000860 <main+0x188>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000796:	d04d      	beq.n	8000834 <main+0x15c>
    	memset(buffer, 0, sizeof(buffer));
 8000798:	2232      	movs	r2, #50	; 0x32
 800079a:	2100      	movs	r1, #0
 800079c:	4829      	ldr	r0, [pc, #164]	; (8000844 <main+0x16c>)
 800079e:	f004 feb3 	bl	8005508 <memset>
    	char stringForHex[5];
		printf("Found card with UID: ");
 80007a2:	4830      	ldr	r0, [pc, #192]	; (8000864 <main+0x18c>)
 80007a4:	f004 feb8 	bl	8005518 <iprintf>
		for (uint8_t i = 0; i < uid_len; i++) {
 80007a8:	2300      	movs	r3, #0
 80007aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80007ae:	e021      	b.n	80007f4 <main+0x11c>
			memset(stringForHex,0, sizeof(stringForHex));
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2205      	movs	r2, #5
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f004 fea6 	bl	8005508 <memset>
			#ifdef use_HEXADECIMAL
			sprintf(stringForHex,"%02x", (unsigned char)uid[i]);
 80007bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007c0:	4a26      	ldr	r2, [pc, #152]	; (800085c <main+0x184>)
 80007c2:	5cd3      	ldrb	r3, [r2, r3]
 80007c4:	461a      	mov	r2, r3
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	4927      	ldr	r1, [pc, #156]	; (8000868 <main+0x190>)
 80007ca:	4618      	mov	r0, r3
 80007cc:	f004 ff32 	bl	8005634 <siprintf>
			#else
			sprintf(stringForHex,"%d",(unsigned char)uid[i]);
			#endif
			strcat(buffer,stringForHex);
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	4619      	mov	r1, r3
 80007d4:	481b      	ldr	r0, [pc, #108]	; (8000844 <main+0x16c>)
 80007d6:	f004 ff4d 	bl	8005674 <strcat>
			printf("%02x ", uid[i]);
 80007da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007de:	4a1f      	ldr	r2, [pc, #124]	; (800085c <main+0x184>)
 80007e0:	5cd3      	ldrb	r3, [r2, r3]
 80007e2:	4619      	mov	r1, r3
 80007e4:	4821      	ldr	r0, [pc, #132]	; (800086c <main+0x194>)
 80007e6:	f004 fe97 	bl	8005518 <iprintf>
		for (uint8_t i = 0; i < uid_len; i++) {
 80007ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007ee:	3301      	adds	r3, #1
 80007f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80007f4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <main+0x188>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	dbd7      	blt.n	80007b0 <main+0xd8>
	     }
		buffer[strlen(buffer)-1]='\n';
 8000800:	4810      	ldr	r0, [pc, #64]	; (8000844 <main+0x16c>)
 8000802:	f7ff fd05 	bl	8000210 <strlen>
 8000806:	4603      	mov	r3, r0
 8000808:	3b01      	subs	r3, #1
 800080a:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <main+0x16c>)
 800080c:	210a      	movs	r1, #10
 800080e:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000810:	480c      	ldr	r0, [pc, #48]	; (8000844 <main+0x16c>)
 8000812:	f7ff fcfd 	bl	8000210 <strlen>
 8000816:	4603      	mov	r3, r0
 8000818:	b29a      	uxth	r2, r3
 800081a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800081e:	4909      	ldr	r1, [pc, #36]	; (8000844 <main+0x16c>)
 8000820:	4809      	ldr	r0, [pc, #36]	; (8000848 <main+0x170>)
 8000822:	f003 fd65 	bl	80042f0 <HAL_UART_Transmit>
		printf("\r\n");
 8000826:	4812      	ldr	r0, [pc, #72]	; (8000870 <main+0x198>)
 8000828:	f004 fefc 	bl	8005624 <puts>
		HAL_Delay(1000);
 800082c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000830:	f001 f988 	bl	8001b44 <HAL_Delay>
	}
	HAL_Delay(1);
 8000834:	2001      	movs	r0, #1
 8000836:	f001 f985 	bl	8001b44 <HAL_Delay>
	memset(uid,0, sizeof(uid));
 800083a:	e798      	b.n	800076e <main+0x96>
  }
  /* USER CODE END 3 */
}
 800083c:	4618      	mov	r0, r3
 800083e:	3728      	adds	r7, #40	; 0x28
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200002e8 	.word	0x200002e8
 8000848:	200000f0 	.word	0x200000f0
 800084c:	08006940 	.word	0x08006940
 8000850:	200001d8 	.word	0x200001d8
 8000854:	08006948 	.word	0x08006948
 8000858:	08006974 	.word	0x08006974
 800085c:	200002d8 	.word	0x200002d8
 8000860:	200002e4 	.word	0x200002e4
 8000864:	08006994 	.word	0x08006994
 8000868:	080069ac 	.word	0x080069ac
 800086c:	080069b4 	.word	0x080069b4
 8000870:	080069bc 	.word	0x080069bc

08000874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b094      	sub	sp, #80	; 0x50
 8000878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087a:	f107 0320 	add.w	r3, r7, #32
 800087e:	2230      	movs	r2, #48	; 0x30
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f004 fe40 	bl	8005508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000898:	4b2b      	ldr	r3, [pc, #172]	; (8000948 <SystemClock_Config+0xd4>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	4a2a      	ldr	r2, [pc, #168]	; (8000948 <SystemClock_Config+0xd4>)
 800089e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a2:	6413      	str	r3, [r2, #64]	; 0x40
 80008a4:	4b28      	ldr	r3, [pc, #160]	; (8000948 <SystemClock_Config+0xd4>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b0:	4b26      	ldr	r3, [pc, #152]	; (800094c <SystemClock_Config+0xd8>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a25      	ldr	r2, [pc, #148]	; (800094c <SystemClock_Config+0xd8>)
 80008b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008ba:	6013      	str	r3, [r2, #0]
 80008bc:	4b23      	ldr	r3, [pc, #140]	; (800094c <SystemClock_Config+0xd8>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c8:	2301      	movs	r3, #1
 80008ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d2:	2302      	movs	r3, #2
 80008d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80008dc:	2319      	movs	r3, #25
 80008de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80008e0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80008e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e6:	2302      	movs	r3, #2
 80008e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80008ea:	2309      	movs	r3, #9
 80008ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ee:	f107 0320 	add.w	r3, r7, #32
 80008f2:	4618      	mov	r0, r3
 80008f4:	f001 ffee 	bl	80028d4 <HAL_RCC_OscConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80008fe:	f000 f94b 	bl	8000b98 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000902:	f001 ff97 	bl	8002834 <HAL_PWREx_EnableOverDrive>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800090c:	f000 f944 	bl	8000b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000910:	230f      	movs	r3, #15
 8000912:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000914:	2302      	movs	r3, #2
 8000916:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800091c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000920:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000926:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	2107      	movs	r1, #7
 800092e:	4618      	mov	r0, r3
 8000930:	f002 fa74 	bl	8002e1c <HAL_RCC_ClockConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800093a:	f000 f92d 	bl	8000b98 <Error_Handler>
  }
}
 800093e:	bf00      	nop
 8000940:	3750      	adds	r7, #80	; 0x50
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800
 800094c:	40007000 	.word	0x40007000

08000950 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <MX_SPI2_Init+0x74>)
 8000956:	4a1c      	ldr	r2, [pc, #112]	; (80009c8 <MX_SPI2_Init+0x78>)
 8000958:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_SPI2_Init+0x74>)
 800095c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000960:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000962:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <MX_SPI2_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000968:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <MX_SPI2_Init+0x74>)
 800096a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800096e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_SPI2_Init+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <MX_SPI2_Init+0x74>)
 8000978:	2200      	movs	r2, #0
 800097a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_SPI2_Init+0x74>)
 800097e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000982:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_SPI2_Init+0x74>)
 8000986:	2220      	movs	r2, #32
 8000988:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_SPI2_Init+0x74>)
 800098c:	2280      	movs	r2, #128	; 0x80
 800098e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_SPI2_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_SPI2_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_SPI2_Init+0x74>)
 800099e:	2207      	movs	r2, #7
 80009a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_SPI2_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_SPI2_Init+0x74>)
 80009aa:	2208      	movs	r2, #8
 80009ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_SPI2_Init+0x74>)
 80009b0:	f003 f80a 	bl	80039c8 <HAL_SPI_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80009ba:	f000 f8ed 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	2000008c 	.word	0x2000008c
 80009c8:	40003800 	.word	0x40003800

080009cc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_USART6_UART_Init+0x58>)
 80009d2:	4a15      	ldr	r2, [pc, #84]	; (8000a28 <MX_USART6_UART_Init+0x5c>)
 80009d4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80009d6:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <MX_USART6_UART_Init+0x58>)
 80009d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009dc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_USART6_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_USART6_UART_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_USART6_UART_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_USART6_UART_Init+0x58>)
 80009f2:	220c      	movs	r2, #12
 80009f4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_USART6_UART_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_USART6_UART_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <MX_USART6_UART_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_USART6_UART_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_USART6_UART_Init+0x58>)
 8000a10:	f003 fc20 	bl	8004254 <HAL_UART_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000a1a:	f000 f8bd 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200000f0 	.word	0x200000f0
 8000a28:	40011400 	.word	0x40011400

08000a2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_DMA_Init+0x38>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <MX_DMA_Init+0x38>)
 8000a38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_DMA_Init+0x38>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	2039      	movs	r0, #57	; 0x39
 8000a50:	f001 f977 	bl	8001d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a54:	2039      	movs	r0, #57	; 0x39
 8000a56:	f001 f990 	bl	8001d7a <HAL_NVIC_EnableIRQ>

}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800

08000a68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
 8000a7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	4b3a      	ldr	r3, [pc, #232]	; (8000b68 <MX_GPIO_Init+0x100>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a39      	ldr	r2, [pc, #228]	; (8000b68 <MX_GPIO_Init+0x100>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b37      	ldr	r3, [pc, #220]	; (8000b68 <MX_GPIO_Init+0x100>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a96:	4b34      	ldr	r3, [pc, #208]	; (8000b68 <MX_GPIO_Init+0x100>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a33      	ldr	r2, [pc, #204]	; (8000b68 <MX_GPIO_Init+0x100>)
 8000a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b31      	ldr	r3, [pc, #196]	; (8000b68 <MX_GPIO_Init+0x100>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aae:	4b2e      	ldr	r3, [pc, #184]	; (8000b68 <MX_GPIO_Init+0x100>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a2d      	ldr	r2, [pc, #180]	; (8000b68 <MX_GPIO_Init+0x100>)
 8000ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b2b      	ldr	r3, [pc, #172]	; (8000b68 <MX_GPIO_Init+0x100>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac6:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <MX_GPIO_Init+0x100>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a27      	ldr	r2, [pc, #156]	; (8000b68 <MX_GPIO_Init+0x100>)
 8000acc:	f043 0304 	orr.w	r3, r3, #4
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b25      	ldr	r3, [pc, #148]	; (8000b68 <MX_GPIO_Init+0x100>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	4b22      	ldr	r3, [pc, #136]	; (8000b68 <MX_GPIO_Init+0x100>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a21      	ldr	r2, [pc, #132]	; (8000b68 <MX_GPIO_Init+0x100>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <MX_GPIO_Init+0x100>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_Pin_GPIO_Port, SS_Pin_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2101      	movs	r1, #1
 8000afa:	481c      	ldr	r0, [pc, #112]	; (8000b6c <MX_GPIO_Init+0x104>)
 8000afc:	f001 fe80 	bl	8002800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Reset_GPIO_Port, Reset_Pin, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b06:	481a      	ldr	r0, [pc, #104]	; (8000b70 <MX_GPIO_Init+0x108>)
 8000b08:	f001 fe7a 	bl	8002800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RFID_IRQ_Pin */
  GPIO_InitStruct.Pin = RFID_IRQ_Pin;
 8000b0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RFID_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4813      	ldr	r0, [pc, #76]	; (8000b70 <MX_GPIO_Init+0x108>)
 8000b22:	f001 fcc1 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SS_Pin_Pin */
  GPIO_InitStruct.Pin = SS_Pin_Pin;
 8000b26:	2301      	movs	r3, #1
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SS_Pin_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480b      	ldr	r0, [pc, #44]	; (8000b6c <MX_GPIO_Init+0x104>)
 8000b3e:	f001 fcb3 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Reset_Pin */
  GPIO_InitStruct.Pin = Reset_Pin;
 8000b42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Reset_GPIO_Port, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_GPIO_Init+0x108>)
 8000b5c:	f001 fca4 	bl	80024a8 <HAL_GPIO_Init>

}
 8000b60:	bf00      	nop
 8000b62:	3728      	adds	r7, #40	; 0x28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40022000 	.word	0x40022000
 8000b70:	40020000 	.word	0x40020000

08000b74 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart6, (uint8_t *)&ch, 1, 0xFFFF);
 8000b7c:	1d39      	adds	r1, r7, #4
 8000b7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b82:	2201      	movs	r2, #1
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <__io_putchar+0x20>)
 8000b86:	f003 fbb3 	bl	80042f0 <HAL_UART_Transmit>
  return ch;
 8000b8a:	687b      	ldr	r3, [r7, #4]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	200000f0 	.word	0x200000f0

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
}
 8000b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <Error_Handler+0x8>

08000ba2 <PN532_WriteFrame>:
/**
  * @brief: Write a frame to the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns -1 if there is an error parsing the frame.
  */
int PN532_WriteFrame(PN532* pn532, uint8_t* data, uint16_t length) {
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b0c8      	sub	sp, #288	; 0x120
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000bac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000bb0:	6018      	str	r0, [r3, #0]
 8000bb2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000bb6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000bba:	6019      	str	r1, [r3, #0]
 8000bbc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000bc0:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000bc4:	801a      	strh	r2, [r3, #0]
    if (length > PN532_FRAME_MAX_LENGTH || length < 1) {
 8000bc6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000bca:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	2bff      	cmp	r3, #255	; 0xff
 8000bd2:	d806      	bhi.n	8000be2 <PN532_WriteFrame+0x40>
 8000bd4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000bd8:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d102      	bne.n	8000be8 <PN532_WriteFrame+0x46>
        return PN532_STATUS_ERROR; // Data must be array of 1 to 255 bytes.
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000be6:	e0aa      	b.n	8000d3e <PN532_WriteFrame+0x19c>
    // - Command bytes
    // - Checksum
    // - Postamble (0x00)

    uint8_t frame[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    frame[0] = PN532_PREAMBLE;
 8000bee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000bf2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
    frame[1] = PN532_STARTCODE1;
 8000bfa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000bfe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000c02:	2200      	movs	r2, #0
 8000c04:	705a      	strb	r2, [r3, #1]
    frame[2] = PN532_STARTCODE2;
 8000c06:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000c0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000c0e:	22ff      	movs	r2, #255	; 0xff
 8000c10:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; i++) {
 8000c12:	2300      	movs	r3, #0
 8000c14:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8000c18:	e010      	b.n	8000c3c <PN532_WriteFrame+0x9a>
        checksum += frame[i];
 8000c1a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000c1e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000c22:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000c26:	5cd2      	ldrb	r2, [r2, r3]
 8000c28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000c2c:	4413      	add	r3, r2
 8000c2e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < 3; i++) {
 8000c32:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000c36:	3301      	adds	r3, #1
 8000c38:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8000c3c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d9ea      	bls.n	8000c1a <PN532_WriteFrame+0x78>
    }
    frame[3] = length & 0xFF;
 8000c44:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000c48:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000c54:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000c58:	70da      	strb	r2, [r3, #3]
    frame[4] = (~length + 1) & 0xFF;
 8000c5a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000c5e:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	425b      	negs	r3, r3
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000c6e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000c72:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < length; i++) {
 8000c74:	2300      	movs	r3, #0
 8000c76:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000c7a:	e023      	b.n	8000cc4 <PN532_WriteFrame+0x122>
        frame[5 + i] = data[i];
 8000c7c:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000c80:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000c84:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8000c88:	6812      	ldr	r2, [r2, #0]
 8000c8a:	441a      	add	r2, r3
 8000c8c:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000c90:	3305      	adds	r3, #5
 8000c92:	7811      	ldrb	r1, [r2, #0]
 8000c94:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000c98:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000c9c:	54d1      	strb	r1, [r2, r3]
        checksum += data[i];
 8000c9e:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000ca2:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000ca6:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8000caa:	6812      	ldr	r2, [r2, #0]
 8000cac:	4413      	add	r3, r2
 8000cae:	781a      	ldrb	r2, [r3, #0]
 8000cb0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000cb4:	4413      	add	r3, r2
 8000cb6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < length; i++) {
 8000cba:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000cc4:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000cce:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 8000cd2:	8812      	ldrh	r2, [r2, #0]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d8d1      	bhi.n	8000c7c <PN532_WriteFrame+0xda>
    }
    frame[length + 5] = ~checksum & 0xFF;
 8000cd8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000cdc:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	3305      	adds	r3, #5
 8000ce4:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8000ce8:	43d2      	mvns	r2, r2
 8000cea:	b2d1      	uxtb	r1, r2
 8000cec:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000cf0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000cf4:	54d1      	strb	r1, [r2, r3]
    frame[length + 6] = PN532_POSTAMBLE;
 8000cf6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000cfa:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	3306      	adds	r3, #6
 8000d02:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000d06:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	54d1      	strb	r1, [r2, r3]
    if (pn532->write_data(frame, length + 7) != PN532_STATUS_OK) {
 8000d0e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000d12:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000d1e:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 8000d22:	8812      	ldrh	r2, [r2, #0]
 8000d24:	3207      	adds	r2, #7
 8000d26:	b291      	uxth	r1, r2
 8000d28:	f107 0214 	add.w	r2, r7, #20
 8000d2c:	4610      	mov	r0, r2
 8000d2e:	4798      	blx	r3
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d002      	beq.n	8000d3c <PN532_WriteFrame+0x19a>
        return PN532_STATUS_ERROR;
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d3a:	e000      	b.n	8000d3e <PN532_WriteFrame+0x19c>
    }
    return PN532_STATUS_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <PN532_ReadFrame>:
/**
  * @brief: Read a response frame from the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns frame length or -1 if there is an error parsing the frame.
  */
int PN532_ReadFrame(PN532* pn532, uint8_t* response, uint16_t length) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b0c8      	sub	sp, #288	; 0x120
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000d52:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000d56:	6018      	str	r0, [r3, #0]
 8000d58:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000d5c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000d60:	6019      	str	r1, [r3, #0]
 8000d62:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000d66:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000d6a:	801a      	strh	r2, [r3, #0]
    uint8_t buff[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    // Read frame with expected length of data.
    pn532->read_data(buff, length + 7);
 8000d72:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000d76:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000d82:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 8000d86:	8812      	ldrh	r2, [r2, #0]
 8000d88:	3207      	adds	r2, #7
 8000d8a:	b291      	uxth	r1, r2
 8000d8c:	f107 0214 	add.w	r2, r7, #20
 8000d90:	4610      	mov	r0, r2
 8000d92:	4798      	blx	r3
    // Swallow all the 0x00 values that preceed 0xFF.
    uint8_t offset = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    while (buff[offset] == 0x00) {
 8000d9a:	e019      	b.n	8000dd0 <PN532_ReadFrame+0x88>
        offset += 1;
 8000d9c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000da0:	3301      	adds	r3, #1
 8000da2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
        if (offset >= length + 8){
 8000da6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000daa:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	1dda      	adds	r2, r3, #7
 8000db2:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000db6:	429a      	cmp	r2, r3
 8000db8:	da0a      	bge.n	8000dd0 <PN532_ReadFrame+0x88>
            pn532->log("Response frame preamble does not contain 0x00FF!");
 8000dba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000dbe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	485b      	ldr	r0, [pc, #364]	; (8000f34 <PN532_ReadFrame+0x1ec>)
 8000dc8:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dce:	e0ab      	b.n	8000f28 <PN532_ReadFrame+0x1e0>
    while (buff[offset] == 0x00) {
 8000dd0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000dd4:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000dd8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000ddc:	5cd3      	ldrb	r3, [r2, r3]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d0dc      	beq.n	8000d9c <PN532_ReadFrame+0x54>
        }
    }
    if (buff[offset] != 0xFF) {
 8000de2:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000de6:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000dea:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000dee:	5cd3      	ldrb	r3, [r2, r3]
 8000df0:	2bff      	cmp	r3, #255	; 0xff
 8000df2:	d00a      	beq.n	8000e0a <PN532_ReadFrame+0xc2>
        pn532->log("Response frame preamble does not contain 0x00FF!");
 8000df4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000df8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	484c      	ldr	r0, [pc, #304]	; (8000f34 <PN532_ReadFrame+0x1ec>)
 8000e02:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000e04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e08:	e08e      	b.n	8000f28 <PN532_ReadFrame+0x1e0>
    }
    offset += 1;
 8000e0a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000e0e:	3301      	adds	r3, #1
 8000e10:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    if (offset >= length + 8) {
 8000e14:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000e18:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	1dda      	adds	r2, r3, #7
 8000e20:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000e24:	429a      	cmp	r2, r3
 8000e26:	da0a      	bge.n	8000e3e <PN532_ReadFrame+0xf6>
        pn532->log("Response contains no data!");
 8000e28:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000e2c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	695b      	ldr	r3, [r3, #20]
 8000e34:	4840      	ldr	r0, [pc, #256]	; (8000f38 <PN532_ReadFrame+0x1f0>)
 8000e36:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000e38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e3c:	e074      	b.n	8000f28 <PN532_ReadFrame+0x1e0>
    }
    // Check length & length checksum match.
    uint8_t frame_len = buff[offset];
 8000e3e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000e42:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000e46:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000e4a:	5cd3      	ldrb	r3, [r2, r3]
 8000e4c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    if (((frame_len + buff[offset+1]) & 0xFF) != 0) {
 8000e50:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000e54:	3301      	adds	r3, #1
 8000e56:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000e5a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000e5e:	5cd2      	ldrb	r2, [r2, r3]
 8000e60:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8000e64:	4413      	add	r3, r2
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d00a      	beq.n	8000e82 <PN532_ReadFrame+0x13a>
        pn532->log("Response length checksum did not match length!");
 8000e6c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000e70:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	4830      	ldr	r0, [pc, #192]	; (8000f3c <PN532_ReadFrame+0x1f4>)
 8000e7a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000e7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e80:	e052      	b.n	8000f28 <PN532_ReadFrame+0x1e0>
    }
    // Check frame checksum value matches bytes.
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8000e82:	2300      	movs	r3, #0
 8000e84:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000e88:	e014      	b.n	8000eb4 <PN532_ReadFrame+0x16c>
        checksum += buff[offset + 2 + i];
 8000e8a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000e8e:	1c9a      	adds	r2, r3, #2
 8000e90:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000e94:	4413      	add	r3, r2
 8000e96:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000e9a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000e9e:	5cd2      	ldrb	r2, [r2, r3]
 8000ea0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000ea4:	4413      	add	r3, r2
 8000ea6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8000eaa:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000eae:	3301      	adds	r3, #1
 8000eb0:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000eb4:	f897 211b 	ldrb.w	r2, [r7, #283]	; 0x11b
 8000eb8:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d2e4      	bcs.n	8000e8a <PN532_ReadFrame+0x142>
    }
    checksum &= 0xFF;
    if (checksum != 0) {
 8000ec0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d00a      	beq.n	8000ede <PN532_ReadFrame+0x196>
        pn532->log("Response checksum did not match expected checksum");
 8000ec8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000ecc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	695b      	ldr	r3, [r3, #20]
 8000ed4:	481a      	ldr	r0, [pc, #104]	; (8000f40 <PN532_ReadFrame+0x1f8>)
 8000ed6:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000ed8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000edc:	e024      	b.n	8000f28 <PN532_ReadFrame+0x1e0>
    }
    // Return frame data.
    for (uint8_t i = 0; i < frame_len; i++) {
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 8000ee4:	e018      	b.n	8000f18 <PN532_ReadFrame+0x1d0>
        response[i] = buff[offset + 2 + i];
 8000ee6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000eea:	1c9a      	adds	r2, r3, #2
 8000eec:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8000ef0:	441a      	add	r2, r3
 8000ef2:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8000ef6:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8000efa:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 8000efe:	6809      	ldr	r1, [r1, #0]
 8000f00:	440b      	add	r3, r1
 8000f02:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8000f06:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8000f0a:	5c8a      	ldrb	r2, [r1, r2]
 8000f0c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame_len; i++) {
 8000f0e:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8000f12:	3301      	adds	r3, #1
 8000f14:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 8000f18:	f897 211c 	ldrb.w	r2, [r7, #284]	; 0x11c
 8000f1c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d3e0      	bcc.n	8000ee6 <PN532_ReadFrame+0x19e>
    }
    return frame_len;
 8000f24:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	080069c0 	.word	0x080069c0
 8000f38:	080069f4 	.word	0x080069f4
 8000f3c:	08006a10 	.word	0x08006a10
 8000f40:	08006a40 	.word	0x08006a40

08000f44 <PN532_CallFunction>:
    uint8_t* response,
    uint16_t response_length,
    uint8_t* params,
    uint16_t params_length,
    uint32_t timeout
) {
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b0c7      	sub	sp, #284	; 0x11c
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8000f4e:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 8000f52:	6020      	str	r0, [r4, #0]
 8000f54:	4608      	mov	r0, r1
 8000f56:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000f5a:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 8000f5e:	600a      	str	r2, [r1, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000f66:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	701a      	strb	r2, [r3, #0]
 8000f6e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000f72:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000f76:	460a      	mov	r2, r1
 8000f78:	801a      	strh	r2, [r3, #0]
    // Build frame data with command and parameters.
    uint8_t buff[PN532_FRAME_MAX_LENGTH];
    buff[0] = PN532_HOSTTOPN532;
 8000f7a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000f7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f82:	22d4      	movs	r2, #212	; 0xd4
 8000f84:	701a      	strb	r2, [r3, #0]
    buff[1] = command & 0xFF;
 8000f86:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000f8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f8e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000f92:	f2a2 120d 	subw	r2, r2, #269	; 0x10d
 8000f96:	7812      	ldrb	r2, [r2, #0]
 8000f98:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < params_length; i++) {
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000fa0:	e012      	b.n	8000fc8 <PN532_CallFunction+0x84>
        buff[2 + i] = params[i];
 8000fa2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000fa6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000faa:	441a      	add	r2, r3
 8000fac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	7811      	ldrb	r1, [r2, #0]
 8000fb4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000fb8:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000fbc:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < params_length; i++) {
 8000fbe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000fc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d8e5      	bhi.n	8000fa2 <PN532_CallFunction+0x5e>
    }
    // Send frame and wait for response.
    if (PN532_WriteFrame(pn532, buff, params_length + 2) != PN532_STATUS_OK) {
 8000fd6:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 8000fda:	3302      	adds	r3, #2
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	f107 0110 	add.w	r1, r7, #16
 8000fe2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000fe6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000fea:	6818      	ldr	r0, [r3, #0]
 8000fec:	f7ff fdd9 	bl	8000ba2 <PN532_WriteFrame>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d011      	beq.n	800101a <PN532_CallFunction+0xd6>
        pn532->wakeup();
 8000ff6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000ffa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	4798      	blx	r3
        pn532->log("Trying to wakeup");
 8001004:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001008:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	485b      	ldr	r0, [pc, #364]	; (8001180 <PN532_CallFunction+0x23c>)
 8001012:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001018:	e0ac      	b.n	8001174 <PN532_CallFunction+0x230>
    }
    if (!pn532->wait_ready(timeout)) {
 800101a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800101e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 800102a:	4798      	blx	r3
 800102c:	4603      	mov	r3, r0
 800102e:	f083 0301 	eor.w	r3, r3, #1
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b00      	cmp	r3, #0
 8001036:	d002      	beq.n	800103e <PN532_CallFunction+0xfa>
        return PN532_STATUS_ERROR;
 8001038:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800103c:	e09a      	b.n	8001174 <PN532_CallFunction+0x230>
    }
    // Verify ACK response and wait to be ready for function response.
    pn532->read_data(buff, sizeof(PN532_ACK));
 800103e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001042:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f107 0210 	add.w	r2, r7, #16
 800104e:	2106      	movs	r1, #6
 8001050:	4610      	mov	r0, r2
 8001052:	4798      	blx	r3
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8001054:	2300      	movs	r3, #0
 8001056:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800105a:	e01c      	b.n	8001096 <PN532_CallFunction+0x152>
        if (PN532_ACK[i] != buff[i]) {
 800105c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8001060:	4a48      	ldr	r2, [pc, #288]	; (8001184 <PN532_CallFunction+0x240>)
 8001062:	5cd2      	ldrb	r2, [r2, r3]
 8001064:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8001068:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800106c:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8001070:	5ccb      	ldrb	r3, [r1, r3]
 8001072:	429a      	cmp	r2, r3
 8001074:	d00a      	beq.n	800108c <PN532_CallFunction+0x148>
            pn532->log("Did not receive expected ACK from PN532!");
 8001076:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800107a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	4841      	ldr	r0, [pc, #260]	; (8001188 <PN532_CallFunction+0x244>)
 8001084:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800108a:	e073      	b.n	8001174 <PN532_CallFunction+0x230>
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 800108c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8001090:	3301      	adds	r3, #1
 8001092:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8001096:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800109a:	2b05      	cmp	r3, #5
 800109c:	d9de      	bls.n	800105c <PN532_CallFunction+0x118>
        }
    }
    if (!pn532->wait_ready(timeout)) {
 800109e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80010a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80010ae:	4798      	blx	r3
 80010b0:	4603      	mov	r3, r0
 80010b2:	f083 0301 	eor.w	r3, r3, #1
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d002      	beq.n	80010c2 <PN532_CallFunction+0x17e>
        return PN532_STATUS_ERROR;
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010c0:	e058      	b.n	8001174 <PN532_CallFunction+0x230>
    }
    // Read response bytes.
    int frame_len = PN532_ReadFrame(pn532, buff, response_length + 2);
 80010c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80010c6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	f107 0110 	add.w	r1, r7, #16
 80010d4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80010d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	f7ff fe33 	bl	8000d48 <PN532_ReadFrame>
 80010e2:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    // Check that response is for the called function.
    if (! ((buff[0] == PN532_PN532TOHOST) && (buff[1] == (command+1)))) {
 80010e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80010ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2bd5      	cmp	r3, #213	; 0xd5
 80010f2:	d10d      	bne.n	8001110 <PN532_CallFunction+0x1cc>
 80010f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80010f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80010fc:	785b      	ldrb	r3, [r3, #1]
 80010fe:	461a      	mov	r2, r3
 8001100:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001104:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	3301      	adds	r3, #1
 800110c:	429a      	cmp	r2, r3
 800110e:	d00a      	beq.n	8001126 <PN532_CallFunction+0x1e2>
        pn532->log("Received unexpected command response!");
 8001110:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001114:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	481b      	ldr	r0, [pc, #108]	; (800118c <PN532_CallFunction+0x248>)
 800111e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001124:	e026      	b.n	8001174 <PN532_CallFunction+0x230>
    }
    // Return response data.
    for (uint8_t i = 0; i < response_length; i++) {
 8001126:	2300      	movs	r3, #0
 8001128:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 800112c:	e015      	b.n	800115a <PN532_CallFunction+0x216>
        response[i] = buff[i + 2];
 800112e:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8001132:	1c9a      	adds	r2, r3, #2
 8001134:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8001138:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800113c:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 8001140:	6809      	ldr	r1, [r1, #0]
 8001142:	440b      	add	r3, r1
 8001144:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001148:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 800114c:	5c8a      	ldrb	r2, [r1, r2]
 800114e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < response_length; i++) {
 8001150:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8001154:	3301      	adds	r3, #1
 8001156:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 800115a:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800115e:	b29b      	uxth	r3, r3
 8001160:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001164:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001168:	8812      	ldrh	r2, [r2, #0]
 800116a:	429a      	cmp	r2, r3
 800116c:	d8df      	bhi.n	800112e <PN532_CallFunction+0x1ea>
    }
    // The the number of bytes read
    return frame_len - 2;
 800116e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001172:	3b02      	subs	r3, #2
}
 8001174:	4618      	mov	r0, r3
 8001176:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800117a:	46bd      	mov	sp, r7
 800117c:	bd90      	pop	{r4, r7, pc}
 800117e:	bf00      	nop
 8001180:	08006a74 	.word	0x08006a74
 8001184:	08006b4c 	.word	0x08006b4c
 8001188:	08006a88 	.word	0x08006a88
 800118c:	08006ab4 	.word	0x08006ab4

08001190 <PN532_GetFirmwareVersion>:

/**
  * @brief: Call PN532 GetFirmwareVersion function and return a buff with the IC,
  *  Ver, Rev, and Support values.
  */
int PN532_GetFirmwareVersion(PN532* pn532, uint8_t* version) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af04      	add	r7, sp, #16
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
    // length of version: 4
    if (PN532_CallFunction(pn532, PN532_COMMAND_GETFIRMWAREVERSION,
 800119a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800119e:	9302      	str	r3, [sp, #8]
 80011a0:	2300      	movs	r3, #0
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	2300      	movs	r3, #0
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2304      	movs	r3, #4
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	2102      	movs	r1, #2
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff fec8 	bl	8000f44 <PN532_CallFunction>
 80011b4:	4603      	mov	r3, r0
 80011b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011ba:	d106      	bne.n	80011ca <PN532_GetFirmwareVersion+0x3a>
                           version, 4, NULL, 0, 500) == PN532_STATUS_ERROR) {
        pn532->log("Failed to detect the PN532");
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	695b      	ldr	r3, [r3, #20]
 80011c0:	4804      	ldr	r0, [pc, #16]	; (80011d4 <PN532_GetFirmwareVersion+0x44>)
 80011c2:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011c8:	e000      	b.n	80011cc <PN532_GetFirmwareVersion+0x3c>
    }
    return PN532_STATUS_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	08006adc 	.word	0x08006adc

080011d8 <PN532_SamConfiguration>:

/**
  * @brief: Configure the PN532 to read MiFare cards.
  */
int PN532_SamConfiguration(PN532* pn532) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af04      	add	r7, sp, #16
 80011de:	6078      	str	r0, [r7, #4]
    // - 0x01, normal mode
    // - 0x14, timeout 50ms * 20 = 1 second
    // - 0x01, use IRQ pin
    // Note that no other verification is necessary as call_function will
    // check the command was executed as expected.
    uint8_t params[] = {0x01, 0x14, 0x01};
 80011e0:	4a0d      	ldr	r2, [pc, #52]	; (8001218 <PN532_SamConfiguration+0x40>)
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	6812      	ldr	r2, [r2, #0]
 80011e8:	4611      	mov	r1, r2
 80011ea:	8019      	strh	r1, [r3, #0]
 80011ec:	3302      	adds	r3, #2
 80011ee:	0c12      	lsrs	r2, r2, #16
 80011f0:	701a      	strb	r2, [r3, #0]
    PN532_CallFunction(pn532, PN532_COMMAND_SAMCONFIGURATION,
 80011f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f6:	9302      	str	r3, [sp, #8]
 80011f8:	2303      	movs	r3, #3
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2300      	movs	r3, #0
 8001204:	2200      	movs	r2, #0
 8001206:	2114      	movs	r1, #20
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff fe9b 	bl	8000f44 <PN532_CallFunction>
                       NULL, 0, params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    return PN532_STATUS_OK;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	08006af8 	.word	0x08006af8

0800121c <PN532_ReadPassiveTarget>:
int PN532_ReadPassiveTarget(
    PN532* pn532,
    uint8_t* response,
    uint8_t card_baud,
    uint32_t timeout
) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b090      	sub	sp, #64	; 0x40
 8001220:	af04      	add	r7, sp, #16
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	4613      	mov	r3, r2
 800122a:	71fb      	strb	r3, [r7, #7]
    // Send passive read command for 1 card.  Expect at most a 7 byte UUID.
    uint8_t params[] = {0x01, card_baud};
 800122c:	2301      	movs	r3, #1
 800122e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    uint8_t buff[19];
    int length = PN532_CallFunction(pn532, PN532_COMMAND_INLISTPASSIVETARGET,
 8001238:	f107 0210 	add.w	r2, r7, #16
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	9302      	str	r3, [sp, #8]
 8001240:	2302      	movs	r3, #2
 8001242:	9301      	str	r3, [sp, #4]
 8001244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	2313      	movs	r3, #19
 800124c:	214a      	movs	r1, #74	; 0x4a
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f7ff fe78 	bl	8000f44 <PN532_CallFunction>
 8001254:	62b8      	str	r0, [r7, #40]	; 0x28
                        buff, sizeof(buff), params, sizeof(params), timeout);
    if (length < 0) {
 8001256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001258:	2b00      	cmp	r3, #0
 800125a:	da02      	bge.n	8001262 <PN532_ReadPassiveTarget+0x46>
        return PN532_STATUS_ERROR; // No card found
 800125c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001260:	e02e      	b.n	80012c0 <PN532_ReadPassiveTarget+0xa4>
    }
    // Check only 1 card with up to a 7 byte UID is present.
    if (buff[0] != 0x01) {
 8001262:	7c3b      	ldrb	r3, [r7, #16]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d006      	beq.n	8001276 <PN532_ReadPassiveTarget+0x5a>
        pn532->log("More than one card detected!");
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	4816      	ldr	r0, [pc, #88]	; (80012c8 <PN532_ReadPassiveTarget+0xac>)
 800126e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001270:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001274:	e024      	b.n	80012c0 <PN532_ReadPassiveTarget+0xa4>
    }
    if (buff[5] > 7) {
 8001276:	7d7b      	ldrb	r3, [r7, #21]
 8001278:	2b07      	cmp	r3, #7
 800127a:	d906      	bls.n	800128a <PN532_ReadPassiveTarget+0x6e>
        pn532->log("Found card with unexpectedly long UID!");
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	695b      	ldr	r3, [r3, #20]
 8001280:	4812      	ldr	r0, [pc, #72]	; (80012cc <PN532_ReadPassiveTarget+0xb0>)
 8001282:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001288:	e01a      	b.n	80012c0 <PN532_ReadPassiveTarget+0xa4>
    }
    for (uint8_t i = 0; i < buff[5]; i++) {
 800128a:	2300      	movs	r3, #0
 800128c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001290:	e010      	b.n	80012b4 <PN532_ReadPassiveTarget+0x98>
        response[i] = buff[6 + i];
 8001292:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001296:	1d9a      	adds	r2, r3, #6
 8001298:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	440b      	add	r3, r1
 80012a0:	3230      	adds	r2, #48	; 0x30
 80012a2:	443a      	add	r2, r7
 80012a4:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 80012a8:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < buff[5]; i++) {
 80012aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012ae:	3301      	adds	r3, #1
 80012b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80012b4:	7d7b      	ldrb	r3, [r7, #21]
 80012b6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d3e9      	bcc.n	8001292 <PN532_ReadPassiveTarget+0x76>
    }
    return buff[5];
 80012be:	7d7b      	ldrb	r3, [r7, #21]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3730      	adds	r7, #48	; 0x30
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	08006afc 	.word	0x08006afc
 80012cc:	08006b1c 	.word	0x08006b1c

080012d0 <PN532_Reset>:
extern SPI_HandleTypeDef hspi2;

/**************************************************************************
 * Reset and Log implements
 **************************************************************************/
int PN532_Reset(void) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(Reset_GPIO_Port, Reset_Pin, GPIO_PIN_SET);
 80012d4:	2201      	movs	r2, #1
 80012d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012da:	480e      	ldr	r0, [pc, #56]	; (8001314 <PN532_Reset+0x44>)
 80012dc:	f001 fa90 	bl	8002800 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80012e0:	2064      	movs	r0, #100	; 0x64
 80012e2:	f000 fc2f 	bl	8001b44 <HAL_Delay>
    HAL_GPIO_WritePin(Reset_GPIO_Port, Reset_Pin, GPIO_PIN_RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ec:	4809      	ldr	r0, [pc, #36]	; (8001314 <PN532_Reset+0x44>)
 80012ee:	f001 fa87 	bl	8002800 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80012f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012f6:	f000 fc25 	bl	8001b44 <HAL_Delay>
    HAL_GPIO_WritePin(Reset_GPIO_Port, Reset_Pin, GPIO_PIN_SET);
 80012fa:	2201      	movs	r2, #1
 80012fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <PN532_Reset+0x44>)
 8001302:	f001 fa7d 	bl	8002800 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001306:	2064      	movs	r0, #100	; 0x64
 8001308:	f000 fc1c 	bl	8001b44 <HAL_Delay>
    return PN532_STATUS_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40020000 	.word	0x40020000

08001318 <PN532_Log>:

void PN532_Log(const char* log) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
    printf("%s\r\n", log);
 8001320:	6879      	ldr	r1, [r7, #4]
 8001322:	4803      	ldr	r0, [pc, #12]	; (8001330 <PN532_Log+0x18>)
 8001324:	f004 f8f8 	bl	8005518 <iprintf>
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	08006b44 	.word	0x08006b44

08001334 <spi_rw>:
        num >>= 1;
    }
    return result;
}

void spi_rw(uint8_t* data, uint8_t count) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af02      	add	r7, sp, #8
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(SS_Pin_GPIO_Port, SS_Pin_Pin, GPIO_PIN_RESET);
 8001340:	2200      	movs	r2, #0
 8001342:	2101      	movs	r1, #1
 8001344:	480d      	ldr	r0, [pc, #52]	; (800137c <spi_rw+0x48>)
 8001346:	f001 fa5b 	bl	8002800 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800134a:	2001      	movs	r0, #1
 800134c:	f000 fbfa 	bl	8001b44 <HAL_Delay>
    HAL_SPI_TransmitReceive(&hspi2, data, data, count, _SPI_TIMEOUT);
    for (uint8_t i = 0; i < count; i++) {
        data[i] = reverse_bit(data[i]);
    }
#else
    HAL_SPI_TransmitReceive(&hspi2, data, data, count, _SPI_TIMEOUT);
 8001350:	78fb      	ldrb	r3, [r7, #3]
 8001352:	b29b      	uxth	r3, r3
 8001354:	220a      	movs	r2, #10
 8001356:	9200      	str	r2, [sp, #0]
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	4808      	ldr	r0, [pc, #32]	; (8001380 <spi_rw+0x4c>)
 800135e:	f002 fbde 	bl	8003b1e <HAL_SPI_TransmitReceive>
#endif
    HAL_Delay(1);
 8001362:	2001      	movs	r0, #1
 8001364:	f000 fbee 	bl	8001b44 <HAL_Delay>
    HAL_GPIO_WritePin(SS_Pin_GPIO_Port, SS_Pin_Pin, GPIO_PIN_SET);
 8001368:	2201      	movs	r2, #1
 800136a:	2101      	movs	r1, #1
 800136c:	4803      	ldr	r0, [pc, #12]	; (800137c <spi_rw+0x48>)
 800136e:	f001 fa47 	bl	8002800 <HAL_GPIO_WritePin>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40022000 	.word	0x40022000
 8001380:	2000008c 	.word	0x2000008c

08001384 <PN532_SPI_ReadData>:

int PN532_SPI_ReadData(uint8_t* data, uint16_t count) {
 8001384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001388:	b087      	sub	sp, #28
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	460b      	mov	r3, r1
 8001390:	807b      	strh	r3, [r7, #2]
 8001392:	466b      	mov	r3, sp
 8001394:	461e      	mov	r6, r3
    uint8_t frame[count + 1];
 8001396:	887b      	ldrh	r3, [r7, #2]
 8001398:	1c59      	adds	r1, r3, #1
 800139a:	1e4b      	subs	r3, r1, #1
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	460a      	mov	r2, r1
 80013a0:	2300      	movs	r3, #0
 80013a2:	4690      	mov	r8, r2
 80013a4:	4699      	mov	r9, r3
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	f04f 0300 	mov.w	r3, #0
 80013ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013ba:	460a      	mov	r2, r1
 80013bc:	2300      	movs	r3, #0
 80013be:	4614      	mov	r4, r2
 80013c0:	461d      	mov	r5, r3
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	f04f 0300 	mov.w	r3, #0
 80013ca:	00eb      	lsls	r3, r5, #3
 80013cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80013d0:	00e2      	lsls	r2, r4, #3
 80013d2:	460b      	mov	r3, r1
 80013d4:	3307      	adds	r3, #7
 80013d6:	08db      	lsrs	r3, r3, #3
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	ebad 0d03 	sub.w	sp, sp, r3
 80013de:	466b      	mov	r3, sp
 80013e0:	3300      	adds	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAREAD;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2203      	movs	r2, #3
 80013e8:	701a      	strb	r2, [r3, #0]
    HAL_Delay(5);
 80013ea:	2005      	movs	r0, #5
 80013ec:	f000 fbaa 	bl	8001b44 <HAL_Delay>
    spi_rw(frame, count + 1);
 80013f0:	887b      	ldrh	r3, [r7, #2]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	3301      	adds	r3, #1
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	4619      	mov	r1, r3
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f7ff ff9a 	bl	8001334 <spi_rw>
    for (uint8_t i = 0; i < count; i++) {
 8001400:	2300      	movs	r3, #0
 8001402:	75fb      	strb	r3, [r7, #23]
 8001404:	e00a      	b.n	800141c <PN532_SPI_ReadData+0x98>
        data[i] = frame[i + 1];
 8001406:	7dfb      	ldrb	r3, [r7, #23]
 8001408:	1c5a      	adds	r2, r3, #1
 800140a:	7dfb      	ldrb	r3, [r7, #23]
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	440b      	add	r3, r1
 8001410:	68f9      	ldr	r1, [r7, #12]
 8001412:	5c8a      	ldrb	r2, [r1, r2]
 8001414:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 8001416:	7dfb      	ldrb	r3, [r7, #23]
 8001418:	3301      	adds	r3, #1
 800141a:	75fb      	strb	r3, [r7, #23]
 800141c:	7dfb      	ldrb	r3, [r7, #23]
 800141e:	b29b      	uxth	r3, r3
 8001420:	887a      	ldrh	r2, [r7, #2]
 8001422:	429a      	cmp	r2, r3
 8001424:	d8ef      	bhi.n	8001406 <PN532_SPI_ReadData+0x82>
    }
    return PN532_STATUS_OK;
 8001426:	2300      	movs	r3, #0
 8001428:	46b5      	mov	sp, r6
}
 800142a:	4618      	mov	r0, r3
 800142c:	371c      	adds	r7, #28
 800142e:	46bd      	mov	sp, r7
 8001430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001434 <PN532_SPI_WriteData>:

int PN532_SPI_WriteData(uint8_t *data, uint16_t count) {
 8001434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001438:	b087      	sub	sp, #28
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	460b      	mov	r3, r1
 8001440:	807b      	strh	r3, [r7, #2]
 8001442:	466b      	mov	r3, sp
 8001444:	461e      	mov	r6, r3
    uint8_t frame[count + 1];
 8001446:	887b      	ldrh	r3, [r7, #2]
 8001448:	1c59      	adds	r1, r3, #1
 800144a:	1e4b      	subs	r3, r1, #1
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	460a      	mov	r2, r1
 8001450:	2300      	movs	r3, #0
 8001452:	4690      	mov	r8, r2
 8001454:	4699      	mov	r9, r3
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	f04f 0300 	mov.w	r3, #0
 800145e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001462:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001466:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800146a:	460a      	mov	r2, r1
 800146c:	2300      	movs	r3, #0
 800146e:	4614      	mov	r4, r2
 8001470:	461d      	mov	r5, r3
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	00eb      	lsls	r3, r5, #3
 800147c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001480:	00e2      	lsls	r2, r4, #3
 8001482:	460b      	mov	r3, r1
 8001484:	3307      	adds	r3, #7
 8001486:	08db      	lsrs	r3, r3, #3
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	ebad 0d03 	sub.w	sp, sp, r3
 800148e:	466b      	mov	r3, sp
 8001490:	3300      	adds	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAWRITE;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2201      	movs	r2, #1
 8001498:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 800149a:	2300      	movs	r3, #0
 800149c:	75fb      	strb	r3, [r7, #23]
 800149e:	e00a      	b.n	80014b6 <PN532_SPI_WriteData+0x82>
        frame[i + 1] = data[i];
 80014a0:	7dfb      	ldrb	r3, [r7, #23]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	441a      	add	r2, r3
 80014a6:	7dfb      	ldrb	r3, [r7, #23]
 80014a8:	3301      	adds	r3, #1
 80014aa:	7811      	ldrb	r1, [r2, #0]
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < count; i++) {
 80014b0:	7dfb      	ldrb	r3, [r7, #23]
 80014b2:	3301      	adds	r3, #1
 80014b4:	75fb      	strb	r3, [r7, #23]
 80014b6:	7dfb      	ldrb	r3, [r7, #23]
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d8ef      	bhi.n	80014a0 <PN532_SPI_WriteData+0x6c>
    }
    spi_rw(frame, count + 1);
 80014c0:	887b      	ldrh	r3, [r7, #2]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	3301      	adds	r3, #1
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	4619      	mov	r1, r3
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f7ff ff32 	bl	8001334 <spi_rw>
    return PN532_STATUS_OK;
 80014d0:	2300      	movs	r3, #0
 80014d2:	46b5      	mov	sp, r6
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	371c      	adds	r7, #28
 80014d8:	46bd      	mov	sp, r7
 80014da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080014de <PN532_SPI_WaitReady>:

bool PN532_SPI_WaitReady(uint32_t timeout) {
 80014de:	b580      	push	{r7, lr}
 80014e0:	b084      	sub	sp, #16
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
    uint8_t status[] = {_SPI_STATREAD, 0x00};
 80014e6:	2302      	movs	r3, #2
 80014e8:	813b      	strh	r3, [r7, #8]
    uint32_t tickstart = HAL_GetTick();
 80014ea:	f000 fb1f 	bl	8001b2c <HAL_GetTick>
 80014ee:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - tickstart < timeout) {
 80014f0:	e010      	b.n	8001514 <PN532_SPI_WaitReady+0x36>
        HAL_Delay(10);
 80014f2:	200a      	movs	r0, #10
 80014f4:	f000 fb26 	bl	8001b44 <HAL_Delay>
        spi_rw(status, sizeof(status));
 80014f8:	f107 0308 	add.w	r3, r7, #8
 80014fc:	2102      	movs	r1, #2
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff ff18 	bl	8001334 <spi_rw>
        if (status[1] == _SPI_READY) {
 8001504:	7a7b      	ldrb	r3, [r7, #9]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d101      	bne.n	800150e <PN532_SPI_WaitReady+0x30>
            return true;
 800150a:	2301      	movs	r3, #1
 800150c:	e00b      	b.n	8001526 <PN532_SPI_WaitReady+0x48>
        } else {
            HAL_Delay(5);
 800150e:	2005      	movs	r0, #5
 8001510:	f000 fb18 	bl	8001b44 <HAL_Delay>
    while (HAL_GetTick() - tickstart < timeout) {
 8001514:	f000 fb0a 	bl	8001b2c <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	429a      	cmp	r2, r3
 8001522:	d8e6      	bhi.n	80014f2 <PN532_SPI_WaitReady+0x14>
        }
    }
    return false;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <PN532_SPI_Wakeup>:

int PN532_SPI_Wakeup(void) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
    // Send any special commands/data to wake up PN532
    uint8_t data[] = {0x00};
 8001536:	2300      	movs	r3, #0
 8001538:	713b      	strb	r3, [r7, #4]
    HAL_Delay(1000);
 800153a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800153e:	f000 fb01 	bl	8001b44 <HAL_Delay>
    HAL_GPIO_WritePin(SS_Pin_GPIO_Port, SS_Pin_Pin, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	2101      	movs	r1, #1
 8001546:	480a      	ldr	r0, [pc, #40]	; (8001570 <PN532_SPI_Wakeup+0x40>)
 8001548:	f001 f95a 	bl	8002800 <HAL_GPIO_WritePin>
    HAL_Delay(2); // T_osc_start
 800154c:	2002      	movs	r0, #2
 800154e:	f000 faf9 	bl	8001b44 <HAL_Delay>
    spi_rw(data, 1);
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	2101      	movs	r1, #1
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff feec 	bl	8001334 <spi_rw>
    HAL_Delay(1000);
 800155c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001560:	f000 faf0 	bl	8001b44 <HAL_Delay>
    return PN532_STATUS_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40022000 	.word	0x40022000

08001574 <PN532_SPI_Init>:

void PN532_SPI_Init(PN532* pn532) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
    // init the pn532 functions
    pn532->reset =  PN532_Reset;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a0c      	ldr	r2, [pc, #48]	; (80015b0 <PN532_SPI_Init+0x3c>)
 8001580:	601a      	str	r2, [r3, #0]
    pn532->read_data = PN532_SPI_ReadData;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <PN532_SPI_Init+0x40>)
 8001586:	605a      	str	r2, [r3, #4]
    pn532->write_data = PN532_SPI_WriteData;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a0b      	ldr	r2, [pc, #44]	; (80015b8 <PN532_SPI_Init+0x44>)
 800158c:	609a      	str	r2, [r3, #8]
    pn532->wait_ready = PN532_SPI_WaitReady;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <PN532_SPI_Init+0x48>)
 8001592:	60da      	str	r2, [r3, #12]
    pn532->wakeup = PN532_SPI_Wakeup;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <PN532_SPI_Init+0x4c>)
 8001598:	611a      	str	r2, [r3, #16]
    pn532->log = PN532_Log;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a09      	ldr	r2, [pc, #36]	; (80015c4 <PN532_SPI_Init+0x50>)
 800159e:	615a      	str	r2, [r3, #20]

    // hardware wakeup
    pn532->wakeup();
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	4798      	blx	r3
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	080012d1 	.word	0x080012d1
 80015b4:	08001385 	.word	0x08001385
 80015b8:	08001435 	.word	0x08001435
 80015bc:	080014df 	.word	0x080014df
 80015c0:	08001531 	.word	0x08001531
 80015c4:	08001319 	.word	0x08001319

080015c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <HAL_MspInit+0x44>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	4a0e      	ldr	r2, [pc, #56]	; (800160c <HAL_MspInit+0x44>)
 80015d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d8:	6413      	str	r3, [r2, #64]	; 0x40
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <HAL_MspInit+0x44>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <HAL_MspInit+0x44>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	4a08      	ldr	r2, [pc, #32]	; (800160c <HAL_MspInit+0x44>)
 80015ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f0:	6453      	str	r3, [r2, #68]	; 0x44
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_MspInit+0x44>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800

08001610 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	; 0x28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a25      	ldr	r2, [pc, #148]	; (80016c4 <HAL_SPI_MspInit+0xb4>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d144      	bne.n	80016bc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001632:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <HAL_SPI_MspInit+0xb8>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	4a24      	ldr	r2, [pc, #144]	; (80016c8 <HAL_SPI_MspInit+0xb8>)
 8001638:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800163c:	6413      	str	r3, [r2, #64]	; 0x40
 800163e:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <HAL_SPI_MspInit+0xb8>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800164a:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <HAL_SPI_MspInit+0xb8>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a1e      	ldr	r2, [pc, #120]	; (80016c8 <HAL_SPI_MspInit+0xb8>)
 8001650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <HAL_SPI_MspInit+0xb8>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001662:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <HAL_SPI_MspInit+0xb8>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a18      	ldr	r2, [pc, #96]	; (80016c8 <HAL_SPI_MspInit+0xb8>)
 8001668:	f043 0302 	orr.w	r3, r3, #2
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <HAL_SPI_MspInit+0xb8>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800167a:	2302      	movs	r3, #2
 800167c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	2302      	movs	r3, #2
 8001680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001686:	2303      	movs	r3, #3
 8001688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800168a:	2305      	movs	r3, #5
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4619      	mov	r1, r3
 8001694:	480d      	ldr	r0, [pc, #52]	; (80016cc <HAL_SPI_MspInit+0xbc>)
 8001696:	f000 ff07 	bl	80024a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800169a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800169e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016ac:	2305      	movs	r3, #5
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4619      	mov	r1, r3
 80016b6:	4806      	ldr	r0, [pc, #24]	; (80016d0 <HAL_SPI_MspInit+0xc0>)
 80016b8:	f000 fef6 	bl	80024a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80016bc:	bf00      	nop
 80016be:	3728      	adds	r7, #40	; 0x28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40003800 	.word	0x40003800
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40022000 	.word	0x40022000
 80016d0:	40020400 	.word	0x40020400

080016d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b0aa      	sub	sp, #168	; 0xa8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016ec:	f107 0310 	add.w	r3, r7, #16
 80016f0:	2284      	movs	r2, #132	; 0x84
 80016f2:	2100      	movs	r1, #0
 80016f4:	4618      	mov	r0, r3
 80016f6:	f003 ff07 	bl	8005508 <memset>
  if(huart->Instance==USART6)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a3d      	ldr	r2, [pc, #244]	; (80017f4 <HAL_UART_MspInit+0x120>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d173      	bne.n	80017ec <HAL_UART_MspInit+0x118>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001704:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001708:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800170a:	2300      	movs	r3, #0
 800170c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800170e:	f107 0310 	add.w	r3, r7, #16
 8001712:	4618      	mov	r0, r3
 8001714:	f001 fd68 	bl	80031e8 <HAL_RCCEx_PeriphCLKConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800171e:	f7ff fa3b 	bl	8000b98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001722:	4b35      	ldr	r3, [pc, #212]	; (80017f8 <HAL_UART_MspInit+0x124>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	4a34      	ldr	r2, [pc, #208]	; (80017f8 <HAL_UART_MspInit+0x124>)
 8001728:	f043 0320 	orr.w	r3, r3, #32
 800172c:	6453      	str	r3, [r2, #68]	; 0x44
 800172e:	4b32      	ldr	r3, [pc, #200]	; (80017f8 <HAL_UART_MspInit+0x124>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	f003 0320 	and.w	r3, r3, #32
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800173a:	4b2f      	ldr	r3, [pc, #188]	; (80017f8 <HAL_UART_MspInit+0x124>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a2e      	ldr	r2, [pc, #184]	; (80017f8 <HAL_UART_MspInit+0x124>)
 8001740:	f043 0304 	orr.w	r3, r3, #4
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b2c      	ldr	r3, [pc, #176]	; (80017f8 <HAL_UART_MspInit+0x124>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
    /**USART6 GPIO Configuration
    PC7     ------> USART6_RX
    PC6     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001752:	23c0      	movs	r3, #192	; 0xc0
 8001754:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001758:	2302      	movs	r3, #2
 800175a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001764:	2303      	movs	r3, #3
 8001766:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800176a:	2308      	movs	r3, #8
 800176c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001770:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001774:	4619      	mov	r1, r3
 8001776:	4821      	ldr	r0, [pc, #132]	; (80017fc <HAL_UART_MspInit+0x128>)
 8001778:	f000 fe96 	bl	80024a8 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800177c:	4b20      	ldr	r3, [pc, #128]	; (8001800 <HAL_UART_MspInit+0x12c>)
 800177e:	4a21      	ldr	r2, [pc, #132]	; (8001804 <HAL_UART_MspInit+0x130>)
 8001780:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001782:	4b1f      	ldr	r3, [pc, #124]	; (8001800 <HAL_UART_MspInit+0x12c>)
 8001784:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001788:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800178a:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <HAL_UART_MspInit+0x12c>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <HAL_UART_MspInit+0x12c>)
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001796:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <HAL_UART_MspInit+0x12c>)
 8001798:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800179c:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800179e:	4b18      	ldr	r3, [pc, #96]	; (8001800 <HAL_UART_MspInit+0x12c>)
 80017a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017a4:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017a6:	4b16      	ldr	r3, [pc, #88]	; (8001800 <HAL_UART_MspInit+0x12c>)
 80017a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ac:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80017ae:	4b14      	ldr	r3, [pc, #80]	; (8001800 <HAL_UART_MspInit+0x12c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_UART_MspInit+0x12c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <HAL_UART_MspInit+0x12c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80017c0:	480f      	ldr	r0, [pc, #60]	; (8001800 <HAL_UART_MspInit+0x12c>)
 80017c2:	f000 faf5 	bl	8001db0 <HAL_DMA_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 80017cc:	f7ff f9e4 	bl	8000b98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a0b      	ldr	r2, [pc, #44]	; (8001800 <HAL_UART_MspInit+0x12c>)
 80017d4:	675a      	str	r2, [r3, #116]	; 0x74
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <HAL_UART_MspInit+0x12c>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80017dc:	2200      	movs	r2, #0
 80017de:	2100      	movs	r1, #0
 80017e0:	2047      	movs	r0, #71	; 0x47
 80017e2:	f000 faae 	bl	8001d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80017e6:	2047      	movs	r0, #71	; 0x47
 80017e8:	f000 fac7 	bl	8001d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80017ec:	bf00      	nop
 80017ee:	37a8      	adds	r7, #168	; 0xa8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40011400 	.word	0x40011400
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40020800 	.word	0x40020800
 8001800:	20000178 	.word	0x20000178
 8001804:	40026428 	.word	0x40026428

08001808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800180c:	e7fe      	b.n	800180c <NMI_Handler+0x4>

0800180e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001812:	e7fe      	b.n	8001812 <HardFault_Handler+0x4>

08001814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <MemManage_Handler+0x4>

0800181a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181e:	e7fe      	b.n	800181e <BusFault_Handler+0x4>

08001820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <UsageFault_Handler+0x4>

08001826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001854:	f000 f956 	bl	8001b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}

0800185c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001860:	4802      	ldr	r0, [pc, #8]	; (800186c <DMA2_Stream1_IRQHandler+0x10>)
 8001862:	f000 fbe5 	bl	8002030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000178 	.word	0x20000178

08001870 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	HAL_UART_Receive(&huart6, (uint8_t*)&buffer[buffer_index++], 1, 10);
 8001874:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <USART6_IRQHandler+0x3c>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	b2d1      	uxtb	r1, r2
 800187c:	4a0b      	ldr	r2, [pc, #44]	; (80018ac <USART6_IRQHandler+0x3c>)
 800187e:	7011      	strb	r1, [r2, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <USART6_IRQHandler+0x40>)
 8001884:	18d1      	adds	r1, r2, r3
 8001886:	230a      	movs	r3, #10
 8001888:	2201      	movs	r2, #1
 800188a:	480a      	ldr	r0, [pc, #40]	; (80018b4 <USART6_IRQHandler+0x44>)
 800188c:	f002 fdb3 	bl	80043f6 <HAL_UART_Receive>

	if(buffer[buffer_index-1] == '\n')
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <USART6_IRQHandler+0x3c>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	3b01      	subs	r3, #1
 8001896:	4a06      	ldr	r2, [pc, #24]	; (80018b0 <USART6_IRQHandler+0x40>)
 8001898:	5cd3      	ldrb	r3, [r2, r3]
 800189a:	2b0a      	cmp	r3, #10
 800189c:	d101      	bne.n	80018a2 <USART6_IRQHandler+0x32>
		Message_handler();
 800189e:	f7fe fec3 	bl	8000628 <Message_handler>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80018a2:	4804      	ldr	r0, [pc, #16]	; (80018b4 <USART6_IRQHandler+0x44>)
 80018a4:	f002 fe6c 	bl	8004580 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	2000031b 	.word	0x2000031b
 80018b0:	200002e8 	.word	0x200002e8
 80018b4:	200000f0 	.word	0x200000f0

080018b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	e00a      	b.n	80018e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018ca:	f3af 8000 	nop.w
 80018ce:	4601      	mov	r1, r0
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	60ba      	str	r2, [r7, #8]
 80018d6:	b2ca      	uxtb	r2, r1
 80018d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	3301      	adds	r3, #1
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	dbf0      	blt.n	80018ca <_read+0x12>
	}

return len;
 80018e8:	687b      	ldr	r3, [r7, #4]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	60f8      	str	r0, [r7, #12]
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	e009      	b.n	8001918 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	1c5a      	adds	r2, r3, #1
 8001908:	60ba      	str	r2, [r7, #8]
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff f931 	bl	8000b74 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3301      	adds	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	429a      	cmp	r2, r3
 800191e:	dbf1      	blt.n	8001904 <_write+0x12>
	}
	return len;
 8001920:	687b      	ldr	r3, [r7, #4]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <_close>:

int _close(int file)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
	return -1;
 8001932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001936:	4618      	mov	r0, r3
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001952:	605a      	str	r2, [r3, #4]
	return 0;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <_isatty>:

int _isatty(int file)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
	return 1;
 800196a:	2301      	movs	r3, #1
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
	return 0;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800199c:	4a14      	ldr	r2, [pc, #80]	; (80019f0 <_sbrk+0x5c>)
 800199e:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <_sbrk+0x60>)
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a8:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <_sbrk+0x64>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d102      	bne.n	80019b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b0:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <_sbrk+0x64>)
 80019b2:	4a12      	ldr	r2, [pc, #72]	; (80019fc <_sbrk+0x68>)
 80019b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <_sbrk+0x64>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d207      	bcs.n	80019d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c4:	f003 fd76 	bl	80054b4 <__errno>
 80019c8:	4603      	mov	r3, r0
 80019ca:	220c      	movs	r2, #12
 80019cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019d2:	e009      	b.n	80019e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <_sbrk+0x64>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019da:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <_sbrk+0x64>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	4a05      	ldr	r2, [pc, #20]	; (80019f8 <_sbrk+0x64>)
 80019e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019e6:	68fb      	ldr	r3, [r7, #12]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20050000 	.word	0x20050000
 80019f4:	00000400 	.word	0x00000400
 80019f8:	2000031c 	.word	0x2000031c
 80019fc:	20000338 	.word	0x20000338

08001a00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <SystemInit+0x20>)
 8001a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a0a:	4a05      	ldr	r2, [pc, #20]	; (8001a20 <SystemInit+0x20>)
 8001a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a28:	480d      	ldr	r0, [pc, #52]	; (8001a60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a2a:	490e      	ldr	r1, [pc, #56]	; (8001a64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a2c:	4a0e      	ldr	r2, [pc, #56]	; (8001a68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a30:	e002      	b.n	8001a38 <LoopCopyDataInit>

08001a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a36:	3304      	adds	r3, #4

08001a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a3c:	d3f9      	bcc.n	8001a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a3e:	4a0b      	ldr	r2, [pc, #44]	; (8001a6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a40:	4c0b      	ldr	r4, [pc, #44]	; (8001a70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a44:	e001      	b.n	8001a4a <LoopFillZerobss>

08001a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a48:	3204      	adds	r2, #4

08001a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a4c:	d3fb      	bcc.n	8001a46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a4e:	f7ff ffd7 	bl	8001a00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a52:	f003 fd35 	bl	80054c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a56:	f7fe fe3f 	bl	80006d8 <main>
  bx  lr    
 8001a5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a5c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a64:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a68:	08006c1c 	.word	0x08006c1c
  ldr r2, =_sbss
 8001a6c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a70:	20000334 	.word	0x20000334

08001a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a74:	e7fe      	b.n	8001a74 <ADC_IRQHandler>
	...

08001a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <HAL_Init+0x28>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a07      	ldr	r2, [pc, #28]	; (8001aa0 <HAL_Init+0x28>)
 8001a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a88:	2003      	movs	r0, #3
 8001a8a:	f000 f94f 	bl	8001d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a8e:	200f      	movs	r0, #15
 8001a90:	f000 f808 	bl	8001aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a94:	f7ff fd98 	bl	80015c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023c00 	.word	0x40023c00

08001aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <HAL_InitTick+0x54>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <HAL_InitTick+0x58>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 f967 	bl	8001d96 <HAL_SYSTICK_Config>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e00e      	b.n	8001af0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b0f      	cmp	r3, #15
 8001ad6:	d80a      	bhi.n	8001aee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ae0:	f000 f92f 	bl	8001d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ae4:	4a06      	ldr	r2, [pc, #24]	; (8001b00 <HAL_InitTick+0x5c>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	e000      	b.n	8001af0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000000 	.word	0x20000000
 8001afc:	20000008 	.word	0x20000008
 8001b00:	20000004 	.word	0x20000004

08001b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_IncTick+0x20>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_IncTick+0x24>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <HAL_IncTick+0x24>)
 8001b16:	6013      	str	r3, [r2, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000008 	.word	0x20000008
 8001b28:	20000320 	.word	0x20000320

08001b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <HAL_GetTick+0x14>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	20000320 	.word	0x20000320

08001b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b4c:	f7ff ffee 	bl	8001b2c <HAL_GetTick>
 8001b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b5c:	d005      	beq.n	8001b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_Delay+0x44>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4413      	add	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b6a:	bf00      	nop
 8001b6c:	f7ff ffde 	bl	8001b2c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d8f7      	bhi.n	8001b6c <HAL_Delay+0x28>
  {
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	bf00      	nop
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000008 	.word	0x20000008

08001b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <__NVIC_SetPriorityGrouping+0x40>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bba:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <__NVIC_SetPriorityGrouping+0x40>)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	60d3      	str	r3, [r2, #12]
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000ed00 	.word	0xe000ed00
 8001bd0:	05fa0000 	.word	0x05fa0000

08001bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd8:	4b04      	ldr	r3, [pc, #16]	; (8001bec <__NVIC_GetPriorityGrouping+0x18>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	f003 0307 	and.w	r3, r3, #7
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	db0b      	blt.n	8001c1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	f003 021f 	and.w	r2, r3, #31
 8001c08:	4907      	ldr	r1, [pc, #28]	; (8001c28 <__NVIC_EnableIRQ+0x38>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	2001      	movs	r0, #1
 8001c12:	fa00 f202 	lsl.w	r2, r0, r2
 8001c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000e100 	.word	0xe000e100

08001c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	6039      	str	r1, [r7, #0]
 8001c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	db0a      	blt.n	8001c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	490c      	ldr	r1, [pc, #48]	; (8001c78 <__NVIC_SetPriority+0x4c>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	0112      	lsls	r2, r2, #4
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	440b      	add	r3, r1
 8001c50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c54:	e00a      	b.n	8001c6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4908      	ldr	r1, [pc, #32]	; (8001c7c <__NVIC_SetPriority+0x50>)
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	3b04      	subs	r3, #4
 8001c64:	0112      	lsls	r2, r2, #4
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	440b      	add	r3, r1
 8001c6a:	761a      	strb	r2, [r3, #24]
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000e100 	.word	0xe000e100
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f1c3 0307 	rsb	r3, r3, #7
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	bf28      	it	cs
 8001c9e:	2304      	movcs	r3, #4
 8001ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	2b06      	cmp	r3, #6
 8001ca8:	d902      	bls.n	8001cb0 <NVIC_EncodePriority+0x30>
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3b03      	subs	r3, #3
 8001cae:	e000      	b.n	8001cb2 <NVIC_EncodePriority+0x32>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd2:	43d9      	mvns	r1, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	4313      	orrs	r3, r2
         );
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3724      	adds	r7, #36	; 0x24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
	...

08001ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf8:	d301      	bcc.n	8001cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00f      	b.n	8001d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <SysTick_Config+0x40>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d06:	210f      	movs	r1, #15
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d0c:	f7ff ff8e 	bl	8001c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <SysTick_Config+0x40>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <SysTick_Config+0x40>)
 8001d18:	2207      	movs	r2, #7
 8001d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	e000e010 	.word	0xe000e010

08001d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ff29 	bl	8001b8c <__NVIC_SetPriorityGrouping>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b086      	sub	sp, #24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	4603      	mov	r3, r0
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d54:	f7ff ff3e 	bl	8001bd4 <__NVIC_GetPriorityGrouping>
 8001d58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	68b9      	ldr	r1, [r7, #8]
 8001d5e:	6978      	ldr	r0, [r7, #20]
 8001d60:	f7ff ff8e 	bl	8001c80 <NVIC_EncodePriority>
 8001d64:	4602      	mov	r2, r0
 8001d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff5d 	bl	8001c2c <__NVIC_SetPriority>
}
 8001d72:	bf00      	nop
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4603      	mov	r3, r0
 8001d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff31 	bl	8001bf0 <__NVIC_EnableIRQ>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff ffa2 	bl	8001ce8 <SysTick_Config>
 8001da4:	4603      	mov	r3, r0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001dbc:	f7ff feb6 	bl	8001b2c <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e099      	b.n	8001f00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0201 	bic.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dec:	e00f      	b.n	8001e0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dee:	f7ff fe9d 	bl	8001b2c <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b05      	cmp	r3, #5
 8001dfa:	d908      	bls.n	8001e0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2203      	movs	r2, #3
 8001e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e078      	b.n	8001f00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1e8      	bne.n	8001dee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	4b38      	ldr	r3, [pc, #224]	; (8001f08 <HAL_DMA_Init+0x158>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d107      	bne.n	8001e78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e70:	4313      	orrs	r3, r2
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	f023 0307 	bic.w	r3, r3, #7
 8001e8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d117      	bne.n	8001ed2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00e      	beq.n	8001ed2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 fa7b 	bl	80023b0 <DMA_CheckFifoParam>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d008      	beq.n	8001ed2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2240      	movs	r2, #64	; 0x40
 8001ec4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e016      	b.n	8001f00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 fa32 	bl	8002344 <DMA_CalcBaseAndBitshift>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee8:	223f      	movs	r2, #63	; 0x3f
 8001eea:	409a      	lsls	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	f010803f 	.word	0xf010803f

08001f0c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f18:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f1a:	f7ff fe07 	bl	8001b2c <HAL_GetTick>
 8001f1e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d008      	beq.n	8001f3e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2280      	movs	r2, #128	; 0x80
 8001f30:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e052      	b.n	8001fe4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0216 	bic.w	r2, r2, #22
 8001f4c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	695a      	ldr	r2, [r3, #20]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f5c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d103      	bne.n	8001f6e <HAL_DMA_Abort+0x62>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d007      	beq.n	8001f7e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0208 	bic.w	r2, r2, #8
 8001f7c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0201 	bic.w	r2, r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f8e:	e013      	b.n	8001fb8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f90:	f7ff fdcc 	bl	8001b2c <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b05      	cmp	r3, #5
 8001f9c:	d90c      	bls.n	8001fb8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e015      	b.n	8001fe4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1e4      	bne.n	8001f90 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fca:	223f      	movs	r2, #63	; 0x3f
 8001fcc:	409a      	lsls	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d004      	beq.n	800200a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2280      	movs	r2, #128	; 0x80
 8002004:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e00c      	b.n	8002024 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2205      	movs	r2, #5
 800200e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0201 	bic.w	r2, r2, #1
 8002020:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800203c:	4b8e      	ldr	r3, [pc, #568]	; (8002278 <HAL_DMA_IRQHandler+0x248>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a8e      	ldr	r2, [pc, #568]	; (800227c <HAL_DMA_IRQHandler+0x24c>)
 8002042:	fba2 2303 	umull	r2, r3, r2, r3
 8002046:	0a9b      	lsrs	r3, r3, #10
 8002048:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205a:	2208      	movs	r2, #8
 800205c:	409a      	lsls	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4013      	ands	r3, r2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d01a      	beq.n	800209c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	d013      	beq.n	800209c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0204 	bic.w	r2, r2, #4
 8002082:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002088:	2208      	movs	r2, #8
 800208a:	409a      	lsls	r2, r3
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002094:	f043 0201 	orr.w	r2, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a0:	2201      	movs	r2, #1
 80020a2:	409a      	lsls	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d012      	beq.n	80020d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00b      	beq.n	80020d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020be:	2201      	movs	r2, #1
 80020c0:	409a      	lsls	r2, r3
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ca:	f043 0202 	orr.w	r2, r3, #2
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d6:	2204      	movs	r2, #4
 80020d8:	409a      	lsls	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4013      	ands	r3, r2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d012      	beq.n	8002108 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00b      	beq.n	8002108 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f4:	2204      	movs	r2, #4
 80020f6:	409a      	lsls	r2, r3
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002100:	f043 0204 	orr.w	r2, r3, #4
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210c:	2210      	movs	r2, #16
 800210e:	409a      	lsls	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4013      	ands	r3, r2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d043      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b00      	cmp	r3, #0
 8002124:	d03c      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212a:	2210      	movs	r2, #16
 800212c:	409a      	lsls	r2, r3
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d018      	beq.n	8002172 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d108      	bne.n	8002160 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	2b00      	cmp	r3, #0
 8002154:	d024      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	4798      	blx	r3
 800215e:	e01f      	b.n	80021a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002164:	2b00      	cmp	r3, #0
 8002166:	d01b      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	4798      	blx	r3
 8002170:	e016      	b.n	80021a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217c:	2b00      	cmp	r3, #0
 800217e:	d107      	bne.n	8002190 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0208 	bic.w	r2, r2, #8
 800218e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a4:	2220      	movs	r2, #32
 80021a6:	409a      	lsls	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 808f 	beq.w	80022d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0310 	and.w	r3, r3, #16
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 8087 	beq.w	80022d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c6:	2220      	movs	r2, #32
 80021c8:	409a      	lsls	r2, r3
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b05      	cmp	r3, #5
 80021d8:	d136      	bne.n	8002248 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0216 	bic.w	r2, r2, #22
 80021e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	695a      	ldr	r2, [r3, #20]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d103      	bne.n	800220a <HAL_DMA_IRQHandler+0x1da>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002206:	2b00      	cmp	r3, #0
 8002208:	d007      	beq.n	800221a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0208 	bic.w	r2, r2, #8
 8002218:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221e:	223f      	movs	r2, #63	; 0x3f
 8002220:	409a      	lsls	r2, r3
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800223a:	2b00      	cmp	r3, #0
 800223c:	d07e      	beq.n	800233c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	4798      	blx	r3
        }
        return;
 8002246:	e079      	b.n	800233c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d01d      	beq.n	8002292 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10d      	bne.n	8002280 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002268:	2b00      	cmp	r3, #0
 800226a:	d031      	beq.n	80022d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	4798      	blx	r3
 8002274:	e02c      	b.n	80022d0 <HAL_DMA_IRQHandler+0x2a0>
 8002276:	bf00      	nop
 8002278:	20000000 	.word	0x20000000
 800227c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002284:	2b00      	cmp	r3, #0
 8002286:	d023      	beq.n	80022d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	4798      	blx	r3
 8002290:	e01e      	b.n	80022d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10f      	bne.n	80022c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0210 	bic.w	r2, r2, #16
 80022ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d032      	beq.n	800233e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d022      	beq.n	800232a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2205      	movs	r2, #5
 80022e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0201 	bic.w	r2, r2, #1
 80022fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	3301      	adds	r3, #1
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	429a      	cmp	r2, r3
 8002306:	d307      	bcc.n	8002318 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f2      	bne.n	80022fc <HAL_DMA_IRQHandler+0x2cc>
 8002316:	e000      	b.n	800231a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002318:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232e:	2b00      	cmp	r3, #0
 8002330:	d005      	beq.n	800233e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	4798      	blx	r3
 800233a:	e000      	b.n	800233e <HAL_DMA_IRQHandler+0x30e>
        return;
 800233c:	bf00      	nop
    }
  }
}
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	3b10      	subs	r3, #16
 8002354:	4a13      	ldr	r2, [pc, #76]	; (80023a4 <DMA_CalcBaseAndBitshift+0x60>)
 8002356:	fba2 2303 	umull	r2, r3, r2, r3
 800235a:	091b      	lsrs	r3, r3, #4
 800235c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800235e:	4a12      	ldr	r2, [pc, #72]	; (80023a8 <DMA_CalcBaseAndBitshift+0x64>)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4413      	add	r3, r2
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2b03      	cmp	r3, #3
 8002370:	d908      	bls.n	8002384 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <DMA_CalcBaseAndBitshift+0x68>)
 800237a:	4013      	ands	r3, r2
 800237c:	1d1a      	adds	r2, r3, #4
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	659a      	str	r2, [r3, #88]	; 0x58
 8002382:	e006      	b.n	8002392 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	461a      	mov	r2, r3
 800238a:	4b08      	ldr	r3, [pc, #32]	; (80023ac <DMA_CalcBaseAndBitshift+0x68>)
 800238c:	4013      	ands	r3, r2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002396:	4618      	mov	r0, r3
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	aaaaaaab 	.word	0xaaaaaaab
 80023a8:	08006b6c 	.word	0x08006b6c
 80023ac:	fffffc00 	.word	0xfffffc00

080023b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023b8:	2300      	movs	r3, #0
 80023ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d11f      	bne.n	800240a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d856      	bhi.n	800247e <DMA_CheckFifoParam+0xce>
 80023d0:	a201      	add	r2, pc, #4	; (adr r2, 80023d8 <DMA_CheckFifoParam+0x28>)
 80023d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d6:	bf00      	nop
 80023d8:	080023e9 	.word	0x080023e9
 80023dc:	080023fb 	.word	0x080023fb
 80023e0:	080023e9 	.word	0x080023e9
 80023e4:	0800247f 	.word	0x0800247f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d046      	beq.n	8002482 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023f8:	e043      	b.n	8002482 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002402:	d140      	bne.n	8002486 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002408:	e03d      	b.n	8002486 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002412:	d121      	bne.n	8002458 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b03      	cmp	r3, #3
 8002418:	d837      	bhi.n	800248a <DMA_CheckFifoParam+0xda>
 800241a:	a201      	add	r2, pc, #4	; (adr r2, 8002420 <DMA_CheckFifoParam+0x70>)
 800241c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002420:	08002431 	.word	0x08002431
 8002424:	08002437 	.word	0x08002437
 8002428:	08002431 	.word	0x08002431
 800242c:	08002449 	.word	0x08002449
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
      break;
 8002434:	e030      	b.n	8002498 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d025      	beq.n	800248e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002446:	e022      	b.n	800248e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002450:	d11f      	bne.n	8002492 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002456:	e01c      	b.n	8002492 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d903      	bls.n	8002466 <DMA_CheckFifoParam+0xb6>
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	2b03      	cmp	r3, #3
 8002462:	d003      	beq.n	800246c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002464:	e018      	b.n	8002498 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	73fb      	strb	r3, [r7, #15]
      break;
 800246a:	e015      	b.n	8002498 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00e      	beq.n	8002496 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
      break;
 800247c:	e00b      	b.n	8002496 <DMA_CheckFifoParam+0xe6>
      break;
 800247e:	bf00      	nop
 8002480:	e00a      	b.n	8002498 <DMA_CheckFifoParam+0xe8>
      break;
 8002482:	bf00      	nop
 8002484:	e008      	b.n	8002498 <DMA_CheckFifoParam+0xe8>
      break;
 8002486:	bf00      	nop
 8002488:	e006      	b.n	8002498 <DMA_CheckFifoParam+0xe8>
      break;
 800248a:	bf00      	nop
 800248c:	e004      	b.n	8002498 <DMA_CheckFifoParam+0xe8>
      break;
 800248e:	bf00      	nop
 8002490:	e002      	b.n	8002498 <DMA_CheckFifoParam+0xe8>
      break;   
 8002492:	bf00      	nop
 8002494:	e000      	b.n	8002498 <DMA_CheckFifoParam+0xe8>
      break;
 8002496:	bf00      	nop
    }
  } 
  
  return status; 
 8002498:	7bfb      	ldrb	r3, [r7, #15]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop

080024a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b089      	sub	sp, #36	; 0x24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024be:	2300      	movs	r3, #0
 80024c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80024c2:	2300      	movs	r3, #0
 80024c4:	61fb      	str	r3, [r7, #28]
 80024c6:	e175      	b.n	80027b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024c8:	2201      	movs	r2, #1
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4013      	ands	r3, r2
 80024da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	f040 8164 	bne.w	80027ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d005      	beq.n	80024fe <HAL_GPIO_Init+0x56>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d130      	bne.n	8002560 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	2203      	movs	r2, #3
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002534:	2201      	movs	r2, #1
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	091b      	lsrs	r3, r3, #4
 800254a:	f003 0201 	and.w	r2, r3, #1
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0303 	and.w	r3, r3, #3
 8002568:	2b03      	cmp	r3, #3
 800256a:	d017      	beq.n	800259c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	2203      	movs	r2, #3
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d123      	bne.n	80025f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	08da      	lsrs	r2, r3, #3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3208      	adds	r2, #8
 80025b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	220f      	movs	r2, #15
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	08da      	lsrs	r2, r3, #3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3208      	adds	r2, #8
 80025ea:	69b9      	ldr	r1, [r7, #24]
 80025ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	2203      	movs	r2, #3
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0203 	and.w	r2, r3, #3
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 80be 	beq.w	80027ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002632:	4b66      	ldr	r3, [pc, #408]	; (80027cc <HAL_GPIO_Init+0x324>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	4a65      	ldr	r2, [pc, #404]	; (80027cc <HAL_GPIO_Init+0x324>)
 8002638:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800263c:	6453      	str	r3, [r2, #68]	; 0x44
 800263e:	4b63      	ldr	r3, [pc, #396]	; (80027cc <HAL_GPIO_Init+0x324>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800264a:	4a61      	ldr	r2, [pc, #388]	; (80027d0 <HAL_GPIO_Init+0x328>)
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	089b      	lsrs	r3, r3, #2
 8002650:	3302      	adds	r3, #2
 8002652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	220f      	movs	r2, #15
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a58      	ldr	r2, [pc, #352]	; (80027d4 <HAL_GPIO_Init+0x32c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d037      	beq.n	80026e6 <HAL_GPIO_Init+0x23e>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a57      	ldr	r2, [pc, #348]	; (80027d8 <HAL_GPIO_Init+0x330>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d031      	beq.n	80026e2 <HAL_GPIO_Init+0x23a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a56      	ldr	r2, [pc, #344]	; (80027dc <HAL_GPIO_Init+0x334>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d02b      	beq.n	80026de <HAL_GPIO_Init+0x236>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a55      	ldr	r2, [pc, #340]	; (80027e0 <HAL_GPIO_Init+0x338>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d025      	beq.n	80026da <HAL_GPIO_Init+0x232>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a54      	ldr	r2, [pc, #336]	; (80027e4 <HAL_GPIO_Init+0x33c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d01f      	beq.n	80026d6 <HAL_GPIO_Init+0x22e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a53      	ldr	r2, [pc, #332]	; (80027e8 <HAL_GPIO_Init+0x340>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d019      	beq.n	80026d2 <HAL_GPIO_Init+0x22a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a52      	ldr	r2, [pc, #328]	; (80027ec <HAL_GPIO_Init+0x344>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d013      	beq.n	80026ce <HAL_GPIO_Init+0x226>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a51      	ldr	r2, [pc, #324]	; (80027f0 <HAL_GPIO_Init+0x348>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d00d      	beq.n	80026ca <HAL_GPIO_Init+0x222>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a50      	ldr	r2, [pc, #320]	; (80027f4 <HAL_GPIO_Init+0x34c>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d007      	beq.n	80026c6 <HAL_GPIO_Init+0x21e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a4f      	ldr	r2, [pc, #316]	; (80027f8 <HAL_GPIO_Init+0x350>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d101      	bne.n	80026c2 <HAL_GPIO_Init+0x21a>
 80026be:	2309      	movs	r3, #9
 80026c0:	e012      	b.n	80026e8 <HAL_GPIO_Init+0x240>
 80026c2:	230a      	movs	r3, #10
 80026c4:	e010      	b.n	80026e8 <HAL_GPIO_Init+0x240>
 80026c6:	2308      	movs	r3, #8
 80026c8:	e00e      	b.n	80026e8 <HAL_GPIO_Init+0x240>
 80026ca:	2307      	movs	r3, #7
 80026cc:	e00c      	b.n	80026e8 <HAL_GPIO_Init+0x240>
 80026ce:	2306      	movs	r3, #6
 80026d0:	e00a      	b.n	80026e8 <HAL_GPIO_Init+0x240>
 80026d2:	2305      	movs	r3, #5
 80026d4:	e008      	b.n	80026e8 <HAL_GPIO_Init+0x240>
 80026d6:	2304      	movs	r3, #4
 80026d8:	e006      	b.n	80026e8 <HAL_GPIO_Init+0x240>
 80026da:	2303      	movs	r3, #3
 80026dc:	e004      	b.n	80026e8 <HAL_GPIO_Init+0x240>
 80026de:	2302      	movs	r3, #2
 80026e0:	e002      	b.n	80026e8 <HAL_GPIO_Init+0x240>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <HAL_GPIO_Init+0x240>
 80026e6:	2300      	movs	r3, #0
 80026e8:	69fa      	ldr	r2, [r7, #28]
 80026ea:	f002 0203 	and.w	r2, r2, #3
 80026ee:	0092      	lsls	r2, r2, #2
 80026f0:	4093      	lsls	r3, r2
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026f8:	4935      	ldr	r1, [pc, #212]	; (80027d0 <HAL_GPIO_Init+0x328>)
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	089b      	lsrs	r3, r3, #2
 80026fe:	3302      	adds	r3, #2
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002706:	4b3d      	ldr	r3, [pc, #244]	; (80027fc <HAL_GPIO_Init+0x354>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	43db      	mvns	r3, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4013      	ands	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800272a:	4a34      	ldr	r2, [pc, #208]	; (80027fc <HAL_GPIO_Init+0x354>)
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002730:	4b32      	ldr	r3, [pc, #200]	; (80027fc <HAL_GPIO_Init+0x354>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002754:	4a29      	ldr	r2, [pc, #164]	; (80027fc <HAL_GPIO_Init+0x354>)
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800275a:	4b28      	ldr	r3, [pc, #160]	; (80027fc <HAL_GPIO_Init+0x354>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800277e:	4a1f      	ldr	r2, [pc, #124]	; (80027fc <HAL_GPIO_Init+0x354>)
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002784:	4b1d      	ldr	r3, [pc, #116]	; (80027fc <HAL_GPIO_Init+0x354>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027a8:	4a14      	ldr	r2, [pc, #80]	; (80027fc <HAL_GPIO_Init+0x354>)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	3301      	adds	r3, #1
 80027b2:	61fb      	str	r3, [r7, #28]
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	2b0f      	cmp	r3, #15
 80027b8:	f67f ae86 	bls.w	80024c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027bc:	bf00      	nop
 80027be:	bf00      	nop
 80027c0:	3724      	adds	r7, #36	; 0x24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40013800 	.word	0x40013800
 80027d4:	40020000 	.word	0x40020000
 80027d8:	40020400 	.word	0x40020400
 80027dc:	40020800 	.word	0x40020800
 80027e0:	40020c00 	.word	0x40020c00
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40021400 	.word	0x40021400
 80027ec:	40021800 	.word	0x40021800
 80027f0:	40021c00 	.word	0x40021c00
 80027f4:	40022000 	.word	0x40022000
 80027f8:	40022400 	.word	0x40022400
 80027fc:	40013c00 	.word	0x40013c00

08002800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	807b      	strh	r3, [r7, #2]
 800280c:	4613      	mov	r3, r2
 800280e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002810:	787b      	ldrb	r3, [r7, #1]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002816:	887a      	ldrh	r2, [r7, #2]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800281c:	e003      	b.n	8002826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800281e:	887b      	ldrh	r3, [r7, #2]
 8002820:	041a      	lsls	r2, r3, #16
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	619a      	str	r2, [r3, #24]
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
	...

08002834 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800283a:	2300      	movs	r3, #0
 800283c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800283e:	4b23      	ldr	r3, [pc, #140]	; (80028cc <HAL_PWREx_EnableOverDrive+0x98>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	4a22      	ldr	r2, [pc, #136]	; (80028cc <HAL_PWREx_EnableOverDrive+0x98>)
 8002844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002848:	6413      	str	r3, [r2, #64]	; 0x40
 800284a:	4b20      	ldr	r3, [pc, #128]	; (80028cc <HAL_PWREx_EnableOverDrive+0x98>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002856:	4b1e      	ldr	r3, [pc, #120]	; (80028d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a1d      	ldr	r2, [pc, #116]	; (80028d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800285c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002860:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002862:	f7ff f963 	bl	8001b2c <HAL_GetTick>
 8002866:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002868:	e009      	b.n	800287e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800286a:	f7ff f95f 	bl	8001b2c <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002878:	d901      	bls.n	800287e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e022      	b.n	80028c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800287e:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800288a:	d1ee      	bne.n	800286a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800288c:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0f      	ldr	r2, [pc, #60]	; (80028d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002896:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002898:	f7ff f948 	bl	8001b2c <HAL_GetTick>
 800289c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800289e:	e009      	b.n	80028b4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028a0:	f7ff f944 	bl	8001b2c <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028ae:	d901      	bls.n	80028b4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e007      	b.n	80028c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028c0:	d1ee      	bne.n	80028a0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40007000 	.word	0x40007000

080028d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80028dc:	2300      	movs	r3, #0
 80028de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e291      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 8087 	beq.w	8002a06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028f8:	4b96      	ldr	r3, [pc, #600]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 030c 	and.w	r3, r3, #12
 8002900:	2b04      	cmp	r3, #4
 8002902:	d00c      	beq.n	800291e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002904:	4b93      	ldr	r3, [pc, #588]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 030c 	and.w	r3, r3, #12
 800290c:	2b08      	cmp	r3, #8
 800290e:	d112      	bne.n	8002936 <HAL_RCC_OscConfig+0x62>
 8002910:	4b90      	ldr	r3, [pc, #576]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002918:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800291c:	d10b      	bne.n	8002936 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291e:	4b8d      	ldr	r3, [pc, #564]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d06c      	beq.n	8002a04 <HAL_RCC_OscConfig+0x130>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d168      	bne.n	8002a04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e26b      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800293e:	d106      	bne.n	800294e <HAL_RCC_OscConfig+0x7a>
 8002940:	4b84      	ldr	r3, [pc, #528]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a83      	ldr	r2, [pc, #524]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	e02e      	b.n	80029ac <HAL_RCC_OscConfig+0xd8>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10c      	bne.n	8002970 <HAL_RCC_OscConfig+0x9c>
 8002956:	4b7f      	ldr	r3, [pc, #508]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a7e      	ldr	r2, [pc, #504]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 800295c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	4b7c      	ldr	r3, [pc, #496]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a7b      	ldr	r2, [pc, #492]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002968:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	e01d      	b.n	80029ac <HAL_RCC_OscConfig+0xd8>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002978:	d10c      	bne.n	8002994 <HAL_RCC_OscConfig+0xc0>
 800297a:	4b76      	ldr	r3, [pc, #472]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a75      	ldr	r2, [pc, #468]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	4b73      	ldr	r3, [pc, #460]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a72      	ldr	r2, [pc, #456]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 800298c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	e00b      	b.n	80029ac <HAL_RCC_OscConfig+0xd8>
 8002994:	4b6f      	ldr	r3, [pc, #444]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a6e      	ldr	r2, [pc, #440]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 800299a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	4b6c      	ldr	r3, [pc, #432]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a6b      	ldr	r2, [pc, #428]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 80029a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d013      	beq.n	80029dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7ff f8ba 	bl	8001b2c <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029bc:	f7ff f8b6 	bl	8001b2c <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b64      	cmp	r3, #100	; 0x64
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e21f      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ce:	4b61      	ldr	r3, [pc, #388]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0xe8>
 80029da:	e014      	b.n	8002a06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029dc:	f7ff f8a6 	bl	8001b2c <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029e4:	f7ff f8a2 	bl	8001b2c <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b64      	cmp	r3, #100	; 0x64
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e20b      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029f6:	4b57      	ldr	r3, [pc, #348]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x110>
 8002a02:	e000      	b.n	8002a06 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d069      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a12:	4b50      	ldr	r3, [pc, #320]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00b      	beq.n	8002a36 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a1e:	4b4d      	ldr	r3, [pc, #308]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d11c      	bne.n	8002a64 <HAL_RCC_OscConfig+0x190>
 8002a2a:	4b4a      	ldr	r3, [pc, #296]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d116      	bne.n	8002a64 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a36:	4b47      	ldr	r3, [pc, #284]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d005      	beq.n	8002a4e <HAL_RCC_OscConfig+0x17a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d001      	beq.n	8002a4e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e1df      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4e:	4b41      	ldr	r3, [pc, #260]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	493d      	ldr	r1, [pc, #244]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a62:	e040      	b.n	8002ae6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d023      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a6c:	4b39      	ldr	r3, [pc, #228]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a38      	ldr	r2, [pc, #224]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a78:	f7ff f858 	bl	8001b2c <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a80:	f7ff f854 	bl	8001b2c <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e1bd      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a92:	4b30      	ldr	r3, [pc, #192]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0f0      	beq.n	8002a80 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9e:	4b2d      	ldr	r3, [pc, #180]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4929      	ldr	r1, [pc, #164]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	600b      	str	r3, [r1, #0]
 8002ab2:	e018      	b.n	8002ae6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ab4:	4b27      	ldr	r3, [pc, #156]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a26      	ldr	r2, [pc, #152]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002aba:	f023 0301 	bic.w	r3, r3, #1
 8002abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7ff f834 	bl	8001b2c <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac8:	f7ff f830 	bl	8001b2c <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e199      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ada:	4b1e      	ldr	r3, [pc, #120]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d038      	beq.n	8002b64 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d019      	beq.n	8002b2e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002afa:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002afe:	4a15      	ldr	r2, [pc, #84]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b06:	f7ff f811 	bl	8001b2c <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b0e:	f7ff f80d 	bl	8001b2c <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e176      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b20:	4b0c      	ldr	r3, [pc, #48]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0f0      	beq.n	8002b0e <HAL_RCC_OscConfig+0x23a>
 8002b2c:	e01a      	b.n	8002b64 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b32:	4a08      	ldr	r2, [pc, #32]	; (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002b34:	f023 0301 	bic.w	r3, r3, #1
 8002b38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3a:	f7fe fff7 	bl	8001b2c <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b40:	e00a      	b.n	8002b58 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b42:	f7fe fff3 	bl	8001b2c <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d903      	bls.n	8002b58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e15c      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>
 8002b54:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b58:	4b91      	ldr	r3, [pc, #580]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1ee      	bne.n	8002b42 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80a4 	beq.w	8002cba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b72:	4b8b      	ldr	r3, [pc, #556]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10d      	bne.n	8002b9a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7e:	4b88      	ldr	r3, [pc, #544]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	4a87      	ldr	r2, [pc, #540]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b88:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8a:	4b85      	ldr	r3, [pc, #532]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b92:	60bb      	str	r3, [r7, #8]
 8002b94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b96:	2301      	movs	r3, #1
 8002b98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b9a:	4b82      	ldr	r3, [pc, #520]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d118      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002ba6:	4b7f      	ldr	r3, [pc, #508]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a7e      	ldr	r2, [pc, #504]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb2:	f7fe ffbb 	bl	8001b2c <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bba:	f7fe ffb7 	bl	8001b2c <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b64      	cmp	r3, #100	; 0x64
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e120      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bcc:	4b75      	ldr	r3, [pc, #468]	; (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0f0      	beq.n	8002bba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d106      	bne.n	8002bee <HAL_RCC_OscConfig+0x31a>
 8002be0:	4b6f      	ldr	r3, [pc, #444]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be4:	4a6e      	ldr	r2, [pc, #440]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	6713      	str	r3, [r2, #112]	; 0x70
 8002bec:	e02d      	b.n	8002c4a <HAL_RCC_OscConfig+0x376>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCC_OscConfig+0x33c>
 8002bf6:	4b6a      	ldr	r3, [pc, #424]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfa:	4a69      	ldr	r2, [pc, #420]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002bfc:	f023 0301 	bic.w	r3, r3, #1
 8002c00:	6713      	str	r3, [r2, #112]	; 0x70
 8002c02:	4b67      	ldr	r3, [pc, #412]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c06:	4a66      	ldr	r2, [pc, #408]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002c08:	f023 0304 	bic.w	r3, r3, #4
 8002c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c0e:	e01c      	b.n	8002c4a <HAL_RCC_OscConfig+0x376>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	2b05      	cmp	r3, #5
 8002c16:	d10c      	bne.n	8002c32 <HAL_RCC_OscConfig+0x35e>
 8002c18:	4b61      	ldr	r3, [pc, #388]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1c:	4a60      	ldr	r2, [pc, #384]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002c1e:	f043 0304 	orr.w	r3, r3, #4
 8002c22:	6713      	str	r3, [r2, #112]	; 0x70
 8002c24:	4b5e      	ldr	r3, [pc, #376]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c28:	4a5d      	ldr	r2, [pc, #372]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c30:	e00b      	b.n	8002c4a <HAL_RCC_OscConfig+0x376>
 8002c32:	4b5b      	ldr	r3, [pc, #364]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	4a5a      	ldr	r2, [pc, #360]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002c38:	f023 0301 	bic.w	r3, r3, #1
 8002c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3e:	4b58      	ldr	r3, [pc, #352]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c42:	4a57      	ldr	r2, [pc, #348]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002c44:	f023 0304 	bic.w	r3, r3, #4
 8002c48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d015      	beq.n	8002c7e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c52:	f7fe ff6b 	bl	8001b2c <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c58:	e00a      	b.n	8002c70 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c5a:	f7fe ff67 	bl	8001b2c <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e0ce      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c70:	4b4b      	ldr	r3, [pc, #300]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0ee      	beq.n	8002c5a <HAL_RCC_OscConfig+0x386>
 8002c7c:	e014      	b.n	8002ca8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7e:	f7fe ff55 	bl	8001b2c <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c84:	e00a      	b.n	8002c9c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c86:	f7fe ff51 	bl	8001b2c <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e0b8      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c9c:	4b40      	ldr	r3, [pc, #256]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1ee      	bne.n	8002c86 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ca8:	7dfb      	ldrb	r3, [r7, #23]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d105      	bne.n	8002cba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cae:	4b3c      	ldr	r3, [pc, #240]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	4a3b      	ldr	r2, [pc, #236]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002cb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cb8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 80a4 	beq.w	8002e0c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cc4:	4b36      	ldr	r3, [pc, #216]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 030c 	and.w	r3, r3, #12
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d06b      	beq.n	8002da8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d149      	bne.n	8002d6c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd8:	4b31      	ldr	r3, [pc, #196]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a30      	ldr	r2, [pc, #192]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002cde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe ff22 	bl	8001b2c <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cec:	f7fe ff1e 	bl	8001b2c <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e087      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfe:	4b28      	ldr	r3, [pc, #160]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69da      	ldr	r2, [r3, #28]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	019b      	lsls	r3, r3, #6
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d20:	085b      	lsrs	r3, r3, #1
 8002d22:	3b01      	subs	r3, #1
 8002d24:	041b      	lsls	r3, r3, #16
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	061b      	lsls	r3, r3, #24
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	4a1b      	ldr	r2, [pc, #108]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002d32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d36:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d38:	4b19      	ldr	r3, [pc, #100]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a18      	ldr	r2, [pc, #96]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002d3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7fe fef2 	bl	8001b2c <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d4c:	f7fe feee 	bl	8001b2c <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e057      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d5e:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0x478>
 8002d6a:	e04f      	b.n	8002e0c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6c:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a0b      	ldr	r2, [pc, #44]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002d72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d78:	f7fe fed8 	bl	8001b2c <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d80:	f7fe fed4 	bl	8001b2c <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e03d      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d92:	4b03      	ldr	r3, [pc, #12]	; (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0x4ac>
 8002d9e:	e035      	b.n	8002e0c <HAL_RCC_OscConfig+0x538>
 8002da0:	40023800 	.word	0x40023800
 8002da4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002da8:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <HAL_RCC_OscConfig+0x544>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d028      	beq.n	8002e08 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d121      	bne.n	8002e08 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d11a      	bne.n	8002e08 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dd8:	4013      	ands	r3, r2
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dde:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d111      	bne.n	8002e08 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dee:	085b      	lsrs	r3, r3, #1
 8002df0:	3b01      	subs	r3, #1
 8002df2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d107      	bne.n	8002e08 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e02:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d001      	beq.n	8002e0c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e000      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40023800 	.word	0x40023800

08002e1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0d0      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e34:	4b6a      	ldr	r3, [pc, #424]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 030f 	and.w	r3, r3, #15
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d910      	bls.n	8002e64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e42:	4b67      	ldr	r3, [pc, #412]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 020f 	bic.w	r2, r3, #15
 8002e4a:	4965      	ldr	r1, [pc, #404]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e52:	4b63      	ldr	r3, [pc, #396]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0b8      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d020      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d005      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e7c:	4b59      	ldr	r3, [pc, #356]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	4a58      	ldr	r2, [pc, #352]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d005      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e94:	4b53      	ldr	r3, [pc, #332]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	4a52      	ldr	r2, [pc, #328]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea0:	4b50      	ldr	r3, [pc, #320]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	494d      	ldr	r1, [pc, #308]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d040      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d107      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec6:	4b47      	ldr	r3, [pc, #284]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d115      	bne.n	8002efe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e07f      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d107      	bne.n	8002eee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ede:	4b41      	ldr	r3, [pc, #260]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d109      	bne.n	8002efe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e073      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eee:	4b3d      	ldr	r3, [pc, #244]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e06b      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002efe:	4b39      	ldr	r3, [pc, #228]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f023 0203 	bic.w	r2, r3, #3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	4936      	ldr	r1, [pc, #216]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f10:	f7fe fe0c 	bl	8001b2c <HAL_GetTick>
 8002f14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f16:	e00a      	b.n	8002f2e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f18:	f7fe fe08 	bl	8001b2c <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e053      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2e:	4b2d      	ldr	r3, [pc, #180]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 020c 	and.w	r2, r3, #12
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d1eb      	bne.n	8002f18 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f40:	4b27      	ldr	r3, [pc, #156]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 030f 	and.w	r3, r3, #15
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d210      	bcs.n	8002f70 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4e:	4b24      	ldr	r3, [pc, #144]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f023 020f 	bic.w	r2, r3, #15
 8002f56:	4922      	ldr	r1, [pc, #136]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5e:	4b20      	ldr	r3, [pc, #128]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d001      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e032      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d008      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f7c:	4b19      	ldr	r3, [pc, #100]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	4916      	ldr	r1, [pc, #88]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d009      	beq.n	8002fae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f9a:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	490e      	ldr	r1, [pc, #56]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fae:	f000 f821 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	091b      	lsrs	r3, r3, #4
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	490a      	ldr	r1, [pc, #40]	; (8002fe8 <HAL_RCC_ClockConfig+0x1cc>)
 8002fc0:	5ccb      	ldrb	r3, [r1, r3]
 8002fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc6:	4a09      	ldr	r2, [pc, #36]	; (8002fec <HAL_RCC_ClockConfig+0x1d0>)
 8002fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fca:	4b09      	ldr	r3, [pc, #36]	; (8002ff0 <HAL_RCC_ClockConfig+0x1d4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe fd68 	bl	8001aa4 <HAL_InitTick>

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40023c00 	.word	0x40023c00
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	08006b54 	.word	0x08006b54
 8002fec:	20000000 	.word	0x20000000
 8002ff0:	20000004 	.word	0x20000004

08002ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff8:	b090      	sub	sp, #64	; 0x40
 8002ffa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	637b      	str	r3, [r7, #52]	; 0x34
 8003000:	2300      	movs	r3, #0
 8003002:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003004:	2300      	movs	r3, #0
 8003006:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003008:	2300      	movs	r3, #0
 800300a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800300c:	4b59      	ldr	r3, [pc, #356]	; (8003174 <HAL_RCC_GetSysClockFreq+0x180>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 030c 	and.w	r3, r3, #12
 8003014:	2b08      	cmp	r3, #8
 8003016:	d00d      	beq.n	8003034 <HAL_RCC_GetSysClockFreq+0x40>
 8003018:	2b08      	cmp	r3, #8
 800301a:	f200 80a1 	bhi.w	8003160 <HAL_RCC_GetSysClockFreq+0x16c>
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <HAL_RCC_GetSysClockFreq+0x34>
 8003022:	2b04      	cmp	r3, #4
 8003024:	d003      	beq.n	800302e <HAL_RCC_GetSysClockFreq+0x3a>
 8003026:	e09b      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003028:	4b53      	ldr	r3, [pc, #332]	; (8003178 <HAL_RCC_GetSysClockFreq+0x184>)
 800302a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800302c:	e09b      	b.n	8003166 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800302e:	4b53      	ldr	r3, [pc, #332]	; (800317c <HAL_RCC_GetSysClockFreq+0x188>)
 8003030:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003032:	e098      	b.n	8003166 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003034:	4b4f      	ldr	r3, [pc, #316]	; (8003174 <HAL_RCC_GetSysClockFreq+0x180>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800303c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800303e:	4b4d      	ldr	r3, [pc, #308]	; (8003174 <HAL_RCC_GetSysClockFreq+0x180>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d028      	beq.n	800309c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800304a:	4b4a      	ldr	r3, [pc, #296]	; (8003174 <HAL_RCC_GetSysClockFreq+0x180>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	099b      	lsrs	r3, r3, #6
 8003050:	2200      	movs	r2, #0
 8003052:	623b      	str	r3, [r7, #32]
 8003054:	627a      	str	r2, [r7, #36]	; 0x24
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800305c:	2100      	movs	r1, #0
 800305e:	4b47      	ldr	r3, [pc, #284]	; (800317c <HAL_RCC_GetSysClockFreq+0x188>)
 8003060:	fb03 f201 	mul.w	r2, r3, r1
 8003064:	2300      	movs	r3, #0
 8003066:	fb00 f303 	mul.w	r3, r0, r3
 800306a:	4413      	add	r3, r2
 800306c:	4a43      	ldr	r2, [pc, #268]	; (800317c <HAL_RCC_GetSysClockFreq+0x188>)
 800306e:	fba0 1202 	umull	r1, r2, r0, r2
 8003072:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003074:	460a      	mov	r2, r1
 8003076:	62ba      	str	r2, [r7, #40]	; 0x28
 8003078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800307a:	4413      	add	r3, r2
 800307c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800307e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003080:	2200      	movs	r2, #0
 8003082:	61bb      	str	r3, [r7, #24]
 8003084:	61fa      	str	r2, [r7, #28]
 8003086:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800308a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800308e:	f7fd f917 	bl	80002c0 <__aeabi_uldivmod>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4613      	mov	r3, r2
 8003098:	63fb      	str	r3, [r7, #60]	; 0x3c
 800309a:	e053      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800309c:	4b35      	ldr	r3, [pc, #212]	; (8003174 <HAL_RCC_GetSysClockFreq+0x180>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	099b      	lsrs	r3, r3, #6
 80030a2:	2200      	movs	r2, #0
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	617a      	str	r2, [r7, #20]
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80030ae:	f04f 0b00 	mov.w	fp, #0
 80030b2:	4652      	mov	r2, sl
 80030b4:	465b      	mov	r3, fp
 80030b6:	f04f 0000 	mov.w	r0, #0
 80030ba:	f04f 0100 	mov.w	r1, #0
 80030be:	0159      	lsls	r1, r3, #5
 80030c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030c4:	0150      	lsls	r0, r2, #5
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	ebb2 080a 	subs.w	r8, r2, sl
 80030ce:	eb63 090b 	sbc.w	r9, r3, fp
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030e6:	ebb2 0408 	subs.w	r4, r2, r8
 80030ea:	eb63 0509 	sbc.w	r5, r3, r9
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	00eb      	lsls	r3, r5, #3
 80030f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030fc:	00e2      	lsls	r2, r4, #3
 80030fe:	4614      	mov	r4, r2
 8003100:	461d      	mov	r5, r3
 8003102:	eb14 030a 	adds.w	r3, r4, sl
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	eb45 030b 	adc.w	r3, r5, fp
 800310c:	607b      	str	r3, [r7, #4]
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	e9d7 4500 	ldrd	r4, r5, [r7]
 800311a:	4629      	mov	r1, r5
 800311c:	028b      	lsls	r3, r1, #10
 800311e:	4621      	mov	r1, r4
 8003120:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003124:	4621      	mov	r1, r4
 8003126:	028a      	lsls	r2, r1, #10
 8003128:	4610      	mov	r0, r2
 800312a:	4619      	mov	r1, r3
 800312c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800312e:	2200      	movs	r2, #0
 8003130:	60bb      	str	r3, [r7, #8]
 8003132:	60fa      	str	r2, [r7, #12]
 8003134:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003138:	f7fd f8c2 	bl	80002c0 <__aeabi_uldivmod>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4613      	mov	r3, r2
 8003142:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <HAL_RCC_GetSysClockFreq+0x180>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	0c1b      	lsrs	r3, r3, #16
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	3301      	adds	r3, #1
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003154:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003158:	fbb2 f3f3 	udiv	r3, r2, r3
 800315c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800315e:	e002      	b.n	8003166 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003160:	4b05      	ldr	r3, [pc, #20]	; (8003178 <HAL_RCC_GetSysClockFreq+0x184>)
 8003162:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003164:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003168:	4618      	mov	r0, r3
 800316a:	3740      	adds	r7, #64	; 0x40
 800316c:	46bd      	mov	sp, r7
 800316e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003172:	bf00      	nop
 8003174:	40023800 	.word	0x40023800
 8003178:	00f42400 	.word	0x00f42400
 800317c:	017d7840 	.word	0x017d7840

08003180 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003184:	4b03      	ldr	r3, [pc, #12]	; (8003194 <HAL_RCC_GetHCLKFreq+0x14>)
 8003186:	681b      	ldr	r3, [r3, #0]
}
 8003188:	4618      	mov	r0, r3
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	20000000 	.word	0x20000000

08003198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800319c:	f7ff fff0 	bl	8003180 <HAL_RCC_GetHCLKFreq>
 80031a0:	4602      	mov	r2, r0
 80031a2:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	0a9b      	lsrs	r3, r3, #10
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	4903      	ldr	r1, [pc, #12]	; (80031bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ae:	5ccb      	ldrb	r3, [r1, r3]
 80031b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40023800 	.word	0x40023800
 80031bc:	08006b64 	.word	0x08006b64

080031c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031c4:	f7ff ffdc 	bl	8003180 <HAL_RCC_GetHCLKFreq>
 80031c8:	4602      	mov	r2, r0
 80031ca:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	0b5b      	lsrs	r3, r3, #13
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	4903      	ldr	r1, [pc, #12]	; (80031e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031d6:	5ccb      	ldrb	r3, [r1, r3]
 80031d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031dc:	4618      	mov	r0, r3
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40023800 	.word	0x40023800
 80031e4:	08006b64 	.word	0x08006b64

080031e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80031f4:	2300      	movs	r3, #0
 80031f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d012      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003210:	4b69      	ldr	r3, [pc, #420]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	4a68      	ldr	r2, [pc, #416]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003216:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800321a:	6093      	str	r3, [r2, #8]
 800321c:	4b66      	ldr	r3, [pc, #408]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003224:	4964      	ldr	r1, [pc, #400]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003226:	4313      	orrs	r3, r2
 8003228:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003232:	2301      	movs	r3, #1
 8003234:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d017      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003242:	4b5d      	ldr	r3, [pc, #372]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003244:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003248:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003250:	4959      	ldr	r1, [pc, #356]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003260:	d101      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003262:	2301      	movs	r3, #1
 8003264:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800326e:	2301      	movs	r3, #1
 8003270:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d017      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800327e:	4b4e      	ldr	r3, [pc, #312]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003284:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	494a      	ldr	r1, [pc, #296]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800328e:	4313      	orrs	r3, r2
 8003290:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800329c:	d101      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800329e:	2301      	movs	r3, #1
 80032a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80032aa:	2301      	movs	r3, #1
 80032ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80032ba:	2301      	movs	r3, #1
 80032bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0320 	and.w	r3, r3, #32
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 808b 	beq.w	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80032cc:	4b3a      	ldr	r3, [pc, #232]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	4a39      	ldr	r2, [pc, #228]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d6:	6413      	str	r3, [r2, #64]	; 0x40
 80032d8:	4b37      	ldr	r3, [pc, #220]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e0:	60bb      	str	r3, [r7, #8]
 80032e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80032e4:	4b35      	ldr	r3, [pc, #212]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a34      	ldr	r2, [pc, #208]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032f0:	f7fe fc1c 	bl	8001b2c <HAL_GetTick>
 80032f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f8:	f7fe fc18 	bl	8001b2c <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b64      	cmp	r3, #100	; 0x64
 8003304:	d901      	bls.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e357      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800330a:	4b2c      	ldr	r3, [pc, #176]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0f0      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003316:	4b28      	ldr	r3, [pc, #160]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800331e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d035      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	429a      	cmp	r2, r3
 8003332:	d02e      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003334:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800333e:	4b1e      	ldr	r3, [pc, #120]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	4a1d      	ldr	r2, [pc, #116]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003348:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800334a:	4b1b      	ldr	r3, [pc, #108]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	4a1a      	ldr	r2, [pc, #104]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003354:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003356:	4a18      	ldr	r2, [pc, #96]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800335c:	4b16      	ldr	r3, [pc, #88]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b01      	cmp	r3, #1
 8003366:	d114      	bne.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003368:	f7fe fbe0 	bl	8001b2c <HAL_GetTick>
 800336c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800336e:	e00a      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003370:	f7fe fbdc 	bl	8001b2c <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	f241 3288 	movw	r2, #5000	; 0x1388
 800337e:	4293      	cmp	r3, r2
 8003380:	d901      	bls.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e319      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003386:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0ee      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800339a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800339e:	d111      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80033a0:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033ac:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80033ae:	400b      	ands	r3, r1
 80033b0:	4901      	ldr	r1, [pc, #4]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
 80033b6:	e00b      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80033b8:	40023800 	.word	0x40023800
 80033bc:	40007000 	.word	0x40007000
 80033c0:	0ffffcff 	.word	0x0ffffcff
 80033c4:	4baa      	ldr	r3, [pc, #680]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	4aa9      	ldr	r2, [pc, #676]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80033ce:	6093      	str	r3, [r2, #8]
 80033d0:	4ba7      	ldr	r3, [pc, #668]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033dc:	49a4      	ldr	r1, [pc, #656]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0310 	and.w	r3, r3, #16
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d010      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80033ee:	4ba0      	ldr	r3, [pc, #640]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033f4:	4a9e      	ldr	r2, [pc, #632]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80033fe:	4b9c      	ldr	r3, [pc, #624]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003400:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003408:	4999      	ldr	r1, [pc, #612]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800340a:	4313      	orrs	r3, r2
 800340c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00a      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800341c:	4b94      	ldr	r3, [pc, #592]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800341e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003422:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800342a:	4991      	ldr	r1, [pc, #580]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00a      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800343e:	4b8c      	ldr	r3, [pc, #560]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003444:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800344c:	4988      	ldr	r1, [pc, #544]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00a      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003460:	4b83      	ldr	r3, [pc, #524]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003466:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800346e:	4980      	ldr	r1, [pc, #512]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003470:	4313      	orrs	r3, r2
 8003472:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003482:	4b7b      	ldr	r3, [pc, #492]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003488:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003490:	4977      	ldr	r1, [pc, #476]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034a4:	4b72      	ldr	r3, [pc, #456]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034aa:	f023 0203 	bic.w	r2, r3, #3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	496f      	ldr	r1, [pc, #444]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034c6:	4b6a      	ldr	r3, [pc, #424]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034cc:	f023 020c 	bic.w	r2, r3, #12
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034d4:	4966      	ldr	r1, [pc, #408]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00a      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034e8:	4b61      	ldr	r3, [pc, #388]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f6:	495e      	ldr	r1, [pc, #376]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800350a:	4b59      	ldr	r3, [pc, #356]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800350c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003510:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003518:	4955      	ldr	r1, [pc, #340]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800352c:	4b50      	ldr	r3, [pc, #320]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800352e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003532:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353a:	494d      	ldr	r1, [pc, #308]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800354e:	4b48      	ldr	r3, [pc, #288]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003554:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355c:	4944      	ldr	r1, [pc, #272]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003570:	4b3f      	ldr	r3, [pc, #252]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003576:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357e:	493c      	ldr	r1, [pc, #240]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003592:	4b37      	ldr	r3, [pc, #220]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003598:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a0:	4933      	ldr	r1, [pc, #204]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035b4:	4b2e      	ldr	r3, [pc, #184]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035c2:	492b      	ldr	r1, [pc, #172]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d011      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80035d6:	4b26      	ldr	r3, [pc, #152]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035e4:	4922      	ldr	r1, [pc, #136]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035f4:	d101      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80035f6:	2301      	movs	r3, #1
 80035f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003606:	2301      	movs	r3, #1
 8003608:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00a      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003616:	4b16      	ldr	r3, [pc, #88]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003624:	4912      	ldr	r1, [pc, #72]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003626:	4313      	orrs	r3, r2
 8003628:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00b      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003638:	4b0d      	ldr	r3, [pc, #52]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800363a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003648:	4909      	ldr	r1, [pc, #36]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d006      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 80d9 	beq.w	8003816 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003664:	4b02      	ldr	r3, [pc, #8]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a01      	ldr	r2, [pc, #4]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800366a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800366e:	e001      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003670:	40023800 	.word	0x40023800
 8003674:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003676:	f7fe fa59 	bl	8001b2c <HAL_GetTick>
 800367a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800367c:	e008      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800367e:	f7fe fa55 	bl	8001b2c <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b64      	cmp	r3, #100	; 0x64
 800368a:	d901      	bls.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e194      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003690:	4b6c      	ldr	r3, [pc, #432]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1f0      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d021      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x504>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d11d      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80036b0:	4b64      	ldr	r3, [pc, #400]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036b6:	0c1b      	lsrs	r3, r3, #16
 80036b8:	f003 0303 	and.w	r3, r3, #3
 80036bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036be:	4b61      	ldr	r3, [pc, #388]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036c4:	0e1b      	lsrs	r3, r3, #24
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	019a      	lsls	r2, r3, #6
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	041b      	lsls	r3, r3, #16
 80036d6:	431a      	orrs	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	061b      	lsls	r3, r3, #24
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	071b      	lsls	r3, r3, #28
 80036e4:	4957      	ldr	r1, [pc, #348]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d004      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003700:	d00a      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800370a:	2b00      	cmp	r3, #0
 800370c:	d02e      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003716:	d129      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003718:	4b4a      	ldr	r3, [pc, #296]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800371a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800371e:	0c1b      	lsrs	r3, r3, #16
 8003720:	f003 0303 	and.w	r3, r3, #3
 8003724:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003726:	4b47      	ldr	r3, [pc, #284]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800372c:	0f1b      	lsrs	r3, r3, #28
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	019a      	lsls	r2, r3, #6
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	041b      	lsls	r3, r3, #16
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	061b      	lsls	r3, r3, #24
 8003746:	431a      	orrs	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	071b      	lsls	r3, r3, #28
 800374c:	493d      	ldr	r1, [pc, #244]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800374e:	4313      	orrs	r3, r2
 8003750:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003754:	4b3b      	ldr	r3, [pc, #236]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003756:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800375a:	f023 021f 	bic.w	r2, r3, #31
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	3b01      	subs	r3, #1
 8003764:	4937      	ldr	r1, [pc, #220]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d01d      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003778:	4b32      	ldr	r3, [pc, #200]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800377a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800377e:	0e1b      	lsrs	r3, r3, #24
 8003780:	f003 030f 	and.w	r3, r3, #15
 8003784:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003786:	4b2f      	ldr	r3, [pc, #188]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800378c:	0f1b      	lsrs	r3, r3, #28
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	019a      	lsls	r2, r3, #6
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	041b      	lsls	r3, r3, #16
 80037a0:	431a      	orrs	r2, r3
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	061b      	lsls	r3, r3, #24
 80037a6:	431a      	orrs	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	071b      	lsls	r3, r3, #28
 80037ac:	4925      	ldr	r1, [pc, #148]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d011      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	019a      	lsls	r2, r3, #6
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	041b      	lsls	r3, r3, #16
 80037cc:	431a      	orrs	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	061b      	lsls	r3, r3, #24
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	071b      	lsls	r3, r3, #28
 80037dc:	4919      	ldr	r1, [pc, #100]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80037e4:	4b17      	ldr	r3, [pc, #92]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a16      	ldr	r2, [pc, #88]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037f0:	f7fe f99c 	bl	8001b2c <HAL_GetTick>
 80037f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037f8:	f7fe f998 	bl	8001b2c <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b64      	cmp	r3, #100	; 0x64
 8003804:	d901      	bls.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e0d7      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800380a:	4b0e      	ldr	r3, [pc, #56]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f0      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	2b01      	cmp	r3, #1
 800381a:	f040 80cd 	bne.w	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800381e:	4b09      	ldr	r3, [pc, #36]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a08      	ldr	r2, [pc, #32]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003828:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800382a:	f7fe f97f 	bl	8001b2c <HAL_GetTick>
 800382e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003830:	e00a      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003832:	f7fe f97b 	bl	8001b2c <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b64      	cmp	r3, #100	; 0x64
 800383e:	d903      	bls.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e0ba      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003844:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003848:	4b5e      	ldr	r3, [pc, #376]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003854:	d0ed      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003866:	2b00      	cmp	r3, #0
 8003868:	d009      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003872:	2b00      	cmp	r3, #0
 8003874:	d02e      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	2b00      	cmp	r3, #0
 800387c:	d12a      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800387e:	4b51      	ldr	r3, [pc, #324]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003884:	0c1b      	lsrs	r3, r3, #16
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800388c:	4b4d      	ldr	r3, [pc, #308]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800388e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003892:	0f1b      	lsrs	r3, r3, #28
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	019a      	lsls	r2, r3, #6
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	041b      	lsls	r3, r3, #16
 80038a4:	431a      	orrs	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	061b      	lsls	r3, r3, #24
 80038ac:	431a      	orrs	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	071b      	lsls	r3, r3, #28
 80038b2:	4944      	ldr	r1, [pc, #272]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80038ba:	4b42      	ldr	r3, [pc, #264]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c8:	3b01      	subs	r3, #1
 80038ca:	021b      	lsls	r3, r3, #8
 80038cc:	493d      	ldr	r1, [pc, #244]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d022      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038e8:	d11d      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038ea:	4b36      	ldr	r3, [pc, #216]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f0:	0e1b      	lsrs	r3, r3, #24
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038f8:	4b32      	ldr	r3, [pc, #200]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fe:	0f1b      	lsrs	r3, r3, #28
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	019a      	lsls	r2, r3, #6
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	041b      	lsls	r3, r3, #16
 8003912:	431a      	orrs	r2, r3
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	061b      	lsls	r3, r3, #24
 8003918:	431a      	orrs	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	071b      	lsls	r3, r3, #28
 800391e:	4929      	ldr	r1, [pc, #164]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	2b00      	cmp	r3, #0
 8003930:	d028      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003932:	4b24      	ldr	r3, [pc, #144]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003938:	0e1b      	lsrs	r3, r3, #24
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003940:	4b20      	ldr	r3, [pc, #128]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003946:	0c1b      	lsrs	r3, r3, #16
 8003948:	f003 0303 	and.w	r3, r3, #3
 800394c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	019a      	lsls	r2, r3, #6
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	041b      	lsls	r3, r3, #16
 8003958:	431a      	orrs	r2, r3
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	061b      	lsls	r3, r3, #24
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	071b      	lsls	r3, r3, #28
 8003966:	4917      	ldr	r1, [pc, #92]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003968:	4313      	orrs	r3, r2
 800396a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800396e:	4b15      	ldr	r3, [pc, #84]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003970:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003974:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397c:	4911      	ldr	r1, [pc, #68]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800397e:	4313      	orrs	r3, r2
 8003980:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003984:	4b0f      	ldr	r3, [pc, #60]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a0e      	ldr	r2, [pc, #56]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800398a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800398e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003990:	f7fe f8cc 	bl	8001b2c <HAL_GetTick>
 8003994:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003998:	f7fe f8c8 	bl	8001b2c <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b64      	cmp	r3, #100	; 0x64
 80039a4:	d901      	bls.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e007      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039aa:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039b6:	d1ef      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3720      	adds	r7, #32
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40023800 	.word	0x40023800

080039c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e09d      	b.n	8003b16 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d108      	bne.n	80039f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039ea:	d009      	beq.n	8003a00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	61da      	str	r2, [r3, #28]
 80039f2:	e005      	b.n	8003a00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d106      	bne.n	8003a20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fd fdf8 	bl	8001610 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a40:	d902      	bls.n	8003a48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a42:	2300      	movs	r3, #0
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	e002      	b.n	8003a4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003a56:	d007      	beq.n	8003a68 <HAL_SPI_Init+0xa0>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a60:	d002      	beq.n	8003a68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aaa:	ea42 0103 	orr.w	r1, r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	0c1b      	lsrs	r3, r3, #16
 8003ac4:	f003 0204 	and.w	r2, r3, #4
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ae4:	ea42 0103 	orr.w	r1, r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	69da      	ldr	r2, [r3, #28]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b08a      	sub	sp, #40	; 0x28
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	60f8      	str	r0, [r7, #12]
 8003b26:	60b9      	str	r1, [r7, #8]
 8003b28:	607a      	str	r2, [r7, #4]
 8003b2a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b30:	2300      	movs	r3, #0
 8003b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <HAL_SPI_TransmitReceive+0x26>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e1fb      	b.n	8003f3c <HAL_SPI_TransmitReceive+0x41e>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b4c:	f7fd ffee 	bl	8001b2c <HAL_GetTick>
 8003b50:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b58:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003b60:	887b      	ldrh	r3, [r7, #2]
 8003b62:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003b64:	887b      	ldrh	r3, [r7, #2]
 8003b66:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b68:	7efb      	ldrb	r3, [r7, #27]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d00e      	beq.n	8003b8c <HAL_SPI_TransmitReceive+0x6e>
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b74:	d106      	bne.n	8003b84 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d102      	bne.n	8003b84 <HAL_SPI_TransmitReceive+0x66>
 8003b7e:	7efb      	ldrb	r3, [r7, #27]
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d003      	beq.n	8003b8c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003b84:	2302      	movs	r3, #2
 8003b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003b8a:	e1cd      	b.n	8003f28 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d005      	beq.n	8003b9e <HAL_SPI_TransmitReceive+0x80>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <HAL_SPI_TransmitReceive+0x80>
 8003b98:	887b      	ldrh	r3, [r7, #2]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d103      	bne.n	8003ba6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003ba4:	e1c0      	b.n	8003f28 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d003      	beq.n	8003bba <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2205      	movs	r2, #5
 8003bb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	887a      	ldrh	r2, [r7, #2]
 8003bca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	887a      	ldrh	r2, [r7, #2]
 8003bd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	887a      	ldrh	r2, [r7, #2]
 8003be0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	887a      	ldrh	r2, [r7, #2]
 8003be6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bfc:	d802      	bhi.n	8003c04 <HAL_SPI_TransmitReceive+0xe6>
 8003bfe:	8a3b      	ldrh	r3, [r7, #16]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d908      	bls.n	8003c16 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c12:	605a      	str	r2, [r3, #4]
 8003c14:	e007      	b.n	8003c26 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c24:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c30:	2b40      	cmp	r3, #64	; 0x40
 8003c32:	d007      	beq.n	8003c44 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c4c:	d97c      	bls.n	8003d48 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <HAL_SPI_TransmitReceive+0x13e>
 8003c56:	8a7b      	ldrh	r3, [r7, #18]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d169      	bne.n	8003d30 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c60:	881a      	ldrh	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6c:	1c9a      	adds	r2, r3, #2
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c80:	e056      	b.n	8003d30 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d11b      	bne.n	8003cc8 <HAL_SPI_TransmitReceive+0x1aa>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d016      	beq.n	8003cc8 <HAL_SPI_TransmitReceive+0x1aa>
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d113      	bne.n	8003cc8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca4:	881a      	ldrh	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb0:	1c9a      	adds	r2, r3, #2
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d11c      	bne.n	8003d10 <HAL_SPI_TransmitReceive+0x1f2>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d016      	beq.n	8003d10 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68da      	ldr	r2, [r3, #12]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	b292      	uxth	r2, r2
 8003cee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	1c9a      	adds	r2, r3, #2
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d10:	f7fd ff0c 	bl	8001b2c <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d807      	bhi.n	8003d30 <HAL_SPI_TransmitReceive+0x212>
 8003d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d26:	d003      	beq.n	8003d30 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003d2e:	e0fb      	b.n	8003f28 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1a3      	bne.n	8003c82 <HAL_SPI_TransmitReceive+0x164>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d19d      	bne.n	8003c82 <HAL_SPI_TransmitReceive+0x164>
 8003d46:	e0df      	b.n	8003f08 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <HAL_SPI_TransmitReceive+0x23a>
 8003d50:	8a7b      	ldrh	r3, [r7, #18]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	f040 80cb 	bne.w	8003eee <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d912      	bls.n	8003d88 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d66:	881a      	ldrh	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d72:	1c9a      	adds	r2, r3, #2
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3b02      	subs	r3, #2
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d86:	e0b2      	b.n	8003eee <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	330c      	adds	r3, #12
 8003d92:	7812      	ldrb	r2, [r2, #0]
 8003d94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dae:	e09e      	b.n	8003eee <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d134      	bne.n	8003e28 <HAL_SPI_TransmitReceive+0x30a>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d02f      	beq.n	8003e28 <HAL_SPI_TransmitReceive+0x30a>
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d12c      	bne.n	8003e28 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d912      	bls.n	8003dfe <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ddc:	881a      	ldrh	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de8:	1c9a      	adds	r2, r3, #2
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3b02      	subs	r3, #2
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dfc:	e012      	b.n	8003e24 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	330c      	adds	r3, #12
 8003e08:	7812      	ldrb	r2, [r2, #0]
 8003e0a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e10:	1c5a      	adds	r2, r3, #1
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d148      	bne.n	8003ec8 <HAL_SPI_TransmitReceive+0x3aa>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d042      	beq.n	8003ec8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d923      	bls.n	8003e96 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	b292      	uxth	r2, r2
 8003e5a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	1c9a      	adds	r2, r3, #2
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	3b02      	subs	r3, #2
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d81f      	bhi.n	8003ec4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e92:	605a      	str	r2, [r3, #4]
 8003e94:	e016      	b.n	8003ec4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f103 020c 	add.w	r2, r3, #12
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	7812      	ldrb	r2, [r2, #0]
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ec8:	f7fd fe30 	bl	8001b2c <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d803      	bhi.n	8003ee0 <HAL_SPI_TransmitReceive+0x3c2>
 8003ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ede:	d102      	bne.n	8003ee6 <HAL_SPI_TransmitReceive+0x3c8>
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d103      	bne.n	8003eee <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003eec:	e01c      	b.n	8003f28 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f47f af5b 	bne.w	8003db0 <HAL_SPI_TransmitReceive+0x292>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f47f af54 	bne.w	8003db0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f08:	69fa      	ldr	r2, [r7, #28]
 8003f0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 f937 	bl	8004180 <SPI_EndRxTxTransaction>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d006      	beq.n	8003f26 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2220      	movs	r2, #32
 8003f22:	661a      	str	r2, [r3, #96]	; 0x60
 8003f24:	e000      	b.n	8003f28 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003f26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3728      	adds	r7, #40	; 0x28
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b088      	sub	sp, #32
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	603b      	str	r3, [r7, #0]
 8003f50:	4613      	mov	r3, r2
 8003f52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f54:	f7fd fdea 	bl	8001b2c <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5c:	1a9b      	subs	r3, r3, r2
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	4413      	add	r3, r2
 8003f62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f64:	f7fd fde2 	bl	8001b2c <HAL_GetTick>
 8003f68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f6a:	4b39      	ldr	r3, [pc, #228]	; (8004050 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	015b      	lsls	r3, r3, #5
 8003f70:	0d1b      	lsrs	r3, r3, #20
 8003f72:	69fa      	ldr	r2, [r7, #28]
 8003f74:	fb02 f303 	mul.w	r3, r2, r3
 8003f78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f7a:	e054      	b.n	8004026 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f82:	d050      	beq.n	8004026 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f84:	f7fd fdd2 	bl	8001b2c <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	69fa      	ldr	r2, [r7, #28]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d902      	bls.n	8003f9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d13d      	bne.n	8004016 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fa8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fb2:	d111      	bne.n	8003fd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fbc:	d004      	beq.n	8003fc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc6:	d107      	bne.n	8003fd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe0:	d10f      	bne.n	8004002 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004000:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e017      	b.n	8004046 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800401c:	2300      	movs	r3, #0
 800401e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	3b01      	subs	r3, #1
 8004024:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	4013      	ands	r3, r2
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	429a      	cmp	r2, r3
 8004034:	bf0c      	ite	eq
 8004036:	2301      	moveq	r3, #1
 8004038:	2300      	movne	r3, #0
 800403a:	b2db      	uxtb	r3, r3
 800403c:	461a      	mov	r2, r3
 800403e:	79fb      	ldrb	r3, [r7, #7]
 8004040:	429a      	cmp	r2, r3
 8004042:	d19b      	bne.n	8003f7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3720      	adds	r7, #32
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	20000000 	.word	0x20000000

08004054 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b08a      	sub	sp, #40	; 0x28
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
 8004060:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004066:	f7fd fd61 	bl	8001b2c <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406e:	1a9b      	subs	r3, r3, r2
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	4413      	add	r3, r2
 8004074:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004076:	f7fd fd59 	bl	8001b2c <HAL_GetTick>
 800407a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	330c      	adds	r3, #12
 8004082:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004084:	4b3d      	ldr	r3, [pc, #244]	; (800417c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	4613      	mov	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	00da      	lsls	r2, r3, #3
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	0d1b      	lsrs	r3, r3, #20
 8004094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004096:	fb02 f303 	mul.w	r3, r2, r3
 800409a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800409c:	e060      	b.n	8004160 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80040a4:	d107      	bne.n	80040b6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d104      	bne.n	80040b6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80040b4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040bc:	d050      	beq.n	8004160 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040be:	f7fd fd35 	bl	8001b2c <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d902      	bls.n	80040d4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d13d      	bne.n	8004150 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040ec:	d111      	bne.n	8004112 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040f6:	d004      	beq.n	8004102 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004100:	d107      	bne.n	8004112 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004110:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800411a:	d10f      	bne.n	800413c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800413a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e010      	b.n	8004172 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	3b01      	subs	r3, #1
 800415e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	4013      	ands	r3, r2
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	429a      	cmp	r2, r3
 800416e:	d196      	bne.n	800409e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3728      	adds	r7, #40	; 0x28
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	20000000 	.word	0x20000000

08004180 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b088      	sub	sp, #32
 8004184:	af02      	add	r7, sp, #8
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	2200      	movs	r2, #0
 8004194:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f7ff ff5b 	bl	8004054 <SPI_WaitFifoStateUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d007      	beq.n	80041b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041a8:	f043 0220 	orr.w	r2, r3, #32
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e046      	b.n	8004242 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80041b4:	4b25      	ldr	r3, [pc, #148]	; (800424c <SPI_EndRxTxTransaction+0xcc>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a25      	ldr	r2, [pc, #148]	; (8004250 <SPI_EndRxTxTransaction+0xd0>)
 80041ba:	fba2 2303 	umull	r2, r3, r2, r3
 80041be:	0d5b      	lsrs	r3, r3, #21
 80041c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041c4:	fb02 f303 	mul.w	r3, r2, r3
 80041c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041d2:	d112      	bne.n	80041fa <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	2200      	movs	r2, #0
 80041dc:	2180      	movs	r1, #128	; 0x80
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f7ff feb0 	bl	8003f44 <SPI_WaitFlagStateUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d016      	beq.n	8004218 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ee:	f043 0220 	orr.w	r2, r3, #32
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e023      	b.n	8004242 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00a      	beq.n	8004216 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	3b01      	subs	r3, #1
 8004204:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004210:	2b80      	cmp	r3, #128	; 0x80
 8004212:	d0f2      	beq.n	80041fa <SPI_EndRxTxTransaction+0x7a>
 8004214:	e000      	b.n	8004218 <SPI_EndRxTxTransaction+0x98>
        break;
 8004216:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2200      	movs	r2, #0
 8004220:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f7ff ff15 	bl	8004054 <SPI_WaitFifoStateUntilTimeout>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d007      	beq.n	8004240 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004234:	f043 0220 	orr.w	r2, r3, #32
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e000      	b.n	8004242 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	20000000 	.word	0x20000000
 8004250:	165e9f81 	.word	0x165e9f81

08004254 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e040      	b.n	80042e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800426a:	2b00      	cmp	r3, #0
 800426c:	d106      	bne.n	800427c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fd fa2c 	bl	80016d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2224      	movs	r2, #36	; 0x24
 8004280:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0201 	bic.w	r2, r2, #1
 8004290:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fc66 	bl	8004b64 <UART_SetConfig>
 8004298:	4603      	mov	r3, r0
 800429a:	2b01      	cmp	r3, #1
 800429c:	d101      	bne.n	80042a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e022      	b.n	80042e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 febe 	bl	800502c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689a      	ldr	r2, [r3, #8]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0201 	orr.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 ff45 	bl	8005170 <UART_CheckIdleState>
 80042e6:	4603      	mov	r3, r0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3708      	adds	r7, #8
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08a      	sub	sp, #40	; 0x28
 80042f4:	af02      	add	r7, sp, #8
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	603b      	str	r3, [r7, #0]
 80042fc:	4613      	mov	r3, r2
 80042fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004304:	2b20      	cmp	r3, #32
 8004306:	d171      	bne.n	80043ec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d002      	beq.n	8004314 <HAL_UART_Transmit+0x24>
 800430e:	88fb      	ldrh	r3, [r7, #6]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e06a      	b.n	80043ee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2221      	movs	r2, #33	; 0x21
 8004324:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004326:	f7fd fc01 	bl	8001b2c <HAL_GetTick>
 800432a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	88fa      	ldrh	r2, [r7, #6]
 8004330:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	88fa      	ldrh	r2, [r7, #6]
 8004338:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004344:	d108      	bne.n	8004358 <HAL_UART_Transmit+0x68>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d104      	bne.n	8004358 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800434e:	2300      	movs	r3, #0
 8004350:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	61bb      	str	r3, [r7, #24]
 8004356:	e003      	b.n	8004360 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800435c:	2300      	movs	r3, #0
 800435e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004360:	e02c      	b.n	80043bc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2200      	movs	r2, #0
 800436a:	2180      	movs	r1, #128	; 0x80
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 ff36 	bl	80051de <UART_WaitOnFlagUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e038      	b.n	80043ee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10b      	bne.n	800439a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	461a      	mov	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004390:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	3302      	adds	r3, #2
 8004396:	61bb      	str	r3, [r7, #24]
 8004398:	e007      	b.n	80043aa <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	781a      	ldrb	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	3301      	adds	r3, #1
 80043a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1cc      	bne.n	8004362 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	2200      	movs	r2, #0
 80043d0:	2140      	movs	r1, #64	; 0x40
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 ff03 	bl	80051de <UART_WaitOnFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e005      	b.n	80043ee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2220      	movs	r2, #32
 80043e6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	e000      	b.n	80043ee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80043ec:	2302      	movs	r3, #2
  }
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3720      	adds	r7, #32
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b08a      	sub	sp, #40	; 0x28
 80043fa:	af02      	add	r7, sp, #8
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	603b      	str	r3, [r7, #0]
 8004402:	4613      	mov	r3, r2
 8004404:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800440c:	2b20      	cmp	r3, #32
 800440e:	f040 80b1 	bne.w	8004574 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d002      	beq.n	800441e <HAL_UART_Receive+0x28>
 8004418:	88fb      	ldrh	r3, [r7, #6]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e0a9      	b.n	8004576 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2222      	movs	r2, #34	; 0x22
 800442e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004438:	f7fd fb78 	bl	8001b2c <HAL_GetTick>
 800443c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	88fa      	ldrh	r2, [r7, #6]
 8004442:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	88fa      	ldrh	r2, [r7, #6]
 800444a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004456:	d10e      	bne.n	8004476 <HAL_UART_Receive+0x80>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d105      	bne.n	800446c <HAL_UART_Receive+0x76>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004466:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800446a:	e02d      	b.n	80044c8 <HAL_UART_Receive+0xd2>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	22ff      	movs	r2, #255	; 0xff
 8004470:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004474:	e028      	b.n	80044c8 <HAL_UART_Receive+0xd2>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10d      	bne.n	800449a <HAL_UART_Receive+0xa4>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d104      	bne.n	8004490 <HAL_UART_Receive+0x9a>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	22ff      	movs	r2, #255	; 0xff
 800448a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800448e:	e01b      	b.n	80044c8 <HAL_UART_Receive+0xd2>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	227f      	movs	r2, #127	; 0x7f
 8004494:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004498:	e016      	b.n	80044c8 <HAL_UART_Receive+0xd2>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044a2:	d10d      	bne.n	80044c0 <HAL_UART_Receive+0xca>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d104      	bne.n	80044b6 <HAL_UART_Receive+0xc0>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	227f      	movs	r2, #127	; 0x7f
 80044b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044b4:	e008      	b.n	80044c8 <HAL_UART_Receive+0xd2>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	223f      	movs	r2, #63	; 0x3f
 80044ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044be:	e003      	b.n	80044c8 <HAL_UART_Receive+0xd2>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80044ce:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d8:	d108      	bne.n	80044ec <HAL_UART_Receive+0xf6>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d104      	bne.n	80044ec <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	61bb      	str	r3, [r7, #24]
 80044ea:	e003      	b.n	80044f4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044f0:	2300      	movs	r3, #0
 80044f2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80044f4:	e032      	b.n	800455c <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2200      	movs	r2, #0
 80044fe:	2120      	movs	r1, #32
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 fe6c 	bl	80051de <UART_WaitOnFlagUntilTimeout>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e032      	b.n	8004576 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10c      	bne.n	8004530 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	b29a      	uxth	r2, r3
 800451e:	8a7b      	ldrh	r3, [r7, #18]
 8004520:	4013      	ands	r3, r2
 8004522:	b29a      	uxth	r2, r3
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	3302      	adds	r3, #2
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	e00c      	b.n	800454a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	b2da      	uxtb	r2, r3
 8004538:	8a7b      	ldrh	r3, [r7, #18]
 800453a:	b2db      	uxtb	r3, r3
 800453c:	4013      	ands	r3, r2
 800453e:	b2da      	uxtb	r2, r3
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	3301      	adds	r3, #1
 8004548:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004550:	b29b      	uxth	r3, r3
 8004552:	3b01      	subs	r3, #1
 8004554:	b29a      	uxth	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004562:	b29b      	uxth	r3, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1c6      	bne.n	80044f6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2220      	movs	r2, #32
 800456c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004570:	2300      	movs	r3, #0
 8004572:	e000      	b.n	8004576 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004574:	2302      	movs	r3, #2
  }
}
 8004576:	4618      	mov	r0, r3
 8004578:	3720      	adds	r7, #32
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
	...

08004580 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b0ba      	sub	sp, #232	; 0xe8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80045a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80045aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80045ae:	4013      	ands	r3, r2
 80045b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80045b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d115      	bne.n	80045e8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80045bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c0:	f003 0320 	and.w	r3, r3, #32
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00f      	beq.n	80045e8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045cc:	f003 0320 	and.w	r3, r3, #32
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d009      	beq.n	80045e8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 8297 	beq.w	8004b0c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	4798      	blx	r3
      }
      return;
 80045e6:	e291      	b.n	8004b0c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80045e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 8117 	beq.w	8004820 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80045f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d106      	bne.n	800460c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80045fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004602:	4b85      	ldr	r3, [pc, #532]	; (8004818 <HAL_UART_IRQHandler+0x298>)
 8004604:	4013      	ands	r3, r2
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 810a 	beq.w	8004820 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800460c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b00      	cmp	r3, #0
 8004616:	d011      	beq.n	800463c <HAL_UART_IRQHandler+0xbc>
 8004618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800461c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00b      	beq.n	800463c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2201      	movs	r2, #1
 800462a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004632:	f043 0201 	orr.w	r2, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800463c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d011      	beq.n	800466c <HAL_UART_IRQHandler+0xec>
 8004648:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00b      	beq.n	800466c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2202      	movs	r2, #2
 800465a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004662:	f043 0204 	orr.w	r2, r3, #4
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800466c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d011      	beq.n	800469c <HAL_UART_IRQHandler+0x11c>
 8004678:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00b      	beq.n	800469c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2204      	movs	r2, #4
 800468a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004692:	f043 0202 	orr.w	r2, r3, #2
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800469c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a0:	f003 0308 	and.w	r3, r3, #8
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d017      	beq.n	80046d8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046ac:	f003 0320 	and.w	r3, r3, #32
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d105      	bne.n	80046c0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80046b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046b8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00b      	beq.n	80046d8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2208      	movs	r2, #8
 80046c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ce:	f043 0208 	orr.w	r2, r3, #8
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80046d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d012      	beq.n	800470a <HAL_UART_IRQHandler+0x18a>
 80046e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00c      	beq.n	800470a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004700:	f043 0220 	orr.w	r2, r3, #32
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 81fd 	beq.w	8004b10 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800471a:	f003 0320 	and.w	r3, r3, #32
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00d      	beq.n	800473e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004726:	f003 0320 	and.w	r3, r3, #32
 800472a:	2b00      	cmp	r3, #0
 800472c:	d007      	beq.n	800473e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004744:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004752:	2b40      	cmp	r3, #64	; 0x40
 8004754:	d005      	beq.n	8004762 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004756:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800475a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800475e:	2b00      	cmp	r3, #0
 8004760:	d04f      	beq.n	8004802 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 fe01 	bl	800536a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004772:	2b40      	cmp	r3, #64	; 0x40
 8004774:	d141      	bne.n	80047fa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	3308      	adds	r3, #8
 800477c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004780:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004784:	e853 3f00 	ldrex	r3, [r3]
 8004788:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800478c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004794:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3308      	adds	r3, #8
 800479e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80047a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80047a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80047ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80047b2:	e841 2300 	strex	r3, r2, [r1]
 80047b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80047ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1d9      	bne.n	8004776 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d013      	beq.n	80047f2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ce:	4a13      	ldr	r2, [pc, #76]	; (800481c <HAL_UART_IRQHandler+0x29c>)
 80047d0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fd fc08 	bl	8001fec <HAL_DMA_Abort_IT>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d017      	beq.n	8004812 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80047ec:	4610      	mov	r0, r2
 80047ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f0:	e00f      	b.n	8004812 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f9a0 	bl	8004b38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f8:	e00b      	b.n	8004812 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f99c 	bl	8004b38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004800:	e007      	b.n	8004812 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f998 	bl	8004b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004810:	e17e      	b.n	8004b10 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004812:	bf00      	nop
    return;
 8004814:	e17c      	b.n	8004b10 <HAL_UART_IRQHandler+0x590>
 8004816:	bf00      	nop
 8004818:	04000120 	.word	0x04000120
 800481c:	08005433 	.word	0x08005433

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004824:	2b01      	cmp	r3, #1
 8004826:	f040 814c 	bne.w	8004ac2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800482a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800482e:	f003 0310 	and.w	r3, r3, #16
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 8145 	beq.w	8004ac2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800483c:	f003 0310 	and.w	r3, r3, #16
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 813e 	beq.w	8004ac2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2210      	movs	r2, #16
 800484c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004858:	2b40      	cmp	r3, #64	; 0x40
 800485a:	f040 80b6 	bne.w	80049ca <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800486a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 8150 	beq.w	8004b14 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800487a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800487e:	429a      	cmp	r2, r3
 8004880:	f080 8148 	bcs.w	8004b14 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800488a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004892:	69db      	ldr	r3, [r3, #28]
 8004894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004898:	f000 8086 	beq.w	80049a8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048a8:	e853 3f00 	ldrex	r3, [r3]
 80048ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80048b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	461a      	mov	r2, r3
 80048c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80048ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80048d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80048d6:	e841 2300 	strex	r3, r2, [r1]
 80048da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80048de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1da      	bne.n	800489c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	3308      	adds	r3, #8
 80048ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048f0:	e853 3f00 	ldrex	r3, [r3]
 80048f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80048f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048f8:	f023 0301 	bic.w	r3, r3, #1
 80048fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	3308      	adds	r3, #8
 8004906:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800490a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800490e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004912:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004916:	e841 2300 	strex	r3, r2, [r1]
 800491a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800491c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1e1      	bne.n	80048e6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3308      	adds	r3, #8
 8004928:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800492c:	e853 3f00 	ldrex	r3, [r3]
 8004930:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004934:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004938:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3308      	adds	r3, #8
 8004942:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004946:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004948:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800494c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800494e:	e841 2300 	strex	r3, r2, [r1]
 8004952:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004954:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1e3      	bne.n	8004922 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2220      	movs	r2, #32
 800495e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004970:	e853 3f00 	ldrex	r3, [r3]
 8004974:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004978:	f023 0310 	bic.w	r3, r3, #16
 800497c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	461a      	mov	r2, r3
 8004986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800498a:	65bb      	str	r3, [r7, #88]	; 0x58
 800498c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004990:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004992:	e841 2300 	strex	r3, r2, [r1]
 8004996:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1e4      	bne.n	8004968 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fd fab2 	bl	8001f0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2202      	movs	r2, #2
 80049ac:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	b29b      	uxth	r3, r3
 80049c0:	4619      	mov	r1, r3
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f8c2 	bl	8004b4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049c8:	e0a4      	b.n	8004b14 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f000 8096 	beq.w	8004b18 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80049ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 8091 	beq.w	8004b18 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fe:	e853 3f00 	ldrex	r3, [r3]
 8004a02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	461a      	mov	r2, r3
 8004a14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a18:	647b      	str	r3, [r7, #68]	; 0x44
 8004a1a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a20:	e841 2300 	strex	r3, r2, [r1]
 8004a24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1e4      	bne.n	80049f6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	3308      	adds	r3, #8
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	e853 3f00 	ldrex	r3, [r3]
 8004a3a:	623b      	str	r3, [r7, #32]
   return(result);
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	f023 0301 	bic.w	r3, r3, #1
 8004a42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3308      	adds	r3, #8
 8004a4c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a50:	633a      	str	r2, [r7, #48]	; 0x30
 8004a52:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a58:	e841 2300 	strex	r3, r2, [r1]
 8004a5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e3      	bne.n	8004a2c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2220      	movs	r2, #32
 8004a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	e853 3f00 	ldrex	r3, [r3]
 8004a84:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f023 0310 	bic.w	r3, r3, #16
 8004a8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a9a:	61fb      	str	r3, [r7, #28]
 8004a9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9e:	69b9      	ldr	r1, [r7, #24]
 8004aa0:	69fa      	ldr	r2, [r7, #28]
 8004aa2:	e841 2300 	strex	r3, r2, [r1]
 8004aa6:	617b      	str	r3, [r7, #20]
   return(result);
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1e4      	bne.n	8004a78 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ab4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ab8:	4619      	mov	r1, r3
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f846 	bl	8004b4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ac0:	e02a      	b.n	8004b18 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00e      	beq.n	8004aec <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d008      	beq.n	8004aec <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d01c      	beq.n	8004b1c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	4798      	blx	r3
    }
    return;
 8004aea:	e017      	b.n	8004b1c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d012      	beq.n	8004b1e <HAL_UART_IRQHandler+0x59e>
 8004af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00c      	beq.n	8004b1e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 fcaa 	bl	800545e <UART_EndTransmit_IT>
    return;
 8004b0a:	e008      	b.n	8004b1e <HAL_UART_IRQHandler+0x59e>
      return;
 8004b0c:	bf00      	nop
 8004b0e:	e006      	b.n	8004b1e <HAL_UART_IRQHandler+0x59e>
    return;
 8004b10:	bf00      	nop
 8004b12:	e004      	b.n	8004b1e <HAL_UART_IRQHandler+0x59e>
      return;
 8004b14:	bf00      	nop
 8004b16:	e002      	b.n	8004b1e <HAL_UART_IRQHandler+0x59e>
      return;
 8004b18:	bf00      	nop
 8004b1a:	e000      	b.n	8004b1e <HAL_UART_IRQHandler+0x59e>
    return;
 8004b1c:	bf00      	nop
  }

}
 8004b1e:	37e8      	adds	r7, #232	; 0xe8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	460b      	mov	r3, r1
 8004b56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b088      	sub	sp, #32
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	4ba6      	ldr	r3, [pc, #664]	; (8004e28 <UART_SetConfig+0x2c4>)
 8004b90:	4013      	ands	r3, r2
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6812      	ldr	r2, [r2, #0]
 8004b96:	6979      	ldr	r1, [r7, #20]
 8004b98:	430b      	orrs	r3, r1
 8004b9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a94      	ldr	r2, [pc, #592]	; (8004e2c <UART_SetConfig+0x2c8>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d120      	bne.n	8004c22 <UART_SetConfig+0xbe>
 8004be0:	4b93      	ldr	r3, [pc, #588]	; (8004e30 <UART_SetConfig+0x2cc>)
 8004be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be6:	f003 0303 	and.w	r3, r3, #3
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d816      	bhi.n	8004c1c <UART_SetConfig+0xb8>
 8004bee:	a201      	add	r2, pc, #4	; (adr r2, 8004bf4 <UART_SetConfig+0x90>)
 8004bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf4:	08004c05 	.word	0x08004c05
 8004bf8:	08004c11 	.word	0x08004c11
 8004bfc:	08004c0b 	.word	0x08004c0b
 8004c00:	08004c17 	.word	0x08004c17
 8004c04:	2301      	movs	r3, #1
 8004c06:	77fb      	strb	r3, [r7, #31]
 8004c08:	e150      	b.n	8004eac <UART_SetConfig+0x348>
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	77fb      	strb	r3, [r7, #31]
 8004c0e:	e14d      	b.n	8004eac <UART_SetConfig+0x348>
 8004c10:	2304      	movs	r3, #4
 8004c12:	77fb      	strb	r3, [r7, #31]
 8004c14:	e14a      	b.n	8004eac <UART_SetConfig+0x348>
 8004c16:	2308      	movs	r3, #8
 8004c18:	77fb      	strb	r3, [r7, #31]
 8004c1a:	e147      	b.n	8004eac <UART_SetConfig+0x348>
 8004c1c:	2310      	movs	r3, #16
 8004c1e:	77fb      	strb	r3, [r7, #31]
 8004c20:	e144      	b.n	8004eac <UART_SetConfig+0x348>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a83      	ldr	r2, [pc, #524]	; (8004e34 <UART_SetConfig+0x2d0>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d132      	bne.n	8004c92 <UART_SetConfig+0x12e>
 8004c2c:	4b80      	ldr	r3, [pc, #512]	; (8004e30 <UART_SetConfig+0x2cc>)
 8004c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c32:	f003 030c 	and.w	r3, r3, #12
 8004c36:	2b0c      	cmp	r3, #12
 8004c38:	d828      	bhi.n	8004c8c <UART_SetConfig+0x128>
 8004c3a:	a201      	add	r2, pc, #4	; (adr r2, 8004c40 <UART_SetConfig+0xdc>)
 8004c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c40:	08004c75 	.word	0x08004c75
 8004c44:	08004c8d 	.word	0x08004c8d
 8004c48:	08004c8d 	.word	0x08004c8d
 8004c4c:	08004c8d 	.word	0x08004c8d
 8004c50:	08004c81 	.word	0x08004c81
 8004c54:	08004c8d 	.word	0x08004c8d
 8004c58:	08004c8d 	.word	0x08004c8d
 8004c5c:	08004c8d 	.word	0x08004c8d
 8004c60:	08004c7b 	.word	0x08004c7b
 8004c64:	08004c8d 	.word	0x08004c8d
 8004c68:	08004c8d 	.word	0x08004c8d
 8004c6c:	08004c8d 	.word	0x08004c8d
 8004c70:	08004c87 	.word	0x08004c87
 8004c74:	2300      	movs	r3, #0
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	e118      	b.n	8004eac <UART_SetConfig+0x348>
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	77fb      	strb	r3, [r7, #31]
 8004c7e:	e115      	b.n	8004eac <UART_SetConfig+0x348>
 8004c80:	2304      	movs	r3, #4
 8004c82:	77fb      	strb	r3, [r7, #31]
 8004c84:	e112      	b.n	8004eac <UART_SetConfig+0x348>
 8004c86:	2308      	movs	r3, #8
 8004c88:	77fb      	strb	r3, [r7, #31]
 8004c8a:	e10f      	b.n	8004eac <UART_SetConfig+0x348>
 8004c8c:	2310      	movs	r3, #16
 8004c8e:	77fb      	strb	r3, [r7, #31]
 8004c90:	e10c      	b.n	8004eac <UART_SetConfig+0x348>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a68      	ldr	r2, [pc, #416]	; (8004e38 <UART_SetConfig+0x2d4>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d120      	bne.n	8004cde <UART_SetConfig+0x17a>
 8004c9c:	4b64      	ldr	r3, [pc, #400]	; (8004e30 <UART_SetConfig+0x2cc>)
 8004c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ca6:	2b30      	cmp	r3, #48	; 0x30
 8004ca8:	d013      	beq.n	8004cd2 <UART_SetConfig+0x16e>
 8004caa:	2b30      	cmp	r3, #48	; 0x30
 8004cac:	d814      	bhi.n	8004cd8 <UART_SetConfig+0x174>
 8004cae:	2b20      	cmp	r3, #32
 8004cb0:	d009      	beq.n	8004cc6 <UART_SetConfig+0x162>
 8004cb2:	2b20      	cmp	r3, #32
 8004cb4:	d810      	bhi.n	8004cd8 <UART_SetConfig+0x174>
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <UART_SetConfig+0x15c>
 8004cba:	2b10      	cmp	r3, #16
 8004cbc:	d006      	beq.n	8004ccc <UART_SetConfig+0x168>
 8004cbe:	e00b      	b.n	8004cd8 <UART_SetConfig+0x174>
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	77fb      	strb	r3, [r7, #31]
 8004cc4:	e0f2      	b.n	8004eac <UART_SetConfig+0x348>
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	77fb      	strb	r3, [r7, #31]
 8004cca:	e0ef      	b.n	8004eac <UART_SetConfig+0x348>
 8004ccc:	2304      	movs	r3, #4
 8004cce:	77fb      	strb	r3, [r7, #31]
 8004cd0:	e0ec      	b.n	8004eac <UART_SetConfig+0x348>
 8004cd2:	2308      	movs	r3, #8
 8004cd4:	77fb      	strb	r3, [r7, #31]
 8004cd6:	e0e9      	b.n	8004eac <UART_SetConfig+0x348>
 8004cd8:	2310      	movs	r3, #16
 8004cda:	77fb      	strb	r3, [r7, #31]
 8004cdc:	e0e6      	b.n	8004eac <UART_SetConfig+0x348>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a56      	ldr	r2, [pc, #344]	; (8004e3c <UART_SetConfig+0x2d8>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d120      	bne.n	8004d2a <UART_SetConfig+0x1c6>
 8004ce8:	4b51      	ldr	r3, [pc, #324]	; (8004e30 <UART_SetConfig+0x2cc>)
 8004cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004cf2:	2bc0      	cmp	r3, #192	; 0xc0
 8004cf4:	d013      	beq.n	8004d1e <UART_SetConfig+0x1ba>
 8004cf6:	2bc0      	cmp	r3, #192	; 0xc0
 8004cf8:	d814      	bhi.n	8004d24 <UART_SetConfig+0x1c0>
 8004cfa:	2b80      	cmp	r3, #128	; 0x80
 8004cfc:	d009      	beq.n	8004d12 <UART_SetConfig+0x1ae>
 8004cfe:	2b80      	cmp	r3, #128	; 0x80
 8004d00:	d810      	bhi.n	8004d24 <UART_SetConfig+0x1c0>
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <UART_SetConfig+0x1a8>
 8004d06:	2b40      	cmp	r3, #64	; 0x40
 8004d08:	d006      	beq.n	8004d18 <UART_SetConfig+0x1b4>
 8004d0a:	e00b      	b.n	8004d24 <UART_SetConfig+0x1c0>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	77fb      	strb	r3, [r7, #31]
 8004d10:	e0cc      	b.n	8004eac <UART_SetConfig+0x348>
 8004d12:	2302      	movs	r3, #2
 8004d14:	77fb      	strb	r3, [r7, #31]
 8004d16:	e0c9      	b.n	8004eac <UART_SetConfig+0x348>
 8004d18:	2304      	movs	r3, #4
 8004d1a:	77fb      	strb	r3, [r7, #31]
 8004d1c:	e0c6      	b.n	8004eac <UART_SetConfig+0x348>
 8004d1e:	2308      	movs	r3, #8
 8004d20:	77fb      	strb	r3, [r7, #31]
 8004d22:	e0c3      	b.n	8004eac <UART_SetConfig+0x348>
 8004d24:	2310      	movs	r3, #16
 8004d26:	77fb      	strb	r3, [r7, #31]
 8004d28:	e0c0      	b.n	8004eac <UART_SetConfig+0x348>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a44      	ldr	r2, [pc, #272]	; (8004e40 <UART_SetConfig+0x2dc>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d125      	bne.n	8004d80 <UART_SetConfig+0x21c>
 8004d34:	4b3e      	ldr	r3, [pc, #248]	; (8004e30 <UART_SetConfig+0x2cc>)
 8004d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d42:	d017      	beq.n	8004d74 <UART_SetConfig+0x210>
 8004d44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d48:	d817      	bhi.n	8004d7a <UART_SetConfig+0x216>
 8004d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d4e:	d00b      	beq.n	8004d68 <UART_SetConfig+0x204>
 8004d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d54:	d811      	bhi.n	8004d7a <UART_SetConfig+0x216>
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <UART_SetConfig+0x1fe>
 8004d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d5e:	d006      	beq.n	8004d6e <UART_SetConfig+0x20a>
 8004d60:	e00b      	b.n	8004d7a <UART_SetConfig+0x216>
 8004d62:	2300      	movs	r3, #0
 8004d64:	77fb      	strb	r3, [r7, #31]
 8004d66:	e0a1      	b.n	8004eac <UART_SetConfig+0x348>
 8004d68:	2302      	movs	r3, #2
 8004d6a:	77fb      	strb	r3, [r7, #31]
 8004d6c:	e09e      	b.n	8004eac <UART_SetConfig+0x348>
 8004d6e:	2304      	movs	r3, #4
 8004d70:	77fb      	strb	r3, [r7, #31]
 8004d72:	e09b      	b.n	8004eac <UART_SetConfig+0x348>
 8004d74:	2308      	movs	r3, #8
 8004d76:	77fb      	strb	r3, [r7, #31]
 8004d78:	e098      	b.n	8004eac <UART_SetConfig+0x348>
 8004d7a:	2310      	movs	r3, #16
 8004d7c:	77fb      	strb	r3, [r7, #31]
 8004d7e:	e095      	b.n	8004eac <UART_SetConfig+0x348>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a2f      	ldr	r2, [pc, #188]	; (8004e44 <UART_SetConfig+0x2e0>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d125      	bne.n	8004dd6 <UART_SetConfig+0x272>
 8004d8a:	4b29      	ldr	r3, [pc, #164]	; (8004e30 <UART_SetConfig+0x2cc>)
 8004d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d98:	d017      	beq.n	8004dca <UART_SetConfig+0x266>
 8004d9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d9e:	d817      	bhi.n	8004dd0 <UART_SetConfig+0x26c>
 8004da0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004da4:	d00b      	beq.n	8004dbe <UART_SetConfig+0x25a>
 8004da6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004daa:	d811      	bhi.n	8004dd0 <UART_SetConfig+0x26c>
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <UART_SetConfig+0x254>
 8004db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004db4:	d006      	beq.n	8004dc4 <UART_SetConfig+0x260>
 8004db6:	e00b      	b.n	8004dd0 <UART_SetConfig+0x26c>
 8004db8:	2301      	movs	r3, #1
 8004dba:	77fb      	strb	r3, [r7, #31]
 8004dbc:	e076      	b.n	8004eac <UART_SetConfig+0x348>
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	77fb      	strb	r3, [r7, #31]
 8004dc2:	e073      	b.n	8004eac <UART_SetConfig+0x348>
 8004dc4:	2304      	movs	r3, #4
 8004dc6:	77fb      	strb	r3, [r7, #31]
 8004dc8:	e070      	b.n	8004eac <UART_SetConfig+0x348>
 8004dca:	2308      	movs	r3, #8
 8004dcc:	77fb      	strb	r3, [r7, #31]
 8004dce:	e06d      	b.n	8004eac <UART_SetConfig+0x348>
 8004dd0:	2310      	movs	r3, #16
 8004dd2:	77fb      	strb	r3, [r7, #31]
 8004dd4:	e06a      	b.n	8004eac <UART_SetConfig+0x348>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a1b      	ldr	r2, [pc, #108]	; (8004e48 <UART_SetConfig+0x2e4>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d138      	bne.n	8004e52 <UART_SetConfig+0x2ee>
 8004de0:	4b13      	ldr	r3, [pc, #76]	; (8004e30 <UART_SetConfig+0x2cc>)
 8004de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004dea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dee:	d017      	beq.n	8004e20 <UART_SetConfig+0x2bc>
 8004df0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004df4:	d82a      	bhi.n	8004e4c <UART_SetConfig+0x2e8>
 8004df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dfa:	d00b      	beq.n	8004e14 <UART_SetConfig+0x2b0>
 8004dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e00:	d824      	bhi.n	8004e4c <UART_SetConfig+0x2e8>
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <UART_SetConfig+0x2aa>
 8004e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e0a:	d006      	beq.n	8004e1a <UART_SetConfig+0x2b6>
 8004e0c:	e01e      	b.n	8004e4c <UART_SetConfig+0x2e8>
 8004e0e:	2300      	movs	r3, #0
 8004e10:	77fb      	strb	r3, [r7, #31]
 8004e12:	e04b      	b.n	8004eac <UART_SetConfig+0x348>
 8004e14:	2302      	movs	r3, #2
 8004e16:	77fb      	strb	r3, [r7, #31]
 8004e18:	e048      	b.n	8004eac <UART_SetConfig+0x348>
 8004e1a:	2304      	movs	r3, #4
 8004e1c:	77fb      	strb	r3, [r7, #31]
 8004e1e:	e045      	b.n	8004eac <UART_SetConfig+0x348>
 8004e20:	2308      	movs	r3, #8
 8004e22:	77fb      	strb	r3, [r7, #31]
 8004e24:	e042      	b.n	8004eac <UART_SetConfig+0x348>
 8004e26:	bf00      	nop
 8004e28:	efff69f3 	.word	0xefff69f3
 8004e2c:	40011000 	.word	0x40011000
 8004e30:	40023800 	.word	0x40023800
 8004e34:	40004400 	.word	0x40004400
 8004e38:	40004800 	.word	0x40004800
 8004e3c:	40004c00 	.word	0x40004c00
 8004e40:	40005000 	.word	0x40005000
 8004e44:	40011400 	.word	0x40011400
 8004e48:	40007800 	.word	0x40007800
 8004e4c:	2310      	movs	r3, #16
 8004e4e:	77fb      	strb	r3, [r7, #31]
 8004e50:	e02c      	b.n	8004eac <UART_SetConfig+0x348>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a72      	ldr	r2, [pc, #456]	; (8005020 <UART_SetConfig+0x4bc>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d125      	bne.n	8004ea8 <UART_SetConfig+0x344>
 8004e5c:	4b71      	ldr	r3, [pc, #452]	; (8005024 <UART_SetConfig+0x4c0>)
 8004e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004e66:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e6a:	d017      	beq.n	8004e9c <UART_SetConfig+0x338>
 8004e6c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e70:	d817      	bhi.n	8004ea2 <UART_SetConfig+0x33e>
 8004e72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e76:	d00b      	beq.n	8004e90 <UART_SetConfig+0x32c>
 8004e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e7c:	d811      	bhi.n	8004ea2 <UART_SetConfig+0x33e>
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <UART_SetConfig+0x326>
 8004e82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e86:	d006      	beq.n	8004e96 <UART_SetConfig+0x332>
 8004e88:	e00b      	b.n	8004ea2 <UART_SetConfig+0x33e>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	77fb      	strb	r3, [r7, #31]
 8004e8e:	e00d      	b.n	8004eac <UART_SetConfig+0x348>
 8004e90:	2302      	movs	r3, #2
 8004e92:	77fb      	strb	r3, [r7, #31]
 8004e94:	e00a      	b.n	8004eac <UART_SetConfig+0x348>
 8004e96:	2304      	movs	r3, #4
 8004e98:	77fb      	strb	r3, [r7, #31]
 8004e9a:	e007      	b.n	8004eac <UART_SetConfig+0x348>
 8004e9c:	2308      	movs	r3, #8
 8004e9e:	77fb      	strb	r3, [r7, #31]
 8004ea0:	e004      	b.n	8004eac <UART_SetConfig+0x348>
 8004ea2:	2310      	movs	r3, #16
 8004ea4:	77fb      	strb	r3, [r7, #31]
 8004ea6:	e001      	b.n	8004eac <UART_SetConfig+0x348>
 8004ea8:	2310      	movs	r3, #16
 8004eaa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eb4:	d15b      	bne.n	8004f6e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004eb6:	7ffb      	ldrb	r3, [r7, #31]
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d828      	bhi.n	8004f0e <UART_SetConfig+0x3aa>
 8004ebc:	a201      	add	r2, pc, #4	; (adr r2, 8004ec4 <UART_SetConfig+0x360>)
 8004ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec2:	bf00      	nop
 8004ec4:	08004ee9 	.word	0x08004ee9
 8004ec8:	08004ef1 	.word	0x08004ef1
 8004ecc:	08004ef9 	.word	0x08004ef9
 8004ed0:	08004f0f 	.word	0x08004f0f
 8004ed4:	08004eff 	.word	0x08004eff
 8004ed8:	08004f0f 	.word	0x08004f0f
 8004edc:	08004f0f 	.word	0x08004f0f
 8004ee0:	08004f0f 	.word	0x08004f0f
 8004ee4:	08004f07 	.word	0x08004f07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ee8:	f7fe f956 	bl	8003198 <HAL_RCC_GetPCLK1Freq>
 8004eec:	61b8      	str	r0, [r7, #24]
        break;
 8004eee:	e013      	b.n	8004f18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ef0:	f7fe f966 	bl	80031c0 <HAL_RCC_GetPCLK2Freq>
 8004ef4:	61b8      	str	r0, [r7, #24]
        break;
 8004ef6:	e00f      	b.n	8004f18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ef8:	4b4b      	ldr	r3, [pc, #300]	; (8005028 <UART_SetConfig+0x4c4>)
 8004efa:	61bb      	str	r3, [r7, #24]
        break;
 8004efc:	e00c      	b.n	8004f18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004efe:	f7fe f879 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 8004f02:	61b8      	str	r0, [r7, #24]
        break;
 8004f04:	e008      	b.n	8004f18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f0a:	61bb      	str	r3, [r7, #24]
        break;
 8004f0c:	e004      	b.n	8004f18 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	77bb      	strb	r3, [r7, #30]
        break;
 8004f16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d074      	beq.n	8005008 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	005a      	lsls	r2, r3, #1
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	085b      	lsrs	r3, r3, #1
 8004f28:	441a      	add	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	2b0f      	cmp	r3, #15
 8004f38:	d916      	bls.n	8004f68 <UART_SetConfig+0x404>
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f40:	d212      	bcs.n	8004f68 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	f023 030f 	bic.w	r3, r3, #15
 8004f4a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	085b      	lsrs	r3, r3, #1
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	89fb      	ldrh	r3, [r7, #14]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	89fa      	ldrh	r2, [r7, #14]
 8004f64:	60da      	str	r2, [r3, #12]
 8004f66:	e04f      	b.n	8005008 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	77bb      	strb	r3, [r7, #30]
 8004f6c:	e04c      	b.n	8005008 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f6e:	7ffb      	ldrb	r3, [r7, #31]
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d828      	bhi.n	8004fc6 <UART_SetConfig+0x462>
 8004f74:	a201      	add	r2, pc, #4	; (adr r2, 8004f7c <UART_SetConfig+0x418>)
 8004f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7a:	bf00      	nop
 8004f7c:	08004fa1 	.word	0x08004fa1
 8004f80:	08004fa9 	.word	0x08004fa9
 8004f84:	08004fb1 	.word	0x08004fb1
 8004f88:	08004fc7 	.word	0x08004fc7
 8004f8c:	08004fb7 	.word	0x08004fb7
 8004f90:	08004fc7 	.word	0x08004fc7
 8004f94:	08004fc7 	.word	0x08004fc7
 8004f98:	08004fc7 	.word	0x08004fc7
 8004f9c:	08004fbf 	.word	0x08004fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fa0:	f7fe f8fa 	bl	8003198 <HAL_RCC_GetPCLK1Freq>
 8004fa4:	61b8      	str	r0, [r7, #24]
        break;
 8004fa6:	e013      	b.n	8004fd0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fa8:	f7fe f90a 	bl	80031c0 <HAL_RCC_GetPCLK2Freq>
 8004fac:	61b8      	str	r0, [r7, #24]
        break;
 8004fae:	e00f      	b.n	8004fd0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fb0:	4b1d      	ldr	r3, [pc, #116]	; (8005028 <UART_SetConfig+0x4c4>)
 8004fb2:	61bb      	str	r3, [r7, #24]
        break;
 8004fb4:	e00c      	b.n	8004fd0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fb6:	f7fe f81d 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 8004fba:	61b8      	str	r0, [r7, #24]
        break;
 8004fbc:	e008      	b.n	8004fd0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fc2:	61bb      	str	r3, [r7, #24]
        break;
 8004fc4:	e004      	b.n	8004fd0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	77bb      	strb	r3, [r7, #30]
        break;
 8004fce:	bf00      	nop
    }

    if (pclk != 0U)
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d018      	beq.n	8005008 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	085a      	lsrs	r2, r3, #1
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	441a      	add	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	2b0f      	cmp	r3, #15
 8004fee:	d909      	bls.n	8005004 <UART_SetConfig+0x4a0>
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ff6:	d205      	bcs.n	8005004 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	60da      	str	r2, [r3, #12]
 8005002:	e001      	b.n	8005008 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005014:	7fbb      	ldrb	r3, [r7, #30]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3720      	adds	r7, #32
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	40007c00 	.word	0x40007c00
 8005024:	40023800 	.word	0x40023800
 8005028:	00f42400 	.word	0x00f42400

0800502c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00a      	beq.n	8005056 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00a      	beq.n	8005078 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00a      	beq.n	800509a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	f003 0310 	and.w	r3, r3, #16
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00a      	beq.n	80050de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	f003 0320 	and.w	r3, r3, #32
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005108:	2b00      	cmp	r3, #0
 800510a:	d01a      	beq.n	8005142 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800512a:	d10a      	bne.n	8005142 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00a      	beq.n	8005164 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	605a      	str	r2, [r3, #4]
  }
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af02      	add	r7, sp, #8
 8005176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005180:	f7fc fcd4 	bl	8001b2c <HAL_GetTick>
 8005184:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0308 	and.w	r3, r3, #8
 8005190:	2b08      	cmp	r3, #8
 8005192:	d10e      	bne.n	80051b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005194:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f81b 	bl	80051de <UART_WaitOnFlagUntilTimeout>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e011      	b.n	80051d6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2220      	movs	r2, #32
 80051b6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b09c      	sub	sp, #112	; 0x70
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	60f8      	str	r0, [r7, #12]
 80051e6:	60b9      	str	r1, [r7, #8]
 80051e8:	603b      	str	r3, [r7, #0]
 80051ea:	4613      	mov	r3, r2
 80051ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ee:	e0a7      	b.n	8005340 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051f6:	f000 80a3 	beq.w	8005340 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051fa:	f7fc fc97 	bl	8001b2c <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005206:	429a      	cmp	r2, r3
 8005208:	d302      	bcc.n	8005210 <UART_WaitOnFlagUntilTimeout+0x32>
 800520a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800520c:	2b00      	cmp	r3, #0
 800520e:	d13f      	bne.n	8005290 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005218:	e853 3f00 	ldrex	r3, [r3]
 800521c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800521e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005220:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005224:	667b      	str	r3, [r7, #100]	; 0x64
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	461a      	mov	r2, r3
 800522c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800522e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005230:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005232:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005234:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005236:	e841 2300 	strex	r3, r2, [r1]
 800523a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800523c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1e6      	bne.n	8005210 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	3308      	adds	r3, #8
 8005248:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800524c:	e853 3f00 	ldrex	r3, [r3]
 8005250:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005254:	f023 0301 	bic.w	r3, r3, #1
 8005258:	663b      	str	r3, [r7, #96]	; 0x60
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	3308      	adds	r3, #8
 8005260:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005262:	64ba      	str	r2, [r7, #72]	; 0x48
 8005264:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005266:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005268:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800526a:	e841 2300 	strex	r3, r2, [r1]
 800526e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1e5      	bne.n	8005242 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2220      	movs	r2, #32
 800527a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2220      	movs	r2, #32
 8005280:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e068      	b.n	8005362 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0304 	and.w	r3, r3, #4
 800529a:	2b00      	cmp	r3, #0
 800529c:	d050      	beq.n	8005340 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ac:	d148      	bne.n	8005340 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052b6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c0:	e853 3f00 	ldrex	r3, [r3]
 80052c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	461a      	mov	r2, r3
 80052d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d6:	637b      	str	r3, [r7, #52]	; 0x34
 80052d8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052de:	e841 2300 	strex	r3, r2, [r1]
 80052e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1e6      	bne.n	80052b8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	3308      	adds	r3, #8
 80052f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	e853 3f00 	ldrex	r3, [r3]
 80052f8:	613b      	str	r3, [r7, #16]
   return(result);
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	f023 0301 	bic.w	r3, r3, #1
 8005300:	66bb      	str	r3, [r7, #104]	; 0x68
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3308      	adds	r3, #8
 8005308:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800530a:	623a      	str	r2, [r7, #32]
 800530c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530e:	69f9      	ldr	r1, [r7, #28]
 8005310:	6a3a      	ldr	r2, [r7, #32]
 8005312:	e841 2300 	strex	r3, r2, [r1]
 8005316:	61bb      	str	r3, [r7, #24]
   return(result);
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1e5      	bne.n	80052ea <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2220      	movs	r2, #32
 8005322:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2220      	movs	r2, #32
 8005328:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2220      	movs	r2, #32
 8005330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e010      	b.n	8005362 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	69da      	ldr	r2, [r3, #28]
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	4013      	ands	r3, r2
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	429a      	cmp	r2, r3
 800534e:	bf0c      	ite	eq
 8005350:	2301      	moveq	r3, #1
 8005352:	2300      	movne	r3, #0
 8005354:	b2db      	uxtb	r3, r3
 8005356:	461a      	mov	r2, r3
 8005358:	79fb      	ldrb	r3, [r7, #7]
 800535a:	429a      	cmp	r2, r3
 800535c:	f43f af48 	beq.w	80051f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3770      	adds	r7, #112	; 0x70
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800536a:	b480      	push	{r7}
 800536c:	b095      	sub	sp, #84	; 0x54
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800537a:	e853 3f00 	ldrex	r3, [r3]
 800537e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005382:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005386:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	461a      	mov	r2, r3
 800538e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005390:	643b      	str	r3, [r7, #64]	; 0x40
 8005392:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005394:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005396:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005398:	e841 2300 	strex	r3, r2, [r1]
 800539c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800539e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1e6      	bne.n	8005372 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3308      	adds	r3, #8
 80053aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	e853 3f00 	ldrex	r3, [r3]
 80053b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	f023 0301 	bic.w	r3, r3, #1
 80053ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	3308      	adds	r3, #8
 80053c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053cc:	e841 2300 	strex	r3, r2, [r1]
 80053d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1e5      	bne.n	80053a4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d118      	bne.n	8005412 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	e853 3f00 	ldrex	r3, [r3]
 80053ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f023 0310 	bic.w	r3, r3, #16
 80053f4:	647b      	str	r3, [r7, #68]	; 0x44
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053fe:	61bb      	str	r3, [r7, #24]
 8005400:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005402:	6979      	ldr	r1, [r7, #20]
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	e841 2300 	strex	r3, r2, [r1]
 800540a:	613b      	str	r3, [r7, #16]
   return(result);
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1e6      	bne.n	80053e0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2220      	movs	r2, #32
 8005416:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005426:	bf00      	nop
 8005428:	3754      	adds	r7, #84	; 0x54
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b084      	sub	sp, #16
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f7ff fb71 	bl	8004b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005456:	bf00      	nop
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b088      	sub	sp, #32
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	e853 3f00 	ldrex	r3, [r3]
 8005472:	60bb      	str	r3, [r7, #8]
   return(result);
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800547a:	61fb      	str	r3, [r7, #28]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	461a      	mov	r2, r3
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	61bb      	str	r3, [r7, #24]
 8005486:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005488:	6979      	ldr	r1, [r7, #20]
 800548a:	69ba      	ldr	r2, [r7, #24]
 800548c:	e841 2300 	strex	r3, r2, [r1]
 8005490:	613b      	str	r3, [r7, #16]
   return(result);
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1e6      	bne.n	8005466 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2220      	movs	r2, #32
 800549c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f7ff fb3d 	bl	8004b24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054aa:	bf00      	nop
 80054ac:	3720      	adds	r7, #32
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
	...

080054b4 <__errno>:
 80054b4:	4b01      	ldr	r3, [pc, #4]	; (80054bc <__errno+0x8>)
 80054b6:	6818      	ldr	r0, [r3, #0]
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	2000000c 	.word	0x2000000c

080054c0 <__libc_init_array>:
 80054c0:	b570      	push	{r4, r5, r6, lr}
 80054c2:	4d0d      	ldr	r5, [pc, #52]	; (80054f8 <__libc_init_array+0x38>)
 80054c4:	4c0d      	ldr	r4, [pc, #52]	; (80054fc <__libc_init_array+0x3c>)
 80054c6:	1b64      	subs	r4, r4, r5
 80054c8:	10a4      	asrs	r4, r4, #2
 80054ca:	2600      	movs	r6, #0
 80054cc:	42a6      	cmp	r6, r4
 80054ce:	d109      	bne.n	80054e4 <__libc_init_array+0x24>
 80054d0:	4d0b      	ldr	r5, [pc, #44]	; (8005500 <__libc_init_array+0x40>)
 80054d2:	4c0c      	ldr	r4, [pc, #48]	; (8005504 <__libc_init_array+0x44>)
 80054d4:	f001 fa10 	bl	80068f8 <_init>
 80054d8:	1b64      	subs	r4, r4, r5
 80054da:	10a4      	asrs	r4, r4, #2
 80054dc:	2600      	movs	r6, #0
 80054de:	42a6      	cmp	r6, r4
 80054e0:	d105      	bne.n	80054ee <__libc_init_array+0x2e>
 80054e2:	bd70      	pop	{r4, r5, r6, pc}
 80054e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80054e8:	4798      	blx	r3
 80054ea:	3601      	adds	r6, #1
 80054ec:	e7ee      	b.n	80054cc <__libc_init_array+0xc>
 80054ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80054f2:	4798      	blx	r3
 80054f4:	3601      	adds	r6, #1
 80054f6:	e7f2      	b.n	80054de <__libc_init_array+0x1e>
 80054f8:	08006c14 	.word	0x08006c14
 80054fc:	08006c14 	.word	0x08006c14
 8005500:	08006c14 	.word	0x08006c14
 8005504:	08006c18 	.word	0x08006c18

08005508 <memset>:
 8005508:	4402      	add	r2, r0
 800550a:	4603      	mov	r3, r0
 800550c:	4293      	cmp	r3, r2
 800550e:	d100      	bne.n	8005512 <memset+0xa>
 8005510:	4770      	bx	lr
 8005512:	f803 1b01 	strb.w	r1, [r3], #1
 8005516:	e7f9      	b.n	800550c <memset+0x4>

08005518 <iprintf>:
 8005518:	b40f      	push	{r0, r1, r2, r3}
 800551a:	4b0a      	ldr	r3, [pc, #40]	; (8005544 <iprintf+0x2c>)
 800551c:	b513      	push	{r0, r1, r4, lr}
 800551e:	681c      	ldr	r4, [r3, #0]
 8005520:	b124      	cbz	r4, 800552c <iprintf+0x14>
 8005522:	69a3      	ldr	r3, [r4, #24]
 8005524:	b913      	cbnz	r3, 800552c <iprintf+0x14>
 8005526:	4620      	mov	r0, r4
 8005528:	f000 fa8e 	bl	8005a48 <__sinit>
 800552c:	ab05      	add	r3, sp, #20
 800552e:	9a04      	ldr	r2, [sp, #16]
 8005530:	68a1      	ldr	r1, [r4, #8]
 8005532:	9301      	str	r3, [sp, #4]
 8005534:	4620      	mov	r0, r4
 8005536:	f000 fdf3 	bl	8006120 <_vfiprintf_r>
 800553a:	b002      	add	sp, #8
 800553c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005540:	b004      	add	sp, #16
 8005542:	4770      	bx	lr
 8005544:	2000000c 	.word	0x2000000c

08005548 <_puts_r>:
 8005548:	b570      	push	{r4, r5, r6, lr}
 800554a:	460e      	mov	r6, r1
 800554c:	4605      	mov	r5, r0
 800554e:	b118      	cbz	r0, 8005558 <_puts_r+0x10>
 8005550:	6983      	ldr	r3, [r0, #24]
 8005552:	b90b      	cbnz	r3, 8005558 <_puts_r+0x10>
 8005554:	f000 fa78 	bl	8005a48 <__sinit>
 8005558:	69ab      	ldr	r3, [r5, #24]
 800555a:	68ac      	ldr	r4, [r5, #8]
 800555c:	b913      	cbnz	r3, 8005564 <_puts_r+0x1c>
 800555e:	4628      	mov	r0, r5
 8005560:	f000 fa72 	bl	8005a48 <__sinit>
 8005564:	4b2c      	ldr	r3, [pc, #176]	; (8005618 <_puts_r+0xd0>)
 8005566:	429c      	cmp	r4, r3
 8005568:	d120      	bne.n	80055ac <_puts_r+0x64>
 800556a:	686c      	ldr	r4, [r5, #4]
 800556c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800556e:	07db      	lsls	r3, r3, #31
 8005570:	d405      	bmi.n	800557e <_puts_r+0x36>
 8005572:	89a3      	ldrh	r3, [r4, #12]
 8005574:	0598      	lsls	r0, r3, #22
 8005576:	d402      	bmi.n	800557e <_puts_r+0x36>
 8005578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800557a:	f000 fb03 	bl	8005b84 <__retarget_lock_acquire_recursive>
 800557e:	89a3      	ldrh	r3, [r4, #12]
 8005580:	0719      	lsls	r1, r3, #28
 8005582:	d51d      	bpl.n	80055c0 <_puts_r+0x78>
 8005584:	6923      	ldr	r3, [r4, #16]
 8005586:	b1db      	cbz	r3, 80055c0 <_puts_r+0x78>
 8005588:	3e01      	subs	r6, #1
 800558a:	68a3      	ldr	r3, [r4, #8]
 800558c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005590:	3b01      	subs	r3, #1
 8005592:	60a3      	str	r3, [r4, #8]
 8005594:	bb39      	cbnz	r1, 80055e6 <_puts_r+0x9e>
 8005596:	2b00      	cmp	r3, #0
 8005598:	da38      	bge.n	800560c <_puts_r+0xc4>
 800559a:	4622      	mov	r2, r4
 800559c:	210a      	movs	r1, #10
 800559e:	4628      	mov	r0, r5
 80055a0:	f000 f878 	bl	8005694 <__swbuf_r>
 80055a4:	3001      	adds	r0, #1
 80055a6:	d011      	beq.n	80055cc <_puts_r+0x84>
 80055a8:	250a      	movs	r5, #10
 80055aa:	e011      	b.n	80055d0 <_puts_r+0x88>
 80055ac:	4b1b      	ldr	r3, [pc, #108]	; (800561c <_puts_r+0xd4>)
 80055ae:	429c      	cmp	r4, r3
 80055b0:	d101      	bne.n	80055b6 <_puts_r+0x6e>
 80055b2:	68ac      	ldr	r4, [r5, #8]
 80055b4:	e7da      	b.n	800556c <_puts_r+0x24>
 80055b6:	4b1a      	ldr	r3, [pc, #104]	; (8005620 <_puts_r+0xd8>)
 80055b8:	429c      	cmp	r4, r3
 80055ba:	bf08      	it	eq
 80055bc:	68ec      	ldreq	r4, [r5, #12]
 80055be:	e7d5      	b.n	800556c <_puts_r+0x24>
 80055c0:	4621      	mov	r1, r4
 80055c2:	4628      	mov	r0, r5
 80055c4:	f000 f8b8 	bl	8005738 <__swsetup_r>
 80055c8:	2800      	cmp	r0, #0
 80055ca:	d0dd      	beq.n	8005588 <_puts_r+0x40>
 80055cc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80055d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055d2:	07da      	lsls	r2, r3, #31
 80055d4:	d405      	bmi.n	80055e2 <_puts_r+0x9a>
 80055d6:	89a3      	ldrh	r3, [r4, #12]
 80055d8:	059b      	lsls	r3, r3, #22
 80055da:	d402      	bmi.n	80055e2 <_puts_r+0x9a>
 80055dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055de:	f000 fad2 	bl	8005b86 <__retarget_lock_release_recursive>
 80055e2:	4628      	mov	r0, r5
 80055e4:	bd70      	pop	{r4, r5, r6, pc}
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	da04      	bge.n	80055f4 <_puts_r+0xac>
 80055ea:	69a2      	ldr	r2, [r4, #24]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	dc06      	bgt.n	80055fe <_puts_r+0xb6>
 80055f0:	290a      	cmp	r1, #10
 80055f2:	d004      	beq.n	80055fe <_puts_r+0xb6>
 80055f4:	6823      	ldr	r3, [r4, #0]
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	6022      	str	r2, [r4, #0]
 80055fa:	7019      	strb	r1, [r3, #0]
 80055fc:	e7c5      	b.n	800558a <_puts_r+0x42>
 80055fe:	4622      	mov	r2, r4
 8005600:	4628      	mov	r0, r5
 8005602:	f000 f847 	bl	8005694 <__swbuf_r>
 8005606:	3001      	adds	r0, #1
 8005608:	d1bf      	bne.n	800558a <_puts_r+0x42>
 800560a:	e7df      	b.n	80055cc <_puts_r+0x84>
 800560c:	6823      	ldr	r3, [r4, #0]
 800560e:	250a      	movs	r5, #10
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	6022      	str	r2, [r4, #0]
 8005614:	701d      	strb	r5, [r3, #0]
 8005616:	e7db      	b.n	80055d0 <_puts_r+0x88>
 8005618:	08006b98 	.word	0x08006b98
 800561c:	08006bb8 	.word	0x08006bb8
 8005620:	08006b78 	.word	0x08006b78

08005624 <puts>:
 8005624:	4b02      	ldr	r3, [pc, #8]	; (8005630 <puts+0xc>)
 8005626:	4601      	mov	r1, r0
 8005628:	6818      	ldr	r0, [r3, #0]
 800562a:	f7ff bf8d 	b.w	8005548 <_puts_r>
 800562e:	bf00      	nop
 8005630:	2000000c 	.word	0x2000000c

08005634 <siprintf>:
 8005634:	b40e      	push	{r1, r2, r3}
 8005636:	b500      	push	{lr}
 8005638:	b09c      	sub	sp, #112	; 0x70
 800563a:	ab1d      	add	r3, sp, #116	; 0x74
 800563c:	9002      	str	r0, [sp, #8]
 800563e:	9006      	str	r0, [sp, #24]
 8005640:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005644:	4809      	ldr	r0, [pc, #36]	; (800566c <siprintf+0x38>)
 8005646:	9107      	str	r1, [sp, #28]
 8005648:	9104      	str	r1, [sp, #16]
 800564a:	4909      	ldr	r1, [pc, #36]	; (8005670 <siprintf+0x3c>)
 800564c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005650:	9105      	str	r1, [sp, #20]
 8005652:	6800      	ldr	r0, [r0, #0]
 8005654:	9301      	str	r3, [sp, #4]
 8005656:	a902      	add	r1, sp, #8
 8005658:	f000 fc38 	bl	8005ecc <_svfiprintf_r>
 800565c:	9b02      	ldr	r3, [sp, #8]
 800565e:	2200      	movs	r2, #0
 8005660:	701a      	strb	r2, [r3, #0]
 8005662:	b01c      	add	sp, #112	; 0x70
 8005664:	f85d eb04 	ldr.w	lr, [sp], #4
 8005668:	b003      	add	sp, #12
 800566a:	4770      	bx	lr
 800566c:	2000000c 	.word	0x2000000c
 8005670:	ffff0208 	.word	0xffff0208

08005674 <strcat>:
 8005674:	b510      	push	{r4, lr}
 8005676:	4602      	mov	r2, r0
 8005678:	7814      	ldrb	r4, [r2, #0]
 800567a:	4613      	mov	r3, r2
 800567c:	3201      	adds	r2, #1
 800567e:	2c00      	cmp	r4, #0
 8005680:	d1fa      	bne.n	8005678 <strcat+0x4>
 8005682:	3b01      	subs	r3, #1
 8005684:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005688:	f803 2f01 	strb.w	r2, [r3, #1]!
 800568c:	2a00      	cmp	r2, #0
 800568e:	d1f9      	bne.n	8005684 <strcat+0x10>
 8005690:	bd10      	pop	{r4, pc}
	...

08005694 <__swbuf_r>:
 8005694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005696:	460e      	mov	r6, r1
 8005698:	4614      	mov	r4, r2
 800569a:	4605      	mov	r5, r0
 800569c:	b118      	cbz	r0, 80056a6 <__swbuf_r+0x12>
 800569e:	6983      	ldr	r3, [r0, #24]
 80056a0:	b90b      	cbnz	r3, 80056a6 <__swbuf_r+0x12>
 80056a2:	f000 f9d1 	bl	8005a48 <__sinit>
 80056a6:	4b21      	ldr	r3, [pc, #132]	; (800572c <__swbuf_r+0x98>)
 80056a8:	429c      	cmp	r4, r3
 80056aa:	d12b      	bne.n	8005704 <__swbuf_r+0x70>
 80056ac:	686c      	ldr	r4, [r5, #4]
 80056ae:	69a3      	ldr	r3, [r4, #24]
 80056b0:	60a3      	str	r3, [r4, #8]
 80056b2:	89a3      	ldrh	r3, [r4, #12]
 80056b4:	071a      	lsls	r2, r3, #28
 80056b6:	d52f      	bpl.n	8005718 <__swbuf_r+0x84>
 80056b8:	6923      	ldr	r3, [r4, #16]
 80056ba:	b36b      	cbz	r3, 8005718 <__swbuf_r+0x84>
 80056bc:	6923      	ldr	r3, [r4, #16]
 80056be:	6820      	ldr	r0, [r4, #0]
 80056c0:	1ac0      	subs	r0, r0, r3
 80056c2:	6963      	ldr	r3, [r4, #20]
 80056c4:	b2f6      	uxtb	r6, r6
 80056c6:	4283      	cmp	r3, r0
 80056c8:	4637      	mov	r7, r6
 80056ca:	dc04      	bgt.n	80056d6 <__swbuf_r+0x42>
 80056cc:	4621      	mov	r1, r4
 80056ce:	4628      	mov	r0, r5
 80056d0:	f000 f926 	bl	8005920 <_fflush_r>
 80056d4:	bb30      	cbnz	r0, 8005724 <__swbuf_r+0x90>
 80056d6:	68a3      	ldr	r3, [r4, #8]
 80056d8:	3b01      	subs	r3, #1
 80056da:	60a3      	str	r3, [r4, #8]
 80056dc:	6823      	ldr	r3, [r4, #0]
 80056de:	1c5a      	adds	r2, r3, #1
 80056e0:	6022      	str	r2, [r4, #0]
 80056e2:	701e      	strb	r6, [r3, #0]
 80056e4:	6963      	ldr	r3, [r4, #20]
 80056e6:	3001      	adds	r0, #1
 80056e8:	4283      	cmp	r3, r0
 80056ea:	d004      	beq.n	80056f6 <__swbuf_r+0x62>
 80056ec:	89a3      	ldrh	r3, [r4, #12]
 80056ee:	07db      	lsls	r3, r3, #31
 80056f0:	d506      	bpl.n	8005700 <__swbuf_r+0x6c>
 80056f2:	2e0a      	cmp	r6, #10
 80056f4:	d104      	bne.n	8005700 <__swbuf_r+0x6c>
 80056f6:	4621      	mov	r1, r4
 80056f8:	4628      	mov	r0, r5
 80056fa:	f000 f911 	bl	8005920 <_fflush_r>
 80056fe:	b988      	cbnz	r0, 8005724 <__swbuf_r+0x90>
 8005700:	4638      	mov	r0, r7
 8005702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005704:	4b0a      	ldr	r3, [pc, #40]	; (8005730 <__swbuf_r+0x9c>)
 8005706:	429c      	cmp	r4, r3
 8005708:	d101      	bne.n	800570e <__swbuf_r+0x7a>
 800570a:	68ac      	ldr	r4, [r5, #8]
 800570c:	e7cf      	b.n	80056ae <__swbuf_r+0x1a>
 800570e:	4b09      	ldr	r3, [pc, #36]	; (8005734 <__swbuf_r+0xa0>)
 8005710:	429c      	cmp	r4, r3
 8005712:	bf08      	it	eq
 8005714:	68ec      	ldreq	r4, [r5, #12]
 8005716:	e7ca      	b.n	80056ae <__swbuf_r+0x1a>
 8005718:	4621      	mov	r1, r4
 800571a:	4628      	mov	r0, r5
 800571c:	f000 f80c 	bl	8005738 <__swsetup_r>
 8005720:	2800      	cmp	r0, #0
 8005722:	d0cb      	beq.n	80056bc <__swbuf_r+0x28>
 8005724:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005728:	e7ea      	b.n	8005700 <__swbuf_r+0x6c>
 800572a:	bf00      	nop
 800572c:	08006b98 	.word	0x08006b98
 8005730:	08006bb8 	.word	0x08006bb8
 8005734:	08006b78 	.word	0x08006b78

08005738 <__swsetup_r>:
 8005738:	4b32      	ldr	r3, [pc, #200]	; (8005804 <__swsetup_r+0xcc>)
 800573a:	b570      	push	{r4, r5, r6, lr}
 800573c:	681d      	ldr	r5, [r3, #0]
 800573e:	4606      	mov	r6, r0
 8005740:	460c      	mov	r4, r1
 8005742:	b125      	cbz	r5, 800574e <__swsetup_r+0x16>
 8005744:	69ab      	ldr	r3, [r5, #24]
 8005746:	b913      	cbnz	r3, 800574e <__swsetup_r+0x16>
 8005748:	4628      	mov	r0, r5
 800574a:	f000 f97d 	bl	8005a48 <__sinit>
 800574e:	4b2e      	ldr	r3, [pc, #184]	; (8005808 <__swsetup_r+0xd0>)
 8005750:	429c      	cmp	r4, r3
 8005752:	d10f      	bne.n	8005774 <__swsetup_r+0x3c>
 8005754:	686c      	ldr	r4, [r5, #4]
 8005756:	89a3      	ldrh	r3, [r4, #12]
 8005758:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800575c:	0719      	lsls	r1, r3, #28
 800575e:	d42c      	bmi.n	80057ba <__swsetup_r+0x82>
 8005760:	06dd      	lsls	r5, r3, #27
 8005762:	d411      	bmi.n	8005788 <__swsetup_r+0x50>
 8005764:	2309      	movs	r3, #9
 8005766:	6033      	str	r3, [r6, #0]
 8005768:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800576c:	81a3      	strh	r3, [r4, #12]
 800576e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005772:	e03e      	b.n	80057f2 <__swsetup_r+0xba>
 8005774:	4b25      	ldr	r3, [pc, #148]	; (800580c <__swsetup_r+0xd4>)
 8005776:	429c      	cmp	r4, r3
 8005778:	d101      	bne.n	800577e <__swsetup_r+0x46>
 800577a:	68ac      	ldr	r4, [r5, #8]
 800577c:	e7eb      	b.n	8005756 <__swsetup_r+0x1e>
 800577e:	4b24      	ldr	r3, [pc, #144]	; (8005810 <__swsetup_r+0xd8>)
 8005780:	429c      	cmp	r4, r3
 8005782:	bf08      	it	eq
 8005784:	68ec      	ldreq	r4, [r5, #12]
 8005786:	e7e6      	b.n	8005756 <__swsetup_r+0x1e>
 8005788:	0758      	lsls	r0, r3, #29
 800578a:	d512      	bpl.n	80057b2 <__swsetup_r+0x7a>
 800578c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800578e:	b141      	cbz	r1, 80057a2 <__swsetup_r+0x6a>
 8005790:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005794:	4299      	cmp	r1, r3
 8005796:	d002      	beq.n	800579e <__swsetup_r+0x66>
 8005798:	4630      	mov	r0, r6
 800579a:	f000 fa5b 	bl	8005c54 <_free_r>
 800579e:	2300      	movs	r3, #0
 80057a0:	6363      	str	r3, [r4, #52]	; 0x34
 80057a2:	89a3      	ldrh	r3, [r4, #12]
 80057a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80057a8:	81a3      	strh	r3, [r4, #12]
 80057aa:	2300      	movs	r3, #0
 80057ac:	6063      	str	r3, [r4, #4]
 80057ae:	6923      	ldr	r3, [r4, #16]
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	89a3      	ldrh	r3, [r4, #12]
 80057b4:	f043 0308 	orr.w	r3, r3, #8
 80057b8:	81a3      	strh	r3, [r4, #12]
 80057ba:	6923      	ldr	r3, [r4, #16]
 80057bc:	b94b      	cbnz	r3, 80057d2 <__swsetup_r+0x9a>
 80057be:	89a3      	ldrh	r3, [r4, #12]
 80057c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80057c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057c8:	d003      	beq.n	80057d2 <__swsetup_r+0x9a>
 80057ca:	4621      	mov	r1, r4
 80057cc:	4630      	mov	r0, r6
 80057ce:	f000 fa01 	bl	8005bd4 <__smakebuf_r>
 80057d2:	89a0      	ldrh	r0, [r4, #12]
 80057d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057d8:	f010 0301 	ands.w	r3, r0, #1
 80057dc:	d00a      	beq.n	80057f4 <__swsetup_r+0xbc>
 80057de:	2300      	movs	r3, #0
 80057e0:	60a3      	str	r3, [r4, #8]
 80057e2:	6963      	ldr	r3, [r4, #20]
 80057e4:	425b      	negs	r3, r3
 80057e6:	61a3      	str	r3, [r4, #24]
 80057e8:	6923      	ldr	r3, [r4, #16]
 80057ea:	b943      	cbnz	r3, 80057fe <__swsetup_r+0xc6>
 80057ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057f0:	d1ba      	bne.n	8005768 <__swsetup_r+0x30>
 80057f2:	bd70      	pop	{r4, r5, r6, pc}
 80057f4:	0781      	lsls	r1, r0, #30
 80057f6:	bf58      	it	pl
 80057f8:	6963      	ldrpl	r3, [r4, #20]
 80057fa:	60a3      	str	r3, [r4, #8]
 80057fc:	e7f4      	b.n	80057e8 <__swsetup_r+0xb0>
 80057fe:	2000      	movs	r0, #0
 8005800:	e7f7      	b.n	80057f2 <__swsetup_r+0xba>
 8005802:	bf00      	nop
 8005804:	2000000c 	.word	0x2000000c
 8005808:	08006b98 	.word	0x08006b98
 800580c:	08006bb8 	.word	0x08006bb8
 8005810:	08006b78 	.word	0x08006b78

08005814 <__sflush_r>:
 8005814:	898a      	ldrh	r2, [r1, #12]
 8005816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800581a:	4605      	mov	r5, r0
 800581c:	0710      	lsls	r0, r2, #28
 800581e:	460c      	mov	r4, r1
 8005820:	d458      	bmi.n	80058d4 <__sflush_r+0xc0>
 8005822:	684b      	ldr	r3, [r1, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	dc05      	bgt.n	8005834 <__sflush_r+0x20>
 8005828:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800582a:	2b00      	cmp	r3, #0
 800582c:	dc02      	bgt.n	8005834 <__sflush_r+0x20>
 800582e:	2000      	movs	r0, #0
 8005830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005834:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005836:	2e00      	cmp	r6, #0
 8005838:	d0f9      	beq.n	800582e <__sflush_r+0x1a>
 800583a:	2300      	movs	r3, #0
 800583c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005840:	682f      	ldr	r7, [r5, #0]
 8005842:	602b      	str	r3, [r5, #0]
 8005844:	d032      	beq.n	80058ac <__sflush_r+0x98>
 8005846:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	075a      	lsls	r2, r3, #29
 800584c:	d505      	bpl.n	800585a <__sflush_r+0x46>
 800584e:	6863      	ldr	r3, [r4, #4]
 8005850:	1ac0      	subs	r0, r0, r3
 8005852:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005854:	b10b      	cbz	r3, 800585a <__sflush_r+0x46>
 8005856:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005858:	1ac0      	subs	r0, r0, r3
 800585a:	2300      	movs	r3, #0
 800585c:	4602      	mov	r2, r0
 800585e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005860:	6a21      	ldr	r1, [r4, #32]
 8005862:	4628      	mov	r0, r5
 8005864:	47b0      	blx	r6
 8005866:	1c43      	adds	r3, r0, #1
 8005868:	89a3      	ldrh	r3, [r4, #12]
 800586a:	d106      	bne.n	800587a <__sflush_r+0x66>
 800586c:	6829      	ldr	r1, [r5, #0]
 800586e:	291d      	cmp	r1, #29
 8005870:	d82c      	bhi.n	80058cc <__sflush_r+0xb8>
 8005872:	4a2a      	ldr	r2, [pc, #168]	; (800591c <__sflush_r+0x108>)
 8005874:	40ca      	lsrs	r2, r1
 8005876:	07d6      	lsls	r6, r2, #31
 8005878:	d528      	bpl.n	80058cc <__sflush_r+0xb8>
 800587a:	2200      	movs	r2, #0
 800587c:	6062      	str	r2, [r4, #4]
 800587e:	04d9      	lsls	r1, r3, #19
 8005880:	6922      	ldr	r2, [r4, #16]
 8005882:	6022      	str	r2, [r4, #0]
 8005884:	d504      	bpl.n	8005890 <__sflush_r+0x7c>
 8005886:	1c42      	adds	r2, r0, #1
 8005888:	d101      	bne.n	800588e <__sflush_r+0x7a>
 800588a:	682b      	ldr	r3, [r5, #0]
 800588c:	b903      	cbnz	r3, 8005890 <__sflush_r+0x7c>
 800588e:	6560      	str	r0, [r4, #84]	; 0x54
 8005890:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005892:	602f      	str	r7, [r5, #0]
 8005894:	2900      	cmp	r1, #0
 8005896:	d0ca      	beq.n	800582e <__sflush_r+0x1a>
 8005898:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800589c:	4299      	cmp	r1, r3
 800589e:	d002      	beq.n	80058a6 <__sflush_r+0x92>
 80058a0:	4628      	mov	r0, r5
 80058a2:	f000 f9d7 	bl	8005c54 <_free_r>
 80058a6:	2000      	movs	r0, #0
 80058a8:	6360      	str	r0, [r4, #52]	; 0x34
 80058aa:	e7c1      	b.n	8005830 <__sflush_r+0x1c>
 80058ac:	6a21      	ldr	r1, [r4, #32]
 80058ae:	2301      	movs	r3, #1
 80058b0:	4628      	mov	r0, r5
 80058b2:	47b0      	blx	r6
 80058b4:	1c41      	adds	r1, r0, #1
 80058b6:	d1c7      	bne.n	8005848 <__sflush_r+0x34>
 80058b8:	682b      	ldr	r3, [r5, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d0c4      	beq.n	8005848 <__sflush_r+0x34>
 80058be:	2b1d      	cmp	r3, #29
 80058c0:	d001      	beq.n	80058c6 <__sflush_r+0xb2>
 80058c2:	2b16      	cmp	r3, #22
 80058c4:	d101      	bne.n	80058ca <__sflush_r+0xb6>
 80058c6:	602f      	str	r7, [r5, #0]
 80058c8:	e7b1      	b.n	800582e <__sflush_r+0x1a>
 80058ca:	89a3      	ldrh	r3, [r4, #12]
 80058cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058d0:	81a3      	strh	r3, [r4, #12]
 80058d2:	e7ad      	b.n	8005830 <__sflush_r+0x1c>
 80058d4:	690f      	ldr	r7, [r1, #16]
 80058d6:	2f00      	cmp	r7, #0
 80058d8:	d0a9      	beq.n	800582e <__sflush_r+0x1a>
 80058da:	0793      	lsls	r3, r2, #30
 80058dc:	680e      	ldr	r6, [r1, #0]
 80058de:	bf08      	it	eq
 80058e0:	694b      	ldreq	r3, [r1, #20]
 80058e2:	600f      	str	r7, [r1, #0]
 80058e4:	bf18      	it	ne
 80058e6:	2300      	movne	r3, #0
 80058e8:	eba6 0807 	sub.w	r8, r6, r7
 80058ec:	608b      	str	r3, [r1, #8]
 80058ee:	f1b8 0f00 	cmp.w	r8, #0
 80058f2:	dd9c      	ble.n	800582e <__sflush_r+0x1a>
 80058f4:	6a21      	ldr	r1, [r4, #32]
 80058f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058f8:	4643      	mov	r3, r8
 80058fa:	463a      	mov	r2, r7
 80058fc:	4628      	mov	r0, r5
 80058fe:	47b0      	blx	r6
 8005900:	2800      	cmp	r0, #0
 8005902:	dc06      	bgt.n	8005912 <__sflush_r+0xfe>
 8005904:	89a3      	ldrh	r3, [r4, #12]
 8005906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800590a:	81a3      	strh	r3, [r4, #12]
 800590c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005910:	e78e      	b.n	8005830 <__sflush_r+0x1c>
 8005912:	4407      	add	r7, r0
 8005914:	eba8 0800 	sub.w	r8, r8, r0
 8005918:	e7e9      	b.n	80058ee <__sflush_r+0xda>
 800591a:	bf00      	nop
 800591c:	20400001 	.word	0x20400001

08005920 <_fflush_r>:
 8005920:	b538      	push	{r3, r4, r5, lr}
 8005922:	690b      	ldr	r3, [r1, #16]
 8005924:	4605      	mov	r5, r0
 8005926:	460c      	mov	r4, r1
 8005928:	b913      	cbnz	r3, 8005930 <_fflush_r+0x10>
 800592a:	2500      	movs	r5, #0
 800592c:	4628      	mov	r0, r5
 800592e:	bd38      	pop	{r3, r4, r5, pc}
 8005930:	b118      	cbz	r0, 800593a <_fflush_r+0x1a>
 8005932:	6983      	ldr	r3, [r0, #24]
 8005934:	b90b      	cbnz	r3, 800593a <_fflush_r+0x1a>
 8005936:	f000 f887 	bl	8005a48 <__sinit>
 800593a:	4b14      	ldr	r3, [pc, #80]	; (800598c <_fflush_r+0x6c>)
 800593c:	429c      	cmp	r4, r3
 800593e:	d11b      	bne.n	8005978 <_fflush_r+0x58>
 8005940:	686c      	ldr	r4, [r5, #4]
 8005942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0ef      	beq.n	800592a <_fflush_r+0xa>
 800594a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800594c:	07d0      	lsls	r0, r2, #31
 800594e:	d404      	bmi.n	800595a <_fflush_r+0x3a>
 8005950:	0599      	lsls	r1, r3, #22
 8005952:	d402      	bmi.n	800595a <_fflush_r+0x3a>
 8005954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005956:	f000 f915 	bl	8005b84 <__retarget_lock_acquire_recursive>
 800595a:	4628      	mov	r0, r5
 800595c:	4621      	mov	r1, r4
 800595e:	f7ff ff59 	bl	8005814 <__sflush_r>
 8005962:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005964:	07da      	lsls	r2, r3, #31
 8005966:	4605      	mov	r5, r0
 8005968:	d4e0      	bmi.n	800592c <_fflush_r+0xc>
 800596a:	89a3      	ldrh	r3, [r4, #12]
 800596c:	059b      	lsls	r3, r3, #22
 800596e:	d4dd      	bmi.n	800592c <_fflush_r+0xc>
 8005970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005972:	f000 f908 	bl	8005b86 <__retarget_lock_release_recursive>
 8005976:	e7d9      	b.n	800592c <_fflush_r+0xc>
 8005978:	4b05      	ldr	r3, [pc, #20]	; (8005990 <_fflush_r+0x70>)
 800597a:	429c      	cmp	r4, r3
 800597c:	d101      	bne.n	8005982 <_fflush_r+0x62>
 800597e:	68ac      	ldr	r4, [r5, #8]
 8005980:	e7df      	b.n	8005942 <_fflush_r+0x22>
 8005982:	4b04      	ldr	r3, [pc, #16]	; (8005994 <_fflush_r+0x74>)
 8005984:	429c      	cmp	r4, r3
 8005986:	bf08      	it	eq
 8005988:	68ec      	ldreq	r4, [r5, #12]
 800598a:	e7da      	b.n	8005942 <_fflush_r+0x22>
 800598c:	08006b98 	.word	0x08006b98
 8005990:	08006bb8 	.word	0x08006bb8
 8005994:	08006b78 	.word	0x08006b78

08005998 <std>:
 8005998:	2300      	movs	r3, #0
 800599a:	b510      	push	{r4, lr}
 800599c:	4604      	mov	r4, r0
 800599e:	e9c0 3300 	strd	r3, r3, [r0]
 80059a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059a6:	6083      	str	r3, [r0, #8]
 80059a8:	8181      	strh	r1, [r0, #12]
 80059aa:	6643      	str	r3, [r0, #100]	; 0x64
 80059ac:	81c2      	strh	r2, [r0, #14]
 80059ae:	6183      	str	r3, [r0, #24]
 80059b0:	4619      	mov	r1, r3
 80059b2:	2208      	movs	r2, #8
 80059b4:	305c      	adds	r0, #92	; 0x5c
 80059b6:	f7ff fda7 	bl	8005508 <memset>
 80059ba:	4b05      	ldr	r3, [pc, #20]	; (80059d0 <std+0x38>)
 80059bc:	6263      	str	r3, [r4, #36]	; 0x24
 80059be:	4b05      	ldr	r3, [pc, #20]	; (80059d4 <std+0x3c>)
 80059c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80059c2:	4b05      	ldr	r3, [pc, #20]	; (80059d8 <std+0x40>)
 80059c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80059c6:	4b05      	ldr	r3, [pc, #20]	; (80059dc <std+0x44>)
 80059c8:	6224      	str	r4, [r4, #32]
 80059ca:	6323      	str	r3, [r4, #48]	; 0x30
 80059cc:	bd10      	pop	{r4, pc}
 80059ce:	bf00      	nop
 80059d0:	080066c9 	.word	0x080066c9
 80059d4:	080066eb 	.word	0x080066eb
 80059d8:	08006723 	.word	0x08006723
 80059dc:	08006747 	.word	0x08006747

080059e0 <_cleanup_r>:
 80059e0:	4901      	ldr	r1, [pc, #4]	; (80059e8 <_cleanup_r+0x8>)
 80059e2:	f000 b8af 	b.w	8005b44 <_fwalk_reent>
 80059e6:	bf00      	nop
 80059e8:	08005921 	.word	0x08005921

080059ec <__sfmoreglue>:
 80059ec:	b570      	push	{r4, r5, r6, lr}
 80059ee:	2268      	movs	r2, #104	; 0x68
 80059f0:	1e4d      	subs	r5, r1, #1
 80059f2:	4355      	muls	r5, r2
 80059f4:	460e      	mov	r6, r1
 80059f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80059fa:	f000 f997 	bl	8005d2c <_malloc_r>
 80059fe:	4604      	mov	r4, r0
 8005a00:	b140      	cbz	r0, 8005a14 <__sfmoreglue+0x28>
 8005a02:	2100      	movs	r1, #0
 8005a04:	e9c0 1600 	strd	r1, r6, [r0]
 8005a08:	300c      	adds	r0, #12
 8005a0a:	60a0      	str	r0, [r4, #8]
 8005a0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a10:	f7ff fd7a 	bl	8005508 <memset>
 8005a14:	4620      	mov	r0, r4
 8005a16:	bd70      	pop	{r4, r5, r6, pc}

08005a18 <__sfp_lock_acquire>:
 8005a18:	4801      	ldr	r0, [pc, #4]	; (8005a20 <__sfp_lock_acquire+0x8>)
 8005a1a:	f000 b8b3 	b.w	8005b84 <__retarget_lock_acquire_recursive>
 8005a1e:	bf00      	nop
 8005a20:	20000325 	.word	0x20000325

08005a24 <__sfp_lock_release>:
 8005a24:	4801      	ldr	r0, [pc, #4]	; (8005a2c <__sfp_lock_release+0x8>)
 8005a26:	f000 b8ae 	b.w	8005b86 <__retarget_lock_release_recursive>
 8005a2a:	bf00      	nop
 8005a2c:	20000325 	.word	0x20000325

08005a30 <__sinit_lock_acquire>:
 8005a30:	4801      	ldr	r0, [pc, #4]	; (8005a38 <__sinit_lock_acquire+0x8>)
 8005a32:	f000 b8a7 	b.w	8005b84 <__retarget_lock_acquire_recursive>
 8005a36:	bf00      	nop
 8005a38:	20000326 	.word	0x20000326

08005a3c <__sinit_lock_release>:
 8005a3c:	4801      	ldr	r0, [pc, #4]	; (8005a44 <__sinit_lock_release+0x8>)
 8005a3e:	f000 b8a2 	b.w	8005b86 <__retarget_lock_release_recursive>
 8005a42:	bf00      	nop
 8005a44:	20000326 	.word	0x20000326

08005a48 <__sinit>:
 8005a48:	b510      	push	{r4, lr}
 8005a4a:	4604      	mov	r4, r0
 8005a4c:	f7ff fff0 	bl	8005a30 <__sinit_lock_acquire>
 8005a50:	69a3      	ldr	r3, [r4, #24]
 8005a52:	b11b      	cbz	r3, 8005a5c <__sinit+0x14>
 8005a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a58:	f7ff bff0 	b.w	8005a3c <__sinit_lock_release>
 8005a5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a60:	6523      	str	r3, [r4, #80]	; 0x50
 8005a62:	4b13      	ldr	r3, [pc, #76]	; (8005ab0 <__sinit+0x68>)
 8005a64:	4a13      	ldr	r2, [pc, #76]	; (8005ab4 <__sinit+0x6c>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a6a:	42a3      	cmp	r3, r4
 8005a6c:	bf04      	itt	eq
 8005a6e:	2301      	moveq	r3, #1
 8005a70:	61a3      	streq	r3, [r4, #24]
 8005a72:	4620      	mov	r0, r4
 8005a74:	f000 f820 	bl	8005ab8 <__sfp>
 8005a78:	6060      	str	r0, [r4, #4]
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	f000 f81c 	bl	8005ab8 <__sfp>
 8005a80:	60a0      	str	r0, [r4, #8]
 8005a82:	4620      	mov	r0, r4
 8005a84:	f000 f818 	bl	8005ab8 <__sfp>
 8005a88:	2200      	movs	r2, #0
 8005a8a:	60e0      	str	r0, [r4, #12]
 8005a8c:	2104      	movs	r1, #4
 8005a8e:	6860      	ldr	r0, [r4, #4]
 8005a90:	f7ff ff82 	bl	8005998 <std>
 8005a94:	68a0      	ldr	r0, [r4, #8]
 8005a96:	2201      	movs	r2, #1
 8005a98:	2109      	movs	r1, #9
 8005a9a:	f7ff ff7d 	bl	8005998 <std>
 8005a9e:	68e0      	ldr	r0, [r4, #12]
 8005aa0:	2202      	movs	r2, #2
 8005aa2:	2112      	movs	r1, #18
 8005aa4:	f7ff ff78 	bl	8005998 <std>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	61a3      	str	r3, [r4, #24]
 8005aac:	e7d2      	b.n	8005a54 <__sinit+0xc>
 8005aae:	bf00      	nop
 8005ab0:	08006b74 	.word	0x08006b74
 8005ab4:	080059e1 	.word	0x080059e1

08005ab8 <__sfp>:
 8005ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aba:	4607      	mov	r7, r0
 8005abc:	f7ff ffac 	bl	8005a18 <__sfp_lock_acquire>
 8005ac0:	4b1e      	ldr	r3, [pc, #120]	; (8005b3c <__sfp+0x84>)
 8005ac2:	681e      	ldr	r6, [r3, #0]
 8005ac4:	69b3      	ldr	r3, [r6, #24]
 8005ac6:	b913      	cbnz	r3, 8005ace <__sfp+0x16>
 8005ac8:	4630      	mov	r0, r6
 8005aca:	f7ff ffbd 	bl	8005a48 <__sinit>
 8005ace:	3648      	adds	r6, #72	; 0x48
 8005ad0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	d503      	bpl.n	8005ae0 <__sfp+0x28>
 8005ad8:	6833      	ldr	r3, [r6, #0]
 8005ada:	b30b      	cbz	r3, 8005b20 <__sfp+0x68>
 8005adc:	6836      	ldr	r6, [r6, #0]
 8005ade:	e7f7      	b.n	8005ad0 <__sfp+0x18>
 8005ae0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ae4:	b9d5      	cbnz	r5, 8005b1c <__sfp+0x64>
 8005ae6:	4b16      	ldr	r3, [pc, #88]	; (8005b40 <__sfp+0x88>)
 8005ae8:	60e3      	str	r3, [r4, #12]
 8005aea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005aee:	6665      	str	r5, [r4, #100]	; 0x64
 8005af0:	f000 f847 	bl	8005b82 <__retarget_lock_init_recursive>
 8005af4:	f7ff ff96 	bl	8005a24 <__sfp_lock_release>
 8005af8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005afc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005b00:	6025      	str	r5, [r4, #0]
 8005b02:	61a5      	str	r5, [r4, #24]
 8005b04:	2208      	movs	r2, #8
 8005b06:	4629      	mov	r1, r5
 8005b08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b0c:	f7ff fcfc 	bl	8005508 <memset>
 8005b10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005b14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005b18:	4620      	mov	r0, r4
 8005b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b1c:	3468      	adds	r4, #104	; 0x68
 8005b1e:	e7d9      	b.n	8005ad4 <__sfp+0x1c>
 8005b20:	2104      	movs	r1, #4
 8005b22:	4638      	mov	r0, r7
 8005b24:	f7ff ff62 	bl	80059ec <__sfmoreglue>
 8005b28:	4604      	mov	r4, r0
 8005b2a:	6030      	str	r0, [r6, #0]
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	d1d5      	bne.n	8005adc <__sfp+0x24>
 8005b30:	f7ff ff78 	bl	8005a24 <__sfp_lock_release>
 8005b34:	230c      	movs	r3, #12
 8005b36:	603b      	str	r3, [r7, #0]
 8005b38:	e7ee      	b.n	8005b18 <__sfp+0x60>
 8005b3a:	bf00      	nop
 8005b3c:	08006b74 	.word	0x08006b74
 8005b40:	ffff0001 	.word	0xffff0001

08005b44 <_fwalk_reent>:
 8005b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b48:	4606      	mov	r6, r0
 8005b4a:	4688      	mov	r8, r1
 8005b4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b50:	2700      	movs	r7, #0
 8005b52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b56:	f1b9 0901 	subs.w	r9, r9, #1
 8005b5a:	d505      	bpl.n	8005b68 <_fwalk_reent+0x24>
 8005b5c:	6824      	ldr	r4, [r4, #0]
 8005b5e:	2c00      	cmp	r4, #0
 8005b60:	d1f7      	bne.n	8005b52 <_fwalk_reent+0xe>
 8005b62:	4638      	mov	r0, r7
 8005b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b68:	89ab      	ldrh	r3, [r5, #12]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d907      	bls.n	8005b7e <_fwalk_reent+0x3a>
 8005b6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b72:	3301      	adds	r3, #1
 8005b74:	d003      	beq.n	8005b7e <_fwalk_reent+0x3a>
 8005b76:	4629      	mov	r1, r5
 8005b78:	4630      	mov	r0, r6
 8005b7a:	47c0      	blx	r8
 8005b7c:	4307      	orrs	r7, r0
 8005b7e:	3568      	adds	r5, #104	; 0x68
 8005b80:	e7e9      	b.n	8005b56 <_fwalk_reent+0x12>

08005b82 <__retarget_lock_init_recursive>:
 8005b82:	4770      	bx	lr

08005b84 <__retarget_lock_acquire_recursive>:
 8005b84:	4770      	bx	lr

08005b86 <__retarget_lock_release_recursive>:
 8005b86:	4770      	bx	lr

08005b88 <__swhatbuf_r>:
 8005b88:	b570      	push	{r4, r5, r6, lr}
 8005b8a:	460e      	mov	r6, r1
 8005b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b90:	2900      	cmp	r1, #0
 8005b92:	b096      	sub	sp, #88	; 0x58
 8005b94:	4614      	mov	r4, r2
 8005b96:	461d      	mov	r5, r3
 8005b98:	da08      	bge.n	8005bac <__swhatbuf_r+0x24>
 8005b9a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	602a      	str	r2, [r5, #0]
 8005ba2:	061a      	lsls	r2, r3, #24
 8005ba4:	d410      	bmi.n	8005bc8 <__swhatbuf_r+0x40>
 8005ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005baa:	e00e      	b.n	8005bca <__swhatbuf_r+0x42>
 8005bac:	466a      	mov	r2, sp
 8005bae:	f000 fdf1 	bl	8006794 <_fstat_r>
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	dbf1      	blt.n	8005b9a <__swhatbuf_r+0x12>
 8005bb6:	9a01      	ldr	r2, [sp, #4]
 8005bb8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005bbc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005bc0:	425a      	negs	r2, r3
 8005bc2:	415a      	adcs	r2, r3
 8005bc4:	602a      	str	r2, [r5, #0]
 8005bc6:	e7ee      	b.n	8005ba6 <__swhatbuf_r+0x1e>
 8005bc8:	2340      	movs	r3, #64	; 0x40
 8005bca:	2000      	movs	r0, #0
 8005bcc:	6023      	str	r3, [r4, #0]
 8005bce:	b016      	add	sp, #88	; 0x58
 8005bd0:	bd70      	pop	{r4, r5, r6, pc}
	...

08005bd4 <__smakebuf_r>:
 8005bd4:	898b      	ldrh	r3, [r1, #12]
 8005bd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005bd8:	079d      	lsls	r5, r3, #30
 8005bda:	4606      	mov	r6, r0
 8005bdc:	460c      	mov	r4, r1
 8005bde:	d507      	bpl.n	8005bf0 <__smakebuf_r+0x1c>
 8005be0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005be4:	6023      	str	r3, [r4, #0]
 8005be6:	6123      	str	r3, [r4, #16]
 8005be8:	2301      	movs	r3, #1
 8005bea:	6163      	str	r3, [r4, #20]
 8005bec:	b002      	add	sp, #8
 8005bee:	bd70      	pop	{r4, r5, r6, pc}
 8005bf0:	ab01      	add	r3, sp, #4
 8005bf2:	466a      	mov	r2, sp
 8005bf4:	f7ff ffc8 	bl	8005b88 <__swhatbuf_r>
 8005bf8:	9900      	ldr	r1, [sp, #0]
 8005bfa:	4605      	mov	r5, r0
 8005bfc:	4630      	mov	r0, r6
 8005bfe:	f000 f895 	bl	8005d2c <_malloc_r>
 8005c02:	b948      	cbnz	r0, 8005c18 <__smakebuf_r+0x44>
 8005c04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c08:	059a      	lsls	r2, r3, #22
 8005c0a:	d4ef      	bmi.n	8005bec <__smakebuf_r+0x18>
 8005c0c:	f023 0303 	bic.w	r3, r3, #3
 8005c10:	f043 0302 	orr.w	r3, r3, #2
 8005c14:	81a3      	strh	r3, [r4, #12]
 8005c16:	e7e3      	b.n	8005be0 <__smakebuf_r+0xc>
 8005c18:	4b0d      	ldr	r3, [pc, #52]	; (8005c50 <__smakebuf_r+0x7c>)
 8005c1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c1c:	89a3      	ldrh	r3, [r4, #12]
 8005c1e:	6020      	str	r0, [r4, #0]
 8005c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c24:	81a3      	strh	r3, [r4, #12]
 8005c26:	9b00      	ldr	r3, [sp, #0]
 8005c28:	6163      	str	r3, [r4, #20]
 8005c2a:	9b01      	ldr	r3, [sp, #4]
 8005c2c:	6120      	str	r0, [r4, #16]
 8005c2e:	b15b      	cbz	r3, 8005c48 <__smakebuf_r+0x74>
 8005c30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c34:	4630      	mov	r0, r6
 8005c36:	f000 fdbf 	bl	80067b8 <_isatty_r>
 8005c3a:	b128      	cbz	r0, 8005c48 <__smakebuf_r+0x74>
 8005c3c:	89a3      	ldrh	r3, [r4, #12]
 8005c3e:	f023 0303 	bic.w	r3, r3, #3
 8005c42:	f043 0301 	orr.w	r3, r3, #1
 8005c46:	81a3      	strh	r3, [r4, #12]
 8005c48:	89a0      	ldrh	r0, [r4, #12]
 8005c4a:	4305      	orrs	r5, r0
 8005c4c:	81a5      	strh	r5, [r4, #12]
 8005c4e:	e7cd      	b.n	8005bec <__smakebuf_r+0x18>
 8005c50:	080059e1 	.word	0x080059e1

08005c54 <_free_r>:
 8005c54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c56:	2900      	cmp	r1, #0
 8005c58:	d044      	beq.n	8005ce4 <_free_r+0x90>
 8005c5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c5e:	9001      	str	r0, [sp, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f1a1 0404 	sub.w	r4, r1, #4
 8005c66:	bfb8      	it	lt
 8005c68:	18e4      	addlt	r4, r4, r3
 8005c6a:	f000 fdef 	bl	800684c <__malloc_lock>
 8005c6e:	4a1e      	ldr	r2, [pc, #120]	; (8005ce8 <_free_r+0x94>)
 8005c70:	9801      	ldr	r0, [sp, #4]
 8005c72:	6813      	ldr	r3, [r2, #0]
 8005c74:	b933      	cbnz	r3, 8005c84 <_free_r+0x30>
 8005c76:	6063      	str	r3, [r4, #4]
 8005c78:	6014      	str	r4, [r2, #0]
 8005c7a:	b003      	add	sp, #12
 8005c7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c80:	f000 bdea 	b.w	8006858 <__malloc_unlock>
 8005c84:	42a3      	cmp	r3, r4
 8005c86:	d908      	bls.n	8005c9a <_free_r+0x46>
 8005c88:	6825      	ldr	r5, [r4, #0]
 8005c8a:	1961      	adds	r1, r4, r5
 8005c8c:	428b      	cmp	r3, r1
 8005c8e:	bf01      	itttt	eq
 8005c90:	6819      	ldreq	r1, [r3, #0]
 8005c92:	685b      	ldreq	r3, [r3, #4]
 8005c94:	1949      	addeq	r1, r1, r5
 8005c96:	6021      	streq	r1, [r4, #0]
 8005c98:	e7ed      	b.n	8005c76 <_free_r+0x22>
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	b10b      	cbz	r3, 8005ca4 <_free_r+0x50>
 8005ca0:	42a3      	cmp	r3, r4
 8005ca2:	d9fa      	bls.n	8005c9a <_free_r+0x46>
 8005ca4:	6811      	ldr	r1, [r2, #0]
 8005ca6:	1855      	adds	r5, r2, r1
 8005ca8:	42a5      	cmp	r5, r4
 8005caa:	d10b      	bne.n	8005cc4 <_free_r+0x70>
 8005cac:	6824      	ldr	r4, [r4, #0]
 8005cae:	4421      	add	r1, r4
 8005cb0:	1854      	adds	r4, r2, r1
 8005cb2:	42a3      	cmp	r3, r4
 8005cb4:	6011      	str	r1, [r2, #0]
 8005cb6:	d1e0      	bne.n	8005c7a <_free_r+0x26>
 8005cb8:	681c      	ldr	r4, [r3, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	6053      	str	r3, [r2, #4]
 8005cbe:	4421      	add	r1, r4
 8005cc0:	6011      	str	r1, [r2, #0]
 8005cc2:	e7da      	b.n	8005c7a <_free_r+0x26>
 8005cc4:	d902      	bls.n	8005ccc <_free_r+0x78>
 8005cc6:	230c      	movs	r3, #12
 8005cc8:	6003      	str	r3, [r0, #0]
 8005cca:	e7d6      	b.n	8005c7a <_free_r+0x26>
 8005ccc:	6825      	ldr	r5, [r4, #0]
 8005cce:	1961      	adds	r1, r4, r5
 8005cd0:	428b      	cmp	r3, r1
 8005cd2:	bf04      	itt	eq
 8005cd4:	6819      	ldreq	r1, [r3, #0]
 8005cd6:	685b      	ldreq	r3, [r3, #4]
 8005cd8:	6063      	str	r3, [r4, #4]
 8005cda:	bf04      	itt	eq
 8005cdc:	1949      	addeq	r1, r1, r5
 8005cde:	6021      	streq	r1, [r4, #0]
 8005ce0:	6054      	str	r4, [r2, #4]
 8005ce2:	e7ca      	b.n	8005c7a <_free_r+0x26>
 8005ce4:	b003      	add	sp, #12
 8005ce6:	bd30      	pop	{r4, r5, pc}
 8005ce8:	20000328 	.word	0x20000328

08005cec <sbrk_aligned>:
 8005cec:	b570      	push	{r4, r5, r6, lr}
 8005cee:	4e0e      	ldr	r6, [pc, #56]	; (8005d28 <sbrk_aligned+0x3c>)
 8005cf0:	460c      	mov	r4, r1
 8005cf2:	6831      	ldr	r1, [r6, #0]
 8005cf4:	4605      	mov	r5, r0
 8005cf6:	b911      	cbnz	r1, 8005cfe <sbrk_aligned+0x12>
 8005cf8:	f000 fcd6 	bl	80066a8 <_sbrk_r>
 8005cfc:	6030      	str	r0, [r6, #0]
 8005cfe:	4621      	mov	r1, r4
 8005d00:	4628      	mov	r0, r5
 8005d02:	f000 fcd1 	bl	80066a8 <_sbrk_r>
 8005d06:	1c43      	adds	r3, r0, #1
 8005d08:	d00a      	beq.n	8005d20 <sbrk_aligned+0x34>
 8005d0a:	1cc4      	adds	r4, r0, #3
 8005d0c:	f024 0403 	bic.w	r4, r4, #3
 8005d10:	42a0      	cmp	r0, r4
 8005d12:	d007      	beq.n	8005d24 <sbrk_aligned+0x38>
 8005d14:	1a21      	subs	r1, r4, r0
 8005d16:	4628      	mov	r0, r5
 8005d18:	f000 fcc6 	bl	80066a8 <_sbrk_r>
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d101      	bne.n	8005d24 <sbrk_aligned+0x38>
 8005d20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005d24:	4620      	mov	r0, r4
 8005d26:	bd70      	pop	{r4, r5, r6, pc}
 8005d28:	2000032c 	.word	0x2000032c

08005d2c <_malloc_r>:
 8005d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d30:	1ccd      	adds	r5, r1, #3
 8005d32:	f025 0503 	bic.w	r5, r5, #3
 8005d36:	3508      	adds	r5, #8
 8005d38:	2d0c      	cmp	r5, #12
 8005d3a:	bf38      	it	cc
 8005d3c:	250c      	movcc	r5, #12
 8005d3e:	2d00      	cmp	r5, #0
 8005d40:	4607      	mov	r7, r0
 8005d42:	db01      	blt.n	8005d48 <_malloc_r+0x1c>
 8005d44:	42a9      	cmp	r1, r5
 8005d46:	d905      	bls.n	8005d54 <_malloc_r+0x28>
 8005d48:	230c      	movs	r3, #12
 8005d4a:	603b      	str	r3, [r7, #0]
 8005d4c:	2600      	movs	r6, #0
 8005d4e:	4630      	mov	r0, r6
 8005d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d54:	4e2e      	ldr	r6, [pc, #184]	; (8005e10 <_malloc_r+0xe4>)
 8005d56:	f000 fd79 	bl	800684c <__malloc_lock>
 8005d5a:	6833      	ldr	r3, [r6, #0]
 8005d5c:	461c      	mov	r4, r3
 8005d5e:	bb34      	cbnz	r4, 8005dae <_malloc_r+0x82>
 8005d60:	4629      	mov	r1, r5
 8005d62:	4638      	mov	r0, r7
 8005d64:	f7ff ffc2 	bl	8005cec <sbrk_aligned>
 8005d68:	1c43      	adds	r3, r0, #1
 8005d6a:	4604      	mov	r4, r0
 8005d6c:	d14d      	bne.n	8005e0a <_malloc_r+0xde>
 8005d6e:	6834      	ldr	r4, [r6, #0]
 8005d70:	4626      	mov	r6, r4
 8005d72:	2e00      	cmp	r6, #0
 8005d74:	d140      	bne.n	8005df8 <_malloc_r+0xcc>
 8005d76:	6823      	ldr	r3, [r4, #0]
 8005d78:	4631      	mov	r1, r6
 8005d7a:	4638      	mov	r0, r7
 8005d7c:	eb04 0803 	add.w	r8, r4, r3
 8005d80:	f000 fc92 	bl	80066a8 <_sbrk_r>
 8005d84:	4580      	cmp	r8, r0
 8005d86:	d13a      	bne.n	8005dfe <_malloc_r+0xd2>
 8005d88:	6821      	ldr	r1, [r4, #0]
 8005d8a:	3503      	adds	r5, #3
 8005d8c:	1a6d      	subs	r5, r5, r1
 8005d8e:	f025 0503 	bic.w	r5, r5, #3
 8005d92:	3508      	adds	r5, #8
 8005d94:	2d0c      	cmp	r5, #12
 8005d96:	bf38      	it	cc
 8005d98:	250c      	movcc	r5, #12
 8005d9a:	4629      	mov	r1, r5
 8005d9c:	4638      	mov	r0, r7
 8005d9e:	f7ff ffa5 	bl	8005cec <sbrk_aligned>
 8005da2:	3001      	adds	r0, #1
 8005da4:	d02b      	beq.n	8005dfe <_malloc_r+0xd2>
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	442b      	add	r3, r5
 8005daa:	6023      	str	r3, [r4, #0]
 8005dac:	e00e      	b.n	8005dcc <_malloc_r+0xa0>
 8005dae:	6822      	ldr	r2, [r4, #0]
 8005db0:	1b52      	subs	r2, r2, r5
 8005db2:	d41e      	bmi.n	8005df2 <_malloc_r+0xc6>
 8005db4:	2a0b      	cmp	r2, #11
 8005db6:	d916      	bls.n	8005de6 <_malloc_r+0xba>
 8005db8:	1961      	adds	r1, r4, r5
 8005dba:	42a3      	cmp	r3, r4
 8005dbc:	6025      	str	r5, [r4, #0]
 8005dbe:	bf18      	it	ne
 8005dc0:	6059      	strne	r1, [r3, #4]
 8005dc2:	6863      	ldr	r3, [r4, #4]
 8005dc4:	bf08      	it	eq
 8005dc6:	6031      	streq	r1, [r6, #0]
 8005dc8:	5162      	str	r2, [r4, r5]
 8005dca:	604b      	str	r3, [r1, #4]
 8005dcc:	4638      	mov	r0, r7
 8005dce:	f104 060b 	add.w	r6, r4, #11
 8005dd2:	f000 fd41 	bl	8006858 <__malloc_unlock>
 8005dd6:	f026 0607 	bic.w	r6, r6, #7
 8005dda:	1d23      	adds	r3, r4, #4
 8005ddc:	1af2      	subs	r2, r6, r3
 8005dde:	d0b6      	beq.n	8005d4e <_malloc_r+0x22>
 8005de0:	1b9b      	subs	r3, r3, r6
 8005de2:	50a3      	str	r3, [r4, r2]
 8005de4:	e7b3      	b.n	8005d4e <_malloc_r+0x22>
 8005de6:	6862      	ldr	r2, [r4, #4]
 8005de8:	42a3      	cmp	r3, r4
 8005dea:	bf0c      	ite	eq
 8005dec:	6032      	streq	r2, [r6, #0]
 8005dee:	605a      	strne	r2, [r3, #4]
 8005df0:	e7ec      	b.n	8005dcc <_malloc_r+0xa0>
 8005df2:	4623      	mov	r3, r4
 8005df4:	6864      	ldr	r4, [r4, #4]
 8005df6:	e7b2      	b.n	8005d5e <_malloc_r+0x32>
 8005df8:	4634      	mov	r4, r6
 8005dfa:	6876      	ldr	r6, [r6, #4]
 8005dfc:	e7b9      	b.n	8005d72 <_malloc_r+0x46>
 8005dfe:	230c      	movs	r3, #12
 8005e00:	603b      	str	r3, [r7, #0]
 8005e02:	4638      	mov	r0, r7
 8005e04:	f000 fd28 	bl	8006858 <__malloc_unlock>
 8005e08:	e7a1      	b.n	8005d4e <_malloc_r+0x22>
 8005e0a:	6025      	str	r5, [r4, #0]
 8005e0c:	e7de      	b.n	8005dcc <_malloc_r+0xa0>
 8005e0e:	bf00      	nop
 8005e10:	20000328 	.word	0x20000328

08005e14 <__ssputs_r>:
 8005e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e18:	688e      	ldr	r6, [r1, #8]
 8005e1a:	429e      	cmp	r6, r3
 8005e1c:	4682      	mov	sl, r0
 8005e1e:	460c      	mov	r4, r1
 8005e20:	4690      	mov	r8, r2
 8005e22:	461f      	mov	r7, r3
 8005e24:	d838      	bhi.n	8005e98 <__ssputs_r+0x84>
 8005e26:	898a      	ldrh	r2, [r1, #12]
 8005e28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e2c:	d032      	beq.n	8005e94 <__ssputs_r+0x80>
 8005e2e:	6825      	ldr	r5, [r4, #0]
 8005e30:	6909      	ldr	r1, [r1, #16]
 8005e32:	eba5 0901 	sub.w	r9, r5, r1
 8005e36:	6965      	ldr	r5, [r4, #20]
 8005e38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e40:	3301      	adds	r3, #1
 8005e42:	444b      	add	r3, r9
 8005e44:	106d      	asrs	r5, r5, #1
 8005e46:	429d      	cmp	r5, r3
 8005e48:	bf38      	it	cc
 8005e4a:	461d      	movcc	r5, r3
 8005e4c:	0553      	lsls	r3, r2, #21
 8005e4e:	d531      	bpl.n	8005eb4 <__ssputs_r+0xa0>
 8005e50:	4629      	mov	r1, r5
 8005e52:	f7ff ff6b 	bl	8005d2c <_malloc_r>
 8005e56:	4606      	mov	r6, r0
 8005e58:	b950      	cbnz	r0, 8005e70 <__ssputs_r+0x5c>
 8005e5a:	230c      	movs	r3, #12
 8005e5c:	f8ca 3000 	str.w	r3, [sl]
 8005e60:	89a3      	ldrh	r3, [r4, #12]
 8005e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e66:	81a3      	strh	r3, [r4, #12]
 8005e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e70:	6921      	ldr	r1, [r4, #16]
 8005e72:	464a      	mov	r2, r9
 8005e74:	f000 fcc2 	bl	80067fc <memcpy>
 8005e78:	89a3      	ldrh	r3, [r4, #12]
 8005e7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e82:	81a3      	strh	r3, [r4, #12]
 8005e84:	6126      	str	r6, [r4, #16]
 8005e86:	6165      	str	r5, [r4, #20]
 8005e88:	444e      	add	r6, r9
 8005e8a:	eba5 0509 	sub.w	r5, r5, r9
 8005e8e:	6026      	str	r6, [r4, #0]
 8005e90:	60a5      	str	r5, [r4, #8]
 8005e92:	463e      	mov	r6, r7
 8005e94:	42be      	cmp	r6, r7
 8005e96:	d900      	bls.n	8005e9a <__ssputs_r+0x86>
 8005e98:	463e      	mov	r6, r7
 8005e9a:	6820      	ldr	r0, [r4, #0]
 8005e9c:	4632      	mov	r2, r6
 8005e9e:	4641      	mov	r1, r8
 8005ea0:	f000 fcba 	bl	8006818 <memmove>
 8005ea4:	68a3      	ldr	r3, [r4, #8]
 8005ea6:	1b9b      	subs	r3, r3, r6
 8005ea8:	60a3      	str	r3, [r4, #8]
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	4433      	add	r3, r6
 8005eae:	6023      	str	r3, [r4, #0]
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	e7db      	b.n	8005e6c <__ssputs_r+0x58>
 8005eb4:	462a      	mov	r2, r5
 8005eb6:	f000 fcd5 	bl	8006864 <_realloc_r>
 8005eba:	4606      	mov	r6, r0
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	d1e1      	bne.n	8005e84 <__ssputs_r+0x70>
 8005ec0:	6921      	ldr	r1, [r4, #16]
 8005ec2:	4650      	mov	r0, sl
 8005ec4:	f7ff fec6 	bl	8005c54 <_free_r>
 8005ec8:	e7c7      	b.n	8005e5a <__ssputs_r+0x46>
	...

08005ecc <_svfiprintf_r>:
 8005ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed0:	4698      	mov	r8, r3
 8005ed2:	898b      	ldrh	r3, [r1, #12]
 8005ed4:	061b      	lsls	r3, r3, #24
 8005ed6:	b09d      	sub	sp, #116	; 0x74
 8005ed8:	4607      	mov	r7, r0
 8005eda:	460d      	mov	r5, r1
 8005edc:	4614      	mov	r4, r2
 8005ede:	d50e      	bpl.n	8005efe <_svfiprintf_r+0x32>
 8005ee0:	690b      	ldr	r3, [r1, #16]
 8005ee2:	b963      	cbnz	r3, 8005efe <_svfiprintf_r+0x32>
 8005ee4:	2140      	movs	r1, #64	; 0x40
 8005ee6:	f7ff ff21 	bl	8005d2c <_malloc_r>
 8005eea:	6028      	str	r0, [r5, #0]
 8005eec:	6128      	str	r0, [r5, #16]
 8005eee:	b920      	cbnz	r0, 8005efa <_svfiprintf_r+0x2e>
 8005ef0:	230c      	movs	r3, #12
 8005ef2:	603b      	str	r3, [r7, #0]
 8005ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ef8:	e0d1      	b.n	800609e <_svfiprintf_r+0x1d2>
 8005efa:	2340      	movs	r3, #64	; 0x40
 8005efc:	616b      	str	r3, [r5, #20]
 8005efe:	2300      	movs	r3, #0
 8005f00:	9309      	str	r3, [sp, #36]	; 0x24
 8005f02:	2320      	movs	r3, #32
 8005f04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f08:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f0c:	2330      	movs	r3, #48	; 0x30
 8005f0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80060b8 <_svfiprintf_r+0x1ec>
 8005f12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f16:	f04f 0901 	mov.w	r9, #1
 8005f1a:	4623      	mov	r3, r4
 8005f1c:	469a      	mov	sl, r3
 8005f1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f22:	b10a      	cbz	r2, 8005f28 <_svfiprintf_r+0x5c>
 8005f24:	2a25      	cmp	r2, #37	; 0x25
 8005f26:	d1f9      	bne.n	8005f1c <_svfiprintf_r+0x50>
 8005f28:	ebba 0b04 	subs.w	fp, sl, r4
 8005f2c:	d00b      	beq.n	8005f46 <_svfiprintf_r+0x7a>
 8005f2e:	465b      	mov	r3, fp
 8005f30:	4622      	mov	r2, r4
 8005f32:	4629      	mov	r1, r5
 8005f34:	4638      	mov	r0, r7
 8005f36:	f7ff ff6d 	bl	8005e14 <__ssputs_r>
 8005f3a:	3001      	adds	r0, #1
 8005f3c:	f000 80aa 	beq.w	8006094 <_svfiprintf_r+0x1c8>
 8005f40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f42:	445a      	add	r2, fp
 8005f44:	9209      	str	r2, [sp, #36]	; 0x24
 8005f46:	f89a 3000 	ldrb.w	r3, [sl]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 80a2 	beq.w	8006094 <_svfiprintf_r+0x1c8>
 8005f50:	2300      	movs	r3, #0
 8005f52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f5a:	f10a 0a01 	add.w	sl, sl, #1
 8005f5e:	9304      	str	r3, [sp, #16]
 8005f60:	9307      	str	r3, [sp, #28]
 8005f62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f66:	931a      	str	r3, [sp, #104]	; 0x68
 8005f68:	4654      	mov	r4, sl
 8005f6a:	2205      	movs	r2, #5
 8005f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f70:	4851      	ldr	r0, [pc, #324]	; (80060b8 <_svfiprintf_r+0x1ec>)
 8005f72:	f7fa f955 	bl	8000220 <memchr>
 8005f76:	9a04      	ldr	r2, [sp, #16]
 8005f78:	b9d8      	cbnz	r0, 8005fb2 <_svfiprintf_r+0xe6>
 8005f7a:	06d0      	lsls	r0, r2, #27
 8005f7c:	bf44      	itt	mi
 8005f7e:	2320      	movmi	r3, #32
 8005f80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f84:	0711      	lsls	r1, r2, #28
 8005f86:	bf44      	itt	mi
 8005f88:	232b      	movmi	r3, #43	; 0x2b
 8005f8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8005f92:	2b2a      	cmp	r3, #42	; 0x2a
 8005f94:	d015      	beq.n	8005fc2 <_svfiprintf_r+0xf6>
 8005f96:	9a07      	ldr	r2, [sp, #28]
 8005f98:	4654      	mov	r4, sl
 8005f9a:	2000      	movs	r0, #0
 8005f9c:	f04f 0c0a 	mov.w	ip, #10
 8005fa0:	4621      	mov	r1, r4
 8005fa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fa6:	3b30      	subs	r3, #48	; 0x30
 8005fa8:	2b09      	cmp	r3, #9
 8005faa:	d94e      	bls.n	800604a <_svfiprintf_r+0x17e>
 8005fac:	b1b0      	cbz	r0, 8005fdc <_svfiprintf_r+0x110>
 8005fae:	9207      	str	r2, [sp, #28]
 8005fb0:	e014      	b.n	8005fdc <_svfiprintf_r+0x110>
 8005fb2:	eba0 0308 	sub.w	r3, r0, r8
 8005fb6:	fa09 f303 	lsl.w	r3, r9, r3
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	9304      	str	r3, [sp, #16]
 8005fbe:	46a2      	mov	sl, r4
 8005fc0:	e7d2      	b.n	8005f68 <_svfiprintf_r+0x9c>
 8005fc2:	9b03      	ldr	r3, [sp, #12]
 8005fc4:	1d19      	adds	r1, r3, #4
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	9103      	str	r1, [sp, #12]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	bfbb      	ittet	lt
 8005fce:	425b      	neglt	r3, r3
 8005fd0:	f042 0202 	orrlt.w	r2, r2, #2
 8005fd4:	9307      	strge	r3, [sp, #28]
 8005fd6:	9307      	strlt	r3, [sp, #28]
 8005fd8:	bfb8      	it	lt
 8005fda:	9204      	strlt	r2, [sp, #16]
 8005fdc:	7823      	ldrb	r3, [r4, #0]
 8005fde:	2b2e      	cmp	r3, #46	; 0x2e
 8005fe0:	d10c      	bne.n	8005ffc <_svfiprintf_r+0x130>
 8005fe2:	7863      	ldrb	r3, [r4, #1]
 8005fe4:	2b2a      	cmp	r3, #42	; 0x2a
 8005fe6:	d135      	bne.n	8006054 <_svfiprintf_r+0x188>
 8005fe8:	9b03      	ldr	r3, [sp, #12]
 8005fea:	1d1a      	adds	r2, r3, #4
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	9203      	str	r2, [sp, #12]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	bfb8      	it	lt
 8005ff4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005ff8:	3402      	adds	r4, #2
 8005ffa:	9305      	str	r3, [sp, #20]
 8005ffc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80060c8 <_svfiprintf_r+0x1fc>
 8006000:	7821      	ldrb	r1, [r4, #0]
 8006002:	2203      	movs	r2, #3
 8006004:	4650      	mov	r0, sl
 8006006:	f7fa f90b 	bl	8000220 <memchr>
 800600a:	b140      	cbz	r0, 800601e <_svfiprintf_r+0x152>
 800600c:	2340      	movs	r3, #64	; 0x40
 800600e:	eba0 000a 	sub.w	r0, r0, sl
 8006012:	fa03 f000 	lsl.w	r0, r3, r0
 8006016:	9b04      	ldr	r3, [sp, #16]
 8006018:	4303      	orrs	r3, r0
 800601a:	3401      	adds	r4, #1
 800601c:	9304      	str	r3, [sp, #16]
 800601e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006022:	4826      	ldr	r0, [pc, #152]	; (80060bc <_svfiprintf_r+0x1f0>)
 8006024:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006028:	2206      	movs	r2, #6
 800602a:	f7fa f8f9 	bl	8000220 <memchr>
 800602e:	2800      	cmp	r0, #0
 8006030:	d038      	beq.n	80060a4 <_svfiprintf_r+0x1d8>
 8006032:	4b23      	ldr	r3, [pc, #140]	; (80060c0 <_svfiprintf_r+0x1f4>)
 8006034:	bb1b      	cbnz	r3, 800607e <_svfiprintf_r+0x1b2>
 8006036:	9b03      	ldr	r3, [sp, #12]
 8006038:	3307      	adds	r3, #7
 800603a:	f023 0307 	bic.w	r3, r3, #7
 800603e:	3308      	adds	r3, #8
 8006040:	9303      	str	r3, [sp, #12]
 8006042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006044:	4433      	add	r3, r6
 8006046:	9309      	str	r3, [sp, #36]	; 0x24
 8006048:	e767      	b.n	8005f1a <_svfiprintf_r+0x4e>
 800604a:	fb0c 3202 	mla	r2, ip, r2, r3
 800604e:	460c      	mov	r4, r1
 8006050:	2001      	movs	r0, #1
 8006052:	e7a5      	b.n	8005fa0 <_svfiprintf_r+0xd4>
 8006054:	2300      	movs	r3, #0
 8006056:	3401      	adds	r4, #1
 8006058:	9305      	str	r3, [sp, #20]
 800605a:	4619      	mov	r1, r3
 800605c:	f04f 0c0a 	mov.w	ip, #10
 8006060:	4620      	mov	r0, r4
 8006062:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006066:	3a30      	subs	r2, #48	; 0x30
 8006068:	2a09      	cmp	r2, #9
 800606a:	d903      	bls.n	8006074 <_svfiprintf_r+0x1a8>
 800606c:	2b00      	cmp	r3, #0
 800606e:	d0c5      	beq.n	8005ffc <_svfiprintf_r+0x130>
 8006070:	9105      	str	r1, [sp, #20]
 8006072:	e7c3      	b.n	8005ffc <_svfiprintf_r+0x130>
 8006074:	fb0c 2101 	mla	r1, ip, r1, r2
 8006078:	4604      	mov	r4, r0
 800607a:	2301      	movs	r3, #1
 800607c:	e7f0      	b.n	8006060 <_svfiprintf_r+0x194>
 800607e:	ab03      	add	r3, sp, #12
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	462a      	mov	r2, r5
 8006084:	4b0f      	ldr	r3, [pc, #60]	; (80060c4 <_svfiprintf_r+0x1f8>)
 8006086:	a904      	add	r1, sp, #16
 8006088:	4638      	mov	r0, r7
 800608a:	f3af 8000 	nop.w
 800608e:	1c42      	adds	r2, r0, #1
 8006090:	4606      	mov	r6, r0
 8006092:	d1d6      	bne.n	8006042 <_svfiprintf_r+0x176>
 8006094:	89ab      	ldrh	r3, [r5, #12]
 8006096:	065b      	lsls	r3, r3, #25
 8006098:	f53f af2c 	bmi.w	8005ef4 <_svfiprintf_r+0x28>
 800609c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800609e:	b01d      	add	sp, #116	; 0x74
 80060a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060a4:	ab03      	add	r3, sp, #12
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	462a      	mov	r2, r5
 80060aa:	4b06      	ldr	r3, [pc, #24]	; (80060c4 <_svfiprintf_r+0x1f8>)
 80060ac:	a904      	add	r1, sp, #16
 80060ae:	4638      	mov	r0, r7
 80060b0:	f000 f9d4 	bl	800645c <_printf_i>
 80060b4:	e7eb      	b.n	800608e <_svfiprintf_r+0x1c2>
 80060b6:	bf00      	nop
 80060b8:	08006bd8 	.word	0x08006bd8
 80060bc:	08006be2 	.word	0x08006be2
 80060c0:	00000000 	.word	0x00000000
 80060c4:	08005e15 	.word	0x08005e15
 80060c8:	08006bde 	.word	0x08006bde

080060cc <__sfputc_r>:
 80060cc:	6893      	ldr	r3, [r2, #8]
 80060ce:	3b01      	subs	r3, #1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	b410      	push	{r4}
 80060d4:	6093      	str	r3, [r2, #8]
 80060d6:	da08      	bge.n	80060ea <__sfputc_r+0x1e>
 80060d8:	6994      	ldr	r4, [r2, #24]
 80060da:	42a3      	cmp	r3, r4
 80060dc:	db01      	blt.n	80060e2 <__sfputc_r+0x16>
 80060de:	290a      	cmp	r1, #10
 80060e0:	d103      	bne.n	80060ea <__sfputc_r+0x1e>
 80060e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060e6:	f7ff bad5 	b.w	8005694 <__swbuf_r>
 80060ea:	6813      	ldr	r3, [r2, #0]
 80060ec:	1c58      	adds	r0, r3, #1
 80060ee:	6010      	str	r0, [r2, #0]
 80060f0:	7019      	strb	r1, [r3, #0]
 80060f2:	4608      	mov	r0, r1
 80060f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <__sfputs_r>:
 80060fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fc:	4606      	mov	r6, r0
 80060fe:	460f      	mov	r7, r1
 8006100:	4614      	mov	r4, r2
 8006102:	18d5      	adds	r5, r2, r3
 8006104:	42ac      	cmp	r4, r5
 8006106:	d101      	bne.n	800610c <__sfputs_r+0x12>
 8006108:	2000      	movs	r0, #0
 800610a:	e007      	b.n	800611c <__sfputs_r+0x22>
 800610c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006110:	463a      	mov	r2, r7
 8006112:	4630      	mov	r0, r6
 8006114:	f7ff ffda 	bl	80060cc <__sfputc_r>
 8006118:	1c43      	adds	r3, r0, #1
 800611a:	d1f3      	bne.n	8006104 <__sfputs_r+0xa>
 800611c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006120 <_vfiprintf_r>:
 8006120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006124:	460d      	mov	r5, r1
 8006126:	b09d      	sub	sp, #116	; 0x74
 8006128:	4614      	mov	r4, r2
 800612a:	4698      	mov	r8, r3
 800612c:	4606      	mov	r6, r0
 800612e:	b118      	cbz	r0, 8006138 <_vfiprintf_r+0x18>
 8006130:	6983      	ldr	r3, [r0, #24]
 8006132:	b90b      	cbnz	r3, 8006138 <_vfiprintf_r+0x18>
 8006134:	f7ff fc88 	bl	8005a48 <__sinit>
 8006138:	4b89      	ldr	r3, [pc, #548]	; (8006360 <_vfiprintf_r+0x240>)
 800613a:	429d      	cmp	r5, r3
 800613c:	d11b      	bne.n	8006176 <_vfiprintf_r+0x56>
 800613e:	6875      	ldr	r5, [r6, #4]
 8006140:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006142:	07d9      	lsls	r1, r3, #31
 8006144:	d405      	bmi.n	8006152 <_vfiprintf_r+0x32>
 8006146:	89ab      	ldrh	r3, [r5, #12]
 8006148:	059a      	lsls	r2, r3, #22
 800614a:	d402      	bmi.n	8006152 <_vfiprintf_r+0x32>
 800614c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800614e:	f7ff fd19 	bl	8005b84 <__retarget_lock_acquire_recursive>
 8006152:	89ab      	ldrh	r3, [r5, #12]
 8006154:	071b      	lsls	r3, r3, #28
 8006156:	d501      	bpl.n	800615c <_vfiprintf_r+0x3c>
 8006158:	692b      	ldr	r3, [r5, #16]
 800615a:	b9eb      	cbnz	r3, 8006198 <_vfiprintf_r+0x78>
 800615c:	4629      	mov	r1, r5
 800615e:	4630      	mov	r0, r6
 8006160:	f7ff faea 	bl	8005738 <__swsetup_r>
 8006164:	b1c0      	cbz	r0, 8006198 <_vfiprintf_r+0x78>
 8006166:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006168:	07dc      	lsls	r4, r3, #31
 800616a:	d50e      	bpl.n	800618a <_vfiprintf_r+0x6a>
 800616c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006170:	b01d      	add	sp, #116	; 0x74
 8006172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006176:	4b7b      	ldr	r3, [pc, #492]	; (8006364 <_vfiprintf_r+0x244>)
 8006178:	429d      	cmp	r5, r3
 800617a:	d101      	bne.n	8006180 <_vfiprintf_r+0x60>
 800617c:	68b5      	ldr	r5, [r6, #8]
 800617e:	e7df      	b.n	8006140 <_vfiprintf_r+0x20>
 8006180:	4b79      	ldr	r3, [pc, #484]	; (8006368 <_vfiprintf_r+0x248>)
 8006182:	429d      	cmp	r5, r3
 8006184:	bf08      	it	eq
 8006186:	68f5      	ldreq	r5, [r6, #12]
 8006188:	e7da      	b.n	8006140 <_vfiprintf_r+0x20>
 800618a:	89ab      	ldrh	r3, [r5, #12]
 800618c:	0598      	lsls	r0, r3, #22
 800618e:	d4ed      	bmi.n	800616c <_vfiprintf_r+0x4c>
 8006190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006192:	f7ff fcf8 	bl	8005b86 <__retarget_lock_release_recursive>
 8006196:	e7e9      	b.n	800616c <_vfiprintf_r+0x4c>
 8006198:	2300      	movs	r3, #0
 800619a:	9309      	str	r3, [sp, #36]	; 0x24
 800619c:	2320      	movs	r3, #32
 800619e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80061a6:	2330      	movs	r3, #48	; 0x30
 80061a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800636c <_vfiprintf_r+0x24c>
 80061ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061b0:	f04f 0901 	mov.w	r9, #1
 80061b4:	4623      	mov	r3, r4
 80061b6:	469a      	mov	sl, r3
 80061b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061bc:	b10a      	cbz	r2, 80061c2 <_vfiprintf_r+0xa2>
 80061be:	2a25      	cmp	r2, #37	; 0x25
 80061c0:	d1f9      	bne.n	80061b6 <_vfiprintf_r+0x96>
 80061c2:	ebba 0b04 	subs.w	fp, sl, r4
 80061c6:	d00b      	beq.n	80061e0 <_vfiprintf_r+0xc0>
 80061c8:	465b      	mov	r3, fp
 80061ca:	4622      	mov	r2, r4
 80061cc:	4629      	mov	r1, r5
 80061ce:	4630      	mov	r0, r6
 80061d0:	f7ff ff93 	bl	80060fa <__sfputs_r>
 80061d4:	3001      	adds	r0, #1
 80061d6:	f000 80aa 	beq.w	800632e <_vfiprintf_r+0x20e>
 80061da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061dc:	445a      	add	r2, fp
 80061de:	9209      	str	r2, [sp, #36]	; 0x24
 80061e0:	f89a 3000 	ldrb.w	r3, [sl]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f000 80a2 	beq.w	800632e <_vfiprintf_r+0x20e>
 80061ea:	2300      	movs	r3, #0
 80061ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061f4:	f10a 0a01 	add.w	sl, sl, #1
 80061f8:	9304      	str	r3, [sp, #16]
 80061fa:	9307      	str	r3, [sp, #28]
 80061fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006200:	931a      	str	r3, [sp, #104]	; 0x68
 8006202:	4654      	mov	r4, sl
 8006204:	2205      	movs	r2, #5
 8006206:	f814 1b01 	ldrb.w	r1, [r4], #1
 800620a:	4858      	ldr	r0, [pc, #352]	; (800636c <_vfiprintf_r+0x24c>)
 800620c:	f7fa f808 	bl	8000220 <memchr>
 8006210:	9a04      	ldr	r2, [sp, #16]
 8006212:	b9d8      	cbnz	r0, 800624c <_vfiprintf_r+0x12c>
 8006214:	06d1      	lsls	r1, r2, #27
 8006216:	bf44      	itt	mi
 8006218:	2320      	movmi	r3, #32
 800621a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800621e:	0713      	lsls	r3, r2, #28
 8006220:	bf44      	itt	mi
 8006222:	232b      	movmi	r3, #43	; 0x2b
 8006224:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006228:	f89a 3000 	ldrb.w	r3, [sl]
 800622c:	2b2a      	cmp	r3, #42	; 0x2a
 800622e:	d015      	beq.n	800625c <_vfiprintf_r+0x13c>
 8006230:	9a07      	ldr	r2, [sp, #28]
 8006232:	4654      	mov	r4, sl
 8006234:	2000      	movs	r0, #0
 8006236:	f04f 0c0a 	mov.w	ip, #10
 800623a:	4621      	mov	r1, r4
 800623c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006240:	3b30      	subs	r3, #48	; 0x30
 8006242:	2b09      	cmp	r3, #9
 8006244:	d94e      	bls.n	80062e4 <_vfiprintf_r+0x1c4>
 8006246:	b1b0      	cbz	r0, 8006276 <_vfiprintf_r+0x156>
 8006248:	9207      	str	r2, [sp, #28]
 800624a:	e014      	b.n	8006276 <_vfiprintf_r+0x156>
 800624c:	eba0 0308 	sub.w	r3, r0, r8
 8006250:	fa09 f303 	lsl.w	r3, r9, r3
 8006254:	4313      	orrs	r3, r2
 8006256:	9304      	str	r3, [sp, #16]
 8006258:	46a2      	mov	sl, r4
 800625a:	e7d2      	b.n	8006202 <_vfiprintf_r+0xe2>
 800625c:	9b03      	ldr	r3, [sp, #12]
 800625e:	1d19      	adds	r1, r3, #4
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	9103      	str	r1, [sp, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	bfbb      	ittet	lt
 8006268:	425b      	neglt	r3, r3
 800626a:	f042 0202 	orrlt.w	r2, r2, #2
 800626e:	9307      	strge	r3, [sp, #28]
 8006270:	9307      	strlt	r3, [sp, #28]
 8006272:	bfb8      	it	lt
 8006274:	9204      	strlt	r2, [sp, #16]
 8006276:	7823      	ldrb	r3, [r4, #0]
 8006278:	2b2e      	cmp	r3, #46	; 0x2e
 800627a:	d10c      	bne.n	8006296 <_vfiprintf_r+0x176>
 800627c:	7863      	ldrb	r3, [r4, #1]
 800627e:	2b2a      	cmp	r3, #42	; 0x2a
 8006280:	d135      	bne.n	80062ee <_vfiprintf_r+0x1ce>
 8006282:	9b03      	ldr	r3, [sp, #12]
 8006284:	1d1a      	adds	r2, r3, #4
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	9203      	str	r2, [sp, #12]
 800628a:	2b00      	cmp	r3, #0
 800628c:	bfb8      	it	lt
 800628e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006292:	3402      	adds	r4, #2
 8006294:	9305      	str	r3, [sp, #20]
 8006296:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800637c <_vfiprintf_r+0x25c>
 800629a:	7821      	ldrb	r1, [r4, #0]
 800629c:	2203      	movs	r2, #3
 800629e:	4650      	mov	r0, sl
 80062a0:	f7f9 ffbe 	bl	8000220 <memchr>
 80062a4:	b140      	cbz	r0, 80062b8 <_vfiprintf_r+0x198>
 80062a6:	2340      	movs	r3, #64	; 0x40
 80062a8:	eba0 000a 	sub.w	r0, r0, sl
 80062ac:	fa03 f000 	lsl.w	r0, r3, r0
 80062b0:	9b04      	ldr	r3, [sp, #16]
 80062b2:	4303      	orrs	r3, r0
 80062b4:	3401      	adds	r4, #1
 80062b6:	9304      	str	r3, [sp, #16]
 80062b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062bc:	482c      	ldr	r0, [pc, #176]	; (8006370 <_vfiprintf_r+0x250>)
 80062be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062c2:	2206      	movs	r2, #6
 80062c4:	f7f9 ffac 	bl	8000220 <memchr>
 80062c8:	2800      	cmp	r0, #0
 80062ca:	d03f      	beq.n	800634c <_vfiprintf_r+0x22c>
 80062cc:	4b29      	ldr	r3, [pc, #164]	; (8006374 <_vfiprintf_r+0x254>)
 80062ce:	bb1b      	cbnz	r3, 8006318 <_vfiprintf_r+0x1f8>
 80062d0:	9b03      	ldr	r3, [sp, #12]
 80062d2:	3307      	adds	r3, #7
 80062d4:	f023 0307 	bic.w	r3, r3, #7
 80062d8:	3308      	adds	r3, #8
 80062da:	9303      	str	r3, [sp, #12]
 80062dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062de:	443b      	add	r3, r7
 80062e0:	9309      	str	r3, [sp, #36]	; 0x24
 80062e2:	e767      	b.n	80061b4 <_vfiprintf_r+0x94>
 80062e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80062e8:	460c      	mov	r4, r1
 80062ea:	2001      	movs	r0, #1
 80062ec:	e7a5      	b.n	800623a <_vfiprintf_r+0x11a>
 80062ee:	2300      	movs	r3, #0
 80062f0:	3401      	adds	r4, #1
 80062f2:	9305      	str	r3, [sp, #20]
 80062f4:	4619      	mov	r1, r3
 80062f6:	f04f 0c0a 	mov.w	ip, #10
 80062fa:	4620      	mov	r0, r4
 80062fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006300:	3a30      	subs	r2, #48	; 0x30
 8006302:	2a09      	cmp	r2, #9
 8006304:	d903      	bls.n	800630e <_vfiprintf_r+0x1ee>
 8006306:	2b00      	cmp	r3, #0
 8006308:	d0c5      	beq.n	8006296 <_vfiprintf_r+0x176>
 800630a:	9105      	str	r1, [sp, #20]
 800630c:	e7c3      	b.n	8006296 <_vfiprintf_r+0x176>
 800630e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006312:	4604      	mov	r4, r0
 8006314:	2301      	movs	r3, #1
 8006316:	e7f0      	b.n	80062fa <_vfiprintf_r+0x1da>
 8006318:	ab03      	add	r3, sp, #12
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	462a      	mov	r2, r5
 800631e:	4b16      	ldr	r3, [pc, #88]	; (8006378 <_vfiprintf_r+0x258>)
 8006320:	a904      	add	r1, sp, #16
 8006322:	4630      	mov	r0, r6
 8006324:	f3af 8000 	nop.w
 8006328:	4607      	mov	r7, r0
 800632a:	1c78      	adds	r0, r7, #1
 800632c:	d1d6      	bne.n	80062dc <_vfiprintf_r+0x1bc>
 800632e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006330:	07d9      	lsls	r1, r3, #31
 8006332:	d405      	bmi.n	8006340 <_vfiprintf_r+0x220>
 8006334:	89ab      	ldrh	r3, [r5, #12]
 8006336:	059a      	lsls	r2, r3, #22
 8006338:	d402      	bmi.n	8006340 <_vfiprintf_r+0x220>
 800633a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800633c:	f7ff fc23 	bl	8005b86 <__retarget_lock_release_recursive>
 8006340:	89ab      	ldrh	r3, [r5, #12]
 8006342:	065b      	lsls	r3, r3, #25
 8006344:	f53f af12 	bmi.w	800616c <_vfiprintf_r+0x4c>
 8006348:	9809      	ldr	r0, [sp, #36]	; 0x24
 800634a:	e711      	b.n	8006170 <_vfiprintf_r+0x50>
 800634c:	ab03      	add	r3, sp, #12
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	462a      	mov	r2, r5
 8006352:	4b09      	ldr	r3, [pc, #36]	; (8006378 <_vfiprintf_r+0x258>)
 8006354:	a904      	add	r1, sp, #16
 8006356:	4630      	mov	r0, r6
 8006358:	f000 f880 	bl	800645c <_printf_i>
 800635c:	e7e4      	b.n	8006328 <_vfiprintf_r+0x208>
 800635e:	bf00      	nop
 8006360:	08006b98 	.word	0x08006b98
 8006364:	08006bb8 	.word	0x08006bb8
 8006368:	08006b78 	.word	0x08006b78
 800636c:	08006bd8 	.word	0x08006bd8
 8006370:	08006be2 	.word	0x08006be2
 8006374:	00000000 	.word	0x00000000
 8006378:	080060fb 	.word	0x080060fb
 800637c:	08006bde 	.word	0x08006bde

08006380 <_printf_common>:
 8006380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006384:	4616      	mov	r6, r2
 8006386:	4699      	mov	r9, r3
 8006388:	688a      	ldr	r2, [r1, #8]
 800638a:	690b      	ldr	r3, [r1, #16]
 800638c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006390:	4293      	cmp	r3, r2
 8006392:	bfb8      	it	lt
 8006394:	4613      	movlt	r3, r2
 8006396:	6033      	str	r3, [r6, #0]
 8006398:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800639c:	4607      	mov	r7, r0
 800639e:	460c      	mov	r4, r1
 80063a0:	b10a      	cbz	r2, 80063a6 <_printf_common+0x26>
 80063a2:	3301      	adds	r3, #1
 80063a4:	6033      	str	r3, [r6, #0]
 80063a6:	6823      	ldr	r3, [r4, #0]
 80063a8:	0699      	lsls	r1, r3, #26
 80063aa:	bf42      	ittt	mi
 80063ac:	6833      	ldrmi	r3, [r6, #0]
 80063ae:	3302      	addmi	r3, #2
 80063b0:	6033      	strmi	r3, [r6, #0]
 80063b2:	6825      	ldr	r5, [r4, #0]
 80063b4:	f015 0506 	ands.w	r5, r5, #6
 80063b8:	d106      	bne.n	80063c8 <_printf_common+0x48>
 80063ba:	f104 0a19 	add.w	sl, r4, #25
 80063be:	68e3      	ldr	r3, [r4, #12]
 80063c0:	6832      	ldr	r2, [r6, #0]
 80063c2:	1a9b      	subs	r3, r3, r2
 80063c4:	42ab      	cmp	r3, r5
 80063c6:	dc26      	bgt.n	8006416 <_printf_common+0x96>
 80063c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063cc:	1e13      	subs	r3, r2, #0
 80063ce:	6822      	ldr	r2, [r4, #0]
 80063d0:	bf18      	it	ne
 80063d2:	2301      	movne	r3, #1
 80063d4:	0692      	lsls	r2, r2, #26
 80063d6:	d42b      	bmi.n	8006430 <_printf_common+0xb0>
 80063d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063dc:	4649      	mov	r1, r9
 80063de:	4638      	mov	r0, r7
 80063e0:	47c0      	blx	r8
 80063e2:	3001      	adds	r0, #1
 80063e4:	d01e      	beq.n	8006424 <_printf_common+0xa4>
 80063e6:	6823      	ldr	r3, [r4, #0]
 80063e8:	68e5      	ldr	r5, [r4, #12]
 80063ea:	6832      	ldr	r2, [r6, #0]
 80063ec:	f003 0306 	and.w	r3, r3, #6
 80063f0:	2b04      	cmp	r3, #4
 80063f2:	bf08      	it	eq
 80063f4:	1aad      	subeq	r5, r5, r2
 80063f6:	68a3      	ldr	r3, [r4, #8]
 80063f8:	6922      	ldr	r2, [r4, #16]
 80063fa:	bf0c      	ite	eq
 80063fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006400:	2500      	movne	r5, #0
 8006402:	4293      	cmp	r3, r2
 8006404:	bfc4      	itt	gt
 8006406:	1a9b      	subgt	r3, r3, r2
 8006408:	18ed      	addgt	r5, r5, r3
 800640a:	2600      	movs	r6, #0
 800640c:	341a      	adds	r4, #26
 800640e:	42b5      	cmp	r5, r6
 8006410:	d11a      	bne.n	8006448 <_printf_common+0xc8>
 8006412:	2000      	movs	r0, #0
 8006414:	e008      	b.n	8006428 <_printf_common+0xa8>
 8006416:	2301      	movs	r3, #1
 8006418:	4652      	mov	r2, sl
 800641a:	4649      	mov	r1, r9
 800641c:	4638      	mov	r0, r7
 800641e:	47c0      	blx	r8
 8006420:	3001      	adds	r0, #1
 8006422:	d103      	bne.n	800642c <_printf_common+0xac>
 8006424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800642c:	3501      	adds	r5, #1
 800642e:	e7c6      	b.n	80063be <_printf_common+0x3e>
 8006430:	18e1      	adds	r1, r4, r3
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	2030      	movs	r0, #48	; 0x30
 8006436:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800643a:	4422      	add	r2, r4
 800643c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006440:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006444:	3302      	adds	r3, #2
 8006446:	e7c7      	b.n	80063d8 <_printf_common+0x58>
 8006448:	2301      	movs	r3, #1
 800644a:	4622      	mov	r2, r4
 800644c:	4649      	mov	r1, r9
 800644e:	4638      	mov	r0, r7
 8006450:	47c0      	blx	r8
 8006452:	3001      	adds	r0, #1
 8006454:	d0e6      	beq.n	8006424 <_printf_common+0xa4>
 8006456:	3601      	adds	r6, #1
 8006458:	e7d9      	b.n	800640e <_printf_common+0x8e>
	...

0800645c <_printf_i>:
 800645c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006460:	7e0f      	ldrb	r7, [r1, #24]
 8006462:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006464:	2f78      	cmp	r7, #120	; 0x78
 8006466:	4691      	mov	r9, r2
 8006468:	4680      	mov	r8, r0
 800646a:	460c      	mov	r4, r1
 800646c:	469a      	mov	sl, r3
 800646e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006472:	d807      	bhi.n	8006484 <_printf_i+0x28>
 8006474:	2f62      	cmp	r7, #98	; 0x62
 8006476:	d80a      	bhi.n	800648e <_printf_i+0x32>
 8006478:	2f00      	cmp	r7, #0
 800647a:	f000 80d8 	beq.w	800662e <_printf_i+0x1d2>
 800647e:	2f58      	cmp	r7, #88	; 0x58
 8006480:	f000 80a3 	beq.w	80065ca <_printf_i+0x16e>
 8006484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006488:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800648c:	e03a      	b.n	8006504 <_printf_i+0xa8>
 800648e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006492:	2b15      	cmp	r3, #21
 8006494:	d8f6      	bhi.n	8006484 <_printf_i+0x28>
 8006496:	a101      	add	r1, pc, #4	; (adr r1, 800649c <_printf_i+0x40>)
 8006498:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800649c:	080064f5 	.word	0x080064f5
 80064a0:	08006509 	.word	0x08006509
 80064a4:	08006485 	.word	0x08006485
 80064a8:	08006485 	.word	0x08006485
 80064ac:	08006485 	.word	0x08006485
 80064b0:	08006485 	.word	0x08006485
 80064b4:	08006509 	.word	0x08006509
 80064b8:	08006485 	.word	0x08006485
 80064bc:	08006485 	.word	0x08006485
 80064c0:	08006485 	.word	0x08006485
 80064c4:	08006485 	.word	0x08006485
 80064c8:	08006615 	.word	0x08006615
 80064cc:	08006539 	.word	0x08006539
 80064d0:	080065f7 	.word	0x080065f7
 80064d4:	08006485 	.word	0x08006485
 80064d8:	08006485 	.word	0x08006485
 80064dc:	08006637 	.word	0x08006637
 80064e0:	08006485 	.word	0x08006485
 80064e4:	08006539 	.word	0x08006539
 80064e8:	08006485 	.word	0x08006485
 80064ec:	08006485 	.word	0x08006485
 80064f0:	080065ff 	.word	0x080065ff
 80064f4:	682b      	ldr	r3, [r5, #0]
 80064f6:	1d1a      	adds	r2, r3, #4
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	602a      	str	r2, [r5, #0]
 80064fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006500:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006504:	2301      	movs	r3, #1
 8006506:	e0a3      	b.n	8006650 <_printf_i+0x1f4>
 8006508:	6820      	ldr	r0, [r4, #0]
 800650a:	6829      	ldr	r1, [r5, #0]
 800650c:	0606      	lsls	r6, r0, #24
 800650e:	f101 0304 	add.w	r3, r1, #4
 8006512:	d50a      	bpl.n	800652a <_printf_i+0xce>
 8006514:	680e      	ldr	r6, [r1, #0]
 8006516:	602b      	str	r3, [r5, #0]
 8006518:	2e00      	cmp	r6, #0
 800651a:	da03      	bge.n	8006524 <_printf_i+0xc8>
 800651c:	232d      	movs	r3, #45	; 0x2d
 800651e:	4276      	negs	r6, r6
 8006520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006524:	485e      	ldr	r0, [pc, #376]	; (80066a0 <_printf_i+0x244>)
 8006526:	230a      	movs	r3, #10
 8006528:	e019      	b.n	800655e <_printf_i+0x102>
 800652a:	680e      	ldr	r6, [r1, #0]
 800652c:	602b      	str	r3, [r5, #0]
 800652e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006532:	bf18      	it	ne
 8006534:	b236      	sxthne	r6, r6
 8006536:	e7ef      	b.n	8006518 <_printf_i+0xbc>
 8006538:	682b      	ldr	r3, [r5, #0]
 800653a:	6820      	ldr	r0, [r4, #0]
 800653c:	1d19      	adds	r1, r3, #4
 800653e:	6029      	str	r1, [r5, #0]
 8006540:	0601      	lsls	r1, r0, #24
 8006542:	d501      	bpl.n	8006548 <_printf_i+0xec>
 8006544:	681e      	ldr	r6, [r3, #0]
 8006546:	e002      	b.n	800654e <_printf_i+0xf2>
 8006548:	0646      	lsls	r6, r0, #25
 800654a:	d5fb      	bpl.n	8006544 <_printf_i+0xe8>
 800654c:	881e      	ldrh	r6, [r3, #0]
 800654e:	4854      	ldr	r0, [pc, #336]	; (80066a0 <_printf_i+0x244>)
 8006550:	2f6f      	cmp	r7, #111	; 0x6f
 8006552:	bf0c      	ite	eq
 8006554:	2308      	moveq	r3, #8
 8006556:	230a      	movne	r3, #10
 8006558:	2100      	movs	r1, #0
 800655a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800655e:	6865      	ldr	r5, [r4, #4]
 8006560:	60a5      	str	r5, [r4, #8]
 8006562:	2d00      	cmp	r5, #0
 8006564:	bfa2      	ittt	ge
 8006566:	6821      	ldrge	r1, [r4, #0]
 8006568:	f021 0104 	bicge.w	r1, r1, #4
 800656c:	6021      	strge	r1, [r4, #0]
 800656e:	b90e      	cbnz	r6, 8006574 <_printf_i+0x118>
 8006570:	2d00      	cmp	r5, #0
 8006572:	d04d      	beq.n	8006610 <_printf_i+0x1b4>
 8006574:	4615      	mov	r5, r2
 8006576:	fbb6 f1f3 	udiv	r1, r6, r3
 800657a:	fb03 6711 	mls	r7, r3, r1, r6
 800657e:	5dc7      	ldrb	r7, [r0, r7]
 8006580:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006584:	4637      	mov	r7, r6
 8006586:	42bb      	cmp	r3, r7
 8006588:	460e      	mov	r6, r1
 800658a:	d9f4      	bls.n	8006576 <_printf_i+0x11a>
 800658c:	2b08      	cmp	r3, #8
 800658e:	d10b      	bne.n	80065a8 <_printf_i+0x14c>
 8006590:	6823      	ldr	r3, [r4, #0]
 8006592:	07de      	lsls	r6, r3, #31
 8006594:	d508      	bpl.n	80065a8 <_printf_i+0x14c>
 8006596:	6923      	ldr	r3, [r4, #16]
 8006598:	6861      	ldr	r1, [r4, #4]
 800659a:	4299      	cmp	r1, r3
 800659c:	bfde      	ittt	le
 800659e:	2330      	movle	r3, #48	; 0x30
 80065a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065a4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80065a8:	1b52      	subs	r2, r2, r5
 80065aa:	6122      	str	r2, [r4, #16]
 80065ac:	f8cd a000 	str.w	sl, [sp]
 80065b0:	464b      	mov	r3, r9
 80065b2:	aa03      	add	r2, sp, #12
 80065b4:	4621      	mov	r1, r4
 80065b6:	4640      	mov	r0, r8
 80065b8:	f7ff fee2 	bl	8006380 <_printf_common>
 80065bc:	3001      	adds	r0, #1
 80065be:	d14c      	bne.n	800665a <_printf_i+0x1fe>
 80065c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065c4:	b004      	add	sp, #16
 80065c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ca:	4835      	ldr	r0, [pc, #212]	; (80066a0 <_printf_i+0x244>)
 80065cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80065d0:	6829      	ldr	r1, [r5, #0]
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80065d8:	6029      	str	r1, [r5, #0]
 80065da:	061d      	lsls	r5, r3, #24
 80065dc:	d514      	bpl.n	8006608 <_printf_i+0x1ac>
 80065de:	07df      	lsls	r7, r3, #31
 80065e0:	bf44      	itt	mi
 80065e2:	f043 0320 	orrmi.w	r3, r3, #32
 80065e6:	6023      	strmi	r3, [r4, #0]
 80065e8:	b91e      	cbnz	r6, 80065f2 <_printf_i+0x196>
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	f023 0320 	bic.w	r3, r3, #32
 80065f0:	6023      	str	r3, [r4, #0]
 80065f2:	2310      	movs	r3, #16
 80065f4:	e7b0      	b.n	8006558 <_printf_i+0xfc>
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	f043 0320 	orr.w	r3, r3, #32
 80065fc:	6023      	str	r3, [r4, #0]
 80065fe:	2378      	movs	r3, #120	; 0x78
 8006600:	4828      	ldr	r0, [pc, #160]	; (80066a4 <_printf_i+0x248>)
 8006602:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006606:	e7e3      	b.n	80065d0 <_printf_i+0x174>
 8006608:	0659      	lsls	r1, r3, #25
 800660a:	bf48      	it	mi
 800660c:	b2b6      	uxthmi	r6, r6
 800660e:	e7e6      	b.n	80065de <_printf_i+0x182>
 8006610:	4615      	mov	r5, r2
 8006612:	e7bb      	b.n	800658c <_printf_i+0x130>
 8006614:	682b      	ldr	r3, [r5, #0]
 8006616:	6826      	ldr	r6, [r4, #0]
 8006618:	6961      	ldr	r1, [r4, #20]
 800661a:	1d18      	adds	r0, r3, #4
 800661c:	6028      	str	r0, [r5, #0]
 800661e:	0635      	lsls	r5, r6, #24
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	d501      	bpl.n	8006628 <_printf_i+0x1cc>
 8006624:	6019      	str	r1, [r3, #0]
 8006626:	e002      	b.n	800662e <_printf_i+0x1d2>
 8006628:	0670      	lsls	r0, r6, #25
 800662a:	d5fb      	bpl.n	8006624 <_printf_i+0x1c8>
 800662c:	8019      	strh	r1, [r3, #0]
 800662e:	2300      	movs	r3, #0
 8006630:	6123      	str	r3, [r4, #16]
 8006632:	4615      	mov	r5, r2
 8006634:	e7ba      	b.n	80065ac <_printf_i+0x150>
 8006636:	682b      	ldr	r3, [r5, #0]
 8006638:	1d1a      	adds	r2, r3, #4
 800663a:	602a      	str	r2, [r5, #0]
 800663c:	681d      	ldr	r5, [r3, #0]
 800663e:	6862      	ldr	r2, [r4, #4]
 8006640:	2100      	movs	r1, #0
 8006642:	4628      	mov	r0, r5
 8006644:	f7f9 fdec 	bl	8000220 <memchr>
 8006648:	b108      	cbz	r0, 800664e <_printf_i+0x1f2>
 800664a:	1b40      	subs	r0, r0, r5
 800664c:	6060      	str	r0, [r4, #4]
 800664e:	6863      	ldr	r3, [r4, #4]
 8006650:	6123      	str	r3, [r4, #16]
 8006652:	2300      	movs	r3, #0
 8006654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006658:	e7a8      	b.n	80065ac <_printf_i+0x150>
 800665a:	6923      	ldr	r3, [r4, #16]
 800665c:	462a      	mov	r2, r5
 800665e:	4649      	mov	r1, r9
 8006660:	4640      	mov	r0, r8
 8006662:	47d0      	blx	sl
 8006664:	3001      	adds	r0, #1
 8006666:	d0ab      	beq.n	80065c0 <_printf_i+0x164>
 8006668:	6823      	ldr	r3, [r4, #0]
 800666a:	079b      	lsls	r3, r3, #30
 800666c:	d413      	bmi.n	8006696 <_printf_i+0x23a>
 800666e:	68e0      	ldr	r0, [r4, #12]
 8006670:	9b03      	ldr	r3, [sp, #12]
 8006672:	4298      	cmp	r0, r3
 8006674:	bfb8      	it	lt
 8006676:	4618      	movlt	r0, r3
 8006678:	e7a4      	b.n	80065c4 <_printf_i+0x168>
 800667a:	2301      	movs	r3, #1
 800667c:	4632      	mov	r2, r6
 800667e:	4649      	mov	r1, r9
 8006680:	4640      	mov	r0, r8
 8006682:	47d0      	blx	sl
 8006684:	3001      	adds	r0, #1
 8006686:	d09b      	beq.n	80065c0 <_printf_i+0x164>
 8006688:	3501      	adds	r5, #1
 800668a:	68e3      	ldr	r3, [r4, #12]
 800668c:	9903      	ldr	r1, [sp, #12]
 800668e:	1a5b      	subs	r3, r3, r1
 8006690:	42ab      	cmp	r3, r5
 8006692:	dcf2      	bgt.n	800667a <_printf_i+0x21e>
 8006694:	e7eb      	b.n	800666e <_printf_i+0x212>
 8006696:	2500      	movs	r5, #0
 8006698:	f104 0619 	add.w	r6, r4, #25
 800669c:	e7f5      	b.n	800668a <_printf_i+0x22e>
 800669e:	bf00      	nop
 80066a0:	08006be9 	.word	0x08006be9
 80066a4:	08006bfa 	.word	0x08006bfa

080066a8 <_sbrk_r>:
 80066a8:	b538      	push	{r3, r4, r5, lr}
 80066aa:	4d06      	ldr	r5, [pc, #24]	; (80066c4 <_sbrk_r+0x1c>)
 80066ac:	2300      	movs	r3, #0
 80066ae:	4604      	mov	r4, r0
 80066b0:	4608      	mov	r0, r1
 80066b2:	602b      	str	r3, [r5, #0]
 80066b4:	f7fb f96e 	bl	8001994 <_sbrk>
 80066b8:	1c43      	adds	r3, r0, #1
 80066ba:	d102      	bne.n	80066c2 <_sbrk_r+0x1a>
 80066bc:	682b      	ldr	r3, [r5, #0]
 80066be:	b103      	cbz	r3, 80066c2 <_sbrk_r+0x1a>
 80066c0:	6023      	str	r3, [r4, #0]
 80066c2:	bd38      	pop	{r3, r4, r5, pc}
 80066c4:	20000330 	.word	0x20000330

080066c8 <__sread>:
 80066c8:	b510      	push	{r4, lr}
 80066ca:	460c      	mov	r4, r1
 80066cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d0:	f000 f8f8 	bl	80068c4 <_read_r>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	bfab      	itete	ge
 80066d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80066da:	89a3      	ldrhlt	r3, [r4, #12]
 80066dc:	181b      	addge	r3, r3, r0
 80066de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066e2:	bfac      	ite	ge
 80066e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80066e6:	81a3      	strhlt	r3, [r4, #12]
 80066e8:	bd10      	pop	{r4, pc}

080066ea <__swrite>:
 80066ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ee:	461f      	mov	r7, r3
 80066f0:	898b      	ldrh	r3, [r1, #12]
 80066f2:	05db      	lsls	r3, r3, #23
 80066f4:	4605      	mov	r5, r0
 80066f6:	460c      	mov	r4, r1
 80066f8:	4616      	mov	r6, r2
 80066fa:	d505      	bpl.n	8006708 <__swrite+0x1e>
 80066fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006700:	2302      	movs	r3, #2
 8006702:	2200      	movs	r2, #0
 8006704:	f000 f868 	bl	80067d8 <_lseek_r>
 8006708:	89a3      	ldrh	r3, [r4, #12]
 800670a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800670e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006712:	81a3      	strh	r3, [r4, #12]
 8006714:	4632      	mov	r2, r6
 8006716:	463b      	mov	r3, r7
 8006718:	4628      	mov	r0, r5
 800671a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800671e:	f000 b817 	b.w	8006750 <_write_r>

08006722 <__sseek>:
 8006722:	b510      	push	{r4, lr}
 8006724:	460c      	mov	r4, r1
 8006726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800672a:	f000 f855 	bl	80067d8 <_lseek_r>
 800672e:	1c43      	adds	r3, r0, #1
 8006730:	89a3      	ldrh	r3, [r4, #12]
 8006732:	bf15      	itete	ne
 8006734:	6560      	strne	r0, [r4, #84]	; 0x54
 8006736:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800673a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800673e:	81a3      	strheq	r3, [r4, #12]
 8006740:	bf18      	it	ne
 8006742:	81a3      	strhne	r3, [r4, #12]
 8006744:	bd10      	pop	{r4, pc}

08006746 <__sclose>:
 8006746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800674a:	f000 b813 	b.w	8006774 <_close_r>
	...

08006750 <_write_r>:
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	4d07      	ldr	r5, [pc, #28]	; (8006770 <_write_r+0x20>)
 8006754:	4604      	mov	r4, r0
 8006756:	4608      	mov	r0, r1
 8006758:	4611      	mov	r1, r2
 800675a:	2200      	movs	r2, #0
 800675c:	602a      	str	r2, [r5, #0]
 800675e:	461a      	mov	r2, r3
 8006760:	f7fb f8c7 	bl	80018f2 <_write>
 8006764:	1c43      	adds	r3, r0, #1
 8006766:	d102      	bne.n	800676e <_write_r+0x1e>
 8006768:	682b      	ldr	r3, [r5, #0]
 800676a:	b103      	cbz	r3, 800676e <_write_r+0x1e>
 800676c:	6023      	str	r3, [r4, #0]
 800676e:	bd38      	pop	{r3, r4, r5, pc}
 8006770:	20000330 	.word	0x20000330

08006774 <_close_r>:
 8006774:	b538      	push	{r3, r4, r5, lr}
 8006776:	4d06      	ldr	r5, [pc, #24]	; (8006790 <_close_r+0x1c>)
 8006778:	2300      	movs	r3, #0
 800677a:	4604      	mov	r4, r0
 800677c:	4608      	mov	r0, r1
 800677e:	602b      	str	r3, [r5, #0]
 8006780:	f7fb f8d3 	bl	800192a <_close>
 8006784:	1c43      	adds	r3, r0, #1
 8006786:	d102      	bne.n	800678e <_close_r+0x1a>
 8006788:	682b      	ldr	r3, [r5, #0]
 800678a:	b103      	cbz	r3, 800678e <_close_r+0x1a>
 800678c:	6023      	str	r3, [r4, #0]
 800678e:	bd38      	pop	{r3, r4, r5, pc}
 8006790:	20000330 	.word	0x20000330

08006794 <_fstat_r>:
 8006794:	b538      	push	{r3, r4, r5, lr}
 8006796:	4d07      	ldr	r5, [pc, #28]	; (80067b4 <_fstat_r+0x20>)
 8006798:	2300      	movs	r3, #0
 800679a:	4604      	mov	r4, r0
 800679c:	4608      	mov	r0, r1
 800679e:	4611      	mov	r1, r2
 80067a0:	602b      	str	r3, [r5, #0]
 80067a2:	f7fb f8ce 	bl	8001942 <_fstat>
 80067a6:	1c43      	adds	r3, r0, #1
 80067a8:	d102      	bne.n	80067b0 <_fstat_r+0x1c>
 80067aa:	682b      	ldr	r3, [r5, #0]
 80067ac:	b103      	cbz	r3, 80067b0 <_fstat_r+0x1c>
 80067ae:	6023      	str	r3, [r4, #0]
 80067b0:	bd38      	pop	{r3, r4, r5, pc}
 80067b2:	bf00      	nop
 80067b4:	20000330 	.word	0x20000330

080067b8 <_isatty_r>:
 80067b8:	b538      	push	{r3, r4, r5, lr}
 80067ba:	4d06      	ldr	r5, [pc, #24]	; (80067d4 <_isatty_r+0x1c>)
 80067bc:	2300      	movs	r3, #0
 80067be:	4604      	mov	r4, r0
 80067c0:	4608      	mov	r0, r1
 80067c2:	602b      	str	r3, [r5, #0]
 80067c4:	f7fb f8cd 	bl	8001962 <_isatty>
 80067c8:	1c43      	adds	r3, r0, #1
 80067ca:	d102      	bne.n	80067d2 <_isatty_r+0x1a>
 80067cc:	682b      	ldr	r3, [r5, #0]
 80067ce:	b103      	cbz	r3, 80067d2 <_isatty_r+0x1a>
 80067d0:	6023      	str	r3, [r4, #0]
 80067d2:	bd38      	pop	{r3, r4, r5, pc}
 80067d4:	20000330 	.word	0x20000330

080067d8 <_lseek_r>:
 80067d8:	b538      	push	{r3, r4, r5, lr}
 80067da:	4d07      	ldr	r5, [pc, #28]	; (80067f8 <_lseek_r+0x20>)
 80067dc:	4604      	mov	r4, r0
 80067de:	4608      	mov	r0, r1
 80067e0:	4611      	mov	r1, r2
 80067e2:	2200      	movs	r2, #0
 80067e4:	602a      	str	r2, [r5, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	f7fb f8c6 	bl	8001978 <_lseek>
 80067ec:	1c43      	adds	r3, r0, #1
 80067ee:	d102      	bne.n	80067f6 <_lseek_r+0x1e>
 80067f0:	682b      	ldr	r3, [r5, #0]
 80067f2:	b103      	cbz	r3, 80067f6 <_lseek_r+0x1e>
 80067f4:	6023      	str	r3, [r4, #0]
 80067f6:	bd38      	pop	{r3, r4, r5, pc}
 80067f8:	20000330 	.word	0x20000330

080067fc <memcpy>:
 80067fc:	440a      	add	r2, r1
 80067fe:	4291      	cmp	r1, r2
 8006800:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006804:	d100      	bne.n	8006808 <memcpy+0xc>
 8006806:	4770      	bx	lr
 8006808:	b510      	push	{r4, lr}
 800680a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800680e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006812:	4291      	cmp	r1, r2
 8006814:	d1f9      	bne.n	800680a <memcpy+0xe>
 8006816:	bd10      	pop	{r4, pc}

08006818 <memmove>:
 8006818:	4288      	cmp	r0, r1
 800681a:	b510      	push	{r4, lr}
 800681c:	eb01 0402 	add.w	r4, r1, r2
 8006820:	d902      	bls.n	8006828 <memmove+0x10>
 8006822:	4284      	cmp	r4, r0
 8006824:	4623      	mov	r3, r4
 8006826:	d807      	bhi.n	8006838 <memmove+0x20>
 8006828:	1e43      	subs	r3, r0, #1
 800682a:	42a1      	cmp	r1, r4
 800682c:	d008      	beq.n	8006840 <memmove+0x28>
 800682e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006832:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006836:	e7f8      	b.n	800682a <memmove+0x12>
 8006838:	4402      	add	r2, r0
 800683a:	4601      	mov	r1, r0
 800683c:	428a      	cmp	r2, r1
 800683e:	d100      	bne.n	8006842 <memmove+0x2a>
 8006840:	bd10      	pop	{r4, pc}
 8006842:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006846:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800684a:	e7f7      	b.n	800683c <memmove+0x24>

0800684c <__malloc_lock>:
 800684c:	4801      	ldr	r0, [pc, #4]	; (8006854 <__malloc_lock+0x8>)
 800684e:	f7ff b999 	b.w	8005b84 <__retarget_lock_acquire_recursive>
 8006852:	bf00      	nop
 8006854:	20000324 	.word	0x20000324

08006858 <__malloc_unlock>:
 8006858:	4801      	ldr	r0, [pc, #4]	; (8006860 <__malloc_unlock+0x8>)
 800685a:	f7ff b994 	b.w	8005b86 <__retarget_lock_release_recursive>
 800685e:	bf00      	nop
 8006860:	20000324 	.word	0x20000324

08006864 <_realloc_r>:
 8006864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006868:	4680      	mov	r8, r0
 800686a:	4614      	mov	r4, r2
 800686c:	460e      	mov	r6, r1
 800686e:	b921      	cbnz	r1, 800687a <_realloc_r+0x16>
 8006870:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006874:	4611      	mov	r1, r2
 8006876:	f7ff ba59 	b.w	8005d2c <_malloc_r>
 800687a:	b92a      	cbnz	r2, 8006888 <_realloc_r+0x24>
 800687c:	f7ff f9ea 	bl	8005c54 <_free_r>
 8006880:	4625      	mov	r5, r4
 8006882:	4628      	mov	r0, r5
 8006884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006888:	f000 f82e 	bl	80068e8 <_malloc_usable_size_r>
 800688c:	4284      	cmp	r4, r0
 800688e:	4607      	mov	r7, r0
 8006890:	d802      	bhi.n	8006898 <_realloc_r+0x34>
 8006892:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006896:	d812      	bhi.n	80068be <_realloc_r+0x5a>
 8006898:	4621      	mov	r1, r4
 800689a:	4640      	mov	r0, r8
 800689c:	f7ff fa46 	bl	8005d2c <_malloc_r>
 80068a0:	4605      	mov	r5, r0
 80068a2:	2800      	cmp	r0, #0
 80068a4:	d0ed      	beq.n	8006882 <_realloc_r+0x1e>
 80068a6:	42bc      	cmp	r4, r7
 80068a8:	4622      	mov	r2, r4
 80068aa:	4631      	mov	r1, r6
 80068ac:	bf28      	it	cs
 80068ae:	463a      	movcs	r2, r7
 80068b0:	f7ff ffa4 	bl	80067fc <memcpy>
 80068b4:	4631      	mov	r1, r6
 80068b6:	4640      	mov	r0, r8
 80068b8:	f7ff f9cc 	bl	8005c54 <_free_r>
 80068bc:	e7e1      	b.n	8006882 <_realloc_r+0x1e>
 80068be:	4635      	mov	r5, r6
 80068c0:	e7df      	b.n	8006882 <_realloc_r+0x1e>
	...

080068c4 <_read_r>:
 80068c4:	b538      	push	{r3, r4, r5, lr}
 80068c6:	4d07      	ldr	r5, [pc, #28]	; (80068e4 <_read_r+0x20>)
 80068c8:	4604      	mov	r4, r0
 80068ca:	4608      	mov	r0, r1
 80068cc:	4611      	mov	r1, r2
 80068ce:	2200      	movs	r2, #0
 80068d0:	602a      	str	r2, [r5, #0]
 80068d2:	461a      	mov	r2, r3
 80068d4:	f7fa fff0 	bl	80018b8 <_read>
 80068d8:	1c43      	adds	r3, r0, #1
 80068da:	d102      	bne.n	80068e2 <_read_r+0x1e>
 80068dc:	682b      	ldr	r3, [r5, #0]
 80068de:	b103      	cbz	r3, 80068e2 <_read_r+0x1e>
 80068e0:	6023      	str	r3, [r4, #0]
 80068e2:	bd38      	pop	{r3, r4, r5, pc}
 80068e4:	20000330 	.word	0x20000330

080068e8 <_malloc_usable_size_r>:
 80068e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068ec:	1f18      	subs	r0, r3, #4
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	bfbc      	itt	lt
 80068f2:	580b      	ldrlt	r3, [r1, r0]
 80068f4:	18c0      	addlt	r0, r0, r3
 80068f6:	4770      	bx	lr

080068f8 <_init>:
 80068f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068fa:	bf00      	nop
 80068fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068fe:	bc08      	pop	{r3}
 8006900:	469e      	mov	lr, r3
 8006902:	4770      	bx	lr

08006904 <_fini>:
 8006904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006906:	bf00      	nop
 8006908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800690a:	bc08      	pop	{r3}
 800690c:	469e      	mov	lr, r3
 800690e:	4770      	bx	lr
