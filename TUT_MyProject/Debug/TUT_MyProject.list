
TUT_MyProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002240  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  0800234c  0800234c  0001234c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002510  08002510  000200b8  2**0
                  CONTENTS
  4 .ARM          00000000  08002510  08002510  000200b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002510  08002510  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002510  08002510  00012510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002514  08002514  00012514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08002518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  200000b8  080025d0  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  080025d0  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002e19  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ed5  00000000  00000000  00022efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000468  00000000  00000000  00023dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003d0  00000000  00000000  00024238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d0a  00000000  00000000  00024608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004a8f  00000000  00000000  0003b312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e821  00000000  00000000  0003fda1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000be5c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a6c  00000000  00000000  000be614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b8 	.word	0x200000b8
 8000128:	00000000 	.word	0x00000000
 800012c:	08002334 	.word	0x08002334

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000bc 	.word	0x200000bc
 8000148:	08002334 	.word	0x08002334

0800014c <array_fill_numbers>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void array_fill_numbers(int pNumbers[], unsigned int len)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
    for ( unsigned int i = 0 ; i < len ; i++)
 8000156:	2300      	movs	r3, #0
 8000158:	60fb      	str	r3, [r7, #12]
 800015a:	e015      	b.n	8000188 <array_fill_numbers+0x3c>
    {
        pNumbers[i] = rand() % 1000;
 800015c:	f001 f864 	bl	8001228 <rand>
 8000160:	4602      	mov	r2, r0
 8000162:	68fb      	ldr	r3, [r7, #12]
 8000164:	009b      	lsls	r3, r3, #2
 8000166:	6879      	ldr	r1, [r7, #4]
 8000168:	4419      	add	r1, r3
 800016a:	4b0c      	ldr	r3, [pc, #48]	; (800019c <array_fill_numbers+0x50>)
 800016c:	fb83 0302 	smull	r0, r3, r3, r2
 8000170:	1198      	asrs	r0, r3, #6
 8000172:	17d3      	asrs	r3, r2, #31
 8000174:	1ac3      	subs	r3, r0, r3
 8000176:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800017a:	fb00 f303 	mul.w	r3, r0, r3
 800017e:	1ad3      	subs	r3, r2, r3
 8000180:	600b      	str	r3, [r1, #0]
    for ( unsigned int i = 0 ; i < len ; i++)
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	3301      	adds	r3, #1
 8000186:	60fb      	str	r3, [r7, #12]
 8000188:	68fa      	ldr	r2, [r7, #12]
 800018a:	683b      	ldr	r3, [r7, #0]
 800018c:	429a      	cmp	r2, r3
 800018e:	d3e5      	bcc.n	800015c <array_fill_numbers+0x10>
    }
}
 8000190:	bf00      	nop
 8000192:	bf00      	nop
 8000194:	3710      	adds	r7, #16
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	10624dd3 	.word	0x10624dd3

080001a0 <display_numbers>:

void display_numbers(int *pNumbers, unsigned int len, char *pMessage)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b086      	sub	sp, #24
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	60f8      	str	r0, [r7, #12]
 80001a8:	60b9      	str	r1, [r7, #8]
 80001aa:	607a      	str	r2, [r7, #4]
    printf("%s",pMessage);
 80001ac:	6879      	ldr	r1, [r7, #4]
 80001ae:	480e      	ldr	r0, [pc, #56]	; (80001e8 <display_numbers+0x48>)
 80001b0:	f001 f80e 	bl	80011d0 <iprintf>
    for (unsigned i = 0 ; i < len ; i++)
 80001b4:	2300      	movs	r3, #0
 80001b6:	617b      	str	r3, [r7, #20]
 80001b8:	e00b      	b.n	80001d2 <display_numbers+0x32>
    {
        printf("%5d  ",pNumbers[i]);
 80001ba:	697b      	ldr	r3, [r7, #20]
 80001bc:	009b      	lsls	r3, r3, #2
 80001be:	68fa      	ldr	r2, [r7, #12]
 80001c0:	4413      	add	r3, r2
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	4619      	mov	r1, r3
 80001c6:	4809      	ldr	r0, [pc, #36]	; (80001ec <display_numbers+0x4c>)
 80001c8:	f001 f802 	bl	80011d0 <iprintf>
    for (unsigned i = 0 ; i < len ; i++)
 80001cc:	697b      	ldr	r3, [r7, #20]
 80001ce:	3301      	adds	r3, #1
 80001d0:	617b      	str	r3, [r7, #20]
 80001d2:	697a      	ldr	r2, [r7, #20]
 80001d4:	68bb      	ldr	r3, [r7, #8]
 80001d6:	429a      	cmp	r2, r3
 80001d8:	d3ef      	bcc.n	80001ba <display_numbers+0x1a>
    }
    printf("\n");
 80001da:	200a      	movs	r0, #10
 80001dc:	f001 f810 	bl	8001200 <putchar>
}
 80001e0:	bf00      	nop
 80001e2:	3718      	adds	r7, #24
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	0800234c 	.word	0x0800234c
 80001ec:	08002350 	.word	0x08002350

080001f0 <swap_numbers>:


void swap_numbers(int *x,int *y)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b085      	sub	sp, #20
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
 80001f8:	6039      	str	r1, [r7, #0]
     int temp=*x;
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	60fb      	str	r3, [r7, #12]
     *x=*y;
 8000200:	683b      	ldr	r3, [r7, #0]
 8000202:	681a      	ldr	r2, [r3, #0]
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	601a      	str	r2, [r3, #0]
     *y=temp;
 8000208:	683b      	ldr	r3, [r7, #0]
 800020a:	68fa      	ldr	r2, [r7, #12]
 800020c:	601a      	str	r2, [r3, #0]
#if 0
     void (*jump_addr) (void);
     jump_addr = (void*)0x20000009;
     jump_addr();
#endif
     someData = 10;
 800020e:	4b04      	ldr	r3, [pc, #16]	; (8000220 <swap_numbers+0x30>)
 8000210:	220a      	movs	r2, #10
 8000212:	601a      	str	r2, [r3, #0]
}
 8000214:	bf00      	nop
 8000216:	3714      	adds	r7, #20
 8000218:	46bd      	mov	sp, r7
 800021a:	bc80      	pop	{r7}
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	20000044 	.word	0x20000044

08000224 <bubble_sort>:


void bubble_sort(int *pNumbers , unsigned int len)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b086      	sub	sp, #24
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	6039      	str	r1, [r7, #0]
    int i,j,flag=0;
 800022e:	2300      	movs	r3, #0
 8000230:	60fb      	str	r3, [r7, #12]
    for(i=0;i<len-1;i++)
 8000232:	2300      	movs	r3, #0
 8000234:	617b      	str	r3, [r7, #20]
 8000236:	e02f      	b.n	8000298 <bubble_sort+0x74>
    {
        flag=0;
 8000238:	2300      	movs	r3, #0
 800023a:	60fb      	str	r3, [r7, #12]
        for(j=0;j<len-1-i;j++)
 800023c:	2300      	movs	r3, #0
 800023e:	613b      	str	r3, [r7, #16]
 8000240:	e01d      	b.n	800027e <bubble_sort+0x5a>
        {
            if(pNumbers[j] > pNumbers[j+1])
 8000242:	693b      	ldr	r3, [r7, #16]
 8000244:	009b      	lsls	r3, r3, #2
 8000246:	687a      	ldr	r2, [r7, #4]
 8000248:	4413      	add	r3, r2
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	693b      	ldr	r3, [r7, #16]
 800024e:	3301      	adds	r3, #1
 8000250:	009b      	lsls	r3, r3, #2
 8000252:	6879      	ldr	r1, [r7, #4]
 8000254:	440b      	add	r3, r1
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	429a      	cmp	r2, r3
 800025a:	dd0d      	ble.n	8000278 <bubble_sort+0x54>
            {
                swap_numbers(&pNumbers[j],&pNumbers[j+1]);
 800025c:	693b      	ldr	r3, [r7, #16]
 800025e:	009b      	lsls	r3, r3, #2
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	18d0      	adds	r0, r2, r3
 8000264:	693b      	ldr	r3, [r7, #16]
 8000266:	3301      	adds	r3, #1
 8000268:	009b      	lsls	r3, r3, #2
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	4413      	add	r3, r2
 800026e:	4619      	mov	r1, r3
 8000270:	f7ff ffbe 	bl	80001f0 <swap_numbers>
                flag=1;
 8000274:	2301      	movs	r3, #1
 8000276:	60fb      	str	r3, [r7, #12]
        for(j=0;j<len-1-i;j++)
 8000278:	693b      	ldr	r3, [r7, #16]
 800027a:	3301      	adds	r3, #1
 800027c:	613b      	str	r3, [r7, #16]
 800027e:	697b      	ldr	r3, [r7, #20]
 8000280:	683a      	ldr	r2, [r7, #0]
 8000282:	1ad3      	subs	r3, r2, r3
 8000284:	1e5a      	subs	r2, r3, #1
 8000286:	693b      	ldr	r3, [r7, #16]
 8000288:	429a      	cmp	r2, r3
 800028a:	d8da      	bhi.n	8000242 <bubble_sort+0x1e>
            }
        }
        if(flag==0)
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d008      	beq.n	80002a4 <bubble_sort+0x80>
    for(i=0;i<len-1;i++)
 8000292:	697b      	ldr	r3, [r7, #20]
 8000294:	3301      	adds	r3, #1
 8000296:	617b      	str	r3, [r7, #20]
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	1e5a      	subs	r2, r3, #1
 800029c:	697b      	ldr	r3, [r7, #20]
 800029e:	429a      	cmp	r2, r3
 80002a0:	d8ca      	bhi.n	8000238 <bubble_sort+0x14>
            break;
    }
}
 80002a2:	e000      	b.n	80002a6 <bubble_sort+0x82>
            break;
 80002a4:	bf00      	nop
}
 80002a6:	bf00      	nop
 80002a8:	3718      	adds	r7, #24
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}

080002ae <insertion_sort>:

void insertion_sort(int *pNumbers , unsigned int len)
{
 80002ae:	b480      	push	{r7}
 80002b0:	b087      	sub	sp, #28
 80002b2:	af00      	add	r7, sp, #0
 80002b4:	6078      	str	r0, [r7, #4]
 80002b6:	6039      	str	r1, [r7, #0]
     int i,j,num;
     for(i=1 ; i<len ; i++)
 80002b8:	2301      	movs	r3, #1
 80002ba:	617b      	str	r3, [r7, #20]
 80002bc:	e02c      	b.n	8000318 <insertion_sort+0x6a>
     {
         j=i-1;
 80002be:	697b      	ldr	r3, [r7, #20]
 80002c0:	3b01      	subs	r3, #1
 80002c2:	613b      	str	r3, [r7, #16]
         num = pNumbers[i];
 80002c4:	697b      	ldr	r3, [r7, #20]
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	4413      	add	r3, r2
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	60fb      	str	r3, [r7, #12]
         while( (j>-1) && (pNumbers[j] > num) )
 80002d0:	e00d      	b.n	80002ee <insertion_sort+0x40>
         {
             pNumbers[j+1] = pNumbers[j];
 80002d2:	693b      	ldr	r3, [r7, #16]
 80002d4:	009b      	lsls	r3, r3, #2
 80002d6:	687a      	ldr	r2, [r7, #4]
 80002d8:	441a      	add	r2, r3
 80002da:	693b      	ldr	r3, [r7, #16]
 80002dc:	3301      	adds	r3, #1
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	6879      	ldr	r1, [r7, #4]
 80002e2:	440b      	add	r3, r1
 80002e4:	6812      	ldr	r2, [r2, #0]
 80002e6:	601a      	str	r2, [r3, #0]
             j--;
 80002e8:	693b      	ldr	r3, [r7, #16]
 80002ea:	3b01      	subs	r3, #1
 80002ec:	613b      	str	r3, [r7, #16]
         while( (j>-1) && (pNumbers[j] > num) )
 80002ee:	693b      	ldr	r3, [r7, #16]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	db07      	blt.n	8000304 <insertion_sort+0x56>
 80002f4:	693b      	ldr	r3, [r7, #16]
 80002f6:	009b      	lsls	r3, r3, #2
 80002f8:	687a      	ldr	r2, [r7, #4]
 80002fa:	4413      	add	r3, r2
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	68fa      	ldr	r2, [r7, #12]
 8000300:	429a      	cmp	r2, r3
 8000302:	dbe6      	blt.n	80002d2 <insertion_sort+0x24>
         }
         pNumbers[j+1]=num;
 8000304:	693b      	ldr	r3, [r7, #16]
 8000306:	3301      	adds	r3, #1
 8000308:	009b      	lsls	r3, r3, #2
 800030a:	687a      	ldr	r2, [r7, #4]
 800030c:	4413      	add	r3, r2
 800030e:	68fa      	ldr	r2, [r7, #12]
 8000310:	601a      	str	r2, [r3, #0]
     for(i=1 ; i<len ; i++)
 8000312:	697b      	ldr	r3, [r7, #20]
 8000314:	3301      	adds	r3, #1
 8000316:	617b      	str	r3, [r7, #20]
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	683a      	ldr	r2, [r7, #0]
 800031c:	429a      	cmp	r2, r3
 800031e:	d8ce      	bhi.n	80002be <insertion_sort+0x10>
     }
}
 8000320:	bf00      	nop
 8000322:	bf00      	nop
 8000324:	371c      	adds	r7, #28
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr

0800032c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000332:	f000 f9ed 	bl	8000710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000336:	f000 f837 	bl	80003a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800033a:	f000 f87b 	bl	8000434 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  unsigned int len = sizeof(numbers)/sizeof(int);
 800033e:	2311      	movs	r3, #17
 8000340:	607b      	str	r3, [r7, #4]

  array_fill_numbers(numbers,len);
 8000342:	6879      	ldr	r1, [r7, #4]
 8000344:	4813      	ldr	r0, [pc, #76]	; (8000394 <main+0x68>)
 8000346:	f7ff ff01 	bl	800014c <array_fill_numbers>
  display_numbers(numbers,len,"B-unsorted array :");
 800034a:	4a13      	ldr	r2, [pc, #76]	; (8000398 <main+0x6c>)
 800034c:	6879      	ldr	r1, [r7, #4]
 800034e:	4811      	ldr	r0, [pc, #68]	; (8000394 <main+0x68>)
 8000350:	f7ff ff26 	bl	80001a0 <display_numbers>
  bubble_sort(numbers,len);
 8000354:	6879      	ldr	r1, [r7, #4]
 8000356:	480f      	ldr	r0, [pc, #60]	; (8000394 <main+0x68>)
 8000358:	f7ff ff64 	bl	8000224 <bubble_sort>
  display_numbers(numbers,len,"B-sorted array   :");
 800035c:	4a0f      	ldr	r2, [pc, #60]	; (800039c <main+0x70>)
 800035e:	6879      	ldr	r1, [r7, #4]
 8000360:	480c      	ldr	r0, [pc, #48]	; (8000394 <main+0x68>)
 8000362:	f7ff ff1d 	bl	80001a0 <display_numbers>
  array_fill_numbers(numbers,len);
 8000366:	6879      	ldr	r1, [r7, #4]
 8000368:	480a      	ldr	r0, [pc, #40]	; (8000394 <main+0x68>)
 800036a:	f7ff feef 	bl	800014c <array_fill_numbers>
  display_numbers(numbers,len,"I-unsorted array :");
 800036e:	4a0c      	ldr	r2, [pc, #48]	; (80003a0 <main+0x74>)
 8000370:	6879      	ldr	r1, [r7, #4]
 8000372:	4808      	ldr	r0, [pc, #32]	; (8000394 <main+0x68>)
 8000374:	f7ff ff14 	bl	80001a0 <display_numbers>
  insertion_sort(numbers,len);
 8000378:	6879      	ldr	r1, [r7, #4]
 800037a:	4806      	ldr	r0, [pc, #24]	; (8000394 <main+0x68>)
 800037c:	f7ff ff97 	bl	80002ae <insertion_sort>
  display_numbers(numbers,len,"I-sorted array   :");
 8000380:	4a08      	ldr	r2, [pc, #32]	; (80003a4 <main+0x78>)
 8000382:	6879      	ldr	r1, [r7, #4]
 8000384:	4803      	ldr	r0, [pc, #12]	; (8000394 <main+0x68>)
 8000386:	f7ff ff0b 	bl	80001a0 <display_numbers>

  return 0;
 800038a:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800038c:	4618      	mov	r0, r3
 800038e:	3708      	adds	r7, #8
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000000 	.word	0x20000000
 8000398:	08002358 	.word	0x08002358
 800039c:	0800236c 	.word	0x0800236c
 80003a0:	08002380 	.word	0x08002380
 80003a4:	08002394 	.word	0x08002394

080003a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b090      	sub	sp, #64	; 0x40
 80003ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ae:	f107 0318 	add.w	r3, r7, #24
 80003b2:	2228      	movs	r2, #40	; 0x28
 80003b4:	2100      	movs	r1, #0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f000 ff02 	bl	80011c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]
 80003c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003ca:	2301      	movs	r3, #1
 80003cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d8:	2301      	movs	r3, #1
 80003da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003dc:	2302      	movs	r3, #2
 80003de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ec:	f107 0318 	add.w	r3, r7, #24
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 fad3 	bl	800099c <HAL_RCC_OscConfig>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003fc:	f000 f83c 	bl	8000478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000400:	230f      	movs	r3, #15
 8000402:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000404:	2302      	movs	r3, #2
 8000406:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000408:	2300      	movs	r3, #0
 800040a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800040c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000410:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000412:	2300      	movs	r3, #0
 8000414:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2102      	movs	r1, #2
 800041a:	4618      	mov	r0, r3
 800041c:	f000 fd40 	bl	8000ea0 <HAL_RCC_ClockConfig>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000426:	f000 f827 	bl	8000478 <Error_Handler>
  }
}
 800042a:	bf00      	nop
 800042c:	3740      	adds	r7, #64	; 0x40
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
	...

08000434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <MX_GPIO_Init+0x40>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	4a0d      	ldr	r2, [pc, #52]	; (8000474 <MX_GPIO_Init+0x40>)
 8000440:	f043 0320 	orr.w	r3, r3, #32
 8000444:	6193      	str	r3, [r2, #24]
 8000446:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <MX_GPIO_Init+0x40>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	f003 0320 	and.w	r3, r3, #32
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <MX_GPIO_Init+0x40>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	4a07      	ldr	r2, [pc, #28]	; (8000474 <MX_GPIO_Init+0x40>)
 8000458:	f043 0304 	orr.w	r3, r3, #4
 800045c:	6193      	str	r3, [r2, #24]
 800045e:	4b05      	ldr	r3, [pc, #20]	; (8000474 <MX_GPIO_Init+0x40>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	f003 0304 	and.w	r3, r3, #4
 8000466:	603b      	str	r3, [r7, #0]
 8000468:	683b      	ldr	r3, [r7, #0]

}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr
 8000474:	40021000 	.word	0x40021000

08000478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800047c:	b672      	cpsid	i
}
 800047e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000480:	e7fe      	b.n	8000480 <Error_Handler+0x8>
	...

08000484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800048a:	4b15      	ldr	r3, [pc, #84]	; (80004e0 <HAL_MspInit+0x5c>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	4a14      	ldr	r2, [pc, #80]	; (80004e0 <HAL_MspInit+0x5c>)
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	6193      	str	r3, [r2, #24]
 8000496:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <HAL_MspInit+0x5c>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	60bb      	str	r3, [r7, #8]
 80004a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a2:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <HAL_MspInit+0x5c>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	4a0e      	ldr	r2, [pc, #56]	; (80004e0 <HAL_MspInit+0x5c>)
 80004a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004ac:	61d3      	str	r3, [r2, #28]
 80004ae:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <HAL_MspInit+0x5c>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ba:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <HAL_MspInit+0x60>)
 80004bc:	685b      	ldr	r3, [r3, #4]
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	4a04      	ldr	r2, [pc, #16]	; (80004e4 <HAL_MspInit+0x60>)
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d6:	bf00      	nop
 80004d8:	3714      	adds	r7, #20
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr
 80004e0:	40021000 	.word	0x40021000
 80004e4:	40010000 	.word	0x40010000

080004e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <NMI_Handler+0x4>

080004ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004f2:	e7fe      	b.n	80004f2 <HardFault_Handler+0x4>

080004f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <MemManage_Handler+0x4>

080004fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004fe:	e7fe      	b.n	80004fe <BusFault_Handler+0x4>

08000500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000504:	e7fe      	b.n	8000504 <UsageFault_Handler+0x4>

08000506 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	46bd      	mov	sp, r7
 800050e:	bc80      	pop	{r7}
 8000510:	4770      	bx	lr

08000512 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000516:	bf00      	nop
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr

0800051e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000522:	bf00      	nop
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr

0800052a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800052e:	f000 f935 	bl	800079c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}

08000536 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0
	return 1;
 800053a:	2301      	movs	r3, #1
}
 800053c:	4618      	mov	r0, r3
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr

08000544 <_kill>:

int _kill(int pid, int sig)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800054e:	f000 fe0d 	bl	800116c <__errno>
 8000552:	4603      	mov	r3, r0
 8000554:	2216      	movs	r2, #22
 8000556:	601a      	str	r2, [r3, #0]
	return -1;
 8000558:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800055c:	4618      	mov	r0, r3
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <_exit>:

void _exit (int status)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800056c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f7ff ffe7 	bl	8000544 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000576:	e7fe      	b.n	8000576 <_exit+0x12>

08000578 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]
 8000588:	e00a      	b.n	80005a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800058a:	f3af 8000 	nop.w
 800058e:	4601      	mov	r1, r0
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	1c5a      	adds	r2, r3, #1
 8000594:	60ba      	str	r2, [r7, #8]
 8000596:	b2ca      	uxtb	r2, r1
 8000598:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	3301      	adds	r3, #1
 800059e:	617b      	str	r3, [r7, #20]
 80005a0:	697a      	ldr	r2, [r7, #20]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	dbf0      	blt.n	800058a <_read+0x12>
	}

return len;
 80005a8:	687b      	ldr	r3, [r7, #4]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3718      	adds	r7, #24
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b086      	sub	sp, #24
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	60f8      	str	r0, [r7, #12]
 80005ba:	60b9      	str	r1, [r7, #8]
 80005bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
 80005c2:	e009      	b.n	80005d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	1c5a      	adds	r2, r3, #1
 80005c8:	60ba      	str	r2, [r7, #8]
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	3301      	adds	r3, #1
 80005d6:	617b      	str	r3, [r7, #20]
 80005d8:	697a      	ldr	r2, [r7, #20]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	429a      	cmp	r2, r3
 80005de:	dbf1      	blt.n	80005c4 <_write+0x12>
	}
	return len;
 80005e0:	687b      	ldr	r3, [r7, #4]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3718      	adds	r7, #24
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <_close>:

int _close(int file)
{
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
	return -1;
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000610:	605a      	str	r2, [r3, #4]
	return 0;
 8000612:	2300      	movs	r3, #0
}
 8000614:	4618      	mov	r0, r3
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr

0800061e <_isatty>:

int _isatty(int file)
{
 800061e:	b480      	push	{r7}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
	return 1;
 8000626:	2301      	movs	r3, #1
}
 8000628:	4618      	mov	r0, r3
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr

08000632 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000632:	b480      	push	{r7}
 8000634:	b085      	sub	sp, #20
 8000636:	af00      	add	r7, sp, #0
 8000638:	60f8      	str	r0, [r7, #12]
 800063a:	60b9      	str	r1, [r7, #8]
 800063c:	607a      	str	r2, [r7, #4]
	return 0;
 800063e:	2300      	movs	r3, #0
}
 8000640:	4618      	mov	r0, r3
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr
	...

0800064c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000654:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <_sbrk+0x5c>)
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <_sbrk+0x60>)
 8000658:	1ad3      	subs	r3, r2, r3
 800065a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <_sbrk+0x64>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d102      	bne.n	800066e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <_sbrk+0x64>)
 800066a:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <_sbrk+0x68>)
 800066c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <_sbrk+0x64>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	693a      	ldr	r2, [r7, #16]
 8000678:	429a      	cmp	r2, r3
 800067a:	d207      	bcs.n	800068c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800067c:	f000 fd76 	bl	800116c <__errno>
 8000680:	4603      	mov	r3, r0
 8000682:	220c      	movs	r2, #12
 8000684:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800068a:	e009      	b.n	80006a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <_sbrk+0x64>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000692:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <_sbrk+0x64>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4413      	add	r3, r2
 800069a:	4a05      	ldr	r2, [pc, #20]	; (80006b0 <_sbrk+0x64>)
 800069c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800069e:	68fb      	ldr	r3, [r7, #12]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3718      	adds	r7, #24
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20002800 	.word	0x20002800
 80006ac:	00000400 	.word	0x00000400
 80006b0:	200000d4 	.word	0x200000d4
 80006b4:	200000f0 	.word	0x200000f0

080006b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr

080006c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c4:	480c      	ldr	r0, [pc, #48]	; (80006f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006c6:	490d      	ldr	r1, [pc, #52]	; (80006fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006c8:	4a0d      	ldr	r2, [pc, #52]	; (8000700 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006cc:	e002      	b.n	80006d4 <LoopCopyDataInit>

080006ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006d2:	3304      	adds	r3, #4

080006d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d8:	d3f9      	bcc.n	80006ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006da:	4a0a      	ldr	r2, [pc, #40]	; (8000704 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006dc:	4c0a      	ldr	r4, [pc, #40]	; (8000708 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e0:	e001      	b.n	80006e6 <LoopFillZerobss>

080006e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e4:	3204      	adds	r2, #4

080006e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e8:	d3fb      	bcc.n	80006e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ea:	f7ff ffe5 	bl	80006b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ee:	f000 fd43 	bl	8001178 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006f2:	f7ff fe1b 	bl	800032c <main>
  bx lr
 80006f6:	4770      	bx	lr
  ldr r0, =_sdata
 80006f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006fc:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8000700:	08002518 	.word	0x08002518
  ldr r2, =_sbss
 8000704:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8000708:	200000ec 	.word	0x200000ec

0800070c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800070c:	e7fe      	b.n	800070c <ADC1_2_IRQHandler>
	...

08000710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <HAL_Init+0x28>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a07      	ldr	r2, [pc, #28]	; (8000738 <HAL_Init+0x28>)
 800071a:	f043 0310 	orr.w	r3, r3, #16
 800071e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000720:	2003      	movs	r0, #3
 8000722:	f000 f907 	bl	8000934 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000726:	200f      	movs	r0, #15
 8000728:	f000 f808 	bl	800073c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800072c:	f7ff feaa 	bl	8000484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000730:	2300      	movs	r3, #0
}
 8000732:	4618      	mov	r0, r3
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40022000 	.word	0x40022000

0800073c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <HAL_InitTick+0x54>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <HAL_InitTick+0x58>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	4619      	mov	r1, r3
 800074e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000752:	fbb3 f3f1 	udiv	r3, r3, r1
 8000756:	fbb2 f3f3 	udiv	r3, r2, r3
 800075a:	4618      	mov	r0, r3
 800075c:	f000 f911 	bl	8000982 <HAL_SYSTICK_Config>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
 8000768:	e00e      	b.n	8000788 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b0f      	cmp	r3, #15
 800076e:	d80a      	bhi.n	8000786 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000770:	2200      	movs	r2, #0
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000778:	f000 f8e7 	bl	800094a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800077c:	4a06      	ldr	r2, [pc, #24]	; (8000798 <HAL_InitTick+0x5c>)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000782:	2300      	movs	r3, #0
 8000784:	e000      	b.n	8000788 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000786:	2301      	movs	r3, #1
}
 8000788:	4618      	mov	r0, r3
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000048 	.word	0x20000048
 8000794:	20000050 	.word	0x20000050
 8000798:	2000004c 	.word	0x2000004c

0800079c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <HAL_IncTick+0x1c>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b05      	ldr	r3, [pc, #20]	; (80007bc <HAL_IncTick+0x20>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4413      	add	r3, r2
 80007ac:	4a03      	ldr	r2, [pc, #12]	; (80007bc <HAL_IncTick+0x20>)
 80007ae:	6013      	str	r3, [r2, #0]
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr
 80007b8:	20000050 	.word	0x20000050
 80007bc:	200000d8 	.word	0x200000d8

080007c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  return uwTick;
 80007c4:	4b02      	ldr	r3, [pc, #8]	; (80007d0 <HAL_GetTick+0x10>)
 80007c6:	681b      	ldr	r3, [r3, #0]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr
 80007d0:	200000d8 	.word	0x200000d8

080007d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f003 0307 	and.w	r3, r3, #7
 80007e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <__NVIC_SetPriorityGrouping+0x44>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ea:	68ba      	ldr	r2, [r7, #8]
 80007ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007f0:	4013      	ands	r3, r2
 80007f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000806:	4a04      	ldr	r2, [pc, #16]	; (8000818 <__NVIC_SetPriorityGrouping+0x44>)
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	60d3      	str	r3, [r2, #12]
}
 800080c:	bf00      	nop
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000820:	4b04      	ldr	r3, [pc, #16]	; (8000834 <__NVIC_GetPriorityGrouping+0x18>)
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	0a1b      	lsrs	r3, r3, #8
 8000826:	f003 0307 	and.w	r3, r3, #7
}
 800082a:	4618      	mov	r0, r3
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	6039      	str	r1, [r7, #0]
 8000842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000848:	2b00      	cmp	r3, #0
 800084a:	db0a      	blt.n	8000862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	b2da      	uxtb	r2, r3
 8000850:	490c      	ldr	r1, [pc, #48]	; (8000884 <__NVIC_SetPriority+0x4c>)
 8000852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000856:	0112      	lsls	r2, r2, #4
 8000858:	b2d2      	uxtb	r2, r2
 800085a:	440b      	add	r3, r1
 800085c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000860:	e00a      	b.n	8000878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	b2da      	uxtb	r2, r3
 8000866:	4908      	ldr	r1, [pc, #32]	; (8000888 <__NVIC_SetPriority+0x50>)
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	f003 030f 	and.w	r3, r3, #15
 800086e:	3b04      	subs	r3, #4
 8000870:	0112      	lsls	r2, r2, #4
 8000872:	b2d2      	uxtb	r2, r2
 8000874:	440b      	add	r3, r1
 8000876:	761a      	strb	r2, [r3, #24]
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	e000e100 	.word	0xe000e100
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800088c:	b480      	push	{r7}
 800088e:	b089      	sub	sp, #36	; 0x24
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f003 0307 	and.w	r3, r3, #7
 800089e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	f1c3 0307 	rsb	r3, r3, #7
 80008a6:	2b04      	cmp	r3, #4
 80008a8:	bf28      	it	cs
 80008aa:	2304      	movcs	r3, #4
 80008ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	3304      	adds	r3, #4
 80008b2:	2b06      	cmp	r3, #6
 80008b4:	d902      	bls.n	80008bc <NVIC_EncodePriority+0x30>
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	3b03      	subs	r3, #3
 80008ba:	e000      	b.n	80008be <NVIC_EncodePriority+0x32>
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	43da      	mvns	r2, r3
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	401a      	ands	r2, r3
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	fa01 f303 	lsl.w	r3, r1, r3
 80008de:	43d9      	mvns	r1, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e4:	4313      	orrs	r3, r2
         );
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3724      	adds	r7, #36	; 0x24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000900:	d301      	bcc.n	8000906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000902:	2301      	movs	r3, #1
 8000904:	e00f      	b.n	8000926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000906:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <SysTick_Config+0x40>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3b01      	subs	r3, #1
 800090c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800090e:	210f      	movs	r1, #15
 8000910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000914:	f7ff ff90 	bl	8000838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <SysTick_Config+0x40>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800091e:	4b04      	ldr	r3, [pc, #16]	; (8000930 <SysTick_Config+0x40>)
 8000920:	2207      	movs	r2, #7
 8000922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	e000e010 	.word	0xe000e010

08000934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f7ff ff49 	bl	80007d4 <__NVIC_SetPriorityGrouping>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800094a:	b580      	push	{r7, lr}
 800094c:	b086      	sub	sp, #24
 800094e:	af00      	add	r7, sp, #0
 8000950:	4603      	mov	r3, r0
 8000952:	60b9      	str	r1, [r7, #8]
 8000954:	607a      	str	r2, [r7, #4]
 8000956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800095c:	f7ff ff5e 	bl	800081c <__NVIC_GetPriorityGrouping>
 8000960:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	68b9      	ldr	r1, [r7, #8]
 8000966:	6978      	ldr	r0, [r7, #20]
 8000968:	f7ff ff90 	bl	800088c <NVIC_EncodePriority>
 800096c:	4602      	mov	r2, r0
 800096e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000972:	4611      	mov	r1, r2
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff5f 	bl	8000838 <__NVIC_SetPriority>
}
 800097a:	bf00      	nop
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff ffb0 	bl	80008f0 <SysTick_Config>
 8000990:	4603      	mov	r3, r0
}
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d101      	bne.n	80009ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
 80009ac:	e272      	b.n	8000e94 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	f000 8087 	beq.w	8000aca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80009bc:	4b92      	ldr	r3, [pc, #584]	; (8000c08 <HAL_RCC_OscConfig+0x26c>)
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	f003 030c 	and.w	r3, r3, #12
 80009c4:	2b04      	cmp	r3, #4
 80009c6:	d00c      	beq.n	80009e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80009c8:	4b8f      	ldr	r3, [pc, #572]	; (8000c08 <HAL_RCC_OscConfig+0x26c>)
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f003 030c 	and.w	r3, r3, #12
 80009d0:	2b08      	cmp	r3, #8
 80009d2:	d112      	bne.n	80009fa <HAL_RCC_OscConfig+0x5e>
 80009d4:	4b8c      	ldr	r3, [pc, #560]	; (8000c08 <HAL_RCC_OscConfig+0x26c>)
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009e0:	d10b      	bne.n	80009fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009e2:	4b89      	ldr	r3, [pc, #548]	; (8000c08 <HAL_RCC_OscConfig+0x26c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d06c      	beq.n	8000ac8 <HAL_RCC_OscConfig+0x12c>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d168      	bne.n	8000ac8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e24c      	b.n	8000e94 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a02:	d106      	bne.n	8000a12 <HAL_RCC_OscConfig+0x76>
 8000a04:	4b80      	ldr	r3, [pc, #512]	; (8000c08 <HAL_RCC_OscConfig+0x26c>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a7f      	ldr	r2, [pc, #508]	; (8000c08 <HAL_RCC_OscConfig+0x26c>)
 8000a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	e02e      	b.n	8000a70 <HAL_RCC_OscConfig+0xd4>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d10c      	bne.n	8000a34 <HAL_RCC_OscConfig+0x98>
 8000a1a:	4b7b      	ldr	r3, [pc, #492]	; (8000c08 <HAL_RCC_OscConfig+0x26c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a7a      	ldr	r2, [pc, #488]	; (8000c08 <HAL_RCC_OscConfig+0x26c>)
 8000a20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a24:	6013      	str	r3, [r2, #0]
 8000a26:	4b78      	ldr	r3, [pc, #480]	; (8000c08 <HAL_RCC_OscConfig+0x26c>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a77      	ldr	r2, [pc, #476]	; (8000c08 <HAL_RCC_OscConfig+0x26c>)
 8000a2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a30:	6013      	str	r3, [r2, #0]
 8000a32:	e01d      	b.n	8000a70 <HAL_RCC_OscConfig+0xd4>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a3c:	d10c      	bne.n	8000a58 <HAL_RCC_OscConfig+0xbc>
 8000a3e:	4b72      	ldr	r3, [pc, #456]	; (8000c08 <HAL_RCC_OscConfig+0x26c>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a71      	ldr	r2, [pc, #452]	; (8000c08 <HAL_RCC_OscConfig+0x26c>)
 8000a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a48:	6013      	str	r3, [r2, #0]
 8000a4a:	4b6f      	ldr	r3, [pc, #444]	; (8000c08 <HAL_RCC_OscConfig+0x26c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a6e      	ldr	r2, [pc, #440]	; (8000c08 <HAL_RCC_OscConfig+0x26c>)
 8000a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a54:	6013      	str	r3, [r2, #0]
 8000a56:	e00b      	b.n	8000a70 <HAL_RCC_OscConfig+0xd4>
 8000a58:	4b6b      	ldr	r3, [pc, #428]	; (8000c08 <HAL_RCC_OscConfig+0x26c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a6a      	ldr	r2, [pc, #424]	; (8000c08 <HAL_RCC_OscConfig+0x26c>)
 8000a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a62:	6013      	str	r3, [r2, #0]
 8000a64:	4b68      	ldr	r3, [pc, #416]	; (8000c08 <HAL_RCC_OscConfig+0x26c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a67      	ldr	r2, [pc, #412]	; (8000c08 <HAL_RCC_OscConfig+0x26c>)
 8000a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d013      	beq.n	8000aa0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a78:	f7ff fea2 	bl	80007c0 <HAL_GetTick>
 8000a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a7e:	e008      	b.n	8000a92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a80:	f7ff fe9e 	bl	80007c0 <HAL_GetTick>
 8000a84:	4602      	mov	r2, r0
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	2b64      	cmp	r3, #100	; 0x64
 8000a8c:	d901      	bls.n	8000a92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	e200      	b.n	8000e94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a92:	4b5d      	ldr	r3, [pc, #372]	; (8000c08 <HAL_RCC_OscConfig+0x26c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0f0      	beq.n	8000a80 <HAL_RCC_OscConfig+0xe4>
 8000a9e:	e014      	b.n	8000aca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000aa0:	f7ff fe8e 	bl	80007c0 <HAL_GetTick>
 8000aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000aa6:	e008      	b.n	8000aba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000aa8:	f7ff fe8a 	bl	80007c0 <HAL_GetTick>
 8000aac:	4602      	mov	r2, r0
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	2b64      	cmp	r3, #100	; 0x64
 8000ab4:	d901      	bls.n	8000aba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	e1ec      	b.n	8000e94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000aba:	4b53      	ldr	r3, [pc, #332]	; (8000c08 <HAL_RCC_OscConfig+0x26c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d1f0      	bne.n	8000aa8 <HAL_RCC_OscConfig+0x10c>
 8000ac6:	e000      	b.n	8000aca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d063      	beq.n	8000b9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ad6:	4b4c      	ldr	r3, [pc, #304]	; (8000c08 <HAL_RCC_OscConfig+0x26c>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f003 030c 	and.w	r3, r3, #12
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d00b      	beq.n	8000afa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ae2:	4b49      	ldr	r3, [pc, #292]	; (8000c08 <HAL_RCC_OscConfig+0x26c>)
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f003 030c 	and.w	r3, r3, #12
 8000aea:	2b08      	cmp	r3, #8
 8000aec:	d11c      	bne.n	8000b28 <HAL_RCC_OscConfig+0x18c>
 8000aee:	4b46      	ldr	r3, [pc, #280]	; (8000c08 <HAL_RCC_OscConfig+0x26c>)
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d116      	bne.n	8000b28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000afa:	4b43      	ldr	r3, [pc, #268]	; (8000c08 <HAL_RCC_OscConfig+0x26c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d005      	beq.n	8000b12 <HAL_RCC_OscConfig+0x176>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	691b      	ldr	r3, [r3, #16]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d001      	beq.n	8000b12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e1c0      	b.n	8000e94 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b12:	4b3d      	ldr	r3, [pc, #244]	; (8000c08 <HAL_RCC_OscConfig+0x26c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	695b      	ldr	r3, [r3, #20]
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	4939      	ldr	r1, [pc, #228]	; (8000c08 <HAL_RCC_OscConfig+0x26c>)
 8000b22:	4313      	orrs	r3, r2
 8000b24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b26:	e03a      	b.n	8000b9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	691b      	ldr	r3, [r3, #16]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d020      	beq.n	8000b72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b30:	4b36      	ldr	r3, [pc, #216]	; (8000c0c <HAL_RCC_OscConfig+0x270>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b36:	f7ff fe43 	bl	80007c0 <HAL_GetTick>
 8000b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b3c:	e008      	b.n	8000b50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b3e:	f7ff fe3f 	bl	80007c0 <HAL_GetTick>
 8000b42:	4602      	mov	r2, r0
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	1ad3      	subs	r3, r2, r3
 8000b48:	2b02      	cmp	r3, #2
 8000b4a:	d901      	bls.n	8000b50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	e1a1      	b.n	8000e94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b50:	4b2d      	ldr	r3, [pc, #180]	; (8000c08 <HAL_RCC_OscConfig+0x26c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f003 0302 	and.w	r3, r3, #2
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d0f0      	beq.n	8000b3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b5c:	4b2a      	ldr	r3, [pc, #168]	; (8000c08 <HAL_RCC_OscConfig+0x26c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	695b      	ldr	r3, [r3, #20]
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	4927      	ldr	r1, [pc, #156]	; (8000c08 <HAL_RCC_OscConfig+0x26c>)
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	600b      	str	r3, [r1, #0]
 8000b70:	e015      	b.n	8000b9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b72:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <HAL_RCC_OscConfig+0x270>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b78:	f7ff fe22 	bl	80007c0 <HAL_GetTick>
 8000b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b7e:	e008      	b.n	8000b92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b80:	f7ff fe1e 	bl	80007c0 <HAL_GetTick>
 8000b84:	4602      	mov	r2, r0
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d901      	bls.n	8000b92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	e180      	b.n	8000e94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b92:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <HAL_RCC_OscConfig+0x26c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d1f0      	bne.n	8000b80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f003 0308 	and.w	r3, r3, #8
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d03a      	beq.n	8000c20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d019      	beq.n	8000be6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <HAL_RCC_OscConfig+0x274>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bb8:	f7ff fe02 	bl	80007c0 <HAL_GetTick>
 8000bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bbe:	e008      	b.n	8000bd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bc0:	f7ff fdfe 	bl	80007c0 <HAL_GetTick>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d901      	bls.n	8000bd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	e160      	b.n	8000e94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <HAL_RCC_OscConfig+0x26c>)
 8000bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d0f0      	beq.n	8000bc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000bde:	2001      	movs	r0, #1
 8000be0:	f000 faa6 	bl	8001130 <RCC_Delay>
 8000be4:	e01c      	b.n	8000c20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_RCC_OscConfig+0x274>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bec:	f7ff fde8 	bl	80007c0 <HAL_GetTick>
 8000bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bf2:	e00f      	b.n	8000c14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bf4:	f7ff fde4 	bl	80007c0 <HAL_GetTick>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	2b02      	cmp	r3, #2
 8000c00:	d908      	bls.n	8000c14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000c02:	2303      	movs	r3, #3
 8000c04:	e146      	b.n	8000e94 <HAL_RCC_OscConfig+0x4f8>
 8000c06:	bf00      	nop
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	42420000 	.word	0x42420000
 8000c10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c14:	4b92      	ldr	r3, [pc, #584]	; (8000e60 <HAL_RCC_OscConfig+0x4c4>)
 8000c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c18:	f003 0302 	and.w	r3, r3, #2
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d1e9      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f003 0304 	and.w	r3, r3, #4
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f000 80a6 	beq.w	8000d7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c32:	4b8b      	ldr	r3, [pc, #556]	; (8000e60 <HAL_RCC_OscConfig+0x4c4>)
 8000c34:	69db      	ldr	r3, [r3, #28]
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d10d      	bne.n	8000c5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	4b88      	ldr	r3, [pc, #544]	; (8000e60 <HAL_RCC_OscConfig+0x4c4>)
 8000c40:	69db      	ldr	r3, [r3, #28]
 8000c42:	4a87      	ldr	r2, [pc, #540]	; (8000e60 <HAL_RCC_OscConfig+0x4c4>)
 8000c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c48:	61d3      	str	r3, [r2, #28]
 8000c4a:	4b85      	ldr	r3, [pc, #532]	; (8000e60 <HAL_RCC_OscConfig+0x4c4>)
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000c56:	2301      	movs	r3, #1
 8000c58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c5a:	4b82      	ldr	r3, [pc, #520]	; (8000e64 <HAL_RCC_OscConfig+0x4c8>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d118      	bne.n	8000c98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c66:	4b7f      	ldr	r3, [pc, #508]	; (8000e64 <HAL_RCC_OscConfig+0x4c8>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a7e      	ldr	r2, [pc, #504]	; (8000e64 <HAL_RCC_OscConfig+0x4c8>)
 8000c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c72:	f7ff fda5 	bl	80007c0 <HAL_GetTick>
 8000c76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c78:	e008      	b.n	8000c8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c7a:	f7ff fda1 	bl	80007c0 <HAL_GetTick>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	2b64      	cmp	r3, #100	; 0x64
 8000c86:	d901      	bls.n	8000c8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	e103      	b.n	8000e94 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c8c:	4b75      	ldr	r3, [pc, #468]	; (8000e64 <HAL_RCC_OscConfig+0x4c8>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d0f0      	beq.n	8000c7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d106      	bne.n	8000cae <HAL_RCC_OscConfig+0x312>
 8000ca0:	4b6f      	ldr	r3, [pc, #444]	; (8000e60 <HAL_RCC_OscConfig+0x4c4>)
 8000ca2:	6a1b      	ldr	r3, [r3, #32]
 8000ca4:	4a6e      	ldr	r2, [pc, #440]	; (8000e60 <HAL_RCC_OscConfig+0x4c4>)
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	6213      	str	r3, [r2, #32]
 8000cac:	e02d      	b.n	8000d0a <HAL_RCC_OscConfig+0x36e>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d10c      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x334>
 8000cb6:	4b6a      	ldr	r3, [pc, #424]	; (8000e60 <HAL_RCC_OscConfig+0x4c4>)
 8000cb8:	6a1b      	ldr	r3, [r3, #32]
 8000cba:	4a69      	ldr	r2, [pc, #420]	; (8000e60 <HAL_RCC_OscConfig+0x4c4>)
 8000cbc:	f023 0301 	bic.w	r3, r3, #1
 8000cc0:	6213      	str	r3, [r2, #32]
 8000cc2:	4b67      	ldr	r3, [pc, #412]	; (8000e60 <HAL_RCC_OscConfig+0x4c4>)
 8000cc4:	6a1b      	ldr	r3, [r3, #32]
 8000cc6:	4a66      	ldr	r2, [pc, #408]	; (8000e60 <HAL_RCC_OscConfig+0x4c4>)
 8000cc8:	f023 0304 	bic.w	r3, r3, #4
 8000ccc:	6213      	str	r3, [r2, #32]
 8000cce:	e01c      	b.n	8000d0a <HAL_RCC_OscConfig+0x36e>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	2b05      	cmp	r3, #5
 8000cd6:	d10c      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x356>
 8000cd8:	4b61      	ldr	r3, [pc, #388]	; (8000e60 <HAL_RCC_OscConfig+0x4c4>)
 8000cda:	6a1b      	ldr	r3, [r3, #32]
 8000cdc:	4a60      	ldr	r2, [pc, #384]	; (8000e60 <HAL_RCC_OscConfig+0x4c4>)
 8000cde:	f043 0304 	orr.w	r3, r3, #4
 8000ce2:	6213      	str	r3, [r2, #32]
 8000ce4:	4b5e      	ldr	r3, [pc, #376]	; (8000e60 <HAL_RCC_OscConfig+0x4c4>)
 8000ce6:	6a1b      	ldr	r3, [r3, #32]
 8000ce8:	4a5d      	ldr	r2, [pc, #372]	; (8000e60 <HAL_RCC_OscConfig+0x4c4>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	6213      	str	r3, [r2, #32]
 8000cf0:	e00b      	b.n	8000d0a <HAL_RCC_OscConfig+0x36e>
 8000cf2:	4b5b      	ldr	r3, [pc, #364]	; (8000e60 <HAL_RCC_OscConfig+0x4c4>)
 8000cf4:	6a1b      	ldr	r3, [r3, #32]
 8000cf6:	4a5a      	ldr	r2, [pc, #360]	; (8000e60 <HAL_RCC_OscConfig+0x4c4>)
 8000cf8:	f023 0301 	bic.w	r3, r3, #1
 8000cfc:	6213      	str	r3, [r2, #32]
 8000cfe:	4b58      	ldr	r3, [pc, #352]	; (8000e60 <HAL_RCC_OscConfig+0x4c4>)
 8000d00:	6a1b      	ldr	r3, [r3, #32]
 8000d02:	4a57      	ldr	r2, [pc, #348]	; (8000e60 <HAL_RCC_OscConfig+0x4c4>)
 8000d04:	f023 0304 	bic.w	r3, r3, #4
 8000d08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d015      	beq.n	8000d3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d12:	f7ff fd55 	bl	80007c0 <HAL_GetTick>
 8000d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d18:	e00a      	b.n	8000d30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d1a:	f7ff fd51 	bl	80007c0 <HAL_GetTick>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d901      	bls.n	8000d30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	e0b1      	b.n	8000e94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d30:	4b4b      	ldr	r3, [pc, #300]	; (8000e60 <HAL_RCC_OscConfig+0x4c4>)
 8000d32:	6a1b      	ldr	r3, [r3, #32]
 8000d34:	f003 0302 	and.w	r3, r3, #2
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d0ee      	beq.n	8000d1a <HAL_RCC_OscConfig+0x37e>
 8000d3c:	e014      	b.n	8000d68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d3e:	f7ff fd3f 	bl	80007c0 <HAL_GetTick>
 8000d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d44:	e00a      	b.n	8000d5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d46:	f7ff fd3b 	bl	80007c0 <HAL_GetTick>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d901      	bls.n	8000d5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	e09b      	b.n	8000e94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d5c:	4b40      	ldr	r3, [pc, #256]	; (8000e60 <HAL_RCC_OscConfig+0x4c4>)
 8000d5e:	6a1b      	ldr	r3, [r3, #32]
 8000d60:	f003 0302 	and.w	r3, r3, #2
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1ee      	bne.n	8000d46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000d68:	7dfb      	ldrb	r3, [r7, #23]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d105      	bne.n	8000d7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d6e:	4b3c      	ldr	r3, [pc, #240]	; (8000e60 <HAL_RCC_OscConfig+0x4c4>)
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	4a3b      	ldr	r2, [pc, #236]	; (8000e60 <HAL_RCC_OscConfig+0x4c4>)
 8000d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f000 8087 	beq.w	8000e92 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d84:	4b36      	ldr	r3, [pc, #216]	; (8000e60 <HAL_RCC_OscConfig+0x4c4>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 030c 	and.w	r3, r3, #12
 8000d8c:	2b08      	cmp	r3, #8
 8000d8e:	d061      	beq.n	8000e54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	69db      	ldr	r3, [r3, #28]
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d146      	bne.n	8000e26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d98:	4b33      	ldr	r3, [pc, #204]	; (8000e68 <HAL_RCC_OscConfig+0x4cc>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d9e:	f7ff fd0f 	bl	80007c0 <HAL_GetTick>
 8000da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000da4:	e008      	b.n	8000db8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000da6:	f7ff fd0b 	bl	80007c0 <HAL_GetTick>
 8000daa:	4602      	mov	r2, r0
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d901      	bls.n	8000db8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000db4:	2303      	movs	r3, #3
 8000db6:	e06d      	b.n	8000e94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000db8:	4b29      	ldr	r3, [pc, #164]	; (8000e60 <HAL_RCC_OscConfig+0x4c4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d1f0      	bne.n	8000da6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6a1b      	ldr	r3, [r3, #32]
 8000dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dcc:	d108      	bne.n	8000de0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000dce:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <HAL_RCC_OscConfig+0x4c4>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	4921      	ldr	r1, [pc, #132]	; (8000e60 <HAL_RCC_OscConfig+0x4c4>)
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <HAL_RCC_OscConfig+0x4c4>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6a19      	ldr	r1, [r3, #32]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df0:	430b      	orrs	r3, r1
 8000df2:	491b      	ldr	r1, [pc, #108]	; (8000e60 <HAL_RCC_OscConfig+0x4c4>)
 8000df4:	4313      	orrs	r3, r2
 8000df6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000df8:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <HAL_RCC_OscConfig+0x4cc>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dfe:	f7ff fcdf 	bl	80007c0 <HAL_GetTick>
 8000e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e04:	e008      	b.n	8000e18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e06:	f7ff fcdb 	bl	80007c0 <HAL_GetTick>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d901      	bls.n	8000e18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000e14:	2303      	movs	r3, #3
 8000e16:	e03d      	b.n	8000e94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <HAL_RCC_OscConfig+0x4c4>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d0f0      	beq.n	8000e06 <HAL_RCC_OscConfig+0x46a>
 8000e24:	e035      	b.n	8000e92 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <HAL_RCC_OscConfig+0x4cc>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e2c:	f7ff fcc8 	bl	80007c0 <HAL_GetTick>
 8000e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e32:	e008      	b.n	8000e46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e34:	f7ff fcc4 	bl	80007c0 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d901      	bls.n	8000e46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e026      	b.n	8000e94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_RCC_OscConfig+0x4c4>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d1f0      	bne.n	8000e34 <HAL_RCC_OscConfig+0x498>
 8000e52:	e01e      	b.n	8000e92 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	69db      	ldr	r3, [r3, #28]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d107      	bne.n	8000e6c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e019      	b.n	8000e94 <HAL_RCC_OscConfig+0x4f8>
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40007000 	.word	0x40007000
 8000e68:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000e6c:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <HAL_RCC_OscConfig+0x500>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6a1b      	ldr	r3, [r3, #32]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d106      	bne.n	8000e8e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d001      	beq.n	8000e92 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e000      	b.n	8000e94 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000e92:	2300      	movs	r3, #0
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40021000 	.word	0x40021000

08000ea0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d101      	bne.n	8000eb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e0d0      	b.n	8001056 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000eb4:	4b6a      	ldr	r3, [pc, #424]	; (8001060 <HAL_RCC_ClockConfig+0x1c0>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 0307 	and.w	r3, r3, #7
 8000ebc:	683a      	ldr	r2, [r7, #0]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d910      	bls.n	8000ee4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ec2:	4b67      	ldr	r3, [pc, #412]	; (8001060 <HAL_RCC_ClockConfig+0x1c0>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f023 0207 	bic.w	r2, r3, #7
 8000eca:	4965      	ldr	r1, [pc, #404]	; (8001060 <HAL_RCC_ClockConfig+0x1c0>)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ed2:	4b63      	ldr	r3, [pc, #396]	; (8001060 <HAL_RCC_ClockConfig+0x1c0>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	683a      	ldr	r2, [r7, #0]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d001      	beq.n	8000ee4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e0b8      	b.n	8001056 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 0302 	and.w	r3, r3, #2
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d020      	beq.n	8000f32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 0304 	and.w	r3, r3, #4
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d005      	beq.n	8000f08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000efc:	4b59      	ldr	r3, [pc, #356]	; (8001064 <HAL_RCC_ClockConfig+0x1c4>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	4a58      	ldr	r2, [pc, #352]	; (8001064 <HAL_RCC_ClockConfig+0x1c4>)
 8000f02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000f06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 0308 	and.w	r3, r3, #8
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d005      	beq.n	8000f20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f14:	4b53      	ldr	r3, [pc, #332]	; (8001064 <HAL_RCC_ClockConfig+0x1c4>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	4a52      	ldr	r2, [pc, #328]	; (8001064 <HAL_RCC_ClockConfig+0x1c4>)
 8000f1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000f1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f20:	4b50      	ldr	r3, [pc, #320]	; (8001064 <HAL_RCC_ClockConfig+0x1c4>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	494d      	ldr	r1, [pc, #308]	; (8001064 <HAL_RCC_ClockConfig+0x1c4>)
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d040      	beq.n	8000fc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d107      	bne.n	8000f56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f46:	4b47      	ldr	r3, [pc, #284]	; (8001064 <HAL_RCC_ClockConfig+0x1c4>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d115      	bne.n	8000f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e07f      	b.n	8001056 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d107      	bne.n	8000f6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f5e:	4b41      	ldr	r3, [pc, #260]	; (8001064 <HAL_RCC_ClockConfig+0x1c4>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d109      	bne.n	8000f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e073      	b.n	8001056 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f6e:	4b3d      	ldr	r3, [pc, #244]	; (8001064 <HAL_RCC_ClockConfig+0x1c4>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e06b      	b.n	8001056 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f7e:	4b39      	ldr	r3, [pc, #228]	; (8001064 <HAL_RCC_ClockConfig+0x1c4>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f023 0203 	bic.w	r2, r3, #3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	4936      	ldr	r1, [pc, #216]	; (8001064 <HAL_RCC_ClockConfig+0x1c4>)
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f90:	f7ff fc16 	bl	80007c0 <HAL_GetTick>
 8000f94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f96:	e00a      	b.n	8000fae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f98:	f7ff fc12 	bl	80007c0 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e053      	b.n	8001056 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fae:	4b2d      	ldr	r3, [pc, #180]	; (8001064 <HAL_RCC_ClockConfig+0x1c4>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f003 020c 	and.w	r2, r3, #12
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d1eb      	bne.n	8000f98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000fc0:	4b27      	ldr	r3, [pc, #156]	; (8001060 <HAL_RCC_ClockConfig+0x1c0>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0307 	and.w	r3, r3, #7
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d210      	bcs.n	8000ff0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fce:	4b24      	ldr	r3, [pc, #144]	; (8001060 <HAL_RCC_ClockConfig+0x1c0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f023 0207 	bic.w	r2, r3, #7
 8000fd6:	4922      	ldr	r1, [pc, #136]	; (8001060 <HAL_RCC_ClockConfig+0x1c0>)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fde:	4b20      	ldr	r3, [pc, #128]	; (8001060 <HAL_RCC_ClockConfig+0x1c0>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d001      	beq.n	8000ff0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e032      	b.n	8001056 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d008      	beq.n	800100e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <HAL_RCC_ClockConfig+0x1c4>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	4916      	ldr	r1, [pc, #88]	; (8001064 <HAL_RCC_ClockConfig+0x1c4>)
 800100a:	4313      	orrs	r3, r2
 800100c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0308 	and.w	r3, r3, #8
 8001016:	2b00      	cmp	r3, #0
 8001018:	d009      	beq.n	800102e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_RCC_ClockConfig+0x1c4>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	691b      	ldr	r3, [r3, #16]
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	490e      	ldr	r1, [pc, #56]	; (8001064 <HAL_RCC_ClockConfig+0x1c4>)
 800102a:	4313      	orrs	r3, r2
 800102c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800102e:	f000 f821 	bl	8001074 <HAL_RCC_GetSysClockFreq>
 8001032:	4602      	mov	r2, r0
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <HAL_RCC_ClockConfig+0x1c4>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	091b      	lsrs	r3, r3, #4
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	490a      	ldr	r1, [pc, #40]	; (8001068 <HAL_RCC_ClockConfig+0x1c8>)
 8001040:	5ccb      	ldrb	r3, [r1, r3]
 8001042:	fa22 f303 	lsr.w	r3, r2, r3
 8001046:	4a09      	ldr	r2, [pc, #36]	; (800106c <HAL_RCC_ClockConfig+0x1cc>)
 8001048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <HAL_RCC_ClockConfig+0x1d0>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fb74 	bl	800073c <HAL_InitTick>

  return HAL_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40022000 	.word	0x40022000
 8001064:	40021000 	.word	0x40021000
 8001068:	080023b8 	.word	0x080023b8
 800106c:	20000048 	.word	0x20000048
 8001070:	2000004c 	.word	0x2000004c

08001074 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001074:	b490      	push	{r4, r7}
 8001076:	b08a      	sub	sp, #40	; 0x28
 8001078:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800107a:	4b29      	ldr	r3, [pc, #164]	; (8001120 <HAL_RCC_GetSysClockFreq+0xac>)
 800107c:	1d3c      	adds	r4, r7, #4
 800107e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001080:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001084:	f240 2301 	movw	r3, #513	; 0x201
 8001088:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
 8001092:	2300      	movs	r3, #0
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800109a:	2300      	movs	r3, #0
 800109c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800109e:	4b21      	ldr	r3, [pc, #132]	; (8001124 <HAL_RCC_GetSysClockFreq+0xb0>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f003 030c 	and.w	r3, r3, #12
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	d002      	beq.n	80010b4 <HAL_RCC_GetSysClockFreq+0x40>
 80010ae:	2b08      	cmp	r3, #8
 80010b0:	d003      	beq.n	80010ba <HAL_RCC_GetSysClockFreq+0x46>
 80010b2:	e02b      	b.n	800110c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80010b4:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <HAL_RCC_GetSysClockFreq+0xb4>)
 80010b6:	623b      	str	r3, [r7, #32]
      break;
 80010b8:	e02b      	b.n	8001112 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	0c9b      	lsrs	r3, r3, #18
 80010be:	f003 030f 	and.w	r3, r3, #15
 80010c2:	3328      	adds	r3, #40	; 0x28
 80010c4:	443b      	add	r3, r7
 80010c6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80010ca:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d012      	beq.n	80010fc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <HAL_RCC_GetSysClockFreq+0xb0>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	0c5b      	lsrs	r3, r3, #17
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	3328      	adds	r3, #40	; 0x28
 80010e2:	443b      	add	r3, r7
 80010e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80010e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	4a0e      	ldr	r2, [pc, #56]	; (8001128 <HAL_RCC_GetSysClockFreq+0xb4>)
 80010ee:	fb03 f202 	mul.w	r2, r3, r2
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
 80010fa:	e004      	b.n	8001106 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	4a0b      	ldr	r2, [pc, #44]	; (800112c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001100:	fb02 f303 	mul.w	r3, r2, r3
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001108:	623b      	str	r3, [r7, #32]
      break;
 800110a:	e002      	b.n	8001112 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_RCC_GetSysClockFreq+0xb4>)
 800110e:	623b      	str	r3, [r7, #32]
      break;
 8001110:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001112:	6a3b      	ldr	r3, [r7, #32]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3728      	adds	r7, #40	; 0x28
 8001118:	46bd      	mov	sp, r7
 800111a:	bc90      	pop	{r4, r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	080023a8 	.word	0x080023a8
 8001124:	40021000 	.word	0x40021000
 8001128:	007a1200 	.word	0x007a1200
 800112c:	003d0900 	.word	0x003d0900

08001130 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001138:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <RCC_Delay+0x34>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <RCC_Delay+0x38>)
 800113e:	fba2 2303 	umull	r2, r3, r2, r3
 8001142:	0a5b      	lsrs	r3, r3, #9
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	fb02 f303 	mul.w	r3, r2, r3
 800114a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800114c:	bf00      	nop
  }
  while (Delay --);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	1e5a      	subs	r2, r3, #1
 8001152:	60fa      	str	r2, [r7, #12]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d1f9      	bne.n	800114c <RCC_Delay+0x1c>
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	20000048 	.word	0x20000048
 8001168:	10624dd3 	.word	0x10624dd3

0800116c <__errno>:
 800116c:	4b01      	ldr	r3, [pc, #4]	; (8001174 <__errno+0x8>)
 800116e:	6818      	ldr	r0, [r3, #0]
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20000054 	.word	0x20000054

08001178 <__libc_init_array>:
 8001178:	b570      	push	{r4, r5, r6, lr}
 800117a:	2600      	movs	r6, #0
 800117c:	4d0c      	ldr	r5, [pc, #48]	; (80011b0 <__libc_init_array+0x38>)
 800117e:	4c0d      	ldr	r4, [pc, #52]	; (80011b4 <__libc_init_array+0x3c>)
 8001180:	1b64      	subs	r4, r4, r5
 8001182:	10a4      	asrs	r4, r4, #2
 8001184:	42a6      	cmp	r6, r4
 8001186:	d109      	bne.n	800119c <__libc_init_array+0x24>
 8001188:	f001 f8d4 	bl	8002334 <_init>
 800118c:	2600      	movs	r6, #0
 800118e:	4d0a      	ldr	r5, [pc, #40]	; (80011b8 <__libc_init_array+0x40>)
 8001190:	4c0a      	ldr	r4, [pc, #40]	; (80011bc <__libc_init_array+0x44>)
 8001192:	1b64      	subs	r4, r4, r5
 8001194:	10a4      	asrs	r4, r4, #2
 8001196:	42a6      	cmp	r6, r4
 8001198:	d105      	bne.n	80011a6 <__libc_init_array+0x2e>
 800119a:	bd70      	pop	{r4, r5, r6, pc}
 800119c:	f855 3b04 	ldr.w	r3, [r5], #4
 80011a0:	4798      	blx	r3
 80011a2:	3601      	adds	r6, #1
 80011a4:	e7ee      	b.n	8001184 <__libc_init_array+0xc>
 80011a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80011aa:	4798      	blx	r3
 80011ac:	3601      	adds	r6, #1
 80011ae:	e7f2      	b.n	8001196 <__libc_init_array+0x1e>
 80011b0:	08002510 	.word	0x08002510
 80011b4:	08002510 	.word	0x08002510
 80011b8:	08002510 	.word	0x08002510
 80011bc:	08002514 	.word	0x08002514

080011c0 <memset>:
 80011c0:	4603      	mov	r3, r0
 80011c2:	4402      	add	r2, r0
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d100      	bne.n	80011ca <memset+0xa>
 80011c8:	4770      	bx	lr
 80011ca:	f803 1b01 	strb.w	r1, [r3], #1
 80011ce:	e7f9      	b.n	80011c4 <memset+0x4>

080011d0 <iprintf>:
 80011d0:	b40f      	push	{r0, r1, r2, r3}
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <iprintf+0x2c>)
 80011d4:	b513      	push	{r0, r1, r4, lr}
 80011d6:	681c      	ldr	r4, [r3, #0]
 80011d8:	b124      	cbz	r4, 80011e4 <iprintf+0x14>
 80011da:	69a3      	ldr	r3, [r4, #24]
 80011dc:	b913      	cbnz	r3, 80011e4 <iprintf+0x14>
 80011de:	4620      	mov	r0, r4
 80011e0:	f000 f8d6 	bl	8001390 <__sinit>
 80011e4:	ab05      	add	r3, sp, #20
 80011e6:	4620      	mov	r0, r4
 80011e8:	9a04      	ldr	r2, [sp, #16]
 80011ea:	68a1      	ldr	r1, [r4, #8]
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	f000 fa8d 	bl	800170c <_vfiprintf_r>
 80011f2:	b002      	add	sp, #8
 80011f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011f8:	b004      	add	sp, #16
 80011fa:	4770      	bx	lr
 80011fc:	20000054 	.word	0x20000054

08001200 <putchar>:
 8001200:	b538      	push	{r3, r4, r5, lr}
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <putchar+0x24>)
 8001204:	4605      	mov	r5, r0
 8001206:	681c      	ldr	r4, [r3, #0]
 8001208:	b124      	cbz	r4, 8001214 <putchar+0x14>
 800120a:	69a3      	ldr	r3, [r4, #24]
 800120c:	b913      	cbnz	r3, 8001214 <putchar+0x14>
 800120e:	4620      	mov	r0, r4
 8001210:	f000 f8be 	bl	8001390 <__sinit>
 8001214:	4629      	mov	r1, r5
 8001216:	4620      	mov	r0, r4
 8001218:	68a2      	ldr	r2, [r4, #8]
 800121a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800121e:	f000 bd3b 	b.w	8001c98 <_putc_r>
 8001222:	bf00      	nop
 8001224:	20000054 	.word	0x20000054

08001228 <rand>:
 8001228:	4b16      	ldr	r3, [pc, #88]	; (8001284 <rand+0x5c>)
 800122a:	b510      	push	{r4, lr}
 800122c:	681c      	ldr	r4, [r3, #0]
 800122e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001230:	b9b3      	cbnz	r3, 8001260 <rand+0x38>
 8001232:	2018      	movs	r0, #24
 8001234:	f000 f95e 	bl	80014f4 <malloc>
 8001238:	4602      	mov	r2, r0
 800123a:	63a0      	str	r0, [r4, #56]	; 0x38
 800123c:	b920      	cbnz	r0, 8001248 <rand+0x20>
 800123e:	214e      	movs	r1, #78	; 0x4e
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <rand+0x60>)
 8001242:	4812      	ldr	r0, [pc, #72]	; (800128c <rand+0x64>)
 8001244:	f000 f82e 	bl	80012a4 <__assert_func>
 8001248:	4911      	ldr	r1, [pc, #68]	; (8001290 <rand+0x68>)
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <rand+0x6c>)
 800124c:	e9c0 1300 	strd	r1, r3, [r0]
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <rand+0x70>)
 8001252:	2100      	movs	r1, #0
 8001254:	6083      	str	r3, [r0, #8]
 8001256:	230b      	movs	r3, #11
 8001258:	8183      	strh	r3, [r0, #12]
 800125a:	2001      	movs	r0, #1
 800125c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001260:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8001262:	4a0e      	ldr	r2, [pc, #56]	; (800129c <rand+0x74>)
 8001264:	6920      	ldr	r0, [r4, #16]
 8001266:	6963      	ldr	r3, [r4, #20]
 8001268:	4342      	muls	r2, r0
 800126a:	490d      	ldr	r1, [pc, #52]	; (80012a0 <rand+0x78>)
 800126c:	fb01 2203 	mla	r2, r1, r3, r2
 8001270:	fba0 0101 	umull	r0, r1, r0, r1
 8001274:	1c43      	adds	r3, r0, #1
 8001276:	eb42 0001 	adc.w	r0, r2, r1
 800127a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800127e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001282:	bd10      	pop	{r4, pc}
 8001284:	20000054 	.word	0x20000054
 8001288:	080023cc 	.word	0x080023cc
 800128c:	080023e3 	.word	0x080023e3
 8001290:	abcd330e 	.word	0xabcd330e
 8001294:	e66d1234 	.word	0xe66d1234
 8001298:	0005deec 	.word	0x0005deec
 800129c:	5851f42d 	.word	0x5851f42d
 80012a0:	4c957f2d 	.word	0x4c957f2d

080012a4 <__assert_func>:
 80012a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80012a6:	4614      	mov	r4, r2
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <__assert_func+0x2c>)
 80012ac:	4605      	mov	r5, r0
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68d8      	ldr	r0, [r3, #12]
 80012b2:	b14c      	cbz	r4, 80012c8 <__assert_func+0x24>
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <__assert_func+0x30>)
 80012b6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80012ba:	9100      	str	r1, [sp, #0]
 80012bc:	462b      	mov	r3, r5
 80012be:	4906      	ldr	r1, [pc, #24]	; (80012d8 <__assert_func+0x34>)
 80012c0:	f000 f8e4 	bl	800148c <fiprintf>
 80012c4:	f000 fe56 	bl	8001f74 <abort>
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <__assert_func+0x38>)
 80012ca:	461c      	mov	r4, r3
 80012cc:	e7f3      	b.n	80012b6 <__assert_func+0x12>
 80012ce:	bf00      	nop
 80012d0:	20000054 	.word	0x20000054
 80012d4:	0800243e 	.word	0x0800243e
 80012d8:	0800244b 	.word	0x0800244b
 80012dc:	08002479 	.word	0x08002479

080012e0 <std>:
 80012e0:	2300      	movs	r3, #0
 80012e2:	b510      	push	{r4, lr}
 80012e4:	4604      	mov	r4, r0
 80012e6:	e9c0 3300 	strd	r3, r3, [r0]
 80012ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80012ee:	6083      	str	r3, [r0, #8]
 80012f0:	8181      	strh	r1, [r0, #12]
 80012f2:	6643      	str	r3, [r0, #100]	; 0x64
 80012f4:	81c2      	strh	r2, [r0, #14]
 80012f6:	6183      	str	r3, [r0, #24]
 80012f8:	4619      	mov	r1, r3
 80012fa:	2208      	movs	r2, #8
 80012fc:	305c      	adds	r0, #92	; 0x5c
 80012fe:	f7ff ff5f 	bl	80011c0 <memset>
 8001302:	4b05      	ldr	r3, [pc, #20]	; (8001318 <std+0x38>)
 8001304:	6224      	str	r4, [r4, #32]
 8001306:	6263      	str	r3, [r4, #36]	; 0x24
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <std+0x3c>)
 800130a:	62a3      	str	r3, [r4, #40]	; 0x28
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <std+0x40>)
 800130e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001310:	4b04      	ldr	r3, [pc, #16]	; (8001324 <std+0x44>)
 8001312:	6323      	str	r3, [r4, #48]	; 0x30
 8001314:	bd10      	pop	{r4, pc}
 8001316:	bf00      	nop
 8001318:	08001d49 	.word	0x08001d49
 800131c:	08001d6b 	.word	0x08001d6b
 8001320:	08001da3 	.word	0x08001da3
 8001324:	08001dc7 	.word	0x08001dc7

08001328 <_cleanup_r>:
 8001328:	4901      	ldr	r1, [pc, #4]	; (8001330 <_cleanup_r+0x8>)
 800132a:	f000 b8c1 	b.w	80014b0 <_fwalk_reent>
 800132e:	bf00      	nop
 8001330:	080020a9 	.word	0x080020a9

08001334 <__sfmoreglue>:
 8001334:	2268      	movs	r2, #104	; 0x68
 8001336:	b570      	push	{r4, r5, r6, lr}
 8001338:	1e4d      	subs	r5, r1, #1
 800133a:	4355      	muls	r5, r2
 800133c:	460e      	mov	r6, r1
 800133e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001342:	f000 f947 	bl	80015d4 <_malloc_r>
 8001346:	4604      	mov	r4, r0
 8001348:	b140      	cbz	r0, 800135c <__sfmoreglue+0x28>
 800134a:	2100      	movs	r1, #0
 800134c:	e9c0 1600 	strd	r1, r6, [r0]
 8001350:	300c      	adds	r0, #12
 8001352:	60a0      	str	r0, [r4, #8]
 8001354:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001358:	f7ff ff32 	bl	80011c0 <memset>
 800135c:	4620      	mov	r0, r4
 800135e:	bd70      	pop	{r4, r5, r6, pc}

08001360 <__sfp_lock_acquire>:
 8001360:	4801      	ldr	r0, [pc, #4]	; (8001368 <__sfp_lock_acquire+0x8>)
 8001362:	f000 b8c5 	b.w	80014f0 <__retarget_lock_acquire_recursive>
 8001366:	bf00      	nop
 8001368:	200000dd 	.word	0x200000dd

0800136c <__sfp_lock_release>:
 800136c:	4801      	ldr	r0, [pc, #4]	; (8001374 <__sfp_lock_release+0x8>)
 800136e:	f000 b8c0 	b.w	80014f2 <__retarget_lock_release_recursive>
 8001372:	bf00      	nop
 8001374:	200000dd 	.word	0x200000dd

08001378 <__sinit_lock_acquire>:
 8001378:	4801      	ldr	r0, [pc, #4]	; (8001380 <__sinit_lock_acquire+0x8>)
 800137a:	f000 b8b9 	b.w	80014f0 <__retarget_lock_acquire_recursive>
 800137e:	bf00      	nop
 8001380:	200000de 	.word	0x200000de

08001384 <__sinit_lock_release>:
 8001384:	4801      	ldr	r0, [pc, #4]	; (800138c <__sinit_lock_release+0x8>)
 8001386:	f000 b8b4 	b.w	80014f2 <__retarget_lock_release_recursive>
 800138a:	bf00      	nop
 800138c:	200000de 	.word	0x200000de

08001390 <__sinit>:
 8001390:	b510      	push	{r4, lr}
 8001392:	4604      	mov	r4, r0
 8001394:	f7ff fff0 	bl	8001378 <__sinit_lock_acquire>
 8001398:	69a3      	ldr	r3, [r4, #24]
 800139a:	b11b      	cbz	r3, 80013a4 <__sinit+0x14>
 800139c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013a0:	f7ff bff0 	b.w	8001384 <__sinit_lock_release>
 80013a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80013a8:	6523      	str	r3, [r4, #80]	; 0x50
 80013aa:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <__sinit+0x68>)
 80013ac:	4a13      	ldr	r2, [pc, #76]	; (80013fc <__sinit+0x6c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80013b2:	42a3      	cmp	r3, r4
 80013b4:	bf08      	it	eq
 80013b6:	2301      	moveq	r3, #1
 80013b8:	4620      	mov	r0, r4
 80013ba:	bf08      	it	eq
 80013bc:	61a3      	streq	r3, [r4, #24]
 80013be:	f000 f81f 	bl	8001400 <__sfp>
 80013c2:	6060      	str	r0, [r4, #4]
 80013c4:	4620      	mov	r0, r4
 80013c6:	f000 f81b 	bl	8001400 <__sfp>
 80013ca:	60a0      	str	r0, [r4, #8]
 80013cc:	4620      	mov	r0, r4
 80013ce:	f000 f817 	bl	8001400 <__sfp>
 80013d2:	2200      	movs	r2, #0
 80013d4:	2104      	movs	r1, #4
 80013d6:	60e0      	str	r0, [r4, #12]
 80013d8:	6860      	ldr	r0, [r4, #4]
 80013da:	f7ff ff81 	bl	80012e0 <std>
 80013de:	2201      	movs	r2, #1
 80013e0:	2109      	movs	r1, #9
 80013e2:	68a0      	ldr	r0, [r4, #8]
 80013e4:	f7ff ff7c 	bl	80012e0 <std>
 80013e8:	2202      	movs	r2, #2
 80013ea:	2112      	movs	r1, #18
 80013ec:	68e0      	ldr	r0, [r4, #12]
 80013ee:	f7ff ff77 	bl	80012e0 <std>
 80013f2:	2301      	movs	r3, #1
 80013f4:	61a3      	str	r3, [r4, #24]
 80013f6:	e7d1      	b.n	800139c <__sinit+0xc>
 80013f8:	080023c8 	.word	0x080023c8
 80013fc:	08001329 	.word	0x08001329

08001400 <__sfp>:
 8001400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001402:	4607      	mov	r7, r0
 8001404:	f7ff ffac 	bl	8001360 <__sfp_lock_acquire>
 8001408:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <__sfp+0x84>)
 800140a:	681e      	ldr	r6, [r3, #0]
 800140c:	69b3      	ldr	r3, [r6, #24]
 800140e:	b913      	cbnz	r3, 8001416 <__sfp+0x16>
 8001410:	4630      	mov	r0, r6
 8001412:	f7ff ffbd 	bl	8001390 <__sinit>
 8001416:	3648      	adds	r6, #72	; 0x48
 8001418:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800141c:	3b01      	subs	r3, #1
 800141e:	d503      	bpl.n	8001428 <__sfp+0x28>
 8001420:	6833      	ldr	r3, [r6, #0]
 8001422:	b30b      	cbz	r3, 8001468 <__sfp+0x68>
 8001424:	6836      	ldr	r6, [r6, #0]
 8001426:	e7f7      	b.n	8001418 <__sfp+0x18>
 8001428:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800142c:	b9d5      	cbnz	r5, 8001464 <__sfp+0x64>
 800142e:	4b16      	ldr	r3, [pc, #88]	; (8001488 <__sfp+0x88>)
 8001430:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001434:	60e3      	str	r3, [r4, #12]
 8001436:	6665      	str	r5, [r4, #100]	; 0x64
 8001438:	f000 f859 	bl	80014ee <__retarget_lock_init_recursive>
 800143c:	f7ff ff96 	bl	800136c <__sfp_lock_release>
 8001440:	2208      	movs	r2, #8
 8001442:	4629      	mov	r1, r5
 8001444:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001448:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800144c:	6025      	str	r5, [r4, #0]
 800144e:	61a5      	str	r5, [r4, #24]
 8001450:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001454:	f7ff feb4 	bl	80011c0 <memset>
 8001458:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800145c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001460:	4620      	mov	r0, r4
 8001462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001464:	3468      	adds	r4, #104	; 0x68
 8001466:	e7d9      	b.n	800141c <__sfp+0x1c>
 8001468:	2104      	movs	r1, #4
 800146a:	4638      	mov	r0, r7
 800146c:	f7ff ff62 	bl	8001334 <__sfmoreglue>
 8001470:	4604      	mov	r4, r0
 8001472:	6030      	str	r0, [r6, #0]
 8001474:	2800      	cmp	r0, #0
 8001476:	d1d5      	bne.n	8001424 <__sfp+0x24>
 8001478:	f7ff ff78 	bl	800136c <__sfp_lock_release>
 800147c:	230c      	movs	r3, #12
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	e7ee      	b.n	8001460 <__sfp+0x60>
 8001482:	bf00      	nop
 8001484:	080023c8 	.word	0x080023c8
 8001488:	ffff0001 	.word	0xffff0001

0800148c <fiprintf>:
 800148c:	b40e      	push	{r1, r2, r3}
 800148e:	b503      	push	{r0, r1, lr}
 8001490:	4601      	mov	r1, r0
 8001492:	ab03      	add	r3, sp, #12
 8001494:	4805      	ldr	r0, [pc, #20]	; (80014ac <fiprintf+0x20>)
 8001496:	f853 2b04 	ldr.w	r2, [r3], #4
 800149a:	6800      	ldr	r0, [r0, #0]
 800149c:	9301      	str	r3, [sp, #4]
 800149e:	f000 f935 	bl	800170c <_vfiprintf_r>
 80014a2:	b002      	add	sp, #8
 80014a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80014a8:	b003      	add	sp, #12
 80014aa:	4770      	bx	lr
 80014ac:	20000054 	.word	0x20000054

080014b0 <_fwalk_reent>:
 80014b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014b4:	4606      	mov	r6, r0
 80014b6:	4688      	mov	r8, r1
 80014b8:	2700      	movs	r7, #0
 80014ba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80014be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80014c2:	f1b9 0901 	subs.w	r9, r9, #1
 80014c6:	d505      	bpl.n	80014d4 <_fwalk_reent+0x24>
 80014c8:	6824      	ldr	r4, [r4, #0]
 80014ca:	2c00      	cmp	r4, #0
 80014cc:	d1f7      	bne.n	80014be <_fwalk_reent+0xe>
 80014ce:	4638      	mov	r0, r7
 80014d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80014d4:	89ab      	ldrh	r3, [r5, #12]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d907      	bls.n	80014ea <_fwalk_reent+0x3a>
 80014da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80014de:	3301      	adds	r3, #1
 80014e0:	d003      	beq.n	80014ea <_fwalk_reent+0x3a>
 80014e2:	4629      	mov	r1, r5
 80014e4:	4630      	mov	r0, r6
 80014e6:	47c0      	blx	r8
 80014e8:	4307      	orrs	r7, r0
 80014ea:	3568      	adds	r5, #104	; 0x68
 80014ec:	e7e9      	b.n	80014c2 <_fwalk_reent+0x12>

080014ee <__retarget_lock_init_recursive>:
 80014ee:	4770      	bx	lr

080014f0 <__retarget_lock_acquire_recursive>:
 80014f0:	4770      	bx	lr

080014f2 <__retarget_lock_release_recursive>:
 80014f2:	4770      	bx	lr

080014f4 <malloc>:
 80014f4:	4b02      	ldr	r3, [pc, #8]	; (8001500 <malloc+0xc>)
 80014f6:	4601      	mov	r1, r0
 80014f8:	6818      	ldr	r0, [r3, #0]
 80014fa:	f000 b86b 	b.w	80015d4 <_malloc_r>
 80014fe:	bf00      	nop
 8001500:	20000054 	.word	0x20000054

08001504 <_free_r>:
 8001504:	b538      	push	{r3, r4, r5, lr}
 8001506:	4605      	mov	r5, r0
 8001508:	2900      	cmp	r1, #0
 800150a:	d040      	beq.n	800158e <_free_r+0x8a>
 800150c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001510:	1f0c      	subs	r4, r1, #4
 8001512:	2b00      	cmp	r3, #0
 8001514:	bfb8      	it	lt
 8001516:	18e4      	addlt	r4, r4, r3
 8001518:	f000 fe88 	bl	800222c <__malloc_lock>
 800151c:	4a1c      	ldr	r2, [pc, #112]	; (8001590 <_free_r+0x8c>)
 800151e:	6813      	ldr	r3, [r2, #0]
 8001520:	b933      	cbnz	r3, 8001530 <_free_r+0x2c>
 8001522:	6063      	str	r3, [r4, #4]
 8001524:	6014      	str	r4, [r2, #0]
 8001526:	4628      	mov	r0, r5
 8001528:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800152c:	f000 be84 	b.w	8002238 <__malloc_unlock>
 8001530:	42a3      	cmp	r3, r4
 8001532:	d908      	bls.n	8001546 <_free_r+0x42>
 8001534:	6820      	ldr	r0, [r4, #0]
 8001536:	1821      	adds	r1, r4, r0
 8001538:	428b      	cmp	r3, r1
 800153a:	bf01      	itttt	eq
 800153c:	6819      	ldreq	r1, [r3, #0]
 800153e:	685b      	ldreq	r3, [r3, #4]
 8001540:	1809      	addeq	r1, r1, r0
 8001542:	6021      	streq	r1, [r4, #0]
 8001544:	e7ed      	b.n	8001522 <_free_r+0x1e>
 8001546:	461a      	mov	r2, r3
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	b10b      	cbz	r3, 8001550 <_free_r+0x4c>
 800154c:	42a3      	cmp	r3, r4
 800154e:	d9fa      	bls.n	8001546 <_free_r+0x42>
 8001550:	6811      	ldr	r1, [r2, #0]
 8001552:	1850      	adds	r0, r2, r1
 8001554:	42a0      	cmp	r0, r4
 8001556:	d10b      	bne.n	8001570 <_free_r+0x6c>
 8001558:	6820      	ldr	r0, [r4, #0]
 800155a:	4401      	add	r1, r0
 800155c:	1850      	adds	r0, r2, r1
 800155e:	4283      	cmp	r3, r0
 8001560:	6011      	str	r1, [r2, #0]
 8001562:	d1e0      	bne.n	8001526 <_free_r+0x22>
 8001564:	6818      	ldr	r0, [r3, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	4401      	add	r1, r0
 800156a:	6011      	str	r1, [r2, #0]
 800156c:	6053      	str	r3, [r2, #4]
 800156e:	e7da      	b.n	8001526 <_free_r+0x22>
 8001570:	d902      	bls.n	8001578 <_free_r+0x74>
 8001572:	230c      	movs	r3, #12
 8001574:	602b      	str	r3, [r5, #0]
 8001576:	e7d6      	b.n	8001526 <_free_r+0x22>
 8001578:	6820      	ldr	r0, [r4, #0]
 800157a:	1821      	adds	r1, r4, r0
 800157c:	428b      	cmp	r3, r1
 800157e:	bf01      	itttt	eq
 8001580:	6819      	ldreq	r1, [r3, #0]
 8001582:	685b      	ldreq	r3, [r3, #4]
 8001584:	1809      	addeq	r1, r1, r0
 8001586:	6021      	streq	r1, [r4, #0]
 8001588:	6063      	str	r3, [r4, #4]
 800158a:	6054      	str	r4, [r2, #4]
 800158c:	e7cb      	b.n	8001526 <_free_r+0x22>
 800158e:	bd38      	pop	{r3, r4, r5, pc}
 8001590:	200000e0 	.word	0x200000e0

08001594 <sbrk_aligned>:
 8001594:	b570      	push	{r4, r5, r6, lr}
 8001596:	4e0e      	ldr	r6, [pc, #56]	; (80015d0 <sbrk_aligned+0x3c>)
 8001598:	460c      	mov	r4, r1
 800159a:	6831      	ldr	r1, [r6, #0]
 800159c:	4605      	mov	r5, r0
 800159e:	b911      	cbnz	r1, 80015a6 <sbrk_aligned+0x12>
 80015a0:	f000 fbc2 	bl	8001d28 <_sbrk_r>
 80015a4:	6030      	str	r0, [r6, #0]
 80015a6:	4621      	mov	r1, r4
 80015a8:	4628      	mov	r0, r5
 80015aa:	f000 fbbd 	bl	8001d28 <_sbrk_r>
 80015ae:	1c43      	adds	r3, r0, #1
 80015b0:	d00a      	beq.n	80015c8 <sbrk_aligned+0x34>
 80015b2:	1cc4      	adds	r4, r0, #3
 80015b4:	f024 0403 	bic.w	r4, r4, #3
 80015b8:	42a0      	cmp	r0, r4
 80015ba:	d007      	beq.n	80015cc <sbrk_aligned+0x38>
 80015bc:	1a21      	subs	r1, r4, r0
 80015be:	4628      	mov	r0, r5
 80015c0:	f000 fbb2 	bl	8001d28 <_sbrk_r>
 80015c4:	3001      	adds	r0, #1
 80015c6:	d101      	bne.n	80015cc <sbrk_aligned+0x38>
 80015c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80015cc:	4620      	mov	r0, r4
 80015ce:	bd70      	pop	{r4, r5, r6, pc}
 80015d0:	200000e4 	.word	0x200000e4

080015d4 <_malloc_r>:
 80015d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015d8:	1ccd      	adds	r5, r1, #3
 80015da:	f025 0503 	bic.w	r5, r5, #3
 80015de:	3508      	adds	r5, #8
 80015e0:	2d0c      	cmp	r5, #12
 80015e2:	bf38      	it	cc
 80015e4:	250c      	movcc	r5, #12
 80015e6:	2d00      	cmp	r5, #0
 80015e8:	4607      	mov	r7, r0
 80015ea:	db01      	blt.n	80015f0 <_malloc_r+0x1c>
 80015ec:	42a9      	cmp	r1, r5
 80015ee:	d905      	bls.n	80015fc <_malloc_r+0x28>
 80015f0:	230c      	movs	r3, #12
 80015f2:	2600      	movs	r6, #0
 80015f4:	603b      	str	r3, [r7, #0]
 80015f6:	4630      	mov	r0, r6
 80015f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015fc:	4e2e      	ldr	r6, [pc, #184]	; (80016b8 <_malloc_r+0xe4>)
 80015fe:	f000 fe15 	bl	800222c <__malloc_lock>
 8001602:	6833      	ldr	r3, [r6, #0]
 8001604:	461c      	mov	r4, r3
 8001606:	bb34      	cbnz	r4, 8001656 <_malloc_r+0x82>
 8001608:	4629      	mov	r1, r5
 800160a:	4638      	mov	r0, r7
 800160c:	f7ff ffc2 	bl	8001594 <sbrk_aligned>
 8001610:	1c43      	adds	r3, r0, #1
 8001612:	4604      	mov	r4, r0
 8001614:	d14d      	bne.n	80016b2 <_malloc_r+0xde>
 8001616:	6834      	ldr	r4, [r6, #0]
 8001618:	4626      	mov	r6, r4
 800161a:	2e00      	cmp	r6, #0
 800161c:	d140      	bne.n	80016a0 <_malloc_r+0xcc>
 800161e:	6823      	ldr	r3, [r4, #0]
 8001620:	4631      	mov	r1, r6
 8001622:	4638      	mov	r0, r7
 8001624:	eb04 0803 	add.w	r8, r4, r3
 8001628:	f000 fb7e 	bl	8001d28 <_sbrk_r>
 800162c:	4580      	cmp	r8, r0
 800162e:	d13a      	bne.n	80016a6 <_malloc_r+0xd2>
 8001630:	6821      	ldr	r1, [r4, #0]
 8001632:	3503      	adds	r5, #3
 8001634:	1a6d      	subs	r5, r5, r1
 8001636:	f025 0503 	bic.w	r5, r5, #3
 800163a:	3508      	adds	r5, #8
 800163c:	2d0c      	cmp	r5, #12
 800163e:	bf38      	it	cc
 8001640:	250c      	movcc	r5, #12
 8001642:	4638      	mov	r0, r7
 8001644:	4629      	mov	r1, r5
 8001646:	f7ff ffa5 	bl	8001594 <sbrk_aligned>
 800164a:	3001      	adds	r0, #1
 800164c:	d02b      	beq.n	80016a6 <_malloc_r+0xd2>
 800164e:	6823      	ldr	r3, [r4, #0]
 8001650:	442b      	add	r3, r5
 8001652:	6023      	str	r3, [r4, #0]
 8001654:	e00e      	b.n	8001674 <_malloc_r+0xa0>
 8001656:	6822      	ldr	r2, [r4, #0]
 8001658:	1b52      	subs	r2, r2, r5
 800165a:	d41e      	bmi.n	800169a <_malloc_r+0xc6>
 800165c:	2a0b      	cmp	r2, #11
 800165e:	d916      	bls.n	800168e <_malloc_r+0xba>
 8001660:	1961      	adds	r1, r4, r5
 8001662:	42a3      	cmp	r3, r4
 8001664:	6025      	str	r5, [r4, #0]
 8001666:	bf18      	it	ne
 8001668:	6059      	strne	r1, [r3, #4]
 800166a:	6863      	ldr	r3, [r4, #4]
 800166c:	bf08      	it	eq
 800166e:	6031      	streq	r1, [r6, #0]
 8001670:	5162      	str	r2, [r4, r5]
 8001672:	604b      	str	r3, [r1, #4]
 8001674:	4638      	mov	r0, r7
 8001676:	f104 060b 	add.w	r6, r4, #11
 800167a:	f000 fddd 	bl	8002238 <__malloc_unlock>
 800167e:	f026 0607 	bic.w	r6, r6, #7
 8001682:	1d23      	adds	r3, r4, #4
 8001684:	1af2      	subs	r2, r6, r3
 8001686:	d0b6      	beq.n	80015f6 <_malloc_r+0x22>
 8001688:	1b9b      	subs	r3, r3, r6
 800168a:	50a3      	str	r3, [r4, r2]
 800168c:	e7b3      	b.n	80015f6 <_malloc_r+0x22>
 800168e:	6862      	ldr	r2, [r4, #4]
 8001690:	42a3      	cmp	r3, r4
 8001692:	bf0c      	ite	eq
 8001694:	6032      	streq	r2, [r6, #0]
 8001696:	605a      	strne	r2, [r3, #4]
 8001698:	e7ec      	b.n	8001674 <_malloc_r+0xa0>
 800169a:	4623      	mov	r3, r4
 800169c:	6864      	ldr	r4, [r4, #4]
 800169e:	e7b2      	b.n	8001606 <_malloc_r+0x32>
 80016a0:	4634      	mov	r4, r6
 80016a2:	6876      	ldr	r6, [r6, #4]
 80016a4:	e7b9      	b.n	800161a <_malloc_r+0x46>
 80016a6:	230c      	movs	r3, #12
 80016a8:	4638      	mov	r0, r7
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	f000 fdc4 	bl	8002238 <__malloc_unlock>
 80016b0:	e7a1      	b.n	80015f6 <_malloc_r+0x22>
 80016b2:	6025      	str	r5, [r4, #0]
 80016b4:	e7de      	b.n	8001674 <_malloc_r+0xa0>
 80016b6:	bf00      	nop
 80016b8:	200000e0 	.word	0x200000e0

080016bc <__sfputc_r>:
 80016bc:	6893      	ldr	r3, [r2, #8]
 80016be:	b410      	push	{r4}
 80016c0:	3b01      	subs	r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	6093      	str	r3, [r2, #8]
 80016c6:	da07      	bge.n	80016d8 <__sfputc_r+0x1c>
 80016c8:	6994      	ldr	r4, [r2, #24]
 80016ca:	42a3      	cmp	r3, r4
 80016cc:	db01      	blt.n	80016d2 <__sfputc_r+0x16>
 80016ce:	290a      	cmp	r1, #10
 80016d0:	d102      	bne.n	80016d8 <__sfputc_r+0x1c>
 80016d2:	bc10      	pop	{r4}
 80016d4:	f000 bb7c 	b.w	8001dd0 <__swbuf_r>
 80016d8:	6813      	ldr	r3, [r2, #0]
 80016da:	1c58      	adds	r0, r3, #1
 80016dc:	6010      	str	r0, [r2, #0]
 80016de:	7019      	strb	r1, [r3, #0]
 80016e0:	4608      	mov	r0, r1
 80016e2:	bc10      	pop	{r4}
 80016e4:	4770      	bx	lr

080016e6 <__sfputs_r>:
 80016e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016e8:	4606      	mov	r6, r0
 80016ea:	460f      	mov	r7, r1
 80016ec:	4614      	mov	r4, r2
 80016ee:	18d5      	adds	r5, r2, r3
 80016f0:	42ac      	cmp	r4, r5
 80016f2:	d101      	bne.n	80016f8 <__sfputs_r+0x12>
 80016f4:	2000      	movs	r0, #0
 80016f6:	e007      	b.n	8001708 <__sfputs_r+0x22>
 80016f8:	463a      	mov	r2, r7
 80016fa:	4630      	mov	r0, r6
 80016fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001700:	f7ff ffdc 	bl	80016bc <__sfputc_r>
 8001704:	1c43      	adds	r3, r0, #1
 8001706:	d1f3      	bne.n	80016f0 <__sfputs_r+0xa>
 8001708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800170c <_vfiprintf_r>:
 800170c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001710:	460d      	mov	r5, r1
 8001712:	4614      	mov	r4, r2
 8001714:	4698      	mov	r8, r3
 8001716:	4606      	mov	r6, r0
 8001718:	b09d      	sub	sp, #116	; 0x74
 800171a:	b118      	cbz	r0, 8001724 <_vfiprintf_r+0x18>
 800171c:	6983      	ldr	r3, [r0, #24]
 800171e:	b90b      	cbnz	r3, 8001724 <_vfiprintf_r+0x18>
 8001720:	f7ff fe36 	bl	8001390 <__sinit>
 8001724:	4b89      	ldr	r3, [pc, #548]	; (800194c <_vfiprintf_r+0x240>)
 8001726:	429d      	cmp	r5, r3
 8001728:	d11b      	bne.n	8001762 <_vfiprintf_r+0x56>
 800172a:	6875      	ldr	r5, [r6, #4]
 800172c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800172e:	07d9      	lsls	r1, r3, #31
 8001730:	d405      	bmi.n	800173e <_vfiprintf_r+0x32>
 8001732:	89ab      	ldrh	r3, [r5, #12]
 8001734:	059a      	lsls	r2, r3, #22
 8001736:	d402      	bmi.n	800173e <_vfiprintf_r+0x32>
 8001738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800173a:	f7ff fed9 	bl	80014f0 <__retarget_lock_acquire_recursive>
 800173e:	89ab      	ldrh	r3, [r5, #12]
 8001740:	071b      	lsls	r3, r3, #28
 8001742:	d501      	bpl.n	8001748 <_vfiprintf_r+0x3c>
 8001744:	692b      	ldr	r3, [r5, #16]
 8001746:	b9eb      	cbnz	r3, 8001784 <_vfiprintf_r+0x78>
 8001748:	4629      	mov	r1, r5
 800174a:	4630      	mov	r0, r6
 800174c:	f000 fba4 	bl	8001e98 <__swsetup_r>
 8001750:	b1c0      	cbz	r0, 8001784 <_vfiprintf_r+0x78>
 8001752:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001754:	07dc      	lsls	r4, r3, #31
 8001756:	d50e      	bpl.n	8001776 <_vfiprintf_r+0x6a>
 8001758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800175c:	b01d      	add	sp, #116	; 0x74
 800175e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001762:	4b7b      	ldr	r3, [pc, #492]	; (8001950 <_vfiprintf_r+0x244>)
 8001764:	429d      	cmp	r5, r3
 8001766:	d101      	bne.n	800176c <_vfiprintf_r+0x60>
 8001768:	68b5      	ldr	r5, [r6, #8]
 800176a:	e7df      	b.n	800172c <_vfiprintf_r+0x20>
 800176c:	4b79      	ldr	r3, [pc, #484]	; (8001954 <_vfiprintf_r+0x248>)
 800176e:	429d      	cmp	r5, r3
 8001770:	bf08      	it	eq
 8001772:	68f5      	ldreq	r5, [r6, #12]
 8001774:	e7da      	b.n	800172c <_vfiprintf_r+0x20>
 8001776:	89ab      	ldrh	r3, [r5, #12]
 8001778:	0598      	lsls	r0, r3, #22
 800177a:	d4ed      	bmi.n	8001758 <_vfiprintf_r+0x4c>
 800177c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800177e:	f7ff feb8 	bl	80014f2 <__retarget_lock_release_recursive>
 8001782:	e7e9      	b.n	8001758 <_vfiprintf_r+0x4c>
 8001784:	2300      	movs	r3, #0
 8001786:	9309      	str	r3, [sp, #36]	; 0x24
 8001788:	2320      	movs	r3, #32
 800178a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800178e:	2330      	movs	r3, #48	; 0x30
 8001790:	f04f 0901 	mov.w	r9, #1
 8001794:	f8cd 800c 	str.w	r8, [sp, #12]
 8001798:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8001958 <_vfiprintf_r+0x24c>
 800179c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80017a0:	4623      	mov	r3, r4
 80017a2:	469a      	mov	sl, r3
 80017a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80017a8:	b10a      	cbz	r2, 80017ae <_vfiprintf_r+0xa2>
 80017aa:	2a25      	cmp	r2, #37	; 0x25
 80017ac:	d1f9      	bne.n	80017a2 <_vfiprintf_r+0x96>
 80017ae:	ebba 0b04 	subs.w	fp, sl, r4
 80017b2:	d00b      	beq.n	80017cc <_vfiprintf_r+0xc0>
 80017b4:	465b      	mov	r3, fp
 80017b6:	4622      	mov	r2, r4
 80017b8:	4629      	mov	r1, r5
 80017ba:	4630      	mov	r0, r6
 80017bc:	f7ff ff93 	bl	80016e6 <__sfputs_r>
 80017c0:	3001      	adds	r0, #1
 80017c2:	f000 80aa 	beq.w	800191a <_vfiprintf_r+0x20e>
 80017c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80017c8:	445a      	add	r2, fp
 80017ca:	9209      	str	r2, [sp, #36]	; 0x24
 80017cc:	f89a 3000 	ldrb.w	r3, [sl]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f000 80a2 	beq.w	800191a <_vfiprintf_r+0x20e>
 80017d6:	2300      	movs	r3, #0
 80017d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80017e0:	f10a 0a01 	add.w	sl, sl, #1
 80017e4:	9304      	str	r3, [sp, #16]
 80017e6:	9307      	str	r3, [sp, #28]
 80017e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80017ec:	931a      	str	r3, [sp, #104]	; 0x68
 80017ee:	4654      	mov	r4, sl
 80017f0:	2205      	movs	r2, #5
 80017f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017f6:	4858      	ldr	r0, [pc, #352]	; (8001958 <_vfiprintf_r+0x24c>)
 80017f8:	f000 fd0a 	bl	8002210 <memchr>
 80017fc:	9a04      	ldr	r2, [sp, #16]
 80017fe:	b9d8      	cbnz	r0, 8001838 <_vfiprintf_r+0x12c>
 8001800:	06d1      	lsls	r1, r2, #27
 8001802:	bf44      	itt	mi
 8001804:	2320      	movmi	r3, #32
 8001806:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800180a:	0713      	lsls	r3, r2, #28
 800180c:	bf44      	itt	mi
 800180e:	232b      	movmi	r3, #43	; 0x2b
 8001810:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001814:	f89a 3000 	ldrb.w	r3, [sl]
 8001818:	2b2a      	cmp	r3, #42	; 0x2a
 800181a:	d015      	beq.n	8001848 <_vfiprintf_r+0x13c>
 800181c:	4654      	mov	r4, sl
 800181e:	2000      	movs	r0, #0
 8001820:	f04f 0c0a 	mov.w	ip, #10
 8001824:	9a07      	ldr	r2, [sp, #28]
 8001826:	4621      	mov	r1, r4
 8001828:	f811 3b01 	ldrb.w	r3, [r1], #1
 800182c:	3b30      	subs	r3, #48	; 0x30
 800182e:	2b09      	cmp	r3, #9
 8001830:	d94e      	bls.n	80018d0 <_vfiprintf_r+0x1c4>
 8001832:	b1b0      	cbz	r0, 8001862 <_vfiprintf_r+0x156>
 8001834:	9207      	str	r2, [sp, #28]
 8001836:	e014      	b.n	8001862 <_vfiprintf_r+0x156>
 8001838:	eba0 0308 	sub.w	r3, r0, r8
 800183c:	fa09 f303 	lsl.w	r3, r9, r3
 8001840:	4313      	orrs	r3, r2
 8001842:	46a2      	mov	sl, r4
 8001844:	9304      	str	r3, [sp, #16]
 8001846:	e7d2      	b.n	80017ee <_vfiprintf_r+0xe2>
 8001848:	9b03      	ldr	r3, [sp, #12]
 800184a:	1d19      	adds	r1, r3, #4
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	9103      	str	r1, [sp, #12]
 8001850:	2b00      	cmp	r3, #0
 8001852:	bfbb      	ittet	lt
 8001854:	425b      	neglt	r3, r3
 8001856:	f042 0202 	orrlt.w	r2, r2, #2
 800185a:	9307      	strge	r3, [sp, #28]
 800185c:	9307      	strlt	r3, [sp, #28]
 800185e:	bfb8      	it	lt
 8001860:	9204      	strlt	r2, [sp, #16]
 8001862:	7823      	ldrb	r3, [r4, #0]
 8001864:	2b2e      	cmp	r3, #46	; 0x2e
 8001866:	d10c      	bne.n	8001882 <_vfiprintf_r+0x176>
 8001868:	7863      	ldrb	r3, [r4, #1]
 800186a:	2b2a      	cmp	r3, #42	; 0x2a
 800186c:	d135      	bne.n	80018da <_vfiprintf_r+0x1ce>
 800186e:	9b03      	ldr	r3, [sp, #12]
 8001870:	3402      	adds	r4, #2
 8001872:	1d1a      	adds	r2, r3, #4
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	9203      	str	r2, [sp, #12]
 8001878:	2b00      	cmp	r3, #0
 800187a:	bfb8      	it	lt
 800187c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001880:	9305      	str	r3, [sp, #20]
 8001882:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800195c <_vfiprintf_r+0x250>
 8001886:	2203      	movs	r2, #3
 8001888:	4650      	mov	r0, sl
 800188a:	7821      	ldrb	r1, [r4, #0]
 800188c:	f000 fcc0 	bl	8002210 <memchr>
 8001890:	b140      	cbz	r0, 80018a4 <_vfiprintf_r+0x198>
 8001892:	2340      	movs	r3, #64	; 0x40
 8001894:	eba0 000a 	sub.w	r0, r0, sl
 8001898:	fa03 f000 	lsl.w	r0, r3, r0
 800189c:	9b04      	ldr	r3, [sp, #16]
 800189e:	3401      	adds	r4, #1
 80018a0:	4303      	orrs	r3, r0
 80018a2:	9304      	str	r3, [sp, #16]
 80018a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018a8:	2206      	movs	r2, #6
 80018aa:	482d      	ldr	r0, [pc, #180]	; (8001960 <_vfiprintf_r+0x254>)
 80018ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80018b0:	f000 fcae 	bl	8002210 <memchr>
 80018b4:	2800      	cmp	r0, #0
 80018b6:	d03f      	beq.n	8001938 <_vfiprintf_r+0x22c>
 80018b8:	4b2a      	ldr	r3, [pc, #168]	; (8001964 <_vfiprintf_r+0x258>)
 80018ba:	bb1b      	cbnz	r3, 8001904 <_vfiprintf_r+0x1f8>
 80018bc:	9b03      	ldr	r3, [sp, #12]
 80018be:	3307      	adds	r3, #7
 80018c0:	f023 0307 	bic.w	r3, r3, #7
 80018c4:	3308      	adds	r3, #8
 80018c6:	9303      	str	r3, [sp, #12]
 80018c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018ca:	443b      	add	r3, r7
 80018cc:	9309      	str	r3, [sp, #36]	; 0x24
 80018ce:	e767      	b.n	80017a0 <_vfiprintf_r+0x94>
 80018d0:	460c      	mov	r4, r1
 80018d2:	2001      	movs	r0, #1
 80018d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80018d8:	e7a5      	b.n	8001826 <_vfiprintf_r+0x11a>
 80018da:	2300      	movs	r3, #0
 80018dc:	f04f 0c0a 	mov.w	ip, #10
 80018e0:	4619      	mov	r1, r3
 80018e2:	3401      	adds	r4, #1
 80018e4:	9305      	str	r3, [sp, #20]
 80018e6:	4620      	mov	r0, r4
 80018e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80018ec:	3a30      	subs	r2, #48	; 0x30
 80018ee:	2a09      	cmp	r2, #9
 80018f0:	d903      	bls.n	80018fa <_vfiprintf_r+0x1ee>
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0c5      	beq.n	8001882 <_vfiprintf_r+0x176>
 80018f6:	9105      	str	r1, [sp, #20]
 80018f8:	e7c3      	b.n	8001882 <_vfiprintf_r+0x176>
 80018fa:	4604      	mov	r4, r0
 80018fc:	2301      	movs	r3, #1
 80018fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8001902:	e7f0      	b.n	80018e6 <_vfiprintf_r+0x1da>
 8001904:	ab03      	add	r3, sp, #12
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	462a      	mov	r2, r5
 800190a:	4630      	mov	r0, r6
 800190c:	4b16      	ldr	r3, [pc, #88]	; (8001968 <_vfiprintf_r+0x25c>)
 800190e:	a904      	add	r1, sp, #16
 8001910:	f3af 8000 	nop.w
 8001914:	4607      	mov	r7, r0
 8001916:	1c78      	adds	r0, r7, #1
 8001918:	d1d6      	bne.n	80018c8 <_vfiprintf_r+0x1bc>
 800191a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800191c:	07d9      	lsls	r1, r3, #31
 800191e:	d405      	bmi.n	800192c <_vfiprintf_r+0x220>
 8001920:	89ab      	ldrh	r3, [r5, #12]
 8001922:	059a      	lsls	r2, r3, #22
 8001924:	d402      	bmi.n	800192c <_vfiprintf_r+0x220>
 8001926:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001928:	f7ff fde3 	bl	80014f2 <__retarget_lock_release_recursive>
 800192c:	89ab      	ldrh	r3, [r5, #12]
 800192e:	065b      	lsls	r3, r3, #25
 8001930:	f53f af12 	bmi.w	8001758 <_vfiprintf_r+0x4c>
 8001934:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001936:	e711      	b.n	800175c <_vfiprintf_r+0x50>
 8001938:	ab03      	add	r3, sp, #12
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	462a      	mov	r2, r5
 800193e:	4630      	mov	r0, r6
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <_vfiprintf_r+0x25c>)
 8001942:	a904      	add	r1, sp, #16
 8001944:	f000 f882 	bl	8001a4c <_printf_i>
 8001948:	e7e4      	b.n	8001914 <_vfiprintf_r+0x208>
 800194a:	bf00      	nop
 800194c:	0800249c 	.word	0x0800249c
 8001950:	080024bc 	.word	0x080024bc
 8001954:	0800247c 	.word	0x0800247c
 8001958:	080024dc 	.word	0x080024dc
 800195c:	080024e2 	.word	0x080024e2
 8001960:	080024e6 	.word	0x080024e6
 8001964:	00000000 	.word	0x00000000
 8001968:	080016e7 	.word	0x080016e7

0800196c <_printf_common>:
 800196c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001970:	4616      	mov	r6, r2
 8001972:	4699      	mov	r9, r3
 8001974:	688a      	ldr	r2, [r1, #8]
 8001976:	690b      	ldr	r3, [r1, #16]
 8001978:	4607      	mov	r7, r0
 800197a:	4293      	cmp	r3, r2
 800197c:	bfb8      	it	lt
 800197e:	4613      	movlt	r3, r2
 8001980:	6033      	str	r3, [r6, #0]
 8001982:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001986:	460c      	mov	r4, r1
 8001988:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800198c:	b10a      	cbz	r2, 8001992 <_printf_common+0x26>
 800198e:	3301      	adds	r3, #1
 8001990:	6033      	str	r3, [r6, #0]
 8001992:	6823      	ldr	r3, [r4, #0]
 8001994:	0699      	lsls	r1, r3, #26
 8001996:	bf42      	ittt	mi
 8001998:	6833      	ldrmi	r3, [r6, #0]
 800199a:	3302      	addmi	r3, #2
 800199c:	6033      	strmi	r3, [r6, #0]
 800199e:	6825      	ldr	r5, [r4, #0]
 80019a0:	f015 0506 	ands.w	r5, r5, #6
 80019a4:	d106      	bne.n	80019b4 <_printf_common+0x48>
 80019a6:	f104 0a19 	add.w	sl, r4, #25
 80019aa:	68e3      	ldr	r3, [r4, #12]
 80019ac:	6832      	ldr	r2, [r6, #0]
 80019ae:	1a9b      	subs	r3, r3, r2
 80019b0:	42ab      	cmp	r3, r5
 80019b2:	dc28      	bgt.n	8001a06 <_printf_common+0x9a>
 80019b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80019b8:	1e13      	subs	r3, r2, #0
 80019ba:	6822      	ldr	r2, [r4, #0]
 80019bc:	bf18      	it	ne
 80019be:	2301      	movne	r3, #1
 80019c0:	0692      	lsls	r2, r2, #26
 80019c2:	d42d      	bmi.n	8001a20 <_printf_common+0xb4>
 80019c4:	4649      	mov	r1, r9
 80019c6:	4638      	mov	r0, r7
 80019c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80019cc:	47c0      	blx	r8
 80019ce:	3001      	adds	r0, #1
 80019d0:	d020      	beq.n	8001a14 <_printf_common+0xa8>
 80019d2:	6823      	ldr	r3, [r4, #0]
 80019d4:	68e5      	ldr	r5, [r4, #12]
 80019d6:	f003 0306 	and.w	r3, r3, #6
 80019da:	2b04      	cmp	r3, #4
 80019dc:	bf18      	it	ne
 80019de:	2500      	movne	r5, #0
 80019e0:	6832      	ldr	r2, [r6, #0]
 80019e2:	f04f 0600 	mov.w	r6, #0
 80019e6:	68a3      	ldr	r3, [r4, #8]
 80019e8:	bf08      	it	eq
 80019ea:	1aad      	subeq	r5, r5, r2
 80019ec:	6922      	ldr	r2, [r4, #16]
 80019ee:	bf08      	it	eq
 80019f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80019f4:	4293      	cmp	r3, r2
 80019f6:	bfc4      	itt	gt
 80019f8:	1a9b      	subgt	r3, r3, r2
 80019fa:	18ed      	addgt	r5, r5, r3
 80019fc:	341a      	adds	r4, #26
 80019fe:	42b5      	cmp	r5, r6
 8001a00:	d11a      	bne.n	8001a38 <_printf_common+0xcc>
 8001a02:	2000      	movs	r0, #0
 8001a04:	e008      	b.n	8001a18 <_printf_common+0xac>
 8001a06:	2301      	movs	r3, #1
 8001a08:	4652      	mov	r2, sl
 8001a0a:	4649      	mov	r1, r9
 8001a0c:	4638      	mov	r0, r7
 8001a0e:	47c0      	blx	r8
 8001a10:	3001      	adds	r0, #1
 8001a12:	d103      	bne.n	8001a1c <_printf_common+0xb0>
 8001a14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a1c:	3501      	adds	r5, #1
 8001a1e:	e7c4      	b.n	80019aa <_printf_common+0x3e>
 8001a20:	2030      	movs	r0, #48	; 0x30
 8001a22:	18e1      	adds	r1, r4, r3
 8001a24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001a28:	1c5a      	adds	r2, r3, #1
 8001a2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001a2e:	4422      	add	r2, r4
 8001a30:	3302      	adds	r3, #2
 8001a32:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001a36:	e7c5      	b.n	80019c4 <_printf_common+0x58>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	4622      	mov	r2, r4
 8001a3c:	4649      	mov	r1, r9
 8001a3e:	4638      	mov	r0, r7
 8001a40:	47c0      	blx	r8
 8001a42:	3001      	adds	r0, #1
 8001a44:	d0e6      	beq.n	8001a14 <_printf_common+0xa8>
 8001a46:	3601      	adds	r6, #1
 8001a48:	e7d9      	b.n	80019fe <_printf_common+0x92>
	...

08001a4c <_printf_i>:
 8001a4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001a50:	7e0f      	ldrb	r7, [r1, #24]
 8001a52:	4691      	mov	r9, r2
 8001a54:	2f78      	cmp	r7, #120	; 0x78
 8001a56:	4680      	mov	r8, r0
 8001a58:	460c      	mov	r4, r1
 8001a5a:	469a      	mov	sl, r3
 8001a5c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001a5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001a62:	d807      	bhi.n	8001a74 <_printf_i+0x28>
 8001a64:	2f62      	cmp	r7, #98	; 0x62
 8001a66:	d80a      	bhi.n	8001a7e <_printf_i+0x32>
 8001a68:	2f00      	cmp	r7, #0
 8001a6a:	f000 80d9 	beq.w	8001c20 <_printf_i+0x1d4>
 8001a6e:	2f58      	cmp	r7, #88	; 0x58
 8001a70:	f000 80a4 	beq.w	8001bbc <_printf_i+0x170>
 8001a74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001a7c:	e03a      	b.n	8001af4 <_printf_i+0xa8>
 8001a7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001a82:	2b15      	cmp	r3, #21
 8001a84:	d8f6      	bhi.n	8001a74 <_printf_i+0x28>
 8001a86:	a101      	add	r1, pc, #4	; (adr r1, 8001a8c <_printf_i+0x40>)
 8001a88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001a8c:	08001ae5 	.word	0x08001ae5
 8001a90:	08001af9 	.word	0x08001af9
 8001a94:	08001a75 	.word	0x08001a75
 8001a98:	08001a75 	.word	0x08001a75
 8001a9c:	08001a75 	.word	0x08001a75
 8001aa0:	08001a75 	.word	0x08001a75
 8001aa4:	08001af9 	.word	0x08001af9
 8001aa8:	08001a75 	.word	0x08001a75
 8001aac:	08001a75 	.word	0x08001a75
 8001ab0:	08001a75 	.word	0x08001a75
 8001ab4:	08001a75 	.word	0x08001a75
 8001ab8:	08001c07 	.word	0x08001c07
 8001abc:	08001b29 	.word	0x08001b29
 8001ac0:	08001be9 	.word	0x08001be9
 8001ac4:	08001a75 	.word	0x08001a75
 8001ac8:	08001a75 	.word	0x08001a75
 8001acc:	08001c29 	.word	0x08001c29
 8001ad0:	08001a75 	.word	0x08001a75
 8001ad4:	08001b29 	.word	0x08001b29
 8001ad8:	08001a75 	.word	0x08001a75
 8001adc:	08001a75 	.word	0x08001a75
 8001ae0:	08001bf1 	.word	0x08001bf1
 8001ae4:	682b      	ldr	r3, [r5, #0]
 8001ae6:	1d1a      	adds	r2, r3, #4
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	602a      	str	r2, [r5, #0]
 8001aec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001af0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001af4:	2301      	movs	r3, #1
 8001af6:	e0a4      	b.n	8001c42 <_printf_i+0x1f6>
 8001af8:	6820      	ldr	r0, [r4, #0]
 8001afa:	6829      	ldr	r1, [r5, #0]
 8001afc:	0606      	lsls	r6, r0, #24
 8001afe:	f101 0304 	add.w	r3, r1, #4
 8001b02:	d50a      	bpl.n	8001b1a <_printf_i+0xce>
 8001b04:	680e      	ldr	r6, [r1, #0]
 8001b06:	602b      	str	r3, [r5, #0]
 8001b08:	2e00      	cmp	r6, #0
 8001b0a:	da03      	bge.n	8001b14 <_printf_i+0xc8>
 8001b0c:	232d      	movs	r3, #45	; 0x2d
 8001b0e:	4276      	negs	r6, r6
 8001b10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b14:	230a      	movs	r3, #10
 8001b16:	485e      	ldr	r0, [pc, #376]	; (8001c90 <_printf_i+0x244>)
 8001b18:	e019      	b.n	8001b4e <_printf_i+0x102>
 8001b1a:	680e      	ldr	r6, [r1, #0]
 8001b1c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001b20:	602b      	str	r3, [r5, #0]
 8001b22:	bf18      	it	ne
 8001b24:	b236      	sxthne	r6, r6
 8001b26:	e7ef      	b.n	8001b08 <_printf_i+0xbc>
 8001b28:	682b      	ldr	r3, [r5, #0]
 8001b2a:	6820      	ldr	r0, [r4, #0]
 8001b2c:	1d19      	adds	r1, r3, #4
 8001b2e:	6029      	str	r1, [r5, #0]
 8001b30:	0601      	lsls	r1, r0, #24
 8001b32:	d501      	bpl.n	8001b38 <_printf_i+0xec>
 8001b34:	681e      	ldr	r6, [r3, #0]
 8001b36:	e002      	b.n	8001b3e <_printf_i+0xf2>
 8001b38:	0646      	lsls	r6, r0, #25
 8001b3a:	d5fb      	bpl.n	8001b34 <_printf_i+0xe8>
 8001b3c:	881e      	ldrh	r6, [r3, #0]
 8001b3e:	2f6f      	cmp	r7, #111	; 0x6f
 8001b40:	bf0c      	ite	eq
 8001b42:	2308      	moveq	r3, #8
 8001b44:	230a      	movne	r3, #10
 8001b46:	4852      	ldr	r0, [pc, #328]	; (8001c90 <_printf_i+0x244>)
 8001b48:	2100      	movs	r1, #0
 8001b4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001b4e:	6865      	ldr	r5, [r4, #4]
 8001b50:	2d00      	cmp	r5, #0
 8001b52:	bfa8      	it	ge
 8001b54:	6821      	ldrge	r1, [r4, #0]
 8001b56:	60a5      	str	r5, [r4, #8]
 8001b58:	bfa4      	itt	ge
 8001b5a:	f021 0104 	bicge.w	r1, r1, #4
 8001b5e:	6021      	strge	r1, [r4, #0]
 8001b60:	b90e      	cbnz	r6, 8001b66 <_printf_i+0x11a>
 8001b62:	2d00      	cmp	r5, #0
 8001b64:	d04d      	beq.n	8001c02 <_printf_i+0x1b6>
 8001b66:	4615      	mov	r5, r2
 8001b68:	fbb6 f1f3 	udiv	r1, r6, r3
 8001b6c:	fb03 6711 	mls	r7, r3, r1, r6
 8001b70:	5dc7      	ldrb	r7, [r0, r7]
 8001b72:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001b76:	4637      	mov	r7, r6
 8001b78:	42bb      	cmp	r3, r7
 8001b7a:	460e      	mov	r6, r1
 8001b7c:	d9f4      	bls.n	8001b68 <_printf_i+0x11c>
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d10b      	bne.n	8001b9a <_printf_i+0x14e>
 8001b82:	6823      	ldr	r3, [r4, #0]
 8001b84:	07de      	lsls	r6, r3, #31
 8001b86:	d508      	bpl.n	8001b9a <_printf_i+0x14e>
 8001b88:	6923      	ldr	r3, [r4, #16]
 8001b8a:	6861      	ldr	r1, [r4, #4]
 8001b8c:	4299      	cmp	r1, r3
 8001b8e:	bfde      	ittt	le
 8001b90:	2330      	movle	r3, #48	; 0x30
 8001b92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001b96:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001b9a:	1b52      	subs	r2, r2, r5
 8001b9c:	6122      	str	r2, [r4, #16]
 8001b9e:	464b      	mov	r3, r9
 8001ba0:	4621      	mov	r1, r4
 8001ba2:	4640      	mov	r0, r8
 8001ba4:	f8cd a000 	str.w	sl, [sp]
 8001ba8:	aa03      	add	r2, sp, #12
 8001baa:	f7ff fedf 	bl	800196c <_printf_common>
 8001bae:	3001      	adds	r0, #1
 8001bb0:	d14c      	bne.n	8001c4c <_printf_i+0x200>
 8001bb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bb6:	b004      	add	sp, #16
 8001bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bbc:	4834      	ldr	r0, [pc, #208]	; (8001c90 <_printf_i+0x244>)
 8001bbe:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001bc2:	6829      	ldr	r1, [r5, #0]
 8001bc4:	6823      	ldr	r3, [r4, #0]
 8001bc6:	f851 6b04 	ldr.w	r6, [r1], #4
 8001bca:	6029      	str	r1, [r5, #0]
 8001bcc:	061d      	lsls	r5, r3, #24
 8001bce:	d514      	bpl.n	8001bfa <_printf_i+0x1ae>
 8001bd0:	07df      	lsls	r7, r3, #31
 8001bd2:	bf44      	itt	mi
 8001bd4:	f043 0320 	orrmi.w	r3, r3, #32
 8001bd8:	6023      	strmi	r3, [r4, #0]
 8001bda:	b91e      	cbnz	r6, 8001be4 <_printf_i+0x198>
 8001bdc:	6823      	ldr	r3, [r4, #0]
 8001bde:	f023 0320 	bic.w	r3, r3, #32
 8001be2:	6023      	str	r3, [r4, #0]
 8001be4:	2310      	movs	r3, #16
 8001be6:	e7af      	b.n	8001b48 <_printf_i+0xfc>
 8001be8:	6823      	ldr	r3, [r4, #0]
 8001bea:	f043 0320 	orr.w	r3, r3, #32
 8001bee:	6023      	str	r3, [r4, #0]
 8001bf0:	2378      	movs	r3, #120	; 0x78
 8001bf2:	4828      	ldr	r0, [pc, #160]	; (8001c94 <_printf_i+0x248>)
 8001bf4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001bf8:	e7e3      	b.n	8001bc2 <_printf_i+0x176>
 8001bfa:	0659      	lsls	r1, r3, #25
 8001bfc:	bf48      	it	mi
 8001bfe:	b2b6      	uxthmi	r6, r6
 8001c00:	e7e6      	b.n	8001bd0 <_printf_i+0x184>
 8001c02:	4615      	mov	r5, r2
 8001c04:	e7bb      	b.n	8001b7e <_printf_i+0x132>
 8001c06:	682b      	ldr	r3, [r5, #0]
 8001c08:	6826      	ldr	r6, [r4, #0]
 8001c0a:	1d18      	adds	r0, r3, #4
 8001c0c:	6961      	ldr	r1, [r4, #20]
 8001c0e:	6028      	str	r0, [r5, #0]
 8001c10:	0635      	lsls	r5, r6, #24
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	d501      	bpl.n	8001c1a <_printf_i+0x1ce>
 8001c16:	6019      	str	r1, [r3, #0]
 8001c18:	e002      	b.n	8001c20 <_printf_i+0x1d4>
 8001c1a:	0670      	lsls	r0, r6, #25
 8001c1c:	d5fb      	bpl.n	8001c16 <_printf_i+0x1ca>
 8001c1e:	8019      	strh	r1, [r3, #0]
 8001c20:	2300      	movs	r3, #0
 8001c22:	4615      	mov	r5, r2
 8001c24:	6123      	str	r3, [r4, #16]
 8001c26:	e7ba      	b.n	8001b9e <_printf_i+0x152>
 8001c28:	682b      	ldr	r3, [r5, #0]
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	1d1a      	adds	r2, r3, #4
 8001c2e:	602a      	str	r2, [r5, #0]
 8001c30:	681d      	ldr	r5, [r3, #0]
 8001c32:	6862      	ldr	r2, [r4, #4]
 8001c34:	4628      	mov	r0, r5
 8001c36:	f000 faeb 	bl	8002210 <memchr>
 8001c3a:	b108      	cbz	r0, 8001c40 <_printf_i+0x1f4>
 8001c3c:	1b40      	subs	r0, r0, r5
 8001c3e:	6060      	str	r0, [r4, #4]
 8001c40:	6863      	ldr	r3, [r4, #4]
 8001c42:	6123      	str	r3, [r4, #16]
 8001c44:	2300      	movs	r3, #0
 8001c46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c4a:	e7a8      	b.n	8001b9e <_printf_i+0x152>
 8001c4c:	462a      	mov	r2, r5
 8001c4e:	4649      	mov	r1, r9
 8001c50:	4640      	mov	r0, r8
 8001c52:	6923      	ldr	r3, [r4, #16]
 8001c54:	47d0      	blx	sl
 8001c56:	3001      	adds	r0, #1
 8001c58:	d0ab      	beq.n	8001bb2 <_printf_i+0x166>
 8001c5a:	6823      	ldr	r3, [r4, #0]
 8001c5c:	079b      	lsls	r3, r3, #30
 8001c5e:	d413      	bmi.n	8001c88 <_printf_i+0x23c>
 8001c60:	68e0      	ldr	r0, [r4, #12]
 8001c62:	9b03      	ldr	r3, [sp, #12]
 8001c64:	4298      	cmp	r0, r3
 8001c66:	bfb8      	it	lt
 8001c68:	4618      	movlt	r0, r3
 8001c6a:	e7a4      	b.n	8001bb6 <_printf_i+0x16a>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	4632      	mov	r2, r6
 8001c70:	4649      	mov	r1, r9
 8001c72:	4640      	mov	r0, r8
 8001c74:	47d0      	blx	sl
 8001c76:	3001      	adds	r0, #1
 8001c78:	d09b      	beq.n	8001bb2 <_printf_i+0x166>
 8001c7a:	3501      	adds	r5, #1
 8001c7c:	68e3      	ldr	r3, [r4, #12]
 8001c7e:	9903      	ldr	r1, [sp, #12]
 8001c80:	1a5b      	subs	r3, r3, r1
 8001c82:	42ab      	cmp	r3, r5
 8001c84:	dcf2      	bgt.n	8001c6c <_printf_i+0x220>
 8001c86:	e7eb      	b.n	8001c60 <_printf_i+0x214>
 8001c88:	2500      	movs	r5, #0
 8001c8a:	f104 0619 	add.w	r6, r4, #25
 8001c8e:	e7f5      	b.n	8001c7c <_printf_i+0x230>
 8001c90:	080024ed 	.word	0x080024ed
 8001c94:	080024fe 	.word	0x080024fe

08001c98 <_putc_r>:
 8001c98:	b570      	push	{r4, r5, r6, lr}
 8001c9a:	460d      	mov	r5, r1
 8001c9c:	4614      	mov	r4, r2
 8001c9e:	4606      	mov	r6, r0
 8001ca0:	b118      	cbz	r0, 8001caa <_putc_r+0x12>
 8001ca2:	6983      	ldr	r3, [r0, #24]
 8001ca4:	b90b      	cbnz	r3, 8001caa <_putc_r+0x12>
 8001ca6:	f7ff fb73 	bl	8001390 <__sinit>
 8001caa:	4b1c      	ldr	r3, [pc, #112]	; (8001d1c <_putc_r+0x84>)
 8001cac:	429c      	cmp	r4, r3
 8001cae:	d124      	bne.n	8001cfa <_putc_r+0x62>
 8001cb0:	6874      	ldr	r4, [r6, #4]
 8001cb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001cb4:	07d8      	lsls	r0, r3, #31
 8001cb6:	d405      	bmi.n	8001cc4 <_putc_r+0x2c>
 8001cb8:	89a3      	ldrh	r3, [r4, #12]
 8001cba:	0599      	lsls	r1, r3, #22
 8001cbc:	d402      	bmi.n	8001cc4 <_putc_r+0x2c>
 8001cbe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001cc0:	f7ff fc16 	bl	80014f0 <__retarget_lock_acquire_recursive>
 8001cc4:	68a3      	ldr	r3, [r4, #8]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	60a3      	str	r3, [r4, #8]
 8001ccc:	da05      	bge.n	8001cda <_putc_r+0x42>
 8001cce:	69a2      	ldr	r2, [r4, #24]
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	db1c      	blt.n	8001d0e <_putc_r+0x76>
 8001cd4:	b2eb      	uxtb	r3, r5
 8001cd6:	2b0a      	cmp	r3, #10
 8001cd8:	d019      	beq.n	8001d0e <_putc_r+0x76>
 8001cda:	6823      	ldr	r3, [r4, #0]
 8001cdc:	1c5a      	adds	r2, r3, #1
 8001cde:	6022      	str	r2, [r4, #0]
 8001ce0:	701d      	strb	r5, [r3, #0]
 8001ce2:	b2ed      	uxtb	r5, r5
 8001ce4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ce6:	07da      	lsls	r2, r3, #31
 8001ce8:	d405      	bmi.n	8001cf6 <_putc_r+0x5e>
 8001cea:	89a3      	ldrh	r3, [r4, #12]
 8001cec:	059b      	lsls	r3, r3, #22
 8001cee:	d402      	bmi.n	8001cf6 <_putc_r+0x5e>
 8001cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001cf2:	f7ff fbfe 	bl	80014f2 <__retarget_lock_release_recursive>
 8001cf6:	4628      	mov	r0, r5
 8001cf8:	bd70      	pop	{r4, r5, r6, pc}
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <_putc_r+0x88>)
 8001cfc:	429c      	cmp	r4, r3
 8001cfe:	d101      	bne.n	8001d04 <_putc_r+0x6c>
 8001d00:	68b4      	ldr	r4, [r6, #8]
 8001d02:	e7d6      	b.n	8001cb2 <_putc_r+0x1a>
 8001d04:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <_putc_r+0x8c>)
 8001d06:	429c      	cmp	r4, r3
 8001d08:	bf08      	it	eq
 8001d0a:	68f4      	ldreq	r4, [r6, #12]
 8001d0c:	e7d1      	b.n	8001cb2 <_putc_r+0x1a>
 8001d0e:	4629      	mov	r1, r5
 8001d10:	4622      	mov	r2, r4
 8001d12:	4630      	mov	r0, r6
 8001d14:	f000 f85c 	bl	8001dd0 <__swbuf_r>
 8001d18:	4605      	mov	r5, r0
 8001d1a:	e7e3      	b.n	8001ce4 <_putc_r+0x4c>
 8001d1c:	0800249c 	.word	0x0800249c
 8001d20:	080024bc 	.word	0x080024bc
 8001d24:	0800247c 	.word	0x0800247c

08001d28 <_sbrk_r>:
 8001d28:	b538      	push	{r3, r4, r5, lr}
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	4d05      	ldr	r5, [pc, #20]	; (8001d44 <_sbrk_r+0x1c>)
 8001d2e:	4604      	mov	r4, r0
 8001d30:	4608      	mov	r0, r1
 8001d32:	602b      	str	r3, [r5, #0]
 8001d34:	f7fe fc8a 	bl	800064c <_sbrk>
 8001d38:	1c43      	adds	r3, r0, #1
 8001d3a:	d102      	bne.n	8001d42 <_sbrk_r+0x1a>
 8001d3c:	682b      	ldr	r3, [r5, #0]
 8001d3e:	b103      	cbz	r3, 8001d42 <_sbrk_r+0x1a>
 8001d40:	6023      	str	r3, [r4, #0]
 8001d42:	bd38      	pop	{r3, r4, r5, pc}
 8001d44:	200000e8 	.word	0x200000e8

08001d48 <__sread>:
 8001d48:	b510      	push	{r4, lr}
 8001d4a:	460c      	mov	r4, r1
 8001d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d50:	f000 fa78 	bl	8002244 <_read_r>
 8001d54:	2800      	cmp	r0, #0
 8001d56:	bfab      	itete	ge
 8001d58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001d5a:	89a3      	ldrhlt	r3, [r4, #12]
 8001d5c:	181b      	addge	r3, r3, r0
 8001d5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001d62:	bfac      	ite	ge
 8001d64:	6563      	strge	r3, [r4, #84]	; 0x54
 8001d66:	81a3      	strhlt	r3, [r4, #12]
 8001d68:	bd10      	pop	{r4, pc}

08001d6a <__swrite>:
 8001d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d6e:	461f      	mov	r7, r3
 8001d70:	898b      	ldrh	r3, [r1, #12]
 8001d72:	4605      	mov	r5, r0
 8001d74:	05db      	lsls	r3, r3, #23
 8001d76:	460c      	mov	r4, r1
 8001d78:	4616      	mov	r6, r2
 8001d7a:	d505      	bpl.n	8001d88 <__swrite+0x1e>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d84:	f000 f9cc 	bl	8002120 <_lseek_r>
 8001d88:	89a3      	ldrh	r3, [r4, #12]
 8001d8a:	4632      	mov	r2, r6
 8001d8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d90:	81a3      	strh	r3, [r4, #12]
 8001d92:	4628      	mov	r0, r5
 8001d94:	463b      	mov	r3, r7
 8001d96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d9e:	f000 b869 	b.w	8001e74 <_write_r>

08001da2 <__sseek>:
 8001da2:	b510      	push	{r4, lr}
 8001da4:	460c      	mov	r4, r1
 8001da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001daa:	f000 f9b9 	bl	8002120 <_lseek_r>
 8001dae:	1c43      	adds	r3, r0, #1
 8001db0:	89a3      	ldrh	r3, [r4, #12]
 8001db2:	bf15      	itete	ne
 8001db4:	6560      	strne	r0, [r4, #84]	; 0x54
 8001db6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001dba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001dbe:	81a3      	strheq	r3, [r4, #12]
 8001dc0:	bf18      	it	ne
 8001dc2:	81a3      	strhne	r3, [r4, #12]
 8001dc4:	bd10      	pop	{r4, pc}

08001dc6 <__sclose>:
 8001dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dca:	f000 b8db 	b.w	8001f84 <_close_r>
	...

08001dd0 <__swbuf_r>:
 8001dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dd2:	460e      	mov	r6, r1
 8001dd4:	4614      	mov	r4, r2
 8001dd6:	4605      	mov	r5, r0
 8001dd8:	b118      	cbz	r0, 8001de2 <__swbuf_r+0x12>
 8001dda:	6983      	ldr	r3, [r0, #24]
 8001ddc:	b90b      	cbnz	r3, 8001de2 <__swbuf_r+0x12>
 8001dde:	f7ff fad7 	bl	8001390 <__sinit>
 8001de2:	4b21      	ldr	r3, [pc, #132]	; (8001e68 <__swbuf_r+0x98>)
 8001de4:	429c      	cmp	r4, r3
 8001de6:	d12b      	bne.n	8001e40 <__swbuf_r+0x70>
 8001de8:	686c      	ldr	r4, [r5, #4]
 8001dea:	69a3      	ldr	r3, [r4, #24]
 8001dec:	60a3      	str	r3, [r4, #8]
 8001dee:	89a3      	ldrh	r3, [r4, #12]
 8001df0:	071a      	lsls	r2, r3, #28
 8001df2:	d52f      	bpl.n	8001e54 <__swbuf_r+0x84>
 8001df4:	6923      	ldr	r3, [r4, #16]
 8001df6:	b36b      	cbz	r3, 8001e54 <__swbuf_r+0x84>
 8001df8:	6923      	ldr	r3, [r4, #16]
 8001dfa:	6820      	ldr	r0, [r4, #0]
 8001dfc:	b2f6      	uxtb	r6, r6
 8001dfe:	1ac0      	subs	r0, r0, r3
 8001e00:	6963      	ldr	r3, [r4, #20]
 8001e02:	4637      	mov	r7, r6
 8001e04:	4283      	cmp	r3, r0
 8001e06:	dc04      	bgt.n	8001e12 <__swbuf_r+0x42>
 8001e08:	4621      	mov	r1, r4
 8001e0a:	4628      	mov	r0, r5
 8001e0c:	f000 f94c 	bl	80020a8 <_fflush_r>
 8001e10:	bb30      	cbnz	r0, 8001e60 <__swbuf_r+0x90>
 8001e12:	68a3      	ldr	r3, [r4, #8]
 8001e14:	3001      	adds	r0, #1
 8001e16:	3b01      	subs	r3, #1
 8001e18:	60a3      	str	r3, [r4, #8]
 8001e1a:	6823      	ldr	r3, [r4, #0]
 8001e1c:	1c5a      	adds	r2, r3, #1
 8001e1e:	6022      	str	r2, [r4, #0]
 8001e20:	701e      	strb	r6, [r3, #0]
 8001e22:	6963      	ldr	r3, [r4, #20]
 8001e24:	4283      	cmp	r3, r0
 8001e26:	d004      	beq.n	8001e32 <__swbuf_r+0x62>
 8001e28:	89a3      	ldrh	r3, [r4, #12]
 8001e2a:	07db      	lsls	r3, r3, #31
 8001e2c:	d506      	bpl.n	8001e3c <__swbuf_r+0x6c>
 8001e2e:	2e0a      	cmp	r6, #10
 8001e30:	d104      	bne.n	8001e3c <__swbuf_r+0x6c>
 8001e32:	4621      	mov	r1, r4
 8001e34:	4628      	mov	r0, r5
 8001e36:	f000 f937 	bl	80020a8 <_fflush_r>
 8001e3a:	b988      	cbnz	r0, 8001e60 <__swbuf_r+0x90>
 8001e3c:	4638      	mov	r0, r7
 8001e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e40:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <__swbuf_r+0x9c>)
 8001e42:	429c      	cmp	r4, r3
 8001e44:	d101      	bne.n	8001e4a <__swbuf_r+0x7a>
 8001e46:	68ac      	ldr	r4, [r5, #8]
 8001e48:	e7cf      	b.n	8001dea <__swbuf_r+0x1a>
 8001e4a:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <__swbuf_r+0xa0>)
 8001e4c:	429c      	cmp	r4, r3
 8001e4e:	bf08      	it	eq
 8001e50:	68ec      	ldreq	r4, [r5, #12]
 8001e52:	e7ca      	b.n	8001dea <__swbuf_r+0x1a>
 8001e54:	4621      	mov	r1, r4
 8001e56:	4628      	mov	r0, r5
 8001e58:	f000 f81e 	bl	8001e98 <__swsetup_r>
 8001e5c:	2800      	cmp	r0, #0
 8001e5e:	d0cb      	beq.n	8001df8 <__swbuf_r+0x28>
 8001e60:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001e64:	e7ea      	b.n	8001e3c <__swbuf_r+0x6c>
 8001e66:	bf00      	nop
 8001e68:	0800249c 	.word	0x0800249c
 8001e6c:	080024bc 	.word	0x080024bc
 8001e70:	0800247c 	.word	0x0800247c

08001e74 <_write_r>:
 8001e74:	b538      	push	{r3, r4, r5, lr}
 8001e76:	4604      	mov	r4, r0
 8001e78:	4608      	mov	r0, r1
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	4d05      	ldr	r5, [pc, #20]	; (8001e94 <_write_r+0x20>)
 8001e80:	602a      	str	r2, [r5, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	f7fe fb95 	bl	80005b2 <_write>
 8001e88:	1c43      	adds	r3, r0, #1
 8001e8a:	d102      	bne.n	8001e92 <_write_r+0x1e>
 8001e8c:	682b      	ldr	r3, [r5, #0]
 8001e8e:	b103      	cbz	r3, 8001e92 <_write_r+0x1e>
 8001e90:	6023      	str	r3, [r4, #0]
 8001e92:	bd38      	pop	{r3, r4, r5, pc}
 8001e94:	200000e8 	.word	0x200000e8

08001e98 <__swsetup_r>:
 8001e98:	4b32      	ldr	r3, [pc, #200]	; (8001f64 <__swsetup_r+0xcc>)
 8001e9a:	b570      	push	{r4, r5, r6, lr}
 8001e9c:	681d      	ldr	r5, [r3, #0]
 8001e9e:	4606      	mov	r6, r0
 8001ea0:	460c      	mov	r4, r1
 8001ea2:	b125      	cbz	r5, 8001eae <__swsetup_r+0x16>
 8001ea4:	69ab      	ldr	r3, [r5, #24]
 8001ea6:	b913      	cbnz	r3, 8001eae <__swsetup_r+0x16>
 8001ea8:	4628      	mov	r0, r5
 8001eaa:	f7ff fa71 	bl	8001390 <__sinit>
 8001eae:	4b2e      	ldr	r3, [pc, #184]	; (8001f68 <__swsetup_r+0xd0>)
 8001eb0:	429c      	cmp	r4, r3
 8001eb2:	d10f      	bne.n	8001ed4 <__swsetup_r+0x3c>
 8001eb4:	686c      	ldr	r4, [r5, #4]
 8001eb6:	89a3      	ldrh	r3, [r4, #12]
 8001eb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001ebc:	0719      	lsls	r1, r3, #28
 8001ebe:	d42c      	bmi.n	8001f1a <__swsetup_r+0x82>
 8001ec0:	06dd      	lsls	r5, r3, #27
 8001ec2:	d411      	bmi.n	8001ee8 <__swsetup_r+0x50>
 8001ec4:	2309      	movs	r3, #9
 8001ec6:	6033      	str	r3, [r6, #0]
 8001ec8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001ecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ed0:	81a3      	strh	r3, [r4, #12]
 8001ed2:	e03e      	b.n	8001f52 <__swsetup_r+0xba>
 8001ed4:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <__swsetup_r+0xd4>)
 8001ed6:	429c      	cmp	r4, r3
 8001ed8:	d101      	bne.n	8001ede <__swsetup_r+0x46>
 8001eda:	68ac      	ldr	r4, [r5, #8]
 8001edc:	e7eb      	b.n	8001eb6 <__swsetup_r+0x1e>
 8001ede:	4b24      	ldr	r3, [pc, #144]	; (8001f70 <__swsetup_r+0xd8>)
 8001ee0:	429c      	cmp	r4, r3
 8001ee2:	bf08      	it	eq
 8001ee4:	68ec      	ldreq	r4, [r5, #12]
 8001ee6:	e7e6      	b.n	8001eb6 <__swsetup_r+0x1e>
 8001ee8:	0758      	lsls	r0, r3, #29
 8001eea:	d512      	bpl.n	8001f12 <__swsetup_r+0x7a>
 8001eec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001eee:	b141      	cbz	r1, 8001f02 <__swsetup_r+0x6a>
 8001ef0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ef4:	4299      	cmp	r1, r3
 8001ef6:	d002      	beq.n	8001efe <__swsetup_r+0x66>
 8001ef8:	4630      	mov	r0, r6
 8001efa:	f7ff fb03 	bl	8001504 <_free_r>
 8001efe:	2300      	movs	r3, #0
 8001f00:	6363      	str	r3, [r4, #52]	; 0x34
 8001f02:	89a3      	ldrh	r3, [r4, #12]
 8001f04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001f08:	81a3      	strh	r3, [r4, #12]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	6063      	str	r3, [r4, #4]
 8001f0e:	6923      	ldr	r3, [r4, #16]
 8001f10:	6023      	str	r3, [r4, #0]
 8001f12:	89a3      	ldrh	r3, [r4, #12]
 8001f14:	f043 0308 	orr.w	r3, r3, #8
 8001f18:	81a3      	strh	r3, [r4, #12]
 8001f1a:	6923      	ldr	r3, [r4, #16]
 8001f1c:	b94b      	cbnz	r3, 8001f32 <__swsetup_r+0x9a>
 8001f1e:	89a3      	ldrh	r3, [r4, #12]
 8001f20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f28:	d003      	beq.n	8001f32 <__swsetup_r+0x9a>
 8001f2a:	4621      	mov	r1, r4
 8001f2c:	4630      	mov	r0, r6
 8001f2e:	f000 f92f 	bl	8002190 <__smakebuf_r>
 8001f32:	89a0      	ldrh	r0, [r4, #12]
 8001f34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001f38:	f010 0301 	ands.w	r3, r0, #1
 8001f3c:	d00a      	beq.n	8001f54 <__swsetup_r+0xbc>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60a3      	str	r3, [r4, #8]
 8001f42:	6963      	ldr	r3, [r4, #20]
 8001f44:	425b      	negs	r3, r3
 8001f46:	61a3      	str	r3, [r4, #24]
 8001f48:	6923      	ldr	r3, [r4, #16]
 8001f4a:	b943      	cbnz	r3, 8001f5e <__swsetup_r+0xc6>
 8001f4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001f50:	d1ba      	bne.n	8001ec8 <__swsetup_r+0x30>
 8001f52:	bd70      	pop	{r4, r5, r6, pc}
 8001f54:	0781      	lsls	r1, r0, #30
 8001f56:	bf58      	it	pl
 8001f58:	6963      	ldrpl	r3, [r4, #20]
 8001f5a:	60a3      	str	r3, [r4, #8]
 8001f5c:	e7f4      	b.n	8001f48 <__swsetup_r+0xb0>
 8001f5e:	2000      	movs	r0, #0
 8001f60:	e7f7      	b.n	8001f52 <__swsetup_r+0xba>
 8001f62:	bf00      	nop
 8001f64:	20000054 	.word	0x20000054
 8001f68:	0800249c 	.word	0x0800249c
 8001f6c:	080024bc 	.word	0x080024bc
 8001f70:	0800247c 	.word	0x0800247c

08001f74 <abort>:
 8001f74:	2006      	movs	r0, #6
 8001f76:	b508      	push	{r3, lr}
 8001f78:	f000 f99e 	bl	80022b8 <raise>
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	f7fe faf1 	bl	8000564 <_exit>
	...

08001f84 <_close_r>:
 8001f84:	b538      	push	{r3, r4, r5, lr}
 8001f86:	2300      	movs	r3, #0
 8001f88:	4d05      	ldr	r5, [pc, #20]	; (8001fa0 <_close_r+0x1c>)
 8001f8a:	4604      	mov	r4, r0
 8001f8c:	4608      	mov	r0, r1
 8001f8e:	602b      	str	r3, [r5, #0]
 8001f90:	f7fe fb2b 	bl	80005ea <_close>
 8001f94:	1c43      	adds	r3, r0, #1
 8001f96:	d102      	bne.n	8001f9e <_close_r+0x1a>
 8001f98:	682b      	ldr	r3, [r5, #0]
 8001f9a:	b103      	cbz	r3, 8001f9e <_close_r+0x1a>
 8001f9c:	6023      	str	r3, [r4, #0]
 8001f9e:	bd38      	pop	{r3, r4, r5, pc}
 8001fa0:	200000e8 	.word	0x200000e8

08001fa4 <__sflush_r>:
 8001fa4:	898a      	ldrh	r2, [r1, #12]
 8001fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fa8:	4605      	mov	r5, r0
 8001faa:	0710      	lsls	r0, r2, #28
 8001fac:	460c      	mov	r4, r1
 8001fae:	d457      	bmi.n	8002060 <__sflush_r+0xbc>
 8001fb0:	684b      	ldr	r3, [r1, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	dc04      	bgt.n	8001fc0 <__sflush_r+0x1c>
 8001fb6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	dc01      	bgt.n	8001fc0 <__sflush_r+0x1c>
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001fc2:	2e00      	cmp	r6, #0
 8001fc4:	d0fa      	beq.n	8001fbc <__sflush_r+0x18>
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001fcc:	682f      	ldr	r7, [r5, #0]
 8001fce:	602b      	str	r3, [r5, #0]
 8001fd0:	d032      	beq.n	8002038 <__sflush_r+0x94>
 8001fd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001fd4:	89a3      	ldrh	r3, [r4, #12]
 8001fd6:	075a      	lsls	r2, r3, #29
 8001fd8:	d505      	bpl.n	8001fe6 <__sflush_r+0x42>
 8001fda:	6863      	ldr	r3, [r4, #4]
 8001fdc:	1ac0      	subs	r0, r0, r3
 8001fde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001fe0:	b10b      	cbz	r3, 8001fe6 <__sflush_r+0x42>
 8001fe2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fe4:	1ac0      	subs	r0, r0, r3
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	4602      	mov	r2, r0
 8001fea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001fec:	4628      	mov	r0, r5
 8001fee:	6a21      	ldr	r1, [r4, #32]
 8001ff0:	47b0      	blx	r6
 8001ff2:	1c43      	adds	r3, r0, #1
 8001ff4:	89a3      	ldrh	r3, [r4, #12]
 8001ff6:	d106      	bne.n	8002006 <__sflush_r+0x62>
 8001ff8:	6829      	ldr	r1, [r5, #0]
 8001ffa:	291d      	cmp	r1, #29
 8001ffc:	d82c      	bhi.n	8002058 <__sflush_r+0xb4>
 8001ffe:	4a29      	ldr	r2, [pc, #164]	; (80020a4 <__sflush_r+0x100>)
 8002000:	40ca      	lsrs	r2, r1
 8002002:	07d6      	lsls	r6, r2, #31
 8002004:	d528      	bpl.n	8002058 <__sflush_r+0xb4>
 8002006:	2200      	movs	r2, #0
 8002008:	6062      	str	r2, [r4, #4]
 800200a:	6922      	ldr	r2, [r4, #16]
 800200c:	04d9      	lsls	r1, r3, #19
 800200e:	6022      	str	r2, [r4, #0]
 8002010:	d504      	bpl.n	800201c <__sflush_r+0x78>
 8002012:	1c42      	adds	r2, r0, #1
 8002014:	d101      	bne.n	800201a <__sflush_r+0x76>
 8002016:	682b      	ldr	r3, [r5, #0]
 8002018:	b903      	cbnz	r3, 800201c <__sflush_r+0x78>
 800201a:	6560      	str	r0, [r4, #84]	; 0x54
 800201c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800201e:	602f      	str	r7, [r5, #0]
 8002020:	2900      	cmp	r1, #0
 8002022:	d0cb      	beq.n	8001fbc <__sflush_r+0x18>
 8002024:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002028:	4299      	cmp	r1, r3
 800202a:	d002      	beq.n	8002032 <__sflush_r+0x8e>
 800202c:	4628      	mov	r0, r5
 800202e:	f7ff fa69 	bl	8001504 <_free_r>
 8002032:	2000      	movs	r0, #0
 8002034:	6360      	str	r0, [r4, #52]	; 0x34
 8002036:	e7c2      	b.n	8001fbe <__sflush_r+0x1a>
 8002038:	6a21      	ldr	r1, [r4, #32]
 800203a:	2301      	movs	r3, #1
 800203c:	4628      	mov	r0, r5
 800203e:	47b0      	blx	r6
 8002040:	1c41      	adds	r1, r0, #1
 8002042:	d1c7      	bne.n	8001fd4 <__sflush_r+0x30>
 8002044:	682b      	ldr	r3, [r5, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0c4      	beq.n	8001fd4 <__sflush_r+0x30>
 800204a:	2b1d      	cmp	r3, #29
 800204c:	d001      	beq.n	8002052 <__sflush_r+0xae>
 800204e:	2b16      	cmp	r3, #22
 8002050:	d101      	bne.n	8002056 <__sflush_r+0xb2>
 8002052:	602f      	str	r7, [r5, #0]
 8002054:	e7b2      	b.n	8001fbc <__sflush_r+0x18>
 8002056:	89a3      	ldrh	r3, [r4, #12]
 8002058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800205c:	81a3      	strh	r3, [r4, #12]
 800205e:	e7ae      	b.n	8001fbe <__sflush_r+0x1a>
 8002060:	690f      	ldr	r7, [r1, #16]
 8002062:	2f00      	cmp	r7, #0
 8002064:	d0aa      	beq.n	8001fbc <__sflush_r+0x18>
 8002066:	0793      	lsls	r3, r2, #30
 8002068:	bf18      	it	ne
 800206a:	2300      	movne	r3, #0
 800206c:	680e      	ldr	r6, [r1, #0]
 800206e:	bf08      	it	eq
 8002070:	694b      	ldreq	r3, [r1, #20]
 8002072:	1bf6      	subs	r6, r6, r7
 8002074:	600f      	str	r7, [r1, #0]
 8002076:	608b      	str	r3, [r1, #8]
 8002078:	2e00      	cmp	r6, #0
 800207a:	dd9f      	ble.n	8001fbc <__sflush_r+0x18>
 800207c:	4633      	mov	r3, r6
 800207e:	463a      	mov	r2, r7
 8002080:	4628      	mov	r0, r5
 8002082:	6a21      	ldr	r1, [r4, #32]
 8002084:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002088:	47e0      	blx	ip
 800208a:	2800      	cmp	r0, #0
 800208c:	dc06      	bgt.n	800209c <__sflush_r+0xf8>
 800208e:	89a3      	ldrh	r3, [r4, #12]
 8002090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002098:	81a3      	strh	r3, [r4, #12]
 800209a:	e790      	b.n	8001fbe <__sflush_r+0x1a>
 800209c:	4407      	add	r7, r0
 800209e:	1a36      	subs	r6, r6, r0
 80020a0:	e7ea      	b.n	8002078 <__sflush_r+0xd4>
 80020a2:	bf00      	nop
 80020a4:	20400001 	.word	0x20400001

080020a8 <_fflush_r>:
 80020a8:	b538      	push	{r3, r4, r5, lr}
 80020aa:	690b      	ldr	r3, [r1, #16]
 80020ac:	4605      	mov	r5, r0
 80020ae:	460c      	mov	r4, r1
 80020b0:	b913      	cbnz	r3, 80020b8 <_fflush_r+0x10>
 80020b2:	2500      	movs	r5, #0
 80020b4:	4628      	mov	r0, r5
 80020b6:	bd38      	pop	{r3, r4, r5, pc}
 80020b8:	b118      	cbz	r0, 80020c2 <_fflush_r+0x1a>
 80020ba:	6983      	ldr	r3, [r0, #24]
 80020bc:	b90b      	cbnz	r3, 80020c2 <_fflush_r+0x1a>
 80020be:	f7ff f967 	bl	8001390 <__sinit>
 80020c2:	4b14      	ldr	r3, [pc, #80]	; (8002114 <_fflush_r+0x6c>)
 80020c4:	429c      	cmp	r4, r3
 80020c6:	d11b      	bne.n	8002100 <_fflush_r+0x58>
 80020c8:	686c      	ldr	r4, [r5, #4]
 80020ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0ef      	beq.n	80020b2 <_fflush_r+0xa>
 80020d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80020d4:	07d0      	lsls	r0, r2, #31
 80020d6:	d404      	bmi.n	80020e2 <_fflush_r+0x3a>
 80020d8:	0599      	lsls	r1, r3, #22
 80020da:	d402      	bmi.n	80020e2 <_fflush_r+0x3a>
 80020dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020de:	f7ff fa07 	bl	80014f0 <__retarget_lock_acquire_recursive>
 80020e2:	4628      	mov	r0, r5
 80020e4:	4621      	mov	r1, r4
 80020e6:	f7ff ff5d 	bl	8001fa4 <__sflush_r>
 80020ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80020ec:	4605      	mov	r5, r0
 80020ee:	07da      	lsls	r2, r3, #31
 80020f0:	d4e0      	bmi.n	80020b4 <_fflush_r+0xc>
 80020f2:	89a3      	ldrh	r3, [r4, #12]
 80020f4:	059b      	lsls	r3, r3, #22
 80020f6:	d4dd      	bmi.n	80020b4 <_fflush_r+0xc>
 80020f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020fa:	f7ff f9fa 	bl	80014f2 <__retarget_lock_release_recursive>
 80020fe:	e7d9      	b.n	80020b4 <_fflush_r+0xc>
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <_fflush_r+0x70>)
 8002102:	429c      	cmp	r4, r3
 8002104:	d101      	bne.n	800210a <_fflush_r+0x62>
 8002106:	68ac      	ldr	r4, [r5, #8]
 8002108:	e7df      	b.n	80020ca <_fflush_r+0x22>
 800210a:	4b04      	ldr	r3, [pc, #16]	; (800211c <_fflush_r+0x74>)
 800210c:	429c      	cmp	r4, r3
 800210e:	bf08      	it	eq
 8002110:	68ec      	ldreq	r4, [r5, #12]
 8002112:	e7da      	b.n	80020ca <_fflush_r+0x22>
 8002114:	0800249c 	.word	0x0800249c
 8002118:	080024bc 	.word	0x080024bc
 800211c:	0800247c 	.word	0x0800247c

08002120 <_lseek_r>:
 8002120:	b538      	push	{r3, r4, r5, lr}
 8002122:	4604      	mov	r4, r0
 8002124:	4608      	mov	r0, r1
 8002126:	4611      	mov	r1, r2
 8002128:	2200      	movs	r2, #0
 800212a:	4d05      	ldr	r5, [pc, #20]	; (8002140 <_lseek_r+0x20>)
 800212c:	602a      	str	r2, [r5, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	f7fe fa7f 	bl	8000632 <_lseek>
 8002134:	1c43      	adds	r3, r0, #1
 8002136:	d102      	bne.n	800213e <_lseek_r+0x1e>
 8002138:	682b      	ldr	r3, [r5, #0]
 800213a:	b103      	cbz	r3, 800213e <_lseek_r+0x1e>
 800213c:	6023      	str	r3, [r4, #0]
 800213e:	bd38      	pop	{r3, r4, r5, pc}
 8002140:	200000e8 	.word	0x200000e8

08002144 <__swhatbuf_r>:
 8002144:	b570      	push	{r4, r5, r6, lr}
 8002146:	460e      	mov	r6, r1
 8002148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800214c:	4614      	mov	r4, r2
 800214e:	2900      	cmp	r1, #0
 8002150:	461d      	mov	r5, r3
 8002152:	b096      	sub	sp, #88	; 0x58
 8002154:	da08      	bge.n	8002168 <__swhatbuf_r+0x24>
 8002156:	2200      	movs	r2, #0
 8002158:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800215c:	602a      	str	r2, [r5, #0]
 800215e:	061a      	lsls	r2, r3, #24
 8002160:	d410      	bmi.n	8002184 <__swhatbuf_r+0x40>
 8002162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002166:	e00e      	b.n	8002186 <__swhatbuf_r+0x42>
 8002168:	466a      	mov	r2, sp
 800216a:	f000 f8c1 	bl	80022f0 <_fstat_r>
 800216e:	2800      	cmp	r0, #0
 8002170:	dbf1      	blt.n	8002156 <__swhatbuf_r+0x12>
 8002172:	9a01      	ldr	r2, [sp, #4]
 8002174:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002178:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800217c:	425a      	negs	r2, r3
 800217e:	415a      	adcs	r2, r3
 8002180:	602a      	str	r2, [r5, #0]
 8002182:	e7ee      	b.n	8002162 <__swhatbuf_r+0x1e>
 8002184:	2340      	movs	r3, #64	; 0x40
 8002186:	2000      	movs	r0, #0
 8002188:	6023      	str	r3, [r4, #0]
 800218a:	b016      	add	sp, #88	; 0x58
 800218c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002190 <__smakebuf_r>:
 8002190:	898b      	ldrh	r3, [r1, #12]
 8002192:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002194:	079d      	lsls	r5, r3, #30
 8002196:	4606      	mov	r6, r0
 8002198:	460c      	mov	r4, r1
 800219a:	d507      	bpl.n	80021ac <__smakebuf_r+0x1c>
 800219c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80021a0:	6023      	str	r3, [r4, #0]
 80021a2:	6123      	str	r3, [r4, #16]
 80021a4:	2301      	movs	r3, #1
 80021a6:	6163      	str	r3, [r4, #20]
 80021a8:	b002      	add	sp, #8
 80021aa:	bd70      	pop	{r4, r5, r6, pc}
 80021ac:	466a      	mov	r2, sp
 80021ae:	ab01      	add	r3, sp, #4
 80021b0:	f7ff ffc8 	bl	8002144 <__swhatbuf_r>
 80021b4:	9900      	ldr	r1, [sp, #0]
 80021b6:	4605      	mov	r5, r0
 80021b8:	4630      	mov	r0, r6
 80021ba:	f7ff fa0b 	bl	80015d4 <_malloc_r>
 80021be:	b948      	cbnz	r0, 80021d4 <__smakebuf_r+0x44>
 80021c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021c4:	059a      	lsls	r2, r3, #22
 80021c6:	d4ef      	bmi.n	80021a8 <__smakebuf_r+0x18>
 80021c8:	f023 0303 	bic.w	r3, r3, #3
 80021cc:	f043 0302 	orr.w	r3, r3, #2
 80021d0:	81a3      	strh	r3, [r4, #12]
 80021d2:	e7e3      	b.n	800219c <__smakebuf_r+0xc>
 80021d4:	4b0d      	ldr	r3, [pc, #52]	; (800220c <__smakebuf_r+0x7c>)
 80021d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80021d8:	89a3      	ldrh	r3, [r4, #12]
 80021da:	6020      	str	r0, [r4, #0]
 80021dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021e0:	81a3      	strh	r3, [r4, #12]
 80021e2:	9b00      	ldr	r3, [sp, #0]
 80021e4:	6120      	str	r0, [r4, #16]
 80021e6:	6163      	str	r3, [r4, #20]
 80021e8:	9b01      	ldr	r3, [sp, #4]
 80021ea:	b15b      	cbz	r3, 8002204 <__smakebuf_r+0x74>
 80021ec:	4630      	mov	r0, r6
 80021ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021f2:	f000 f88f 	bl	8002314 <_isatty_r>
 80021f6:	b128      	cbz	r0, 8002204 <__smakebuf_r+0x74>
 80021f8:	89a3      	ldrh	r3, [r4, #12]
 80021fa:	f023 0303 	bic.w	r3, r3, #3
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	81a3      	strh	r3, [r4, #12]
 8002204:	89a0      	ldrh	r0, [r4, #12]
 8002206:	4305      	orrs	r5, r0
 8002208:	81a5      	strh	r5, [r4, #12]
 800220a:	e7cd      	b.n	80021a8 <__smakebuf_r+0x18>
 800220c:	08001329 	.word	0x08001329

08002210 <memchr>:
 8002210:	4603      	mov	r3, r0
 8002212:	b510      	push	{r4, lr}
 8002214:	b2c9      	uxtb	r1, r1
 8002216:	4402      	add	r2, r0
 8002218:	4293      	cmp	r3, r2
 800221a:	4618      	mov	r0, r3
 800221c:	d101      	bne.n	8002222 <memchr+0x12>
 800221e:	2000      	movs	r0, #0
 8002220:	e003      	b.n	800222a <memchr+0x1a>
 8002222:	7804      	ldrb	r4, [r0, #0]
 8002224:	3301      	adds	r3, #1
 8002226:	428c      	cmp	r4, r1
 8002228:	d1f6      	bne.n	8002218 <memchr+0x8>
 800222a:	bd10      	pop	{r4, pc}

0800222c <__malloc_lock>:
 800222c:	4801      	ldr	r0, [pc, #4]	; (8002234 <__malloc_lock+0x8>)
 800222e:	f7ff b95f 	b.w	80014f0 <__retarget_lock_acquire_recursive>
 8002232:	bf00      	nop
 8002234:	200000dc 	.word	0x200000dc

08002238 <__malloc_unlock>:
 8002238:	4801      	ldr	r0, [pc, #4]	; (8002240 <__malloc_unlock+0x8>)
 800223a:	f7ff b95a 	b.w	80014f2 <__retarget_lock_release_recursive>
 800223e:	bf00      	nop
 8002240:	200000dc 	.word	0x200000dc

08002244 <_read_r>:
 8002244:	b538      	push	{r3, r4, r5, lr}
 8002246:	4604      	mov	r4, r0
 8002248:	4608      	mov	r0, r1
 800224a:	4611      	mov	r1, r2
 800224c:	2200      	movs	r2, #0
 800224e:	4d05      	ldr	r5, [pc, #20]	; (8002264 <_read_r+0x20>)
 8002250:	602a      	str	r2, [r5, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	f7fe f990 	bl	8000578 <_read>
 8002258:	1c43      	adds	r3, r0, #1
 800225a:	d102      	bne.n	8002262 <_read_r+0x1e>
 800225c:	682b      	ldr	r3, [r5, #0]
 800225e:	b103      	cbz	r3, 8002262 <_read_r+0x1e>
 8002260:	6023      	str	r3, [r4, #0]
 8002262:	bd38      	pop	{r3, r4, r5, pc}
 8002264:	200000e8 	.word	0x200000e8

08002268 <_raise_r>:
 8002268:	291f      	cmp	r1, #31
 800226a:	b538      	push	{r3, r4, r5, lr}
 800226c:	4604      	mov	r4, r0
 800226e:	460d      	mov	r5, r1
 8002270:	d904      	bls.n	800227c <_raise_r+0x14>
 8002272:	2316      	movs	r3, #22
 8002274:	6003      	str	r3, [r0, #0]
 8002276:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800227a:	bd38      	pop	{r3, r4, r5, pc}
 800227c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800227e:	b112      	cbz	r2, 8002286 <_raise_r+0x1e>
 8002280:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002284:	b94b      	cbnz	r3, 800229a <_raise_r+0x32>
 8002286:	4620      	mov	r0, r4
 8002288:	f000 f830 	bl	80022ec <_getpid_r>
 800228c:	462a      	mov	r2, r5
 800228e:	4601      	mov	r1, r0
 8002290:	4620      	mov	r0, r4
 8002292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002296:	f000 b817 	b.w	80022c8 <_kill_r>
 800229a:	2b01      	cmp	r3, #1
 800229c:	d00a      	beq.n	80022b4 <_raise_r+0x4c>
 800229e:	1c59      	adds	r1, r3, #1
 80022a0:	d103      	bne.n	80022aa <_raise_r+0x42>
 80022a2:	2316      	movs	r3, #22
 80022a4:	6003      	str	r3, [r0, #0]
 80022a6:	2001      	movs	r0, #1
 80022a8:	e7e7      	b.n	800227a <_raise_r+0x12>
 80022aa:	2400      	movs	r4, #0
 80022ac:	4628      	mov	r0, r5
 80022ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80022b2:	4798      	blx	r3
 80022b4:	2000      	movs	r0, #0
 80022b6:	e7e0      	b.n	800227a <_raise_r+0x12>

080022b8 <raise>:
 80022b8:	4b02      	ldr	r3, [pc, #8]	; (80022c4 <raise+0xc>)
 80022ba:	4601      	mov	r1, r0
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	f7ff bfd3 	b.w	8002268 <_raise_r>
 80022c2:	bf00      	nop
 80022c4:	20000054 	.word	0x20000054

080022c8 <_kill_r>:
 80022c8:	b538      	push	{r3, r4, r5, lr}
 80022ca:	2300      	movs	r3, #0
 80022cc:	4d06      	ldr	r5, [pc, #24]	; (80022e8 <_kill_r+0x20>)
 80022ce:	4604      	mov	r4, r0
 80022d0:	4608      	mov	r0, r1
 80022d2:	4611      	mov	r1, r2
 80022d4:	602b      	str	r3, [r5, #0]
 80022d6:	f7fe f935 	bl	8000544 <_kill>
 80022da:	1c43      	adds	r3, r0, #1
 80022dc:	d102      	bne.n	80022e4 <_kill_r+0x1c>
 80022de:	682b      	ldr	r3, [r5, #0]
 80022e0:	b103      	cbz	r3, 80022e4 <_kill_r+0x1c>
 80022e2:	6023      	str	r3, [r4, #0]
 80022e4:	bd38      	pop	{r3, r4, r5, pc}
 80022e6:	bf00      	nop
 80022e8:	200000e8 	.word	0x200000e8

080022ec <_getpid_r>:
 80022ec:	f7fe b923 	b.w	8000536 <_getpid>

080022f0 <_fstat_r>:
 80022f0:	b538      	push	{r3, r4, r5, lr}
 80022f2:	2300      	movs	r3, #0
 80022f4:	4d06      	ldr	r5, [pc, #24]	; (8002310 <_fstat_r+0x20>)
 80022f6:	4604      	mov	r4, r0
 80022f8:	4608      	mov	r0, r1
 80022fa:	4611      	mov	r1, r2
 80022fc:	602b      	str	r3, [r5, #0]
 80022fe:	f7fe f97f 	bl	8000600 <_fstat>
 8002302:	1c43      	adds	r3, r0, #1
 8002304:	d102      	bne.n	800230c <_fstat_r+0x1c>
 8002306:	682b      	ldr	r3, [r5, #0]
 8002308:	b103      	cbz	r3, 800230c <_fstat_r+0x1c>
 800230a:	6023      	str	r3, [r4, #0]
 800230c:	bd38      	pop	{r3, r4, r5, pc}
 800230e:	bf00      	nop
 8002310:	200000e8 	.word	0x200000e8

08002314 <_isatty_r>:
 8002314:	b538      	push	{r3, r4, r5, lr}
 8002316:	2300      	movs	r3, #0
 8002318:	4d05      	ldr	r5, [pc, #20]	; (8002330 <_isatty_r+0x1c>)
 800231a:	4604      	mov	r4, r0
 800231c:	4608      	mov	r0, r1
 800231e:	602b      	str	r3, [r5, #0]
 8002320:	f7fe f97d 	bl	800061e <_isatty>
 8002324:	1c43      	adds	r3, r0, #1
 8002326:	d102      	bne.n	800232e <_isatty_r+0x1a>
 8002328:	682b      	ldr	r3, [r5, #0]
 800232a:	b103      	cbz	r3, 800232e <_isatty_r+0x1a>
 800232c:	6023      	str	r3, [r4, #0]
 800232e:	bd38      	pop	{r3, r4, r5, pc}
 8002330:	200000e8 	.word	0x200000e8

08002334 <_init>:
 8002334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002336:	bf00      	nop
 8002338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800233a:	bc08      	pop	{r3}
 800233c:	469e      	mov	lr, r3
 800233e:	4770      	bx	lr

08002340 <_fini>:
 8002340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002342:	bf00      	nop
 8002344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002346:	bc08      	pop	{r3}
 8002348:	469e      	mov	lr, r3
 800234a:	4770      	bx	lr
