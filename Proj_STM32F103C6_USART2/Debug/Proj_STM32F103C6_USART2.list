
Proj_STM32F103C6_USART2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b74  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000670  08002c80  08002c80  00012c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032f0  080032f0  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080032f0  080032f0  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032f0  080032f0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032f0  080032f0  000132f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032f4  080032f4  000132f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080032f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000080  08003378  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08003378  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000069ff  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001842  00000000  00000000  00026aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  000282f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000680  00000000  00000000  000289d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d12  00000000  00000000  00029058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007ca7  00000000  00000000  0003fd6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080138  00000000  00000000  00047a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c7b49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e94  00000000  00000000  000c7b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c68 	.word	0x08002c68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08002c68 	.word	0x08002c68

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <ESP_Init>:


/*****************************************************************************************************************************************/

void ESP_Init (char *SSID, char *PASSWD)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b098      	sub	sp, #96	; 0x60
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 800017a:	f000 fa63 	bl	8000644 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n", wifi_uart);
 800017e:	495d      	ldr	r1, [pc, #372]	; (80002f4 <ESP_Init+0x184>)
 8000180:	485d      	ldr	r0, [pc, #372]	; (80002f8 <ESP_Init+0x188>)
 8000182:	f000 fc76 	bl	8000a72 <Uart_sendstring>
	Uart_sendstring("RESETTING.", pc_uart);
 8000186:	495d      	ldr	r1, [pc, #372]	; (80002fc <ESP_Init+0x18c>)
 8000188:	485d      	ldr	r0, [pc, #372]	; (8000300 <ESP_Init+0x190>)
 800018a:	f000 fc72 	bl	8000a72 <Uart_sendstring>
	for (int i=0; i<5; i++)
 800018e:	2300      	movs	r3, #0
 8000190:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000192:	e00a      	b.n	80001aa <ESP_Init+0x3a>
	{
		Uart_sendstring(".", pc_uart);
 8000194:	4959      	ldr	r1, [pc, #356]	; (80002fc <ESP_Init+0x18c>)
 8000196:	485b      	ldr	r0, [pc, #364]	; (8000304 <ESP_Init+0x194>)
 8000198:	f000 fc6b 	bl	8000a72 <Uart_sendstring>
		HAL_Delay(1000);
 800019c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001a0:	f001 f8ec 	bl	800137c <HAL_Delay>
	for (int i=0; i<5; i++)
 80001a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80001a6:	3301      	adds	r3, #1
 80001a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80001aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80001ac:	2b04      	cmp	r3, #4
 80001ae:	ddf1      	ble.n	8000194 <ESP_Init+0x24>
	}

	/********* AT **********/
	Uart_sendstring("AT\r\n", wifi_uart);
 80001b0:	4950      	ldr	r1, [pc, #320]	; (80002f4 <ESP_Init+0x184>)
 80001b2:	4855      	ldr	r0, [pc, #340]	; (8000308 <ESP_Init+0x198>)
 80001b4:	f000 fc5d 	bl	8000a72 <Uart_sendstring>
	while(!(Wait_for("AT\r\r\n\r\nOK\r\n", wifi_uart)));
 80001b8:	bf00      	nop
 80001ba:	494e      	ldr	r1, [pc, #312]	; (80002f4 <ESP_Init+0x184>)
 80001bc:	4853      	ldr	r0, [pc, #332]	; (800030c <ESP_Init+0x19c>)
 80001be:	f000 fce9 	bl	8000b94 <Wait_for>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0f8      	beq.n	80001ba <ESP_Init+0x4a>
	Uart_sendstring("AT---->OK\n\n", pc_uart);
 80001c8:	494c      	ldr	r1, [pc, #304]	; (80002fc <ESP_Init+0x18c>)
 80001ca:	4851      	ldr	r0, [pc, #324]	; (8000310 <ESP_Init+0x1a0>)
 80001cc:	f000 fc51 	bl	8000a72 <Uart_sendstring>


	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n", wifi_uart);
 80001d0:	4948      	ldr	r1, [pc, #288]	; (80002f4 <ESP_Init+0x184>)
 80001d2:	4850      	ldr	r0, [pc, #320]	; (8000314 <ESP_Init+0x1a4>)
 80001d4:	f000 fc4d 	bl	8000a72 <Uart_sendstring>
	while (!(Wait_for("AT+CWMODE=1\r\r\n\r\nOK\r\n", wifi_uart)));
 80001d8:	bf00      	nop
 80001da:	4946      	ldr	r1, [pc, #280]	; (80002f4 <ESP_Init+0x184>)
 80001dc:	484e      	ldr	r0, [pc, #312]	; (8000318 <ESP_Init+0x1a8>)
 80001de:	f000 fcd9 	bl	8000b94 <Wait_for>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d0f8      	beq.n	80001da <ESP_Init+0x6a>
	Uart_sendstring("CW MODE---->1\n\n", pc_uart);
 80001e8:	4944      	ldr	r1, [pc, #272]	; (80002fc <ESP_Init+0x18c>)
 80001ea:	484c      	ldr	r0, [pc, #304]	; (800031c <ESP_Init+0x1ac>)
 80001ec:	f000 fc41 	bl	8000a72 <Uart_sendstring>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	Uart_sendstring("connecting... to the provided AP\n", pc_uart);
 80001f0:	4942      	ldr	r1, [pc, #264]	; (80002fc <ESP_Init+0x18c>)
 80001f2:	484b      	ldr	r0, [pc, #300]	; (8000320 <ESP_Init+0x1b0>)
 80001f4:	f000 fc3d 	bl	8000a72 <Uart_sendstring>
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 80001f8:	f107 0008 	add.w	r0, r7, #8
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	687a      	ldr	r2, [r7, #4]
 8000200:	4948      	ldr	r1, [pc, #288]	; (8000324 <ESP_Init+0x1b4>)
 8000202:	f002 f8a9 	bl	8002358 <siprintf>
	Uart_sendstring(data, wifi_uart);
 8000206:	f107 0308 	add.w	r3, r7, #8
 800020a:	493a      	ldr	r1, [pc, #232]	; (80002f4 <ESP_Init+0x184>)
 800020c:	4618      	mov	r0, r3
 800020e:	f000 fc30 	bl	8000a72 <Uart_sendstring>
	while (!(Wait_for("WIFI GOT IP\r\n\r\nOK\r\n", wifi_uart)));
 8000212:	bf00      	nop
 8000214:	4937      	ldr	r1, [pc, #220]	; (80002f4 <ESP_Init+0x184>)
 8000216:	4844      	ldr	r0, [pc, #272]	; (8000328 <ESP_Init+0x1b8>)
 8000218:	f000 fcbc 	bl	8000b94 <Wait_for>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d0f8      	beq.n	8000214 <ESP_Init+0xa4>
	sprintf (data, "Connected to,\"%s\"\n\n", SSID);
 8000222:	f107 0308 	add.w	r3, r7, #8
 8000226:	687a      	ldr	r2, [r7, #4]
 8000228:	4940      	ldr	r1, [pc, #256]	; (800032c <ESP_Init+0x1bc>)
 800022a:	4618      	mov	r0, r3
 800022c:	f002 f894 	bl	8002358 <siprintf>
	Uart_sendstring(data,pc_uart);
 8000230:	f107 0308 	add.w	r3, r7, #8
 8000234:	4931      	ldr	r1, [pc, #196]	; (80002fc <ESP_Init+0x18c>)
 8000236:	4618      	mov	r0, r3
 8000238:	f000 fc1b 	bl	8000a72 <Uart_sendstring>


	/********* AT+CIFSR **********/
	Uart_sendstring("AT+CIFSR\r\n", wifi_uart);
 800023c:	492d      	ldr	r1, [pc, #180]	; (80002f4 <ESP_Init+0x184>)
 800023e:	483c      	ldr	r0, [pc, #240]	; (8000330 <ESP_Init+0x1c0>)
 8000240:	f000 fc17 	bl	8000a72 <Uart_sendstring>
	while (!(Wait_for("CIFSR:STAIP,\"", wifi_uart)));
 8000244:	bf00      	nop
 8000246:	492b      	ldr	r1, [pc, #172]	; (80002f4 <ESP_Init+0x184>)
 8000248:	483a      	ldr	r0, [pc, #232]	; (8000334 <ESP_Init+0x1c4>)
 800024a:	f000 fca3 	bl	8000b94 <Wait_for>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d0f8      	beq.n	8000246 <ESP_Init+0xd6>
	while (!(Copy_upto("\"",buffer, wifi_uart)));
 8000254:	bf00      	nop
 8000256:	4a27      	ldr	r2, [pc, #156]	; (80002f4 <ESP_Init+0x184>)
 8000258:	4937      	ldr	r1, [pc, #220]	; (8000338 <ESP_Init+0x1c8>)
 800025a:	4838      	ldr	r0, [pc, #224]	; (800033c <ESP_Init+0x1cc>)
 800025c:	f000 fc20 	bl	8000aa0 <Copy_upto>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d0f7      	beq.n	8000256 <ESP_Init+0xe6>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8000266:	bf00      	nop
 8000268:	4922      	ldr	r1, [pc, #136]	; (80002f4 <ESP_Init+0x184>)
 800026a:	4835      	ldr	r0, [pc, #212]	; (8000340 <ESP_Init+0x1d0>)
 800026c:	f000 fc92 	bl	8000b94 <Wait_for>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d0f8      	beq.n	8000268 <ESP_Init+0xf8>
	int len = strlen (buffer);
 8000276:	4830      	ldr	r0, [pc, #192]	; (8000338 <ESP_Init+0x1c8>)
 8000278:	f7ff ff72 	bl	8000160 <strlen>
 800027c:	4603      	mov	r3, r0
 800027e:	65bb      	str	r3, [r7, #88]	; 0x58
	buffer[len-1] = '\0';
 8000280:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000282:	3b01      	subs	r3, #1
 8000284:	4a2c      	ldr	r2, [pc, #176]	; (8000338 <ESP_Init+0x1c8>)
 8000286:	2100      	movs	r1, #0
 8000288:	54d1      	strb	r1, [r2, r3]
	sprintf (data, "IP ADDR: %s\n\n", buffer);
 800028a:	f107 0308 	add.w	r3, r7, #8
 800028e:	4a2a      	ldr	r2, [pc, #168]	; (8000338 <ESP_Init+0x1c8>)
 8000290:	492c      	ldr	r1, [pc, #176]	; (8000344 <ESP_Init+0x1d4>)
 8000292:	4618      	mov	r0, r3
 8000294:	f002 f860 	bl	8002358 <siprintf>
	Uart_sendstring(data, pc_uart);
 8000298:	f107 0308 	add.w	r3, r7, #8
 800029c:	4917      	ldr	r1, [pc, #92]	; (80002fc <ESP_Init+0x18c>)
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 fbe7 	bl	8000a72 <Uart_sendstring>


	Uart_sendstring("AT+CIPMUX=1\r\n", wifi_uart);
 80002a4:	4913      	ldr	r1, [pc, #76]	; (80002f4 <ESP_Init+0x184>)
 80002a6:	4828      	ldr	r0, [pc, #160]	; (8000348 <ESP_Init+0x1d8>)
 80002a8:	f000 fbe3 	bl	8000a72 <Uart_sendstring>
	while (!(Wait_for("AT+CIPMUX=1\r\r\n\r\nOK\r\n", wifi_uart)));
 80002ac:	bf00      	nop
 80002ae:	4911      	ldr	r1, [pc, #68]	; (80002f4 <ESP_Init+0x184>)
 80002b0:	4826      	ldr	r0, [pc, #152]	; (800034c <ESP_Init+0x1dc>)
 80002b2:	f000 fc6f 	bl	8000b94 <Wait_for>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d0f8      	beq.n	80002ae <ESP_Init+0x13e>
	Uart_sendstring("CIPMUX---->OK\n\n", pc_uart);
 80002bc:	490f      	ldr	r1, [pc, #60]	; (80002fc <ESP_Init+0x18c>)
 80002be:	4824      	ldr	r0, [pc, #144]	; (8000350 <ESP_Init+0x1e0>)
 80002c0:	f000 fbd7 	bl	8000a72 <Uart_sendstring>

	Uart_sendstring("AT+CIPSERVER=1,80\r\n", wifi_uart);
 80002c4:	490b      	ldr	r1, [pc, #44]	; (80002f4 <ESP_Init+0x184>)
 80002c6:	4823      	ldr	r0, [pc, #140]	; (8000354 <ESP_Init+0x1e4>)
 80002c8:	f000 fbd3 	bl	8000a72 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 80002cc:	bf00      	nop
 80002ce:	4909      	ldr	r1, [pc, #36]	; (80002f4 <ESP_Init+0x184>)
 80002d0:	481b      	ldr	r0, [pc, #108]	; (8000340 <ESP_Init+0x1d0>)
 80002d2:	f000 fc5f 	bl	8000b94 <Wait_for>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d0f8      	beq.n	80002ce <ESP_Init+0x15e>
	Uart_sendstring("CIPSERVER---->OK\n\n", pc_uart);
 80002dc:	4907      	ldr	r1, [pc, #28]	; (80002fc <ESP_Init+0x18c>)
 80002de:	481e      	ldr	r0, [pc, #120]	; (8000358 <ESP_Init+0x1e8>)
 80002e0:	f000 fbc7 	bl	8000a72 <Uart_sendstring>

	Uart_sendstring("Now Connect to the IP ADRESS\n\n", pc_uart);
 80002e4:	4905      	ldr	r1, [pc, #20]	; (80002fc <ESP_Init+0x18c>)
 80002e6:	481d      	ldr	r0, [pc, #116]	; (800035c <ESP_Init+0x1ec>)
 80002e8:	f000 fbc3 	bl	8000a72 <Uart_sendstring>

}
 80002ec:	bf00      	nop
 80002ee:	3760      	adds	r7, #96	; 0x60
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	200001e0 	.word	0x200001e0
 80002f8:	08003084 	.word	0x08003084
 80002fc:	20000224 	.word	0x20000224
 8000300:	08003090 	.word	0x08003090
 8000304:	0800309c 	.word	0x0800309c
 8000308:	080030a0 	.word	0x080030a0
 800030c:	080030a8 	.word	0x080030a8
 8000310:	080030b4 	.word	0x080030b4
 8000314:	080030c0 	.word	0x080030c0
 8000318:	080030d0 	.word	0x080030d0
 800031c:	080030e8 	.word	0x080030e8
 8000320:	080030f8 	.word	0x080030f8
 8000324:	0800311c 	.word	0x0800311c
 8000328:	08003134 	.word	0x08003134
 800032c:	08003148 	.word	0x08003148
 8000330:	0800315c 	.word	0x0800315c
 8000334:	08003168 	.word	0x08003168
 8000338:	2000009c 	.word	0x2000009c
 800033c:	08003178 	.word	0x08003178
 8000340:	0800317c 	.word	0x0800317c
 8000344:	08003184 	.word	0x08003184
 8000348:	08003194 	.word	0x08003194
 800034c:	080031a4 	.word	0x080031a4
 8000350:	080031bc 	.word	0x080031bc
 8000354:	080031cc 	.word	0x080031cc
 8000358:	080031e0 	.word	0x080031e0
 800035c:	080031f4 	.word	0x080031f4

08000360 <Server_Send>:




int Server_Send (char *str, int Link_ID)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b098      	sub	sp, #96	; 0x60
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	6039      	str	r1, [r7, #0]
	int len = strlen (str);
 800036a:	6878      	ldr	r0, [r7, #4]
 800036c:	f7ff fef8 	bl	8000160 <strlen>
 8000370:	4603      	mov	r3, r0
 8000372:	65fb      	str	r3, [r7, #92]	; 0x5c
	char data[80];
	sprintf (data, "AT+CIPSEND=%d,%d\r\n", Link_ID, len);
 8000374:	f107 000c 	add.w	r0, r7, #12
 8000378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800037a:	683a      	ldr	r2, [r7, #0]
 800037c:	491a      	ldr	r1, [pc, #104]	; (80003e8 <Server_Send+0x88>)
 800037e:	f001 ffeb 	bl	8002358 <siprintf>
	Uart_sendstring(data, wifi_uart);
 8000382:	f107 030c 	add.w	r3, r7, #12
 8000386:	4919      	ldr	r1, [pc, #100]	; (80003ec <Server_Send+0x8c>)
 8000388:	4618      	mov	r0, r3
 800038a:	f000 fb72 	bl	8000a72 <Uart_sendstring>
	while (!(Wait_for(">", wifi_uart)));
 800038e:	bf00      	nop
 8000390:	4916      	ldr	r1, [pc, #88]	; (80003ec <Server_Send+0x8c>)
 8000392:	4817      	ldr	r0, [pc, #92]	; (80003f0 <Server_Send+0x90>)
 8000394:	f000 fbfe 	bl	8000b94 <Wait_for>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0f8      	beq.n	8000390 <Server_Send+0x30>
	Uart_sendstring (str, wifi_uart);
 800039e:	4913      	ldr	r1, [pc, #76]	; (80003ec <Server_Send+0x8c>)
 80003a0:	6878      	ldr	r0, [r7, #4]
 80003a2:	f000 fb66 	bl	8000a72 <Uart_sendstring>
	while (!(Wait_for("SEND OK", wifi_uart)));
 80003a6:	bf00      	nop
 80003a8:	4910      	ldr	r1, [pc, #64]	; (80003ec <Server_Send+0x8c>)
 80003aa:	4812      	ldr	r0, [pc, #72]	; (80003f4 <Server_Send+0x94>)
 80003ac:	f000 fbf2 	bl	8000b94 <Wait_for>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d0f8      	beq.n	80003a8 <Server_Send+0x48>
	sprintf (data, "AT+CIPCLOSE=5\r\n");
 80003b6:	f107 030c 	add.w	r3, r7, #12
 80003ba:	490f      	ldr	r1, [pc, #60]	; (80003f8 <Server_Send+0x98>)
 80003bc:	4618      	mov	r0, r3
 80003be:	f001 ffcb 	bl	8002358 <siprintf>
	Uart_sendstring(data, wifi_uart);
 80003c2:	f107 030c 	add.w	r3, r7, #12
 80003c6:	4909      	ldr	r1, [pc, #36]	; (80003ec <Server_Send+0x8c>)
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 fb52 	bl	8000a72 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 80003ce:	bf00      	nop
 80003d0:	4906      	ldr	r1, [pc, #24]	; (80003ec <Server_Send+0x8c>)
 80003d2:	480a      	ldr	r0, [pc, #40]	; (80003fc <Server_Send+0x9c>)
 80003d4:	f000 fbde 	bl	8000b94 <Wait_for>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d0f8      	beq.n	80003d0 <Server_Send+0x70>
	return 1;
 80003de:	2301      	movs	r3, #1
}
 80003e0:	4618      	mov	r0, r3
 80003e2:	3760      	adds	r7, #96	; 0x60
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	08003214 	.word	0x08003214
 80003ec:	200001e0 	.word	0x200001e0
 80003f0:	08003228 	.word	0x08003228
 80003f4:	0800322c 	.word	0x0800322c
 80003f8:	08003234 	.word	0x08003234
 80003fc:	0800317c 	.word	0x0800317c

08000400 <Server_Handle>:

void Server_Handle (char *str, int Link_ID)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8000406:	af00      	add	r7, sp, #0
 8000408:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800040c:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000410:	6018      	str	r0, [r3, #0]
 8000412:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000416:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800041a:	6019      	str	r1, [r3, #0]
	char datatosend[1024] = {0};
 800041c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000420:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	3304      	adds	r3, #4
 800042a:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 800042e:	2100      	movs	r1, #0
 8000430:	4618      	mov	r0, r3
 8000432:	f001 ff89 	bl	8002348 <memset>
	if (!(strcmp (str, "/ledon")))
 8000436:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800043a:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800043e:	493f      	ldr	r1, [pc, #252]	; (800053c <Server_Handle+0x13c>)
 8000440:	6818      	ldr	r0, [r3, #0]
 8000442:	f7ff fe83 	bl	800014c <strcmp>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d122      	bne.n	8000492 <Server_Handle+0x92>
	{
		sprintf (datatosend, Basic_inclusion);
 800044c:	4b3c      	ldr	r3, [pc, #240]	; (8000540 <Server_Handle+0x140>)
 800044e:	681a      	ldr	r2, [r3, #0]
 8000450:	f107 0308 	add.w	r3, r7, #8
 8000454:	4611      	mov	r1, r2
 8000456:	4618      	mov	r0, r3
 8000458:	f001 ff7e 	bl	8002358 <siprintf>
		strcat(datatosend, LED_ON);
 800045c:	4b39      	ldr	r3, [pc, #228]	; (8000544 <Server_Handle+0x144>)
 800045e:	681a      	ldr	r2, [r3, #0]
 8000460:	f107 0308 	add.w	r3, r7, #8
 8000464:	4611      	mov	r1, r2
 8000466:	4618      	mov	r0, r3
 8000468:	f001 ff96 	bl	8002398 <strcat>
		strcat(datatosend, Terminate);
 800046c:	4b36      	ldr	r3, [pc, #216]	; (8000548 <Server_Handle+0x148>)
 800046e:	681a      	ldr	r2, [r3, #0]
 8000470:	f107 0308 	add.w	r3, r7, #8
 8000474:	4611      	mov	r1, r2
 8000476:	4618      	mov	r0, r3
 8000478:	f001 ff8e 	bl	8002398 <strcat>
		Server_Send(datatosend, Link_ID);
 800047c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000480:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8000484:	f107 0208 	add.w	r2, r7, #8
 8000488:	6819      	ldr	r1, [r3, #0]
 800048a:	4610      	mov	r0, r2
 800048c:	f7ff ff68 	bl	8000360 <Server_Send>
		strcat(datatosend, LED_OFF);
		strcat(datatosend, Terminate);
		Server_Send(datatosend, Link_ID);
	}

}
 8000490:	e04f      	b.n	8000532 <Server_Handle+0x132>
	else if (!(strcmp (str, "/ledoff")))
 8000492:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000496:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800049a:	492c      	ldr	r1, [pc, #176]	; (800054c <Server_Handle+0x14c>)
 800049c:	6818      	ldr	r0, [r3, #0]
 800049e:	f7ff fe55 	bl	800014c <strcmp>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d122      	bne.n	80004ee <Server_Handle+0xee>
		sprintf (datatosend, Basic_inclusion);
 80004a8:	4b25      	ldr	r3, [pc, #148]	; (8000540 <Server_Handle+0x140>)
 80004aa:	681a      	ldr	r2, [r3, #0]
 80004ac:	f107 0308 	add.w	r3, r7, #8
 80004b0:	4611      	mov	r1, r2
 80004b2:	4618      	mov	r0, r3
 80004b4:	f001 ff50 	bl	8002358 <siprintf>
		strcat(datatosend, LED_OFF);
 80004b8:	4b25      	ldr	r3, [pc, #148]	; (8000550 <Server_Handle+0x150>)
 80004ba:	681a      	ldr	r2, [r3, #0]
 80004bc:	f107 0308 	add.w	r3, r7, #8
 80004c0:	4611      	mov	r1, r2
 80004c2:	4618      	mov	r0, r3
 80004c4:	f001 ff68 	bl	8002398 <strcat>
		strcat(datatosend, Terminate);
 80004c8:	4b1f      	ldr	r3, [pc, #124]	; (8000548 <Server_Handle+0x148>)
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	f107 0308 	add.w	r3, r7, #8
 80004d0:	4611      	mov	r1, r2
 80004d2:	4618      	mov	r0, r3
 80004d4:	f001 ff60 	bl	8002398 <strcat>
		Server_Send(datatosend, Link_ID);
 80004d8:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80004dc:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80004e0:	f107 0208 	add.w	r2, r7, #8
 80004e4:	6819      	ldr	r1, [r3, #0]
 80004e6:	4610      	mov	r0, r2
 80004e8:	f7ff ff3a 	bl	8000360 <Server_Send>
}
 80004ec:	e021      	b.n	8000532 <Server_Handle+0x132>
		sprintf (datatosend, Basic_inclusion);
 80004ee:	4b14      	ldr	r3, [pc, #80]	; (8000540 <Server_Handle+0x140>)
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	f107 0308 	add.w	r3, r7, #8
 80004f6:	4611      	mov	r1, r2
 80004f8:	4618      	mov	r0, r3
 80004fa:	f001 ff2d 	bl	8002358 <siprintf>
		strcat(datatosend, LED_OFF);
 80004fe:	4b14      	ldr	r3, [pc, #80]	; (8000550 <Server_Handle+0x150>)
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	f107 0308 	add.w	r3, r7, #8
 8000506:	4611      	mov	r1, r2
 8000508:	4618      	mov	r0, r3
 800050a:	f001 ff45 	bl	8002398 <strcat>
		strcat(datatosend, Terminate);
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <Server_Handle+0x148>)
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	f107 0308 	add.w	r3, r7, #8
 8000516:	4611      	mov	r1, r2
 8000518:	4618      	mov	r0, r3
 800051a:	f001 ff3d 	bl	8002398 <strcat>
		Server_Send(datatosend, Link_ID);
 800051e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000522:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8000526:	f107 0208 	add.w	r2, r7, #8
 800052a:	6819      	ldr	r1, [r3, #0]
 800052c:	4610      	mov	r0, r2
 800052e:	f7ff ff17 	bl	8000360 <Server_Send>
}
 8000532:	bf00      	nop
 8000534:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	08003244 	.word	0x08003244
 8000540:	20000000 	.word	0x20000000
 8000544:	20000004 	.word	0x20000004
 8000548:	2000000c 	.word	0x2000000c
 800054c:	0800324c 	.word	0x0800324c
 8000550:	20000008 	.word	0x20000008

08000554 <Server_Start>:

void Server_Start (void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b092      	sub	sp, #72	; 0x48
 8000558:	af00      	add	r7, sp, #0
	char buftocopyinto[64] = {0};
 800055a:	2300      	movs	r3, #0
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	f107 030c 	add.w	r3, r7, #12
 8000562:	223c      	movs	r2, #60	; 0x3c
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f001 feee 	bl	8002348 <memset>
	char Link_ID;
	while (!(Get_after("+IPD,", 1, &Link_ID, wifi_uart)));
 800056c:	bf00      	nop
 800056e:	1dfa      	adds	r2, r7, #7
 8000570:	4b2c      	ldr	r3, [pc, #176]	; (8000624 <Server_Start+0xd0>)
 8000572:	2101      	movs	r1, #1
 8000574:	482c      	ldr	r0, [pc, #176]	; (8000628 <Server_Start+0xd4>)
 8000576:	f000 fa4d 	bl	8000a14 <Get_after>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d0f6      	beq.n	800056e <Server_Start+0x1a>
	Link_ID -= 48;
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	3b30      	subs	r3, #48	; 0x30
 8000584:	b2db      	uxtb	r3, r3
 8000586:	71fb      	strb	r3, [r7, #7]
	while (!(Copy_upto(" HTTP/1.1", buftocopyinto, wifi_uart)));
 8000588:	bf00      	nop
 800058a:	f107 0308 	add.w	r3, r7, #8
 800058e:	4a25      	ldr	r2, [pc, #148]	; (8000624 <Server_Start+0xd0>)
 8000590:	4619      	mov	r1, r3
 8000592:	4826      	ldr	r0, [pc, #152]	; (800062c <Server_Start+0xd8>)
 8000594:	f000 fa84 	bl	8000aa0 <Copy_upto>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d0f5      	beq.n	800058a <Server_Start+0x36>
	if (Look_for("/ledon", buftocopyinto) == 1)
 800059e:	f107 0308 	add.w	r3, r7, #8
 80005a2:	4619      	mov	r1, r3
 80005a4:	4822      	ldr	r0, [pc, #136]	; (8000630 <Server_Start+0xdc>)
 80005a6:	f000 f8b1 	bl	800070c <Look_for>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d10b      	bne.n	80005c8 <Server_Start+0x74>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b6:	481f      	ldr	r0, [pc, #124]	; (8000634 <Server_Start+0xe0>)
 80005b8:	f001 f98e 	bl	80018d8 <HAL_GPIO_WritePin>
		Server_Handle("/ledon",Link_ID);
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	4619      	mov	r1, r3
 80005c0:	481b      	ldr	r0, [pc, #108]	; (8000630 <Server_Start+0xdc>)
 80005c2:	f7ff ff1d 	bl	8000400 <Server_Handle>
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
		Server_Handle("/ ", Link_ID);
	}
}
 80005c6:	e028      	b.n	800061a <Server_Start+0xc6>
	else if (Look_for("/ledoff", buftocopyinto) == 1)
 80005c8:	f107 0308 	add.w	r3, r7, #8
 80005cc:	4619      	mov	r1, r3
 80005ce:	481a      	ldr	r0, [pc, #104]	; (8000638 <Server_Start+0xe4>)
 80005d0:	f000 f89c 	bl	800070c <Look_for>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d10b      	bne.n	80005f2 <Server_Start+0x9e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e0:	4814      	ldr	r0, [pc, #80]	; (8000634 <Server_Start+0xe0>)
 80005e2:	f001 f979 	bl	80018d8 <HAL_GPIO_WritePin>
		Server_Handle("/ledoff",Link_ID);
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	4619      	mov	r1, r3
 80005ea:	4813      	ldr	r0, [pc, #76]	; (8000638 <Server_Start+0xe4>)
 80005ec:	f7ff ff08 	bl	8000400 <Server_Handle>
}
 80005f0:	e013      	b.n	800061a <Server_Start+0xc6>
	else if (Look_for("/favicon.ico", buftocopyinto) == 1);
 80005f2:	f107 0308 	add.w	r3, r7, #8
 80005f6:	4619      	mov	r1, r3
 80005f8:	4810      	ldr	r0, [pc, #64]	; (800063c <Server_Start+0xe8>)
 80005fa:	f000 f887 	bl	800070c <Look_for>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b01      	cmp	r3, #1
 8000602:	d00a      	beq.n	800061a <Server_Start+0xc6>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000604:	2200      	movs	r2, #0
 8000606:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800060a:	480a      	ldr	r0, [pc, #40]	; (8000634 <Server_Start+0xe0>)
 800060c:	f001 f964 	bl	80018d8 <HAL_GPIO_WritePin>
		Server_Handle("/ ", Link_ID);
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	4619      	mov	r1, r3
 8000614:	480a      	ldr	r0, [pc, #40]	; (8000640 <Server_Start+0xec>)
 8000616:	f7ff fef3 	bl	8000400 <Server_Handle>
}
 800061a:	bf00      	nop
 800061c:	3748      	adds	r7, #72	; 0x48
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200001e0 	.word	0x200001e0
 8000628:	08003254 	.word	0x08003254
 800062c:	0800325c 	.word	0x0800325c
 8000630:	08003244 	.word	0x08003244
 8000634:	40011000 	.word	0x40011000
 8000638:	0800324c 	.word	0x0800324c
 800063c:	08003268 	.word	0x08003268
 8000640:	08003278 	.word	0x08003278

08000644 <Ringbuf_init>:

void store_char (unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 8000648:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <Ringbuf_init+0x64>)
 800064a:	4a18      	ldr	r2, [pc, #96]	; (80006ac <Ringbuf_init+0x68>)
 800064c:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 800064e:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <Ringbuf_init+0x6c>)
 8000650:	4a18      	ldr	r2, [pc, #96]	; (80006b4 <Ringbuf_init+0x70>)
 8000652:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 8000654:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <Ringbuf_init+0x74>)
 8000656:	4a19      	ldr	r2, [pc, #100]	; (80006bc <Ringbuf_init+0x78>)
 8000658:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 800065a:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <Ringbuf_init+0x7c>)
 800065c:	4a19      	ldr	r2, [pc, #100]	; (80006c4 <Ringbuf_init+0x80>)
 800065e:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 8000660:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <Ringbuf_init+0x84>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	695a      	ldr	r2, [r3, #20]
 8000666:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <Ringbuf_init+0x84>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f042 0201 	orr.w	r2, r2, #1
 800066e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_ERR);
 8000670:	4b16      	ldr	r3, [pc, #88]	; (80006cc <Ringbuf_init+0x88>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	695a      	ldr	r2, [r3, #20]
 8000676:	4b15      	ldr	r3, [pc, #84]	; (80006cc <Ringbuf_init+0x88>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f042 0201 	orr.w	r2, r2, #1
 800067e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <Ringbuf_init+0x84>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	68da      	ldr	r2, [r3, #12]
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <Ringbuf_init+0x84>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f042 0220 	orr.w	r2, r2, #32
 800068e:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
 8000690:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <Ringbuf_init+0x88>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	68da      	ldr	r2, [r3, #12]
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <Ringbuf_init+0x88>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f042 0220 	orr.w	r2, r2, #32
 800069e:	60da      	str	r2, [r3, #12]
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	200001d0 	.word	0x200001d0
 80006ac:	200000b0 	.word	0x200000b0
 80006b0:	200001d4 	.word	0x200001d4
 80006b4:	200000f8 	.word	0x200000f8
 80006b8:	200001d8 	.word	0x200001d8
 80006bc:	20000140 	.word	0x20000140
 80006c0:	200001dc 	.word	0x200001dc
 80006c4:	20000188 	.word	0x20000188
 80006c8:	200001e0 	.word	0x200001e0
 80006cc:	20000224 	.word	0x20000224

080006d0 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	6039      	str	r1, [r7, #0]
 80006da:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	3301      	adds	r3, #1
 80006e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006e6:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d007      	beq.n	8000702 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f6:	683a      	ldr	r2, [r7, #0]
 80006f8:	79f9      	ldrb	r1, [r7, #7]
 80006fa:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80006fc:	68fa      	ldr	r2, [r7, #12]
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8000702:	bf00      	nop
 8000704:	3714      	adds	r7, #20
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr

0800070c <Look_for>:


int Look_for (char *str, char *buffertolookinto)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	int stringlength = strlen (str);
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f7ff fd22 	bl	8000160 <strlen>
 800071c:	4603      	mov	r3, r0
 800071e:	60fb      	str	r3, [r7, #12]
	int bufferlength = strlen (buffertolookinto);
 8000720:	6838      	ldr	r0, [r7, #0]
 8000722:	f7ff fd1d 	bl	8000160 <strlen>
 8000726:	4603      	mov	r3, r0
 8000728:	60bb      	str	r3, [r7, #8]
	int so_far = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
	int indx = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
repeat:
	while (str[so_far] != buffertolookinto[indx]) indx++;
 8000732:	e002      	b.n	800073a <Look_for+0x2e>
 8000734:	693b      	ldr	r3, [r7, #16]
 8000736:	3301      	adds	r3, #1
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	4413      	add	r3, r2
 8000740:	781a      	ldrb	r2, [r3, #0]
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	6839      	ldr	r1, [r7, #0]
 8000746:	440b      	add	r3, r1
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	429a      	cmp	r2, r3
 800074c:	d1f2      	bne.n	8000734 <Look_for+0x28>
	if (str[so_far] == buffertolookinto[indx]){
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	4413      	add	r3, r2
 8000754:	781a      	ldrb	r2, [r3, #0]
 8000756:	693b      	ldr	r3, [r7, #16]
 8000758:	6839      	ldr	r1, [r7, #0]
 800075a:	440b      	add	r3, r1
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	429a      	cmp	r2, r3
 8000760:	d111      	bne.n	8000786 <Look_for+0x7a>
	while (str[so_far] == buffertolookinto[indx])
 8000762:	e005      	b.n	8000770 <Look_for+0x64>
	{
		so_far++;
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	3301      	adds	r3, #1
 8000768:	617b      	str	r3, [r7, #20]
		indx++;
 800076a:	693b      	ldr	r3, [r7, #16]
 800076c:	3301      	adds	r3, #1
 800076e:	613b      	str	r3, [r7, #16]
	while (str[so_far] == buffertolookinto[indx])
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	4413      	add	r3, r2
 8000776:	781a      	ldrb	r2, [r3, #0]
 8000778:	693b      	ldr	r3, [r7, #16]
 800077a:	6839      	ldr	r1, [r7, #0]
 800077c:	440b      	add	r3, r1
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	429a      	cmp	r2, r3
 8000782:	d0ef      	beq.n	8000764 <Look_for+0x58>
 8000784:	e008      	b.n	8000798 <Look_for+0x8c>
	}
	}

	else
		{
			so_far =0;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
			if (indx >= bufferlength) return -1;
 800078a:	693a      	ldr	r2, [r7, #16]
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	429a      	cmp	r2, r3
 8000790:	dbcf      	blt.n	8000732 <Look_for+0x26>
 8000792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000796:	e007      	b.n	80007a8 <Look_for+0x9c>
			goto repeat;
		}

	if (so_far == stringlength) return 1;
 8000798:	697a      	ldr	r2, [r7, #20]
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	429a      	cmp	r2, r3
 800079e:	d101      	bne.n	80007a4 <Look_for+0x98>
 80007a0:	2301      	movs	r3, #1
 80007a2:	e001      	b.n	80007a8 <Look_for+0x9c>
	else return -1;
 80007a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <Uart_peek>:
	}
}


int Uart_peek(UART_HandleTypeDef *uart)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4a19      	ldr	r2, [pc, #100]	; (8000820 <Uart_peek+0x70>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d111      	bne.n	80007e4 <Uart_peek+0x34>
	{
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 80007c0:	4b18      	ldr	r3, [pc, #96]	; (8000824 <Uart_peek+0x74>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <Uart_peek+0x74>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d102      	bne.n	80007d6 <Uart_peek+0x26>
		  {
		    return -1;
 80007d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007d4:	e01e      	b.n	8000814 <Uart_peek+0x64>
		  }
		  else
		  {
		    return _rx_buffer1->buffer[_rx_buffer1->tail];
 80007d6:	4b13      	ldr	r3, [pc, #76]	; (8000824 <Uart_peek+0x74>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	4b12      	ldr	r3, [pc, #72]	; (8000824 <Uart_peek+0x74>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e0:	5cd3      	ldrb	r3, [r2, r3]
 80007e2:	e017      	b.n	8000814 <Uart_peek+0x64>
		  }
	}

	else if (uart == pc_uart)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a10      	ldr	r2, [pc, #64]	; (8000828 <Uart_peek+0x78>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d111      	bne.n	8000810 <Uart_peek+0x60>
	{
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <Uart_peek+0x7c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <Uart_peek+0x7c>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d102      	bne.n	8000802 <Uart_peek+0x52>
		  {
		    return -1;
 80007fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000800:	e008      	b.n	8000814 <Uart_peek+0x64>
		  }
		  else
		  {
		    return _rx_buffer2->buffer[_rx_buffer2->tail];
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <Uart_peek+0x7c>)
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <Uart_peek+0x7c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080c:	5cd3      	ldrb	r3, [r2, r3]
 800080e:	e001      	b.n	8000814 <Uart_peek+0x64>
		  }
	}

	return -1;
 8000810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000814:	4618      	mov	r0, r3
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	200001e0 	.word	0x200001e0
 8000824:	200001d0 	.word	0x200001d0
 8000828:	20000224 	.word	0x20000224
 800082c:	200001d8 	.word	0x200001d8

08000830 <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a24      	ldr	r2, [pc, #144]	; (80008cc <Uart_read+0x9c>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d11c      	bne.n	800087a <Uart_read+0x4a>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8000840:	4b23      	ldr	r3, [pc, #140]	; (80008d0 <Uart_read+0xa0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000846:	4b22      	ldr	r3, [pc, #136]	; (80008d0 <Uart_read+0xa0>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084c:	429a      	cmp	r2, r3
 800084e:	d102      	bne.n	8000856 <Uart_read+0x26>
		  {
		    return -1;
 8000850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000854:	e034      	b.n	80008c0 <Uart_read+0x90>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 8000856:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <Uart_read+0xa0>)
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <Uart_read+0xa0>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000860:	5cd3      	ldrb	r3, [r2, r3]
 8000862:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <Uart_read+0xa0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	1c5a      	adds	r2, r3, #1
 800086c:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <Uart_read+0xa0>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000874:	645a      	str	r2, [r3, #68]	; 0x44
		    return c;
 8000876:	7bbb      	ldrb	r3, [r7, #14]
 8000878:	e022      	b.n	80008c0 <Uart_read+0x90>
		  }
	}

	else if (uart == pc_uart)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4a15      	ldr	r2, [pc, #84]	; (80008d4 <Uart_read+0xa4>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d11c      	bne.n	80008bc <Uart_read+0x8c>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <Uart_read+0xa8>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <Uart_read+0xa8>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	429a      	cmp	r2, r3
 8000890:	d102      	bne.n	8000898 <Uart_read+0x68>
		  {
		    return -1;
 8000892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000896:	e013      	b.n	80008c0 <Uart_read+0x90>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <Uart_read+0xa8>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <Uart_read+0xa8>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	5cd3      	ldrb	r3, [r2, r3]
 80008a4:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <Uart_read+0xa8>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ac:	1c5a      	adds	r2, r3, #1
 80008ae:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <Uart_read+0xa8>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008b6:	645a      	str	r2, [r3, #68]	; 0x44
		    return c;
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	e001      	b.n	80008c0 <Uart_read+0x90>
		  }
	}

	else return -1;
 80008bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	200001e0 	.word	0x200001e0
 80008d0:	200001d0 	.word	0x200001d0
 80008d4:	20000224 	.word	0x20000224
 80008d8:	200001d8 	.word	0x200001d8

080008dc <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
	if (c>=0)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	db4c      	blt.n	8000986 <Uart_write+0xaa>
	{
		if (uart == device_uart){
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	4a28      	ldr	r2, [pc, #160]	; (8000990 <Uart_write+0xb4>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d122      	bne.n	800093a <Uart_write+0x5e>
		int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 80008f4:	4b27      	ldr	r3, [pc, #156]	; (8000994 <Uart_write+0xb8>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	3301      	adds	r3, #1
 80008fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000900:	60bb      	str	r3, [r7, #8]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer1->tail);
 8000902:	bf00      	nop
 8000904:	4b23      	ldr	r3, [pc, #140]	; (8000994 <Uart_write+0xb8>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	429a      	cmp	r2, r3
 800090e:	d0f9      	beq.n	8000904 <Uart_write+0x28>

		_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 8000910:	4b20      	ldr	r3, [pc, #128]	; (8000994 <Uart_write+0xb8>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <Uart_write+0xb8>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	6879      	ldr	r1, [r7, #4]
 800091c:	b2c9      	uxtb	r1, r1
 800091e:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = i;
 8000920:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <Uart_write+0xb8>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	68ba      	ldr	r2, [r7, #8]
 8000926:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000928:	4b19      	ldr	r3, [pc, #100]	; (8000990 <Uart_write+0xb4>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	68da      	ldr	r2, [r3, #12]
 800092e:	4b18      	ldr	r3, [pc, #96]	; (8000990 <Uart_write+0xb4>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000936:	60da      	str	r2, [r3, #12]
			_tx_buffer2->head = i;

			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
			}
	}
}
 8000938:	e025      	b.n	8000986 <Uart_write+0xaa>
		else if (uart == pc_uart){
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	4a16      	ldr	r2, [pc, #88]	; (8000998 <Uart_write+0xbc>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d121      	bne.n	8000986 <Uart_write+0xaa>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 8000942:	4b16      	ldr	r3, [pc, #88]	; (800099c <Uart_write+0xc0>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	3301      	adds	r3, #1
 800094a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800094e:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 8000950:	bf00      	nop
 8000952:	4b12      	ldr	r3, [pc, #72]	; (800099c <Uart_write+0xc0>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	429a      	cmp	r2, r3
 800095c:	d0f9      	beq.n	8000952 <Uart_write+0x76>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <Uart_write+0xc0>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <Uart_write+0xc0>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000968:	6879      	ldr	r1, [r7, #4]
 800096a:	b2c9      	uxtb	r1, r1
 800096c:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <Uart_write+0xc0>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <Uart_write+0xbc>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	68da      	ldr	r2, [r3, #12]
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <Uart_write+0xbc>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000984:	60da      	str	r2, [r3, #12]
}
 8000986:	bf00      	nop
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	200001e0 	.word	0x200001e0
 8000994:	200001d4 	.word	0x200001d4
 8000998:	20000224 	.word	0x20000224
 800099c:	200001dc 	.word	0x200001dc

080009a0 <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a16      	ldr	r2, [pc, #88]	; (8000a04 <IsDataAvailable+0x64>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d10e      	bne.n	80009ce <IsDataAvailable+0x2e>
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <IsDataAvailable+0x68>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <IsDataAvailable+0x68>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	b29b      	uxth	r3, r3
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	3340      	adds	r3, #64	; 0x40
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80009cc:	e014      	b.n	80009f8 <IsDataAvailable+0x58>
	else if (uart == pc_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <IsDataAvailable+0x6c>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d10e      	bne.n	80009f4 <IsDataAvailable+0x54>
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <IsDataAvailable+0x70>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	b29a      	uxth	r2, r3
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <IsDataAvailable+0x70>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	1ad3      	subs	r3, r2, r3
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	3340      	adds	r3, #64	; 0x40
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80009f2:	e001      	b.n	80009f8 <IsDataAvailable+0x58>
	return -1;
 80009f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	200001e0 	.word	0x200001e0
 8000a08:	200001d0 	.word	0x200001d0
 8000a0c:	20000224 	.word	0x20000224
 8000a10:	200001d8 	.word	0x200001d8

08000a14 <Get_after>:



int Get_after (char *string, uint8_t numberofchars, char *buffertosave, UART_HandleTypeDef *uart)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	607a      	str	r2, [r7, #4]
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	460b      	mov	r3, r1
 8000a22:	72fb      	strb	r3, [r7, #11]

	while (Wait_for(string, uart) != 1);
 8000a24:	bf00      	nop
 8000a26:	6839      	ldr	r1, [r7, #0]
 8000a28:	68f8      	ldr	r0, [r7, #12]
 8000a2a:	f000 f8b3 	bl	8000b94 <Wait_for>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d1f8      	bne.n	8000a26 <Get_after+0x12>
	for (int indx=0; indx<numberofchars; indx++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	e012      	b.n	8000a60 <Get_after+0x4c>
	{
		while (!(IsDataAvailable(uart)));
 8000a3a:	bf00      	nop
 8000a3c:	6838      	ldr	r0, [r7, #0]
 8000a3e:	f7ff ffaf 	bl	80009a0 <IsDataAvailable>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d0f9      	beq.n	8000a3c <Get_after+0x28>
		buffertosave[indx] = Uart_read(uart);
 8000a48:	6838      	ldr	r0, [r7, #0]
 8000a4a:	f7ff fef1 	bl	8000830 <Uart_read>
 8000a4e:	4601      	mov	r1, r0
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	4413      	add	r3, r2
 8000a56:	b2ca      	uxtb	r2, r1
 8000a58:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	7afb      	ldrb	r3, [r7, #11]
 8000a62:	697a      	ldr	r2, [r7, #20]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	dbe8      	blt.n	8000a3a <Get_after+0x26>
	}
	return 1;
 8000a68:	2301      	movs	r3, #1
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <Uart_sendstring>:

void Uart_sendstring (const char *s, UART_HandleTypeDef *uart)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
 8000a7a:	6039      	str	r1, [r7, #0]
	while(*s!='\0') Uart_write(*s++, uart);
 8000a7c:	e007      	b.n	8000a8e <Uart_sendstring+0x1c>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	1c5a      	adds	r2, r3, #1
 8000a82:	607a      	str	r2, [r7, #4]
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	6839      	ldr	r1, [r7, #0]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff ff27 	bl	80008dc <Uart_write>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d1f3      	bne.n	8000a7e <Uart_sendstring+0xc>
}
 8000a96:	bf00      	nop
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <Copy_upto>:
  while(*s) Uart_write(*s++, uart);
}


int Copy_upto (char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
	int so_far =0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 8000ab0:	68f8      	ldr	r0, [r7, #12]
 8000ab2:	f7ff fb55 	bl	8000160 <strlen>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61bb      	str	r3, [r7, #24]

again:
	while (!IsDataAvailable(uart));
 8000abe:	bf00      	nop
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff ff6d 	bl	80009a0 <IsDataAvailable>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d0f9      	beq.n	8000ac0 <Copy_upto+0x20>
	while (Uart_peek(uart) != string[so_far])
 8000acc:	e01c      	b.n	8000b08 <Copy_upto+0x68>
		{
			buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 8000ace:	4b30      	ldr	r3, [pc, #192]	; (8000b90 <Copy_upto+0xf0>)
 8000ad0:	6819      	ldr	r1, [r3, #0]
 8000ad2:	4b2f      	ldr	r3, [pc, #188]	; (8000b90 <Copy_upto+0xf0>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	68b8      	ldr	r0, [r7, #8]
 8000adc:	4403      	add	r3, r0
 8000ade:	5c8a      	ldrb	r2, [r1, r2]
 8000ae0:	701a      	strb	r2, [r3, #0]
			_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8000ae2:	4b2b      	ldr	r3, [pc, #172]	; (8000b90 <Copy_upto+0xf0>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae8:	1c5a      	adds	r2, r3, #1
 8000aea:	4b29      	ldr	r3, [pc, #164]	; (8000b90 <Copy_upto+0xf0>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000af2:	645a      	str	r2, [r3, #68]	; 0x44
			indx++;
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	3301      	adds	r3, #1
 8000af8:	61bb      	str	r3, [r7, #24]
			while (!IsDataAvailable(uart));
 8000afa:	bf00      	nop
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff ff4f 	bl	80009a0 <IsDataAvailable>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d0f9      	beq.n	8000afc <Copy_upto+0x5c>
	while (Uart_peek(uart) != string[so_far])
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff fe51 	bl	80007b0 <Uart_peek>
 8000b0e:	4601      	mov	r1, r0
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	4413      	add	r3, r2
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4299      	cmp	r1, r3
 8000b1a:	d1d8      	bne.n	8000ace <Copy_upto+0x2e>

		}
	while (Uart_peek(uart) == string [so_far])
 8000b1c:	e01b      	b.n	8000b56 <Copy_upto+0xb6>
	{
		so_far++;
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3301      	adds	r3, #1
 8000b22:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = Uart_read(uart);
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff fe83 	bl	8000830 <Uart_read>
 8000b2a:	4601      	mov	r1, r0
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	1c5a      	adds	r2, r3, #1
 8000b30:	61ba      	str	r2, [r7, #24]
 8000b32:	461a      	mov	r2, r3
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	4413      	add	r3, r2
 8000b38:	b2ca      	uxtb	r2, r1
 8000b3a:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8000b3c:	69fa      	ldr	r2, [r7, #28]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d101      	bne.n	8000b48 <Copy_upto+0xa8>
 8000b44:	2301      	movs	r3, #1
 8000b46:	e01f      	b.n	8000b88 <Copy_upto+0xe8>
		while (!IsDataAvailable(uart));
 8000b48:	bf00      	nop
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff ff28 	bl	80009a0 <IsDataAvailable>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d0f9      	beq.n	8000b4a <Copy_upto+0xaa>
	while (Uart_peek(uart) == string [so_far])
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff fe2a 	bl	80007b0 <Uart_peek>
 8000b5c:	4601      	mov	r1, r0
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	68fa      	ldr	r2, [r7, #12]
 8000b62:	4413      	add	r3, r2
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	4299      	cmp	r1, r3
 8000b68:	d0d9      	beq.n	8000b1e <Copy_upto+0x7e>
	}

	if (so_far != len)
 8000b6a:	69fa      	ldr	r2, [r7, #28]
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d002      	beq.n	8000b78 <Copy_upto+0xd8>
	{
		so_far = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
		goto again;
 8000b76:	e7a2      	b.n	8000abe <Copy_upto+0x1e>
	}

	if (so_far == len) return 1;
 8000b78:	69fa      	ldr	r2, [r7, #28]
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d101      	bne.n	8000b84 <Copy_upto+0xe4>
 8000b80:	2301      	movs	r3, #1
 8000b82:	e001      	b.n	8000b88 <Copy_upto+0xe8>
	else return -1;
 8000b84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3720      	adds	r7, #32
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	200001d0 	.word	0x200001d0

08000b94 <Wait_for>:


int Wait_for (char *string,UART_HandleTypeDef *uart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff fadc 	bl	8000160 <strlen>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	60bb      	str	r3, [r7, #8]

again_device:
	while (!IsDataAvailable(uart));
 8000bac:	bf00      	nop
 8000bae:	6838      	ldr	r0, [r7, #0]
 8000bb0:	f7ff fef6 	bl	80009a0 <IsDataAvailable>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d0f9      	beq.n	8000bae <Wait_for+0x1a>
	if (Uart_peek(uart) != string[so_far])
 8000bba:	6838      	ldr	r0, [r7, #0]
 8000bbc:	f7ff fdf8 	bl	80007b0 <Uart_peek>
 8000bc0:	4601      	mov	r1, r0
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d01c      	beq.n	8000c08 <Wait_for+0x74>
	{
		 _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE ;
 8000bce:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <Wait_for+0xb0>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd4:	1c5a      	adds	r2, r3, #1
 8000bd6:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <Wait_for+0xb0>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000bde:	645a      	str	r2, [r3, #68]	; 0x44
		goto again_device;
 8000be0:	e7e4      	b.n	8000bac <Wait_for+0x18>

	}
	while (Uart_peek(uart) == string [so_far])
	{
		so_far++;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	3301      	adds	r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
		Uart_read(uart);
 8000be8:	6838      	ldr	r0, [r7, #0]
 8000bea:	f7ff fe21 	bl	8000830 <Uart_read>
		if (so_far == len) return 1;
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d101      	bne.n	8000bfa <Wait_for+0x66>
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e01f      	b.n	8000c3a <Wait_for+0xa6>
		while (!IsDataAvailable(uart));
 8000bfa:	bf00      	nop
 8000bfc:	6838      	ldr	r0, [r7, #0]
 8000bfe:	f7ff fecf 	bl	80009a0 <IsDataAvailable>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d0f9      	beq.n	8000bfc <Wait_for+0x68>
	while (Uart_peek(uart) == string [so_far])
 8000c08:	6838      	ldr	r0, [r7, #0]
 8000c0a:	f7ff fdd1 	bl	80007b0 <Uart_peek>
 8000c0e:	4601      	mov	r1, r0
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	d0e2      	beq.n	8000be2 <Wait_for+0x4e>
	}

	if (so_far != len)
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d002      	beq.n	8000c2a <Wait_for+0x96>
	{
		so_far = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
		goto again_device;
 8000c28:	e7c0      	b.n	8000bac <Wait_for+0x18>
	}

	if (so_far == len) return 1;
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d101      	bne.n	8000c36 <Wait_for+0xa2>
 8000c32:	2301      	movs	r3, #1
 8000c34:	e001      	b.n	8000c3a <Wait_for+0xa6>
	else return -1;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200001d0 	.word	0x200001d0

08000c48 <Uart_isr>:

void Uart_isr (UART_HandleTypeDef *huart)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	f003 0320 	and.w	r3, r3, #32
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d023      	beq.n	8000cb2 <Uart_isr+0x6a>
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	f003 0320 	and.w	r3, r3, #32
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d01e      	beq.n	8000cb2 <Uart_isr+0x6a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	73fb      	strb	r3, [r7, #15]
        if (huart == device_uart)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a3a      	ldr	r2, [pc, #232]	; (8000d70 <Uart_isr+0x128>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d107      	bne.n	8000c9a <Uart_isr+0x52>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 8000c8a:	4b3a      	ldr	r3, [pc, #232]	; (8000d74 <Uart_isr+0x12c>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	4611      	mov	r1, r2
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fd1c 	bl	80006d0 <store_char>
        else if (huart == pc_uart)
        {
           	store_char (c, _rx_buffer2);  // store data in buffer
        }

        return;
 8000c98:	e063      	b.n	8000d62 <Uart_isr+0x11a>
        else if (huart == pc_uart)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a36      	ldr	r2, [pc, #216]	; (8000d78 <Uart_isr+0x130>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d15f      	bne.n	8000d62 <Uart_isr+0x11a>
           	store_char (c, _rx_buffer2);  // store data in buffer
 8000ca2:	4b36      	ldr	r3, [pc, #216]	; (8000d7c <Uart_isr+0x134>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	4611      	mov	r1, r2
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fd10 	bl	80006d0 <store_char>
        return;
 8000cb0:	e057      	b.n	8000d62 <Uart_isr+0x11a>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d055      	beq.n	8000d68 <Uart_isr+0x120>
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d050      	beq.n	8000d68 <Uart_isr+0x120>
    {
    	if (huart == device_uart){
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a29      	ldr	r2, [pc, #164]	; (8000d70 <Uart_isr+0x128>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d122      	bne.n	8000d14 <Uart_isr+0xcc>
    	if(tx_buffer1.head == tx_buffer1.tail)
 8000cce:	4b2c      	ldr	r3, [pc, #176]	; (8000d80 <Uart_isr+0x138>)
 8000cd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cd2:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <Uart_isr+0x138>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d108      	bne.n	8000cec <Uart_isr+0xa4>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	68da      	ldr	r2, [r3, #12]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ce8:	60da      	str	r2, [r3, #12]
        	      huart->Instance->SR;
        	      huart->Instance->DR = c;

        	    }
        	}
    	return;
 8000cea:	e03c      	b.n	8000d66 <Uart_isr+0x11e>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8000cec:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <Uart_isr+0x138>)
 8000cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf0:	4a23      	ldr	r2, [pc, #140]	; (8000d80 <Uart_isr+0x138>)
 8000cf2:	5cd3      	ldrb	r3, [r2, r3]
 8000cf4:	737b      	strb	r3, [r7, #13]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8000cf6:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <Uart_isr+0x138>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d00:	4a1f      	ldr	r2, [pc, #124]	; (8000d80 <Uart_isr+0x138>)
 8000d02:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	7b7a      	ldrb	r2, [r7, #13]
 8000d10:	605a      	str	r2, [r3, #4]
    	return;
 8000d12:	e028      	b.n	8000d66 <Uart_isr+0x11e>
    	else if (huart == pc_uart){
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a18      	ldr	r2, [pc, #96]	; (8000d78 <Uart_isr+0x130>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d124      	bne.n	8000d66 <Uart_isr+0x11e>
        	if(tx_buffer2.head == tx_buffer2.tail)
 8000d1c:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <Uart_isr+0x13c>)
 8000d1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d20:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <Uart_isr+0x13c>)
 8000d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d108      	bne.n	8000d3a <Uart_isr+0xf2>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	68da      	ldr	r2, [r3, #12]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d36:	60da      	str	r2, [r3, #12]
    	return;
 8000d38:	e015      	b.n	8000d66 <Uart_isr+0x11e>
        	      unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 8000d3a:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <Uart_isr+0x13c>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	4a11      	ldr	r2, [pc, #68]	; (8000d84 <Uart_isr+0x13c>)
 8000d40:	5cd3      	ldrb	r3, [r2, r3]
 8000d42:	73bb      	strb	r3, [r7, #14]
        	      tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <Uart_isr+0x13c>)
 8000d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d48:	3301      	adds	r3, #1
 8000d4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d4e:	4a0d      	ldr	r2, [pc, #52]	; (8000d84 <Uart_isr+0x13c>)
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
        	      huart->Instance->SR;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
        	      huart->Instance->DR = c;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	7bba      	ldrb	r2, [r7, #14]
 8000d5e:	605a      	str	r2, [r3, #4]
    	return;
 8000d60:	e001      	b.n	8000d66 <Uart_isr+0x11e>
        return;
 8000d62:	bf00      	nop
 8000d64:	e000      	b.n	8000d68 <Uart_isr+0x120>
    	return;
 8000d66:	bf00      	nop
    }
}
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200001e0 	.word	0x200001e0
 8000d74:	200001d0 	.word	0x200001d0
 8000d78:	20000224 	.word	0x20000224
 8000d7c:	200001d8 	.word	0x200001d8
 8000d80:	200000f8 	.word	0x200000f8
 8000d84:	20000188 	.word	0x20000188

08000d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8c:	f000 fa94 	bl	80012b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d90:	f000 f812 	bl	8000db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d94:	f000 f8aa 	bl	8000eec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000d98:	f000 f854 	bl	8000e44 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d9c:	f000 f87c 	bl	8000e98 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ESP_Init("delameta", "bilano1407");
 8000da0:	4903      	ldr	r1, [pc, #12]	; (8000db0 <main+0x28>)
 8000da2:	4804      	ldr	r0, [pc, #16]	; (8000db4 <main+0x2c>)
 8000da4:	f7ff f9e4 	bl	8000170 <ESP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Server_Start();
 8000da8:	f7ff fbd4 	bl	8000554 <Server_Start>
 8000dac:	e7fc      	b.n	8000da8 <main+0x20>
 8000dae:	bf00      	nop
 8000db0:	0800327c 	.word	0x0800327c
 8000db4:	08003288 	.word	0x08003288

08000db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b090      	sub	sp, #64	; 0x40
 8000dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dbe:	f107 0318 	add.w	r3, r7, #24
 8000dc2:	2228      	movs	r2, #40	; 0x28
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f001 fabe 	bl	8002348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000de4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000de8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dea:	2301      	movs	r3, #1
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dee:	2302      	movs	r3, #2
 8000df0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL13;
 8000df8:	f44f 1330 	mov.w	r3, #2883584	; 0x2c0000
 8000dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfe:	f107 0318 	add.w	r3, r7, #24
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 fd80 	bl	8001908 <HAL_RCC_OscConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000e0e:	f000 f8e9 	bl	8000fe4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e12:	230f      	movs	r3, #15
 8000e14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e16:	2302      	movs	r3, #2
 8000e18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	2102      	movs	r1, #2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 ffed 	bl	8001e0c <HAL_RCC_ClockConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000e38:	f000 f8d4 	bl	8000fe4 <Error_Handler>
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	3740      	adds	r7, #64	; 0x40
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e4a:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <MX_USART1_UART_Init+0x50>)
 8000e4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e62:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e68:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6e:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e7c:	f001 f95e 	bl	800213c <HAL_UART_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e86:	f000 f8ad 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200001e0 	.word	0x200001e0
 8000e94:	40013800 	.word	0x40013800

08000e98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000e9e:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <MX_USART2_UART_Init+0x50>)
 8000ea0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000ea4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ea8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000ebe:	220c      	movs	r2, #12
 8000ec0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000ed0:	f001 f934 	bl	800213c <HAL_UART_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eda:	f000 f883 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000224 	.word	0x20000224
 8000ee8:	40004400 	.word	0x40004400

08000eec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef2:	f107 0310 	add.w	r3, r7, #16
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f00:	4b35      	ldr	r3, [pc, #212]	; (8000fd8 <MX_GPIO_Init+0xec>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	4a34      	ldr	r2, [pc, #208]	; (8000fd8 <MX_GPIO_Init+0xec>)
 8000f06:	f043 0310 	orr.w	r3, r3, #16
 8000f0a:	6193      	str	r3, [r2, #24]
 8000f0c:	4b32      	ldr	r3, [pc, #200]	; (8000fd8 <MX_GPIO_Init+0xec>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f003 0310 	and.w	r3, r3, #16
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f18:	4b2f      	ldr	r3, [pc, #188]	; (8000fd8 <MX_GPIO_Init+0xec>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	4a2e      	ldr	r2, [pc, #184]	; (8000fd8 <MX_GPIO_Init+0xec>)
 8000f1e:	f043 0320 	orr.w	r3, r3, #32
 8000f22:	6193      	str	r3, [r2, #24]
 8000f24:	4b2c      	ldr	r3, [pc, #176]	; (8000fd8 <MX_GPIO_Init+0xec>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	f003 0320 	and.w	r3, r3, #32
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f30:	4b29      	ldr	r3, [pc, #164]	; (8000fd8 <MX_GPIO_Init+0xec>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	4a28      	ldr	r2, [pc, #160]	; (8000fd8 <MX_GPIO_Init+0xec>)
 8000f36:	f043 0304 	orr.w	r3, r3, #4
 8000f3a:	6193      	str	r3, [r2, #24]
 8000f3c:	4b26      	ldr	r3, [pc, #152]	; (8000fd8 <MX_GPIO_Init+0xec>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	f003 0304 	and.w	r3, r3, #4
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f48:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <MX_GPIO_Init+0xec>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	4a22      	ldr	r2, [pc, #136]	; (8000fd8 <MX_GPIO_Init+0xec>)
 8000f4e:	f043 0308 	orr.w	r3, r3, #8
 8000f52:	6193      	str	r3, [r2, #24]
 8000f54:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <MX_GPIO_Init+0xec>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	f003 0308 	and.w	r3, r3, #8
 8000f5c:	603b      	str	r3, [r7, #0]
 8000f5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f66:	481d      	ldr	r0, [pc, #116]	; (8000fdc <MX_GPIO_Init+0xf0>)
 8000f68:	f000 fcb6 	bl	80018d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000f72:	481b      	ldr	r0, [pc, #108]	; (8000fe0 <MX_GPIO_Init+0xf4>)
 8000f74:	f000 fcb0 	bl	80018d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2302      	movs	r3, #2
 8000f88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8a:	f107 0310 	add.w	r3, r7, #16
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4812      	ldr	r0, [pc, #72]	; (8000fdc <MX_GPIO_Init+0xf0>)
 8000f92:	f000 fb25 	bl	80015e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000f96:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	4619      	mov	r1, r3
 8000fae:	480c      	ldr	r0, [pc, #48]	; (8000fe0 <MX_GPIO_Init+0xf4>)
 8000fb0:	f000 fb16 	bl	80015e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000fb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc2:	f107 0310 	add.w	r3, r7, #16
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_GPIO_Init+0xf4>)
 8000fca:	f000 fb09 	bl	80015e0 <HAL_GPIO_Init>

}
 8000fce:	bf00      	nop
 8000fd0:	3720      	adds	r7, #32
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40011000 	.word	0x40011000
 8000fe0:	40010c00 	.word	0x40010c00

08000fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe8:	b672      	cpsid	i
}
 8000fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fec:	e7fe      	b.n	8000fec <Error_Handler+0x8>
	...

08000ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <HAL_MspInit+0x5c>)
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	4a14      	ldr	r2, [pc, #80]	; (800104c <HAL_MspInit+0x5c>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6193      	str	r3, [r2, #24]
 8001002:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_MspInit+0x5c>)
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100e:	4b0f      	ldr	r3, [pc, #60]	; (800104c <HAL_MspInit+0x5c>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	4a0e      	ldr	r2, [pc, #56]	; (800104c <HAL_MspInit+0x5c>)
 8001014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001018:	61d3      	str	r3, [r2, #28]
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <HAL_MspInit+0x5c>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <HAL_MspInit+0x60>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_MspInit+0x60>)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001042:	bf00      	nop
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr
 800104c:	40021000 	.word	0x40021000
 8001050:	40010000 	.word	0x40010000

08001054 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0318 	add.w	r3, r7, #24
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a3f      	ldr	r2, [pc, #252]	; (800116c <HAL_UART_MspInit+0x118>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d13a      	bne.n	80010ea <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001074:	4b3e      	ldr	r3, [pc, #248]	; (8001170 <HAL_UART_MspInit+0x11c>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a3d      	ldr	r2, [pc, #244]	; (8001170 <HAL_UART_MspInit+0x11c>)
 800107a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b3b      	ldr	r3, [pc, #236]	; (8001170 <HAL_UART_MspInit+0x11c>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108c:	4b38      	ldr	r3, [pc, #224]	; (8001170 <HAL_UART_MspInit+0x11c>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a37      	ldr	r2, [pc, #220]	; (8001170 <HAL_UART_MspInit+0x11c>)
 8001092:	f043 0304 	orr.w	r3, r3, #4
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b35      	ldr	r3, [pc, #212]	; (8001170 <HAL_UART_MspInit+0x11c>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0304 	and.w	r3, r3, #4
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ae:	2303      	movs	r3, #3
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b2:	f107 0318 	add.w	r3, r7, #24
 80010b6:	4619      	mov	r1, r3
 80010b8:	482e      	ldr	r0, [pc, #184]	; (8001174 <HAL_UART_MspInit+0x120>)
 80010ba:	f000 fa91 	bl	80015e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010cc:	f107 0318 	add.w	r3, r7, #24
 80010d0:	4619      	mov	r1, r3
 80010d2:	4828      	ldr	r0, [pc, #160]	; (8001174 <HAL_UART_MspInit+0x120>)
 80010d4:	f000 fa84 	bl	80015e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	2100      	movs	r1, #0
 80010dc:	2025      	movs	r0, #37	; 0x25
 80010de:	f000 fa48 	bl	8001572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010e2:	2025      	movs	r0, #37	; 0x25
 80010e4:	f000 fa61 	bl	80015aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010e8:	e03c      	b.n	8001164 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a22      	ldr	r2, [pc, #136]	; (8001178 <HAL_UART_MspInit+0x124>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d137      	bne.n	8001164 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010f4:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <HAL_UART_MspInit+0x11c>)
 80010f6:	69db      	ldr	r3, [r3, #28]
 80010f8:	4a1d      	ldr	r2, [pc, #116]	; (8001170 <HAL_UART_MspInit+0x11c>)
 80010fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010fe:	61d3      	str	r3, [r2, #28]
 8001100:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <HAL_UART_MspInit+0x11c>)
 8001102:	69db      	ldr	r3, [r3, #28]
 8001104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110c:	4b18      	ldr	r3, [pc, #96]	; (8001170 <HAL_UART_MspInit+0x11c>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a17      	ldr	r2, [pc, #92]	; (8001170 <HAL_UART_MspInit+0x11c>)
 8001112:	f043 0304 	orr.w	r3, r3, #4
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b15      	ldr	r3, [pc, #84]	; (8001170 <HAL_UART_MspInit+0x11c>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001124:	2304      	movs	r3, #4
 8001126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800112c:	2303      	movs	r3, #3
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	f107 0318 	add.w	r3, r7, #24
 8001134:	4619      	mov	r1, r3
 8001136:	480f      	ldr	r0, [pc, #60]	; (8001174 <HAL_UART_MspInit+0x120>)
 8001138:	f000 fa52 	bl	80015e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800113c:	2308      	movs	r3, #8
 800113e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001148:	f107 0318 	add.w	r3, r7, #24
 800114c:	4619      	mov	r1, r3
 800114e:	4809      	ldr	r0, [pc, #36]	; (8001174 <HAL_UART_MspInit+0x120>)
 8001150:	f000 fa46 	bl	80015e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001154:	2200      	movs	r2, #0
 8001156:	2100      	movs	r1, #0
 8001158:	2026      	movs	r0, #38	; 0x26
 800115a:	f000 fa0a 	bl	8001572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800115e:	2026      	movs	r0, #38	; 0x26
 8001160:	f000 fa23 	bl	80015aa <HAL_NVIC_EnableIRQ>
}
 8001164:	bf00      	nop
 8001166:	3728      	adds	r7, #40	; 0x28
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40013800 	.word	0x40013800
 8001170:	40021000 	.word	0x40021000
 8001174:	40010800 	.word	0x40010800
 8001178:	40004400 	.word	0x40004400

0800117c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <NMI_Handler+0x4>

08001182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <HardFault_Handler+0x4>

08001188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <MemManage_Handler+0x4>

0800118e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001192:	e7fe      	b.n	8001192 <BusFault_Handler+0x4>

08001194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <UsageFault_Handler+0x4>

0800119a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr

080011a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr

080011b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr

080011be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
//	 if(timeout >0)  timeout--;

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c2:	f000 f8bf 	bl	8001344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr (&huart1);
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <USART1_IRQHandler+0x10>)
 80011d2:	f7ff fd39 	bl	8000c48 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
//  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200001e0 	.word	0x200001e0

080011e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr (&huart2);
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <USART2_IRQHandler+0x10>)
 80011e6:	f7ff fd2f 	bl	8000c48 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
//  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000224 	.word	0x20000224

080011f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011fc:	4a14      	ldr	r2, [pc, #80]	; (8001250 <_sbrk+0x5c>)
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <_sbrk+0x60>)
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001208:	4b13      	ldr	r3, [pc, #76]	; (8001258 <_sbrk+0x64>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d102      	bne.n	8001216 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <_sbrk+0x64>)
 8001212:	4a12      	ldr	r2, [pc, #72]	; (800125c <_sbrk+0x68>)
 8001214:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <_sbrk+0x64>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	429a      	cmp	r2, r3
 8001222:	d207      	bcs.n	8001234 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001224:	f001 f866 	bl	80022f4 <__errno>
 8001228:	4603      	mov	r3, r0
 800122a:	220c      	movs	r2, #12
 800122c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800122e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001232:	e009      	b.n	8001248 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <_sbrk+0x64>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800123a:	4b07      	ldr	r3, [pc, #28]	; (8001258 <_sbrk+0x64>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4413      	add	r3, r2
 8001242:	4a05      	ldr	r2, [pc, #20]	; (8001258 <_sbrk+0x64>)
 8001244:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001246:	68fb      	ldr	r3, [r7, #12]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20002800 	.word	0x20002800
 8001254:	00000400 	.word	0x00000400
 8001258:	20000268 	.word	0x20000268
 800125c:	20000280 	.word	0x20000280

08001260 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800126c:	480c      	ldr	r0, [pc, #48]	; (80012a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800126e:	490d      	ldr	r1, [pc, #52]	; (80012a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001270:	4a0d      	ldr	r2, [pc, #52]	; (80012a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001274:	e002      	b.n	800127c <LoopCopyDataInit>

08001276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127a:	3304      	adds	r3, #4

0800127c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800127c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001280:	d3f9      	bcc.n	8001276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001282:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001284:	4c0a      	ldr	r4, [pc, #40]	; (80012b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001288:	e001      	b.n	800128e <LoopFillZerobss>

0800128a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800128c:	3204      	adds	r2, #4

0800128e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001290:	d3fb      	bcc.n	800128a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001292:	f7ff ffe5 	bl	8001260 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001296:	f001 f833 	bl	8002300 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800129a:	f7ff fd75 	bl	8000d88 <main>
  bx lr
 800129e:	4770      	bx	lr
  ldr r0, =_sdata
 80012a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80012a8:	080032f8 	.word	0x080032f8
  ldr r2, =_sbss
 80012ac:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80012b0:	20000280 	.word	0x20000280

080012b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012b4:	e7fe      	b.n	80012b4 <ADC1_2_IRQHandler>
	...

080012b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <HAL_Init+0x28>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a07      	ldr	r2, [pc, #28]	; (80012e0 <HAL_Init+0x28>)
 80012c2:	f043 0310 	orr.w	r3, r3, #16
 80012c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c8:	2003      	movs	r0, #3
 80012ca:	f000 f947 	bl	800155c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ce:	200f      	movs	r0, #15
 80012d0:	f000 f808 	bl	80012e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d4:	f7ff fe8c 	bl	8000ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40022000 	.word	0x40022000

080012e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <HAL_InitTick+0x54>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_InitTick+0x58>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f95f 	bl	80015c6 <HAL_SYSTICK_Config>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e00e      	b.n	8001330 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b0f      	cmp	r3, #15
 8001316:	d80a      	bhi.n	800132e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001318:	2200      	movs	r2, #0
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001320:	f000 f927 	bl	8001572 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001324:	4a06      	ldr	r2, [pc, #24]	; (8001340 <HAL_InitTick+0x5c>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	e000      	b.n	8001330 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
}
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000010 	.word	0x20000010
 800133c:	20000018 	.word	0x20000018
 8001340:	20000014 	.word	0x20000014

08001344 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_IncTick+0x1c>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b05      	ldr	r3, [pc, #20]	; (8001364 <HAL_IncTick+0x20>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4413      	add	r3, r2
 8001354:	4a03      	ldr	r2, [pc, #12]	; (8001364 <HAL_IncTick+0x20>)
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr
 8001360:	20000018 	.word	0x20000018
 8001364:	2000026c 	.word	0x2000026c

08001368 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return uwTick;
 800136c:	4b02      	ldr	r3, [pc, #8]	; (8001378 <HAL_GetTick+0x10>)
 800136e:	681b      	ldr	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	2000026c 	.word	0x2000026c

0800137c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001384:	f7ff fff0 	bl	8001368 <HAL_GetTick>
 8001388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001394:	d005      	beq.n	80013a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <HAL_Delay+0x44>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4413      	add	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013a2:	bf00      	nop
 80013a4:	f7ff ffe0 	bl	8001368 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d8f7      	bhi.n	80013a4 <HAL_Delay+0x28>
  {
  }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000018 	.word	0x20000018

080013c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e0:	4013      	ands	r3, r2
 80013e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f6:	4a04      	ldr	r2, [pc, #16]	; (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	60d3      	str	r3, [r2, #12]
}
 80013fc:	bf00      	nop
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <__NVIC_GetPriorityGrouping+0x18>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	0a1b      	lsrs	r3, r3, #8
 8001416:	f003 0307 	and.w	r3, r3, #7
}
 800141a:	4618      	mov	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	2b00      	cmp	r3, #0
 8001438:	db0b      	blt.n	8001452 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	f003 021f 	and.w	r2, r3, #31
 8001440:	4906      	ldr	r1, [pc, #24]	; (800145c <__NVIC_EnableIRQ+0x34>)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	095b      	lsrs	r3, r3, #5
 8001448:	2001      	movs	r0, #1
 800144a:	fa00 f202 	lsl.w	r2, r0, r2
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	e000e100 	.word	0xe000e100

08001460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	2b00      	cmp	r3, #0
 8001472:	db0a      	blt.n	800148a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	490c      	ldr	r1, [pc, #48]	; (80014ac <__NVIC_SetPriority+0x4c>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	0112      	lsls	r2, r2, #4
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	440b      	add	r3, r1
 8001484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001488:	e00a      	b.n	80014a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4908      	ldr	r1, [pc, #32]	; (80014b0 <__NVIC_SetPriority+0x50>)
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	3b04      	subs	r3, #4
 8001498:	0112      	lsls	r2, r2, #4
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	440b      	add	r3, r1
 800149e:	761a      	strb	r2, [r3, #24]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000e100 	.word	0xe000e100
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	; 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f1c3 0307 	rsb	r3, r3, #7
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	bf28      	it	cs
 80014d2:	2304      	movcs	r3, #4
 80014d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3304      	adds	r3, #4
 80014da:	2b06      	cmp	r3, #6
 80014dc:	d902      	bls.n	80014e4 <NVIC_EncodePriority+0x30>
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3b03      	subs	r3, #3
 80014e2:	e000      	b.n	80014e6 <NVIC_EncodePriority+0x32>
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43da      	mvns	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	401a      	ands	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa01 f303 	lsl.w	r3, r1, r3
 8001506:	43d9      	mvns	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	4313      	orrs	r3, r2
         );
}
 800150e:	4618      	mov	r0, r3
 8001510:	3724      	adds	r7, #36	; 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3b01      	subs	r3, #1
 8001524:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001528:	d301      	bcc.n	800152e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152a:	2301      	movs	r3, #1
 800152c:	e00f      	b.n	800154e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152e:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <SysTick_Config+0x40>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001536:	210f      	movs	r1, #15
 8001538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800153c:	f7ff ff90 	bl	8001460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <SysTick_Config+0x40>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001546:	4b04      	ldr	r3, [pc, #16]	; (8001558 <SysTick_Config+0x40>)
 8001548:	2207      	movs	r2, #7
 800154a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	e000e010 	.word	0xe000e010

0800155c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ff2d 	bl	80013c4 <__NVIC_SetPriorityGrouping>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001572:	b580      	push	{r7, lr}
 8001574:	b086      	sub	sp, #24
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
 800157e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001584:	f7ff ff42 	bl	800140c <__NVIC_GetPriorityGrouping>
 8001588:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	68b9      	ldr	r1, [r7, #8]
 800158e:	6978      	ldr	r0, [r7, #20]
 8001590:	f7ff ff90 	bl	80014b4 <NVIC_EncodePriority>
 8001594:	4602      	mov	r2, r0
 8001596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff5f 	bl	8001460 <__NVIC_SetPriority>
}
 80015a2:	bf00      	nop
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff35 	bl	8001428 <__NVIC_EnableIRQ>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff ffa2 	bl	8001518 <SysTick_Config>
 80015d4:	4603      	mov	r3, r0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b08b      	sub	sp, #44	; 0x2c
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f2:	e161      	b.n	80018b8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015f4:	2201      	movs	r2, #1
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	69fa      	ldr	r2, [r7, #28]
 8001604:	4013      	ands	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	429a      	cmp	r2, r3
 800160e:	f040 8150 	bne.w	80018b2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	4a97      	ldr	r2, [pc, #604]	; (8001874 <HAL_GPIO_Init+0x294>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d05e      	beq.n	80016da <HAL_GPIO_Init+0xfa>
 800161c:	4a95      	ldr	r2, [pc, #596]	; (8001874 <HAL_GPIO_Init+0x294>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d875      	bhi.n	800170e <HAL_GPIO_Init+0x12e>
 8001622:	4a95      	ldr	r2, [pc, #596]	; (8001878 <HAL_GPIO_Init+0x298>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d058      	beq.n	80016da <HAL_GPIO_Init+0xfa>
 8001628:	4a93      	ldr	r2, [pc, #588]	; (8001878 <HAL_GPIO_Init+0x298>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d86f      	bhi.n	800170e <HAL_GPIO_Init+0x12e>
 800162e:	4a93      	ldr	r2, [pc, #588]	; (800187c <HAL_GPIO_Init+0x29c>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d052      	beq.n	80016da <HAL_GPIO_Init+0xfa>
 8001634:	4a91      	ldr	r2, [pc, #580]	; (800187c <HAL_GPIO_Init+0x29c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d869      	bhi.n	800170e <HAL_GPIO_Init+0x12e>
 800163a:	4a91      	ldr	r2, [pc, #580]	; (8001880 <HAL_GPIO_Init+0x2a0>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d04c      	beq.n	80016da <HAL_GPIO_Init+0xfa>
 8001640:	4a8f      	ldr	r2, [pc, #572]	; (8001880 <HAL_GPIO_Init+0x2a0>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d863      	bhi.n	800170e <HAL_GPIO_Init+0x12e>
 8001646:	4a8f      	ldr	r2, [pc, #572]	; (8001884 <HAL_GPIO_Init+0x2a4>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d046      	beq.n	80016da <HAL_GPIO_Init+0xfa>
 800164c:	4a8d      	ldr	r2, [pc, #564]	; (8001884 <HAL_GPIO_Init+0x2a4>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d85d      	bhi.n	800170e <HAL_GPIO_Init+0x12e>
 8001652:	2b12      	cmp	r3, #18
 8001654:	d82a      	bhi.n	80016ac <HAL_GPIO_Init+0xcc>
 8001656:	2b12      	cmp	r3, #18
 8001658:	d859      	bhi.n	800170e <HAL_GPIO_Init+0x12e>
 800165a:	a201      	add	r2, pc, #4	; (adr r2, 8001660 <HAL_GPIO_Init+0x80>)
 800165c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001660:	080016db 	.word	0x080016db
 8001664:	080016b5 	.word	0x080016b5
 8001668:	080016c7 	.word	0x080016c7
 800166c:	08001709 	.word	0x08001709
 8001670:	0800170f 	.word	0x0800170f
 8001674:	0800170f 	.word	0x0800170f
 8001678:	0800170f 	.word	0x0800170f
 800167c:	0800170f 	.word	0x0800170f
 8001680:	0800170f 	.word	0x0800170f
 8001684:	0800170f 	.word	0x0800170f
 8001688:	0800170f 	.word	0x0800170f
 800168c:	0800170f 	.word	0x0800170f
 8001690:	0800170f 	.word	0x0800170f
 8001694:	0800170f 	.word	0x0800170f
 8001698:	0800170f 	.word	0x0800170f
 800169c:	0800170f 	.word	0x0800170f
 80016a0:	0800170f 	.word	0x0800170f
 80016a4:	080016bd 	.word	0x080016bd
 80016a8:	080016d1 	.word	0x080016d1
 80016ac:	4a76      	ldr	r2, [pc, #472]	; (8001888 <HAL_GPIO_Init+0x2a8>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d013      	beq.n	80016da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016b2:	e02c      	b.n	800170e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	623b      	str	r3, [r7, #32]
          break;
 80016ba:	e029      	b.n	8001710 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	3304      	adds	r3, #4
 80016c2:	623b      	str	r3, [r7, #32]
          break;
 80016c4:	e024      	b.n	8001710 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	3308      	adds	r3, #8
 80016cc:	623b      	str	r3, [r7, #32]
          break;
 80016ce:	e01f      	b.n	8001710 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	330c      	adds	r3, #12
 80016d6:	623b      	str	r3, [r7, #32]
          break;
 80016d8:	e01a      	b.n	8001710 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d102      	bne.n	80016e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016e2:	2304      	movs	r3, #4
 80016e4:	623b      	str	r3, [r7, #32]
          break;
 80016e6:	e013      	b.n	8001710 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d105      	bne.n	80016fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016f0:	2308      	movs	r3, #8
 80016f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69fa      	ldr	r2, [r7, #28]
 80016f8:	611a      	str	r2, [r3, #16]
          break;
 80016fa:	e009      	b.n	8001710 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016fc:	2308      	movs	r3, #8
 80016fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	69fa      	ldr	r2, [r7, #28]
 8001704:	615a      	str	r2, [r3, #20]
          break;
 8001706:	e003      	b.n	8001710 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001708:	2300      	movs	r3, #0
 800170a:	623b      	str	r3, [r7, #32]
          break;
 800170c:	e000      	b.n	8001710 <HAL_GPIO_Init+0x130>
          break;
 800170e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	2bff      	cmp	r3, #255	; 0xff
 8001714:	d801      	bhi.n	800171a <HAL_GPIO_Init+0x13a>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	e001      	b.n	800171e <HAL_GPIO_Init+0x13e>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3304      	adds	r3, #4
 800171e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	2bff      	cmp	r3, #255	; 0xff
 8001724:	d802      	bhi.n	800172c <HAL_GPIO_Init+0x14c>
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	e002      	b.n	8001732 <HAL_GPIO_Init+0x152>
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	3b08      	subs	r3, #8
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	210f      	movs	r1, #15
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	fa01 f303 	lsl.w	r3, r1, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	401a      	ands	r2, r3
 8001744:	6a39      	ldr	r1, [r7, #32]
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	fa01 f303 	lsl.w	r3, r1, r3
 800174c:	431a      	orrs	r2, r3
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 80a9 	beq.w	80018b2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001760:	4b4a      	ldr	r3, [pc, #296]	; (800188c <HAL_GPIO_Init+0x2ac>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	4a49      	ldr	r2, [pc, #292]	; (800188c <HAL_GPIO_Init+0x2ac>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	6193      	str	r3, [r2, #24]
 800176c:	4b47      	ldr	r3, [pc, #284]	; (800188c <HAL_GPIO_Init+0x2ac>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001778:	4a45      	ldr	r2, [pc, #276]	; (8001890 <HAL_GPIO_Init+0x2b0>)
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	089b      	lsrs	r3, r3, #2
 800177e:	3302      	adds	r3, #2
 8001780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001784:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	f003 0303 	and.w	r3, r3, #3
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	220f      	movs	r2, #15
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	4013      	ands	r3, r2
 800179a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a3d      	ldr	r2, [pc, #244]	; (8001894 <HAL_GPIO_Init+0x2b4>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d00d      	beq.n	80017c0 <HAL_GPIO_Init+0x1e0>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a3c      	ldr	r2, [pc, #240]	; (8001898 <HAL_GPIO_Init+0x2b8>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d007      	beq.n	80017bc <HAL_GPIO_Init+0x1dc>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a3b      	ldr	r2, [pc, #236]	; (800189c <HAL_GPIO_Init+0x2bc>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d101      	bne.n	80017b8 <HAL_GPIO_Init+0x1d8>
 80017b4:	2302      	movs	r3, #2
 80017b6:	e004      	b.n	80017c2 <HAL_GPIO_Init+0x1e2>
 80017b8:	2303      	movs	r3, #3
 80017ba:	e002      	b.n	80017c2 <HAL_GPIO_Init+0x1e2>
 80017bc:	2301      	movs	r3, #1
 80017be:	e000      	b.n	80017c2 <HAL_GPIO_Init+0x1e2>
 80017c0:	2300      	movs	r3, #0
 80017c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c4:	f002 0203 	and.w	r2, r2, #3
 80017c8:	0092      	lsls	r2, r2, #2
 80017ca:	4093      	lsls	r3, r2
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017d2:	492f      	ldr	r1, [pc, #188]	; (8001890 <HAL_GPIO_Init+0x2b0>)
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	089b      	lsrs	r3, r3, #2
 80017d8:	3302      	adds	r3, #2
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d006      	beq.n	80017fa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017ec:	4b2c      	ldr	r3, [pc, #176]	; (80018a0 <HAL_GPIO_Init+0x2c0>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	492b      	ldr	r1, [pc, #172]	; (80018a0 <HAL_GPIO_Init+0x2c0>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	600b      	str	r3, [r1, #0]
 80017f8:	e006      	b.n	8001808 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017fa:	4b29      	ldr	r3, [pc, #164]	; (80018a0 <HAL_GPIO_Init+0x2c0>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	43db      	mvns	r3, r3
 8001802:	4927      	ldr	r1, [pc, #156]	; (80018a0 <HAL_GPIO_Init+0x2c0>)
 8001804:	4013      	ands	r3, r2
 8001806:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d006      	beq.n	8001822 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001814:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <HAL_GPIO_Init+0x2c0>)
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	4921      	ldr	r1, [pc, #132]	; (80018a0 <HAL_GPIO_Init+0x2c0>)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	4313      	orrs	r3, r2
 800181e:	604b      	str	r3, [r1, #4]
 8001820:	e006      	b.n	8001830 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001822:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <HAL_GPIO_Init+0x2c0>)
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	43db      	mvns	r3, r3
 800182a:	491d      	ldr	r1, [pc, #116]	; (80018a0 <HAL_GPIO_Init+0x2c0>)
 800182c:	4013      	ands	r3, r2
 800182e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d006      	beq.n	800184a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800183c:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <HAL_GPIO_Init+0x2c0>)
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	4917      	ldr	r1, [pc, #92]	; (80018a0 <HAL_GPIO_Init+0x2c0>)
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	4313      	orrs	r3, r2
 8001846:	608b      	str	r3, [r1, #8]
 8001848:	e006      	b.n	8001858 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <HAL_GPIO_Init+0x2c0>)
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	43db      	mvns	r3, r3
 8001852:	4913      	ldr	r1, [pc, #76]	; (80018a0 <HAL_GPIO_Init+0x2c0>)
 8001854:	4013      	ands	r3, r2
 8001856:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d01f      	beq.n	80018a4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <HAL_GPIO_Init+0x2c0>)
 8001866:	68da      	ldr	r2, [r3, #12]
 8001868:	490d      	ldr	r1, [pc, #52]	; (80018a0 <HAL_GPIO_Init+0x2c0>)
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	4313      	orrs	r3, r2
 800186e:	60cb      	str	r3, [r1, #12]
 8001870:	e01f      	b.n	80018b2 <HAL_GPIO_Init+0x2d2>
 8001872:	bf00      	nop
 8001874:	10320000 	.word	0x10320000
 8001878:	10310000 	.word	0x10310000
 800187c:	10220000 	.word	0x10220000
 8001880:	10210000 	.word	0x10210000
 8001884:	10120000 	.word	0x10120000
 8001888:	10110000 	.word	0x10110000
 800188c:	40021000 	.word	0x40021000
 8001890:	40010000 	.word	0x40010000
 8001894:	40010800 	.word	0x40010800
 8001898:	40010c00 	.word	0x40010c00
 800189c:	40011000 	.word	0x40011000
 80018a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_GPIO_Init+0x2f4>)
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	4909      	ldr	r1, [pc, #36]	; (80018d4 <HAL_GPIO_Init+0x2f4>)
 80018ae:	4013      	ands	r3, r2
 80018b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	3301      	adds	r3, #1
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	fa22 f303 	lsr.w	r3, r2, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f47f ae96 	bne.w	80015f4 <HAL_GPIO_Init+0x14>
  }
}
 80018c8:	bf00      	nop
 80018ca:	bf00      	nop
 80018cc:	372c      	adds	r7, #44	; 0x2c
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	40010400 	.word	0x40010400

080018d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	807b      	strh	r3, [r7, #2]
 80018e4:	4613      	mov	r3, r2
 80018e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018e8:	787b      	ldrb	r3, [r7, #1]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ee:	887a      	ldrh	r2, [r7, #2]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018f4:	e003      	b.n	80018fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018f6:	887b      	ldrh	r3, [r7, #2]
 80018f8:	041a      	lsls	r2, r3, #16
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	611a      	str	r2, [r3, #16]
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr

08001908 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e272      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 8087 	beq.w	8001a36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001928:	4b92      	ldr	r3, [pc, #584]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	2b04      	cmp	r3, #4
 8001932:	d00c      	beq.n	800194e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001934:	4b8f      	ldr	r3, [pc, #572]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 030c 	and.w	r3, r3, #12
 800193c:	2b08      	cmp	r3, #8
 800193e:	d112      	bne.n	8001966 <HAL_RCC_OscConfig+0x5e>
 8001940:	4b8c      	ldr	r3, [pc, #560]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800194c:	d10b      	bne.n	8001966 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194e:	4b89      	ldr	r3, [pc, #548]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d06c      	beq.n	8001a34 <HAL_RCC_OscConfig+0x12c>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d168      	bne.n	8001a34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e24c      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196e:	d106      	bne.n	800197e <HAL_RCC_OscConfig+0x76>
 8001970:	4b80      	ldr	r3, [pc, #512]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a7f      	ldr	r2, [pc, #508]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	e02e      	b.n	80019dc <HAL_RCC_OscConfig+0xd4>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10c      	bne.n	80019a0 <HAL_RCC_OscConfig+0x98>
 8001986:	4b7b      	ldr	r3, [pc, #492]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a7a      	ldr	r2, [pc, #488]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 800198c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	4b78      	ldr	r3, [pc, #480]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a77      	ldr	r2, [pc, #476]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001998:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	e01d      	b.n	80019dc <HAL_RCC_OscConfig+0xd4>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019a8:	d10c      	bne.n	80019c4 <HAL_RCC_OscConfig+0xbc>
 80019aa:	4b72      	ldr	r3, [pc, #456]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a71      	ldr	r2, [pc, #452]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 80019b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	4b6f      	ldr	r3, [pc, #444]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a6e      	ldr	r2, [pc, #440]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	e00b      	b.n	80019dc <HAL_RCC_OscConfig+0xd4>
 80019c4:	4b6b      	ldr	r3, [pc, #428]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a6a      	ldr	r2, [pc, #424]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 80019ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b68      	ldr	r3, [pc, #416]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a67      	ldr	r2, [pc, #412]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d013      	beq.n	8001a0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e4:	f7ff fcc0 	bl	8001368 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ec:	f7ff fcbc 	bl	8001368 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b64      	cmp	r3, #100	; 0x64
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e200      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fe:	4b5d      	ldr	r3, [pc, #372]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0xe4>
 8001a0a:	e014      	b.n	8001a36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0c:	f7ff fcac 	bl	8001368 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a14:	f7ff fca8 	bl	8001368 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b64      	cmp	r3, #100	; 0x64
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e1ec      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a26:	4b53      	ldr	r3, [pc, #332]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x10c>
 8001a32:	e000      	b.n	8001a36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d063      	beq.n	8001b0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a42:	4b4c      	ldr	r3, [pc, #304]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 030c 	and.w	r3, r3, #12
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d00b      	beq.n	8001a66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a4e:	4b49      	ldr	r3, [pc, #292]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	2b08      	cmp	r3, #8
 8001a58:	d11c      	bne.n	8001a94 <HAL_RCC_OscConfig+0x18c>
 8001a5a:	4b46      	ldr	r3, [pc, #280]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d116      	bne.n	8001a94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a66:	4b43      	ldr	r3, [pc, #268]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d005      	beq.n	8001a7e <HAL_RCC_OscConfig+0x176>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d001      	beq.n	8001a7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e1c0      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a7e:	4b3d      	ldr	r3, [pc, #244]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	4939      	ldr	r1, [pc, #228]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a92:	e03a      	b.n	8001b0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d020      	beq.n	8001ade <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a9c:	4b36      	ldr	r3, [pc, #216]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa2:	f7ff fc61 	bl	8001368 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aaa:	f7ff fc5d 	bl	8001368 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e1a1      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001abc:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0f0      	beq.n	8001aaa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac8:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	4927      	ldr	r1, [pc, #156]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	600b      	str	r3, [r1, #0]
 8001adc:	e015      	b.n	8001b0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ade:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae4:	f7ff fc40 	bl	8001368 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aec:	f7ff fc3c 	bl	8001368 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e180      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001afe:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d03a      	beq.n	8001b8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d019      	beq.n	8001b52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b1e:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <HAL_RCC_OscConfig+0x274>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b24:	f7ff fc20 	bl	8001368 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fc1c 	bl	8001368 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e160      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b3e:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	f000 fad8 	bl	8002100 <RCC_Delay>
 8001b50:	e01c      	b.n	8001b8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b52:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <HAL_RCC_OscConfig+0x274>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b58:	f7ff fc06 	bl	8001368 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b5e:	e00f      	b.n	8001b80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b60:	f7ff fc02 	bl	8001368 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d908      	bls.n	8001b80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e146      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
 8001b72:	bf00      	nop
 8001b74:	40021000 	.word	0x40021000
 8001b78:	42420000 	.word	0x42420000
 8001b7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b80:	4b92      	ldr	r3, [pc, #584]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1e9      	bne.n	8001b60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 80a6 	beq.w	8001ce6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b9e:	4b8b      	ldr	r3, [pc, #556]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10d      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001baa:	4b88      	ldr	r3, [pc, #544]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	4a87      	ldr	r2, [pc, #540]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	61d3      	str	r3, [r2, #28]
 8001bb6:	4b85      	ldr	r3, [pc, #532]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc6:	4b82      	ldr	r3, [pc, #520]	; (8001dd0 <HAL_RCC_OscConfig+0x4c8>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d118      	bne.n	8001c04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bd2:	4b7f      	ldr	r3, [pc, #508]	; (8001dd0 <HAL_RCC_OscConfig+0x4c8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a7e      	ldr	r2, [pc, #504]	; (8001dd0 <HAL_RCC_OscConfig+0x4c8>)
 8001bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bde:	f7ff fbc3 	bl	8001368 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001be6:	f7ff fbbf 	bl	8001368 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b64      	cmp	r3, #100	; 0x64
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e103      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf8:	4b75      	ldr	r3, [pc, #468]	; (8001dd0 <HAL_RCC_OscConfig+0x4c8>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f0      	beq.n	8001be6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d106      	bne.n	8001c1a <HAL_RCC_OscConfig+0x312>
 8001c0c:	4b6f      	ldr	r3, [pc, #444]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	4a6e      	ldr	r2, [pc, #440]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	6213      	str	r3, [r2, #32]
 8001c18:	e02d      	b.n	8001c76 <HAL_RCC_OscConfig+0x36e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10c      	bne.n	8001c3c <HAL_RCC_OscConfig+0x334>
 8001c22:	4b6a      	ldr	r3, [pc, #424]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	4a69      	ldr	r2, [pc, #420]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001c28:	f023 0301 	bic.w	r3, r3, #1
 8001c2c:	6213      	str	r3, [r2, #32]
 8001c2e:	4b67      	ldr	r3, [pc, #412]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	4a66      	ldr	r2, [pc, #408]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	f023 0304 	bic.w	r3, r3, #4
 8001c38:	6213      	str	r3, [r2, #32]
 8001c3a:	e01c      	b.n	8001c76 <HAL_RCC_OscConfig+0x36e>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	2b05      	cmp	r3, #5
 8001c42:	d10c      	bne.n	8001c5e <HAL_RCC_OscConfig+0x356>
 8001c44:	4b61      	ldr	r3, [pc, #388]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	4a60      	ldr	r2, [pc, #384]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001c4a:	f043 0304 	orr.w	r3, r3, #4
 8001c4e:	6213      	str	r3, [r2, #32]
 8001c50:	4b5e      	ldr	r3, [pc, #376]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	4a5d      	ldr	r2, [pc, #372]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	6213      	str	r3, [r2, #32]
 8001c5c:	e00b      	b.n	8001c76 <HAL_RCC_OscConfig+0x36e>
 8001c5e:	4b5b      	ldr	r3, [pc, #364]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	4a5a      	ldr	r2, [pc, #360]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001c64:	f023 0301 	bic.w	r3, r3, #1
 8001c68:	6213      	str	r3, [r2, #32]
 8001c6a:	4b58      	ldr	r3, [pc, #352]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	4a57      	ldr	r2, [pc, #348]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001c70:	f023 0304 	bic.w	r3, r3, #4
 8001c74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d015      	beq.n	8001caa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7e:	f7ff fb73 	bl	8001368 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c84:	e00a      	b.n	8001c9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c86:	f7ff fb6f 	bl	8001368 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e0b1      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c9c:	4b4b      	ldr	r3, [pc, #300]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0ee      	beq.n	8001c86 <HAL_RCC_OscConfig+0x37e>
 8001ca8:	e014      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001caa:	f7ff fb5d 	bl	8001368 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb0:	e00a      	b.n	8001cc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb2:	f7ff fb59 	bl	8001368 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e09b      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc8:	4b40      	ldr	r3, [pc, #256]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1ee      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cd4:	7dfb      	ldrb	r3, [r7, #23]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d105      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cda:	4b3c      	ldr	r3, [pc, #240]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	4a3b      	ldr	r2, [pc, #236]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ce4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 8087 	beq.w	8001dfe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cf0:	4b36      	ldr	r3, [pc, #216]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 030c 	and.w	r3, r3, #12
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d061      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d146      	bne.n	8001d92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d04:	4b33      	ldr	r3, [pc, #204]	; (8001dd4 <HAL_RCC_OscConfig+0x4cc>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0a:	f7ff fb2d 	bl	8001368 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d12:	f7ff fb29 	bl	8001368 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e06d      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d24:	4b29      	ldr	r3, [pc, #164]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1f0      	bne.n	8001d12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d38:	d108      	bne.n	8001d4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d3a:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	4921      	ldr	r1, [pc, #132]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d4c:	4b1f      	ldr	r3, [pc, #124]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a19      	ldr	r1, [r3, #32]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	430b      	orrs	r3, r1
 8001d5e:	491b      	ldr	r1, [pc, #108]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d64:	4b1b      	ldr	r3, [pc, #108]	; (8001dd4 <HAL_RCC_OscConfig+0x4cc>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6a:	f7ff fafd 	bl	8001368 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d72:	f7ff faf9 	bl	8001368 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e03d      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d84:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x46a>
 8001d90:	e035      	b.n	8001dfe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d92:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <HAL_RCC_OscConfig+0x4cc>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d98:	f7ff fae6 	bl	8001368 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da0:	f7ff fae2 	bl	8001368 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e026      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0x498>
 8001dbe:	e01e      	b.n	8001dfe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d107      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e019      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40007000 	.word	0x40007000
 8001dd4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_RCC_OscConfig+0x500>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d106      	bne.n	8001dfa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d001      	beq.n	8001dfe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40021000 	.word	0x40021000

08001e0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0d0      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e20:	4b6a      	ldr	r3, [pc, #424]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d910      	bls.n	8001e50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2e:	4b67      	ldr	r3, [pc, #412]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 0207 	bic.w	r2, r3, #7
 8001e36:	4965      	ldr	r1, [pc, #404]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3e:	4b63      	ldr	r3, [pc, #396]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d001      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0b8      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d020      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d005      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e68:	4b59      	ldr	r3, [pc, #356]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	4a58      	ldr	r2, [pc, #352]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d005      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e80:	4b53      	ldr	r3, [pc, #332]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	4a52      	ldr	r2, [pc, #328]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e8c:	4b50      	ldr	r3, [pc, #320]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	494d      	ldr	r1, [pc, #308]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d040      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d107      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb2:	4b47      	ldr	r3, [pc, #284]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d115      	bne.n	8001eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e07f      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d107      	bne.n	8001eda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eca:	4b41      	ldr	r3, [pc, #260]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d109      	bne.n	8001eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e073      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eda:	4b3d      	ldr	r3, [pc, #244]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e06b      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eea:	4b39      	ldr	r3, [pc, #228]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f023 0203 	bic.w	r2, r3, #3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	4936      	ldr	r1, [pc, #216]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001efc:	f7ff fa34 	bl	8001368 <HAL_GetTick>
 8001f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f02:	e00a      	b.n	8001f1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f04:	f7ff fa30 	bl	8001368 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e053      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1a:	4b2d      	ldr	r3, [pc, #180]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 020c 	and.w	r2, r3, #12
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d1eb      	bne.n	8001f04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f2c:	4b27      	ldr	r3, [pc, #156]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d210      	bcs.n	8001f5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3a:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f023 0207 	bic.w	r2, r3, #7
 8001f42:	4922      	ldr	r1, [pc, #136]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4a:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d001      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e032      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d008      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f68:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	4916      	ldr	r1, [pc, #88]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d009      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f86:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	490e      	ldr	r1, [pc, #56]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f9a:	f000 f821 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	091b      	lsrs	r3, r3, #4
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	490a      	ldr	r1, [pc, #40]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fac:	5ccb      	ldrb	r3, [r1, r3]
 8001fae:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb2:	4a09      	ldr	r2, [pc, #36]	; (8001fd8 <HAL_RCC_ClockConfig+0x1cc>)
 8001fb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fb6:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <HAL_RCC_ClockConfig+0x1d0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff f992 	bl	80012e4 <HAL_InitTick>

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40022000 	.word	0x40022000
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	080032a4 	.word	0x080032a4
 8001fd8:	20000010 	.word	0x20000010
 8001fdc:	20000014 	.word	0x20000014

08001fe0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe0:	b490      	push	{r4, r7}
 8001fe2:	b08a      	sub	sp, #40	; 0x28
 8001fe4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fe6:	4b29      	ldr	r3, [pc, #164]	; (800208c <HAL_RCC_GetSysClockFreq+0xac>)
 8001fe8:	1d3c      	adds	r4, r7, #4
 8001fea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ff0:	f240 2301 	movw	r3, #513	; 0x201
 8001ff4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61bb      	str	r3, [r7, #24]
 8001ffe:	2300      	movs	r3, #0
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002006:	2300      	movs	r3, #0
 8002008:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800200a:	4b21      	ldr	r3, [pc, #132]	; (8002090 <HAL_RCC_GetSysClockFreq+0xb0>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	2b04      	cmp	r3, #4
 8002018:	d002      	beq.n	8002020 <HAL_RCC_GetSysClockFreq+0x40>
 800201a:	2b08      	cmp	r3, #8
 800201c:	d003      	beq.n	8002026 <HAL_RCC_GetSysClockFreq+0x46>
 800201e:	e02b      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002020:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002022:	623b      	str	r3, [r7, #32]
      break;
 8002024:	e02b      	b.n	800207e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	0c9b      	lsrs	r3, r3, #18
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	3328      	adds	r3, #40	; 0x28
 8002030:	443b      	add	r3, r7
 8002032:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002036:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d012      	beq.n	8002068 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002042:	4b13      	ldr	r3, [pc, #76]	; (8002090 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	0c5b      	lsrs	r3, r3, #17
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	3328      	adds	r3, #40	; 0x28
 800204e:	443b      	add	r3, r7
 8002050:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002054:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	4a0e      	ldr	r2, [pc, #56]	; (8002094 <HAL_RCC_GetSysClockFreq+0xb4>)
 800205a:	fb03 f202 	mul.w	r2, r3, r2
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	fbb2 f3f3 	udiv	r3, r2, r3
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
 8002066:	e004      	b.n	8002072 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	4a0b      	ldr	r2, [pc, #44]	; (8002098 <HAL_RCC_GetSysClockFreq+0xb8>)
 800206c:	fb02 f303 	mul.w	r3, r2, r3
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	623b      	str	r3, [r7, #32]
      break;
 8002076:	e002      	b.n	800207e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <HAL_RCC_GetSysClockFreq+0xb4>)
 800207a:	623b      	str	r3, [r7, #32]
      break;
 800207c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800207e:	6a3b      	ldr	r3, [r7, #32]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3728      	adds	r7, #40	; 0x28
 8002084:	46bd      	mov	sp, r7
 8002086:	bc90      	pop	{r4, r7}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	08003294 	.word	0x08003294
 8002090:	40021000 	.word	0x40021000
 8002094:	007a1200 	.word	0x007a1200
 8002098:	003d0900 	.word	0x003d0900

0800209c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020a0:	4b02      	ldr	r3, [pc, #8]	; (80020ac <HAL_RCC_GetHCLKFreq+0x10>)
 80020a2:	681b      	ldr	r3, [r3, #0]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr
 80020ac:	20000010 	.word	0x20000010

080020b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020b4:	f7ff fff2 	bl	800209c <HAL_RCC_GetHCLKFreq>
 80020b8:	4602      	mov	r2, r0
 80020ba:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	0a1b      	lsrs	r3, r3, #8
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	4903      	ldr	r1, [pc, #12]	; (80020d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020c6:	5ccb      	ldrb	r3, [r1, r3]
 80020c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40021000 	.word	0x40021000
 80020d4:	080032b4 	.word	0x080032b4

080020d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020dc:	f7ff ffde 	bl	800209c <HAL_RCC_GetHCLKFreq>
 80020e0:	4602      	mov	r2, r0
 80020e2:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	0adb      	lsrs	r3, r3, #11
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	4903      	ldr	r1, [pc, #12]	; (80020fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80020ee:	5ccb      	ldrb	r3, [r1, r3]
 80020f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40021000 	.word	0x40021000
 80020fc:	080032b4 	.word	0x080032b4

08002100 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002108:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <RCC_Delay+0x34>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <RCC_Delay+0x38>)
 800210e:	fba2 2303 	umull	r2, r3, r2, r3
 8002112:	0a5b      	lsrs	r3, r3, #9
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	fb02 f303 	mul.w	r3, r2, r3
 800211a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800211c:	bf00      	nop
  }
  while (Delay --);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1e5a      	subs	r2, r3, #1
 8002122:	60fa      	str	r2, [r7, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1f9      	bne.n	800211c <RCC_Delay+0x1c>
}
 8002128:	bf00      	nop
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr
 8002134:	20000010 	.word	0x20000010
 8002138:	10624dd3 	.word	0x10624dd3

0800213c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e03f      	b.n	80021ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d106      	bne.n	8002168 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7fe ff76 	bl	8001054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2224      	movs	r2, #36	; 0x24
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800217e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f829 	bl	80021d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002194:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	695a      	ldr	r2, [r3, #20]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2220      	movs	r2, #32
 80021c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	4313      	orrs	r3, r2
 8002206:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002212:	f023 030c 	bic.w	r3, r3, #12
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	68b9      	ldr	r1, [r7, #8]
 800221c:	430b      	orrs	r3, r1
 800221e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a2c      	ldr	r2, [pc, #176]	; (80022ec <UART_SetConfig+0x114>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d103      	bne.n	8002248 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002240:	f7ff ff4a 	bl	80020d8 <HAL_RCC_GetPCLK2Freq>
 8002244:	60f8      	str	r0, [r7, #12]
 8002246:	e002      	b.n	800224e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002248:	f7ff ff32 	bl	80020b0 <HAL_RCC_GetPCLK1Freq>
 800224c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	009a      	lsls	r2, r3, #2
 8002258:	441a      	add	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	fbb2 f3f3 	udiv	r3, r2, r3
 8002264:	4a22      	ldr	r2, [pc, #136]	; (80022f0 <UART_SetConfig+0x118>)
 8002266:	fba2 2303 	umull	r2, r3, r2, r3
 800226a:	095b      	lsrs	r3, r3, #5
 800226c:	0119      	lsls	r1, r3, #4
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	009a      	lsls	r2, r3, #2
 8002278:	441a      	add	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	fbb2 f2f3 	udiv	r2, r2, r3
 8002284:	4b1a      	ldr	r3, [pc, #104]	; (80022f0 <UART_SetConfig+0x118>)
 8002286:	fba3 0302 	umull	r0, r3, r3, r2
 800228a:	095b      	lsrs	r3, r3, #5
 800228c:	2064      	movs	r0, #100	; 0x64
 800228e:	fb00 f303 	mul.w	r3, r0, r3
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	3332      	adds	r3, #50	; 0x32
 8002298:	4a15      	ldr	r2, [pc, #84]	; (80022f0 <UART_SetConfig+0x118>)
 800229a:	fba2 2303 	umull	r2, r3, r2, r3
 800229e:	095b      	lsrs	r3, r3, #5
 80022a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022a4:	4419      	add	r1, r3
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	009a      	lsls	r2, r3, #2
 80022b0:	441a      	add	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80022bc:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <UART_SetConfig+0x118>)
 80022be:	fba3 0302 	umull	r0, r3, r3, r2
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	2064      	movs	r0, #100	; 0x64
 80022c6:	fb00 f303 	mul.w	r3, r0, r3
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	011b      	lsls	r3, r3, #4
 80022ce:	3332      	adds	r3, #50	; 0x32
 80022d0:	4a07      	ldr	r2, [pc, #28]	; (80022f0 <UART_SetConfig+0x118>)
 80022d2:	fba2 2303 	umull	r2, r3, r2, r3
 80022d6:	095b      	lsrs	r3, r3, #5
 80022d8:	f003 020f 	and.w	r2, r3, #15
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	440a      	add	r2, r1
 80022e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80022e4:	bf00      	nop
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40013800 	.word	0x40013800
 80022f0:	51eb851f 	.word	0x51eb851f

080022f4 <__errno>:
 80022f4:	4b01      	ldr	r3, [pc, #4]	; (80022fc <__errno+0x8>)
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	2000001c 	.word	0x2000001c

08002300 <__libc_init_array>:
 8002300:	b570      	push	{r4, r5, r6, lr}
 8002302:	2600      	movs	r6, #0
 8002304:	4d0c      	ldr	r5, [pc, #48]	; (8002338 <__libc_init_array+0x38>)
 8002306:	4c0d      	ldr	r4, [pc, #52]	; (800233c <__libc_init_array+0x3c>)
 8002308:	1b64      	subs	r4, r4, r5
 800230a:	10a4      	asrs	r4, r4, #2
 800230c:	42a6      	cmp	r6, r4
 800230e:	d109      	bne.n	8002324 <__libc_init_array+0x24>
 8002310:	f000 fcaa 	bl	8002c68 <_init>
 8002314:	2600      	movs	r6, #0
 8002316:	4d0a      	ldr	r5, [pc, #40]	; (8002340 <__libc_init_array+0x40>)
 8002318:	4c0a      	ldr	r4, [pc, #40]	; (8002344 <__libc_init_array+0x44>)
 800231a:	1b64      	subs	r4, r4, r5
 800231c:	10a4      	asrs	r4, r4, #2
 800231e:	42a6      	cmp	r6, r4
 8002320:	d105      	bne.n	800232e <__libc_init_array+0x2e>
 8002322:	bd70      	pop	{r4, r5, r6, pc}
 8002324:	f855 3b04 	ldr.w	r3, [r5], #4
 8002328:	4798      	blx	r3
 800232a:	3601      	adds	r6, #1
 800232c:	e7ee      	b.n	800230c <__libc_init_array+0xc>
 800232e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002332:	4798      	blx	r3
 8002334:	3601      	adds	r6, #1
 8002336:	e7f2      	b.n	800231e <__libc_init_array+0x1e>
 8002338:	080032f0 	.word	0x080032f0
 800233c:	080032f0 	.word	0x080032f0
 8002340:	080032f0 	.word	0x080032f0
 8002344:	080032f4 	.word	0x080032f4

08002348 <memset>:
 8002348:	4603      	mov	r3, r0
 800234a:	4402      	add	r2, r0
 800234c:	4293      	cmp	r3, r2
 800234e:	d100      	bne.n	8002352 <memset+0xa>
 8002350:	4770      	bx	lr
 8002352:	f803 1b01 	strb.w	r1, [r3], #1
 8002356:	e7f9      	b.n	800234c <memset+0x4>

08002358 <siprintf>:
 8002358:	b40e      	push	{r1, r2, r3}
 800235a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800235e:	b500      	push	{lr}
 8002360:	b09c      	sub	sp, #112	; 0x70
 8002362:	ab1d      	add	r3, sp, #116	; 0x74
 8002364:	9002      	str	r0, [sp, #8]
 8002366:	9006      	str	r0, [sp, #24]
 8002368:	9107      	str	r1, [sp, #28]
 800236a:	9104      	str	r1, [sp, #16]
 800236c:	4808      	ldr	r0, [pc, #32]	; (8002390 <siprintf+0x38>)
 800236e:	4909      	ldr	r1, [pc, #36]	; (8002394 <siprintf+0x3c>)
 8002370:	f853 2b04 	ldr.w	r2, [r3], #4
 8002374:	9105      	str	r1, [sp, #20]
 8002376:	6800      	ldr	r0, [r0, #0]
 8002378:	a902      	add	r1, sp, #8
 800237a:	9301      	str	r3, [sp, #4]
 800237c:	f000 f876 	bl	800246c <_svfiprintf_r>
 8002380:	2200      	movs	r2, #0
 8002382:	9b02      	ldr	r3, [sp, #8]
 8002384:	701a      	strb	r2, [r3, #0]
 8002386:	b01c      	add	sp, #112	; 0x70
 8002388:	f85d eb04 	ldr.w	lr, [sp], #4
 800238c:	b003      	add	sp, #12
 800238e:	4770      	bx	lr
 8002390:	2000001c 	.word	0x2000001c
 8002394:	ffff0208 	.word	0xffff0208

08002398 <strcat>:
 8002398:	4602      	mov	r2, r0
 800239a:	b510      	push	{r4, lr}
 800239c:	7814      	ldrb	r4, [r2, #0]
 800239e:	4613      	mov	r3, r2
 80023a0:	3201      	adds	r2, #1
 80023a2:	2c00      	cmp	r4, #0
 80023a4:	d1fa      	bne.n	800239c <strcat+0x4>
 80023a6:	3b01      	subs	r3, #1
 80023a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80023ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 80023b0:	2a00      	cmp	r2, #0
 80023b2:	d1f9      	bne.n	80023a8 <strcat+0x10>
 80023b4:	bd10      	pop	{r4, pc}

080023b6 <__ssputs_r>:
 80023b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023ba:	688e      	ldr	r6, [r1, #8]
 80023bc:	4682      	mov	sl, r0
 80023be:	429e      	cmp	r6, r3
 80023c0:	460c      	mov	r4, r1
 80023c2:	4690      	mov	r8, r2
 80023c4:	461f      	mov	r7, r3
 80023c6:	d838      	bhi.n	800243a <__ssputs_r+0x84>
 80023c8:	898a      	ldrh	r2, [r1, #12]
 80023ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80023ce:	d032      	beq.n	8002436 <__ssputs_r+0x80>
 80023d0:	6825      	ldr	r5, [r4, #0]
 80023d2:	6909      	ldr	r1, [r1, #16]
 80023d4:	3301      	adds	r3, #1
 80023d6:	eba5 0901 	sub.w	r9, r5, r1
 80023da:	6965      	ldr	r5, [r4, #20]
 80023dc:	444b      	add	r3, r9
 80023de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80023e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80023e6:	106d      	asrs	r5, r5, #1
 80023e8:	429d      	cmp	r5, r3
 80023ea:	bf38      	it	cc
 80023ec:	461d      	movcc	r5, r3
 80023ee:	0553      	lsls	r3, r2, #21
 80023f0:	d531      	bpl.n	8002456 <__ssputs_r+0xa0>
 80023f2:	4629      	mov	r1, r5
 80023f4:	f000 fb6e 	bl	8002ad4 <_malloc_r>
 80023f8:	4606      	mov	r6, r0
 80023fa:	b950      	cbnz	r0, 8002412 <__ssputs_r+0x5c>
 80023fc:	230c      	movs	r3, #12
 80023fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002402:	f8ca 3000 	str.w	r3, [sl]
 8002406:	89a3      	ldrh	r3, [r4, #12]
 8002408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800240c:	81a3      	strh	r3, [r4, #12]
 800240e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002412:	464a      	mov	r2, r9
 8002414:	6921      	ldr	r1, [r4, #16]
 8002416:	f000 facd 	bl	80029b4 <memcpy>
 800241a:	89a3      	ldrh	r3, [r4, #12]
 800241c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002424:	81a3      	strh	r3, [r4, #12]
 8002426:	6126      	str	r6, [r4, #16]
 8002428:	444e      	add	r6, r9
 800242a:	6026      	str	r6, [r4, #0]
 800242c:	463e      	mov	r6, r7
 800242e:	6165      	str	r5, [r4, #20]
 8002430:	eba5 0509 	sub.w	r5, r5, r9
 8002434:	60a5      	str	r5, [r4, #8]
 8002436:	42be      	cmp	r6, r7
 8002438:	d900      	bls.n	800243c <__ssputs_r+0x86>
 800243a:	463e      	mov	r6, r7
 800243c:	4632      	mov	r2, r6
 800243e:	4641      	mov	r1, r8
 8002440:	6820      	ldr	r0, [r4, #0]
 8002442:	f000 fac5 	bl	80029d0 <memmove>
 8002446:	68a3      	ldr	r3, [r4, #8]
 8002448:	2000      	movs	r0, #0
 800244a:	1b9b      	subs	r3, r3, r6
 800244c:	60a3      	str	r3, [r4, #8]
 800244e:	6823      	ldr	r3, [r4, #0]
 8002450:	4433      	add	r3, r6
 8002452:	6023      	str	r3, [r4, #0]
 8002454:	e7db      	b.n	800240e <__ssputs_r+0x58>
 8002456:	462a      	mov	r2, r5
 8002458:	f000 fbb0 	bl	8002bbc <_realloc_r>
 800245c:	4606      	mov	r6, r0
 800245e:	2800      	cmp	r0, #0
 8002460:	d1e1      	bne.n	8002426 <__ssputs_r+0x70>
 8002462:	4650      	mov	r0, sl
 8002464:	6921      	ldr	r1, [r4, #16]
 8002466:	f000 facd 	bl	8002a04 <_free_r>
 800246a:	e7c7      	b.n	80023fc <__ssputs_r+0x46>

0800246c <_svfiprintf_r>:
 800246c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002470:	4698      	mov	r8, r3
 8002472:	898b      	ldrh	r3, [r1, #12]
 8002474:	4607      	mov	r7, r0
 8002476:	061b      	lsls	r3, r3, #24
 8002478:	460d      	mov	r5, r1
 800247a:	4614      	mov	r4, r2
 800247c:	b09d      	sub	sp, #116	; 0x74
 800247e:	d50e      	bpl.n	800249e <_svfiprintf_r+0x32>
 8002480:	690b      	ldr	r3, [r1, #16]
 8002482:	b963      	cbnz	r3, 800249e <_svfiprintf_r+0x32>
 8002484:	2140      	movs	r1, #64	; 0x40
 8002486:	f000 fb25 	bl	8002ad4 <_malloc_r>
 800248a:	6028      	str	r0, [r5, #0]
 800248c:	6128      	str	r0, [r5, #16]
 800248e:	b920      	cbnz	r0, 800249a <_svfiprintf_r+0x2e>
 8002490:	230c      	movs	r3, #12
 8002492:	603b      	str	r3, [r7, #0]
 8002494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002498:	e0d1      	b.n	800263e <_svfiprintf_r+0x1d2>
 800249a:	2340      	movs	r3, #64	; 0x40
 800249c:	616b      	str	r3, [r5, #20]
 800249e:	2300      	movs	r3, #0
 80024a0:	9309      	str	r3, [sp, #36]	; 0x24
 80024a2:	2320      	movs	r3, #32
 80024a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80024a8:	2330      	movs	r3, #48	; 0x30
 80024aa:	f04f 0901 	mov.w	r9, #1
 80024ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80024b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002658 <_svfiprintf_r+0x1ec>
 80024b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80024ba:	4623      	mov	r3, r4
 80024bc:	469a      	mov	sl, r3
 80024be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80024c2:	b10a      	cbz	r2, 80024c8 <_svfiprintf_r+0x5c>
 80024c4:	2a25      	cmp	r2, #37	; 0x25
 80024c6:	d1f9      	bne.n	80024bc <_svfiprintf_r+0x50>
 80024c8:	ebba 0b04 	subs.w	fp, sl, r4
 80024cc:	d00b      	beq.n	80024e6 <_svfiprintf_r+0x7a>
 80024ce:	465b      	mov	r3, fp
 80024d0:	4622      	mov	r2, r4
 80024d2:	4629      	mov	r1, r5
 80024d4:	4638      	mov	r0, r7
 80024d6:	f7ff ff6e 	bl	80023b6 <__ssputs_r>
 80024da:	3001      	adds	r0, #1
 80024dc:	f000 80aa 	beq.w	8002634 <_svfiprintf_r+0x1c8>
 80024e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80024e2:	445a      	add	r2, fp
 80024e4:	9209      	str	r2, [sp, #36]	; 0x24
 80024e6:	f89a 3000 	ldrb.w	r3, [sl]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 80a2 	beq.w	8002634 <_svfiprintf_r+0x1c8>
 80024f0:	2300      	movs	r3, #0
 80024f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80024fa:	f10a 0a01 	add.w	sl, sl, #1
 80024fe:	9304      	str	r3, [sp, #16]
 8002500:	9307      	str	r3, [sp, #28]
 8002502:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002506:	931a      	str	r3, [sp, #104]	; 0x68
 8002508:	4654      	mov	r4, sl
 800250a:	2205      	movs	r2, #5
 800250c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002510:	4851      	ldr	r0, [pc, #324]	; (8002658 <_svfiprintf_r+0x1ec>)
 8002512:	f000 fa41 	bl	8002998 <memchr>
 8002516:	9a04      	ldr	r2, [sp, #16]
 8002518:	b9d8      	cbnz	r0, 8002552 <_svfiprintf_r+0xe6>
 800251a:	06d0      	lsls	r0, r2, #27
 800251c:	bf44      	itt	mi
 800251e:	2320      	movmi	r3, #32
 8002520:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002524:	0711      	lsls	r1, r2, #28
 8002526:	bf44      	itt	mi
 8002528:	232b      	movmi	r3, #43	; 0x2b
 800252a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800252e:	f89a 3000 	ldrb.w	r3, [sl]
 8002532:	2b2a      	cmp	r3, #42	; 0x2a
 8002534:	d015      	beq.n	8002562 <_svfiprintf_r+0xf6>
 8002536:	4654      	mov	r4, sl
 8002538:	2000      	movs	r0, #0
 800253a:	f04f 0c0a 	mov.w	ip, #10
 800253e:	9a07      	ldr	r2, [sp, #28]
 8002540:	4621      	mov	r1, r4
 8002542:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002546:	3b30      	subs	r3, #48	; 0x30
 8002548:	2b09      	cmp	r3, #9
 800254a:	d94e      	bls.n	80025ea <_svfiprintf_r+0x17e>
 800254c:	b1b0      	cbz	r0, 800257c <_svfiprintf_r+0x110>
 800254e:	9207      	str	r2, [sp, #28]
 8002550:	e014      	b.n	800257c <_svfiprintf_r+0x110>
 8002552:	eba0 0308 	sub.w	r3, r0, r8
 8002556:	fa09 f303 	lsl.w	r3, r9, r3
 800255a:	4313      	orrs	r3, r2
 800255c:	46a2      	mov	sl, r4
 800255e:	9304      	str	r3, [sp, #16]
 8002560:	e7d2      	b.n	8002508 <_svfiprintf_r+0x9c>
 8002562:	9b03      	ldr	r3, [sp, #12]
 8002564:	1d19      	adds	r1, r3, #4
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	9103      	str	r1, [sp, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	bfbb      	ittet	lt
 800256e:	425b      	neglt	r3, r3
 8002570:	f042 0202 	orrlt.w	r2, r2, #2
 8002574:	9307      	strge	r3, [sp, #28]
 8002576:	9307      	strlt	r3, [sp, #28]
 8002578:	bfb8      	it	lt
 800257a:	9204      	strlt	r2, [sp, #16]
 800257c:	7823      	ldrb	r3, [r4, #0]
 800257e:	2b2e      	cmp	r3, #46	; 0x2e
 8002580:	d10c      	bne.n	800259c <_svfiprintf_r+0x130>
 8002582:	7863      	ldrb	r3, [r4, #1]
 8002584:	2b2a      	cmp	r3, #42	; 0x2a
 8002586:	d135      	bne.n	80025f4 <_svfiprintf_r+0x188>
 8002588:	9b03      	ldr	r3, [sp, #12]
 800258a:	3402      	adds	r4, #2
 800258c:	1d1a      	adds	r2, r3, #4
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	9203      	str	r2, [sp, #12]
 8002592:	2b00      	cmp	r3, #0
 8002594:	bfb8      	it	lt
 8002596:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800259a:	9305      	str	r3, [sp, #20]
 800259c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800265c <_svfiprintf_r+0x1f0>
 80025a0:	2203      	movs	r2, #3
 80025a2:	4650      	mov	r0, sl
 80025a4:	7821      	ldrb	r1, [r4, #0]
 80025a6:	f000 f9f7 	bl	8002998 <memchr>
 80025aa:	b140      	cbz	r0, 80025be <_svfiprintf_r+0x152>
 80025ac:	2340      	movs	r3, #64	; 0x40
 80025ae:	eba0 000a 	sub.w	r0, r0, sl
 80025b2:	fa03 f000 	lsl.w	r0, r3, r0
 80025b6:	9b04      	ldr	r3, [sp, #16]
 80025b8:	3401      	adds	r4, #1
 80025ba:	4303      	orrs	r3, r0
 80025bc:	9304      	str	r3, [sp, #16]
 80025be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025c2:	2206      	movs	r2, #6
 80025c4:	4826      	ldr	r0, [pc, #152]	; (8002660 <_svfiprintf_r+0x1f4>)
 80025c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80025ca:	f000 f9e5 	bl	8002998 <memchr>
 80025ce:	2800      	cmp	r0, #0
 80025d0:	d038      	beq.n	8002644 <_svfiprintf_r+0x1d8>
 80025d2:	4b24      	ldr	r3, [pc, #144]	; (8002664 <_svfiprintf_r+0x1f8>)
 80025d4:	bb1b      	cbnz	r3, 800261e <_svfiprintf_r+0x1b2>
 80025d6:	9b03      	ldr	r3, [sp, #12]
 80025d8:	3307      	adds	r3, #7
 80025da:	f023 0307 	bic.w	r3, r3, #7
 80025de:	3308      	adds	r3, #8
 80025e0:	9303      	str	r3, [sp, #12]
 80025e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025e4:	4433      	add	r3, r6
 80025e6:	9309      	str	r3, [sp, #36]	; 0x24
 80025e8:	e767      	b.n	80024ba <_svfiprintf_r+0x4e>
 80025ea:	460c      	mov	r4, r1
 80025ec:	2001      	movs	r0, #1
 80025ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80025f2:	e7a5      	b.n	8002540 <_svfiprintf_r+0xd4>
 80025f4:	2300      	movs	r3, #0
 80025f6:	f04f 0c0a 	mov.w	ip, #10
 80025fa:	4619      	mov	r1, r3
 80025fc:	3401      	adds	r4, #1
 80025fe:	9305      	str	r3, [sp, #20]
 8002600:	4620      	mov	r0, r4
 8002602:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002606:	3a30      	subs	r2, #48	; 0x30
 8002608:	2a09      	cmp	r2, #9
 800260a:	d903      	bls.n	8002614 <_svfiprintf_r+0x1a8>
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0c5      	beq.n	800259c <_svfiprintf_r+0x130>
 8002610:	9105      	str	r1, [sp, #20]
 8002612:	e7c3      	b.n	800259c <_svfiprintf_r+0x130>
 8002614:	4604      	mov	r4, r0
 8002616:	2301      	movs	r3, #1
 8002618:	fb0c 2101 	mla	r1, ip, r1, r2
 800261c:	e7f0      	b.n	8002600 <_svfiprintf_r+0x194>
 800261e:	ab03      	add	r3, sp, #12
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	462a      	mov	r2, r5
 8002624:	4638      	mov	r0, r7
 8002626:	4b10      	ldr	r3, [pc, #64]	; (8002668 <_svfiprintf_r+0x1fc>)
 8002628:	a904      	add	r1, sp, #16
 800262a:	f3af 8000 	nop.w
 800262e:	1c42      	adds	r2, r0, #1
 8002630:	4606      	mov	r6, r0
 8002632:	d1d6      	bne.n	80025e2 <_svfiprintf_r+0x176>
 8002634:	89ab      	ldrh	r3, [r5, #12]
 8002636:	065b      	lsls	r3, r3, #25
 8002638:	f53f af2c 	bmi.w	8002494 <_svfiprintf_r+0x28>
 800263c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800263e:	b01d      	add	sp, #116	; 0x74
 8002640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002644:	ab03      	add	r3, sp, #12
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	462a      	mov	r2, r5
 800264a:	4638      	mov	r0, r7
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <_svfiprintf_r+0x1fc>)
 800264e:	a904      	add	r1, sp, #16
 8002650:	f000 f87c 	bl	800274c <_printf_i>
 8002654:	e7eb      	b.n	800262e <_svfiprintf_r+0x1c2>
 8002656:	bf00      	nop
 8002658:	080032bc 	.word	0x080032bc
 800265c:	080032c2 	.word	0x080032c2
 8002660:	080032c6 	.word	0x080032c6
 8002664:	00000000 	.word	0x00000000
 8002668:	080023b7 	.word	0x080023b7

0800266c <_printf_common>:
 800266c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002670:	4616      	mov	r6, r2
 8002672:	4699      	mov	r9, r3
 8002674:	688a      	ldr	r2, [r1, #8]
 8002676:	690b      	ldr	r3, [r1, #16]
 8002678:	4607      	mov	r7, r0
 800267a:	4293      	cmp	r3, r2
 800267c:	bfb8      	it	lt
 800267e:	4613      	movlt	r3, r2
 8002680:	6033      	str	r3, [r6, #0]
 8002682:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002686:	460c      	mov	r4, r1
 8002688:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800268c:	b10a      	cbz	r2, 8002692 <_printf_common+0x26>
 800268e:	3301      	adds	r3, #1
 8002690:	6033      	str	r3, [r6, #0]
 8002692:	6823      	ldr	r3, [r4, #0]
 8002694:	0699      	lsls	r1, r3, #26
 8002696:	bf42      	ittt	mi
 8002698:	6833      	ldrmi	r3, [r6, #0]
 800269a:	3302      	addmi	r3, #2
 800269c:	6033      	strmi	r3, [r6, #0]
 800269e:	6825      	ldr	r5, [r4, #0]
 80026a0:	f015 0506 	ands.w	r5, r5, #6
 80026a4:	d106      	bne.n	80026b4 <_printf_common+0x48>
 80026a6:	f104 0a19 	add.w	sl, r4, #25
 80026aa:	68e3      	ldr	r3, [r4, #12]
 80026ac:	6832      	ldr	r2, [r6, #0]
 80026ae:	1a9b      	subs	r3, r3, r2
 80026b0:	42ab      	cmp	r3, r5
 80026b2:	dc28      	bgt.n	8002706 <_printf_common+0x9a>
 80026b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80026b8:	1e13      	subs	r3, r2, #0
 80026ba:	6822      	ldr	r2, [r4, #0]
 80026bc:	bf18      	it	ne
 80026be:	2301      	movne	r3, #1
 80026c0:	0692      	lsls	r2, r2, #26
 80026c2:	d42d      	bmi.n	8002720 <_printf_common+0xb4>
 80026c4:	4649      	mov	r1, r9
 80026c6:	4638      	mov	r0, r7
 80026c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80026cc:	47c0      	blx	r8
 80026ce:	3001      	adds	r0, #1
 80026d0:	d020      	beq.n	8002714 <_printf_common+0xa8>
 80026d2:	6823      	ldr	r3, [r4, #0]
 80026d4:	68e5      	ldr	r5, [r4, #12]
 80026d6:	f003 0306 	and.w	r3, r3, #6
 80026da:	2b04      	cmp	r3, #4
 80026dc:	bf18      	it	ne
 80026de:	2500      	movne	r5, #0
 80026e0:	6832      	ldr	r2, [r6, #0]
 80026e2:	f04f 0600 	mov.w	r6, #0
 80026e6:	68a3      	ldr	r3, [r4, #8]
 80026e8:	bf08      	it	eq
 80026ea:	1aad      	subeq	r5, r5, r2
 80026ec:	6922      	ldr	r2, [r4, #16]
 80026ee:	bf08      	it	eq
 80026f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80026f4:	4293      	cmp	r3, r2
 80026f6:	bfc4      	itt	gt
 80026f8:	1a9b      	subgt	r3, r3, r2
 80026fa:	18ed      	addgt	r5, r5, r3
 80026fc:	341a      	adds	r4, #26
 80026fe:	42b5      	cmp	r5, r6
 8002700:	d11a      	bne.n	8002738 <_printf_common+0xcc>
 8002702:	2000      	movs	r0, #0
 8002704:	e008      	b.n	8002718 <_printf_common+0xac>
 8002706:	2301      	movs	r3, #1
 8002708:	4652      	mov	r2, sl
 800270a:	4649      	mov	r1, r9
 800270c:	4638      	mov	r0, r7
 800270e:	47c0      	blx	r8
 8002710:	3001      	adds	r0, #1
 8002712:	d103      	bne.n	800271c <_printf_common+0xb0>
 8002714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800271c:	3501      	adds	r5, #1
 800271e:	e7c4      	b.n	80026aa <_printf_common+0x3e>
 8002720:	2030      	movs	r0, #48	; 0x30
 8002722:	18e1      	adds	r1, r4, r3
 8002724:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800272e:	4422      	add	r2, r4
 8002730:	3302      	adds	r3, #2
 8002732:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002736:	e7c5      	b.n	80026c4 <_printf_common+0x58>
 8002738:	2301      	movs	r3, #1
 800273a:	4622      	mov	r2, r4
 800273c:	4649      	mov	r1, r9
 800273e:	4638      	mov	r0, r7
 8002740:	47c0      	blx	r8
 8002742:	3001      	adds	r0, #1
 8002744:	d0e6      	beq.n	8002714 <_printf_common+0xa8>
 8002746:	3601      	adds	r6, #1
 8002748:	e7d9      	b.n	80026fe <_printf_common+0x92>
	...

0800274c <_printf_i>:
 800274c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002750:	7e0f      	ldrb	r7, [r1, #24]
 8002752:	4691      	mov	r9, r2
 8002754:	2f78      	cmp	r7, #120	; 0x78
 8002756:	4680      	mov	r8, r0
 8002758:	460c      	mov	r4, r1
 800275a:	469a      	mov	sl, r3
 800275c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800275e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002762:	d807      	bhi.n	8002774 <_printf_i+0x28>
 8002764:	2f62      	cmp	r7, #98	; 0x62
 8002766:	d80a      	bhi.n	800277e <_printf_i+0x32>
 8002768:	2f00      	cmp	r7, #0
 800276a:	f000 80d9 	beq.w	8002920 <_printf_i+0x1d4>
 800276e:	2f58      	cmp	r7, #88	; 0x58
 8002770:	f000 80a4 	beq.w	80028bc <_printf_i+0x170>
 8002774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002778:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800277c:	e03a      	b.n	80027f4 <_printf_i+0xa8>
 800277e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002782:	2b15      	cmp	r3, #21
 8002784:	d8f6      	bhi.n	8002774 <_printf_i+0x28>
 8002786:	a101      	add	r1, pc, #4	; (adr r1, 800278c <_printf_i+0x40>)
 8002788:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800278c:	080027e5 	.word	0x080027e5
 8002790:	080027f9 	.word	0x080027f9
 8002794:	08002775 	.word	0x08002775
 8002798:	08002775 	.word	0x08002775
 800279c:	08002775 	.word	0x08002775
 80027a0:	08002775 	.word	0x08002775
 80027a4:	080027f9 	.word	0x080027f9
 80027a8:	08002775 	.word	0x08002775
 80027ac:	08002775 	.word	0x08002775
 80027b0:	08002775 	.word	0x08002775
 80027b4:	08002775 	.word	0x08002775
 80027b8:	08002907 	.word	0x08002907
 80027bc:	08002829 	.word	0x08002829
 80027c0:	080028e9 	.word	0x080028e9
 80027c4:	08002775 	.word	0x08002775
 80027c8:	08002775 	.word	0x08002775
 80027cc:	08002929 	.word	0x08002929
 80027d0:	08002775 	.word	0x08002775
 80027d4:	08002829 	.word	0x08002829
 80027d8:	08002775 	.word	0x08002775
 80027dc:	08002775 	.word	0x08002775
 80027e0:	080028f1 	.word	0x080028f1
 80027e4:	682b      	ldr	r3, [r5, #0]
 80027e6:	1d1a      	adds	r2, r3, #4
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	602a      	str	r2, [r5, #0]
 80027ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0a4      	b.n	8002942 <_printf_i+0x1f6>
 80027f8:	6820      	ldr	r0, [r4, #0]
 80027fa:	6829      	ldr	r1, [r5, #0]
 80027fc:	0606      	lsls	r6, r0, #24
 80027fe:	f101 0304 	add.w	r3, r1, #4
 8002802:	d50a      	bpl.n	800281a <_printf_i+0xce>
 8002804:	680e      	ldr	r6, [r1, #0]
 8002806:	602b      	str	r3, [r5, #0]
 8002808:	2e00      	cmp	r6, #0
 800280a:	da03      	bge.n	8002814 <_printf_i+0xc8>
 800280c:	232d      	movs	r3, #45	; 0x2d
 800280e:	4276      	negs	r6, r6
 8002810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002814:	230a      	movs	r3, #10
 8002816:	485e      	ldr	r0, [pc, #376]	; (8002990 <_printf_i+0x244>)
 8002818:	e019      	b.n	800284e <_printf_i+0x102>
 800281a:	680e      	ldr	r6, [r1, #0]
 800281c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002820:	602b      	str	r3, [r5, #0]
 8002822:	bf18      	it	ne
 8002824:	b236      	sxthne	r6, r6
 8002826:	e7ef      	b.n	8002808 <_printf_i+0xbc>
 8002828:	682b      	ldr	r3, [r5, #0]
 800282a:	6820      	ldr	r0, [r4, #0]
 800282c:	1d19      	adds	r1, r3, #4
 800282e:	6029      	str	r1, [r5, #0]
 8002830:	0601      	lsls	r1, r0, #24
 8002832:	d501      	bpl.n	8002838 <_printf_i+0xec>
 8002834:	681e      	ldr	r6, [r3, #0]
 8002836:	e002      	b.n	800283e <_printf_i+0xf2>
 8002838:	0646      	lsls	r6, r0, #25
 800283a:	d5fb      	bpl.n	8002834 <_printf_i+0xe8>
 800283c:	881e      	ldrh	r6, [r3, #0]
 800283e:	2f6f      	cmp	r7, #111	; 0x6f
 8002840:	bf0c      	ite	eq
 8002842:	2308      	moveq	r3, #8
 8002844:	230a      	movne	r3, #10
 8002846:	4852      	ldr	r0, [pc, #328]	; (8002990 <_printf_i+0x244>)
 8002848:	2100      	movs	r1, #0
 800284a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800284e:	6865      	ldr	r5, [r4, #4]
 8002850:	2d00      	cmp	r5, #0
 8002852:	bfa8      	it	ge
 8002854:	6821      	ldrge	r1, [r4, #0]
 8002856:	60a5      	str	r5, [r4, #8]
 8002858:	bfa4      	itt	ge
 800285a:	f021 0104 	bicge.w	r1, r1, #4
 800285e:	6021      	strge	r1, [r4, #0]
 8002860:	b90e      	cbnz	r6, 8002866 <_printf_i+0x11a>
 8002862:	2d00      	cmp	r5, #0
 8002864:	d04d      	beq.n	8002902 <_printf_i+0x1b6>
 8002866:	4615      	mov	r5, r2
 8002868:	fbb6 f1f3 	udiv	r1, r6, r3
 800286c:	fb03 6711 	mls	r7, r3, r1, r6
 8002870:	5dc7      	ldrb	r7, [r0, r7]
 8002872:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002876:	4637      	mov	r7, r6
 8002878:	42bb      	cmp	r3, r7
 800287a:	460e      	mov	r6, r1
 800287c:	d9f4      	bls.n	8002868 <_printf_i+0x11c>
 800287e:	2b08      	cmp	r3, #8
 8002880:	d10b      	bne.n	800289a <_printf_i+0x14e>
 8002882:	6823      	ldr	r3, [r4, #0]
 8002884:	07de      	lsls	r6, r3, #31
 8002886:	d508      	bpl.n	800289a <_printf_i+0x14e>
 8002888:	6923      	ldr	r3, [r4, #16]
 800288a:	6861      	ldr	r1, [r4, #4]
 800288c:	4299      	cmp	r1, r3
 800288e:	bfde      	ittt	le
 8002890:	2330      	movle	r3, #48	; 0x30
 8002892:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002896:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800289a:	1b52      	subs	r2, r2, r5
 800289c:	6122      	str	r2, [r4, #16]
 800289e:	464b      	mov	r3, r9
 80028a0:	4621      	mov	r1, r4
 80028a2:	4640      	mov	r0, r8
 80028a4:	f8cd a000 	str.w	sl, [sp]
 80028a8:	aa03      	add	r2, sp, #12
 80028aa:	f7ff fedf 	bl	800266c <_printf_common>
 80028ae:	3001      	adds	r0, #1
 80028b0:	d14c      	bne.n	800294c <_printf_i+0x200>
 80028b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028b6:	b004      	add	sp, #16
 80028b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028bc:	4834      	ldr	r0, [pc, #208]	; (8002990 <_printf_i+0x244>)
 80028be:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80028c2:	6829      	ldr	r1, [r5, #0]
 80028c4:	6823      	ldr	r3, [r4, #0]
 80028c6:	f851 6b04 	ldr.w	r6, [r1], #4
 80028ca:	6029      	str	r1, [r5, #0]
 80028cc:	061d      	lsls	r5, r3, #24
 80028ce:	d514      	bpl.n	80028fa <_printf_i+0x1ae>
 80028d0:	07df      	lsls	r7, r3, #31
 80028d2:	bf44      	itt	mi
 80028d4:	f043 0320 	orrmi.w	r3, r3, #32
 80028d8:	6023      	strmi	r3, [r4, #0]
 80028da:	b91e      	cbnz	r6, 80028e4 <_printf_i+0x198>
 80028dc:	6823      	ldr	r3, [r4, #0]
 80028de:	f023 0320 	bic.w	r3, r3, #32
 80028e2:	6023      	str	r3, [r4, #0]
 80028e4:	2310      	movs	r3, #16
 80028e6:	e7af      	b.n	8002848 <_printf_i+0xfc>
 80028e8:	6823      	ldr	r3, [r4, #0]
 80028ea:	f043 0320 	orr.w	r3, r3, #32
 80028ee:	6023      	str	r3, [r4, #0]
 80028f0:	2378      	movs	r3, #120	; 0x78
 80028f2:	4828      	ldr	r0, [pc, #160]	; (8002994 <_printf_i+0x248>)
 80028f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80028f8:	e7e3      	b.n	80028c2 <_printf_i+0x176>
 80028fa:	0659      	lsls	r1, r3, #25
 80028fc:	bf48      	it	mi
 80028fe:	b2b6      	uxthmi	r6, r6
 8002900:	e7e6      	b.n	80028d0 <_printf_i+0x184>
 8002902:	4615      	mov	r5, r2
 8002904:	e7bb      	b.n	800287e <_printf_i+0x132>
 8002906:	682b      	ldr	r3, [r5, #0]
 8002908:	6826      	ldr	r6, [r4, #0]
 800290a:	1d18      	adds	r0, r3, #4
 800290c:	6961      	ldr	r1, [r4, #20]
 800290e:	6028      	str	r0, [r5, #0]
 8002910:	0635      	lsls	r5, r6, #24
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	d501      	bpl.n	800291a <_printf_i+0x1ce>
 8002916:	6019      	str	r1, [r3, #0]
 8002918:	e002      	b.n	8002920 <_printf_i+0x1d4>
 800291a:	0670      	lsls	r0, r6, #25
 800291c:	d5fb      	bpl.n	8002916 <_printf_i+0x1ca>
 800291e:	8019      	strh	r1, [r3, #0]
 8002920:	2300      	movs	r3, #0
 8002922:	4615      	mov	r5, r2
 8002924:	6123      	str	r3, [r4, #16]
 8002926:	e7ba      	b.n	800289e <_printf_i+0x152>
 8002928:	682b      	ldr	r3, [r5, #0]
 800292a:	2100      	movs	r1, #0
 800292c:	1d1a      	adds	r2, r3, #4
 800292e:	602a      	str	r2, [r5, #0]
 8002930:	681d      	ldr	r5, [r3, #0]
 8002932:	6862      	ldr	r2, [r4, #4]
 8002934:	4628      	mov	r0, r5
 8002936:	f000 f82f 	bl	8002998 <memchr>
 800293a:	b108      	cbz	r0, 8002940 <_printf_i+0x1f4>
 800293c:	1b40      	subs	r0, r0, r5
 800293e:	6060      	str	r0, [r4, #4]
 8002940:	6863      	ldr	r3, [r4, #4]
 8002942:	6123      	str	r3, [r4, #16]
 8002944:	2300      	movs	r3, #0
 8002946:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800294a:	e7a8      	b.n	800289e <_printf_i+0x152>
 800294c:	462a      	mov	r2, r5
 800294e:	4649      	mov	r1, r9
 8002950:	4640      	mov	r0, r8
 8002952:	6923      	ldr	r3, [r4, #16]
 8002954:	47d0      	blx	sl
 8002956:	3001      	adds	r0, #1
 8002958:	d0ab      	beq.n	80028b2 <_printf_i+0x166>
 800295a:	6823      	ldr	r3, [r4, #0]
 800295c:	079b      	lsls	r3, r3, #30
 800295e:	d413      	bmi.n	8002988 <_printf_i+0x23c>
 8002960:	68e0      	ldr	r0, [r4, #12]
 8002962:	9b03      	ldr	r3, [sp, #12]
 8002964:	4298      	cmp	r0, r3
 8002966:	bfb8      	it	lt
 8002968:	4618      	movlt	r0, r3
 800296a:	e7a4      	b.n	80028b6 <_printf_i+0x16a>
 800296c:	2301      	movs	r3, #1
 800296e:	4632      	mov	r2, r6
 8002970:	4649      	mov	r1, r9
 8002972:	4640      	mov	r0, r8
 8002974:	47d0      	blx	sl
 8002976:	3001      	adds	r0, #1
 8002978:	d09b      	beq.n	80028b2 <_printf_i+0x166>
 800297a:	3501      	adds	r5, #1
 800297c:	68e3      	ldr	r3, [r4, #12]
 800297e:	9903      	ldr	r1, [sp, #12]
 8002980:	1a5b      	subs	r3, r3, r1
 8002982:	42ab      	cmp	r3, r5
 8002984:	dcf2      	bgt.n	800296c <_printf_i+0x220>
 8002986:	e7eb      	b.n	8002960 <_printf_i+0x214>
 8002988:	2500      	movs	r5, #0
 800298a:	f104 0619 	add.w	r6, r4, #25
 800298e:	e7f5      	b.n	800297c <_printf_i+0x230>
 8002990:	080032cd 	.word	0x080032cd
 8002994:	080032de 	.word	0x080032de

08002998 <memchr>:
 8002998:	4603      	mov	r3, r0
 800299a:	b510      	push	{r4, lr}
 800299c:	b2c9      	uxtb	r1, r1
 800299e:	4402      	add	r2, r0
 80029a0:	4293      	cmp	r3, r2
 80029a2:	4618      	mov	r0, r3
 80029a4:	d101      	bne.n	80029aa <memchr+0x12>
 80029a6:	2000      	movs	r0, #0
 80029a8:	e003      	b.n	80029b2 <memchr+0x1a>
 80029aa:	7804      	ldrb	r4, [r0, #0]
 80029ac:	3301      	adds	r3, #1
 80029ae:	428c      	cmp	r4, r1
 80029b0:	d1f6      	bne.n	80029a0 <memchr+0x8>
 80029b2:	bd10      	pop	{r4, pc}

080029b4 <memcpy>:
 80029b4:	440a      	add	r2, r1
 80029b6:	4291      	cmp	r1, r2
 80029b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80029bc:	d100      	bne.n	80029c0 <memcpy+0xc>
 80029be:	4770      	bx	lr
 80029c0:	b510      	push	{r4, lr}
 80029c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80029c6:	4291      	cmp	r1, r2
 80029c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80029cc:	d1f9      	bne.n	80029c2 <memcpy+0xe>
 80029ce:	bd10      	pop	{r4, pc}

080029d0 <memmove>:
 80029d0:	4288      	cmp	r0, r1
 80029d2:	b510      	push	{r4, lr}
 80029d4:	eb01 0402 	add.w	r4, r1, r2
 80029d8:	d902      	bls.n	80029e0 <memmove+0x10>
 80029da:	4284      	cmp	r4, r0
 80029dc:	4623      	mov	r3, r4
 80029de:	d807      	bhi.n	80029f0 <memmove+0x20>
 80029e0:	1e43      	subs	r3, r0, #1
 80029e2:	42a1      	cmp	r1, r4
 80029e4:	d008      	beq.n	80029f8 <memmove+0x28>
 80029e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80029ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80029ee:	e7f8      	b.n	80029e2 <memmove+0x12>
 80029f0:	4601      	mov	r1, r0
 80029f2:	4402      	add	r2, r0
 80029f4:	428a      	cmp	r2, r1
 80029f6:	d100      	bne.n	80029fa <memmove+0x2a>
 80029f8:	bd10      	pop	{r4, pc}
 80029fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80029fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002a02:	e7f7      	b.n	80029f4 <memmove+0x24>

08002a04 <_free_r>:
 8002a04:	b538      	push	{r3, r4, r5, lr}
 8002a06:	4605      	mov	r5, r0
 8002a08:	2900      	cmp	r1, #0
 8002a0a:	d040      	beq.n	8002a8e <_free_r+0x8a>
 8002a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a10:	1f0c      	subs	r4, r1, #4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	bfb8      	it	lt
 8002a16:	18e4      	addlt	r4, r4, r3
 8002a18:	f000 f910 	bl	8002c3c <__malloc_lock>
 8002a1c:	4a1c      	ldr	r2, [pc, #112]	; (8002a90 <_free_r+0x8c>)
 8002a1e:	6813      	ldr	r3, [r2, #0]
 8002a20:	b933      	cbnz	r3, 8002a30 <_free_r+0x2c>
 8002a22:	6063      	str	r3, [r4, #4]
 8002a24:	6014      	str	r4, [r2, #0]
 8002a26:	4628      	mov	r0, r5
 8002a28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a2c:	f000 b90c 	b.w	8002c48 <__malloc_unlock>
 8002a30:	42a3      	cmp	r3, r4
 8002a32:	d908      	bls.n	8002a46 <_free_r+0x42>
 8002a34:	6820      	ldr	r0, [r4, #0]
 8002a36:	1821      	adds	r1, r4, r0
 8002a38:	428b      	cmp	r3, r1
 8002a3a:	bf01      	itttt	eq
 8002a3c:	6819      	ldreq	r1, [r3, #0]
 8002a3e:	685b      	ldreq	r3, [r3, #4]
 8002a40:	1809      	addeq	r1, r1, r0
 8002a42:	6021      	streq	r1, [r4, #0]
 8002a44:	e7ed      	b.n	8002a22 <_free_r+0x1e>
 8002a46:	461a      	mov	r2, r3
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	b10b      	cbz	r3, 8002a50 <_free_r+0x4c>
 8002a4c:	42a3      	cmp	r3, r4
 8002a4e:	d9fa      	bls.n	8002a46 <_free_r+0x42>
 8002a50:	6811      	ldr	r1, [r2, #0]
 8002a52:	1850      	adds	r0, r2, r1
 8002a54:	42a0      	cmp	r0, r4
 8002a56:	d10b      	bne.n	8002a70 <_free_r+0x6c>
 8002a58:	6820      	ldr	r0, [r4, #0]
 8002a5a:	4401      	add	r1, r0
 8002a5c:	1850      	adds	r0, r2, r1
 8002a5e:	4283      	cmp	r3, r0
 8002a60:	6011      	str	r1, [r2, #0]
 8002a62:	d1e0      	bne.n	8002a26 <_free_r+0x22>
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	4401      	add	r1, r0
 8002a6a:	6011      	str	r1, [r2, #0]
 8002a6c:	6053      	str	r3, [r2, #4]
 8002a6e:	e7da      	b.n	8002a26 <_free_r+0x22>
 8002a70:	d902      	bls.n	8002a78 <_free_r+0x74>
 8002a72:	230c      	movs	r3, #12
 8002a74:	602b      	str	r3, [r5, #0]
 8002a76:	e7d6      	b.n	8002a26 <_free_r+0x22>
 8002a78:	6820      	ldr	r0, [r4, #0]
 8002a7a:	1821      	adds	r1, r4, r0
 8002a7c:	428b      	cmp	r3, r1
 8002a7e:	bf01      	itttt	eq
 8002a80:	6819      	ldreq	r1, [r3, #0]
 8002a82:	685b      	ldreq	r3, [r3, #4]
 8002a84:	1809      	addeq	r1, r1, r0
 8002a86:	6021      	streq	r1, [r4, #0]
 8002a88:	6063      	str	r3, [r4, #4]
 8002a8a:	6054      	str	r4, [r2, #4]
 8002a8c:	e7cb      	b.n	8002a26 <_free_r+0x22>
 8002a8e:	bd38      	pop	{r3, r4, r5, pc}
 8002a90:	20000270 	.word	0x20000270

08002a94 <sbrk_aligned>:
 8002a94:	b570      	push	{r4, r5, r6, lr}
 8002a96:	4e0e      	ldr	r6, [pc, #56]	; (8002ad0 <sbrk_aligned+0x3c>)
 8002a98:	460c      	mov	r4, r1
 8002a9a:	6831      	ldr	r1, [r6, #0]
 8002a9c:	4605      	mov	r5, r0
 8002a9e:	b911      	cbnz	r1, 8002aa6 <sbrk_aligned+0x12>
 8002aa0:	f000 f8bc 	bl	8002c1c <_sbrk_r>
 8002aa4:	6030      	str	r0, [r6, #0]
 8002aa6:	4621      	mov	r1, r4
 8002aa8:	4628      	mov	r0, r5
 8002aaa:	f000 f8b7 	bl	8002c1c <_sbrk_r>
 8002aae:	1c43      	adds	r3, r0, #1
 8002ab0:	d00a      	beq.n	8002ac8 <sbrk_aligned+0x34>
 8002ab2:	1cc4      	adds	r4, r0, #3
 8002ab4:	f024 0403 	bic.w	r4, r4, #3
 8002ab8:	42a0      	cmp	r0, r4
 8002aba:	d007      	beq.n	8002acc <sbrk_aligned+0x38>
 8002abc:	1a21      	subs	r1, r4, r0
 8002abe:	4628      	mov	r0, r5
 8002ac0:	f000 f8ac 	bl	8002c1c <_sbrk_r>
 8002ac4:	3001      	adds	r0, #1
 8002ac6:	d101      	bne.n	8002acc <sbrk_aligned+0x38>
 8002ac8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002acc:	4620      	mov	r0, r4
 8002ace:	bd70      	pop	{r4, r5, r6, pc}
 8002ad0:	20000274 	.word	0x20000274

08002ad4 <_malloc_r>:
 8002ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ad8:	1ccd      	adds	r5, r1, #3
 8002ada:	f025 0503 	bic.w	r5, r5, #3
 8002ade:	3508      	adds	r5, #8
 8002ae0:	2d0c      	cmp	r5, #12
 8002ae2:	bf38      	it	cc
 8002ae4:	250c      	movcc	r5, #12
 8002ae6:	2d00      	cmp	r5, #0
 8002ae8:	4607      	mov	r7, r0
 8002aea:	db01      	blt.n	8002af0 <_malloc_r+0x1c>
 8002aec:	42a9      	cmp	r1, r5
 8002aee:	d905      	bls.n	8002afc <_malloc_r+0x28>
 8002af0:	230c      	movs	r3, #12
 8002af2:	2600      	movs	r6, #0
 8002af4:	603b      	str	r3, [r7, #0]
 8002af6:	4630      	mov	r0, r6
 8002af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002afc:	4e2e      	ldr	r6, [pc, #184]	; (8002bb8 <_malloc_r+0xe4>)
 8002afe:	f000 f89d 	bl	8002c3c <__malloc_lock>
 8002b02:	6833      	ldr	r3, [r6, #0]
 8002b04:	461c      	mov	r4, r3
 8002b06:	bb34      	cbnz	r4, 8002b56 <_malloc_r+0x82>
 8002b08:	4629      	mov	r1, r5
 8002b0a:	4638      	mov	r0, r7
 8002b0c:	f7ff ffc2 	bl	8002a94 <sbrk_aligned>
 8002b10:	1c43      	adds	r3, r0, #1
 8002b12:	4604      	mov	r4, r0
 8002b14:	d14d      	bne.n	8002bb2 <_malloc_r+0xde>
 8002b16:	6834      	ldr	r4, [r6, #0]
 8002b18:	4626      	mov	r6, r4
 8002b1a:	2e00      	cmp	r6, #0
 8002b1c:	d140      	bne.n	8002ba0 <_malloc_r+0xcc>
 8002b1e:	6823      	ldr	r3, [r4, #0]
 8002b20:	4631      	mov	r1, r6
 8002b22:	4638      	mov	r0, r7
 8002b24:	eb04 0803 	add.w	r8, r4, r3
 8002b28:	f000 f878 	bl	8002c1c <_sbrk_r>
 8002b2c:	4580      	cmp	r8, r0
 8002b2e:	d13a      	bne.n	8002ba6 <_malloc_r+0xd2>
 8002b30:	6821      	ldr	r1, [r4, #0]
 8002b32:	3503      	adds	r5, #3
 8002b34:	1a6d      	subs	r5, r5, r1
 8002b36:	f025 0503 	bic.w	r5, r5, #3
 8002b3a:	3508      	adds	r5, #8
 8002b3c:	2d0c      	cmp	r5, #12
 8002b3e:	bf38      	it	cc
 8002b40:	250c      	movcc	r5, #12
 8002b42:	4638      	mov	r0, r7
 8002b44:	4629      	mov	r1, r5
 8002b46:	f7ff ffa5 	bl	8002a94 <sbrk_aligned>
 8002b4a:	3001      	adds	r0, #1
 8002b4c:	d02b      	beq.n	8002ba6 <_malloc_r+0xd2>
 8002b4e:	6823      	ldr	r3, [r4, #0]
 8002b50:	442b      	add	r3, r5
 8002b52:	6023      	str	r3, [r4, #0]
 8002b54:	e00e      	b.n	8002b74 <_malloc_r+0xa0>
 8002b56:	6822      	ldr	r2, [r4, #0]
 8002b58:	1b52      	subs	r2, r2, r5
 8002b5a:	d41e      	bmi.n	8002b9a <_malloc_r+0xc6>
 8002b5c:	2a0b      	cmp	r2, #11
 8002b5e:	d916      	bls.n	8002b8e <_malloc_r+0xba>
 8002b60:	1961      	adds	r1, r4, r5
 8002b62:	42a3      	cmp	r3, r4
 8002b64:	6025      	str	r5, [r4, #0]
 8002b66:	bf18      	it	ne
 8002b68:	6059      	strne	r1, [r3, #4]
 8002b6a:	6863      	ldr	r3, [r4, #4]
 8002b6c:	bf08      	it	eq
 8002b6e:	6031      	streq	r1, [r6, #0]
 8002b70:	5162      	str	r2, [r4, r5]
 8002b72:	604b      	str	r3, [r1, #4]
 8002b74:	4638      	mov	r0, r7
 8002b76:	f104 060b 	add.w	r6, r4, #11
 8002b7a:	f000 f865 	bl	8002c48 <__malloc_unlock>
 8002b7e:	f026 0607 	bic.w	r6, r6, #7
 8002b82:	1d23      	adds	r3, r4, #4
 8002b84:	1af2      	subs	r2, r6, r3
 8002b86:	d0b6      	beq.n	8002af6 <_malloc_r+0x22>
 8002b88:	1b9b      	subs	r3, r3, r6
 8002b8a:	50a3      	str	r3, [r4, r2]
 8002b8c:	e7b3      	b.n	8002af6 <_malloc_r+0x22>
 8002b8e:	6862      	ldr	r2, [r4, #4]
 8002b90:	42a3      	cmp	r3, r4
 8002b92:	bf0c      	ite	eq
 8002b94:	6032      	streq	r2, [r6, #0]
 8002b96:	605a      	strne	r2, [r3, #4]
 8002b98:	e7ec      	b.n	8002b74 <_malloc_r+0xa0>
 8002b9a:	4623      	mov	r3, r4
 8002b9c:	6864      	ldr	r4, [r4, #4]
 8002b9e:	e7b2      	b.n	8002b06 <_malloc_r+0x32>
 8002ba0:	4634      	mov	r4, r6
 8002ba2:	6876      	ldr	r6, [r6, #4]
 8002ba4:	e7b9      	b.n	8002b1a <_malloc_r+0x46>
 8002ba6:	230c      	movs	r3, #12
 8002ba8:	4638      	mov	r0, r7
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	f000 f84c 	bl	8002c48 <__malloc_unlock>
 8002bb0:	e7a1      	b.n	8002af6 <_malloc_r+0x22>
 8002bb2:	6025      	str	r5, [r4, #0]
 8002bb4:	e7de      	b.n	8002b74 <_malloc_r+0xa0>
 8002bb6:	bf00      	nop
 8002bb8:	20000270 	.word	0x20000270

08002bbc <_realloc_r>:
 8002bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bc0:	4680      	mov	r8, r0
 8002bc2:	4614      	mov	r4, r2
 8002bc4:	460e      	mov	r6, r1
 8002bc6:	b921      	cbnz	r1, 8002bd2 <_realloc_r+0x16>
 8002bc8:	4611      	mov	r1, r2
 8002bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002bce:	f7ff bf81 	b.w	8002ad4 <_malloc_r>
 8002bd2:	b92a      	cbnz	r2, 8002be0 <_realloc_r+0x24>
 8002bd4:	f7ff ff16 	bl	8002a04 <_free_r>
 8002bd8:	4625      	mov	r5, r4
 8002bda:	4628      	mov	r0, r5
 8002bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002be0:	f000 f838 	bl	8002c54 <_malloc_usable_size_r>
 8002be4:	4284      	cmp	r4, r0
 8002be6:	4607      	mov	r7, r0
 8002be8:	d802      	bhi.n	8002bf0 <_realloc_r+0x34>
 8002bea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002bee:	d812      	bhi.n	8002c16 <_realloc_r+0x5a>
 8002bf0:	4621      	mov	r1, r4
 8002bf2:	4640      	mov	r0, r8
 8002bf4:	f7ff ff6e 	bl	8002ad4 <_malloc_r>
 8002bf8:	4605      	mov	r5, r0
 8002bfa:	2800      	cmp	r0, #0
 8002bfc:	d0ed      	beq.n	8002bda <_realloc_r+0x1e>
 8002bfe:	42bc      	cmp	r4, r7
 8002c00:	4622      	mov	r2, r4
 8002c02:	4631      	mov	r1, r6
 8002c04:	bf28      	it	cs
 8002c06:	463a      	movcs	r2, r7
 8002c08:	f7ff fed4 	bl	80029b4 <memcpy>
 8002c0c:	4631      	mov	r1, r6
 8002c0e:	4640      	mov	r0, r8
 8002c10:	f7ff fef8 	bl	8002a04 <_free_r>
 8002c14:	e7e1      	b.n	8002bda <_realloc_r+0x1e>
 8002c16:	4635      	mov	r5, r6
 8002c18:	e7df      	b.n	8002bda <_realloc_r+0x1e>
	...

08002c1c <_sbrk_r>:
 8002c1c:	b538      	push	{r3, r4, r5, lr}
 8002c1e:	2300      	movs	r3, #0
 8002c20:	4d05      	ldr	r5, [pc, #20]	; (8002c38 <_sbrk_r+0x1c>)
 8002c22:	4604      	mov	r4, r0
 8002c24:	4608      	mov	r0, r1
 8002c26:	602b      	str	r3, [r5, #0]
 8002c28:	f7fe fae4 	bl	80011f4 <_sbrk>
 8002c2c:	1c43      	adds	r3, r0, #1
 8002c2e:	d102      	bne.n	8002c36 <_sbrk_r+0x1a>
 8002c30:	682b      	ldr	r3, [r5, #0]
 8002c32:	b103      	cbz	r3, 8002c36 <_sbrk_r+0x1a>
 8002c34:	6023      	str	r3, [r4, #0]
 8002c36:	bd38      	pop	{r3, r4, r5, pc}
 8002c38:	20000278 	.word	0x20000278

08002c3c <__malloc_lock>:
 8002c3c:	4801      	ldr	r0, [pc, #4]	; (8002c44 <__malloc_lock+0x8>)
 8002c3e:	f000 b811 	b.w	8002c64 <__retarget_lock_acquire_recursive>
 8002c42:	bf00      	nop
 8002c44:	2000027c 	.word	0x2000027c

08002c48 <__malloc_unlock>:
 8002c48:	4801      	ldr	r0, [pc, #4]	; (8002c50 <__malloc_unlock+0x8>)
 8002c4a:	f000 b80c 	b.w	8002c66 <__retarget_lock_release_recursive>
 8002c4e:	bf00      	nop
 8002c50:	2000027c 	.word	0x2000027c

08002c54 <_malloc_usable_size_r>:
 8002c54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c58:	1f18      	subs	r0, r3, #4
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	bfbc      	itt	lt
 8002c5e:	580b      	ldrlt	r3, [r1, r0]
 8002c60:	18c0      	addlt	r0, r0, r3
 8002c62:	4770      	bx	lr

08002c64 <__retarget_lock_acquire_recursive>:
 8002c64:	4770      	bx	lr

08002c66 <__retarget_lock_release_recursive>:
 8002c66:	4770      	bx	lr

08002c68 <_init>:
 8002c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c6a:	bf00      	nop
 8002c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c6e:	bc08      	pop	{r3}
 8002c70:	469e      	mov	lr, r3
 8002c72:	4770      	bx	lr

08002c74 <_fini>:
 8002c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c76:	bf00      	nop
 8002c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c7a:	bc08      	pop	{r3}
 8002c7c:	469e      	mov	lr, r3
 8002c7e:	4770      	bx	lr
