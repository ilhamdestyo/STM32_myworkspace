
STM32F746G_DISCO_uSD_FATFS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b8c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  08009d5c  08009d5c  00019d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a294  0800a294  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a294  0800a294  0001a294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a29c  0800a29c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a29c  0800a29c  0001a29c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2a0  0800a2a0  0001a2a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800a2a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000818  20000078  0800a31c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00008400  20000890  0800a31c  00020890  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f5b4  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a1a  00000000  00000000  0002f65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  00032078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b48  00000000  00000000  00032d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028480  00000000  00000000  00033880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000129b2  00000000  00000000  0005bd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e80c6  00000000  00000000  0006e6b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00156778  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035a4  00000000  00000000  001567c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009d44 	.word	0x08009d44

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08009d44 	.word	0x08009d44

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f000 fff7 	bl	80015aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f80c 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 f8e6 	bl	8000790 <MX_GPIO_Init>
  MX_DMA_Init();
 80005c4:	f000 f8be 	bl	8000744 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80005c8:	f000 f89a 	bl	8000700 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80005cc:	f005 f87e 	bl	80056cc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  SD_Card_Init();
 80005d0:	f000 fefa 	bl	80013c8 <SD_Card_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <main+0x20>
	...

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0b4      	sub	sp, #208	; 0xd0
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80005e2:	2230      	movs	r2, #48	; 0x30
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f008 ff36 	bl	8009458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	2284      	movs	r2, #132	; 0x84
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f008 ff27 	bl	8009458 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060a:	4b3b      	ldr	r3, [pc, #236]	; (80006f8 <SystemClock_Config+0x120>)
 800060c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060e:	4a3a      	ldr	r2, [pc, #232]	; (80006f8 <SystemClock_Config+0x120>)
 8000610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000614:	6413      	str	r3, [r2, #64]	; 0x40
 8000616:	4b38      	ldr	r3, [pc, #224]	; (80006f8 <SystemClock_Config+0x120>)
 8000618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000622:	4b36      	ldr	r3, [pc, #216]	; (80006fc <SystemClock_Config+0x124>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a35      	ldr	r2, [pc, #212]	; (80006fc <SystemClock_Config+0x124>)
 8000628:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800062c:	6013      	str	r3, [r2, #0]
 800062e:	4b33      	ldr	r3, [pc, #204]	; (80006fc <SystemClock_Config+0x124>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063a:	2302      	movs	r3, #2
 800063c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000640:	2301      	movs	r3, #1
 8000642:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000646:	2310      	movs	r3, #16
 8000648:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064c:	2302      	movs	r3, #2
 800064e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000652:	2300      	movs	r3, #0
 8000654:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000658:	2308      	movs	r3, #8
 800065a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 800065e:	23d8      	movs	r3, #216	; 0xd8
 8000660:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800066a:	2309      	movs	r3, #9
 800066c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000674:	4618      	mov	r0, r3
 8000676:	f001 fe65 	bl	8002344 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000680:	f000 fcfa 	bl	8001078 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000684:	f001 fe0e 	bl	80022a4 <HAL_PWREx_EnableOverDrive>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800068e:	f000 fcf3 	bl	8001078 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000692:	230f      	movs	r3, #15
 8000694:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2302      	movs	r3, #2
 800069a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006b4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006b8:	2107      	movs	r1, #7
 80006ba:	4618      	mov	r0, r3
 80006bc:	f002 f8e6 	bl	800288c <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80006c6:	f000 fcd7 	bl	8001078 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 80006ca:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 80006ce:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80006d6:	2300      	movs	r3, #0
 80006d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 fa85 	bl	8002bf0 <HAL_RCCEx_PeriphCLKConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x118>
  {
    Error_Handler();
 80006ec:	f000 fcc4 	bl	8001078 <Error_Handler>
  }
}
 80006f0:	bf00      	nop
 80006f2:	37d0      	adds	r7, #208	; 0xd0
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000704:	4b0d      	ldr	r3, [pc, #52]	; (800073c <MX_SDMMC1_SD_Init+0x3c>)
 8000706:	4a0e      	ldr	r2, [pc, #56]	; (8000740 <MX_SDMMC1_SD_Init+0x40>)
 8000708:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_SDMMC1_SD_Init+0x3c>)
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_SDMMC1_SD_Init+0x3c>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_SDMMC1_SD_Init+0x3c>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <MX_SDMMC1_SD_Init+0x3c>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_SDMMC1_SD_Init+0x3c>)
 8000724:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000728:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800072a:	4b04      	ldr	r3, [pc, #16]	; (800073c <MX_SDMMC1_SD_Init+0x3c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	20000094 	.word	0x20000094
 8000740:	40012c00 	.word	0x40012c00

08000744 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_DMA_Init+0x48>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a0f      	ldr	r2, [pc, #60]	; (800078c <MX_DMA_Init+0x48>)
 8000750:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <MX_DMA_Init+0x48>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	203b      	movs	r0, #59	; 0x3b
 8000768:	f001 f87b 	bl	8001862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800076c:	203b      	movs	r0, #59	; 0x3b
 800076e:	f001 f894 	bl	800189a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	2045      	movs	r0, #69	; 0x45
 8000778:	f001 f873 	bl	8001862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800077c:	2045      	movs	r0, #69	; 0x45
 800077e:	f001 f88c 	bl	800189a <HAL_NVIC_EnableIRQ>

}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b090      	sub	sp, #64	; 0x40
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a6:	4bad      	ldr	r3, [pc, #692]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4aac      	ldr	r2, [pc, #688]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 80007ac:	f043 0310 	orr.w	r3, r3, #16
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4baa      	ldr	r3, [pc, #680]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0310 	and.w	r3, r3, #16
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80007bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007be:	4ba7      	ldr	r3, [pc, #668]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4aa6      	ldr	r2, [pc, #664]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 80007c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4ba4      	ldr	r3, [pc, #656]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
 80007d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	4ba1      	ldr	r3, [pc, #644]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4aa0      	ldr	r2, [pc, #640]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b9e      	ldr	r3, [pc, #632]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	623b      	str	r3, [r7, #32]
 80007ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ee:	4b9b      	ldr	r3, [pc, #620]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a9a      	ldr	r2, [pc, #616]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b98      	ldr	r3, [pc, #608]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0308 	and.w	r3, r3, #8
 8000802:	61fb      	str	r3, [r7, #28]
 8000804:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	4b95      	ldr	r3, [pc, #596]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a94      	ldr	r2, [pc, #592]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b92      	ldr	r3, [pc, #584]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	61bb      	str	r3, [r7, #24]
 800081c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b8f      	ldr	r3, [pc, #572]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a8e      	ldr	r2, [pc, #568]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b8c      	ldr	r3, [pc, #560]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000836:	4b89      	ldr	r3, [pc, #548]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a88      	ldr	r2, [pc, #544]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 800083c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b86      	ldr	r3, [pc, #536]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800084e:	4b83      	ldr	r3, [pc, #524]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a82      	ldr	r2, [pc, #520]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 8000854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b80      	ldr	r3, [pc, #512]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000866:	4b7d      	ldr	r3, [pc, #500]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a7c      	ldr	r2, [pc, #496]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 800086c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b7a      	ldr	r3, [pc, #488]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800087e:	4b77      	ldr	r3, [pc, #476]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a76      	ldr	r2, [pc, #472]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 8000884:	f043 0320 	orr.w	r3, r3, #32
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b74      	ldr	r3, [pc, #464]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0320 	and.w	r3, r3, #32
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000896:	4b71      	ldr	r3, [pc, #452]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a70      	ldr	r2, [pc, #448]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 800089c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b6e      	ldr	r3, [pc, #440]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	2120      	movs	r1, #32
 80008b2:	486b      	ldr	r0, [pc, #428]	; (8000a60 <MX_GPIO_Init+0x2d0>)
 80008b4:	f001 fcdc 	bl	8002270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	f241 010c 	movw	r1, #4108	; 0x100c
 80008be:	4869      	ldr	r0, [pc, #420]	; (8000a64 <MX_GPIO_Init+0x2d4>)
 80008c0:	f001 fcd6 	bl	8002270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2108      	movs	r1, #8
 80008c8:	4867      	ldr	r0, [pc, #412]	; (8000a68 <MX_GPIO_Init+0x2d8>)
 80008ca:	f001 fcd1 	bl	8002270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008d4:	4865      	ldr	r0, [pc, #404]	; (8000a6c <MX_GPIO_Init+0x2dc>)
 80008d6:	f001 fccb 	bl	8002270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	21c8      	movs	r1, #200	; 0xc8
 80008de:	4864      	ldr	r0, [pc, #400]	; (8000a70 <MX_GPIO_Init+0x2e0>)
 80008e0:	f001 fcc6 	bl	8002270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80008e4:	2310      	movs	r3, #16
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008f4:	230e      	movs	r3, #14
 80008f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008fc:	4619      	mov	r1, r3
 80008fe:	485d      	ldr	r0, [pc, #372]	; (8000a74 <MX_GPIO_Init+0x2e4>)
 8000900:	f001 faf2 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000904:	2308      	movs	r3, #8
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000908:	2300      	movs	r3, #0
 800090a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000914:	4619      	mov	r1, r3
 8000916:	4857      	ldr	r0, [pc, #348]	; (8000a74 <MX_GPIO_Init+0x2e4>)
 8000918:	f001 fae6 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800091c:	2304      	movs	r3, #4
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000928:	2303      	movs	r3, #3
 800092a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800092c:	2309      	movs	r3, #9
 800092e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000934:	4619      	mov	r1, r3
 8000936:	484f      	ldr	r0, [pc, #316]	; (8000a74 <MX_GPIO_Init+0x2e4>)
 8000938:	f001 fad6 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800093c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094a:	2303      	movs	r3, #3
 800094c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800094e:	230b      	movs	r3, #11
 8000950:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000952:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000956:	4619      	mov	r1, r3
 8000958:	4845      	ldr	r0, [pc, #276]	; (8000a70 <MX_GPIO_Init+0x2e0>)
 800095a:	f001 fac5 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800095e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000970:	230c      	movs	r3, #12
 8000972:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000974:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000978:	4619      	mov	r1, r3
 800097a:	483e      	ldr	r0, [pc, #248]	; (8000a74 <MX_GPIO_Init+0x2e4>)
 800097c:	f001 fab4 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000980:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000984:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000986:	2312      	movs	r3, #18
 8000988:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800098a:	2301      	movs	r3, #1
 800098c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000992:	2304      	movs	r3, #4
 8000994:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000996:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800099a:	4619      	mov	r1, r3
 800099c:	4836      	ldr	r0, [pc, #216]	; (8000a78 <MX_GPIO_Init+0x2e8>)
 800099e:	f001 faa3 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80009a2:	f643 4323 	movw	r3, #15395	; 0x3c23
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80009b4:	230a      	movs	r3, #10
 80009b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009bc:	4619      	mov	r1, r3
 80009be:	482e      	ldr	r0, [pc, #184]	; (8000a78 <MX_GPIO_Init+0x2e8>)
 80009c0:	f001 fa92 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80009c4:	2310      	movs	r3, #16
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80009d4:	2302      	movs	r3, #2
 80009d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009dc:	4619      	mov	r1, r3
 80009de:	4826      	ldr	r0, [pc, #152]	; (8000a78 <MX_GPIO_Init+0x2e8>)
 80009e0:	f001 fa82 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80009f4:	2308      	movs	r3, #8
 80009f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009fc:	4619      	mov	r1, r3
 80009fe:	4818      	ldr	r0, [pc, #96]	; (8000a60 <MX_GPIO_Init+0x2d0>)
 8000a00:	f001 fa72 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000a04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a16:	2301      	movs	r3, #1
 8000a18:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4816      	ldr	r0, [pc, #88]	; (8000a7c <MX_GPIO_Init+0x2ec>)
 8000a22:	f001 fa61 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000a26:	2360      	movs	r3, #96	; 0x60
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a36:	230d      	movs	r3, #13
 8000a38:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <MX_GPIO_Init+0x2e4>)
 8000a42:	f001 fa51 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a46:	2380      	movs	r3, #128	; 0x80
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a56:	2307      	movs	r3, #7
 8000a58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a5a:	e011      	b.n	8000a80 <MX_GPIO_Init+0x2f0>
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020c00 	.word	0x40020c00
 8000a64:	40022000 	.word	0x40022000
 8000a68:	40022800 	.word	0x40022800
 8000a6c:	40021c00 	.word	0x40021c00
 8000a70:	40021800 	.word	0x40021800
 8000a74:	40021000 	.word	0x40021000
 8000a78:	40020400 	.word	0x40020400
 8000a7c:	40020000 	.word	0x40020000
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a84:	4619      	mov	r1, r3
 8000a86:	48bc      	ldr	r0, [pc, #752]	; (8000d78 <MX_GPIO_Init+0x5e8>)
 8000a88:	f001 fa2e 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000a8c:	2340      	movs	r3, #64	; 0x40
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000a9c:	230a      	movs	r3, #10
 8000a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	48b4      	ldr	r0, [pc, #720]	; (8000d78 <MX_GPIO_Init+0x5e8>)
 8000aa8:	f001 fa1e 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000aac:	f248 1333 	movw	r3, #33075	; 0x8133
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aba:	2303      	movs	r3, #3
 8000abc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000abe:	230c      	movs	r3, #12
 8000ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ac2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	48ac      	ldr	r0, [pc, #688]	; (8000d7c <MX_GPIO_Init+0x5ec>)
 8000aca:	f001 fa0d 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000ace:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ae0:	230e      	movs	r3, #14
 8000ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000ae4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ae8:	4619      	mov	r1, r3
 8000aea:	48a5      	ldr	r0, [pc, #660]	; (8000d80 <MX_GPIO_Init+0x5f0>)
 8000aec:	f001 f9fc 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af6:	2300      	movs	r3, #0
 8000af8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b02:	4619      	mov	r1, r3
 8000b04:	489e      	ldr	r0, [pc, #632]	; (8000d80 <MX_GPIO_Init+0x5f0>)
 8000b06:	f001 f9ef 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000b0a:	2340      	movs	r3, #64	; 0x40
 8000b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b0e:	4b9d      	ldr	r3, [pc, #628]	; (8000d84 <MX_GPIO_Init+0x5f4>)
 8000b10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	489a      	ldr	r0, [pc, #616]	; (8000d88 <MX_GPIO_Init+0x5f8>)
 8000b1e:	f001 f9e3 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000b22:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b34:	230c      	movs	r3, #12
 8000b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4892      	ldr	r0, [pc, #584]	; (8000d88 <MX_GPIO_Init+0x5f8>)
 8000b40:	f001 f9d2 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000b44:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b56:	230a      	movs	r3, #10
 8000b58:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b5e:	4619      	mov	r1, r3
 8000b60:	488a      	ldr	r0, [pc, #552]	; (8000d8c <MX_GPIO_Init+0x5fc>)
 8000b62:	f001 f9c1 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000b66:	23f0      	movs	r3, #240	; 0xf0
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000b76:	230a      	movs	r3, #10
 8000b78:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4883      	ldr	r0, [pc, #524]	; (8000d90 <MX_GPIO_Init+0x600>)
 8000b82:	f001 f9b1 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000b86:	23f7      	movs	r3, #247	; 0xf7
 8000b88:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b96:	230e      	movs	r3, #14
 8000b98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000b9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	487c      	ldr	r0, [pc, #496]	; (8000d94 <MX_GPIO_Init+0x604>)
 8000ba2:	f001 f9a1 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000bb8:	2309      	movs	r3, #9
 8000bba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	486e      	ldr	r0, [pc, #440]	; (8000d7c <MX_GPIO_Init+0x5ec>)
 8000bc4:	f001 f990 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000bc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000bda:	230a      	movs	r3, #10
 8000bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000be2:	4619      	mov	r1, r3
 8000be4:	4865      	ldr	r0, [pc, #404]	; (8000d7c <MX_GPIO_Init+0x5ec>)
 8000be6:	f001 f97f 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000bea:	2320      	movs	r3, #32
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4861      	ldr	r0, [pc, #388]	; (8000d88 <MX_GPIO_Init+0x5f8>)
 8000c02:	f001 f971 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000c06:	2308      	movs	r3, #8
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c16:	230d      	movs	r3, #13
 8000c18:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4859      	ldr	r0, [pc, #356]	; (8000d88 <MX_GPIO_Init+0x5f8>)
 8000c22:	f001 f961 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000c26:	f241 030c 	movw	r3, #4108	; 0x100c
 8000c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4854      	ldr	r0, [pc, #336]	; (8000d90 <MX_GPIO_Init+0x600>)
 8000c40:	f001 f952 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000c44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c56:	4619      	mov	r1, r3
 8000c58:	484f      	ldr	r0, [pc, #316]	; (8000d98 <MX_GPIO_Init+0x608>)
 8000c5a:	f001 f945 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000c5e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c70:	230c      	movs	r3, #12
 8000c72:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4848      	ldr	r0, [pc, #288]	; (8000d9c <MX_GPIO_Init+0x60c>)
 8000c7c:	f001 f934 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000c80:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c92:	230e      	movs	r3, #14
 8000c94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	483c      	ldr	r0, [pc, #240]	; (8000d90 <MX_GPIO_Init+0x600>)
 8000c9e:	f001 f923 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000ca2:	2308      	movs	r3, #8
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4836      	ldr	r0, [pc, #216]	; (8000d94 <MX_GPIO_Init+0x604>)
 8000cba:	f001 f915 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000cbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000cd0:	230d      	movs	r3, #13
 8000cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4828      	ldr	r0, [pc, #160]	; (8000d7c <MX_GPIO_Init+0x5ec>)
 8000cdc:	f001 f904 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ce0:	2310      	movs	r3, #16
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4825      	ldr	r0, [pc, #148]	; (8000d88 <MX_GPIO_Init+0x5f8>)
 8000cf4:	f001 f8f8 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000cf8:	f248 0304 	movw	r3, #32772	; 0x8004
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4824      	ldr	r0, [pc, #144]	; (8000da0 <MX_GPIO_Init+0x610>)
 8000d0e:	f001 f8eb 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000d12:	2302      	movs	r3, #2
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d22:	2305      	movs	r3, #5
 8000d24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000d26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4818      	ldr	r0, [pc, #96]	; (8000d90 <MX_GPIO_Init+0x600>)
 8000d2e:	f001 f8db 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000d32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4815      	ldr	r0, [pc, #84]	; (8000da0 <MX_GPIO_Init+0x610>)
 8000d4c:	f001 f8cc 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000d50:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000d54:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d62:	230d      	movs	r3, #13
 8000d64:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	480c      	ldr	r0, [pc, #48]	; (8000da0 <MX_GPIO_Init+0x610>)
 8000d6e:	f001 f8bb 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e016      	b.n	8000da4 <MX_GPIO_Init+0x614>
 8000d76:	bf00      	nop
 8000d78:	40020400 	.word	0x40020400
 8000d7c:	40021800 	.word	0x40021800
 8000d80:	40022400 	.word	0x40022400
 8000d84:	10120000 	.word	0x10120000
 8000d88:	40020c00 	.word	0x40020c00
 8000d8c:	40020000 	.word	0x40020000
 8000d90:	40022000 	.word	0x40022000
 8000d94:	40022800 	.word	0x40022800
 8000d98:	40020800 	.word	0x40020800
 8000d9c:	40021400 	.word	0x40021400
 8000da0:	40021c00 	.word	0x40021c00
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000db2:	2302      	movs	r3, #2
 8000db4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dba:	4619      	mov	r1, r3
 8000dbc:	48a5      	ldr	r0, [pc, #660]	; (8001054 <MX_GPIO_Init+0x8c4>)
 8000dbe:	f001 f893 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000dc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dd4:	2307      	movs	r3, #7
 8000dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ddc:	4619      	mov	r1, r3
 8000dde:	489e      	ldr	r0, [pc, #632]	; (8001058 <MX_GPIO_Init+0x8c8>)
 8000de0:	f001 f882 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000de4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000df6:	2301      	movs	r3, #1
 8000df8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000dfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4895      	ldr	r0, [pc, #596]	; (8001058 <MX_GPIO_Init+0x8c8>)
 8000e02:	f001 f871 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000e06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e0c:	4b93      	ldr	r3, [pc, #588]	; (800105c <MX_GPIO_Init+0x8cc>)
 8000e0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e18:	4619      	mov	r1, r3
 8000e1a:	488e      	ldr	r0, [pc, #568]	; (8001054 <MX_GPIO_Init+0x8c4>)
 8000e1c:	f001 f864 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000e20:	23c0      	movs	r3, #192	; 0xc0
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e30:	2308      	movs	r3, #8
 8000e32:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4889      	ldr	r0, [pc, #548]	; (8001060 <MX_GPIO_Init+0x8d0>)
 8000e3c:	f001 f854 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000e40:	2310      	movs	r3, #16
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e50:	230a      	movs	r3, #10
 8000e52:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4882      	ldr	r0, [pc, #520]	; (8001064 <MX_GPIO_Init+0x8d4>)
 8000e5c:	f001 f844 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000e60:	2328      	movs	r3, #40	; 0x28
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e70:	230c      	movs	r3, #12
 8000e72:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e78:	4619      	mov	r1, r3
 8000e7a:	487a      	ldr	r0, [pc, #488]	; (8001064 <MX_GPIO_Init+0x8d4>)
 8000e7c:	f001 f834 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000e80:	23c8      	movs	r3, #200	; 0xc8
 8000e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e94:	4619      	mov	r1, r3
 8000e96:	4874      	ldr	r0, [pc, #464]	; (8001068 <MX_GPIO_Init+0x8d8>)
 8000e98:	f001 f826 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000e9c:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000eaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eae:	4619      	mov	r1, r3
 8000eb0:	486e      	ldr	r0, [pc, #440]	; (800106c <MX_GPIO_Init+0x8dc>)
 8000eb2:	f001 f819 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000eb6:	2308      	movs	r3, #8
 8000eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ec6:	230c      	movs	r3, #12
 8000ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000eca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4863      	ldr	r0, [pc, #396]	; (8001060 <MX_GPIO_Init+0x8d0>)
 8000ed2:	f001 f809 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000ed6:	2305      	movs	r3, #5
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ee6:	230a      	movs	r3, #10
 8000ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eee:	4619      	mov	r1, r3
 8000ef0:	485b      	ldr	r0, [pc, #364]	; (8001060 <MX_GPIO_Init+0x8d0>)
 8000ef2:	f000 fff9 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ef6:	2332      	movs	r3, #50	; 0x32
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f02:	2303      	movs	r3, #3
 8000f04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f06:	230b      	movs	r3, #11
 8000f08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4853      	ldr	r0, [pc, #332]	; (8001060 <MX_GPIO_Init+0x8d0>)
 8000f12:	f000 ffe9 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f16:	2304      	movs	r3, #4
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f26:	2309      	movs	r3, #9
 8000f28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f2e:	4619      	mov	r1, r3
 8000f30:	484f      	ldr	r0, [pc, #316]	; (8001070 <MX_GPIO_Init+0x8e0>)
 8000f32:	f000 ffd9 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000f36:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f48:	2309      	movs	r3, #9
 8000f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f50:	4619      	mov	r1, r3
 8000f52:	4848      	ldr	r0, [pc, #288]	; (8001074 <MX_GPIO_Init+0x8e4>)
 8000f54:	f000 ffc8 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000f58:	2304      	movs	r3, #4
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000f64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f68:	4619      	mov	r1, r3
 8000f6a:	483f      	ldr	r0, [pc, #252]	; (8001068 <MX_GPIO_Init+0x8d8>)
 8000f6c:	f000 ffbc 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f70:	2386      	movs	r3, #134	; 0x86
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f80:	230b      	movs	r3, #11
 8000f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4833      	ldr	r0, [pc, #204]	; (8001058 <MX_GPIO_Init+0x8c8>)
 8000f8c:	f000 ffac 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000f90:	2301      	movs	r3, #1
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f94:	2303      	movs	r3, #3
 8000f96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000f9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	482d      	ldr	r0, [pc, #180]	; (8001058 <MX_GPIO_Init+0x8c8>)
 8000fa4:	f000 ffa0 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000fa8:	2350      	movs	r3, #80	; 0x50
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000fb8:	230d      	movs	r3, #13
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4825      	ldr	r0, [pc, #148]	; (8001058 <MX_GPIO_Init+0x8c8>)
 8000fc4:	f000 ff90 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000fc8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fce:	2312      	movs	r3, #18
 8000fd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fda:	2304      	movs	r3, #4
 8000fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	481f      	ldr	r0, [pc, #124]	; (8001064 <MX_GPIO_Init+0x8d4>)
 8000fe6:	f000 ff7f 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000fea:	2328      	movs	r3, #40	; 0x28
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ffa:	230a      	movs	r3, #10
 8000ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001002:	4619      	mov	r1, r3
 8001004:	4814      	ldr	r0, [pc, #80]	; (8001058 <MX_GPIO_Init+0x8c8>)
 8001006:	f000 ff6f 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800100a:	2340      	movs	r3, #64	; 0x40
 800100c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800101a:	2309      	movs	r3, #9
 800101c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800101e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001022:	4619      	mov	r1, r3
 8001024:	480f      	ldr	r0, [pc, #60]	; (8001064 <MX_GPIO_Init+0x8d4>)
 8001026:	f000 ff5f 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800102a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800103c:	2305      	movs	r3, #5
 800103e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001040:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001044:	4619      	mov	r1, r3
 8001046:	480a      	ldr	r0, [pc, #40]	; (8001070 <MX_GPIO_Init+0x8e0>)
 8001048:	f000 ff4e 	bl	8001ee8 <HAL_GPIO_Init>

}
 800104c:	bf00      	nop
 800104e:	3740      	adds	r7, #64	; 0x40
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40022000 	.word	0x40022000
 8001058:	40020000 	.word	0x40020000
 800105c:	10120000 	.word	0x10120000
 8001060:	40020800 	.word	0x40020800
 8001064:	40021c00 	.word	0x40021c00
 8001068:	40021800 	.word	0x40021800
 800106c:	40021400 	.word	0x40021400
 8001070:	40020400 	.word	0x40020400
 8001074:	40020c00 	.word	0x40020c00

08001078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800107c:	b672      	cpsid	i
}
 800107e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001080:	e7fe      	b.n	8001080 <Error_Handler+0x8>
	...

08001084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <HAL_MspInit+0x44>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <HAL_MspInit+0x44>)
 8001090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001094:	6413      	str	r3, [r2, #64]	; 0x40
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <HAL_MspInit+0x44>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <HAL_MspInit+0x44>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <HAL_MspInit+0x44>)
 80010a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ac:	6453      	str	r3, [r2, #68]	; 0x44
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_MspInit+0x44>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800

080010cc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a65      	ldr	r2, [pc, #404]	; (8001280 <HAL_SD_MspInit+0x1b4>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	f040 80c3 	bne.w	8001276 <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80010f0:	4b64      	ldr	r3, [pc, #400]	; (8001284 <HAL_SD_MspInit+0x1b8>)
 80010f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f4:	4a63      	ldr	r2, [pc, #396]	; (8001284 <HAL_SD_MspInit+0x1b8>)
 80010f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010fa:	6453      	str	r3, [r2, #68]	; 0x44
 80010fc:	4b61      	ldr	r3, [pc, #388]	; (8001284 <HAL_SD_MspInit+0x1b8>)
 80010fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001108:	4b5e      	ldr	r3, [pc, #376]	; (8001284 <HAL_SD_MspInit+0x1b8>)
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110c:	4a5d      	ldr	r2, [pc, #372]	; (8001284 <HAL_SD_MspInit+0x1b8>)
 800110e:	f043 0304 	orr.w	r3, r3, #4
 8001112:	6313      	str	r3, [r2, #48]	; 0x30
 8001114:	4b5b      	ldr	r3, [pc, #364]	; (8001284 <HAL_SD_MspInit+0x1b8>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001120:	4b58      	ldr	r3, [pc, #352]	; (8001284 <HAL_SD_MspInit+0x1b8>)
 8001122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001124:	4a57      	ldr	r2, [pc, #348]	; (8001284 <HAL_SD_MspInit+0x1b8>)
 8001126:	f043 0308 	orr.w	r3, r3, #8
 800112a:	6313      	str	r3, [r2, #48]	; 0x30
 800112c:	4b55      	ldr	r3, [pc, #340]	; (8001284 <HAL_SD_MspInit+0x1b8>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	f003 0308 	and.w	r3, r3, #8
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001138:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800113c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800114a:	230c      	movs	r3, #12
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	484c      	ldr	r0, [pc, #304]	; (8001288 <HAL_SD_MspInit+0x1bc>)
 8001156:	f000 fec7 	bl	8001ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 800115a:	2304      	movs	r3, #4
 800115c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001166:	2303      	movs	r3, #3
 8001168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800116a:	230c      	movs	r3, #12
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	4845      	ldr	r0, [pc, #276]	; (800128c <HAL_SD_MspInit+0x1c0>)
 8001176:	f000 feb7 	bl	8001ee8 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 800117a:	4b45      	ldr	r3, [pc, #276]	; (8001290 <HAL_SD_MspInit+0x1c4>)
 800117c:	4a45      	ldr	r2, [pc, #276]	; (8001294 <HAL_SD_MspInit+0x1c8>)
 800117e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001180:	4b43      	ldr	r3, [pc, #268]	; (8001290 <HAL_SD_MspInit+0x1c4>)
 8001182:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001186:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001188:	4b41      	ldr	r3, [pc, #260]	; (8001290 <HAL_SD_MspInit+0x1c4>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800118e:	4b40      	ldr	r3, [pc, #256]	; (8001290 <HAL_SD_MspInit+0x1c4>)
 8001190:	2200      	movs	r2, #0
 8001192:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001194:	4b3e      	ldr	r3, [pc, #248]	; (8001290 <HAL_SD_MspInit+0x1c4>)
 8001196:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800119a:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800119c:	4b3c      	ldr	r3, [pc, #240]	; (8001290 <HAL_SD_MspInit+0x1c4>)
 800119e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011a2:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011a4:	4b3a      	ldr	r3, [pc, #232]	; (8001290 <HAL_SD_MspInit+0x1c4>)
 80011a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011aa:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80011ac:	4b38      	ldr	r3, [pc, #224]	; (8001290 <HAL_SD_MspInit+0x1c4>)
 80011ae:	2220      	movs	r2, #32
 80011b0:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011b2:	4b37      	ldr	r3, [pc, #220]	; (8001290 <HAL_SD_MspInit+0x1c4>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011b8:	4b35      	ldr	r3, [pc, #212]	; (8001290 <HAL_SD_MspInit+0x1c4>)
 80011ba:	2204      	movs	r2, #4
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011be:	4b34      	ldr	r3, [pc, #208]	; (8001290 <HAL_SD_MspInit+0x1c4>)
 80011c0:	2203      	movs	r2, #3
 80011c2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80011c4:	4b32      	ldr	r3, [pc, #200]	; (8001290 <HAL_SD_MspInit+0x1c4>)
 80011c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80011ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80011cc:	4b30      	ldr	r3, [pc, #192]	; (8001290 <HAL_SD_MspInit+0x1c4>)
 80011ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80011d2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80011d4:	482e      	ldr	r0, [pc, #184]	; (8001290 <HAL_SD_MspInit+0x1c4>)
 80011d6:	f000 fb7b 	bl	80018d0 <HAL_DMA_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 80011e0:	f7ff ff4a 	bl	8001078 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a2a      	ldr	r2, [pc, #168]	; (8001290 <HAL_SD_MspInit+0x1c4>)
 80011e8:	641a      	str	r2, [r3, #64]	; 0x40
 80011ea:	4a29      	ldr	r2, [pc, #164]	; (8001290 <HAL_SD_MspInit+0x1c4>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80011f0:	4b29      	ldr	r3, [pc, #164]	; (8001298 <HAL_SD_MspInit+0x1cc>)
 80011f2:	4a2a      	ldr	r2, [pc, #168]	; (800129c <HAL_SD_MspInit+0x1d0>)
 80011f4:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80011f6:	4b28      	ldr	r3, [pc, #160]	; (8001298 <HAL_SD_MspInit+0x1cc>)
 80011f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011fc:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011fe:	4b26      	ldr	r3, [pc, #152]	; (8001298 <HAL_SD_MspInit+0x1cc>)
 8001200:	2240      	movs	r2, #64	; 0x40
 8001202:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001204:	4b24      	ldr	r3, [pc, #144]	; (8001298 <HAL_SD_MspInit+0x1cc>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800120a:	4b23      	ldr	r3, [pc, #140]	; (8001298 <HAL_SD_MspInit+0x1cc>)
 800120c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001210:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001212:	4b21      	ldr	r3, [pc, #132]	; (8001298 <HAL_SD_MspInit+0x1cc>)
 8001214:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001218:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800121a:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <HAL_SD_MspInit+0x1cc>)
 800121c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001220:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001222:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <HAL_SD_MspInit+0x1cc>)
 8001224:	2220      	movs	r2, #32
 8001226:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <HAL_SD_MspInit+0x1cc>)
 800122a:	2200      	movs	r2, #0
 800122c:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800122e:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <HAL_SD_MspInit+0x1cc>)
 8001230:	2204      	movs	r2, #4
 8001232:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001234:	4b18      	ldr	r3, [pc, #96]	; (8001298 <HAL_SD_MspInit+0x1cc>)
 8001236:	2203      	movs	r2, #3
 8001238:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <HAL_SD_MspInit+0x1cc>)
 800123c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001240:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <HAL_SD_MspInit+0x1cc>)
 8001244:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001248:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800124a:	4813      	ldr	r0, [pc, #76]	; (8001298 <HAL_SD_MspInit+0x1cc>)
 800124c:	f000 fb40 	bl	80018d0 <HAL_DMA_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 8001256:	f7ff ff0f 	bl	8001078 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <HAL_SD_MspInit+0x1cc>)
 800125e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001260:	4a0d      	ldr	r2, [pc, #52]	; (8001298 <HAL_SD_MspInit+0x1cc>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	2100      	movs	r1, #0
 800126a:	2031      	movs	r0, #49	; 0x31
 800126c:	f000 faf9 	bl	8001862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001270:	2031      	movs	r0, #49	; 0x31
 8001272:	f000 fb12 	bl	800189a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001276:	bf00      	nop
 8001278:	3728      	adds	r7, #40	; 0x28
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40012c00 	.word	0x40012c00
 8001284:	40023800 	.word	0x40023800
 8001288:	40020800 	.word	0x40020800
 800128c:	40020c00 	.word	0x40020c00
 8001290:	20000118 	.word	0x20000118
 8001294:	40026458 	.word	0x40026458
 8001298:	20000178 	.word	0x20000178
 800129c:	400264a0 	.word	0x400264a0

080012a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <NMI_Handler+0x4>

080012a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <HardFault_Handler+0x4>

080012ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <MemManage_Handler+0x4>

080012b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <BusFault_Handler+0x4>

080012b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <UsageFault_Handler+0x4>

080012be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ec:	f000 f99a 	bl	8001624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80012f8:	4802      	ldr	r0, [pc, #8]	; (8001304 <SDMMC1_IRQHandler+0x10>)
 80012fa:	f002 fc9b 	bl	8003c34 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000094 	.word	0x20000094

08001308 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 800130c:	4802      	ldr	r0, [pc, #8]	; (8001318 <DMA2_Stream3_IRQHandler+0x10>)
 800130e:	f000 fbaf 	bl	8001a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000118 	.word	0x20000118

0800131c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <DMA2_Stream6_IRQHandler+0x10>)
 8001322:	f000 fba5 	bl	8001a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000178 	.word	0x20000178

08001330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001338:	4a14      	ldr	r2, [pc, #80]	; (800138c <_sbrk+0x5c>)
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <_sbrk+0x60>)
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <_sbrk+0x64>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d102      	bne.n	8001352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <_sbrk+0x64>)
 800134e:	4a12      	ldr	r2, [pc, #72]	; (8001398 <_sbrk+0x68>)
 8001350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <_sbrk+0x64>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	429a      	cmp	r2, r3
 800135e:	d207      	bcs.n	8001370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001360:	f008 f850 	bl	8009404 <__errno>
 8001364:	4603      	mov	r3, r0
 8001366:	220c      	movs	r2, #12
 8001368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800136a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800136e:	e009      	b.n	8001384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <_sbrk+0x64>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001376:	4b07      	ldr	r3, [pc, #28]	; (8001394 <_sbrk+0x64>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	4a05      	ldr	r2, [pc, #20]	; (8001394 <_sbrk+0x64>)
 8001380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001382:	68fb      	ldr	r3, [r7, #12]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20050000 	.word	0x20050000
 8001390:	00008000 	.word	0x00008000
 8001394:	200001d8 	.word	0x200001d8
 8001398:	20000890 	.word	0x20000890

0800139c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <SystemInit+0x28>)
 80013a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013a6:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <SystemInit+0x28>)
 80013a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <SystemInit+0x28>)
 80013b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013b6:	609a      	str	r2, [r3, #8]
#endif
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <SD_Card_Init>:
uint8_t workBuffer[_MAX_SS];
char Buff[100] = {0};


void SD_Card_Init(void)
{
 80013c8:	b5b0      	push	{r4, r5, r7, lr}
 80013ca:	b0a8      	sub	sp, #160	; 0xa0
 80013cc:	af02      	add	r7, sp, #8
  FRESULT res;                                          /* FatFs function common result code */
  uint32_t byteswritten, bytesread;                     /* File write/read counts */
  uint8_t wtext[] = "This is STM32 working with FatFs"; /* File write buffer */
 80013ce:	4b5b      	ldr	r3, [pc, #364]	; (800153c <SD_Card_Init+0x174>)
 80013d0:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80013d4:	461d      	mov	r5, r3
 80013d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013de:	682b      	ldr	r3, [r5, #0]
 80013e0:	7023      	strb	r3, [r4, #0]
	/*##-1- Link the micro SD disk I/O driver ##################################*/
	// done in main() call to MX_FATFS_Init()


	// ##-2- Register the file system object to the FatFs module ###########
	if ((res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0)) != FR_OK) Error_Handler();
 80013e2:	2200      	movs	r2, #0
 80013e4:	4956      	ldr	r1, [pc, #344]	; (8001540 <SD_Card_Init+0x178>)
 80013e6:	4857      	ldr	r0, [pc, #348]	; (8001544 <SD_Card_Init+0x17c>)
 80013e8:	f006 fc64 	bl	8007cb4 <f_mount>
 80013ec:	4603      	mov	r3, r0
 80013ee:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80013f2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <SD_Card_Init+0x36>
 80013fa:	f7ff fe3d 	bl	8001078 <Error_Handler>


	// ##-3- Create a FAT file system (format) on the logical drive ########
	/* WARNING: Formatting the uSD card will delete all content on the device */
	// if you comment out the next line the code will keep creating new files with incremental names
	if((res = f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, workBuffer, sizeof(workBuffer))) != FR_OK) Error_Handler();
 80013fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	4b50      	ldr	r3, [pc, #320]	; (8001548 <SD_Card_Init+0x180>)
 8001406:	2200      	movs	r2, #0
 8001408:	2107      	movs	r1, #7
 800140a:	484d      	ldr	r0, [pc, #308]	; (8001540 <SD_Card_Init+0x178>)
 800140c:	f007 faac 	bl	8008968 <f_mkfs>
 8001410:	4603      	mov	r3, r0
 8001412:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001416:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <SD_Card_Init+0x5a>
 800141e:	f7ff fe2b 	bl	8001078 <Error_Handler>


	// ##-4- Create and Open a new text file object with write access ######
	int i; res = FR_TIMEOUT; // fake set result to engage the loop
 8001422:	230f      	movs	r3, #15
 8001424:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	for (i = 0; ((i < 1000) && (res != FR_OK) && (res != FR_DISK_ERR)); i++)
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800142e:	e015      	b.n	800145c <SD_Card_Init+0x94>
	{
		sprintf(FileName, "%03d.TXT", i); res = FR_TIMEOUT; // fake set result to engage the loop
 8001430:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001434:	4945      	ldr	r1, [pc, #276]	; (800154c <SD_Card_Init+0x184>)
 8001436:	4846      	ldr	r0, [pc, #280]	; (8001550 <SD_Card_Init+0x188>)
 8001438:	f008 f816 	bl	8009468 <siprintf>
 800143c:	230f      	movs	r3, #15
 800143e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		res = f_open(&SDFile, FileName, FA_CREATE_NEW | FA_READ | FA_WRITE);
 8001442:	2207      	movs	r2, #7
 8001444:	4942      	ldr	r1, [pc, #264]	; (8001550 <SD_Card_Init+0x188>)
 8001446:	4843      	ldr	r0, [pc, #268]	; (8001554 <SD_Card_Init+0x18c>)
 8001448:	f006 fc7a 	bl	8007d40 <f_open>
 800144c:	4603      	mov	r3, r0
 800144e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	for (i = 0; ((i < 1000) && (res != FR_OK) && (res != FR_DISK_ERR)); i++)
 8001452:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001456:	3301      	adds	r3, #1
 8001458:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800145c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001460:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001464:	da07      	bge.n	8001476 <SD_Card_Init+0xae>
 8001466:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <SD_Card_Init+0xae>
 800146e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001472:	2b01      	cmp	r3, #1
 8001474:	d1dc      	bne.n	8001430 <SD_Card_Init+0x68>
	}
	if ((res == FR_DISK_ERR) || (i == 1000))
 8001476:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800147a:	2b01      	cmp	r3, #1
 800147c:	d004      	beq.n	8001488 <SD_Card_Init+0xc0>
 800147e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001482:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001486:	d101      	bne.n	800148c <SD_Card_Init+0xc4>
	{
		Error_Handler();
 8001488:	f7ff fdf6 	bl	8001078 <Error_Handler>
	}

	/*##-5- Write data to the text file ################################*/
	res = f_write(&SDFile, wtext, sizeof(wtext), (void *)&byteswritten);
 800148c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001490:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001494:	2221      	movs	r2, #33	; 0x21
 8001496:	482f      	ldr	r0, [pc, #188]	; (8001554 <SD_Card_Init+0x18c>)
 8001498:	f007 f848 	bl	800852c <f_write>
 800149c:	4603      	mov	r3, r0
 800149e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	if((byteswritten == 0) || (res != FR_OK))
 80014a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <SD_Card_Init+0xea>
 80014aa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <SD_Card_Init+0xee>
	{
		/* 'STM32.TXT' file Write or EOF Error */
		Error_Handler();
 80014b2:	f7ff fde1 	bl	8001078 <Error_Handler>
	}

	// ##-7- Close the open text file ######################################
	if((res = f_close(&SDFile)) != FR_OK)
 80014b6:	4827      	ldr	r0, [pc, #156]	; (8001554 <SD_Card_Init+0x18c>)
 80014b8:	f007 fa2b 	bl	8008912 <f_close>
 80014bc:	4603      	mov	r3, r0
 80014be:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80014c2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <SD_Card_Init+0x106>
	{
		Error_Handler();
 80014ca:	f7ff fdd5 	bl	8001078 <Error_Handler>
	}

	/*##-7- Open the text file object with read access ###############*/
	if(res = f_open(&SDFile, FileName, FA_READ) != FR_OK)
 80014ce:	2201      	movs	r2, #1
 80014d0:	491f      	ldr	r1, [pc, #124]	; (8001550 <SD_Card_Init+0x188>)
 80014d2:	4820      	ldr	r0, [pc, #128]	; (8001554 <SD_Card_Init+0x18c>)
 80014d4:	f006 fc34 	bl	8007d40 <f_open>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	bf14      	ite	ne
 80014de:	2301      	movne	r3, #1
 80014e0:	2300      	moveq	r3, #0
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80014e8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <SD_Card_Init+0x12c>
	{
		/* 'STM32.TXT' file Open for read Error */
		Error_Handler();
 80014f0:	f7ff fdc2 	bl	8001078 <Error_Handler>
	}

	/*##-8- Read data from the text file ###########################*/
	res = f_read(&SDFile, rtext, sizeof(rtext), (UINT*)&bytesread);
 80014f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80014f8:	4639      	mov	r1, r7
 80014fa:	2264      	movs	r2, #100	; 0x64
 80014fc:	4815      	ldr	r0, [pc, #84]	; (8001554 <SD_Card_Init+0x18c>)
 80014fe:	f006 fed6 	bl	80082ae <f_read>
 8001502:	4603      	mov	r3, r0
 8001504:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	if((bytesread == 0) || (res != FR_OK))
 8001508:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <SD_Card_Init+0x150>
 8001510:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <SD_Card_Init+0x154>
	{
		/* 'STM32.TXT' file Read or EOF Error */
		Error_Handler();
 8001518:	f7ff fdae 	bl	8001078 <Error_Handler>
	}

	/*##-9- Close the open text file #############################*/
	f_close(&SDFile);
 800151c:	480d      	ldr	r0, [pc, #52]	; (8001554 <SD_Card_Init+0x18c>)
 800151e:	f007 f9f8 	bl	8008912 <f_close>

	/*##-10- Compare read data with the expected data ############*/
	if((bytesread != byteswritten))
 8001522:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001526:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800152a:	429a      	cmp	r2, r3
 800152c:	d001      	beq.n	8001532 <SD_Card_Init+0x16a>
	{
		/* Read data is different from the expected data */
		Error_Handler();
 800152e:	f7ff fda3 	bl	8001078 <Error_Handler>

#if 0
  // ##-12- Unlink the SD disk I/O driver ################################
  FATFS_UnLinkDriver(SDPath);
#endif
}
 8001532:	bf00      	nop
 8001534:	3798      	adds	r7, #152	; 0x98
 8001536:	46bd      	mov	sp, r7
 8001538:	bdb0      	pop	{r4, r5, r7, pc}
 800153a:	bf00      	nop
 800153c:	08009d68 	.word	0x08009d68
 8001540:	200003e4 	.word	0x200003e4
 8001544:	200003e8 	.word	0x200003e8
 8001548:	200001dc 	.word	0x200001dc
 800154c:	08009d5c 	.word	0x08009d5c
 8001550:	20000004 	.word	0x20000004
 8001554:	2000061c 	.word	0x2000061c

08001558 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001558:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001590 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800155c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800155e:	e003      	b.n	8001568 <LoopCopyDataInit>

08001560 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001562:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001564:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001566:	3104      	adds	r1, #4

08001568 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001568:	480b      	ldr	r0, [pc, #44]	; (8001598 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800156c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800156e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001570:	d3f6      	bcc.n	8001560 <CopyDataInit>
  ldr  r2, =_sbss
 8001572:	4a0b      	ldr	r2, [pc, #44]	; (80015a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001574:	e002      	b.n	800157c <LoopFillZerobss>

08001576 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001576:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001578:	f842 3b04 	str.w	r3, [r2], #4

0800157c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800157e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001580:	d3f9      	bcc.n	8001576 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001582:	f7ff ff0b 	bl	800139c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001586:	f007 ff43 	bl	8009410 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800158a:	f7ff f813 	bl	80005b4 <main>
  bx  lr    
 800158e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001590:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001594:	0800a2a4 	.word	0x0800a2a4
  ldr  r0, =_sdata
 8001598:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800159c:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 80015a0:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80015a4:	20000890 	.word	0x20000890

080015a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a8:	e7fe      	b.n	80015a8 <ADC_IRQHandler>

080015aa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ae:	2003      	movs	r0, #3
 80015b0:	f000 f94c 	bl	800184c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015b4:	2000      	movs	r0, #0
 80015b6:	f000 f805 	bl	80015c4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80015ba:	f7ff fd63 	bl	8001084 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <HAL_InitTick+0x54>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <HAL_InitTick+0x58>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4619      	mov	r1, r3
 80015d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015da:	fbb3 f3f1 	udiv	r3, r3, r1
 80015de:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 f967 	bl	80018b6 <HAL_SYSTICK_Config>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00e      	b.n	8001610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b0f      	cmp	r3, #15
 80015f6:	d80a      	bhi.n	800160e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f8:	2200      	movs	r2, #0
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001600:	f000 f92f 	bl	8001862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001604:	4a06      	ldr	r2, [pc, #24]	; (8001620 <HAL_InitTick+0x5c>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	e000      	b.n	8001610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000000 	.word	0x20000000
 800161c:	20000010 	.word	0x20000010
 8001620:	2000000c 	.word	0x2000000c

08001624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_IncTick+0x20>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_IncTick+0x24>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4413      	add	r3, r2
 8001634:	4a04      	ldr	r2, [pc, #16]	; (8001648 <HAL_IncTick+0x24>)
 8001636:	6013      	str	r3, [r2, #0]
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	20000010 	.word	0x20000010
 8001648:	200003dc 	.word	0x200003dc

0800164c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return uwTick;
 8001650:	4b03      	ldr	r3, [pc, #12]	; (8001660 <HAL_GetTick+0x14>)
 8001652:	681b      	ldr	r3, [r3, #0]
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	200003dc 	.word	0x200003dc

08001664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800166c:	f7ff ffee 	bl	800164c <HAL_GetTick>
 8001670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800167c:	d005      	beq.n	800168a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <HAL_Delay+0x44>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4413      	add	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800168a:	bf00      	nop
 800168c:	f7ff ffde 	bl	800164c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	429a      	cmp	r2, r3
 800169a:	d8f7      	bhi.n	800168c <HAL_Delay+0x28>
  {
  }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000010 	.word	0x20000010

080016ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <__NVIC_SetPriorityGrouping+0x40>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c8:	4013      	ands	r3, r2
 80016ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016da:	4a04      	ldr	r2, [pc, #16]	; (80016ec <__NVIC_SetPriorityGrouping+0x40>)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	60d3      	str	r3, [r2, #12]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00
 80016f0:	05fa0000 	.word	0x05fa0000

080016f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <__NVIC_GetPriorityGrouping+0x18>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	0a1b      	lsrs	r3, r3, #8
 80016fe:	f003 0307 	and.w	r3, r3, #7
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	2b00      	cmp	r3, #0
 8001720:	db0b      	blt.n	800173a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	f003 021f 	and.w	r2, r3, #31
 8001728:	4907      	ldr	r1, [pc, #28]	; (8001748 <__NVIC_EnableIRQ+0x38>)
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	095b      	lsrs	r3, r3, #5
 8001730:	2001      	movs	r0, #1
 8001732:	fa00 f202 	lsl.w	r2, r0, r2
 8001736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000e100 	.word	0xe000e100

0800174c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	6039      	str	r1, [r7, #0]
 8001756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175c:	2b00      	cmp	r3, #0
 800175e:	db0a      	blt.n	8001776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	490c      	ldr	r1, [pc, #48]	; (8001798 <__NVIC_SetPriority+0x4c>)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	0112      	lsls	r2, r2, #4
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	440b      	add	r3, r1
 8001770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001774:	e00a      	b.n	800178c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4908      	ldr	r1, [pc, #32]	; (800179c <__NVIC_SetPriority+0x50>)
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	3b04      	subs	r3, #4
 8001784:	0112      	lsls	r2, r2, #4
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	440b      	add	r3, r1
 800178a:	761a      	strb	r2, [r3, #24]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000e100 	.word	0xe000e100
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b089      	sub	sp, #36	; 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f1c3 0307 	rsb	r3, r3, #7
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	bf28      	it	cs
 80017be:	2304      	movcs	r3, #4
 80017c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3304      	adds	r3, #4
 80017c6:	2b06      	cmp	r3, #6
 80017c8:	d902      	bls.n	80017d0 <NVIC_EncodePriority+0x30>
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3b03      	subs	r3, #3
 80017ce:	e000      	b.n	80017d2 <NVIC_EncodePriority+0x32>
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43da      	mvns	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	401a      	ands	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	fa01 f303 	lsl.w	r3, r1, r3
 80017f2:	43d9      	mvns	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	4313      	orrs	r3, r2
         );
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3724      	adds	r7, #36	; 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3b01      	subs	r3, #1
 8001814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001818:	d301      	bcc.n	800181e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800181a:	2301      	movs	r3, #1
 800181c:	e00f      	b.n	800183e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181e:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <SysTick_Config+0x40>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3b01      	subs	r3, #1
 8001824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001826:	210f      	movs	r1, #15
 8001828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800182c:	f7ff ff8e 	bl	800174c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <SysTick_Config+0x40>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001836:	4b04      	ldr	r3, [pc, #16]	; (8001848 <SysTick_Config+0x40>)
 8001838:	2207      	movs	r2, #7
 800183a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	e000e010 	.word	0xe000e010

0800184c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ff29 	bl	80016ac <__NVIC_SetPriorityGrouping>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001862:	b580      	push	{r7, lr}
 8001864:	b086      	sub	sp, #24
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001874:	f7ff ff3e 	bl	80016f4 <__NVIC_GetPriorityGrouping>
 8001878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	68b9      	ldr	r1, [r7, #8]
 800187e:	6978      	ldr	r0, [r7, #20]
 8001880:	f7ff ff8e 	bl	80017a0 <NVIC_EncodePriority>
 8001884:	4602      	mov	r2, r0
 8001886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188a:	4611      	mov	r1, r2
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff5d 	bl	800174c <__NVIC_SetPriority>
}
 8001892:	bf00      	nop
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	4603      	mov	r3, r0
 80018a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff31 	bl	8001710 <__NVIC_EnableIRQ>
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff ffa2 	bl	8001808 <SysTick_Config>
 80018c4:	4603      	mov	r3, r0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018dc:	f7ff feb6 	bl	800164c <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e099      	b.n	8001a20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2202      	movs	r2, #2
 80018f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 0201 	bic.w	r2, r2, #1
 800190a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800190c:	e00f      	b.n	800192e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800190e:	f7ff fe9d 	bl	800164c <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b05      	cmp	r3, #5
 800191a:	d908      	bls.n	800192e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2220      	movs	r2, #32
 8001920:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2203      	movs	r2, #3
 8001926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e078      	b.n	8001a20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1e8      	bne.n	800190e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	4b38      	ldr	r3, [pc, #224]	; (8001a28 <HAL_DMA_Init+0x158>)
 8001948:	4013      	ands	r3, r2
 800194a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800195a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001966:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001972:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4313      	orrs	r3, r2
 800197e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	2b04      	cmp	r3, #4
 8001986:	d107      	bne.n	8001998 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001990:	4313      	orrs	r3, r2
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	4313      	orrs	r3, r2
 8001996:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	f023 0307 	bic.w	r3, r3, #7
 80019ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	2b04      	cmp	r3, #4
 80019c0:	d117      	bne.n	80019f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00e      	beq.n	80019f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 fa0b 	bl	8001df0 <DMA_CheckFifoParam>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d008      	beq.n	80019f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2240      	movs	r2, #64	; 0x40
 80019e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019ee:	2301      	movs	r3, #1
 80019f0:	e016      	b.n	8001a20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f9c2 	bl	8001d84 <DMA_CalcBaseAndBitshift>
 8001a00:	4603      	mov	r3, r0
 8001a02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a08:	223f      	movs	r2, #63	; 0x3f
 8001a0a:	409a      	lsls	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	f010803f 	.word	0xf010803f

08001a2c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d004      	beq.n	8001a4a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2280      	movs	r2, #128	; 0x80
 8001a44:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e00c      	b.n	8001a64 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2205      	movs	r2, #5
 8001a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0201 	bic.w	r2, r2, #1
 8001a60:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001a7c:	4b8e      	ldr	r3, [pc, #568]	; (8001cb8 <HAL_DMA_IRQHandler+0x248>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a8e      	ldr	r2, [pc, #568]	; (8001cbc <HAL_DMA_IRQHandler+0x24c>)
 8001a82:	fba2 2303 	umull	r2, r3, r2, r3
 8001a86:	0a9b      	lsrs	r3, r3, #10
 8001a88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9a:	2208      	movs	r2, #8
 8001a9c:	409a      	lsls	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d01a      	beq.n	8001adc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d013      	beq.n	8001adc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0204 	bic.w	r2, r2, #4
 8001ac2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac8:	2208      	movs	r2, #8
 8001aca:	409a      	lsls	r2, r3
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad4:	f043 0201 	orr.w	r2, r3, #1
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d012      	beq.n	8001b12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00b      	beq.n	8001b12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afe:	2201      	movs	r2, #1
 8001b00:	409a      	lsls	r2, r3
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0a:	f043 0202 	orr.w	r2, r3, #2
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b16:	2204      	movs	r2, #4
 8001b18:	409a      	lsls	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d012      	beq.n	8001b48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00b      	beq.n	8001b48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b34:	2204      	movs	r2, #4
 8001b36:	409a      	lsls	r2, r3
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b40:	f043 0204 	orr.w	r2, r3, #4
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4c:	2210      	movs	r2, #16
 8001b4e:	409a      	lsls	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4013      	ands	r3, r2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d043      	beq.n	8001be0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d03c      	beq.n	8001be0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6a:	2210      	movs	r2, #16
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d018      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d108      	bne.n	8001ba0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d024      	beq.n	8001be0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	4798      	blx	r3
 8001b9e:	e01f      	b.n	8001be0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d01b      	beq.n	8001be0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	4798      	blx	r3
 8001bb0:	e016      	b.n	8001be0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d107      	bne.n	8001bd0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0208 	bic.w	r2, r2, #8
 8001bce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be4:	2220      	movs	r2, #32
 8001be6:	409a      	lsls	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 808f 	beq.w	8001d10 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0310 	and.w	r3, r3, #16
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 8087 	beq.w	8001d10 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c06:	2220      	movs	r2, #32
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b05      	cmp	r3, #5
 8001c18:	d136      	bne.n	8001c88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 0216 	bic.w	r2, r2, #22
 8001c28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	695a      	ldr	r2, [r3, #20]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d103      	bne.n	8001c4a <HAL_DMA_IRQHandler+0x1da>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d007      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 0208 	bic.w	r2, r2, #8
 8001c58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5e:	223f      	movs	r2, #63	; 0x3f
 8001c60:	409a      	lsls	r2, r3
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d07e      	beq.n	8001d7c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	4798      	blx	r3
        }
        return;
 8001c86:	e079      	b.n	8001d7c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d01d      	beq.n	8001cd2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10d      	bne.n	8001cc0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d031      	beq.n	8001d10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	4798      	blx	r3
 8001cb4:	e02c      	b.n	8001d10 <HAL_DMA_IRQHandler+0x2a0>
 8001cb6:	bf00      	nop
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d023      	beq.n	8001d10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	4798      	blx	r3
 8001cd0:	e01e      	b.n	8001d10 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10f      	bne.n	8001d00 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0210 	bic.w	r2, r2, #16
 8001cee:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d032      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d022      	beq.n	8001d6a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2205      	movs	r2, #5
 8001d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0201 	bic.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d307      	bcc.n	8001d58 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f2      	bne.n	8001d3c <HAL_DMA_IRQHandler+0x2cc>
 8001d56:	e000      	b.n	8001d5a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d58:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d005      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	4798      	blx	r3
 8001d7a:	e000      	b.n	8001d7e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d7c:	bf00      	nop
    }
  }
}
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	3b10      	subs	r3, #16
 8001d94:	4a13      	ldr	r2, [pc, #76]	; (8001de4 <DMA_CalcBaseAndBitshift+0x60>)
 8001d96:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9a:	091b      	lsrs	r3, r3, #4
 8001d9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d9e:	4a12      	ldr	r2, [pc, #72]	; (8001de8 <DMA_CalcBaseAndBitshift+0x64>)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4413      	add	r3, r2
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d908      	bls.n	8001dc4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	461a      	mov	r2, r3
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <DMA_CalcBaseAndBitshift+0x68>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	1d1a      	adds	r2, r3, #4
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	659a      	str	r2, [r3, #88]	; 0x58
 8001dc2:	e006      	b.n	8001dd2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b08      	ldr	r3, [pc, #32]	; (8001dec <DMA_CalcBaseAndBitshift+0x68>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	aaaaaaab 	.word	0xaaaaaaab
 8001de8:	08009de4 	.word	0x08009de4
 8001dec:	fffffc00 	.word	0xfffffc00

08001df0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d11f      	bne.n	8001e4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	2b03      	cmp	r3, #3
 8001e0e:	d856      	bhi.n	8001ebe <DMA_CheckFifoParam+0xce>
 8001e10:	a201      	add	r2, pc, #4	; (adr r2, 8001e18 <DMA_CheckFifoParam+0x28>)
 8001e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e16:	bf00      	nop
 8001e18:	08001e29 	.word	0x08001e29
 8001e1c:	08001e3b 	.word	0x08001e3b
 8001e20:	08001e29 	.word	0x08001e29
 8001e24:	08001ebf 	.word	0x08001ebf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d046      	beq.n	8001ec2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e38:	e043      	b.n	8001ec2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e42:	d140      	bne.n	8001ec6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e48:	e03d      	b.n	8001ec6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e52:	d121      	bne.n	8001e98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b03      	cmp	r3, #3
 8001e58:	d837      	bhi.n	8001eca <DMA_CheckFifoParam+0xda>
 8001e5a:	a201      	add	r2, pc, #4	; (adr r2, 8001e60 <DMA_CheckFifoParam+0x70>)
 8001e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e60:	08001e71 	.word	0x08001e71
 8001e64:	08001e77 	.word	0x08001e77
 8001e68:	08001e71 	.word	0x08001e71
 8001e6c:	08001e89 	.word	0x08001e89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	73fb      	strb	r3, [r7, #15]
      break;
 8001e74:	e030      	b.n	8001ed8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d025      	beq.n	8001ece <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e86:	e022      	b.n	8001ece <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e90:	d11f      	bne.n	8001ed2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e96:	e01c      	b.n	8001ed2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d903      	bls.n	8001ea6 <DMA_CheckFifoParam+0xb6>
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	d003      	beq.n	8001eac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ea4:	e018      	b.n	8001ed8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	73fb      	strb	r3, [r7, #15]
      break;
 8001eaa:	e015      	b.n	8001ed8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00e      	beq.n	8001ed6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	73fb      	strb	r3, [r7, #15]
      break;
 8001ebc:	e00b      	b.n	8001ed6 <DMA_CheckFifoParam+0xe6>
      break;
 8001ebe:	bf00      	nop
 8001ec0:	e00a      	b.n	8001ed8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ec2:	bf00      	nop
 8001ec4:	e008      	b.n	8001ed8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ec6:	bf00      	nop
 8001ec8:	e006      	b.n	8001ed8 <DMA_CheckFifoParam+0xe8>
      break;
 8001eca:	bf00      	nop
 8001ecc:	e004      	b.n	8001ed8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ece:	bf00      	nop
 8001ed0:	e002      	b.n	8001ed8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001ed2:	bf00      	nop
 8001ed4:	e000      	b.n	8001ed8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ed6:	bf00      	nop
    }
  } 
  
  return status; 
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop

08001ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b089      	sub	sp, #36	; 0x24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
 8001f06:	e175      	b.n	80021f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001f08:	2201      	movs	r2, #1
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	f040 8164 	bne.w	80021ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d00b      	beq.n	8001f46 <HAL_GPIO_Init+0x5e>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d007      	beq.n	8001f46 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f3a:	2b11      	cmp	r3, #17
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b12      	cmp	r3, #18
 8001f44:	d130      	bne.n	8001fa8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	2203      	movs	r2, #3
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	091b      	lsrs	r3, r3, #4
 8001f92:	f003 0201 	and.w	r2, r3, #1
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_Init+0x100>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b12      	cmp	r3, #18
 8001fe6:	d123      	bne.n	8002030 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	08da      	lsrs	r2, r3, #3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3208      	adds	r2, #8
 8001ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	220f      	movs	r2, #15
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	08da      	lsrs	r2, r3, #3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3208      	adds	r2, #8
 800202a:	69b9      	ldr	r1, [r7, #24]
 800202c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	2203      	movs	r2, #3
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 0203 	and.w	r2, r3, #3
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 80be 	beq.w	80021ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002072:	4b66      	ldr	r3, [pc, #408]	; (800220c <HAL_GPIO_Init+0x324>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	4a65      	ldr	r2, [pc, #404]	; (800220c <HAL_GPIO_Init+0x324>)
 8002078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800207c:	6453      	str	r3, [r2, #68]	; 0x44
 800207e:	4b63      	ldr	r3, [pc, #396]	; (800220c <HAL_GPIO_Init+0x324>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800208a:	4a61      	ldr	r2, [pc, #388]	; (8002210 <HAL_GPIO_Init+0x328>)
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	089b      	lsrs	r3, r3, #2
 8002090:	3302      	adds	r3, #2
 8002092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	220f      	movs	r2, #15
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a58      	ldr	r2, [pc, #352]	; (8002214 <HAL_GPIO_Init+0x32c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d037      	beq.n	8002126 <HAL_GPIO_Init+0x23e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a57      	ldr	r2, [pc, #348]	; (8002218 <HAL_GPIO_Init+0x330>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d031      	beq.n	8002122 <HAL_GPIO_Init+0x23a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a56      	ldr	r2, [pc, #344]	; (800221c <HAL_GPIO_Init+0x334>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d02b      	beq.n	800211e <HAL_GPIO_Init+0x236>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a55      	ldr	r2, [pc, #340]	; (8002220 <HAL_GPIO_Init+0x338>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d025      	beq.n	800211a <HAL_GPIO_Init+0x232>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a54      	ldr	r2, [pc, #336]	; (8002224 <HAL_GPIO_Init+0x33c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d01f      	beq.n	8002116 <HAL_GPIO_Init+0x22e>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a53      	ldr	r2, [pc, #332]	; (8002228 <HAL_GPIO_Init+0x340>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d019      	beq.n	8002112 <HAL_GPIO_Init+0x22a>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a52      	ldr	r2, [pc, #328]	; (800222c <HAL_GPIO_Init+0x344>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d013      	beq.n	800210e <HAL_GPIO_Init+0x226>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a51      	ldr	r2, [pc, #324]	; (8002230 <HAL_GPIO_Init+0x348>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d00d      	beq.n	800210a <HAL_GPIO_Init+0x222>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a50      	ldr	r2, [pc, #320]	; (8002234 <HAL_GPIO_Init+0x34c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d007      	beq.n	8002106 <HAL_GPIO_Init+0x21e>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a4f      	ldr	r2, [pc, #316]	; (8002238 <HAL_GPIO_Init+0x350>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d101      	bne.n	8002102 <HAL_GPIO_Init+0x21a>
 80020fe:	2309      	movs	r3, #9
 8002100:	e012      	b.n	8002128 <HAL_GPIO_Init+0x240>
 8002102:	230a      	movs	r3, #10
 8002104:	e010      	b.n	8002128 <HAL_GPIO_Init+0x240>
 8002106:	2308      	movs	r3, #8
 8002108:	e00e      	b.n	8002128 <HAL_GPIO_Init+0x240>
 800210a:	2307      	movs	r3, #7
 800210c:	e00c      	b.n	8002128 <HAL_GPIO_Init+0x240>
 800210e:	2306      	movs	r3, #6
 8002110:	e00a      	b.n	8002128 <HAL_GPIO_Init+0x240>
 8002112:	2305      	movs	r3, #5
 8002114:	e008      	b.n	8002128 <HAL_GPIO_Init+0x240>
 8002116:	2304      	movs	r3, #4
 8002118:	e006      	b.n	8002128 <HAL_GPIO_Init+0x240>
 800211a:	2303      	movs	r3, #3
 800211c:	e004      	b.n	8002128 <HAL_GPIO_Init+0x240>
 800211e:	2302      	movs	r3, #2
 8002120:	e002      	b.n	8002128 <HAL_GPIO_Init+0x240>
 8002122:	2301      	movs	r3, #1
 8002124:	e000      	b.n	8002128 <HAL_GPIO_Init+0x240>
 8002126:	2300      	movs	r3, #0
 8002128:	69fa      	ldr	r2, [r7, #28]
 800212a:	f002 0203 	and.w	r2, r2, #3
 800212e:	0092      	lsls	r2, r2, #2
 8002130:	4093      	lsls	r3, r2
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002138:	4935      	ldr	r1, [pc, #212]	; (8002210 <HAL_GPIO_Init+0x328>)
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	089b      	lsrs	r3, r3, #2
 800213e:	3302      	adds	r3, #2
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002146:	4b3d      	ldr	r3, [pc, #244]	; (800223c <HAL_GPIO_Init+0x354>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	43db      	mvns	r3, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800216a:	4a34      	ldr	r2, [pc, #208]	; (800223c <HAL_GPIO_Init+0x354>)
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002170:	4b32      	ldr	r3, [pc, #200]	; (800223c <HAL_GPIO_Init+0x354>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002194:	4a29      	ldr	r2, [pc, #164]	; (800223c <HAL_GPIO_Init+0x354>)
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800219a:	4b28      	ldr	r3, [pc, #160]	; (800223c <HAL_GPIO_Init+0x354>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	43db      	mvns	r3, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4013      	ands	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021be:	4a1f      	ldr	r2, [pc, #124]	; (800223c <HAL_GPIO_Init+0x354>)
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021c4:	4b1d      	ldr	r3, [pc, #116]	; (800223c <HAL_GPIO_Init+0x354>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021e8:	4a14      	ldr	r2, [pc, #80]	; (800223c <HAL_GPIO_Init+0x354>)
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3301      	adds	r3, #1
 80021f2:	61fb      	str	r3, [r7, #28]
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	2b0f      	cmp	r3, #15
 80021f8:	f67f ae86 	bls.w	8001f08 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80021fc:	bf00      	nop
 80021fe:	bf00      	nop
 8002200:	3724      	adds	r7, #36	; 0x24
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	40023800 	.word	0x40023800
 8002210:	40013800 	.word	0x40013800
 8002214:	40020000 	.word	0x40020000
 8002218:	40020400 	.word	0x40020400
 800221c:	40020800 	.word	0x40020800
 8002220:	40020c00 	.word	0x40020c00
 8002224:	40021000 	.word	0x40021000
 8002228:	40021400 	.word	0x40021400
 800222c:	40021800 	.word	0x40021800
 8002230:	40021c00 	.word	0x40021c00
 8002234:	40022000 	.word	0x40022000
 8002238:	40022400 	.word	0x40022400
 800223c:	40013c00 	.word	0x40013c00

08002240 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	887b      	ldrh	r3, [r7, #2]
 8002252:	4013      	ands	r3, r2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002258:	2301      	movs	r3, #1
 800225a:	73fb      	strb	r3, [r7, #15]
 800225c:	e001      	b.n	8002262 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800225e:	2300      	movs	r3, #0
 8002260:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002262:	7bfb      	ldrb	r3, [r7, #15]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	807b      	strh	r3, [r7, #2]
 800227c:	4613      	mov	r3, r2
 800227e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002280:	787b      	ldrb	r3, [r7, #1]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002286:	887a      	ldrh	r2, [r7, #2]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800228c:	e003      	b.n	8002296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800228e:	887b      	ldrh	r3, [r7, #2]
 8002290:	041a      	lsls	r2, r3, #16
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	619a      	str	r2, [r3, #24]
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80022ae:	4b23      	ldr	r3, [pc, #140]	; (800233c <HAL_PWREx_EnableOverDrive+0x98>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	4a22      	ldr	r2, [pc, #136]	; (800233c <HAL_PWREx_EnableOverDrive+0x98>)
 80022b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ba:	4b20      	ldr	r3, [pc, #128]	; (800233c <HAL_PWREx_EnableOverDrive+0x98>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c2:	603b      	str	r3, [r7, #0]
 80022c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80022c6:	4b1e      	ldr	r3, [pc, #120]	; (8002340 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a1d      	ldr	r2, [pc, #116]	; (8002340 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022d2:	f7ff f9bb 	bl	800164c <HAL_GetTick>
 80022d6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80022d8:	e009      	b.n	80022ee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80022da:	f7ff f9b7 	bl	800164c <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022e8:	d901      	bls.n	80022ee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e022      	b.n	8002334 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80022ee:	4b14      	ldr	r3, [pc, #80]	; (8002340 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022fa:	d1ee      	bne.n	80022da <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80022fc:	4b10      	ldr	r3, [pc, #64]	; (8002340 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a0f      	ldr	r2, [pc, #60]	; (8002340 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002306:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002308:	f7ff f9a0 	bl	800164c <HAL_GetTick>
 800230c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800230e:	e009      	b.n	8002324 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002310:	f7ff f99c 	bl	800164c <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800231e:	d901      	bls.n	8002324 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e007      	b.n	8002334 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002330:	d1ee      	bne.n	8002310 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40023800 	.word	0x40023800
 8002340:	40007000 	.word	0x40007000

08002344 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800234c:	2300      	movs	r3, #0
 800234e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e291      	b.n	800287e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 8087 	beq.w	8002476 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002368:	4b96      	ldr	r3, [pc, #600]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 030c 	and.w	r3, r3, #12
 8002370:	2b04      	cmp	r3, #4
 8002372:	d00c      	beq.n	800238e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002374:	4b93      	ldr	r3, [pc, #588]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 030c 	and.w	r3, r3, #12
 800237c:	2b08      	cmp	r3, #8
 800237e:	d112      	bne.n	80023a6 <HAL_RCC_OscConfig+0x62>
 8002380:	4b90      	ldr	r3, [pc, #576]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002388:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800238c:	d10b      	bne.n	80023a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800238e:	4b8d      	ldr	r3, [pc, #564]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d06c      	beq.n	8002474 <HAL_RCC_OscConfig+0x130>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d168      	bne.n	8002474 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e26b      	b.n	800287e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ae:	d106      	bne.n	80023be <HAL_RCC_OscConfig+0x7a>
 80023b0:	4b84      	ldr	r3, [pc, #528]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a83      	ldr	r2, [pc, #524]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 80023b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	e02e      	b.n	800241c <HAL_RCC_OscConfig+0xd8>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10c      	bne.n	80023e0 <HAL_RCC_OscConfig+0x9c>
 80023c6:	4b7f      	ldr	r3, [pc, #508]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a7e      	ldr	r2, [pc, #504]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 80023cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	4b7c      	ldr	r3, [pc, #496]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a7b      	ldr	r2, [pc, #492]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 80023d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	e01d      	b.n	800241c <HAL_RCC_OscConfig+0xd8>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023e8:	d10c      	bne.n	8002404 <HAL_RCC_OscConfig+0xc0>
 80023ea:	4b76      	ldr	r3, [pc, #472]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a75      	ldr	r2, [pc, #468]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 80023f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	4b73      	ldr	r3, [pc, #460]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a72      	ldr	r2, [pc, #456]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 80023fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	e00b      	b.n	800241c <HAL_RCC_OscConfig+0xd8>
 8002404:	4b6f      	ldr	r3, [pc, #444]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a6e      	ldr	r2, [pc, #440]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 800240a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	4b6c      	ldr	r3, [pc, #432]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a6b      	ldr	r2, [pc, #428]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 8002416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800241a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d013      	beq.n	800244c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002424:	f7ff f912 	bl	800164c <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800242c:	f7ff f90e 	bl	800164c <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b64      	cmp	r3, #100	; 0x64
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e21f      	b.n	800287e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243e:	4b61      	ldr	r3, [pc, #388]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0xe8>
 800244a:	e014      	b.n	8002476 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244c:	f7ff f8fe 	bl	800164c <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002454:	f7ff f8fa 	bl	800164c <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b64      	cmp	r3, #100	; 0x64
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e20b      	b.n	800287e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002466:	4b57      	ldr	r3, [pc, #348]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0x110>
 8002472:	e000      	b.n	8002476 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d069      	beq.n	8002556 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002482:	4b50      	ldr	r3, [pc, #320]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00b      	beq.n	80024a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800248e:	4b4d      	ldr	r3, [pc, #308]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b08      	cmp	r3, #8
 8002498:	d11c      	bne.n	80024d4 <HAL_RCC_OscConfig+0x190>
 800249a:	4b4a      	ldr	r3, [pc, #296]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d116      	bne.n	80024d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a6:	4b47      	ldr	r3, [pc, #284]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d005      	beq.n	80024be <HAL_RCC_OscConfig+0x17a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d001      	beq.n	80024be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e1df      	b.n	800287e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024be:	4b41      	ldr	r3, [pc, #260]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	493d      	ldr	r1, [pc, #244]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d2:	e040      	b.n	8002556 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d023      	beq.n	8002524 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024dc:	4b39      	ldr	r3, [pc, #228]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a38      	ldr	r2, [pc, #224]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7ff f8b0 	bl	800164c <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f0:	f7ff f8ac 	bl	800164c <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e1bd      	b.n	800287e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002502:	4b30      	ldr	r3, [pc, #192]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800250e:	4b2d      	ldr	r3, [pc, #180]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4929      	ldr	r1, [pc, #164]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 800251e:	4313      	orrs	r3, r2
 8002520:	600b      	str	r3, [r1, #0]
 8002522:	e018      	b.n	8002556 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002524:	4b27      	ldr	r3, [pc, #156]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a26      	ldr	r2, [pc, #152]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 800252a:	f023 0301 	bic.w	r3, r3, #1
 800252e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7ff f88c 	bl	800164c <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002538:	f7ff f888 	bl	800164c <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e199      	b.n	800287e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800254a:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d038      	beq.n	80025d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d019      	beq.n	800259e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800256a:	4b16      	ldr	r3, [pc, #88]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 800256c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800256e:	4a15      	ldr	r2, [pc, #84]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002576:	f7ff f869 	bl	800164c <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800257e:	f7ff f865 	bl	800164c <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e176      	b.n	800287e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002590:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 8002592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x23a>
 800259c:	e01a      	b.n	80025d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 80025a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a2:	4a08      	ldr	r2, [pc, #32]	; (80025c4 <HAL_RCC_OscConfig+0x280>)
 80025a4:	f023 0301 	bic.w	r3, r3, #1
 80025a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025aa:	f7ff f84f 	bl	800164c <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b0:	e00a      	b.n	80025c8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b2:	f7ff f84b 	bl	800164c <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d903      	bls.n	80025c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e15c      	b.n	800287e <HAL_RCC_OscConfig+0x53a>
 80025c4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c8:	4b91      	ldr	r3, [pc, #580]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 80025ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1ee      	bne.n	80025b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 80a4 	beq.w	800272a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025e2:	4b8b      	ldr	r3, [pc, #556]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10d      	bne.n	800260a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ee:	4b88      	ldr	r3, [pc, #544]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	4a87      	ldr	r2, [pc, #540]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 80025f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f8:	6413      	str	r3, [r2, #64]	; 0x40
 80025fa:	4b85      	ldr	r3, [pc, #532]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002606:	2301      	movs	r3, #1
 8002608:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800260a:	4b82      	ldr	r3, [pc, #520]	; (8002814 <HAL_RCC_OscConfig+0x4d0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002612:	2b00      	cmp	r3, #0
 8002614:	d118      	bne.n	8002648 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002616:	4b7f      	ldr	r3, [pc, #508]	; (8002814 <HAL_RCC_OscConfig+0x4d0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a7e      	ldr	r2, [pc, #504]	; (8002814 <HAL_RCC_OscConfig+0x4d0>)
 800261c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002622:	f7ff f813 	bl	800164c <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800262a:	f7ff f80f 	bl	800164c <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b64      	cmp	r3, #100	; 0x64
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e120      	b.n	800287e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800263c:	4b75      	ldr	r3, [pc, #468]	; (8002814 <HAL_RCC_OscConfig+0x4d0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0f0      	beq.n	800262a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d106      	bne.n	800265e <HAL_RCC_OscConfig+0x31a>
 8002650:	4b6f      	ldr	r3, [pc, #444]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 8002652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002654:	4a6e      	ldr	r2, [pc, #440]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	6713      	str	r3, [r2, #112]	; 0x70
 800265c:	e02d      	b.n	80026ba <HAL_RCC_OscConfig+0x376>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10c      	bne.n	8002680 <HAL_RCC_OscConfig+0x33c>
 8002666:	4b6a      	ldr	r3, [pc, #424]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 8002668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266a:	4a69      	ldr	r2, [pc, #420]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 800266c:	f023 0301 	bic.w	r3, r3, #1
 8002670:	6713      	str	r3, [r2, #112]	; 0x70
 8002672:	4b67      	ldr	r3, [pc, #412]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 8002674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002676:	4a66      	ldr	r2, [pc, #408]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 8002678:	f023 0304 	bic.w	r3, r3, #4
 800267c:	6713      	str	r3, [r2, #112]	; 0x70
 800267e:	e01c      	b.n	80026ba <HAL_RCC_OscConfig+0x376>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2b05      	cmp	r3, #5
 8002686:	d10c      	bne.n	80026a2 <HAL_RCC_OscConfig+0x35e>
 8002688:	4b61      	ldr	r3, [pc, #388]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268c:	4a60      	ldr	r2, [pc, #384]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 800268e:	f043 0304 	orr.w	r3, r3, #4
 8002692:	6713      	str	r3, [r2, #112]	; 0x70
 8002694:	4b5e      	ldr	r3, [pc, #376]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 8002696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002698:	4a5d      	ldr	r2, [pc, #372]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	6713      	str	r3, [r2, #112]	; 0x70
 80026a0:	e00b      	b.n	80026ba <HAL_RCC_OscConfig+0x376>
 80026a2:	4b5b      	ldr	r3, [pc, #364]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 80026a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a6:	4a5a      	ldr	r2, [pc, #360]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 80026a8:	f023 0301 	bic.w	r3, r3, #1
 80026ac:	6713      	str	r3, [r2, #112]	; 0x70
 80026ae:	4b58      	ldr	r3, [pc, #352]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 80026b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b2:	4a57      	ldr	r2, [pc, #348]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 80026b4:	f023 0304 	bic.w	r3, r3, #4
 80026b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d015      	beq.n	80026ee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c2:	f7fe ffc3 	bl	800164c <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c8:	e00a      	b.n	80026e0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ca:	f7fe ffbf 	bl	800164c <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d8:	4293      	cmp	r3, r2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e0ce      	b.n	800287e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e0:	4b4b      	ldr	r3, [pc, #300]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 80026e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0ee      	beq.n	80026ca <HAL_RCC_OscConfig+0x386>
 80026ec:	e014      	b.n	8002718 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ee:	f7fe ffad 	bl	800164c <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f4:	e00a      	b.n	800270c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f6:	f7fe ffa9 	bl	800164c <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	f241 3288 	movw	r2, #5000	; 0x1388
 8002704:	4293      	cmp	r3, r2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e0b8      	b.n	800287e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800270c:	4b40      	ldr	r3, [pc, #256]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1ee      	bne.n	80026f6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002718:	7dfb      	ldrb	r3, [r7, #23]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d105      	bne.n	800272a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800271e:	4b3c      	ldr	r3, [pc, #240]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	4a3b      	ldr	r2, [pc, #236]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 8002724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002728:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 80a4 	beq.w	800287c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002734:	4b36      	ldr	r3, [pc, #216]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 030c 	and.w	r3, r3, #12
 800273c:	2b08      	cmp	r3, #8
 800273e:	d06b      	beq.n	8002818 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	2b02      	cmp	r3, #2
 8002746:	d149      	bne.n	80027dc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002748:	4b31      	ldr	r3, [pc, #196]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a30      	ldr	r2, [pc, #192]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 800274e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe ff7a 	bl	800164c <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275c:	f7fe ff76 	bl	800164c <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e087      	b.n	800287e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276e:	4b28      	ldr	r3, [pc, #160]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69da      	ldr	r2, [r3, #28]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002788:	019b      	lsls	r3, r3, #6
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	085b      	lsrs	r3, r3, #1
 8002792:	3b01      	subs	r3, #1
 8002794:	041b      	lsls	r3, r3, #16
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	061b      	lsls	r3, r3, #24
 800279e:	4313      	orrs	r3, r2
 80027a0:	4a1b      	ldr	r2, [pc, #108]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 80027a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027a6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027a8:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a18      	ldr	r2, [pc, #96]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 80027ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b4:	f7fe ff4a 	bl	800164c <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027bc:	f7fe ff46 	bl	800164c <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e057      	b.n	800287e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ce:	4b10      	ldr	r3, [pc, #64]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f0      	beq.n	80027bc <HAL_RCC_OscConfig+0x478>
 80027da:	e04f      	b.n	800287c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027dc:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a0b      	ldr	r2, [pc, #44]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 80027e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e8:	f7fe ff30 	bl	800164c <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f0:	f7fe ff2c 	bl	800164c <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e03d      	b.n	800287e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002802:	4b03      	ldr	r3, [pc, #12]	; (8002810 <HAL_RCC_OscConfig+0x4cc>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x4ac>
 800280e:	e035      	b.n	800287c <HAL_RCC_OscConfig+0x538>
 8002810:	40023800 	.word	0x40023800
 8002814:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002818:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <HAL_RCC_OscConfig+0x544>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d028      	beq.n	8002878 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002830:	429a      	cmp	r2, r3
 8002832:	d121      	bne.n	8002878 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283e:	429a      	cmp	r2, r3
 8002840:	d11a      	bne.n	8002878 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002848:	4013      	ands	r3, r2
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800284e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002850:	4293      	cmp	r3, r2
 8002852:	d111      	bne.n	8002878 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285e:	085b      	lsrs	r3, r3, #1
 8002860:	3b01      	subs	r3, #1
 8002862:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002864:	429a      	cmp	r2, r3
 8002866:	d107      	bne.n	8002878 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002872:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d001      	beq.n	800287c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40023800 	.word	0x40023800

0800288c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e0d0      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028a4:	4b6a      	ldr	r3, [pc, #424]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 030f 	and.w	r3, r3, #15
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d910      	bls.n	80028d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b2:	4b67      	ldr	r3, [pc, #412]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 020f 	bic.w	r2, r3, #15
 80028ba:	4965      	ldr	r1, [pc, #404]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c2:	4b63      	ldr	r3, [pc, #396]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0b8      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d020      	beq.n	8002922 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028ec:	4b59      	ldr	r3, [pc, #356]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	4a58      	ldr	r2, [pc, #352]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 80028f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002904:	4b53      	ldr	r3, [pc, #332]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	4a52      	ldr	r2, [pc, #328]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 800290a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800290e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002910:	4b50      	ldr	r3, [pc, #320]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	494d      	ldr	r1, [pc, #308]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d040      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d107      	bne.n	8002946 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002936:	4b47      	ldr	r3, [pc, #284]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d115      	bne.n	800296e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e07f      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d107      	bne.n	800295e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800294e:	4b41      	ldr	r3, [pc, #260]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d109      	bne.n	800296e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e073      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800295e:	4b3d      	ldr	r3, [pc, #244]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e06b      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800296e:	4b39      	ldr	r3, [pc, #228]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f023 0203 	bic.w	r2, r3, #3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	4936      	ldr	r1, [pc, #216]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 800297c:	4313      	orrs	r3, r2
 800297e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002980:	f7fe fe64 	bl	800164c <HAL_GetTick>
 8002984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002986:	e00a      	b.n	800299e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002988:	f7fe fe60 	bl	800164c <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	f241 3288 	movw	r2, #5000	; 0x1388
 8002996:	4293      	cmp	r3, r2
 8002998:	d901      	bls.n	800299e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e053      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299e:	4b2d      	ldr	r3, [pc, #180]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 020c 	and.w	r2, r3, #12
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d1eb      	bne.n	8002988 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029b0:	4b27      	ldr	r3, [pc, #156]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 030f 	and.w	r3, r3, #15
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d210      	bcs.n	80029e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029be:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f023 020f 	bic.w	r2, r3, #15
 80029c6:	4922      	ldr	r1, [pc, #136]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ce:	4b20      	ldr	r3, [pc, #128]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e032      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ec:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	4916      	ldr	r1, [pc, #88]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d009      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a0a:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	490e      	ldr	r1, [pc, #56]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a1e:	f000 f821 	bl	8002a64 <HAL_RCC_GetSysClockFreq>
 8002a22:	4602      	mov	r2, r0
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	091b      	lsrs	r3, r3, #4
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	490a      	ldr	r1, [pc, #40]	; (8002a58 <HAL_RCC_ClockConfig+0x1cc>)
 8002a30:	5ccb      	ldrb	r3, [r1, r3]
 8002a32:	fa22 f303 	lsr.w	r3, r2, r3
 8002a36:	4a09      	ldr	r2, [pc, #36]	; (8002a5c <HAL_RCC_ClockConfig+0x1d0>)
 8002a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a3a:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <HAL_RCC_ClockConfig+0x1d4>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fe fdc0 	bl	80015c4 <HAL_InitTick>

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40023c00 	.word	0x40023c00
 8002a54:	40023800 	.word	0x40023800
 8002a58:	08009dd4 	.word	0x08009dd4
 8002a5c:	20000000 	.word	0x20000000
 8002a60:	2000000c 	.word	0x2000000c

08002a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a68:	b090      	sub	sp, #64	; 0x40
 8002a6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a70:	2300      	movs	r3, #0
 8002a72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a74:	2300      	movs	r3, #0
 8002a76:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a7c:	4b59      	ldr	r3, [pc, #356]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 030c 	and.w	r3, r3, #12
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d00d      	beq.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x40>
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	f200 80a1 	bhi.w	8002bd0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <HAL_RCC_GetSysClockFreq+0x34>
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d003      	beq.n	8002a9e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a96:	e09b      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a98:	4b53      	ldr	r3, [pc, #332]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a9a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a9c:	e09b      	b.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a9e:	4b53      	ldr	r3, [pc, #332]	; (8002bec <HAL_RCC_GetSysClockFreq+0x188>)
 8002aa0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002aa2:	e098      	b.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002aa4:	4b4f      	ldr	r3, [pc, #316]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aac:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002aae:	4b4d      	ldr	r3, [pc, #308]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d028      	beq.n	8002b0c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aba:	4b4a      	ldr	r3, [pc, #296]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	099b      	lsrs	r3, r3, #6
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	623b      	str	r3, [r7, #32]
 8002ac4:	627a      	str	r2, [r7, #36]	; 0x24
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
 8002ac8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002acc:	2100      	movs	r1, #0
 8002ace:	4b47      	ldr	r3, [pc, #284]	; (8002bec <HAL_RCC_GetSysClockFreq+0x188>)
 8002ad0:	fb03 f201 	mul.w	r2, r3, r1
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	fb00 f303 	mul.w	r3, r0, r3
 8002ada:	4413      	add	r3, r2
 8002adc:	4a43      	ldr	r2, [pc, #268]	; (8002bec <HAL_RCC_GetSysClockFreq+0x188>)
 8002ade:	fba0 1202 	umull	r1, r2, r0, r2
 8002ae2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ae4:	460a      	mov	r2, r1
 8002ae6:	62ba      	str	r2, [r7, #40]	; 0x28
 8002ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aea:	4413      	add	r3, r2
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af0:	2200      	movs	r2, #0
 8002af2:	61bb      	str	r3, [r7, #24]
 8002af4:	61fa      	str	r2, [r7, #28]
 8002af6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002afa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002afe:	f7fd fbd7 	bl	80002b0 <__aeabi_uldivmod>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	4613      	mov	r3, r2
 8002b08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b0a:	e053      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b0c:	4b35      	ldr	r3, [pc, #212]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	099b      	lsrs	r3, r3, #6
 8002b12:	2200      	movs	r2, #0
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	617a      	str	r2, [r7, #20]
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b1e:	f04f 0b00 	mov.w	fp, #0
 8002b22:	4652      	mov	r2, sl
 8002b24:	465b      	mov	r3, fp
 8002b26:	f04f 0000 	mov.w	r0, #0
 8002b2a:	f04f 0100 	mov.w	r1, #0
 8002b2e:	0159      	lsls	r1, r3, #5
 8002b30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b34:	0150      	lsls	r0, r2, #5
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	ebb2 080a 	subs.w	r8, r2, sl
 8002b3e:	eb63 090b 	sbc.w	r9, r3, fp
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	f04f 0300 	mov.w	r3, #0
 8002b4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b56:	ebb2 0408 	subs.w	r4, r2, r8
 8002b5a:	eb63 0509 	sbc.w	r5, r3, r9
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	f04f 0300 	mov.w	r3, #0
 8002b66:	00eb      	lsls	r3, r5, #3
 8002b68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b6c:	00e2      	lsls	r2, r4, #3
 8002b6e:	4614      	mov	r4, r2
 8002b70:	461d      	mov	r5, r3
 8002b72:	eb14 030a 	adds.w	r3, r4, sl
 8002b76:	603b      	str	r3, [r7, #0]
 8002b78:	eb45 030b 	adc.w	r3, r5, fp
 8002b7c:	607b      	str	r3, [r7, #4]
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	f04f 0300 	mov.w	r3, #0
 8002b86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b8a:	4629      	mov	r1, r5
 8002b8c:	028b      	lsls	r3, r1, #10
 8002b8e:	4621      	mov	r1, r4
 8002b90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b94:	4621      	mov	r1, r4
 8002b96:	028a      	lsls	r2, r1, #10
 8002b98:	4610      	mov	r0, r2
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	60fa      	str	r2, [r7, #12]
 8002ba4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ba8:	f7fd fb82 	bl	80002b0 <__aeabi_uldivmod>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	0c1b      	lsrs	r3, r3, #16
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002bc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bcc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bce:	e002      	b.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bd0:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bd2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3740      	adds	r7, #64	; 0x40
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002be2:	bf00      	nop
 8002be4:	40023800 	.word	0x40023800
 8002be8:	00f42400 	.word	0x00f42400
 8002bec:	017d7840 	.word	0x017d7840

08002bf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d012      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c18:	4b69      	ldr	r3, [pc, #420]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	4a68      	ldr	r2, [pc, #416]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c22:	6093      	str	r3, [r2, #8]
 8002c24:	4b66      	ldr	r3, [pc, #408]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2c:	4964      	ldr	r1, [pc, #400]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d017      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c4a:	4b5d      	ldr	r3, [pc, #372]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c58:	4959      	ldr	r1, [pc, #356]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c68:	d101      	bne.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002c76:	2301      	movs	r3, #1
 8002c78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d017      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c86:	4b4e      	ldr	r3, [pc, #312]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	494a      	ldr	r1, [pc, #296]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ca4:	d101      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0320 	and.w	r3, r3, #32
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 808b 	beq.w	8002dea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cd4:	4b3a      	ldr	r3, [pc, #232]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	4a39      	ldr	r2, [pc, #228]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cde:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce0:	4b37      	ldr	r3, [pc, #220]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002cec:	4b35      	ldr	r3, [pc, #212]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a34      	ldr	r2, [pc, #208]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cf8:	f7fe fca8 	bl	800164c <HAL_GetTick>
 8002cfc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d00:	f7fe fca4 	bl	800164c <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	; 0x64
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e357      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d12:	4b2c      	ldr	r3, [pc, #176]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0f0      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d1e:	4b28      	ldr	r3, [pc, #160]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d26:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d035      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d02e      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d3c:	4b20      	ldr	r3, [pc, #128]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d44:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d46:	4b1e      	ldr	r3, [pc, #120]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4a:	4a1d      	ldr	r2, [pc, #116]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d50:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d52:	4b1b      	ldr	r3, [pc, #108]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d56:	4a1a      	ldr	r2, [pc, #104]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d5c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002d5e:	4a18      	ldr	r2, [pc, #96]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d64:	4b16      	ldr	r3, [pc, #88]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d114      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d70:	f7fe fc6c 	bl	800164c <HAL_GetTick>
 8002d74:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d76:	e00a      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d78:	f7fe fc68 	bl	800164c <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e319      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8e:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0ee      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002da2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002da6:	d111      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002da8:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002db4:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002db6:	400b      	ands	r3, r1
 8002db8:	4901      	ldr	r1, [pc, #4]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	608b      	str	r3, [r1, #8]
 8002dbe:	e00b      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	40007000 	.word	0x40007000
 8002dc8:	0ffffcff 	.word	0x0ffffcff
 8002dcc:	4baa      	ldr	r3, [pc, #680]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	4aa9      	ldr	r2, [pc, #676]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dd2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002dd6:	6093      	str	r3, [r2, #8]
 8002dd8:	4ba7      	ldr	r3, [pc, #668]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de4:	49a4      	ldr	r1, [pc, #656]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0310 	and.w	r3, r3, #16
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d010      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002df6:	4ba0      	ldr	r3, [pc, #640]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dfc:	4a9e      	ldr	r2, [pc, #632]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002e06:	4b9c      	ldr	r3, [pc, #624]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e08:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e10:	4999      	ldr	r1, [pc, #612]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00a      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e24:	4b94      	ldr	r3, [pc, #592]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e32:	4991      	ldr	r1, [pc, #580]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e46:	4b8c      	ldr	r3, [pc, #560]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e54:	4988      	ldr	r1, [pc, #544]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00a      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e68:	4b83      	ldr	r3, [pc, #524]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e76:	4980      	ldr	r1, [pc, #512]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e8a:	4b7b      	ldr	r3, [pc, #492]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e98:	4977      	ldr	r1, [pc, #476]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00a      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002eac:	4b72      	ldr	r3, [pc, #456]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb2:	f023 0203 	bic.w	r2, r3, #3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	496f      	ldr	r1, [pc, #444]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ece:	4b6a      	ldr	r3, [pc, #424]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed4:	f023 020c 	bic.w	r2, r3, #12
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002edc:	4966      	ldr	r1, [pc, #408]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00a      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ef0:	4b61      	ldr	r3, [pc, #388]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efe:	495e      	ldr	r1, [pc, #376]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00a      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f12:	4b59      	ldr	r3, [pc, #356]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f18:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f20:	4955      	ldr	r1, [pc, #340]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00a      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f34:	4b50      	ldr	r3, [pc, #320]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f42:	494d      	ldr	r1, [pc, #308]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002f56:	4b48      	ldr	r3, [pc, #288]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f64:	4944      	ldr	r1, [pc, #272]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00a      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002f78:	4b3f      	ldr	r3, [pc, #252]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f86:	493c      	ldr	r1, [pc, #240]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00a      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002f9a:	4b37      	ldr	r3, [pc, #220]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa8:	4933      	ldr	r1, [pc, #204]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00a      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002fbc:	4b2e      	ldr	r3, [pc, #184]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fca:	492b      	ldr	r1, [pc, #172]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d011      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002fde:	4b26      	ldr	r3, [pc, #152]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fec:	4922      	ldr	r1, [pc, #136]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ff8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ffc:	d101      	bne.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ffe:	2301      	movs	r3, #1
 8003000:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800300e:	2301      	movs	r3, #1
 8003010:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00a      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800301e:	4b16      	ldr	r3, [pc, #88]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003024:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800302c:	4912      	ldr	r1, [pc, #72]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800302e:	4313      	orrs	r3, r2
 8003030:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00b      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003040:	4b0d      	ldr	r3, [pc, #52]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003046:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003050:	4909      	ldr	r1, [pc, #36]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003052:	4313      	orrs	r3, r2
 8003054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d005      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003066:	f040 80d9 	bne.w	800321c <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800306a:	4b03      	ldr	r3, [pc, #12]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a02      	ldr	r2, [pc, #8]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003070:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	e001      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003078:	40023800 	.word	0x40023800

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800307c:	f7fe fae6 	bl	800164c <HAL_GetTick>
 8003080:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003084:	f7fe fae2 	bl	800164c <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b64      	cmp	r3, #100	; 0x64
 8003090:	d901      	bls.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e195      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003096:	4b6d      	ldr	r3, [pc, #436]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x494>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d021      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d11d      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030b6:	4b65      	ldr	r3, [pc, #404]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030bc:	0c1b      	lsrs	r3, r3, #16
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030c4:	4b61      	ldr	r3, [pc, #388]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ca:	0e1b      	lsrs	r3, r3, #24
 80030cc:	f003 030f 	and.w	r3, r3, #15
 80030d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	019a      	lsls	r2, r3, #6
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	041b      	lsls	r3, r3, #16
 80030dc:	431a      	orrs	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	061b      	lsls	r3, r3, #24
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	071b      	lsls	r3, r3, #28
 80030ea:	4958      	ldr	r1, [pc, #352]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d004      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003102:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003106:	d00a      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x52e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003110:	2b00      	cmp	r3, #0
 8003112:	d02e      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x582>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003118:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800311c:	d129      	bne.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x582>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800311e:	4b4b      	ldr	r3, [pc, #300]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003120:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003124:	0c1b      	lsrs	r3, r3, #16
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800312c:	4b47      	ldr	r3, [pc, #284]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800312e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003132:	0f1b      	lsrs	r3, r3, #28
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	019a      	lsls	r2, r3, #6
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	041b      	lsls	r3, r3, #16
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	061b      	lsls	r3, r3, #24
 800314c:	431a      	orrs	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	071b      	lsls	r3, r3, #28
 8003152:	493e      	ldr	r1, [pc, #248]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800315a:	4b3c      	ldr	r3, [pc, #240]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800315c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003160:	f023 021f 	bic.w	r2, r3, #31
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	3b01      	subs	r3, #1
 800316a:	4938      	ldr	r1, [pc, #224]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d01d      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800317e:	4b33      	ldr	r3, [pc, #204]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003184:	0e1b      	lsrs	r3, r3, #24
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800318c:	4b2f      	ldr	r3, [pc, #188]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800318e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003192:	0f1b      	lsrs	r3, r3, #28
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	019a      	lsls	r2, r3, #6
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	041b      	lsls	r3, r3, #16
 80031a6:	431a      	orrs	r2, r3
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	061b      	lsls	r3, r3, #24
 80031ac:	431a      	orrs	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	071b      	lsls	r3, r3, #28
 80031b2:	4926      	ldr	r1, [pc, #152]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d011      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x5fa>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	019a      	lsls	r2, r3, #6
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	041b      	lsls	r3, r3, #16
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	061b      	lsls	r3, r3, #24
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	071b      	lsls	r3, r3, #28
 80031e2:	491a      	ldr	r1, [pc, #104]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80031ea:	4b18      	ldr	r3, [pc, #96]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a17      	ldr	r2, [pc, #92]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f6:	f7fe fa29 	bl	800164c <HAL_GetTick>
 80031fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031fc:	e008      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x620>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031fe:	f7fe fa25 	bl	800164c <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b64      	cmp	r3, #100	; 0x64
 800320a:	d901      	bls.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x620>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e0d8      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003210:	4b0e      	ldr	r3, [pc, #56]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0f0      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x60e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	2b01      	cmp	r3, #1
 8003220:	f040 80ce 	bne.w	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003224:	4b09      	ldr	r3, [pc, #36]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a08      	ldr	r2, [pc, #32]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800322a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800322e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003230:	f7fe fa0c 	bl	800164c <HAL_GetTick>
 8003234:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003236:	e00b      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003238:	f7fe fa08 	bl	800164c <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b64      	cmp	r3, #100	; 0x64
 8003244:	d904      	bls.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e0bb      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800324a:	bf00      	nop
 800324c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003250:	4b5e      	ldr	r3, [pc, #376]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800325c:	d0ec      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x648>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326e:	2b00      	cmp	r3, #0
 8003270:	d009      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800327a:	2b00      	cmp	r3, #0
 800327c:	d02e      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	2b00      	cmp	r3, #0
 8003284:	d12a      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003286:	4b51      	ldr	r3, [pc, #324]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328c:	0c1b      	lsrs	r3, r3, #16
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003294:	4b4d      	ldr	r3, [pc, #308]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329a:	0f1b      	lsrs	r3, r3, #28
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	019a      	lsls	r2, r3, #6
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	041b      	lsls	r3, r3, #16
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	061b      	lsls	r3, r3, #24
 80032b4:	431a      	orrs	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	071b      	lsls	r3, r3, #28
 80032ba:	4944      	ldr	r1, [pc, #272]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80032c2:	4b42      	ldr	r3, [pc, #264]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	3b01      	subs	r3, #1
 80032d2:	021b      	lsls	r3, r3, #8
 80032d4:	493d      	ldr	r1, [pc, #244]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d022      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032f0:	d11d      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032f2:	4b36      	ldr	r3, [pc, #216]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f8:	0e1b      	lsrs	r3, r3, #24
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003300:	4b32      	ldr	r3, [pc, #200]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003306:	0f1b      	lsrs	r3, r3, #28
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	019a      	lsls	r2, r3, #6
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	041b      	lsls	r3, r3, #16
 800331a:	431a      	orrs	r2, r3
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	061b      	lsls	r3, r3, #24
 8003320:	431a      	orrs	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	071b      	lsls	r3, r3, #28
 8003326:	4929      	ldr	r1, [pc, #164]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d028      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800333a:	4b24      	ldr	r3, [pc, #144]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800333c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003340:	0e1b      	lsrs	r3, r3, #24
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003348:	4b20      	ldr	r3, [pc, #128]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800334a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334e:	0c1b      	lsrs	r3, r3, #16
 8003350:	f003 0303 	and.w	r3, r3, #3
 8003354:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	019a      	lsls	r2, r3, #6
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	041b      	lsls	r3, r3, #16
 8003360:	431a      	orrs	r2, r3
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	061b      	lsls	r3, r3, #24
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	071b      	lsls	r3, r3, #28
 800336e:	4917      	ldr	r1, [pc, #92]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003376:	4b15      	ldr	r3, [pc, #84]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003378:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800337c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	4911      	ldr	r1, [pc, #68]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800338c:	4b0f      	ldr	r3, [pc, #60]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a0e      	ldr	r2, [pc, #56]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003396:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003398:	f7fe f958 	bl	800164c <HAL_GetTick>
 800339c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033a0:	f7fe f954 	bl	800164c <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b64      	cmp	r3, #100	; 0x64
 80033ac:	d901      	bls.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e007      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033b2:	4b06      	ldr	r3, [pc, #24]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033be:	d1ef      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3720      	adds	r7, #32
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40023800 	.word	0x40023800

080033d0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e022      	b.n	8003428 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d105      	bne.n	80033fa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7fd fe69 	bl	80010cc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2203      	movs	r2, #3
 80033fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f814 	bl	8003430 <HAL_SD_InitCard>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e00a      	b.n	8003428 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003430:	b5b0      	push	{r4, r5, r7, lr}
 8003432:	b08e      	sub	sp, #56	; 0x38
 8003434:	af04      	add	r7, sp, #16
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003438:	2300      	movs	r3, #0
 800343a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800343c:	2300      	movs	r3, #0
 800343e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003440:	2300      	movs	r3, #0
 8003442:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003448:	2300      	movs	r3, #0
 800344a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800344c:	2376      	movs	r3, #118	; 0x76
 800344e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681d      	ldr	r5, [r3, #0]
 8003454:	466c      	mov	r4, sp
 8003456:	f107 0314 	add.w	r3, r7, #20
 800345a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800345e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003462:	f107 0308 	add.w	r3, r7, #8
 8003466:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003468:	4628      	mov	r0, r5
 800346a:	f001 fbc7 	bl	8004bfc <SDMMC_Init>
 800346e:	4603      	mov	r3, r0
 8003470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e03b      	b.n	80034f8 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800348e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f001 fbfb 	bl	8004c90 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034a8:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f001 f8ea 	bl	8004684 <SD_PowerON>
 80034b0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00b      	beq.n	80034d0 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e013      	b.n	80034f8 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f001 f809 	bl	80044e8 <SD_InitCard>
 80034d6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00b      	beq.n	80034f6 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3728      	adds	r7, #40	; 0x28
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bdb0      	pop	{r4, r5, r7, pc}

08003500 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b092      	sub	sp, #72	; 0x48
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
 800350c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800350e:	f7fe f89d 	bl	800164c <HAL_GetTick>
 8003512:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d107      	bne.n	8003532 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003526:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e1d7      	b.n	80038e2 <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b01      	cmp	r3, #1
 800353c:	f040 81ca 	bne.w	80038d4 <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003546:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	441a      	add	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003550:	429a      	cmp	r2, r3
 8003552:	d907      	bls.n	8003564 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003558:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e1be      	b.n	80038e2 <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2203      	movs	r2, #3
 8003568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2200      	movs	r2, #0
 8003572:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003578:	2b01      	cmp	r3, #1
 800357a:	d002      	beq.n	8003582 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800357c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800357e:	025b      	lsls	r3, r3, #9
 8003580:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f44f 7100 	mov.w	r1, #512	; 0x200
 800358a:	4618      	mov	r0, r3
 800358c:	f001 fc14 	bl	8004db8 <SDMMC_CmdBlockLength>
 8003590:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8003592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00f      	beq.n	80035b8 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a8d      	ldr	r2, [pc, #564]	; (80037d4 <HAL_SD_ReadBlocks+0x2d4>)
 800359e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035a6:	431a      	orrs	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e194      	b.n	80038e2 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80035b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035bc:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	025b      	lsls	r3, r3, #9
 80035c2:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80035c4:	2390      	movs	r3, #144	; 0x90
 80035c6:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80035c8:	2302      	movs	r3, #2
 80035ca:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80035d0:	2301      	movs	r3, #1
 80035d2:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f107 0214 	add.w	r2, r7, #20
 80035dc:	4611      	mov	r1, r2
 80035de:	4618      	mov	r0, r3
 80035e0:	f001 fbbe 	bl	8004d60 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d90a      	bls.n	8003600 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2202      	movs	r2, #2
 80035ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035f6:	4618      	mov	r0, r3
 80035f8:	f001 fc22 	bl	8004e40 <SDMMC_CmdReadMultiBlock>
 80035fc:	6478      	str	r0, [r7, #68]	; 0x44
 80035fe:	e009      	b.n	8003614 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2201      	movs	r2, #1
 8003604:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800360c:	4618      	mov	r0, r3
 800360e:	f001 fbf5 	bl	8004dfc <SDMMC_CmdReadSingleBlock>
 8003612:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003616:	2b00      	cmp	r3, #0
 8003618:	d012      	beq.n	8003640 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a6d      	ldr	r2, [pc, #436]	; (80037d4 <HAL_SD_ReadBlocks+0x2d4>)
 8003620:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003628:	431a      	orrs	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e150      	b.n	80038e2 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003644:	e061      	b.n	800370a <HAL_SD_ReadBlocks+0x20a>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d03c      	beq.n	80036ce <HAL_SD_ReadBlocks+0x1ce>
 8003654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003656:	2b00      	cmp	r3, #0
 8003658:	d039      	beq.n	80036ce <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800365a:	2300      	movs	r3, #0
 800365c:	643b      	str	r3, [r7, #64]	; 0x40
 800365e:	e033      	b.n	80036c8 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f001 faf5 	bl	8004c54 <SDMMC_ReadFIFO>
 800366a:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800366c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366e:	b2da      	uxtb	r2, r3
 8003670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003672:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003676:	3301      	adds	r3, #1
 8003678:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800367a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800367c:	3b01      	subs	r3, #1
 800367e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003682:	0a1b      	lsrs	r3, r3, #8
 8003684:	b2da      	uxtb	r2, r3
 8003686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003688:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800368a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800368c:	3301      	adds	r3, #1
 800368e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003692:	3b01      	subs	r3, #1
 8003694:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003698:	0c1b      	lsrs	r3, r3, #16
 800369a:	b2da      	uxtb	r2, r3
 800369c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800369e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80036a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a2:	3301      	adds	r3, #1
 80036a4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80036a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a8:	3b01      	subs	r3, #1
 80036aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80036ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ae:	0e1b      	lsrs	r3, r3, #24
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80036b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b8:	3301      	adds	r3, #1
 80036ba:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80036bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036be:	3b01      	subs	r3, #1
 80036c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80036c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036c4:	3301      	adds	r3, #1
 80036c6:	643b      	str	r3, [r7, #64]	; 0x40
 80036c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ca:	2b07      	cmp	r3, #7
 80036cc:	d9c8      	bls.n	8003660 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80036ce:	f7fd ffbd 	bl	800164c <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80036da:	429a      	cmp	r2, r3
 80036dc:	d902      	bls.n	80036e4 <HAL_SD_ReadBlocks+0x1e4>
 80036de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d112      	bne.n	800370a <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a3a      	ldr	r2, [pc, #232]	; (80037d4 <HAL_SD_ReadBlocks+0x2d4>)
 80036ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e0eb      	b.n	80038e2 <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003710:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8003714:	2b00      	cmp	r3, #0
 8003716:	d096      	beq.n	8003646 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003722:	2b00      	cmp	r3, #0
 8003724:	d022      	beq.n	800376c <HAL_SD_ReadBlocks+0x26c>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d91f      	bls.n	800376c <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003730:	2b03      	cmp	r3, #3
 8003732:	d01b      	beq.n	800376c <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f001 fbe7 	bl	8004f0c <SDMMC_CmdStopTransfer>
 800373e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003742:	2b00      	cmp	r3, #0
 8003744:	d012      	beq.n	800376c <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a22      	ldr	r2, [pc, #136]	; (80037d4 <HAL_SD_ReadBlocks+0x2d4>)
 800374c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003754:	431a      	orrs	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e0ba      	b.n	80038e2 <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	2b00      	cmp	r3, #0
 8003778:	d012      	beq.n	80037a0 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a15      	ldr	r2, [pc, #84]	; (80037d4 <HAL_SD_ReadBlocks+0x2d4>)
 8003780:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003786:	f043 0208 	orr.w	r2, r3, #8
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e0a0      	b.n	80038e2 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d014      	beq.n	80037d8 <HAL_SD_ReadBlocks+0x2d8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a08      	ldr	r2, [pc, #32]	; (80037d4 <HAL_SD_ReadBlocks+0x2d4>)
 80037b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ba:	f043 0202 	orr.w	r2, r3, #2
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e086      	b.n	80038e2 <HAL_SD_ReadBlocks+0x3e2>
 80037d4:	004005ff 	.word	0x004005ff
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037de:	f003 0320 	and.w	r3, r3, #32
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d061      	beq.n	80038aa <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a40      	ldr	r2, [pc, #256]	; (80038ec <HAL_SD_ReadBlocks+0x3ec>)
 80037ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f2:	f043 0220 	orr.w	r2, r3, #32
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e06a      	b.n	80038e2 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f001 fa1f 	bl	8004c54 <SDMMC_ReadFIFO>
 8003816:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381a:	b2da      	uxtb	r2, r3
 800381c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800381e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003822:	3301      	adds	r3, #1
 8003824:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003828:	3b01      	subs	r3, #1
 800382a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800382c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382e:	0a1b      	lsrs	r3, r3, #8
 8003830:	b2da      	uxtb	r2, r3
 8003832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003834:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003838:	3301      	adds	r3, #1
 800383a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800383c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800383e:	3b01      	subs	r3, #1
 8003840:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003844:	0c1b      	lsrs	r3, r3, #16
 8003846:	b2da      	uxtb	r2, r3
 8003848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800384c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384e:	3301      	adds	r3, #1
 8003850:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003854:	3b01      	subs	r3, #1
 8003856:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385a:	0e1b      	lsrs	r3, r3, #24
 800385c:	b2da      	uxtb	r2, r3
 800385e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003860:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003864:	3301      	adds	r3, #1
 8003866:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800386a:	3b01      	subs	r3, #1
 800386c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800386e:	f7fd feed 	bl	800164c <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800387a:	429a      	cmp	r2, r3
 800387c:	d902      	bls.n	8003884 <HAL_SD_ReadBlocks+0x384>
 800387e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003880:	2b00      	cmp	r3, #0
 8003882:	d112      	bne.n	80038aa <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a18      	ldr	r2, [pc, #96]	; (80038ec <HAL_SD_ReadBlocks+0x3ec>)
 800388a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003890:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e01b      	b.n	80038e2 <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d002      	beq.n	80038be <HAL_SD_ReadBlocks+0x3be>
 80038b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1a6      	bne.n	800380c <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f240 523a 	movw	r2, #1338	; 0x53a
 80038c6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	e006      	b.n	80038e2 <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
  }
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3748      	adds	r7, #72	; 0x48
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	004005ff 	.word	0x004005ff

080038f0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b092      	sub	sp, #72	; 0x48
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80038fe:	f7fd fea5 	bl	800164c <HAL_GetTick>
 8003902:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d107      	bne.n	8003922 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003916:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e182      	b.n	8003c28 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b01      	cmp	r3, #1
 800392c:	f040 8175 	bne.w	8003c1a <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003936:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	441a      	add	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003940:	429a      	cmp	r2, r3
 8003942:	d907      	bls.n	8003954 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003948:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e169      	b.n	8003c28 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2203      	movs	r2, #3
 8003958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2200      	movs	r2, #0
 8003962:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003968:	2b01      	cmp	r3, #1
 800396a:	d002      	beq.n	8003972 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800396c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396e:	025b      	lsls	r3, r3, #9
 8003970:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f44f 7100 	mov.w	r1, #512	; 0x200
 800397a:	4618      	mov	r0, r3
 800397c:	f001 fa1c 	bl	8004db8 <SDMMC_CmdBlockLength>
 8003980:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8003982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00f      	beq.n	80039a8 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a8f      	ldr	r2, [pc, #572]	; (8003bcc <HAL_SD_WriteBlocks+0x2dc>)
 800398e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003996:	431a      	orrs	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e13f      	b.n	8003c28 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80039a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039ac:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	025b      	lsls	r3, r3, #9
 80039b2:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80039b4:	2390      	movs	r3, #144	; 0x90
 80039b6:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80039b8:	2300      	movs	r3, #0
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80039bc:	2300      	movs	r3, #0
 80039be:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80039c0:	2301      	movs	r3, #1
 80039c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f107 0218 	add.w	r2, r7, #24
 80039cc:	4611      	mov	r1, r2
 80039ce:	4618      	mov	r0, r3
 80039d0:	f001 f9c6 	bl	8004d60 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d90a      	bls.n	80039f0 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2220      	movs	r2, #32
 80039de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039e6:	4618      	mov	r0, r3
 80039e8:	f001 fa6e 	bl	8004ec8 <SDMMC_CmdWriteMultiBlock>
 80039ec:	6478      	str	r0, [r7, #68]	; 0x44
 80039ee:	e009      	b.n	8003a04 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2210      	movs	r2, #16
 80039f4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039fc:	4618      	mov	r0, r3
 80039fe:	f001 fa41 	bl	8004e84 <SDMMC_CmdWriteSingleBlock>
 8003a02:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d012      	beq.n	8003a30 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a6f      	ldr	r2, [pc, #444]	; (8003bcc <HAL_SD_WriteBlocks+0x2dc>)
 8003a10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0fb      	b.n	8003c28 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003a34:	e065      	b.n	8003b02 <HAL_SD_WriteBlocks+0x212>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d040      	beq.n	8003ac6 <HAL_SD_WriteBlocks+0x1d6>
 8003a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d03d      	beq.n	8003ac6 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	643b      	str	r3, [r7, #64]	; 0x40
 8003a4e:	e037      	b.n	8003ac0 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8003a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a58:	3301      	adds	r3, #1
 8003a5a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	021a      	lsls	r2, r3, #8
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a70:	3301      	adds	r3, #1
 8003a72:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a76:	3b01      	subs	r3, #1
 8003a78:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	041a      	lsls	r2, r3, #16
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a88:	3301      	adds	r3, #1
 8003a8a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	061a      	lsls	r2, r3, #24
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f107 0214 	add.w	r2, r7, #20
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f001 f8da 	bl	8004c6e <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003aba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003abc:	3301      	adds	r3, #1
 8003abe:	643b      	str	r3, [r7, #64]	; 0x40
 8003ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ac2:	2b07      	cmp	r3, #7
 8003ac4:	d9c4      	bls.n	8003a50 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003ac6:	f7fd fdc1 	bl	800164c <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d902      	bls.n	8003adc <HAL_SD_WriteBlocks+0x1ec>
 8003ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d112      	bne.n	8003b02 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a3a      	ldr	r2, [pc, #232]	; (8003bcc <HAL_SD_WriteBlocks+0x2dc>)
 8003ae2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aea:	431a      	orrs	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e092      	b.n	8003c28 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b08:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d092      	beq.n	8003a36 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d022      	beq.n	8003b64 <HAL_SD_WriteBlocks+0x274>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d91f      	bls.n	8003b64 <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b28:	2b03      	cmp	r3, #3
 8003b2a:	d01b      	beq.n	8003b64 <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f001 f9eb 	bl	8004f0c <SDMMC_CmdStopTransfer>
 8003b36:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d012      	beq.n	8003b64 <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a22      	ldr	r2, [pc, #136]	; (8003bcc <HAL_SD_WriteBlocks+0x2dc>)
 8003b44:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e061      	b.n	8003c28 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d012      	beq.n	8003b98 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a15      	ldr	r2, [pc, #84]	; (8003bcc <HAL_SD_WriteBlocks+0x2dc>)
 8003b78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7e:	f043 0208 	orr.w	r2, r3, #8
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e047      	b.n	8003c28 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d014      	beq.n	8003bd0 <HAL_SD_WriteBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a08      	ldr	r2, [pc, #32]	; (8003bcc <HAL_SD_WriteBlocks+0x2dc>)
 8003bac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb2:	f043 0202 	orr.w	r2, r3, #2
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e02d      	b.n	8003c28 <HAL_SD_WriteBlocks+0x338>
 8003bcc:	004005ff 	.word	0x004005ff
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd6:	f003 0310 	and.w	r3, r3, #16
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d012      	beq.n	8003c04 <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a13      	ldr	r2, [pc, #76]	; (8003c30 <HAL_SD_WriteBlocks+0x340>)
 8003be4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bea:	f043 0210 	orr.w	r2, r3, #16
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e011      	b.n	8003c28 <HAL_SD_WriteBlocks+0x338>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f240 523a 	movw	r2, #1338	; 0x53a
 8003c0c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	e006      	b.n	8003c28 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
  }
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3748      	adds	r7, #72	; 0x48
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	004005ff 	.word	0x004005ff

08003c34 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c40:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d008      	beq.n	8003c62 <HAL_SD_IRQHandler+0x2e>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 ff28 	bl	8004ab0 <SD_Read_IT>
 8003c60:	e15a      	b.n	8003f18 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 808d 	beq.w	8003d8c <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c7a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	4b9a      	ldr	r3, [pc, #616]	; (8003ef0 <HAL_SD_IRQHandler+0x2bc>)
 8003c88:	400b      	ands	r3, r1
 8003c8a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0201 	bic.w	r2, r2, #1
 8003c9a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d039      	beq.n	8003d1a <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d104      	bne.n	8003cba <HAL_SD_IRQHandler+0x86>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d011      	beq.n	8003cde <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f001 f924 	bl	8004f0c <SDMMC_CmdStopTransfer>
 8003cc4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d008      	beq.n	8003cde <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f921 	bl	8003f20 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f240 523a 	movw	r2, #1338	; 0x53a
 8003ce6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d104      	bne.n	8003d0a <HAL_SD_IRQHandler+0xd6>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f001 fd8c 	bl	8005828 <HAL_SD_RxCpltCallback>
 8003d10:	e102      	b.n	8003f18 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f001 fd7e 	bl	8005814 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003d18:	e0fe      	b.n	8003f18 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 80f9 	beq.w	8003f18 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d011      	beq.n	8003d54 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f001 f8e9 	bl	8004f0c <SDMMC_CmdStopTransfer>
 8003d3a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d008      	beq.n	8003d54 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f8e6 	bl	8003f20 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f040 80dc 	bne.w	8003f18 <HAL_SD_IRQHandler+0x2e4>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f040 80d6 	bne.w	8003f18 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0208 	bic.w	r2, r2, #8
 8003d7a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f001 fd45 	bl	8005814 <HAL_SD_TxCpltCallback>
}
 8003d8a:	e0c5      	b.n	8003f18 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d008      	beq.n	8003dac <HAL_SD_IRQHandler+0x178>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 fed4 	bl	8004b52 <SD_Write_IT>
 8003daa:	e0b5      	b.n	8003f18 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 80ae 	beq.w	8003f18 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d005      	beq.n	8003dd6 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dce:	f043 0202 	orr.w	r2, r3, #2
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ddc:	f003 0308 	and.w	r3, r3, #8
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d005      	beq.n	8003df0 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de8:	f043 0208 	orr.w	r2, r3, #8
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df6:	f003 0320 	and.w	r3, r3, #32
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d005      	beq.n	8003e0a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e02:	f043 0220 	orr.w	r2, r3, #32
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e10:	f003 0310 	and.w	r3, r3, #16
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d005      	beq.n	8003e24 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	f043 0210 	orr.w	r2, r3, #16
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f240 523a 	movw	r2, #1338	; 0x53a
 8003e2c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003e3c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f001 f862 	bl	8004f0c <SDMMC_CmdStopTransfer>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f857 	bl	8003f20 <HAL_SD_ErrorCallback>
}
 8003e72:	e051      	b.n	8003f18 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d04c      	beq.n	8003f18 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f003 0310 	and.w	r3, r3, #16
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d104      	bne.n	8003e92 <HAL_SD_IRQHandler+0x25e>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d011      	beq.n	8003eb6 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e96:	4a17      	ldr	r2, [pc, #92]	; (8003ef4 <HAL_SD_IRQHandler+0x2c0>)
 8003e98:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fd fdc4 	bl	8001a2c <HAL_DMA_Abort_IT>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d036      	beq.n	8003f18 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 faac 	bl	800440c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003eb4:	e030      	b.n	8003f18 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d104      	bne.n	8003eca <HAL_SD_IRQHandler+0x296>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d018      	beq.n	8003efc <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	4a0a      	ldr	r2, [pc, #40]	; (8003ef8 <HAL_SD_IRQHandler+0x2c4>)
 8003ed0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fd fda8 	bl	8001a2c <HAL_DMA_Abort_IT>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d01a      	beq.n	8003f18 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 fac7 	bl	800447a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003eec:	e014      	b.n	8003f18 <HAL_SD_IRQHandler+0x2e4>
 8003eee:	bf00      	nop
 8003ef0:	ffff3ec5 	.word	0xffff3ec5
 8003ef4:	0800440d 	.word	0x0800440d
 8003ef8:	0800447b 	.word	0x0800447b
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f001 fc75 	bl	8005800 <HAL_SD_AbortCallback>
}
 8003f16:	e7ff      	b.n	8003f18 <HAL_SD_IRQHandler+0x2e4>
 8003f18:	bf00      	nop
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f42:	0f9b      	lsrs	r3, r3, #30
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f4e:	0e9b      	lsrs	r3, r3, #26
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f60:	0e1b      	lsrs	r3, r3, #24
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	f003 0303 	and.w	r3, r3, #3
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f72:	0c1b      	lsrs	r3, r3, #16
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f7e:	0a1b      	lsrs	r3, r3, #8
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f94:	0d1b      	lsrs	r3, r3, #20
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fa0:	0c1b      	lsrs	r3, r3, #16
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	f003 030f 	and.w	r3, r3, #15
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fb2:	0bdb      	lsrs	r3, r3, #15
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fc4:	0b9b      	lsrs	r3, r3, #14
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fd6:	0b5b      	lsrs	r3, r3, #13
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fe8:	0b1b      	lsrs	r3, r3, #12
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004000:	2b00      	cmp	r3, #0
 8004002:	d163      	bne.n	80040cc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004008:	009a      	lsls	r2, r3, #2
 800400a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800400e:	4013      	ands	r3, r2
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004014:	0f92      	lsrs	r2, r2, #30
 8004016:	431a      	orrs	r2, r3
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004020:	0edb      	lsrs	r3, r3, #27
 8004022:	b2db      	uxtb	r3, r3
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	b2da      	uxtb	r2, r3
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004032:	0e1b      	lsrs	r3, r3, #24
 8004034:	b2db      	uxtb	r3, r3
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	b2da      	uxtb	r2, r3
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004044:	0d5b      	lsrs	r3, r3, #21
 8004046:	b2db      	uxtb	r3, r3
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	b2da      	uxtb	r2, r3
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004056:	0c9b      	lsrs	r3, r3, #18
 8004058:	b2db      	uxtb	r3, r3
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	b2da      	uxtb	r2, r3
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004068:	0bdb      	lsrs	r3, r3, #15
 800406a:	b2db      	uxtb	r3, r3
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	b2da      	uxtb	r2, r3
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	7e1b      	ldrb	r3, [r3, #24]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	3302      	adds	r3, #2
 800408c:	2201      	movs	r2, #1
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004096:	fb03 f202 	mul.w	r2, r3, r2
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	7a1b      	ldrb	r3, [r3, #8]
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	f003 030f 	and.w	r3, r3, #15
 80040a8:	2201      	movs	r2, #1
 80040aa:	409a      	lsls	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80040b8:	0a52      	lsrs	r2, r2, #9
 80040ba:	fb03 f202 	mul.w	r2, r3, r2
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040c8:	661a      	str	r2, [r3, #96]	; 0x60
 80040ca:	e031      	b.n	8004130 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d11d      	bne.n	8004110 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040d8:	041b      	lsls	r3, r3, #16
 80040da:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040e2:	0c1b      	lsrs	r3, r3, #16
 80040e4:	431a      	orrs	r2, r3
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	3301      	adds	r3, #1
 80040f0:	029a      	lsls	r2, r3, #10
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004104:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	661a      	str	r2, [r3, #96]	; 0x60
 800410e:	e00f      	b.n	8004130 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a58      	ldr	r2, [pc, #352]	; (8004278 <HAL_SD_GetCardCSD+0x344>)
 8004116:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e09d      	b.n	800426c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004134:	0b9b      	lsrs	r3, r3, #14
 8004136:	b2db      	uxtb	r3, r3
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	b2da      	uxtb	r2, r3
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004146:	09db      	lsrs	r3, r3, #7
 8004148:	b2db      	uxtb	r3, r3
 800414a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800414e:	b2da      	uxtb	r2, r3
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004158:	b2db      	uxtb	r3, r3
 800415a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800415e:	b2da      	uxtb	r2, r3
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004168:	0fdb      	lsrs	r3, r3, #31
 800416a:	b2da      	uxtb	r2, r3
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004174:	0f5b      	lsrs	r3, r3, #29
 8004176:	b2db      	uxtb	r3, r3
 8004178:	f003 0303 	and.w	r3, r3, #3
 800417c:	b2da      	uxtb	r2, r3
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004186:	0e9b      	lsrs	r3, r3, #26
 8004188:	b2db      	uxtb	r3, r3
 800418a:	f003 0307 	and.w	r3, r3, #7
 800418e:	b2da      	uxtb	r2, r3
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004198:	0d9b      	lsrs	r3, r3, #22
 800419a:	b2db      	uxtb	r3, r3
 800419c:	f003 030f 	and.w	r3, r3, #15
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041aa:	0d5b      	lsrs	r3, r3, #21
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c6:	0c1b      	lsrs	r3, r3, #16
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041da:	0bdb      	lsrs	r3, r3, #15
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ee:	0b9b      	lsrs	r3, r3, #14
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004202:	0b5b      	lsrs	r3, r3, #13
 8004204:	b2db      	uxtb	r3, r3
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	b2da      	uxtb	r2, r3
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004216:	0b1b      	lsrs	r3, r3, #12
 8004218:	b2db      	uxtb	r3, r3
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	b2da      	uxtb	r2, r3
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422a:	0a9b      	lsrs	r3, r3, #10
 800422c:	b2db      	uxtb	r3, r3
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	b2da      	uxtb	r2, r3
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423e:	0a1b      	lsrs	r3, r3, #8
 8004240:	b2db      	uxtb	r3, r3
 8004242:	f003 0303 	and.w	r3, r3, #3
 8004246:	b2da      	uxtb	r2, r3
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004252:	085b      	lsrs	r3, r3, #1
 8004254:	b2db      	uxtb	r3, r3
 8004256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800425a:	b2da      	uxtb	r2, r3
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	004005ff 	.word	0x004005ff

0800427c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80042d4:	b5b0      	push	{r4, r5, r7, lr}
 80042d6:	b08e      	sub	sp, #56	; 0x38
 80042d8:	af04      	add	r7, sp, #16
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2203      	movs	r2, #3
 80042e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	d02e      	beq.n	800434c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f4:	d106      	bne.n	8004304 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	639a      	str	r2, [r3, #56]	; 0x38
 8004302:	e029      	b.n	8004358 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800430a:	d10a      	bne.n	8004322 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 fa6f 	bl	80047f0 <SD_WideBus_Enable>
 8004312:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	639a      	str	r2, [r3, #56]	; 0x38
 8004320:	e01a      	b.n	8004358 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10a      	bne.n	800433e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 faac 	bl	8004886 <SD_WideBus_Disable>
 800432e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	639a      	str	r2, [r3, #56]	; 0x38
 800433c:	e00c      	b.n	8004358 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004342:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	639a      	str	r2, [r3, #56]	; 0x38
 800434a:	e005      	b.n	8004358 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004350:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435c:	2b00      	cmp	r3, #0
 800435e:	d009      	beq.n	8004374 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a18      	ldr	r2, [pc, #96]	; (80043c8 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8004366:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e024      	b.n	80043be <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681d      	ldr	r5, [r3, #0]
 800439a:	466c      	mov	r4, sp
 800439c:	f107 0318 	add.w	r3, r7, #24
 80043a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80043a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80043a8:	f107 030c 	add.w	r3, r7, #12
 80043ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043ae:	4628      	mov	r0, r5
 80043b0:	f000 fc24 	bl	8004bfc <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3728      	adds	r7, #40	; 0x28
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bdb0      	pop	{r4, r5, r7, pc}
 80043c6:	bf00      	nop
 80043c8:	004005ff 	.word	0x004005ff

080043cc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80043d4:	2300      	movs	r3, #0
 80043d6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80043d8:	f107 030c 	add.w	r3, r7, #12
 80043dc:	4619      	mov	r1, r3
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f9de 	bl	80047a0 <SD_SendStatus>
 80043e4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d005      	beq.n	80043f8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	0a5b      	lsrs	r3, r3, #9
 80043fc:	f003 030f 	and.w	r3, r3, #15
 8004400:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004402:	693b      	ldr	r3, [r7, #16]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3718      	adds	r7, #24
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004422:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f7ff ffd1 	bl	80043cc <HAL_SD_GetCardState>
 800442a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b06      	cmp	r3, #6
 800443e:	d002      	beq.n	8004446 <SD_DMATxAbort+0x3a>
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2b05      	cmp	r3, #5
 8004444:	d10a      	bne.n	800445c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fd5e 	bl	8004f0c <SDMMC_CmdStopTransfer>
 8004450:	4602      	mov	r2, r0
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004456:	431a      	orrs	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004460:	2b00      	cmp	r3, #0
 8004462:	d103      	bne.n	800446c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f001 f9cb 	bl	8005800 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800446a:	e002      	b.n	8004472 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f7ff fd57 	bl	8003f20 <HAL_SD_ErrorCallback>
}
 8004472:	bf00      	nop
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b084      	sub	sp, #16
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004486:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004490:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f7ff ff9a 	bl	80043cc <HAL_SD_GetCardState>
 8004498:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	2b06      	cmp	r3, #6
 80044ac:	d002      	beq.n	80044b4 <SD_DMARxAbort+0x3a>
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2b05      	cmp	r3, #5
 80044b2:	d10a      	bne.n	80044ca <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 fd27 	bl	8004f0c <SDMMC_CmdStopTransfer>
 80044be:	4602      	mov	r2, r0
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c4:	431a      	orrs	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d103      	bne.n	80044da <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f001 f994 	bl	8005800 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80044d8:	e002      	b.n	80044e0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f7ff fd20 	bl	8003f20 <HAL_SD_ErrorCallback>
}
 80044e0:	bf00      	nop
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80044e8:	b5b0      	push	{r4, r5, r7, lr}
 80044ea:	b094      	sub	sp, #80	; 0x50
 80044ec:	af04      	add	r7, sp, #16
 80044ee:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80044f0:	2301      	movs	r3, #1
 80044f2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 fbd8 	bl	8004cae <SDMMC_GetPowerState>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d102      	bne.n	800450a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004504:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004508:	e0b8      	b.n	800467c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450e:	2b03      	cmp	r3, #3
 8004510:	d02f      	beq.n	8004572 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fe03 	bl	8005122 <SDMMC_CmdSendCID>
 800451c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800451e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <SD_InitCard+0x40>
    {
      return errorstate;
 8004524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004526:	e0a9      	b.n	800467c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2100      	movs	r1, #0
 800452e:	4618      	mov	r0, r3
 8004530:	f000 fc03 	bl	8004d3a <SDMMC_GetResponse>
 8004534:	4602      	mov	r2, r0
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2104      	movs	r1, #4
 8004540:	4618      	mov	r0, r3
 8004542:	f000 fbfa 	bl	8004d3a <SDMMC_GetResponse>
 8004546:	4602      	mov	r2, r0
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2108      	movs	r1, #8
 8004552:	4618      	mov	r0, r3
 8004554:	f000 fbf1 	bl	8004d3a <SDMMC_GetResponse>
 8004558:	4602      	mov	r2, r0
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	210c      	movs	r1, #12
 8004564:	4618      	mov	r0, r3
 8004566:	f000 fbe8 	bl	8004d3a <SDMMC_GetResponse>
 800456a:	4602      	mov	r2, r0
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004576:	2b03      	cmp	r3, #3
 8004578:	d00d      	beq.n	8004596 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f107 020e 	add.w	r2, r7, #14
 8004582:	4611      	mov	r1, r2
 8004584:	4618      	mov	r0, r3
 8004586:	f000 fe09 	bl	800519c <SDMMC_CmdSetRelAdd>
 800458a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800458c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <SD_InitCard+0xae>
    {
      return errorstate;
 8004592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004594:	e072      	b.n	800467c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459a:	2b03      	cmp	r3, #3
 800459c:	d036      	beq.n	800460c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800459e:	89fb      	ldrh	r3, [r7, #14]
 80045a0:	461a      	mov	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ae:	041b      	lsls	r3, r3, #16
 80045b0:	4619      	mov	r1, r3
 80045b2:	4610      	mov	r0, r2
 80045b4:	f000 fdd3 	bl	800515e <SDMMC_CmdSendCSD>
 80045b8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80045ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80045c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045c2:	e05b      	b.n	800467c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2100      	movs	r1, #0
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 fbb5 	bl	8004d3a <SDMMC_GetResponse>
 80045d0:	4602      	mov	r2, r0
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2104      	movs	r1, #4
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 fbac 	bl	8004d3a <SDMMC_GetResponse>
 80045e2:	4602      	mov	r2, r0
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2108      	movs	r1, #8
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fba3 	bl	8004d3a <SDMMC_GetResponse>
 80045f4:	4602      	mov	r2, r0
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	210c      	movs	r1, #12
 8004600:	4618      	mov	r0, r3
 8004602:	f000 fb9a 	bl	8004d3a <SDMMC_GetResponse>
 8004606:	4602      	mov	r2, r0
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2104      	movs	r1, #4
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fb91 	bl	8004d3a <SDMMC_GetResponse>
 8004618:	4603      	mov	r3, r0
 800461a:	0d1a      	lsrs	r2, r3, #20
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004620:	f107 0310 	add.w	r3, r7, #16
 8004624:	4619      	mov	r1, r3
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7ff fc84 	bl	8003f34 <HAL_SD_GetCardCSD>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d002      	beq.n	8004638 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004632:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004636:	e021      	b.n	800467c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6819      	ldr	r1, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004640:	041b      	lsls	r3, r3, #16
 8004642:	2200      	movs	r2, #0
 8004644:	461c      	mov	r4, r3
 8004646:	4615      	mov	r5, r2
 8004648:	4622      	mov	r2, r4
 800464a:	462b      	mov	r3, r5
 800464c:	4608      	mov	r0, r1
 800464e:	f000 fc7f 	bl	8004f50 <SDMMC_CmdSelDesel>
 8004652:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <SD_InitCard+0x176>
  {
    return errorstate;
 800465a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800465c:	e00e      	b.n	800467c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681d      	ldr	r5, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	466c      	mov	r4, sp
 8004666:	f103 0210 	add.w	r2, r3, #16
 800466a:	ca07      	ldmia	r2, {r0, r1, r2}
 800466c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004670:	3304      	adds	r3, #4
 8004672:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004674:	4628      	mov	r0, r5
 8004676:	f000 fac1 	bl	8004bfc <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3740      	adds	r7, #64	; 0x40
 8004680:	46bd      	mov	sp, r7
 8004682:	bdb0      	pop	{r4, r5, r7, pc}

08004684 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	2300      	movs	r3, #0
 8004696:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4618      	mov	r0, r3
 800469e:	f000 fc7a 	bl	8004f96 <SDMMC_CmdGoIdleState>
 80046a2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <SD_PowerON+0x2a>
  {
    return errorstate;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	e072      	b.n	8004794 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 fc8d 	bl	8004fd2 <SDMMC_CmdOperCond>
 80046b8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00d      	beq.n	80046dc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fc63 	bl	8004f96 <SDMMC_CmdGoIdleState>
 80046d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d004      	beq.n	80046e2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	e05b      	b.n	8004794 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d137      	bne.n	800475a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2100      	movs	r1, #0
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 fc8d 	bl	8005010 <SDMMC_CmdAppCommand>
 80046f6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d02d      	beq.n	800475a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80046fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004702:	e047      	b.n	8004794 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2100      	movs	r1, #0
 800470a:	4618      	mov	r0, r3
 800470c:	f000 fc80 	bl	8005010 <SDMMC_CmdAppCommand>
 8004710:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <SD_PowerON+0x98>
    {
      return errorstate;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	e03b      	b.n	8004794 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	491e      	ldr	r1, [pc, #120]	; (800479c <SD_PowerON+0x118>)
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fc96 	bl	8005054 <SDMMC_CmdAppOperCommand>
 8004728:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d002      	beq.n	8004736 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004730:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004734:	e02e      	b.n	8004794 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2100      	movs	r1, #0
 800473c:	4618      	mov	r0, r3
 800473e:	f000 fafc 	bl	8004d3a <SDMMC_GetResponse>
 8004742:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	0fdb      	lsrs	r3, r3, #31
 8004748:	2b01      	cmp	r3, #1
 800474a:	d101      	bne.n	8004750 <SD_PowerON+0xcc>
 800474c:	2301      	movs	r3, #1
 800474e:	e000      	b.n	8004752 <SD_PowerON+0xce>
 8004750:	2300      	movs	r3, #0
 8004752:	613b      	str	r3, [r7, #16]

    count++;
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	3301      	adds	r3, #1
 8004758:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004760:	4293      	cmp	r3, r2
 8004762:	d802      	bhi.n	800476a <SD_PowerON+0xe6>
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0cc      	beq.n	8004704 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004770:	4293      	cmp	r3, r2
 8004772:	d902      	bls.n	800477a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004774:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004778:	e00c      	b.n	8004794 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	645a      	str	r2, [r3, #68]	; 0x44
 800478a:	e002      	b.n	8004792 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3718      	adds	r7, #24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	c1100000 	.word	0xc1100000

080047a0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d102      	bne.n	80047b6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80047b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047b4:	e018      	b.n	80047e8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047be:	041b      	lsls	r3, r3, #16
 80047c0:	4619      	mov	r1, r3
 80047c2:	4610      	mov	r0, r2
 80047c4:	f000 fd0b 	bl	80051de <SDMMC_CmdSendStatus>
 80047c8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	e009      	b.n	80047e8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2100      	movs	r1, #0
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 faad 	bl	8004d3a <SDMMC_GetResponse>
 80047e0:	4602      	mov	r2, r0
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80047f8:	2300      	movs	r3, #0
 80047fa:	60fb      	str	r3, [r7, #12]
 80047fc:	2300      	movs	r3, #0
 80047fe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2100      	movs	r1, #0
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fa97 	bl	8004d3a <SDMMC_GetResponse>
 800480c:	4603      	mov	r3, r0
 800480e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004812:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004816:	d102      	bne.n	800481e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004818:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800481c:	e02f      	b.n	800487e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800481e:	f107 030c 	add.w	r3, r7, #12
 8004822:	4619      	mov	r1, r3
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f879 	bl	800491c <SD_FindSCR>
 800482a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	e023      	b.n	800487e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d01c      	beq.n	800487a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004848:	041b      	lsls	r3, r3, #16
 800484a:	4619      	mov	r1, r3
 800484c:	4610      	mov	r0, r2
 800484e:	f000 fbdf 	bl	8005010 <SDMMC_CmdAppCommand>
 8004852:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	e00f      	b.n	800487e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2102      	movs	r1, #2
 8004864:	4618      	mov	r0, r3
 8004866:	f000 fc19 	bl	800509c <SDMMC_CmdBusWidth>
 800486a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	e003      	b.n	800487e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004876:	2300      	movs	r3, #0
 8004878:	e001      	b.n	800487e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800487a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800487e:	4618      	mov	r0, r3
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b086      	sub	sp, #24
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800488e:	2300      	movs	r3, #0
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	2300      	movs	r3, #0
 8004894:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2100      	movs	r1, #0
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fa4c 	bl	8004d3a <SDMMC_GetResponse>
 80048a2:	4603      	mov	r3, r0
 80048a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048ac:	d102      	bne.n	80048b4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80048ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048b2:	e02f      	b.n	8004914 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80048b4:	f107 030c 	add.w	r3, r7, #12
 80048b8:	4619      	mov	r1, r3
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f82e 	bl	800491c <SD_FindSCR>
 80048c0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	e023      	b.n	8004914 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d01c      	beq.n	8004910 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048de:	041b      	lsls	r3, r3, #16
 80048e0:	4619      	mov	r1, r3
 80048e2:	4610      	mov	r0, r2
 80048e4:	f000 fb94 	bl	8005010 <SDMMC_CmdAppCommand>
 80048e8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	e00f      	b.n	8004914 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2100      	movs	r1, #0
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fbce 	bl	800509c <SDMMC_CmdBusWidth>
 8004900:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	e003      	b.n	8004914 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800490c:	2300      	movs	r3, #0
 800490e:	e001      	b.n	8004914 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004910:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800491c:	b590      	push	{r4, r7, lr}
 800491e:	b08f      	sub	sp, #60	; 0x3c
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004926:	f7fc fe91 	bl	800164c <HAL_GetTick>
 800492a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004930:	2300      	movs	r3, #0
 8004932:	60bb      	str	r3, [r7, #8]
 8004934:	2300      	movs	r3, #0
 8004936:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2108      	movs	r1, #8
 8004942:	4618      	mov	r0, r3
 8004944:	f000 fa38 	bl	8004db8 <SDMMC_CmdBlockLength>
 8004948:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800494a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494c:	2b00      	cmp	r3, #0
 800494e:	d001      	beq.n	8004954 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004952:	e0a9      	b.n	8004aa8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800495c:	041b      	lsls	r3, r3, #16
 800495e:	4619      	mov	r1, r3
 8004960:	4610      	mov	r0, r2
 8004962:	f000 fb55 	bl	8005010 <SDMMC_CmdAppCommand>
 8004966:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <SD_FindSCR+0x56>
  {
    return errorstate;
 800496e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004970:	e09a      	b.n	8004aa8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004976:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004978:	2308      	movs	r3, #8
 800497a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800497c:	2330      	movs	r3, #48	; 0x30
 800497e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004980:	2302      	movs	r3, #2
 8004982:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004984:	2300      	movs	r3, #0
 8004986:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004988:	2301      	movs	r3, #1
 800498a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f107 0210 	add.w	r2, r7, #16
 8004994:	4611      	mov	r1, r2
 8004996:	4618      	mov	r0, r3
 8004998:	f000 f9e2 	bl	8004d60 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 fb9d 	bl	80050e0 <SDMMC_CmdSendSCR>
 80049a6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80049a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d022      	beq.n	80049f4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80049ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b0:	e07a      	b.n	8004aa8 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00e      	beq.n	80049de <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6819      	ldr	r1, [r3, #0]
 80049c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	f107 0208 	add.w	r2, r7, #8
 80049cc:	18d4      	adds	r4, r2, r3
 80049ce:	4608      	mov	r0, r1
 80049d0:	f000 f940 	bl	8004c54 <SDMMC_ReadFIFO>
 80049d4:	4603      	mov	r3, r0
 80049d6:	6023      	str	r3, [r4, #0]
      index++;
 80049d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049da:	3301      	adds	r3, #1
 80049dc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80049de:	f7fc fe35 	bl	800164c <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049ec:	d102      	bne.n	80049f4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80049ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80049f2:	e059      	b.n	8004aa8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049fa:	f240 432a 	movw	r3, #1066	; 0x42a
 80049fe:	4013      	ands	r3, r2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d0d6      	beq.n	80049b2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a0a:	f003 0308 	and.w	r3, r3, #8
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d005      	beq.n	8004a1e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2208      	movs	r2, #8
 8004a18:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004a1a:	2308      	movs	r3, #8
 8004a1c:	e044      	b.n	8004aa8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d005      	beq.n	8004a38 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2202      	movs	r2, #2
 8004a32:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004a34:	2302      	movs	r3, #2
 8004a36:	e037      	b.n	8004aa8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a3e:	f003 0320 	and.w	r3, r3, #32
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d005      	beq.n	8004a52 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004a4e:	2320      	movs	r3, #32
 8004a50:	e02a      	b.n	8004aa8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f240 523a 	movw	r2, #1338	; 0x53a
 8004a5a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	061a      	lsls	r2, r3, #24
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	021b      	lsls	r3, r3, #8
 8004a64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a68:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	0a1b      	lsrs	r3, r3, #8
 8004a6e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004a72:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	0e1b      	lsrs	r3, r3, #24
 8004a78:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7c:	601a      	str	r2, [r3, #0]
    scr++;
 8004a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a80:	3304      	adds	r3, #4
 8004a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	061a      	lsls	r2, r3, #24
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	021b      	lsls	r3, r3, #8
 8004a8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a90:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	0a1b      	lsrs	r3, r3, #8
 8004a96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004a9a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	0e1b      	lsrs	r3, r3, #24
 8004aa0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	373c      	adds	r7, #60	; 0x3c
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd90      	pop	{r4, r7, pc}

08004ab0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d03f      	beq.n	8004b4a <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004aca:	2300      	movs	r3, #0
 8004acc:	617b      	str	r3, [r7, #20]
 8004ace:	e033      	b.n	8004b38 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 f8bd 	bl	8004c54 <SDMMC_ReadFIFO>
 8004ada:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	3b01      	subs	r3, #1
 8004aee:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	0a1b      	lsrs	r3, r3, #8
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	3301      	adds	r3, #1
 8004afe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	3b01      	subs	r3, #1
 8004b04:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	0c1b      	lsrs	r3, r3, #16
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	3301      	adds	r3, #1
 8004b14:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	0e1b      	lsrs	r3, r3, #24
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	3301      	adds	r3, #1
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	2b07      	cmp	r3, #7
 8004b3c:	d9c8      	bls.n	8004ad0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004b4a:	bf00      	nop
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b086      	sub	sp, #24
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d043      	beq.n	8004bf4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	617b      	str	r3, [r7, #20]
 8004b70:	e037      	b.n	8004be2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	3b01      	subs	r3, #1
 8004b82:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	021a      	lsls	r2, r3, #8
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	3301      	adds	r3, #1
 8004b94:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	041a      	lsls	r2, r3, #16
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	3301      	adds	r3, #1
 8004bac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	061a      	lsls	r2, r3, #24
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f107 0208 	add.w	r2, r7, #8
 8004bd4:	4611      	mov	r1, r2
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 f849 	bl	8004c6e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	3301      	adds	r3, #1
 8004be0:	617b      	str	r3, [r7, #20]
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	2b07      	cmp	r3, #7
 8004be6:	d9c4      	bls.n	8004b72 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004bf4:	bf00      	nop
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8004bfc:	b084      	sub	sp, #16
 8004bfe:	b480      	push	{r7}
 8004c00:	b085      	sub	sp, #20
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
 8004c06:	f107 001c 	add.w	r0, r7, #28
 8004c0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004c12:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004c14:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004c16:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004c1a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004c1e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004c22:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004c26:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	4b07      	ldr	r3, [pc, #28]	; (8004c50 <SDMMC_Init+0x54>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	b004      	add	sp, #16
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	ffff8100 	.word	0xffff8100

08004c54 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2203      	movs	r2, #3
 8004c9c:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004c9e:	2002      	movs	r0, #2
 8004ca0:	f7fc fce0 	bl	8001664 <HAL_Delay>
  
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3708      	adds	r7, #8
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0303 	and.w	r3, r3, #3
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
	...

08004ccc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004cea:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004cf0:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004cf6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	4b06      	ldr	r3, [pc, #24]	; (8004d1c <SDMMC_SendCommand+0x50>)
 8004d04:	4013      	ands	r3, r2
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	fffff000 	.word	0xfffff000

08004d20 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	b2db      	uxtb	r3, r3
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b085      	sub	sp, #20
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3314      	adds	r3, #20
 8004d48:	461a      	mov	r2, r3
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
}  
 8004d54:	4618      	mov	r0, r3
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004d86:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004d8c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004d92:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	431a      	orrs	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0

}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3714      	adds	r7, #20
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b088      	sub	sp, #32
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004dc6:	2310      	movs	r3, #16
 8004dc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004dca:	2340      	movs	r3, #64	; 0x40
 8004dcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004dd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dd6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004dd8:	f107 0308 	add.w	r3, r7, #8
 8004ddc:	4619      	mov	r1, r3
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7ff ff74 	bl	8004ccc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8004de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de8:	2110      	movs	r1, #16
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 fa42 	bl	8005274 <SDMMC_GetCmdResp1>
 8004df0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004df2:	69fb      	ldr	r3, [r7, #28]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3720      	adds	r7, #32
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b088      	sub	sp, #32
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004e0a:	2311      	movs	r3, #17
 8004e0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004e0e:	2340      	movs	r3, #64	; 0x40
 8004e10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004e12:	2300      	movs	r3, #0
 8004e14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004e1c:	f107 0308 	add.w	r3, r7, #8
 8004e20:	4619      	mov	r1, r3
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7ff ff52 	bl	8004ccc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e2c:	2111      	movs	r1, #17
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 fa20 	bl	8005274 <SDMMC_GetCmdResp1>
 8004e34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e36:	69fb      	ldr	r3, [r7, #28]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3720      	adds	r7, #32
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b088      	sub	sp, #32
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004e4e:	2312      	movs	r3, #18
 8004e50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004e52:	2340      	movs	r3, #64	; 0x40
 8004e54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004e56:	2300      	movs	r3, #0
 8004e58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004e60:	f107 0308 	add.w	r3, r7, #8
 8004e64:	4619      	mov	r1, r3
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff ff30 	bl	8004ccc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e70:	2112      	movs	r1, #18
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f9fe 	bl	8005274 <SDMMC_GetCmdResp1>
 8004e78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e7a:	69fb      	ldr	r3, [r7, #28]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3720      	adds	r7, #32
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b088      	sub	sp, #32
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004e92:	2318      	movs	r3, #24
 8004e94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004e96:	2340      	movs	r3, #64	; 0x40
 8004e98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004e9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ea2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004ea4:	f107 0308 	add.w	r3, r7, #8
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7ff ff0e 	bl	8004ccc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eb4:	2118      	movs	r1, #24
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f9dc 	bl	8005274 <SDMMC_GetCmdResp1>
 8004ebc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ebe:	69fb      	ldr	r3, [r7, #28]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3720      	adds	r7, #32
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b088      	sub	sp, #32
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004ed6:	2319      	movs	r3, #25
 8004ed8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004eda:	2340      	movs	r3, #64	; 0x40
 8004edc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004ee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ee6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004ee8:	f107 0308 	add.w	r3, r7, #8
 8004eec:	4619      	mov	r1, r3
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7ff feec 	bl	8004ccc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef8:	2119      	movs	r1, #25
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f9ba 	bl	8005274 <SDMMC_GetCmdResp1>
 8004f00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f02:	69fb      	ldr	r3, [r7, #28]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3720      	adds	r7, #32
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b088      	sub	sp, #32
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004f18:	230c      	movs	r3, #12
 8004f1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004f1c:	2340      	movs	r3, #64	; 0x40
 8004f1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f20:	2300      	movs	r3, #0
 8004f22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004f24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004f2a:	f107 0308 	add.w	r3, r7, #8
 8004f2e:	4619      	mov	r1, r3
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7ff fecb 	bl	8004ccc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8004f36:	4a05      	ldr	r2, [pc, #20]	; (8004f4c <SDMMC_CmdStopTransfer+0x40>)
 8004f38:	210c      	movs	r1, #12
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f99a 	bl	8005274 <SDMMC_GetCmdResp1>
 8004f40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f42:	69fb      	ldr	r3, [r7, #28]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3720      	adds	r7, #32
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	05f5e100 	.word	0x05f5e100

08004f50 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08a      	sub	sp, #40	; 0x28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004f60:	2307      	movs	r3, #7
 8004f62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004f64:	2340      	movs	r3, #64	; 0x40
 8004f66:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004f6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f70:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004f72:	f107 0310 	add.w	r3, r7, #16
 8004f76:	4619      	mov	r1, r3
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f7ff fea7 	bl	8004ccc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8004f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f82:	2107      	movs	r1, #7
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 f975 	bl	8005274 <SDMMC_GetCmdResp1>
 8004f8a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3728      	adds	r7, #40	; 0x28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b088      	sub	sp, #32
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004faa:	2300      	movs	r3, #0
 8004fac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004fb4:	f107 0308 	add.w	r3, r7, #8
 8004fb8:	4619      	mov	r1, r3
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7ff fe86 	bl	8004ccc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 f92f 	bl	8005224 <SDMMC_GetCmdError>
 8004fc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fc8:	69fb      	ldr	r3, [r7, #28]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3720      	adds	r7, #32
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b088      	sub	sp, #32
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004fda:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004fde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004fe0:	2308      	movs	r3, #8
 8004fe2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004fe4:	2340      	movs	r3, #64	; 0x40
 8004fe6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ff0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004ff2:	f107 0308 	add.w	r3, r7, #8
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7ff fe67 	bl	8004ccc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fb18 	bl	8005634 <SDMMC_GetCmdResp7>
 8005004:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005006:	69fb      	ldr	r3, [r7, #28]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3720      	adds	r7, #32
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800501e:	2337      	movs	r3, #55	; 0x37
 8005020:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005022:	2340      	movs	r3, #64	; 0x40
 8005024:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005026:	2300      	movs	r3, #0
 8005028:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800502a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800502e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005030:	f107 0308 	add.w	r3, r7, #8
 8005034:	4619      	mov	r1, r3
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff fe48 	bl	8004ccc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800503c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005040:	2137      	movs	r1, #55	; 0x37
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f916 	bl	8005274 <SDMMC_GetCmdResp1>
 8005048:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800504a:	69fb      	ldr	r3, [r7, #28]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3720      	adds	r7, #32
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b088      	sub	sp, #32
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	4b0d      	ldr	r3, [pc, #52]	; (8005098 <SDMMC_CmdAppOperCommand+0x44>)
 8005062:	4313      	orrs	r3, r2
 8005064:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005066:	2329      	movs	r3, #41	; 0x29
 8005068:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800506a:	2340      	movs	r3, #64	; 0x40
 800506c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800506e:	2300      	movs	r3, #0
 8005070:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005076:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005078:	f107 0308 	add.w	r3, r7, #8
 800507c:	4619      	mov	r1, r3
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7ff fe24 	bl	8004ccc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 fa27 	bl	80054d8 <SDMMC_GetCmdResp3>
 800508a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800508c:	69fb      	ldr	r3, [r7, #28]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3720      	adds	r7, #32
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	80100000 	.word	0x80100000

0800509c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b088      	sub	sp, #32
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80050aa:	2306      	movs	r3, #6
 80050ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80050ae:	2340      	movs	r3, #64	; 0x40
 80050b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80050b2:	2300      	movs	r3, #0
 80050b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80050b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80050bc:	f107 0308 	add.w	r3, r7, #8
 80050c0:	4619      	mov	r1, r3
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7ff fe02 	bl	8004ccc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80050c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050cc:	2106      	movs	r1, #6
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f8d0 	bl	8005274 <SDMMC_GetCmdResp1>
 80050d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050d6:	69fb      	ldr	r3, [r7, #28]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3720      	adds	r7, #32
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b088      	sub	sp, #32
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80050ec:	2333      	movs	r3, #51	; 0x33
 80050ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80050f0:	2340      	movs	r3, #64	; 0x40
 80050f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80050f4:	2300      	movs	r3, #0
 80050f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80050f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80050fe:	f107 0308 	add.w	r3, r7, #8
 8005102:	4619      	mov	r1, r3
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7ff fde1 	bl	8004ccc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800510a:	f241 3288 	movw	r2, #5000	; 0x1388
 800510e:	2133      	movs	r1, #51	; 0x33
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f8af 	bl	8005274 <SDMMC_GetCmdResp1>
 8005116:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005118:	69fb      	ldr	r3, [r7, #28]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3720      	adds	r7, #32
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b088      	sub	sp, #32
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800512a:	2300      	movs	r3, #0
 800512c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800512e:	2302      	movs	r3, #2
 8005130:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005132:	23c0      	movs	r3, #192	; 0xc0
 8005134:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005136:	2300      	movs	r3, #0
 8005138:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800513a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800513e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005140:	f107 0308 	add.w	r3, r7, #8
 8005144:	4619      	mov	r1, r3
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7ff fdc0 	bl	8004ccc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f97d 	bl	800544c <SDMMC_GetCmdResp2>
 8005152:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005154:	69fb      	ldr	r3, [r7, #28]
}
 8005156:	4618      	mov	r0, r3
 8005158:	3720      	adds	r7, #32
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b088      	sub	sp, #32
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
 8005166:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800516c:	2309      	movs	r3, #9
 800516e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005170:	23c0      	movs	r3, #192	; 0xc0
 8005172:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005174:	2300      	movs	r3, #0
 8005176:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005178:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800517c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800517e:	f107 0308 	add.w	r3, r7, #8
 8005182:	4619      	mov	r1, r3
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f7ff fda1 	bl	8004ccc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f95e 	bl	800544c <SDMMC_GetCmdResp2>
 8005190:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005192:	69fb      	ldr	r3, [r7, #28]
}
 8005194:	4618      	mov	r0, r3
 8005196:	3720      	adds	r7, #32
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b088      	sub	sp, #32
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80051aa:	2303      	movs	r3, #3
 80051ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80051ae:	2340      	movs	r3, #64	; 0x40
 80051b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80051b2:	2300      	movs	r3, #0
 80051b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80051b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80051bc:	f107 0308 	add.w	r3, r7, #8
 80051c0:	4619      	mov	r1, r3
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7ff fd82 	bl	8004ccc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	2103      	movs	r1, #3
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f9bd 	bl	800554c <SDMMC_GetCmdResp6>
 80051d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051d4:	69fb      	ldr	r3, [r7, #28]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3720      	adds	r7, #32
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b088      	sub	sp, #32
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
 80051e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80051ec:	230d      	movs	r3, #13
 80051ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80051f0:	2340      	movs	r3, #64	; 0x40
 80051f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80051f4:	2300      	movs	r3, #0
 80051f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80051f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80051fe:	f107 0308 	add.w	r3, r7, #8
 8005202:	4619      	mov	r1, r3
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f7ff fd61 	bl	8004ccc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800520a:	f241 3288 	movw	r2, #5000	; 0x1388
 800520e:	210d      	movs	r1, #13
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f82f 	bl	8005274 <SDMMC_GetCmdResp1>
 8005216:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005218:	69fb      	ldr	r3, [r7, #28]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3720      	adds	r7, #32
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
	...

08005224 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8005224:	b490      	push	{r4, r7}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800522c:	4b0f      	ldr	r3, [pc, #60]	; (800526c <SDMMC_GetCmdError+0x48>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a0f      	ldr	r2, [pc, #60]	; (8005270 <SDMMC_GetCmdError+0x4c>)
 8005232:	fba2 2303 	umull	r2, r3, r2, r3
 8005236:	0a5b      	lsrs	r3, r3, #9
 8005238:	f241 3288 	movw	r2, #5000	; 0x1388
 800523c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005240:	4623      	mov	r3, r4
 8005242:	1e5c      	subs	r4, r3, #1
 8005244:	2b00      	cmp	r3, #0
 8005246:	d102      	bne.n	800524e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005248:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800524c:	e009      	b.n	8005262 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005256:	2b00      	cmp	r3, #0
 8005258:	d0f2      	beq.n	8005240 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	22c5      	movs	r2, #197	; 0xc5
 800525e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bc90      	pop	{r4, r7}
 800526a:	4770      	bx	lr
 800526c:	20000000 	.word	0x20000000
 8005270:	10624dd3 	.word	0x10624dd3

08005274 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005274:	b590      	push	{r4, r7, lr}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	460b      	mov	r3, r1
 800527e:	607a      	str	r2, [r7, #4]
 8005280:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005282:	4b6f      	ldr	r3, [pc, #444]	; (8005440 <SDMMC_GetCmdResp1+0x1cc>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a6f      	ldr	r2, [pc, #444]	; (8005444 <SDMMC_GetCmdResp1+0x1d0>)
 8005288:	fba2 2303 	umull	r2, r3, r2, r3
 800528c:	0a5b      	lsrs	r3, r3, #9
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005294:	4623      	mov	r3, r4
 8005296:	1e5c      	subs	r4, r3, #1
 8005298:	2b00      	cmp	r3, #0
 800529a:	d102      	bne.n	80052a2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800529c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80052a0:	e0c9      	b.n	8005436 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d0f0      	beq.n	8005294 <SDMMC_GetCmdResp1+0x20>
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1eb      	bne.n	8005294 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c0:	f003 0304 	and.w	r3, r3, #4
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d004      	beq.n	80052d2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2204      	movs	r2, #4
 80052cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80052ce:	2304      	movs	r3, #4
 80052d0:	e0b1      	b.n	8005436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d004      	beq.n	80052e8 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2201      	movs	r2, #1
 80052e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e0a6      	b.n	8005436 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	22c5      	movs	r2, #197	; 0xc5
 80052ec:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f7ff fd16 	bl	8004d20 <SDMMC_GetCommandResponse>
 80052f4:	4603      	mov	r3, r0
 80052f6:	461a      	mov	r2, r3
 80052f8:	7afb      	ldrb	r3, [r7, #11]
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d001      	beq.n	8005302 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80052fe:	2301      	movs	r3, #1
 8005300:	e099      	b.n	8005436 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005302:	2100      	movs	r1, #0
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f7ff fd18 	bl	8004d3a <SDMMC_GetResponse>
 800530a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	4b4e      	ldr	r3, [pc, #312]	; (8005448 <SDMMC_GetCmdResp1+0x1d4>)
 8005310:	4013      	ands	r3, r2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8005316:	2300      	movs	r3, #0
 8005318:	e08d      	b.n	8005436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	2b00      	cmp	r3, #0
 800531e:	da02      	bge.n	8005326 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005320:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005324:	e087      	b.n	8005436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005330:	2340      	movs	r3, #64	; 0x40
 8005332:	e080      	b.n	8005436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800533e:	2380      	movs	r3, #128	; 0x80
 8005340:	e079      	b.n	8005436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d002      	beq.n	8005352 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800534c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005350:	e071      	b.n	8005436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d002      	beq.n	8005362 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800535c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005360:	e069      	b.n	8005436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d002      	beq.n	8005372 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800536c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005370:	e061      	b.n	8005436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800537c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005380:	e059      	b.n	8005436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d002      	beq.n	8005392 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800538c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005390:	e051      	b.n	8005436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d002      	beq.n	80053a2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800539c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053a0:	e049      	b.n	8005436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d002      	beq.n	80053b2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80053ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80053b0:	e041      	b.n	8005436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80053bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053c0:	e039      	b.n	8005436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d002      	beq.n	80053d2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80053cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053d0:	e031      	b.n	8005436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d002      	beq.n	80053e2 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80053dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80053e0:	e029      	b.n	8005436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d002      	beq.n	80053f2 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80053ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80053f0:	e021      	b.n	8005436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d002      	beq.n	8005402 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80053fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005400:	e019      	b.n	8005436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d002      	beq.n	8005412 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800540c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005410:	e011      	b.n	8005436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800541c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005420:	e009      	b.n	8005436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f003 0308 	and.w	r3, r3, #8
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800542c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005430:	e001      	b.n	8005436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005432:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005436:	4618      	mov	r0, r3
 8005438:	371c      	adds	r7, #28
 800543a:	46bd      	mov	sp, r7
 800543c:	bd90      	pop	{r4, r7, pc}
 800543e:	bf00      	nop
 8005440:	20000000 	.word	0x20000000
 8005444:	10624dd3 	.word	0x10624dd3
 8005448:	fdffe008 	.word	0xfdffe008

0800544c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800544c:	b490      	push	{r4, r7}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005454:	4b1e      	ldr	r3, [pc, #120]	; (80054d0 <SDMMC_GetCmdResp2+0x84>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a1e      	ldr	r2, [pc, #120]	; (80054d4 <SDMMC_GetCmdResp2+0x88>)
 800545a:	fba2 2303 	umull	r2, r3, r2, r3
 800545e:	0a5b      	lsrs	r3, r3, #9
 8005460:	f241 3288 	movw	r2, #5000	; 0x1388
 8005464:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005468:	4623      	mov	r3, r4
 800546a:	1e5c      	subs	r4, r3, #1
 800546c:	2b00      	cmp	r3, #0
 800546e:	d102      	bne.n	8005476 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005470:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005474:	e026      	b.n	80054c4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0f0      	beq.n	8005468 <SDMMC_GetCmdResp2+0x1c>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1eb      	bne.n	8005468 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b00      	cmp	r3, #0
 800549a:	d004      	beq.n	80054a6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2204      	movs	r2, #4
 80054a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80054a2:	2304      	movs	r3, #4
 80054a4:	e00e      	b.n	80054c4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d004      	beq.n	80054bc <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e003      	b.n	80054c4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	22c5      	movs	r2, #197	; 0xc5
 80054c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bc90      	pop	{r4, r7}
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	20000000 	.word	0x20000000
 80054d4:	10624dd3 	.word	0x10624dd3

080054d8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80054d8:	b490      	push	{r4, r7}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80054e0:	4b18      	ldr	r3, [pc, #96]	; (8005544 <SDMMC_GetCmdResp3+0x6c>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a18      	ldr	r2, [pc, #96]	; (8005548 <SDMMC_GetCmdResp3+0x70>)
 80054e6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ea:	0a5b      	lsrs	r3, r3, #9
 80054ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80054f4:	4623      	mov	r3, r4
 80054f6:	1e5c      	subs	r4, r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d102      	bne.n	8005502 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80054fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005500:	e01b      	b.n	800553a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005506:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800550e:	2b00      	cmp	r3, #0
 8005510:	d0f0      	beq.n	80054f4 <SDMMC_GetCmdResp3+0x1c>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1eb      	bne.n	80054f4 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b00      	cmp	r3, #0
 8005526:	d004      	beq.n	8005532 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2204      	movs	r2, #4
 800552c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800552e:	2304      	movs	r3, #4
 8005530:	e003      	b.n	800553a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	22c5      	movs	r2, #197	; 0xc5
 8005536:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bc90      	pop	{r4, r7}
 8005542:	4770      	bx	lr
 8005544:	20000000 	.word	0x20000000
 8005548:	10624dd3 	.word	0x10624dd3

0800554c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800554c:	b590      	push	{r4, r7, lr}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	460b      	mov	r3, r1
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800555a:	4b34      	ldr	r3, [pc, #208]	; (800562c <SDMMC_GetCmdResp6+0xe0>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a34      	ldr	r2, [pc, #208]	; (8005630 <SDMMC_GetCmdResp6+0xe4>)
 8005560:	fba2 2303 	umull	r2, r3, r2, r3
 8005564:	0a5b      	lsrs	r3, r3, #9
 8005566:	f241 3288 	movw	r2, #5000	; 0x1388
 800556a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800556e:	4623      	mov	r3, r4
 8005570:	1e5c      	subs	r4, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	d102      	bne.n	800557c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005576:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800557a:	e052      	b.n	8005622 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005580:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005588:	2b00      	cmp	r3, #0
 800558a:	d0f0      	beq.n	800556e <SDMMC_GetCmdResp6+0x22>
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1eb      	bne.n	800556e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800559a:	f003 0304 	and.w	r3, r3, #4
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d004      	beq.n	80055ac <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2204      	movs	r2, #4
 80055a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80055a8:	2304      	movs	r3, #4
 80055aa:	e03a      	b.n	8005622 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d004      	beq.n	80055c2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2201      	movs	r2, #1
 80055bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80055be:	2301      	movs	r3, #1
 80055c0:	e02f      	b.n	8005622 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f7ff fbac 	bl	8004d20 <SDMMC_GetCommandResponse>
 80055c8:	4603      	mov	r3, r0
 80055ca:	461a      	mov	r2, r3
 80055cc:	7afb      	ldrb	r3, [r7, #11]
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d001      	beq.n	80055d6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e025      	b.n	8005622 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	22c5      	movs	r2, #197	; 0xc5
 80055da:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80055dc:	2100      	movs	r1, #0
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f7ff fbab 	bl	8004d3a <SDMMC_GetResponse>
 80055e4:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d106      	bne.n	80055fe <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	0c1b      	lsrs	r3, r3, #16
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80055fa:	2300      	movs	r3, #0
 80055fc:	e011      	b.n	8005622 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d002      	beq.n	800560e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800560c:	e009      	b.n	8005622 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800561c:	e001      	b.n	8005622 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800561e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005622:	4618      	mov	r0, r3
 8005624:	371c      	adds	r7, #28
 8005626:	46bd      	mov	sp, r7
 8005628:	bd90      	pop	{r4, r7, pc}
 800562a:	bf00      	nop
 800562c:	20000000 	.word	0x20000000
 8005630:	10624dd3 	.word	0x10624dd3

08005634 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8005634:	b490      	push	{r4, r7}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800563c:	4b21      	ldr	r3, [pc, #132]	; (80056c4 <SDMMC_GetCmdResp7+0x90>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a21      	ldr	r2, [pc, #132]	; (80056c8 <SDMMC_GetCmdResp7+0x94>)
 8005642:	fba2 2303 	umull	r2, r3, r2, r3
 8005646:	0a5b      	lsrs	r3, r3, #9
 8005648:	f241 3288 	movw	r2, #5000	; 0x1388
 800564c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005650:	4623      	mov	r3, r4
 8005652:	1e5c      	subs	r4, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d102      	bne.n	800565e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005658:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800565c:	e02c      	b.n	80056b8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005662:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800566a:	2b00      	cmp	r3, #0
 800566c:	d0f0      	beq.n	8005650 <SDMMC_GetCmdResp7+0x1c>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1eb      	bne.n	8005650 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567c:	f003 0304 	and.w	r3, r3, #4
 8005680:	2b00      	cmp	r3, #0
 8005682:	d004      	beq.n	800568e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2204      	movs	r2, #4
 8005688:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800568a:	2304      	movs	r3, #4
 800568c:	e014      	b.n	80056b8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d004      	beq.n	80056a4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e009      	b.n	80056b8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d002      	beq.n	80056b6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2240      	movs	r2, #64	; 0x40
 80056b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80056b6:	2300      	movs	r3, #0
  
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bc90      	pop	{r4, r7}
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	20000000 	.word	0x20000000
 80056c8:	10624dd3 	.word	0x10624dd3

080056cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80056d0:	4904      	ldr	r1, [pc, #16]	; (80056e4 <MX_FATFS_Init+0x18>)
 80056d2:	4805      	ldr	r0, [pc, #20]	; (80056e8 <MX_FATFS_Init+0x1c>)
 80056d4:	f003 fdc0 	bl	8009258 <FATFS_LinkDriver>
 80056d8:	4603      	mov	r3, r0
 80056da:	461a      	mov	r2, r3
 80056dc:	4b03      	ldr	r3, [pc, #12]	; (80056ec <MX_FATFS_Init+0x20>)
 80056de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80056e0:	bf00      	nop
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	200003e4 	.word	0x200003e4
 80056e8:	08009dec 	.word	0x08009dec
 80056ec:	200003e0 	.word	0x200003e0

080056f0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80056f0:	b480      	push	{r7}
 80056f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80056f4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800570a:	f000 f8ac 	bl	8005866 <BSP_SD_IsDetected>
 800570e:	4603      	mov	r3, r0
 8005710:	2b01      	cmp	r3, #1
 8005712:	d001      	beq.n	8005718 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8005714:	2302      	movs	r3, #2
 8005716:	e012      	b.n	800573e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8005718:	480b      	ldr	r0, [pc, #44]	; (8005748 <BSP_SD_Init+0x48>)
 800571a:	f7fd fe59 	bl	80033d0 <HAL_SD_Init>
 800571e:	4603      	mov	r3, r0
 8005720:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005722:	79fb      	ldrb	r3, [r7, #7]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d109      	bne.n	800573c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8005728:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800572c:	4806      	ldr	r0, [pc, #24]	; (8005748 <BSP_SD_Init+0x48>)
 800572e:	f7fe fdd1 	bl	80042d4 <HAL_SD_ConfigWideBusOperation>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800573c:	79fb      	ldrb	r3, [r7, #7]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	20000094 	.word	0x20000094

0800574c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b088      	sub	sp, #32
 8005750:	af02      	add	r7, sp, #8
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800575a:	2300      	movs	r3, #0
 800575c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	68f9      	ldr	r1, [r7, #12]
 8005768:	4806      	ldr	r0, [pc, #24]	; (8005784 <BSP_SD_ReadBlocks+0x38>)
 800576a:	f7fd fec9 	bl	8003500 <HAL_SD_ReadBlocks>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005778:	7dfb      	ldrb	r3, [r7, #23]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3718      	adds	r7, #24
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	20000094 	.word	0x20000094

08005788 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b088      	sub	sp, #32
 800578c:	af02      	add	r7, sp, #8
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
 8005794:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005796:	2300      	movs	r3, #0
 8005798:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	68f9      	ldr	r1, [r7, #12]
 80057a4:	4806      	ldr	r0, [pc, #24]	; (80057c0 <BSP_SD_WriteBlocks+0x38>)
 80057a6:	f7fe f8a3 	bl	80038f0 <HAL_SD_WriteBlocks>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80057b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3718      	adds	r7, #24
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	20000094 	.word	0x20000094

080057c4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80057c8:	4805      	ldr	r0, [pc, #20]	; (80057e0 <BSP_SD_GetCardState+0x1c>)
 80057ca:	f7fe fdff 	bl	80043cc <HAL_SD_GetCardState>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	bf14      	ite	ne
 80057d4:	2301      	movne	r3, #1
 80057d6:	2300      	moveq	r3, #0
 80057d8:	b2db      	uxtb	r3, r3
}
 80057da:	4618      	mov	r0, r3
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	20000094 	.word	0x20000094

080057e4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80057ec:	6879      	ldr	r1, [r7, #4]
 80057ee:	4803      	ldr	r0, [pc, #12]	; (80057fc <BSP_SD_GetCardInfo+0x18>)
 80057f0:	f7fe fd44 	bl	800427c <HAL_SD_GetCardInfo>
}
 80057f4:	bf00      	nop
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	20000094 	.word	0x20000094

08005800 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005808:	f000 f818 	bl	800583c <BSP_SD_AbortCallback>
}
 800580c:	bf00      	nop
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800581c:	f000 f815 	bl	800584a <BSP_SD_WriteCpltCallback>
}
 8005820:	bf00      	nop
 8005822:	3708      	adds	r7, #8
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005830:	f000 f812 	bl	8005858 <BSP_SD_ReadCpltCallback>
}
 8005834:	bf00      	nop
 8005836:	3708      	adds	r7, #8
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0

}
 8005840:	bf00      	nop
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800584a:	b480      	push	{r7}
 800584c:	af00      	add	r7, sp, #0

}
 800584e:	bf00      	nop
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8005858:	b480      	push	{r7}
 800585a:	af00      	add	r7, sp, #0

}
 800585c:	bf00      	nop
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b082      	sub	sp, #8
 800586a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800586c:	2301      	movs	r3, #1
 800586e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005870:	f000 f80c 	bl	800588c <BSP_PlatformIsDetected>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800587a:	2300      	movs	r3, #0
 800587c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	b2db      	uxtb	r3, r3
}
 8005882:	4618      	mov	r0, r3
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
	...

0800588c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005892:	2301      	movs	r3, #1
 8005894:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005896:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800589a:	4806      	ldr	r0, [pc, #24]	; (80058b4 <BSP_PlatformIsDetected+0x28>)
 800589c:	f7fc fcd0 	bl	8002240 <HAL_GPIO_ReadPin>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80058a6:	2300      	movs	r3, #0
 80058a8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80058aa:	79fb      	ldrb	r3, [r7, #7]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	40020800 	.word	0x40020800

080058b8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	4603      	mov	r3, r0
 80058c0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80058c2:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <SD_CheckStatus+0x38>)
 80058c4:	2201      	movs	r2, #1
 80058c6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80058c8:	f7ff ff7c 	bl	80057c4 <BSP_SD_GetCardState>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d107      	bne.n	80058e2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80058d2:	4b07      	ldr	r3, [pc, #28]	; (80058f0 <SD_CheckStatus+0x38>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	f023 0301 	bic.w	r3, r3, #1
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	4b04      	ldr	r3, [pc, #16]	; (80058f0 <SD_CheckStatus+0x38>)
 80058e0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80058e2:	4b03      	ldr	r3, [pc, #12]	; (80058f0 <SD_CheckStatus+0x38>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	b2db      	uxtb	r3, r3
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3708      	adds	r7, #8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	20000011 	.word	0x20000011

080058f4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	4603      	mov	r3, r0
 80058fc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80058fe:	4b0b      	ldr	r3, [pc, #44]	; (800592c <SD_initialize+0x38>)
 8005900:	2201      	movs	r2, #1
 8005902:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005904:	f7ff fefc 	bl	8005700 <BSP_SD_Init>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d107      	bne.n	800591e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800590e:	79fb      	ldrb	r3, [r7, #7]
 8005910:	4618      	mov	r0, r3
 8005912:	f7ff ffd1 	bl	80058b8 <SD_CheckStatus>
 8005916:	4603      	mov	r3, r0
 8005918:	461a      	mov	r2, r3
 800591a:	4b04      	ldr	r3, [pc, #16]	; (800592c <SD_initialize+0x38>)
 800591c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800591e:	4b03      	ldr	r3, [pc, #12]	; (800592c <SD_initialize+0x38>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	b2db      	uxtb	r3, r3
}
 8005924:	4618      	mov	r0, r3
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	20000011 	.word	0x20000011

08005930 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	4603      	mov	r3, r0
 8005938:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800593a:	79fb      	ldrb	r3, [r7, #7]
 800593c:	4618      	mov	r0, r3
 800593e:	f7ff ffbb 	bl	80058b8 <SD_CheckStatus>
 8005942:	4603      	mov	r3, r0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	60b9      	str	r1, [r7, #8]
 8005954:	607a      	str	r2, [r7, #4]
 8005956:	603b      	str	r3, [r7, #0]
 8005958:	4603      	mov	r3, r0
 800595a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	6879      	ldr	r1, [r7, #4]
 8005968:	68b8      	ldr	r0, [r7, #8]
 800596a:	f7ff feef 	bl	800574c <BSP_SD_ReadBlocks>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d107      	bne.n	8005984 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005974:	bf00      	nop
 8005976:	f7ff ff25 	bl	80057c4 <BSP_SD_GetCardState>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1fa      	bne.n	8005976 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005980:	2300      	movs	r3, #0
 8005982:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005984:	7dfb      	ldrb	r3, [r7, #23]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b086      	sub	sp, #24
 8005992:	af00      	add	r7, sp, #0
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]
 800599a:	4603      	mov	r3, r0
 800599c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80059a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	6879      	ldr	r1, [r7, #4]
 80059aa:	68b8      	ldr	r0, [r7, #8]
 80059ac:	f7ff feec 	bl	8005788 <BSP_SD_WriteBlocks>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d107      	bne.n	80059c6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80059b6:	bf00      	nop
 80059b8:	f7ff ff04 	bl	80057c4 <BSP_SD_GetCardState>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1fa      	bne.n	80059b8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80059c2:	2300      	movs	r3, #0
 80059c4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80059c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3718      	adds	r7, #24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b08c      	sub	sp, #48	; 0x30
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	4603      	mov	r3, r0
 80059d8:	603a      	str	r2, [r7, #0]
 80059da:	71fb      	strb	r3, [r7, #7]
 80059dc:	460b      	mov	r3, r1
 80059de:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80059e6:	4b25      	ldr	r3, [pc, #148]	; (8005a7c <SD_ioctl+0xac>)
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d001      	beq.n	80059f8 <SD_ioctl+0x28>
 80059f4:	2303      	movs	r3, #3
 80059f6:	e03c      	b.n	8005a72 <SD_ioctl+0xa2>

  switch (cmd)
 80059f8:	79bb      	ldrb	r3, [r7, #6]
 80059fa:	2b03      	cmp	r3, #3
 80059fc:	d834      	bhi.n	8005a68 <SD_ioctl+0x98>
 80059fe:	a201      	add	r2, pc, #4	; (adr r2, 8005a04 <SD_ioctl+0x34>)
 8005a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a04:	08005a15 	.word	0x08005a15
 8005a08:	08005a1d 	.word	0x08005a1d
 8005a0c:	08005a35 	.word	0x08005a35
 8005a10:	08005a4f 	.word	0x08005a4f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005a14:	2300      	movs	r3, #0
 8005a16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005a1a:	e028      	b.n	8005a6e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005a1c:	f107 030c 	add.w	r3, r7, #12
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7ff fedf 	bl	80057e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005a32:	e01c      	b.n	8005a6e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005a34:	f107 030c 	add.w	r3, r7, #12
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff fed3 	bl	80057e4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005a4c:	e00f      	b.n	8005a6e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005a4e:	f107 030c 	add.w	r3, r7, #12
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7ff fec6 	bl	80057e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5a:	0a5a      	lsrs	r2, r3, #9
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005a60:	2300      	movs	r3, #0
 8005a62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005a66:	e002      	b.n	8005a6e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005a68:	2304      	movs	r3, #4
 8005a6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005a6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3730      	adds	r7, #48	; 0x30
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20000011 	.word	0x20000011

08005a80 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	4603      	mov	r3, r0
 8005a88:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005a8a:	79fb      	ldrb	r3, [r7, #7]
 8005a8c:	4a08      	ldr	r2, [pc, #32]	; (8005ab0 <disk_status+0x30>)
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	79fa      	ldrb	r2, [r7, #7]
 8005a98:	4905      	ldr	r1, [pc, #20]	; (8005ab0 <disk_status+0x30>)
 8005a9a:	440a      	add	r2, r1
 8005a9c:	7a12      	ldrb	r2, [r2, #8]
 8005a9e:	4610      	mov	r0, r2
 8005aa0:	4798      	blx	r3
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	20000874 	.word	0x20000874

08005ab4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	4603      	mov	r3, r0
 8005abc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005ac2:	79fb      	ldrb	r3, [r7, #7]
 8005ac4:	4a0d      	ldr	r2, [pc, #52]	; (8005afc <disk_initialize+0x48>)
 8005ac6:	5cd3      	ldrb	r3, [r2, r3]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d111      	bne.n	8005af0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005acc:	79fb      	ldrb	r3, [r7, #7]
 8005ace:	4a0b      	ldr	r2, [pc, #44]	; (8005afc <disk_initialize+0x48>)
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005ad4:	79fb      	ldrb	r3, [r7, #7]
 8005ad6:	4a09      	ldr	r2, [pc, #36]	; (8005afc <disk_initialize+0x48>)
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	79fa      	ldrb	r2, [r7, #7]
 8005ae2:	4906      	ldr	r1, [pc, #24]	; (8005afc <disk_initialize+0x48>)
 8005ae4:	440a      	add	r2, r1
 8005ae6:	7a12      	ldrb	r2, [r2, #8]
 8005ae8:	4610      	mov	r0, r2
 8005aea:	4798      	blx	r3
 8005aec:	4603      	mov	r3, r0
 8005aee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	20000874 	.word	0x20000874

08005b00 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005b00:	b590      	push	{r4, r7, lr}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60b9      	str	r1, [r7, #8]
 8005b08:	607a      	str	r2, [r7, #4]
 8005b0a:	603b      	str	r3, [r7, #0]
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
 8005b12:	4a0a      	ldr	r2, [pc, #40]	; (8005b3c <disk_read+0x3c>)
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	689c      	ldr	r4, [r3, #8]
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
 8005b1e:	4a07      	ldr	r2, [pc, #28]	; (8005b3c <disk_read+0x3c>)
 8005b20:	4413      	add	r3, r2
 8005b22:	7a18      	ldrb	r0, [r3, #8]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	68b9      	ldr	r1, [r7, #8]
 8005b2a:	47a0      	blx	r4
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	371c      	adds	r7, #28
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd90      	pop	{r4, r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	20000874 	.word	0x20000874

08005b40 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005b40:	b590      	push	{r4, r7, lr}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60b9      	str	r1, [r7, #8]
 8005b48:	607a      	str	r2, [r7, #4]
 8005b4a:	603b      	str	r3, [r7, #0]
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
 8005b52:	4a0a      	ldr	r2, [pc, #40]	; (8005b7c <disk_write+0x3c>)
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	68dc      	ldr	r4, [r3, #12]
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
 8005b5e:	4a07      	ldr	r2, [pc, #28]	; (8005b7c <disk_write+0x3c>)
 8005b60:	4413      	add	r3, r2
 8005b62:	7a18      	ldrb	r0, [r3, #8]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	68b9      	ldr	r1, [r7, #8]
 8005b6a:	47a0      	blx	r4
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	371c      	adds	r7, #28
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd90      	pop	{r4, r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	20000874 	.word	0x20000874

08005b80 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	4603      	mov	r3, r0
 8005b88:	603a      	str	r2, [r7, #0]
 8005b8a:	71fb      	strb	r3, [r7, #7]
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005b90:	79fb      	ldrb	r3, [r7, #7]
 8005b92:	4a09      	ldr	r2, [pc, #36]	; (8005bb8 <disk_ioctl+0x38>)
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	79fa      	ldrb	r2, [r7, #7]
 8005b9e:	4906      	ldr	r1, [pc, #24]	; (8005bb8 <disk_ioctl+0x38>)
 8005ba0:	440a      	add	r2, r1
 8005ba2:	7a10      	ldrb	r0, [r2, #8]
 8005ba4:	79b9      	ldrb	r1, [r7, #6]
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	4798      	blx	r3
 8005baa:	4603      	mov	r3, r0
 8005bac:	73fb      	strb	r3, [r7, #15]
  return res;
 8005bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	20000874 	.word	0x20000874

08005bbc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005bcc:	89fb      	ldrh	r3, [r7, #14]
 8005bce:	021b      	lsls	r3, r3, #8
 8005bd0:	b21a      	sxth	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	b21b      	sxth	r3, r3
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	b21b      	sxth	r3, r3
 8005bdc:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005bde:	89fb      	ldrh	r3, [r7, #14]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3714      	adds	r7, #20
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	3303      	adds	r3, #3
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	021b      	lsls	r3, r3, #8
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	3202      	adds	r2, #2
 8005c04:	7812      	ldrb	r2, [r2, #0]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	021b      	lsls	r3, r3, #8
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	3201      	adds	r2, #1
 8005c12:	7812      	ldrb	r2, [r2, #0]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	021b      	lsls	r3, r3, #8
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	7812      	ldrb	r2, [r2, #0]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	60fb      	str	r3, [r7, #12]
	return rv;
 8005c24:	68fb      	ldr	r3, [r7, #12]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005c32:	b480      	push	{r7}
 8005c34:	b083      	sub	sp, #12
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	1c5a      	adds	r2, r3, #1
 8005c42:	607a      	str	r2, [r7, #4]
 8005c44:	887a      	ldrh	r2, [r7, #2]
 8005c46:	b2d2      	uxtb	r2, r2
 8005c48:	701a      	strb	r2, [r3, #0]
 8005c4a:	887b      	ldrh	r3, [r7, #2]
 8005c4c:	0a1b      	lsrs	r3, r3, #8
 8005c4e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	607a      	str	r2, [r7, #4]
 8005c56:	887a      	ldrh	r2, [r7, #2]
 8005c58:	b2d2      	uxtb	r2, r2
 8005c5a:	701a      	strb	r2, [r3, #0]
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	1c5a      	adds	r2, r3, #1
 8005c76:	607a      	str	r2, [r7, #4]
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	b2d2      	uxtb	r2, r2
 8005c7c:	701a      	strb	r2, [r3, #0]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	0a1b      	lsrs	r3, r3, #8
 8005c82:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	1c5a      	adds	r2, r3, #1
 8005c88:	607a      	str	r2, [r7, #4]
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	b2d2      	uxtb	r2, r2
 8005c8e:	701a      	strb	r2, [r3, #0]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	0a1b      	lsrs	r3, r3, #8
 8005c94:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	1c5a      	adds	r2, r3, #1
 8005c9a:	607a      	str	r2, [r7, #4]
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	b2d2      	uxtb	r2, r2
 8005ca0:	701a      	strb	r2, [r3, #0]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	0a1b      	lsrs	r3, r3, #8
 8005ca6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	607a      	str	r2, [r7, #4]
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	b2d2      	uxtb	r2, r2
 8005cb2:	701a      	strb	r2, [r3, #0]
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005cc0:	b480      	push	{r7}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00d      	beq.n	8005cf6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	1c53      	adds	r3, r2, #1
 8005cde:	613b      	str	r3, [r7, #16]
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	1c59      	adds	r1, r3, #1
 8005ce4:	6179      	str	r1, [r7, #20]
 8005ce6:	7812      	ldrb	r2, [r2, #0]
 8005ce8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	3b01      	subs	r3, #1
 8005cee:	607b      	str	r3, [r7, #4]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1f1      	bne.n	8005cda <mem_cpy+0x1a>
	}
}
 8005cf6:	bf00      	nop
 8005cf8:	371c      	adds	r7, #28
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005d02:	b480      	push	{r7}
 8005d04:	b087      	sub	sp, #28
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	60f8      	str	r0, [r7, #12]
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	1c5a      	adds	r2, r3, #1
 8005d16:	617a      	str	r2, [r7, #20]
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	b2d2      	uxtb	r2, r2
 8005d1c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	607b      	str	r3, [r7, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1f3      	bne.n	8005d12 <mem_set+0x10>
}
 8005d2a:	bf00      	nop
 8005d2c:	bf00      	nop
 8005d2e:	371c      	adds	r7, #28
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005d38:	b480      	push	{r7}
 8005d3a:	b089      	sub	sp, #36	; 0x24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	61fb      	str	r3, [r7, #28]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	1c5a      	adds	r2, r3, #1
 8005d54:	61fa      	str	r2, [r7, #28]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	4619      	mov	r1, r3
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	1c5a      	adds	r2, r3, #1
 8005d5e:	61ba      	str	r2, [r7, #24]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	1acb      	subs	r3, r1, r3
 8005d64:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	607b      	str	r3, [r7, #4]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d002      	beq.n	8005d78 <mem_cmp+0x40>
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d0eb      	beq.n	8005d50 <mem_cmp+0x18>

	return r;
 8005d78:	697b      	ldr	r3, [r7, #20]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3724      	adds	r7, #36	; 0x24
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005d86:	b480      	push	{r7}
 8005d88:	b083      	sub	sp, #12
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005d90:	e002      	b.n	8005d98 <chk_chr+0x12>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	3301      	adds	r3, #1
 8005d96:	607b      	str	r3, [r7, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d005      	beq.n	8005dac <chk_chr+0x26>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	461a      	mov	r2, r3
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d1f2      	bne.n	8005d92 <chk_chr+0xc>
	return *str;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	781b      	ldrb	r3, [r3, #0]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60bb      	str	r3, [r7, #8]
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	60fb      	str	r3, [r7, #12]
 8005dce:	e029      	b.n	8005e24 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005dd0:	4a27      	ldr	r2, [pc, #156]	; (8005e70 <chk_lock+0xb4>)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	011b      	lsls	r3, r3, #4
 8005dd6:	4413      	add	r3, r2
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d01d      	beq.n	8005e1a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005dde:	4a24      	ldr	r2, [pc, #144]	; (8005e70 <chk_lock+0xb4>)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	011b      	lsls	r3, r3, #4
 8005de4:	4413      	add	r3, r2
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d116      	bne.n	8005e1e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005df0:	4a1f      	ldr	r2, [pc, #124]	; (8005e70 <chk_lock+0xb4>)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	011b      	lsls	r3, r3, #4
 8005df6:	4413      	add	r3, r2
 8005df8:	3304      	adds	r3, #4
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d10c      	bne.n	8005e1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005e04:	4a1a      	ldr	r2, [pc, #104]	; (8005e70 <chk_lock+0xb4>)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	011b      	lsls	r3, r3, #4
 8005e0a:	4413      	add	r3, r2
 8005e0c:	3308      	adds	r3, #8
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d102      	bne.n	8005e1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005e18:	e007      	b.n	8005e2a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	3301      	adds	r3, #1
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d9d2      	bls.n	8005dd0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d109      	bne.n	8005e44 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d102      	bne.n	8005e3c <chk_lock+0x80>
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d101      	bne.n	8005e40 <chk_lock+0x84>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	e010      	b.n	8005e62 <chk_lock+0xa6>
 8005e40:	2312      	movs	r3, #18
 8005e42:	e00e      	b.n	8005e62 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d108      	bne.n	8005e5c <chk_lock+0xa0>
 8005e4a:	4a09      	ldr	r2, [pc, #36]	; (8005e70 <chk_lock+0xb4>)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	011b      	lsls	r3, r3, #4
 8005e50:	4413      	add	r3, r2
 8005e52:	330c      	adds	r3, #12
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e5a:	d101      	bne.n	8005e60 <chk_lock+0xa4>
 8005e5c:	2310      	movs	r3, #16
 8005e5e:	e000      	b.n	8005e62 <chk_lock+0xa6>
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	20000854 	.word	0x20000854

08005e74 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	607b      	str	r3, [r7, #4]
 8005e7e:	e002      	b.n	8005e86 <enq_lock+0x12>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3301      	adds	r3, #1
 8005e84:	607b      	str	r3, [r7, #4]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d806      	bhi.n	8005e9a <enq_lock+0x26>
 8005e8c:	4a09      	ldr	r2, [pc, #36]	; (8005eb4 <enq_lock+0x40>)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	011b      	lsls	r3, r3, #4
 8005e92:	4413      	add	r3, r2
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1f2      	bne.n	8005e80 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	bf14      	ite	ne
 8005ea0:	2301      	movne	r3, #1
 8005ea2:	2300      	moveq	r3, #0
 8005ea4:	b2db      	uxtb	r3, r3
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	20000854 	.word	0x20000854

08005eb8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60fb      	str	r3, [r7, #12]
 8005ec6:	e01f      	b.n	8005f08 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005ec8:	4a41      	ldr	r2, [pc, #260]	; (8005fd0 <inc_lock+0x118>)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	011b      	lsls	r3, r3, #4
 8005ece:	4413      	add	r3, r2
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d113      	bne.n	8005f02 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005eda:	4a3d      	ldr	r2, [pc, #244]	; (8005fd0 <inc_lock+0x118>)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	011b      	lsls	r3, r3, #4
 8005ee0:	4413      	add	r3, r2
 8005ee2:	3304      	adds	r3, #4
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d109      	bne.n	8005f02 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005eee:	4a38      	ldr	r2, [pc, #224]	; (8005fd0 <inc_lock+0x118>)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	011b      	lsls	r3, r3, #4
 8005ef4:	4413      	add	r3, r2
 8005ef6:	3308      	adds	r3, #8
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d006      	beq.n	8005f10 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	3301      	adds	r3, #1
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d9dc      	bls.n	8005ec8 <inc_lock+0x10>
 8005f0e:	e000      	b.n	8005f12 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005f10:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d132      	bne.n	8005f7e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	60fb      	str	r3, [r7, #12]
 8005f1c:	e002      	b.n	8005f24 <inc_lock+0x6c>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	3301      	adds	r3, #1
 8005f22:	60fb      	str	r3, [r7, #12]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d806      	bhi.n	8005f38 <inc_lock+0x80>
 8005f2a:	4a29      	ldr	r2, [pc, #164]	; (8005fd0 <inc_lock+0x118>)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	011b      	lsls	r3, r3, #4
 8005f30:	4413      	add	r3, r2
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1f2      	bne.n	8005f1e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d101      	bne.n	8005f42 <inc_lock+0x8a>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e040      	b.n	8005fc4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	4922      	ldr	r1, [pc, #136]	; (8005fd0 <inc_lock+0x118>)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	011b      	lsls	r3, r3, #4
 8005f4c:	440b      	add	r3, r1
 8005f4e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	491e      	ldr	r1, [pc, #120]	; (8005fd0 <inc_lock+0x118>)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	011b      	lsls	r3, r3, #4
 8005f5a:	440b      	add	r3, r1
 8005f5c:	3304      	adds	r3, #4
 8005f5e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	695a      	ldr	r2, [r3, #20]
 8005f64:	491a      	ldr	r1, [pc, #104]	; (8005fd0 <inc_lock+0x118>)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	011b      	lsls	r3, r3, #4
 8005f6a:	440b      	add	r3, r1
 8005f6c:	3308      	adds	r3, #8
 8005f6e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005f70:	4a17      	ldr	r2, [pc, #92]	; (8005fd0 <inc_lock+0x118>)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	011b      	lsls	r3, r3, #4
 8005f76:	4413      	add	r3, r2
 8005f78:	330c      	adds	r3, #12
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d009      	beq.n	8005f98 <inc_lock+0xe0>
 8005f84:	4a12      	ldr	r2, [pc, #72]	; (8005fd0 <inc_lock+0x118>)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	011b      	lsls	r3, r3, #4
 8005f8a:	4413      	add	r3, r2
 8005f8c:	330c      	adds	r3, #12
 8005f8e:	881b      	ldrh	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d001      	beq.n	8005f98 <inc_lock+0xe0>
 8005f94:	2300      	movs	r3, #0
 8005f96:	e015      	b.n	8005fc4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d108      	bne.n	8005fb0 <inc_lock+0xf8>
 8005f9e:	4a0c      	ldr	r2, [pc, #48]	; (8005fd0 <inc_lock+0x118>)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	011b      	lsls	r3, r3, #4
 8005fa4:	4413      	add	r3, r2
 8005fa6:	330c      	adds	r3, #12
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	3301      	adds	r3, #1
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	e001      	b.n	8005fb4 <inc_lock+0xfc>
 8005fb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fb4:	4906      	ldr	r1, [pc, #24]	; (8005fd0 <inc_lock+0x118>)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	011b      	lsls	r3, r3, #4
 8005fba:	440b      	add	r3, r1
 8005fbc:	330c      	adds	r3, #12
 8005fbe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	3301      	adds	r3, #1
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3714      	adds	r7, #20
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	20000854 	.word	0x20000854

08005fd4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	607b      	str	r3, [r7, #4]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d825      	bhi.n	8006034 <dec_lock+0x60>
		n = Files[i].ctr;
 8005fe8:	4a17      	ldr	r2, [pc, #92]	; (8006048 <dec_lock+0x74>)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	011b      	lsls	r3, r3, #4
 8005fee:	4413      	add	r3, r2
 8005ff0:	330c      	adds	r3, #12
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005ff6:	89fb      	ldrh	r3, [r7, #14]
 8005ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ffc:	d101      	bne.n	8006002 <dec_lock+0x2e>
 8005ffe:	2300      	movs	r3, #0
 8006000:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006002:	89fb      	ldrh	r3, [r7, #14]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d002      	beq.n	800600e <dec_lock+0x3a>
 8006008:	89fb      	ldrh	r3, [r7, #14]
 800600a:	3b01      	subs	r3, #1
 800600c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800600e:	4a0e      	ldr	r2, [pc, #56]	; (8006048 <dec_lock+0x74>)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	011b      	lsls	r3, r3, #4
 8006014:	4413      	add	r3, r2
 8006016:	330c      	adds	r3, #12
 8006018:	89fa      	ldrh	r2, [r7, #14]
 800601a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800601c:	89fb      	ldrh	r3, [r7, #14]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d105      	bne.n	800602e <dec_lock+0x5a>
 8006022:	4a09      	ldr	r2, [pc, #36]	; (8006048 <dec_lock+0x74>)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	011b      	lsls	r3, r3, #4
 8006028:	4413      	add	r3, r2
 800602a:	2200      	movs	r2, #0
 800602c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800602e:	2300      	movs	r3, #0
 8006030:	737b      	strb	r3, [r7, #13]
 8006032:	e001      	b.n	8006038 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006034:	2302      	movs	r3, #2
 8006036:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006038:	7b7b      	ldrb	r3, [r7, #13]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	20000854 	.word	0x20000854

0800604c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006054:	2300      	movs	r3, #0
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	e010      	b.n	800607c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800605a:	4a0d      	ldr	r2, [pc, #52]	; (8006090 <clear_lock+0x44>)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	011b      	lsls	r3, r3, #4
 8006060:	4413      	add	r3, r2
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	429a      	cmp	r2, r3
 8006068:	d105      	bne.n	8006076 <clear_lock+0x2a>
 800606a:	4a09      	ldr	r2, [pc, #36]	; (8006090 <clear_lock+0x44>)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	011b      	lsls	r3, r3, #4
 8006070:	4413      	add	r3, r2
 8006072:	2200      	movs	r2, #0
 8006074:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	3301      	adds	r3, #1
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d9eb      	bls.n	800605a <clear_lock+0xe>
	}
}
 8006082:	bf00      	nop
 8006084:	bf00      	nop
 8006086:	3714      	adds	r7, #20
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	20000854 	.word	0x20000854

08006094 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800609c:	2300      	movs	r3, #0
 800609e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	78db      	ldrb	r3, [r3, #3]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d034      	beq.n	8006112 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	7858      	ldrb	r0, [r3, #1]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80060b8:	2301      	movs	r3, #1
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	f7ff fd40 	bl	8005b40 <disk_write>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <sync_window+0x38>
			res = FR_DISK_ERR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	73fb      	strb	r3, [r7, #15]
 80060ca:	e022      	b.n	8006112 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	1ad2      	subs	r2, r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d217      	bcs.n	8006112 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	789b      	ldrb	r3, [r3, #2]
 80060e6:	613b      	str	r3, [r7, #16]
 80060e8:	e010      	b.n	800610c <sync_window+0x78>
					wsect += fs->fsize;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	4413      	add	r3, r2
 80060f2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	7858      	ldrb	r0, [r3, #1]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80060fe:	2301      	movs	r3, #1
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	f7ff fd1d 	bl	8005b40 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	3b01      	subs	r3, #1
 800610a:	613b      	str	r3, [r7, #16]
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d8eb      	bhi.n	80060ea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006112:	7bfb      	ldrb	r3, [r7, #15]
}
 8006114:	4618      	mov	r0, r3
 8006116:	3718      	adds	r7, #24
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006126:	2300      	movs	r3, #0
 8006128:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	429a      	cmp	r2, r3
 8006132:	d01b      	beq.n	800616c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7ff ffad 	bl	8006094 <sync_window>
 800613a:	4603      	mov	r3, r0
 800613c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800613e:	7bfb      	ldrb	r3, [r7, #15]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d113      	bne.n	800616c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	7858      	ldrb	r0, [r3, #1]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800614e:	2301      	movs	r3, #1
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	f7ff fcd5 	bl	8005b00 <disk_read>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d004      	beq.n	8006166 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800615c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006160:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006162:	2301      	movs	r3, #1
 8006164:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800616c:	7bfb      	ldrb	r3, [r7, #15]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
	...

08006178 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f7ff ff87 	bl	8006094 <sync_window>
 8006186:	4603      	mov	r3, r0
 8006188:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800618a:	7bfb      	ldrb	r3, [r7, #15]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d158      	bne.n	8006242 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	2b03      	cmp	r3, #3
 8006196:	d148      	bne.n	800622a <sync_fs+0xb2>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	791b      	ldrb	r3, [r3, #4]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d144      	bne.n	800622a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	3334      	adds	r3, #52	; 0x34
 80061a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061a8:	2100      	movs	r1, #0
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7ff fda9 	bl	8005d02 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	3334      	adds	r3, #52	; 0x34
 80061b4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80061b8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80061bc:	4618      	mov	r0, r3
 80061be:	f7ff fd38 	bl	8005c32 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	3334      	adds	r3, #52	; 0x34
 80061c6:	4921      	ldr	r1, [pc, #132]	; (800624c <sync_fs+0xd4>)
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7ff fd4d 	bl	8005c68 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	3334      	adds	r3, #52	; 0x34
 80061d2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80061d6:	491e      	ldr	r1, [pc, #120]	; (8006250 <sync_fs+0xd8>)
 80061d8:	4618      	mov	r0, r3
 80061da:	f7ff fd45 	bl	8005c68 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	3334      	adds	r3, #52	; 0x34
 80061e2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	4619      	mov	r1, r3
 80061ec:	4610      	mov	r0, r2
 80061ee:	f7ff fd3b 	bl	8005c68 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	3334      	adds	r3, #52	; 0x34
 80061f6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	4619      	mov	r1, r3
 8006200:	4610      	mov	r0, r2
 8006202:	f7ff fd31 	bl	8005c68 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	1c5a      	adds	r2, r3, #1
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	7858      	ldrb	r0, [r3, #1]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800621e:	2301      	movs	r3, #1
 8006220:	f7ff fc8e 	bl	8005b40 <disk_write>
			fs->fsi_flag = 0;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	785b      	ldrb	r3, [r3, #1]
 800622e:	2200      	movs	r2, #0
 8006230:	2100      	movs	r1, #0
 8006232:	4618      	mov	r0, r3
 8006234:	f7ff fca4 	bl	8005b80 <disk_ioctl>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d001      	beq.n	8006242 <sync_fs+0xca>
 800623e:	2301      	movs	r3, #1
 8006240:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006242:	7bfb      	ldrb	r3, [r7, #15]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	41615252 	.word	0x41615252
 8006250:	61417272 	.word	0x61417272

08006254 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	3b02      	subs	r3, #2
 8006262:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	699b      	ldr	r3, [r3, #24]
 8006268:	3b02      	subs	r3, #2
 800626a:	683a      	ldr	r2, [r7, #0]
 800626c:	429a      	cmp	r2, r3
 800626e:	d301      	bcc.n	8006274 <clust2sect+0x20>
 8006270:	2300      	movs	r3, #0
 8006272:	e008      	b.n	8006286 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	895b      	ldrh	r3, [r3, #10]
 8006278:	461a      	mov	r2, r3
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	fb03 f202 	mul.w	r2, r3, r2
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006284:	4413      	add	r3, r2
}
 8006286:	4618      	mov	r0, r3
 8006288:	370c      	adds	r7, #12
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b086      	sub	sp, #24
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
 800629a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d904      	bls.n	80062b2 <get_fat+0x20>
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d302      	bcc.n	80062b8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80062b2:	2301      	movs	r3, #1
 80062b4:	617b      	str	r3, [r7, #20]
 80062b6:	e08f      	b.n	80063d8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80062b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062bc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	2b03      	cmp	r3, #3
 80062c4:	d062      	beq.n	800638c <get_fat+0xfa>
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	dc7c      	bgt.n	80063c4 <get_fat+0x132>
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d002      	beq.n	80062d4 <get_fat+0x42>
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d042      	beq.n	8006358 <get_fat+0xc6>
 80062d2:	e077      	b.n	80063c4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	60fb      	str	r3, [r7, #12]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	085b      	lsrs	r3, r3, #1
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	4413      	add	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	0a5b      	lsrs	r3, r3, #9
 80062ea:	4413      	add	r3, r2
 80062ec:	4619      	mov	r1, r3
 80062ee:	6938      	ldr	r0, [r7, #16]
 80062f0:	f7ff ff14 	bl	800611c <move_window>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d167      	bne.n	80063ca <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	1c5a      	adds	r2, r3, #1
 80062fe:	60fa      	str	r2, [r7, #12]
 8006300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	4413      	add	r3, r2
 8006308:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800630c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	0a5b      	lsrs	r3, r3, #9
 8006316:	4413      	add	r3, r2
 8006318:	4619      	mov	r1, r3
 800631a:	6938      	ldr	r0, [r7, #16]
 800631c:	f7ff fefe 	bl	800611c <move_window>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d153      	bne.n	80063ce <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	4413      	add	r3, r2
 8006330:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006334:	021b      	lsls	r3, r3, #8
 8006336:	461a      	mov	r2, r3
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	4313      	orrs	r3, r2
 800633c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <get_fat+0xbc>
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	091b      	lsrs	r3, r3, #4
 800634c:	e002      	b.n	8006354 <get_fat+0xc2>
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006354:	617b      	str	r3, [r7, #20]
			break;
 8006356:	e03f      	b.n	80063d8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	0a1b      	lsrs	r3, r3, #8
 8006360:	4413      	add	r3, r2
 8006362:	4619      	mov	r1, r3
 8006364:	6938      	ldr	r0, [r7, #16]
 8006366:	f7ff fed9 	bl	800611c <move_window>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d130      	bne.n	80063d2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	005b      	lsls	r3, r3, #1
 800637a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800637e:	4413      	add	r3, r2
 8006380:	4618      	mov	r0, r3
 8006382:	f7ff fc1b 	bl	8005bbc <ld_word>
 8006386:	4603      	mov	r3, r0
 8006388:	617b      	str	r3, [r7, #20]
			break;
 800638a:	e025      	b.n	80063d8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	09db      	lsrs	r3, r3, #7
 8006394:	4413      	add	r3, r2
 8006396:	4619      	mov	r1, r3
 8006398:	6938      	ldr	r0, [r7, #16]
 800639a:	f7ff febf 	bl	800611c <move_window>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d118      	bne.n	80063d6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80063b2:	4413      	add	r3, r2
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7ff fc19 	bl	8005bec <ld_dword>
 80063ba:	4603      	mov	r3, r0
 80063bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80063c0:	617b      	str	r3, [r7, #20]
			break;
 80063c2:	e009      	b.n	80063d8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80063c4:	2301      	movs	r3, #1
 80063c6:	617b      	str	r3, [r7, #20]
 80063c8:	e006      	b.n	80063d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80063ca:	bf00      	nop
 80063cc:	e004      	b.n	80063d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80063ce:	bf00      	nop
 80063d0:	e002      	b.n	80063d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80063d2:	bf00      	nop
 80063d4:	e000      	b.n	80063d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80063d6:	bf00      	nop
		}
	}

	return val;
 80063d8:	697b      	ldr	r3, [r7, #20]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3718      	adds	r7, #24
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80063e2:	b590      	push	{r4, r7, lr}
 80063e4:	b089      	sub	sp, #36	; 0x24
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	60f8      	str	r0, [r7, #12]
 80063ea:	60b9      	str	r1, [r7, #8]
 80063ec:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80063ee:	2302      	movs	r3, #2
 80063f0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	f240 80d2 	bls.w	800659e <put_fat+0x1bc>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	429a      	cmp	r2, r3
 8006402:	f080 80cc 	bcs.w	800659e <put_fat+0x1bc>
		switch (fs->fs_type) {
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	2b03      	cmp	r3, #3
 800640c:	f000 8096 	beq.w	800653c <put_fat+0x15a>
 8006410:	2b03      	cmp	r3, #3
 8006412:	f300 80cd 	bgt.w	80065b0 <put_fat+0x1ce>
 8006416:	2b01      	cmp	r3, #1
 8006418:	d002      	beq.n	8006420 <put_fat+0x3e>
 800641a:	2b02      	cmp	r3, #2
 800641c:	d06e      	beq.n	80064fc <put_fat+0x11a>
 800641e:	e0c7      	b.n	80065b0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	61bb      	str	r3, [r7, #24]
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	085b      	lsrs	r3, r3, #1
 8006428:	69ba      	ldr	r2, [r7, #24]
 800642a:	4413      	add	r3, r2
 800642c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	0a5b      	lsrs	r3, r3, #9
 8006436:	4413      	add	r3, r2
 8006438:	4619      	mov	r1, r3
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f7ff fe6e 	bl	800611c <move_window>
 8006440:	4603      	mov	r3, r0
 8006442:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006444:	7ffb      	ldrb	r3, [r7, #31]
 8006446:	2b00      	cmp	r3, #0
 8006448:	f040 80ab 	bne.w	80065a2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	1c59      	adds	r1, r3, #1
 8006456:	61b9      	str	r1, [r7, #24]
 8006458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800645c:	4413      	add	r3, r2
 800645e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00d      	beq.n	8006486 <put_fat+0xa4>
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	b25b      	sxtb	r3, r3
 8006470:	f003 030f 	and.w	r3, r3, #15
 8006474:	b25a      	sxtb	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	b2db      	uxtb	r3, r3
 800647a:	011b      	lsls	r3, r3, #4
 800647c:	b25b      	sxtb	r3, r3
 800647e:	4313      	orrs	r3, r2
 8006480:	b25b      	sxtb	r3, r3
 8006482:	b2db      	uxtb	r3, r3
 8006484:	e001      	b.n	800648a <put_fat+0xa8>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	b2db      	uxtb	r3, r3
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2201      	movs	r2, #1
 8006492:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	0a5b      	lsrs	r3, r3, #9
 800649c:	4413      	add	r3, r2
 800649e:	4619      	mov	r1, r3
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f7ff fe3b 	bl	800611c <move_window>
 80064a6:	4603      	mov	r3, r0
 80064a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80064aa:	7ffb      	ldrb	r3, [r7, #31]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d17a      	bne.n	80065a6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064bc:	4413      	add	r3, r2
 80064be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d003      	beq.n	80064d2 <put_fat+0xf0>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	091b      	lsrs	r3, r3, #4
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	e00e      	b.n	80064f0 <put_fat+0x10e>
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	b25b      	sxtb	r3, r3
 80064d8:	f023 030f 	bic.w	r3, r3, #15
 80064dc:	b25a      	sxtb	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	0a1b      	lsrs	r3, r3, #8
 80064e2:	b25b      	sxtb	r3, r3
 80064e4:	f003 030f 	and.w	r3, r3, #15
 80064e8:	b25b      	sxtb	r3, r3
 80064ea:	4313      	orrs	r3, r2
 80064ec:	b25b      	sxtb	r3, r3
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2201      	movs	r2, #1
 80064f8:	70da      	strb	r2, [r3, #3]
			break;
 80064fa:	e059      	b.n	80065b0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	0a1b      	lsrs	r3, r3, #8
 8006504:	4413      	add	r3, r2
 8006506:	4619      	mov	r1, r3
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f7ff fe07 	bl	800611c <move_window>
 800650e:	4603      	mov	r3, r0
 8006510:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006512:	7ffb      	ldrb	r3, [r7, #31]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d148      	bne.n	80065aa <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	005b      	lsls	r3, r3, #1
 8006522:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006526:	4413      	add	r3, r2
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	b292      	uxth	r2, r2
 800652c:	4611      	mov	r1, r2
 800652e:	4618      	mov	r0, r3
 8006530:	f7ff fb7f 	bl	8005c32 <st_word>
			fs->wflag = 1;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2201      	movs	r2, #1
 8006538:	70da      	strb	r2, [r3, #3]
			break;
 800653a:	e039      	b.n	80065b0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	09db      	lsrs	r3, r3, #7
 8006544:	4413      	add	r3, r2
 8006546:	4619      	mov	r1, r3
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f7ff fde7 	bl	800611c <move_window>
 800654e:	4603      	mov	r3, r0
 8006550:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006552:	7ffb      	ldrb	r3, [r7, #31]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d12a      	bne.n	80065ae <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800656c:	4413      	add	r3, r2
 800656e:	4618      	mov	r0, r3
 8006570:	f7ff fb3c 	bl	8005bec <ld_dword>
 8006574:	4603      	mov	r3, r0
 8006576:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800657a:	4323      	orrs	r3, r4
 800657c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800658c:	4413      	add	r3, r2
 800658e:	6879      	ldr	r1, [r7, #4]
 8006590:	4618      	mov	r0, r3
 8006592:	f7ff fb69 	bl	8005c68 <st_dword>
			fs->wflag = 1;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2201      	movs	r2, #1
 800659a:	70da      	strb	r2, [r3, #3]
			break;
 800659c:	e008      	b.n	80065b0 <put_fat+0x1ce>
		}
	}
 800659e:	bf00      	nop
 80065a0:	e006      	b.n	80065b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80065a2:	bf00      	nop
 80065a4:	e004      	b.n	80065b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80065a6:	bf00      	nop
 80065a8:	e002      	b.n	80065b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80065aa:	bf00      	nop
 80065ac:	e000      	b.n	80065b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80065ae:	bf00      	nop
	return res;
 80065b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3724      	adds	r7, #36	; 0x24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd90      	pop	{r4, r7, pc}

080065ba <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b088      	sub	sp, #32
 80065be:	af00      	add	r7, sp, #0
 80065c0:	60f8      	str	r0, [r7, #12]
 80065c2:	60b9      	str	r1, [r7, #8]
 80065c4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80065c6:	2300      	movs	r3, #0
 80065c8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d904      	bls.n	80065e0 <remove_chain+0x26>
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d301      	bcc.n	80065e4 <remove_chain+0x2a>
 80065e0:	2302      	movs	r3, #2
 80065e2:	e04b      	b.n	800667c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00c      	beq.n	8006604 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80065ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065ee:	6879      	ldr	r1, [r7, #4]
 80065f0:	69b8      	ldr	r0, [r7, #24]
 80065f2:	f7ff fef6 	bl	80063e2 <put_fat>
 80065f6:	4603      	mov	r3, r0
 80065f8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80065fa:	7ffb      	ldrb	r3, [r7, #31]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <remove_chain+0x4a>
 8006600:	7ffb      	ldrb	r3, [r7, #31]
 8006602:	e03b      	b.n	800667c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006604:	68b9      	ldr	r1, [r7, #8]
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f7ff fe43 	bl	8006292 <get_fat>
 800660c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d031      	beq.n	8006678 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d101      	bne.n	800661e <remove_chain+0x64>
 800661a:	2302      	movs	r3, #2
 800661c:	e02e      	b.n	800667c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006624:	d101      	bne.n	800662a <remove_chain+0x70>
 8006626:	2301      	movs	r3, #1
 8006628:	e028      	b.n	800667c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800662a:	2200      	movs	r2, #0
 800662c:	68b9      	ldr	r1, [r7, #8]
 800662e:	69b8      	ldr	r0, [r7, #24]
 8006630:	f7ff fed7 	bl	80063e2 <put_fat>
 8006634:	4603      	mov	r3, r0
 8006636:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006638:	7ffb      	ldrb	r3, [r7, #31]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d001      	beq.n	8006642 <remove_chain+0x88>
 800663e:	7ffb      	ldrb	r3, [r7, #31]
 8006640:	e01c      	b.n	800667c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	695a      	ldr	r2, [r3, #20]
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	3b02      	subs	r3, #2
 800664c:	429a      	cmp	r2, r3
 800664e:	d20b      	bcs.n	8006668 <remove_chain+0xae>
			fs->free_clst++;
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	1c5a      	adds	r2, r3, #1
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	791b      	ldrb	r3, [r3, #4]
 800665e:	f043 0301 	orr.w	r3, r3, #1
 8006662:	b2da      	uxtb	r2, r3
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	429a      	cmp	r2, r3
 8006674:	d3c6      	bcc.n	8006604 <remove_chain+0x4a>
 8006676:	e000      	b.n	800667a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006678:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3720      	adds	r7, #32
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b088      	sub	sp, #32
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10d      	bne.n	80066b6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d004      	beq.n	80066b0 <create_chain+0x2c>
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	69ba      	ldr	r2, [r7, #24]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d31b      	bcc.n	80066e8 <create_chain+0x64>
 80066b0:	2301      	movs	r3, #1
 80066b2:	61bb      	str	r3, [r7, #24]
 80066b4:	e018      	b.n	80066e8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80066b6:	6839      	ldr	r1, [r7, #0]
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7ff fdea 	bl	8006292 <get_fat>
 80066be:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d801      	bhi.n	80066ca <create_chain+0x46>
 80066c6:	2301      	movs	r3, #1
 80066c8:	e070      	b.n	80067ac <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066d0:	d101      	bne.n	80066d6 <create_chain+0x52>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	e06a      	b.n	80067ac <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d201      	bcs.n	80066e4 <create_chain+0x60>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	e063      	b.n	80067ac <create_chain+0x128>
		scl = clst;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	3301      	adds	r3, #1
 80066f0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	69fa      	ldr	r2, [r7, #28]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d307      	bcc.n	800670c <create_chain+0x88>
				ncl = 2;
 80066fc:	2302      	movs	r3, #2
 80066fe:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006700:	69fa      	ldr	r2, [r7, #28]
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	429a      	cmp	r2, r3
 8006706:	d901      	bls.n	800670c <create_chain+0x88>
 8006708:	2300      	movs	r3, #0
 800670a:	e04f      	b.n	80067ac <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800670c:	69f9      	ldr	r1, [r7, #28]
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f7ff fdbf 	bl	8006292 <get_fat>
 8006714:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00e      	beq.n	800673a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d003      	beq.n	800672a <create_chain+0xa6>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006728:	d101      	bne.n	800672e <create_chain+0xaa>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	e03e      	b.n	80067ac <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800672e:	69fa      	ldr	r2, [r7, #28]
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	429a      	cmp	r2, r3
 8006734:	d1da      	bne.n	80066ec <create_chain+0x68>
 8006736:	2300      	movs	r3, #0
 8006738:	e038      	b.n	80067ac <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800673a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800673c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006740:	69f9      	ldr	r1, [r7, #28]
 8006742:	6938      	ldr	r0, [r7, #16]
 8006744:	f7ff fe4d 	bl	80063e2 <put_fat>
 8006748:	4603      	mov	r3, r0
 800674a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800674c:	7dfb      	ldrb	r3, [r7, #23]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d109      	bne.n	8006766 <create_chain+0xe2>
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d006      	beq.n	8006766 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006758:	69fa      	ldr	r2, [r7, #28]
 800675a:	6839      	ldr	r1, [r7, #0]
 800675c:	6938      	ldr	r0, [r7, #16]
 800675e:	f7ff fe40 	bl	80063e2 <put_fat>
 8006762:	4603      	mov	r3, r0
 8006764:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006766:	7dfb      	ldrb	r3, [r7, #23]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d116      	bne.n	800679a <create_chain+0x116>
		fs->last_clst = ncl;
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	69fa      	ldr	r2, [r7, #28]
 8006770:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	695a      	ldr	r2, [r3, #20]
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	3b02      	subs	r3, #2
 800677c:	429a      	cmp	r2, r3
 800677e:	d804      	bhi.n	800678a <create_chain+0x106>
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	695b      	ldr	r3, [r3, #20]
 8006784:	1e5a      	subs	r2, r3, #1
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	791b      	ldrb	r3, [r3, #4]
 800678e:	f043 0301 	orr.w	r3, r3, #1
 8006792:	b2da      	uxtb	r2, r3
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	711a      	strb	r2, [r3, #4]
 8006798:	e007      	b.n	80067aa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800679a:	7dfb      	ldrb	r3, [r7, #23]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d102      	bne.n	80067a6 <create_chain+0x122>
 80067a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067a4:	e000      	b.n	80067a8 <create_chain+0x124>
 80067a6:	2301      	movs	r3, #1
 80067a8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80067aa:	69fb      	ldr	r3, [r7, #28]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3720      	adds	r7, #32
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b087      	sub	sp, #28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c8:	3304      	adds	r3, #4
 80067ca:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	0a5b      	lsrs	r3, r3, #9
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	8952      	ldrh	r2, [r2, #10]
 80067d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80067d8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	1d1a      	adds	r2, r3, #4
 80067de:	613a      	str	r2, [r7, #16]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <clmt_clust+0x3a>
 80067ea:	2300      	movs	r3, #0
 80067ec:	e010      	b.n	8006810 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d307      	bcc.n	8006806 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	617b      	str	r3, [r7, #20]
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	3304      	adds	r3, #4
 8006802:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006804:	e7e9      	b.n	80067da <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006806:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	4413      	add	r3, r2
}
 8006810:	4618      	mov	r0, r3
 8006812:	371c      	adds	r7, #28
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006832:	d204      	bcs.n	800683e <dir_sdi+0x22>
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	f003 031f 	and.w	r3, r3, #31
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <dir_sdi+0x26>
		return FR_INT_ERR;
 800683e:	2302      	movs	r3, #2
 8006840:	e063      	b.n	800690a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d106      	bne.n	8006862 <dir_sdi+0x46>
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	2b02      	cmp	r3, #2
 800685a:	d902      	bls.n	8006862 <dir_sdi+0x46>
		clst = fs->dirbase;
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006860:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10c      	bne.n	8006882 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	095b      	lsrs	r3, r3, #5
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	8912      	ldrh	r2, [r2, #8]
 8006870:	4293      	cmp	r3, r2
 8006872:	d301      	bcc.n	8006878 <dir_sdi+0x5c>
 8006874:	2302      	movs	r3, #2
 8006876:	e048      	b.n	800690a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	61da      	str	r2, [r3, #28]
 8006880:	e029      	b.n	80068d6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	895b      	ldrh	r3, [r3, #10]
 8006886:	025b      	lsls	r3, r3, #9
 8006888:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800688a:	e019      	b.n	80068c0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6979      	ldr	r1, [r7, #20]
 8006890:	4618      	mov	r0, r3
 8006892:	f7ff fcfe 	bl	8006292 <get_fat>
 8006896:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800689e:	d101      	bne.n	80068a4 <dir_sdi+0x88>
 80068a0:	2301      	movs	r3, #1
 80068a2:	e032      	b.n	800690a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d904      	bls.n	80068b4 <dir_sdi+0x98>
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d301      	bcc.n	80068b8 <dir_sdi+0x9c>
 80068b4:	2302      	movs	r3, #2
 80068b6:	e028      	b.n	800690a <dir_sdi+0xee>
			ofs -= csz;
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d2e1      	bcs.n	800688c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80068c8:	6979      	ldr	r1, [r7, #20]
 80068ca:	6938      	ldr	r0, [r7, #16]
 80068cc:	f7ff fcc2 	bl	8006254 <clust2sect>
 80068d0:	4602      	mov	r2, r0
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	69db      	ldr	r3, [r3, #28]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <dir_sdi+0xcc>
 80068e4:	2302      	movs	r3, #2
 80068e6:	e010      	b.n	800690a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	69da      	ldr	r2, [r3, #28]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	0a5b      	lsrs	r3, r3, #9
 80068f0:	441a      	add	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006902:	441a      	add	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3718      	adds	r7, #24
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b086      	sub	sp, #24
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
 800691a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	3320      	adds	r3, #32
 8006928:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d003      	beq.n	800693a <dir_next+0x28>
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006938:	d301      	bcc.n	800693e <dir_next+0x2c>
 800693a:	2304      	movs	r3, #4
 800693c:	e0aa      	b.n	8006a94 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006944:	2b00      	cmp	r3, #0
 8006946:	f040 8098 	bne.w	8006a7a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	1c5a      	adds	r2, r3, #1
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10b      	bne.n	8006974 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	095b      	lsrs	r3, r3, #5
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	8912      	ldrh	r2, [r2, #8]
 8006964:	4293      	cmp	r3, r2
 8006966:	f0c0 8088 	bcc.w	8006a7a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	61da      	str	r2, [r3, #28]
 8006970:	2304      	movs	r3, #4
 8006972:	e08f      	b.n	8006a94 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	0a5b      	lsrs	r3, r3, #9
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	8952      	ldrh	r2, [r2, #10]
 800697c:	3a01      	subs	r2, #1
 800697e:	4013      	ands	r3, r2
 8006980:	2b00      	cmp	r3, #0
 8006982:	d17a      	bne.n	8006a7a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	4619      	mov	r1, r3
 800698c:	4610      	mov	r0, r2
 800698e:	f7ff fc80 	bl	8006292 <get_fat>
 8006992:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d801      	bhi.n	800699e <dir_next+0x8c>
 800699a:	2302      	movs	r3, #2
 800699c:	e07a      	b.n	8006a94 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069a4:	d101      	bne.n	80069aa <dir_next+0x98>
 80069a6:	2301      	movs	r3, #1
 80069a8:	e074      	b.n	8006a94 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d358      	bcc.n	8006a66 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d104      	bne.n	80069c4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	61da      	str	r2, [r3, #28]
 80069c0:	2304      	movs	r3, #4
 80069c2:	e067      	b.n	8006a94 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	4619      	mov	r1, r3
 80069cc:	4610      	mov	r0, r2
 80069ce:	f7ff fe59 	bl	8006684 <create_chain>
 80069d2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <dir_next+0xcc>
 80069da:	2307      	movs	r3, #7
 80069dc:	e05a      	b.n	8006a94 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d101      	bne.n	80069e8 <dir_next+0xd6>
 80069e4:	2302      	movs	r3, #2
 80069e6:	e055      	b.n	8006a94 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069ee:	d101      	bne.n	80069f4 <dir_next+0xe2>
 80069f0:	2301      	movs	r3, #1
 80069f2:	e04f      	b.n	8006a94 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f7ff fb4d 	bl	8006094 <sync_window>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <dir_next+0xf2>
 8006a00:	2301      	movs	r3, #1
 8006a02:	e047      	b.n	8006a94 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	3334      	adds	r3, #52	; 0x34
 8006a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7ff f977 	bl	8005d02 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006a14:	2300      	movs	r3, #0
 8006a16:	613b      	str	r3, [r7, #16]
 8006a18:	6979      	ldr	r1, [r7, #20]
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f7ff fc1a 	bl	8006254 <clust2sect>
 8006a20:	4602      	mov	r2, r0
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	631a      	str	r2, [r3, #48]	; 0x30
 8006a26:	e012      	b.n	8006a4e <dir_next+0x13c>
						fs->wflag = 1;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f7ff fb30 	bl	8006094 <sync_window>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d001      	beq.n	8006a3e <dir_next+0x12c>
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e02a      	b.n	8006a94 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	3301      	adds	r3, #1
 8006a42:	613b      	str	r3, [r7, #16]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a48:	1c5a      	adds	r2, r3, #1
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	631a      	str	r2, [r3, #48]	; 0x30
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	895b      	ldrh	r3, [r3, #10]
 8006a52:	461a      	mov	r2, r3
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d3e6      	bcc.n	8006a28 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	1ad2      	subs	r2, r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006a6c:	6979      	ldr	r1, [r7, #20]
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f7ff fbf0 	bl	8006254 <clust2sect>
 8006a74:	4602      	mov	r2, r0
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a8c:	441a      	add	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3718      	adds	r7, #24
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006aac:	2100      	movs	r1, #0
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7ff feb4 	bl	800681c <dir_sdi>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006ab8:	7dfb      	ldrb	r3, [r7, #23]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d12b      	bne.n	8006b16 <dir_alloc+0x7a>
		n = 0;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	69db      	ldr	r3, [r3, #28]
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f7ff fb27 	bl	800611c <move_window>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006ad2:	7dfb      	ldrb	r3, [r7, #23]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d11d      	bne.n	8006b14 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a1b      	ldr	r3, [r3, #32]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	2be5      	cmp	r3, #229	; 0xe5
 8006ae0:	d004      	beq.n	8006aec <dir_alloc+0x50>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d107      	bne.n	8006afc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	3301      	adds	r3, #1
 8006af0:	613b      	str	r3, [r7, #16]
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d102      	bne.n	8006b00 <dir_alloc+0x64>
 8006afa:	e00c      	b.n	8006b16 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006afc:	2300      	movs	r3, #0
 8006afe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006b00:	2101      	movs	r1, #1
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7ff ff05 	bl	8006912 <dir_next>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006b0c:	7dfb      	ldrb	r3, [r7, #23]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d0d7      	beq.n	8006ac2 <dir_alloc+0x26>
 8006b12:	e000      	b.n	8006b16 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006b14:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006b16:	7dfb      	ldrb	r3, [r7, #23]
 8006b18:	2b04      	cmp	r3, #4
 8006b1a:	d101      	bne.n	8006b20 <dir_alloc+0x84>
 8006b1c:	2307      	movs	r3, #7
 8006b1e:	75fb      	strb	r3, [r7, #23]
	return res;
 8006b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3718      	adds	r7, #24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b084      	sub	sp, #16
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	331a      	adds	r3, #26
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7ff f83f 	bl	8005bbc <ld_word>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	2b03      	cmp	r3, #3
 8006b48:	d109      	bne.n	8006b5e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	3314      	adds	r3, #20
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7ff f834 	bl	8005bbc <ld_word>
 8006b54:	4603      	mov	r3, r0
 8006b56:	041b      	lsls	r3, r3, #16
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	331a      	adds	r3, #26
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	b292      	uxth	r2, r2
 8006b7c:	4611      	mov	r1, r2
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7ff f857 	bl	8005c32 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	2b03      	cmp	r3, #3
 8006b8a:	d109      	bne.n	8006ba0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	f103 0214 	add.w	r2, r3, #20
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	0c1b      	lsrs	r3, r3, #16
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	4619      	mov	r1, r3
 8006b9a:	4610      	mov	r0, r2
 8006b9c:	f7ff f849 	bl	8005c32 <st_word>
	}
}
 8006ba0:	bf00      	nop
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006ba8:	b590      	push	{r4, r7, lr}
 8006baa:	b087      	sub	sp, #28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	331a      	adds	r3, #26
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7ff f800 	bl	8005bbc <ld_word>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d001      	beq.n	8006bc6 <cmp_lfn+0x1e>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	e059      	b.n	8006c7a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bce:	1e5a      	subs	r2, r3, #1
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	005b      	lsls	r3, r3, #1
 8006bd4:	4413      	add	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006bdc:	2301      	movs	r3, #1
 8006bde:	81fb      	strh	r3, [r7, #14]
 8006be0:	2300      	movs	r3, #0
 8006be2:	613b      	str	r3, [r7, #16]
 8006be4:	e033      	b.n	8006c4e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006be6:	4a27      	ldr	r2, [pc, #156]	; (8006c84 <cmp_lfn+0xdc>)
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	4413      	add	r3, r2
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7fe ffe1 	bl	8005bbc <ld_word>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006bfe:	89fb      	ldrh	r3, [r7, #14]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d01a      	beq.n	8006c3a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	2bfe      	cmp	r3, #254	; 0xfe
 8006c08:	d812      	bhi.n	8006c30 <cmp_lfn+0x88>
 8006c0a:	89bb      	ldrh	r3, [r7, #12]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f002 fb6f 	bl	80092f0 <ff_wtoupper>
 8006c12:	4603      	mov	r3, r0
 8006c14:	461c      	mov	r4, r3
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	1c5a      	adds	r2, r3, #1
 8006c1a:	617a      	str	r2, [r7, #20]
 8006c1c:	005b      	lsls	r3, r3, #1
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	4413      	add	r3, r2
 8006c22:	881b      	ldrh	r3, [r3, #0]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f002 fb63 	bl	80092f0 <ff_wtoupper>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	429c      	cmp	r4, r3
 8006c2e:	d001      	beq.n	8006c34 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006c30:	2300      	movs	r3, #0
 8006c32:	e022      	b.n	8006c7a <cmp_lfn+0xd2>
			}
			wc = uc;
 8006c34:	89bb      	ldrh	r3, [r7, #12]
 8006c36:	81fb      	strh	r3, [r7, #14]
 8006c38:	e006      	b.n	8006c48 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006c3a:	89bb      	ldrh	r3, [r7, #12]
 8006c3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d001      	beq.n	8006c48 <cmp_lfn+0xa0>
 8006c44:	2300      	movs	r3, #0
 8006c46:	e018      	b.n	8006c7a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	613b      	str	r3, [r7, #16]
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	2b0c      	cmp	r3, #12
 8006c52:	d9c8      	bls.n	8006be6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00b      	beq.n	8006c78 <cmp_lfn+0xd0>
 8006c60:	89fb      	ldrh	r3, [r7, #14]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d008      	beq.n	8006c78 <cmp_lfn+0xd0>
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	005b      	lsls	r3, r3, #1
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d001      	beq.n	8006c78 <cmp_lfn+0xd0>
 8006c74:	2300      	movs	r3, #0
 8006c76:	e000      	b.n	8006c7a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006c78:	2301      	movs	r3, #1
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	371c      	adds	r7, #28
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd90      	pop	{r4, r7, pc}
 8006c82:	bf00      	nop
 8006c84:	08009e80 	.word	0x08009e80

08006c88 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b088      	sub	sp, #32
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	4611      	mov	r1, r2
 8006c94:	461a      	mov	r2, r3
 8006c96:	460b      	mov	r3, r1
 8006c98:	71fb      	strb	r3, [r7, #7]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	330d      	adds	r3, #13
 8006ca2:	79ba      	ldrb	r2, [r7, #6]
 8006ca4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	330b      	adds	r3, #11
 8006caa:	220f      	movs	r2, #15
 8006cac:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	330c      	adds	r3, #12
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	331a      	adds	r3, #26
 8006cba:	2100      	movs	r1, #0
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7fe ffb8 	bl	8005c32 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006cc2:	79fb      	ldrb	r3, [r7, #7]
 8006cc4:	1e5a      	subs	r2, r3, #1
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	4413      	add	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	82fb      	strh	r3, [r7, #22]
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006cda:	8afb      	ldrh	r3, [r7, #22]
 8006cdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d007      	beq.n	8006cf4 <put_lfn+0x6c>
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	1c5a      	adds	r2, r3, #1
 8006ce8:	61fa      	str	r2, [r7, #28]
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	4413      	add	r3, r2
 8006cf0:	881b      	ldrh	r3, [r3, #0]
 8006cf2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006cf4:	4a17      	ldr	r2, [pc, #92]	; (8006d54 <put_lfn+0xcc>)
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	4413      	add	r3, r2
 8006d02:	8afa      	ldrh	r2, [r7, #22]
 8006d04:	4611      	mov	r1, r2
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fe ff93 	bl	8005c32 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006d0c:	8afb      	ldrh	r3, [r7, #22]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d102      	bne.n	8006d18 <put_lfn+0x90>
 8006d12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d16:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	61bb      	str	r3, [r7, #24]
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	2b0c      	cmp	r3, #12
 8006d22:	d9da      	bls.n	8006cda <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006d24:	8afb      	ldrh	r3, [r7, #22]
 8006d26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d006      	beq.n	8006d3c <put_lfn+0xb4>
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	005b      	lsls	r3, r3, #1
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	4413      	add	r3, r2
 8006d36:	881b      	ldrh	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d103      	bne.n	8006d44 <put_lfn+0xbc>
 8006d3c:	79fb      	ldrb	r3, [r7, #7]
 8006d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d42:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	79fa      	ldrb	r2, [r7, #7]
 8006d48:	701a      	strb	r2, [r3, #0]
}
 8006d4a:	bf00      	nop
 8006d4c:	3720      	adds	r7, #32
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	08009e80 	.word	0x08009e80

08006d58 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b08c      	sub	sp, #48	; 0x30
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
 8006d64:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006d66:	220b      	movs	r2, #11
 8006d68:	68b9      	ldr	r1, [r7, #8]
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f7fe ffa8 	bl	8005cc0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	2b05      	cmp	r3, #5
 8006d74:	d929      	bls.n	8006dca <gen_numname+0x72>
		sr = seq;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006d7a:	e020      	b.n	8006dbe <gen_numname+0x66>
			wc = *lfn++;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	1c9a      	adds	r2, r3, #2
 8006d80:	607a      	str	r2, [r7, #4]
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006d86:	2300      	movs	r3, #0
 8006d88:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d8a:	e015      	b.n	8006db8 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	005a      	lsls	r2, r3, #1
 8006d90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	4413      	add	r3, r2
 8006d98:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006d9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d9c:	085b      	lsrs	r3, r3, #1
 8006d9e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d003      	beq.n	8006db2 <gen_numname+0x5a>
 8006daa:	69fa      	ldr	r2, [r7, #28]
 8006dac:	4b30      	ldr	r3, [pc, #192]	; (8006e70 <gen_numname+0x118>)
 8006dae:	4053      	eors	r3, r2
 8006db0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db4:	3301      	adds	r3, #1
 8006db6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dba:	2b0f      	cmp	r3, #15
 8006dbc:	d9e6      	bls.n	8006d8c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	881b      	ldrh	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1da      	bne.n	8006d7c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006dca:	2307      	movs	r3, #7
 8006dcc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	f003 030f 	and.w	r3, r3, #15
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	3330      	adds	r3, #48	; 0x30
 8006dda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006dde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006de2:	2b39      	cmp	r3, #57	; 0x39
 8006de4:	d904      	bls.n	8006df0 <gen_numname+0x98>
 8006de6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006dea:	3307      	adds	r3, #7
 8006dec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df2:	1e5a      	subs	r2, r3, #1
 8006df4:	62ba      	str	r2, [r7, #40]	; 0x28
 8006df6:	3330      	adds	r3, #48	; 0x30
 8006df8:	443b      	add	r3, r7
 8006dfa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006dfe:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	091b      	lsrs	r3, r3, #4
 8006e06:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1df      	bne.n	8006dce <gen_numname+0x76>
	ns[i] = '~';
 8006e0e:	f107 0214 	add.w	r2, r7, #20
 8006e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e14:	4413      	add	r3, r2
 8006e16:	227e      	movs	r2, #126	; 0x7e
 8006e18:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e1e:	e002      	b.n	8006e26 <gen_numname+0xce>
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	3301      	adds	r3, #1
 8006e24:	627b      	str	r3, [r7, #36]	; 0x24
 8006e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d205      	bcs.n	8006e3a <gen_numname+0xe2>
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e32:	4413      	add	r3, r2
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	2b20      	cmp	r3, #32
 8006e38:	d1f2      	bne.n	8006e20 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3c:	2b07      	cmp	r3, #7
 8006e3e:	d807      	bhi.n	8006e50 <gen_numname+0xf8>
 8006e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e42:	1c5a      	adds	r2, r3, #1
 8006e44:	62ba      	str	r2, [r7, #40]	; 0x28
 8006e46:	3330      	adds	r3, #48	; 0x30
 8006e48:	443b      	add	r3, r7
 8006e4a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006e4e:	e000      	b.n	8006e52 <gen_numname+0xfa>
 8006e50:	2120      	movs	r1, #32
 8006e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e54:	1c5a      	adds	r2, r3, #1
 8006e56:	627a      	str	r2, [r7, #36]	; 0x24
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	460a      	mov	r2, r1
 8006e5e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	2b07      	cmp	r3, #7
 8006e64:	d9e9      	bls.n	8006e3a <gen_numname+0xe2>
}
 8006e66:	bf00      	nop
 8006e68:	bf00      	nop
 8006e6a:	3730      	adds	r7, #48	; 0x30
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	00011021 	.word	0x00011021

08006e74 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006e80:	230b      	movs	r3, #11
 8006e82:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	0852      	lsrs	r2, r2, #1
 8006e8a:	01db      	lsls	r3, r3, #7
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	1c59      	adds	r1, r3, #1
 8006e94:	6079      	str	r1, [r7, #4]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	4413      	add	r3, r2
 8006e9a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	60bb      	str	r3, [r7, #8]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d1ed      	bne.n	8006e84 <sum_sfn+0x10>
	return sum;
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3714      	adds	r7, #20
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b086      	sub	sp, #24
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7ff fca8 	bl	800681c <dir_sdi>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006ed0:	7dfb      	ldrb	r3, [r7, #23]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d001      	beq.n	8006eda <dir_find+0x24>
 8006ed6:	7dfb      	ldrb	r3, [r7, #23]
 8006ed8:	e0a9      	b.n	800702e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006eda:	23ff      	movs	r3, #255	; 0xff
 8006edc:	753b      	strb	r3, [r7, #20]
 8006ede:	7d3b      	ldrb	r3, [r7, #20]
 8006ee0:	757b      	strb	r3, [r7, #21]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ee8:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	69db      	ldr	r3, [r3, #28]
 8006eee:	4619      	mov	r1, r3
 8006ef0:	6938      	ldr	r0, [r7, #16]
 8006ef2:	f7ff f913 	bl	800611c <move_window>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006efa:	7dfb      	ldrb	r3, [r7, #23]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f040 8090 	bne.w	8007022 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006f0a:	7dbb      	ldrb	r3, [r7, #22]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d102      	bne.n	8006f16 <dir_find+0x60>
 8006f10:	2304      	movs	r3, #4
 8006f12:	75fb      	strb	r3, [r7, #23]
 8006f14:	e08a      	b.n	800702c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	330b      	adds	r3, #11
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f22:	73fb      	strb	r3, [r7, #15]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	7bfa      	ldrb	r2, [r7, #15]
 8006f28:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006f2a:	7dbb      	ldrb	r3, [r7, #22]
 8006f2c:	2be5      	cmp	r3, #229	; 0xe5
 8006f2e:	d007      	beq.n	8006f40 <dir_find+0x8a>
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
 8006f32:	f003 0308 	and.w	r3, r3, #8
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d009      	beq.n	8006f4e <dir_find+0x98>
 8006f3a:	7bfb      	ldrb	r3, [r7, #15]
 8006f3c:	2b0f      	cmp	r3, #15
 8006f3e:	d006      	beq.n	8006f4e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006f40:	23ff      	movs	r3, #255	; 0xff
 8006f42:	757b      	strb	r3, [r7, #21]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f4a:	631a      	str	r2, [r3, #48]	; 0x30
 8006f4c:	e05e      	b.n	800700c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006f4e:	7bfb      	ldrb	r3, [r7, #15]
 8006f50:	2b0f      	cmp	r3, #15
 8006f52:	d136      	bne.n	8006fc2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d154      	bne.n	800700c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006f62:	7dbb      	ldrb	r3, [r7, #22]
 8006f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00d      	beq.n	8006f88 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
 8006f70:	7b5b      	ldrb	r3, [r3, #13]
 8006f72:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006f74:	7dbb      	ldrb	r3, [r7, #22]
 8006f76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f7a:	75bb      	strb	r3, [r7, #22]
 8006f7c:	7dbb      	ldrb	r3, [r7, #22]
 8006f7e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	695a      	ldr	r2, [r3, #20]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006f88:	7dba      	ldrb	r2, [r7, #22]
 8006f8a:	7d7b      	ldrb	r3, [r7, #21]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d115      	bne.n	8006fbc <dir_find+0x106>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a1b      	ldr	r3, [r3, #32]
 8006f94:	330d      	adds	r3, #13
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	7d3a      	ldrb	r2, [r7, #20]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d10e      	bne.n	8006fbc <dir_find+0x106>
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	68da      	ldr	r2, [r3, #12]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	4610      	mov	r0, r2
 8006faa:	f7ff fdfd 	bl	8006ba8 <cmp_lfn>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d003      	beq.n	8006fbc <dir_find+0x106>
 8006fb4:	7d7b      	ldrb	r3, [r7, #21]
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	e000      	b.n	8006fbe <dir_find+0x108>
 8006fbc:	23ff      	movs	r3, #255	; 0xff
 8006fbe:	757b      	strb	r3, [r7, #21]
 8006fc0:	e024      	b.n	800700c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006fc2:	7d7b      	ldrb	r3, [r7, #21]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d109      	bne.n	8006fdc <dir_find+0x126>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a1b      	ldr	r3, [r3, #32]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7ff ff51 	bl	8006e74 <sum_sfn>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	7d3b      	ldrb	r3, [r7, #20]
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d024      	beq.n	8007026 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10a      	bne.n	8007000 <dir_find+0x14a>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a18      	ldr	r0, [r3, #32]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	3324      	adds	r3, #36	; 0x24
 8006ff2:	220b      	movs	r2, #11
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	f7fe fe9f 	bl	8005d38 <mem_cmp>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d014      	beq.n	800702a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007000:	23ff      	movs	r3, #255	; 0xff
 8007002:	757b      	strb	r3, [r7, #21]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800700a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800700c:	2100      	movs	r1, #0
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7ff fc7f 	bl	8006912 <dir_next>
 8007014:	4603      	mov	r3, r0
 8007016:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007018:	7dfb      	ldrb	r3, [r7, #23]
 800701a:	2b00      	cmp	r3, #0
 800701c:	f43f af65 	beq.w	8006eea <dir_find+0x34>
 8007020:	e004      	b.n	800702c <dir_find+0x176>
		if (res != FR_OK) break;
 8007022:	bf00      	nop
 8007024:	e002      	b.n	800702c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007026:	bf00      	nop
 8007028:	e000      	b.n	800702c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800702a:	bf00      	nop

	return res;
 800702c:	7dfb      	ldrb	r3, [r7, #23]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3718      	adds	r7, #24
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
	...

08007038 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b08c      	sub	sp, #48	; 0x30
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800704c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d001      	beq.n	8007058 <dir_register+0x20>
 8007054:	2306      	movs	r3, #6
 8007056:	e0e0      	b.n	800721a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007058:	2300      	movs	r3, #0
 800705a:	627b      	str	r3, [r7, #36]	; 0x24
 800705c:	e002      	b.n	8007064 <dir_register+0x2c>
 800705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007060:	3301      	adds	r3, #1
 8007062:	627b      	str	r3, [r7, #36]	; 0x24
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	68da      	ldr	r2, [r3, #12]
 8007068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706a:	005b      	lsls	r3, r3, #1
 800706c:	4413      	add	r3, r2
 800706e:	881b      	ldrh	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1f4      	bne.n	800705e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800707a:	f107 030c 	add.w	r3, r7, #12
 800707e:	220c      	movs	r2, #12
 8007080:	4618      	mov	r0, r3
 8007082:	f7fe fe1d 	bl	8005cc0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007086:	7dfb      	ldrb	r3, [r7, #23]
 8007088:	f003 0301 	and.w	r3, r3, #1
 800708c:	2b00      	cmp	r3, #0
 800708e:	d032      	beq.n	80070f6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2240      	movs	r2, #64	; 0x40
 8007094:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8007098:	2301      	movs	r3, #1
 800709a:	62bb      	str	r3, [r7, #40]	; 0x28
 800709c:	e016      	b.n	80070cc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	68da      	ldr	r2, [r3, #12]
 80070a8:	f107 010c 	add.w	r1, r7, #12
 80070ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ae:	f7ff fe53 	bl	8006d58 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7ff feff 	bl	8006eb6 <dir_find>
 80070b8:	4603      	mov	r3, r0
 80070ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80070be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d106      	bne.n	80070d4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80070c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c8:	3301      	adds	r3, #1
 80070ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80070cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ce:	2b63      	cmp	r3, #99	; 0x63
 80070d0:	d9e5      	bls.n	800709e <dir_register+0x66>
 80070d2:	e000      	b.n	80070d6 <dir_register+0x9e>
			if (res != FR_OK) break;
 80070d4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80070d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d8:	2b64      	cmp	r3, #100	; 0x64
 80070da:	d101      	bne.n	80070e0 <dir_register+0xa8>
 80070dc:	2307      	movs	r3, #7
 80070de:	e09c      	b.n	800721a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80070e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070e4:	2b04      	cmp	r3, #4
 80070e6:	d002      	beq.n	80070ee <dir_register+0xb6>
 80070e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070ec:	e095      	b.n	800721a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80070ee:	7dfa      	ldrb	r2, [r7, #23]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80070f6:	7dfb      	ldrb	r3, [r7, #23]
 80070f8:	f003 0302 	and.w	r3, r3, #2
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d007      	beq.n	8007110 <dir_register+0xd8>
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	330c      	adds	r3, #12
 8007104:	4a47      	ldr	r2, [pc, #284]	; (8007224 <dir_register+0x1ec>)
 8007106:	fba2 2303 	umull	r2, r3, r2, r3
 800710a:	089b      	lsrs	r3, r3, #2
 800710c:	3301      	adds	r3, #1
 800710e:	e000      	b.n	8007112 <dir_register+0xda>
 8007110:	2301      	movs	r3, #1
 8007112:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007114:	6a39      	ldr	r1, [r7, #32]
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7ff fcc0 	bl	8006a9c <dir_alloc>
 800711c:	4603      	mov	r3, r0
 800711e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007122:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007126:	2b00      	cmp	r3, #0
 8007128:	d148      	bne.n	80071bc <dir_register+0x184>
 800712a:	6a3b      	ldr	r3, [r7, #32]
 800712c:	3b01      	subs	r3, #1
 800712e:	623b      	str	r3, [r7, #32]
 8007130:	6a3b      	ldr	r3, [r7, #32]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d042      	beq.n	80071bc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	695a      	ldr	r2, [r3, #20]
 800713a:	6a3b      	ldr	r3, [r7, #32]
 800713c:	015b      	lsls	r3, r3, #5
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	4619      	mov	r1, r3
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7ff fb6a 	bl	800681c <dir_sdi>
 8007148:	4603      	mov	r3, r0
 800714a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800714e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007152:	2b00      	cmp	r3, #0
 8007154:	d132      	bne.n	80071bc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	3324      	adds	r3, #36	; 0x24
 800715a:	4618      	mov	r0, r3
 800715c:	f7ff fe8a 	bl	8006e74 <sum_sfn>
 8007160:	4603      	mov	r3, r0
 8007162:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	69db      	ldr	r3, [r3, #28]
 8007168:	4619      	mov	r1, r3
 800716a:	69f8      	ldr	r0, [r7, #28]
 800716c:	f7fe ffd6 	bl	800611c <move_window>
 8007170:	4603      	mov	r3, r0
 8007172:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8007176:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800717a:	2b00      	cmp	r3, #0
 800717c:	d11d      	bne.n	80071ba <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	68d8      	ldr	r0, [r3, #12]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a19      	ldr	r1, [r3, #32]
 8007186:	6a3b      	ldr	r3, [r7, #32]
 8007188:	b2da      	uxtb	r2, r3
 800718a:	7efb      	ldrb	r3, [r7, #27]
 800718c:	f7ff fd7c 	bl	8006c88 <put_lfn>
				fs->wflag = 1;
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	2201      	movs	r2, #1
 8007194:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007196:	2100      	movs	r1, #0
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7ff fbba 	bl	8006912 <dir_next>
 800719e:	4603      	mov	r3, r0
 80071a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80071a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d107      	bne.n	80071bc <dir_register+0x184>
 80071ac:	6a3b      	ldr	r3, [r7, #32]
 80071ae:	3b01      	subs	r3, #1
 80071b0:	623b      	str	r3, [r7, #32]
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1d5      	bne.n	8007164 <dir_register+0x12c>
 80071b8:	e000      	b.n	80071bc <dir_register+0x184>
				if (res != FR_OK) break;
 80071ba:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80071bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d128      	bne.n	8007216 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	69db      	ldr	r3, [r3, #28]
 80071c8:	4619      	mov	r1, r3
 80071ca:	69f8      	ldr	r0, [r7, #28]
 80071cc:	f7fe ffa6 	bl	800611c <move_window>
 80071d0:	4603      	mov	r3, r0
 80071d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80071d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d11b      	bne.n	8007216 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a1b      	ldr	r3, [r3, #32]
 80071e2:	2220      	movs	r2, #32
 80071e4:	2100      	movs	r1, #0
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7fe fd8b 	bl	8005d02 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a18      	ldr	r0, [r3, #32]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	3324      	adds	r3, #36	; 0x24
 80071f4:	220b      	movs	r2, #11
 80071f6:	4619      	mov	r1, r3
 80071f8:	f7fe fd62 	bl	8005cc0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	330c      	adds	r3, #12
 8007208:	f002 0218 	and.w	r2, r2, #24
 800720c:	b2d2      	uxtb	r2, r2
 800720e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	2201      	movs	r2, #1
 8007214:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007216:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800721a:	4618      	mov	r0, r3
 800721c:	3730      	adds	r7, #48	; 0x30
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	4ec4ec4f 	.word	0x4ec4ec4f

08007228 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b08a      	sub	sp, #40	; 0x28
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	613b      	str	r3, [r7, #16]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	60fb      	str	r3, [r7, #12]
 8007240:	2300      	movs	r3, #0
 8007242:	617b      	str	r3, [r7, #20]
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	1c5a      	adds	r2, r3, #1
 800724c:	61ba      	str	r2, [r7, #24]
 800724e:	693a      	ldr	r2, [r7, #16]
 8007250:	4413      	add	r3, r2
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007256:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007258:	2b1f      	cmp	r3, #31
 800725a:	d940      	bls.n	80072de <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800725c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800725e:	2b2f      	cmp	r3, #47	; 0x2f
 8007260:	d006      	beq.n	8007270 <create_name+0x48>
 8007262:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007264:	2b5c      	cmp	r3, #92	; 0x5c
 8007266:	d110      	bne.n	800728a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007268:	e002      	b.n	8007270 <create_name+0x48>
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	3301      	adds	r3, #1
 800726e:	61bb      	str	r3, [r7, #24]
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	4413      	add	r3, r2
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	2b2f      	cmp	r3, #47	; 0x2f
 800727a:	d0f6      	beq.n	800726a <create_name+0x42>
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	4413      	add	r3, r2
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	2b5c      	cmp	r3, #92	; 0x5c
 8007286:	d0f0      	beq.n	800726a <create_name+0x42>
			break;
 8007288:	e02a      	b.n	80072e0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	2bfe      	cmp	r3, #254	; 0xfe
 800728e:	d901      	bls.n	8007294 <create_name+0x6c>
 8007290:	2306      	movs	r3, #6
 8007292:	e17d      	b.n	8007590 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007294:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007296:	b2db      	uxtb	r3, r3
 8007298:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800729a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800729c:	2101      	movs	r1, #1
 800729e:	4618      	mov	r0, r3
 80072a0:	f001 ffea 	bl	8009278 <ff_convert>
 80072a4:	4603      	mov	r3, r0
 80072a6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80072a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d101      	bne.n	80072b2 <create_name+0x8a>
 80072ae:	2306      	movs	r3, #6
 80072b0:	e16e      	b.n	8007590 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80072b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072b4:	2b7f      	cmp	r3, #127	; 0x7f
 80072b6:	d809      	bhi.n	80072cc <create_name+0xa4>
 80072b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072ba:	4619      	mov	r1, r3
 80072bc:	488d      	ldr	r0, [pc, #564]	; (80074f4 <create_name+0x2cc>)
 80072be:	f7fe fd62 	bl	8005d86 <chk_chr>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d001      	beq.n	80072cc <create_name+0xa4>
 80072c8:	2306      	movs	r3, #6
 80072ca:	e161      	b.n	8007590 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	1c5a      	adds	r2, r3, #1
 80072d0:	617a      	str	r2, [r7, #20]
 80072d2:	005b      	lsls	r3, r3, #1
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	4413      	add	r3, r2
 80072d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80072da:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80072dc:	e7b4      	b.n	8007248 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80072de:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	441a      	add	r2, r3
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80072ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072ec:	2b1f      	cmp	r3, #31
 80072ee:	d801      	bhi.n	80072f4 <create_name+0xcc>
 80072f0:	2304      	movs	r3, #4
 80072f2:	e000      	b.n	80072f6 <create_name+0xce>
 80072f4:	2300      	movs	r3, #0
 80072f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80072fa:	e011      	b.n	8007320 <create_name+0xf8>
		w = lfn[di - 1];
 80072fc:	697a      	ldr	r2, [r7, #20]
 80072fe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007302:	4413      	add	r3, r2
 8007304:	005b      	lsls	r3, r3, #1
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	4413      	add	r3, r2
 800730a:	881b      	ldrh	r3, [r3, #0]
 800730c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800730e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007310:	2b20      	cmp	r3, #32
 8007312:	d002      	beq.n	800731a <create_name+0xf2>
 8007314:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007316:	2b2e      	cmp	r3, #46	; 0x2e
 8007318:	d106      	bne.n	8007328 <create_name+0x100>
		di--;
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	3b01      	subs	r3, #1
 800731e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1ea      	bne.n	80072fc <create_name+0xd4>
 8007326:	e000      	b.n	800732a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007328:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	005b      	lsls	r3, r3, #1
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	4413      	add	r3, r2
 8007332:	2200      	movs	r2, #0
 8007334:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d101      	bne.n	8007340 <create_name+0x118>
 800733c:	2306      	movs	r3, #6
 800733e:	e127      	b.n	8007590 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	3324      	adds	r3, #36	; 0x24
 8007344:	220b      	movs	r2, #11
 8007346:	2120      	movs	r1, #32
 8007348:	4618      	mov	r0, r3
 800734a:	f7fe fcda 	bl	8005d02 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800734e:	2300      	movs	r3, #0
 8007350:	61bb      	str	r3, [r7, #24]
 8007352:	e002      	b.n	800735a <create_name+0x132>
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	3301      	adds	r3, #1
 8007358:	61bb      	str	r3, [r7, #24]
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	005b      	lsls	r3, r3, #1
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	4413      	add	r3, r2
 8007362:	881b      	ldrh	r3, [r3, #0]
 8007364:	2b20      	cmp	r3, #32
 8007366:	d0f5      	beq.n	8007354 <create_name+0x12c>
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	005b      	lsls	r3, r3, #1
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	4413      	add	r3, r2
 8007370:	881b      	ldrh	r3, [r3, #0]
 8007372:	2b2e      	cmp	r3, #46	; 0x2e
 8007374:	d0ee      	beq.n	8007354 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d009      	beq.n	8007390 <create_name+0x168>
 800737c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007380:	f043 0303 	orr.w	r3, r3, #3
 8007384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007388:	e002      	b.n	8007390 <create_name+0x168>
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	3b01      	subs	r3, #1
 800738e:	617b      	str	r3, [r7, #20]
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d009      	beq.n	80073aa <create_name+0x182>
 8007396:	697a      	ldr	r2, [r7, #20]
 8007398:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800739c:	4413      	add	r3, r2
 800739e:	005b      	lsls	r3, r3, #1
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	4413      	add	r3, r2
 80073a4:	881b      	ldrh	r3, [r3, #0]
 80073a6:	2b2e      	cmp	r3, #46	; 0x2e
 80073a8:	d1ef      	bne.n	800738a <create_name+0x162>

	i = b = 0; ni = 8;
 80073aa:	2300      	movs	r3, #0
 80073ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80073b0:	2300      	movs	r3, #0
 80073b2:	623b      	str	r3, [r7, #32]
 80073b4:	2308      	movs	r3, #8
 80073b6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	1c5a      	adds	r2, r3, #1
 80073bc:	61ba      	str	r2, [r7, #24]
 80073be:	005b      	lsls	r3, r3, #1
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	4413      	add	r3, r2
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80073c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 8090 	beq.w	80074f0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80073d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073d2:	2b20      	cmp	r3, #32
 80073d4:	d006      	beq.n	80073e4 <create_name+0x1bc>
 80073d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073d8:	2b2e      	cmp	r3, #46	; 0x2e
 80073da:	d10a      	bne.n	80073f2 <create_name+0x1ca>
 80073dc:	69ba      	ldr	r2, [r7, #24]
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d006      	beq.n	80073f2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80073e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073e8:	f043 0303 	orr.w	r3, r3, #3
 80073ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80073f0:	e07d      	b.n	80074ee <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80073f2:	6a3a      	ldr	r2, [r7, #32]
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d203      	bcs.n	8007402 <create_name+0x1da>
 80073fa:	69ba      	ldr	r2, [r7, #24]
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d123      	bne.n	800744a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	2b0b      	cmp	r3, #11
 8007406:	d106      	bne.n	8007416 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800740c:	f043 0303 	orr.w	r3, r3, #3
 8007410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007414:	e075      	b.n	8007502 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007416:	69ba      	ldr	r2, [r7, #24]
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	429a      	cmp	r2, r3
 800741c:	d005      	beq.n	800742a <create_name+0x202>
 800741e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007422:	f043 0303 	orr.w	r3, r3, #3
 8007426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800742a:	69ba      	ldr	r2, [r7, #24]
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	429a      	cmp	r2, r3
 8007430:	d866      	bhi.n	8007500 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	61bb      	str	r3, [r7, #24]
 8007436:	2308      	movs	r3, #8
 8007438:	623b      	str	r3, [r7, #32]
 800743a:	230b      	movs	r3, #11
 800743c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800743e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007448:	e051      	b.n	80074ee <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800744a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800744c:	2b7f      	cmp	r3, #127	; 0x7f
 800744e:	d914      	bls.n	800747a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007450:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007452:	2100      	movs	r1, #0
 8007454:	4618      	mov	r0, r3
 8007456:	f001 ff0f 	bl	8009278 <ff_convert>
 800745a:	4603      	mov	r3, r0
 800745c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800745e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007460:	2b00      	cmp	r3, #0
 8007462:	d004      	beq.n	800746e <create_name+0x246>
 8007464:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007466:	3b80      	subs	r3, #128	; 0x80
 8007468:	4a23      	ldr	r2, [pc, #140]	; (80074f8 <create_name+0x2d0>)
 800746a:	5cd3      	ldrb	r3, [r2, r3]
 800746c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800746e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007472:	f043 0302 	orr.w	r3, r3, #2
 8007476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800747a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800747c:	2b00      	cmp	r3, #0
 800747e:	d007      	beq.n	8007490 <create_name+0x268>
 8007480:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007482:	4619      	mov	r1, r3
 8007484:	481d      	ldr	r0, [pc, #116]	; (80074fc <create_name+0x2d4>)
 8007486:	f7fe fc7e 	bl	8005d86 <chk_chr>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d008      	beq.n	80074a2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007490:	235f      	movs	r3, #95	; 0x5f
 8007492:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007498:	f043 0303 	orr.w	r3, r3, #3
 800749c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80074a0:	e01b      	b.n	80074da <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80074a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074a4:	2b40      	cmp	r3, #64	; 0x40
 80074a6:	d909      	bls.n	80074bc <create_name+0x294>
 80074a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074aa:	2b5a      	cmp	r3, #90	; 0x5a
 80074ac:	d806      	bhi.n	80074bc <create_name+0x294>
					b |= 2;
 80074ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074b2:	f043 0302 	orr.w	r3, r3, #2
 80074b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80074ba:	e00e      	b.n	80074da <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80074bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074be:	2b60      	cmp	r3, #96	; 0x60
 80074c0:	d90b      	bls.n	80074da <create_name+0x2b2>
 80074c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074c4:	2b7a      	cmp	r3, #122	; 0x7a
 80074c6:	d808      	bhi.n	80074da <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80074c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074cc:	f043 0301 	orr.w	r3, r3, #1
 80074d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80074d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074d6:	3b20      	subs	r3, #32
 80074d8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	1c5a      	adds	r2, r3, #1
 80074de:	623a      	str	r2, [r7, #32]
 80074e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80074e2:	b2d1      	uxtb	r1, r2
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	4413      	add	r3, r2
 80074e8:	460a      	mov	r2, r1
 80074ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80074ee:	e763      	b.n	80073b8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80074f0:	bf00      	nop
 80074f2:	e006      	b.n	8007502 <create_name+0x2da>
 80074f4:	08009d8c 	.word	0x08009d8c
 80074f8:	08009e00 	.word	0x08009e00
 80074fc:	08009d98 	.word	0x08009d98
			if (si > di) break;			/* No extension */
 8007500:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007508:	2be5      	cmp	r3, #229	; 0xe5
 800750a:	d103      	bne.n	8007514 <create_name+0x2ec>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2205      	movs	r2, #5
 8007510:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	2b08      	cmp	r3, #8
 8007518:	d104      	bne.n	8007524 <create_name+0x2fc>
 800751a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007524:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007528:	f003 030c 	and.w	r3, r3, #12
 800752c:	2b0c      	cmp	r3, #12
 800752e:	d005      	beq.n	800753c <create_name+0x314>
 8007530:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007534:	f003 0303 	and.w	r3, r3, #3
 8007538:	2b03      	cmp	r3, #3
 800753a:	d105      	bne.n	8007548 <create_name+0x320>
 800753c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007540:	f043 0302 	orr.w	r3, r3, #2
 8007544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007548:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800754c:	f003 0302 	and.w	r3, r3, #2
 8007550:	2b00      	cmp	r3, #0
 8007552:	d117      	bne.n	8007584 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007554:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007558:	f003 0303 	and.w	r3, r3, #3
 800755c:	2b01      	cmp	r3, #1
 800755e:	d105      	bne.n	800756c <create_name+0x344>
 8007560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007564:	f043 0310 	orr.w	r3, r3, #16
 8007568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800756c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007570:	f003 030c 	and.w	r3, r3, #12
 8007574:	2b04      	cmp	r3, #4
 8007576:	d105      	bne.n	8007584 <create_name+0x35c>
 8007578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800757c:	f043 0308 	orr.w	r3, r3, #8
 8007580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800758a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800758e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007590:	4618      	mov	r0, r3
 8007592:	3728      	adds	r7, #40	; 0x28
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80075ac:	e002      	b.n	80075b4 <follow_path+0x1c>
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	3301      	adds	r3, #1
 80075b2:	603b      	str	r3, [r7, #0]
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	2b2f      	cmp	r3, #47	; 0x2f
 80075ba:	d0f8      	beq.n	80075ae <follow_path+0x16>
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	2b5c      	cmp	r3, #92	; 0x5c
 80075c2:	d0f4      	beq.n	80075ae <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	2200      	movs	r2, #0
 80075c8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	2b1f      	cmp	r3, #31
 80075d0:	d80a      	bhi.n	80075e8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2280      	movs	r2, #128	; 0x80
 80075d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80075da:	2100      	movs	r1, #0
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7ff f91d 	bl	800681c <dir_sdi>
 80075e2:	4603      	mov	r3, r0
 80075e4:	75fb      	strb	r3, [r7, #23]
 80075e6:	e043      	b.n	8007670 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80075e8:	463b      	mov	r3, r7
 80075ea:	4619      	mov	r1, r3
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f7ff fe1b 	bl	8007228 <create_name>
 80075f2:	4603      	mov	r3, r0
 80075f4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80075f6:	7dfb      	ldrb	r3, [r7, #23]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d134      	bne.n	8007666 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7ff fc5a 	bl	8006eb6 <dir_find>
 8007602:	4603      	mov	r3, r0
 8007604:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800760c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800760e:	7dfb      	ldrb	r3, [r7, #23]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00a      	beq.n	800762a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007614:	7dfb      	ldrb	r3, [r7, #23]
 8007616:	2b04      	cmp	r3, #4
 8007618:	d127      	bne.n	800766a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800761a:	7afb      	ldrb	r3, [r7, #11]
 800761c:	f003 0304 	and.w	r3, r3, #4
 8007620:	2b00      	cmp	r3, #0
 8007622:	d122      	bne.n	800766a <follow_path+0xd2>
 8007624:	2305      	movs	r3, #5
 8007626:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007628:	e01f      	b.n	800766a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800762a:	7afb      	ldrb	r3, [r7, #11]
 800762c:	f003 0304 	and.w	r3, r3, #4
 8007630:	2b00      	cmp	r3, #0
 8007632:	d11c      	bne.n	800766e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	799b      	ldrb	r3, [r3, #6]
 8007638:	f003 0310 	and.w	r3, r3, #16
 800763c:	2b00      	cmp	r3, #0
 800763e:	d102      	bne.n	8007646 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007640:	2305      	movs	r3, #5
 8007642:	75fb      	strb	r3, [r7, #23]
 8007644:	e014      	b.n	8007670 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	695b      	ldr	r3, [r3, #20]
 8007650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007654:	4413      	add	r3, r2
 8007656:	4619      	mov	r1, r3
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f7ff fa66 	bl	8006b2a <ld_clust>
 800765e:	4602      	mov	r2, r0
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007664:	e7c0      	b.n	80075e8 <follow_path+0x50>
			if (res != FR_OK) break;
 8007666:	bf00      	nop
 8007668:	e002      	b.n	8007670 <follow_path+0xd8>
				break;
 800766a:	bf00      	nop
 800766c:	e000      	b.n	8007670 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800766e:	bf00      	nop
			}
		}
	}

	return res;
 8007670:	7dfb      	ldrb	r3, [r7, #23]
}
 8007672:	4618      	mov	r0, r3
 8007674:	3718      	adds	r7, #24
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800767a:	b480      	push	{r7}
 800767c:	b087      	sub	sp, #28
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007686:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d031      	beq.n	80076f4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	617b      	str	r3, [r7, #20]
 8007696:	e002      	b.n	800769e <get_ldnumber+0x24>
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	3301      	adds	r3, #1
 800769c:	617b      	str	r3, [r7, #20]
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	2b1f      	cmp	r3, #31
 80076a4:	d903      	bls.n	80076ae <get_ldnumber+0x34>
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	2b3a      	cmp	r3, #58	; 0x3a
 80076ac:	d1f4      	bne.n	8007698 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	2b3a      	cmp	r3, #58	; 0x3a
 80076b4:	d11c      	bne.n	80076f0 <get_ldnumber+0x76>
			tp = *path;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	1c5a      	adds	r2, r3, #1
 80076c0:	60fa      	str	r2, [r7, #12]
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	3b30      	subs	r3, #48	; 0x30
 80076c6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	2b09      	cmp	r3, #9
 80076cc:	d80e      	bhi.n	80076ec <get_ldnumber+0x72>
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d10a      	bne.n	80076ec <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d107      	bne.n	80076ec <get_ldnumber+0x72>
					vol = (int)i;
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	3301      	adds	r3, #1
 80076e4:	617b      	str	r3, [r7, #20]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	697a      	ldr	r2, [r7, #20]
 80076ea:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	e002      	b.n	80076f6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80076f0:	2300      	movs	r3, #0
 80076f2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80076f4:	693b      	ldr	r3, [r7, #16]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	371c      	adds	r7, #28
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
	...

08007704 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	70da      	strb	r2, [r3, #3]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800771a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800771c:	6839      	ldr	r1, [r7, #0]
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7fe fcfc 	bl	800611c <move_window>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d001      	beq.n	800772e <check_fs+0x2a>
 800772a:	2304      	movs	r3, #4
 800772c:	e038      	b.n	80077a0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	3334      	adds	r3, #52	; 0x34
 8007732:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007736:	4618      	mov	r0, r3
 8007738:	f7fe fa40 	bl	8005bbc <ld_word>
 800773c:	4603      	mov	r3, r0
 800773e:	461a      	mov	r2, r3
 8007740:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007744:	429a      	cmp	r2, r3
 8007746:	d001      	beq.n	800774c <check_fs+0x48>
 8007748:	2303      	movs	r3, #3
 800774a:	e029      	b.n	80077a0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007752:	2be9      	cmp	r3, #233	; 0xe9
 8007754:	d009      	beq.n	800776a <check_fs+0x66>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800775c:	2beb      	cmp	r3, #235	; 0xeb
 800775e:	d11e      	bne.n	800779e <check_fs+0x9a>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007766:	2b90      	cmp	r3, #144	; 0x90
 8007768:	d119      	bne.n	800779e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	3334      	adds	r3, #52	; 0x34
 800776e:	3336      	adds	r3, #54	; 0x36
 8007770:	4618      	mov	r0, r3
 8007772:	f7fe fa3b 	bl	8005bec <ld_dword>
 8007776:	4603      	mov	r3, r0
 8007778:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800777c:	4a0a      	ldr	r2, [pc, #40]	; (80077a8 <check_fs+0xa4>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d101      	bne.n	8007786 <check_fs+0x82>
 8007782:	2300      	movs	r3, #0
 8007784:	e00c      	b.n	80077a0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	3334      	adds	r3, #52	; 0x34
 800778a:	3352      	adds	r3, #82	; 0x52
 800778c:	4618      	mov	r0, r3
 800778e:	f7fe fa2d 	bl	8005bec <ld_dword>
 8007792:	4603      	mov	r3, r0
 8007794:	4a05      	ldr	r2, [pc, #20]	; (80077ac <check_fs+0xa8>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d101      	bne.n	800779e <check_fs+0x9a>
 800779a:	2300      	movs	r3, #0
 800779c:	e000      	b.n	80077a0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800779e:	2302      	movs	r3, #2
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	00544146 	.word	0x00544146
 80077ac:	33544146 	.word	0x33544146

080077b0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b096      	sub	sp, #88	; 0x58
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	4613      	mov	r3, r2
 80077bc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	2200      	movs	r2, #0
 80077c2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f7ff ff58 	bl	800767a <get_ldnumber>
 80077ca:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80077cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	da01      	bge.n	80077d6 <find_volume+0x26>
 80077d2:	230b      	movs	r3, #11
 80077d4:	e22d      	b.n	8007c32 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80077d6:	4aa1      	ldr	r2, [pc, #644]	; (8007a5c <find_volume+0x2ac>)
 80077d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077de:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80077e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d101      	bne.n	80077ea <find_volume+0x3a>
 80077e6:	230c      	movs	r3, #12
 80077e8:	e223      	b.n	8007c32 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077ee:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80077f0:	79fb      	ldrb	r3, [r7, #7]
 80077f2:	f023 0301 	bic.w	r3, r3, #1
 80077f6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80077f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d01a      	beq.n	8007836 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007802:	785b      	ldrb	r3, [r3, #1]
 8007804:	4618      	mov	r0, r3
 8007806:	f7fe f93b 	bl	8005a80 <disk_status>
 800780a:	4603      	mov	r3, r0
 800780c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007810:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007814:	f003 0301 	and.w	r3, r3, #1
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10c      	bne.n	8007836 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800781c:	79fb      	ldrb	r3, [r7, #7]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d007      	beq.n	8007832 <find_volume+0x82>
 8007822:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007826:	f003 0304 	and.w	r3, r3, #4
 800782a:	2b00      	cmp	r3, #0
 800782c:	d001      	beq.n	8007832 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800782e:	230a      	movs	r3, #10
 8007830:	e1ff      	b.n	8007c32 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8007832:	2300      	movs	r3, #0
 8007834:	e1fd      	b.n	8007c32 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007838:	2200      	movs	r2, #0
 800783a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800783c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800783e:	b2da      	uxtb	r2, r3
 8007840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007842:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007846:	785b      	ldrb	r3, [r3, #1]
 8007848:	4618      	mov	r0, r3
 800784a:	f7fe f933 	bl	8005ab4 <disk_initialize>
 800784e:	4603      	mov	r3, r0
 8007850:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007854:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007858:	f003 0301 	and.w	r3, r3, #1
 800785c:	2b00      	cmp	r3, #0
 800785e:	d001      	beq.n	8007864 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007860:	2303      	movs	r3, #3
 8007862:	e1e6      	b.n	8007c32 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007864:	79fb      	ldrb	r3, [r7, #7]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d007      	beq.n	800787a <find_volume+0xca>
 800786a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800786e:	f003 0304 	and.w	r3, r3, #4
 8007872:	2b00      	cmp	r3, #0
 8007874:	d001      	beq.n	800787a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007876:	230a      	movs	r3, #10
 8007878:	e1db      	b.n	8007c32 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800787a:	2300      	movs	r3, #0
 800787c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800787e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007880:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007882:	f7ff ff3f 	bl	8007704 <check_fs>
 8007886:	4603      	mov	r3, r0
 8007888:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800788c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007890:	2b02      	cmp	r3, #2
 8007892:	d149      	bne.n	8007928 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007894:	2300      	movs	r3, #0
 8007896:	643b      	str	r3, [r7, #64]	; 0x40
 8007898:	e01e      	b.n	80078d8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800789a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80078a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078a2:	011b      	lsls	r3, r3, #4
 80078a4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80078a8:	4413      	add	r3, r2
 80078aa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80078ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ae:	3304      	adds	r3, #4
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d006      	beq.n	80078c4 <find_volume+0x114>
 80078b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b8:	3308      	adds	r3, #8
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fe f996 	bl	8005bec <ld_dword>
 80078c0:	4602      	mov	r2, r0
 80078c2:	e000      	b.n	80078c6 <find_volume+0x116>
 80078c4:	2200      	movs	r2, #0
 80078c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	3358      	adds	r3, #88	; 0x58
 80078cc:	443b      	add	r3, r7
 80078ce:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80078d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078d4:	3301      	adds	r3, #1
 80078d6:	643b      	str	r3, [r7, #64]	; 0x40
 80078d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078da:	2b03      	cmp	r3, #3
 80078dc:	d9dd      	bls.n	800789a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80078de:	2300      	movs	r3, #0
 80078e0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80078e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d002      	beq.n	80078ee <find_volume+0x13e>
 80078e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078ea:	3b01      	subs	r3, #1
 80078ec:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80078ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	3358      	adds	r3, #88	; 0x58
 80078f4:	443b      	add	r3, r7
 80078f6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80078fa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80078fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d005      	beq.n	800790e <find_volume+0x15e>
 8007902:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007904:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007906:	f7ff fefd 	bl	8007704 <check_fs>
 800790a:	4603      	mov	r3, r0
 800790c:	e000      	b.n	8007910 <find_volume+0x160>
 800790e:	2303      	movs	r3, #3
 8007910:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007914:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007918:	2b01      	cmp	r3, #1
 800791a:	d905      	bls.n	8007928 <find_volume+0x178>
 800791c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800791e:	3301      	adds	r3, #1
 8007920:	643b      	str	r3, [r7, #64]	; 0x40
 8007922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007924:	2b03      	cmp	r3, #3
 8007926:	d9e2      	bls.n	80078ee <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007928:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800792c:	2b04      	cmp	r3, #4
 800792e:	d101      	bne.n	8007934 <find_volume+0x184>
 8007930:	2301      	movs	r3, #1
 8007932:	e17e      	b.n	8007c32 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007934:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007938:	2b01      	cmp	r3, #1
 800793a:	d901      	bls.n	8007940 <find_volume+0x190>
 800793c:	230d      	movs	r3, #13
 800793e:	e178      	b.n	8007c32 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007942:	3334      	adds	r3, #52	; 0x34
 8007944:	330b      	adds	r3, #11
 8007946:	4618      	mov	r0, r3
 8007948:	f7fe f938 	bl	8005bbc <ld_word>
 800794c:	4603      	mov	r3, r0
 800794e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007952:	d001      	beq.n	8007958 <find_volume+0x1a8>
 8007954:	230d      	movs	r3, #13
 8007956:	e16c      	b.n	8007c32 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795a:	3334      	adds	r3, #52	; 0x34
 800795c:	3316      	adds	r3, #22
 800795e:	4618      	mov	r0, r3
 8007960:	f7fe f92c 	bl	8005bbc <ld_word>
 8007964:	4603      	mov	r3, r0
 8007966:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800796a:	2b00      	cmp	r3, #0
 800796c:	d106      	bne.n	800797c <find_volume+0x1cc>
 800796e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007970:	3334      	adds	r3, #52	; 0x34
 8007972:	3324      	adds	r3, #36	; 0x24
 8007974:	4618      	mov	r0, r3
 8007976:	f7fe f939 	bl	8005bec <ld_dword>
 800797a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800797c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007980:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007984:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800798c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798e:	789b      	ldrb	r3, [r3, #2]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d005      	beq.n	80079a0 <find_volume+0x1f0>
 8007994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007996:	789b      	ldrb	r3, [r3, #2]
 8007998:	2b02      	cmp	r3, #2
 800799a:	d001      	beq.n	80079a0 <find_volume+0x1f0>
 800799c:	230d      	movs	r3, #13
 800799e:	e148      	b.n	8007c32 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80079a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a2:	789b      	ldrb	r3, [r3, #2]
 80079a4:	461a      	mov	r2, r3
 80079a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079a8:	fb02 f303 	mul.w	r3, r2, r3
 80079ac:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80079ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80079ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079bc:	895b      	ldrh	r3, [r3, #10]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d008      	beq.n	80079d4 <find_volume+0x224>
 80079c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c4:	895b      	ldrh	r3, [r3, #10]
 80079c6:	461a      	mov	r2, r3
 80079c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ca:	895b      	ldrh	r3, [r3, #10]
 80079cc:	3b01      	subs	r3, #1
 80079ce:	4013      	ands	r3, r2
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d001      	beq.n	80079d8 <find_volume+0x228>
 80079d4:	230d      	movs	r3, #13
 80079d6:	e12c      	b.n	8007c32 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80079d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079da:	3334      	adds	r3, #52	; 0x34
 80079dc:	3311      	adds	r3, #17
 80079de:	4618      	mov	r0, r3
 80079e0:	f7fe f8ec 	bl	8005bbc <ld_word>
 80079e4:	4603      	mov	r3, r0
 80079e6:	461a      	mov	r2, r3
 80079e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ea:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80079ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ee:	891b      	ldrh	r3, [r3, #8]
 80079f0:	f003 030f 	and.w	r3, r3, #15
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d001      	beq.n	80079fe <find_volume+0x24e>
 80079fa:	230d      	movs	r3, #13
 80079fc:	e119      	b.n	8007c32 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80079fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a00:	3334      	adds	r3, #52	; 0x34
 8007a02:	3313      	adds	r3, #19
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7fe f8d9 	bl	8005bbc <ld_word>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007a0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d106      	bne.n	8007a22 <find_volume+0x272>
 8007a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a16:	3334      	adds	r3, #52	; 0x34
 8007a18:	3320      	adds	r3, #32
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7fe f8e6 	bl	8005bec <ld_dword>
 8007a20:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a24:	3334      	adds	r3, #52	; 0x34
 8007a26:	330e      	adds	r3, #14
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7fe f8c7 	bl	8005bbc <ld_word>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007a32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d101      	bne.n	8007a3c <find_volume+0x28c>
 8007a38:	230d      	movs	r3, #13
 8007a3a:	e0fa      	b.n	8007c32 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007a3c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a40:	4413      	add	r3, r2
 8007a42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a44:	8912      	ldrh	r2, [r2, #8]
 8007a46:	0912      	lsrs	r2, r2, #4
 8007a48:	b292      	uxth	r2, r2
 8007a4a:	4413      	add	r3, r2
 8007a4c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007a4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d204      	bcs.n	8007a60 <find_volume+0x2b0>
 8007a56:	230d      	movs	r3, #13
 8007a58:	e0eb      	b.n	8007c32 <find_volume+0x482>
 8007a5a:	bf00      	nop
 8007a5c:	2000084c 	.word	0x2000084c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007a60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a68:	8952      	ldrh	r2, [r2, #10]
 8007a6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a6e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d101      	bne.n	8007a7a <find_volume+0x2ca>
 8007a76:	230d      	movs	r3, #13
 8007a78:	e0db      	b.n	8007c32 <find_volume+0x482>
		fmt = FS_FAT32;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a82:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d802      	bhi.n	8007a90 <find_volume+0x2e0>
 8007a8a:	2302      	movs	r3, #2
 8007a8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a92:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d802      	bhi.n	8007aa0 <find_volume+0x2f0>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa2:	1c9a      	adds	r2, r3, #2
 8007aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aaa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007aac:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007aae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ab2:	441a      	add	r2, r3
 8007ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007ab8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007abc:	441a      	add	r2, r3
 8007abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac0:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8007ac2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ac6:	2b03      	cmp	r3, #3
 8007ac8:	d11e      	bne.n	8007b08 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007acc:	3334      	adds	r3, #52	; 0x34
 8007ace:	332a      	adds	r3, #42	; 0x2a
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7fe f873 	bl	8005bbc <ld_word>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d001      	beq.n	8007ae0 <find_volume+0x330>
 8007adc:	230d      	movs	r3, #13
 8007ade:	e0a8      	b.n	8007c32 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae2:	891b      	ldrh	r3, [r3, #8]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d001      	beq.n	8007aec <find_volume+0x33c>
 8007ae8:	230d      	movs	r3, #13
 8007aea:	e0a2      	b.n	8007c32 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aee:	3334      	adds	r3, #52	; 0x34
 8007af0:	332c      	adds	r3, #44	; 0x2c
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fe f87a 	bl	8005bec <ld_dword>
 8007af8:	4602      	mov	r2, r0
 8007afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	647b      	str	r3, [r7, #68]	; 0x44
 8007b06:	e01f      	b.n	8007b48 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0a:	891b      	ldrh	r3, [r3, #8]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <find_volume+0x364>
 8007b10:	230d      	movs	r3, #13
 8007b12:	e08e      	b.n	8007c32 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b1a:	441a      	add	r2, r3
 8007b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007b20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d103      	bne.n	8007b30 <find_volume+0x380>
 8007b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2a:	699b      	ldr	r3, [r3, #24]
 8007b2c:	005b      	lsls	r3, r3, #1
 8007b2e:	e00a      	b.n	8007b46 <find_volume+0x396>
 8007b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b32:	699a      	ldr	r2, [r3, #24]
 8007b34:	4613      	mov	r3, r2
 8007b36:	005b      	lsls	r3, r3, #1
 8007b38:	4413      	add	r3, r2
 8007b3a:	085a      	lsrs	r2, r3, #1
 8007b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007b46:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b4a:	69da      	ldr	r2, [r3, #28]
 8007b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b4e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007b52:	0a5b      	lsrs	r3, r3, #9
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d201      	bcs.n	8007b5c <find_volume+0x3ac>
 8007b58:	230d      	movs	r3, #13
 8007b5a:	e06a      	b.n	8007c32 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b62:	615a      	str	r2, [r3, #20]
 8007b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b66:	695a      	ldr	r2, [r3, #20]
 8007b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8007b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6e:	2280      	movs	r2, #128	; 0x80
 8007b70:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007b72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	d149      	bne.n	8007c0e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7c:	3334      	adds	r3, #52	; 0x34
 8007b7e:	3330      	adds	r3, #48	; 0x30
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7fe f81b 	bl	8005bbc <ld_word>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d140      	bne.n	8007c0e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b8e:	3301      	adds	r3, #1
 8007b90:	4619      	mov	r1, r3
 8007b92:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b94:	f7fe fac2 	bl	800611c <move_window>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d137      	bne.n	8007c0e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8007b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba6:	3334      	adds	r3, #52	; 0x34
 8007ba8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7fe f805 	bl	8005bbc <ld_word>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d127      	bne.n	8007c0e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc0:	3334      	adds	r3, #52	; 0x34
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7fe f812 	bl	8005bec <ld_dword>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	4a1c      	ldr	r2, [pc, #112]	; (8007c3c <find_volume+0x48c>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d11e      	bne.n	8007c0e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd2:	3334      	adds	r3, #52	; 0x34
 8007bd4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7fe f807 	bl	8005bec <ld_dword>
 8007bde:	4603      	mov	r3, r0
 8007be0:	4a17      	ldr	r2, [pc, #92]	; (8007c40 <find_volume+0x490>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d113      	bne.n	8007c0e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be8:	3334      	adds	r3, #52	; 0x34
 8007bea:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fd fffc 	bl	8005bec <ld_dword>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bfc:	3334      	adds	r3, #52	; 0x34
 8007bfe:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fd fff2 	bl	8005bec <ld_dword>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c10:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007c14:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007c16:	4b0b      	ldr	r3, [pc, #44]	; (8007c44 <find_volume+0x494>)
 8007c18:	881b      	ldrh	r3, [r3, #0]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	4b09      	ldr	r3, [pc, #36]	; (8007c44 <find_volume+0x494>)
 8007c20:	801a      	strh	r2, [r3, #0]
 8007c22:	4b08      	ldr	r3, [pc, #32]	; (8007c44 <find_volume+0x494>)
 8007c24:	881a      	ldrh	r2, [r3, #0]
 8007c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c28:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007c2a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c2c:	f7fe fa0e 	bl	800604c <clear_lock>
#endif
	return FR_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3758      	adds	r7, #88	; 0x58
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	41615252 	.word	0x41615252
 8007c40:	61417272 	.word	0x61417272
 8007c44:	20000850 	.word	0x20000850

08007c48 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007c52:	2309      	movs	r3, #9
 8007c54:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d01c      	beq.n	8007c96 <validate+0x4e>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d018      	beq.n	8007c96 <validate+0x4e>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d013      	beq.n	8007c96 <validate+0x4e>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	889a      	ldrh	r2, [r3, #4]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	88db      	ldrh	r3, [r3, #6]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d10c      	bne.n	8007c96 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	785b      	ldrb	r3, [r3, #1]
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7fd fefc 	bl	8005a80 <disk_status>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	f003 0301 	and.w	r3, r3, #1
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d101      	bne.n	8007c96 <validate+0x4e>
			res = FR_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007c96:	7bfb      	ldrb	r3, [r7, #15]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d102      	bne.n	8007ca2 <validate+0x5a>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	e000      	b.n	8007ca4 <validate+0x5c>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	683a      	ldr	r2, [r7, #0]
 8007ca6:	6013      	str	r3, [r2, #0]
	return res;
 8007ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
	...

08007cb4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b088      	sub	sp, #32
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007cc6:	f107 0310 	add.w	r3, r7, #16
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7ff fcd5 	bl	800767a <get_ldnumber>
 8007cd0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	da01      	bge.n	8007cdc <f_mount+0x28>
 8007cd8:	230b      	movs	r3, #11
 8007cda:	e02b      	b.n	8007d34 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007cdc:	4a17      	ldr	r2, [pc, #92]	; (8007d3c <f_mount+0x88>)
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ce4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d005      	beq.n	8007cf8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007cec:	69b8      	ldr	r0, [r7, #24]
 8007cee:	f7fe f9ad 	bl	800604c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d002      	beq.n	8007d04 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	490d      	ldr	r1, [pc, #52]	; (8007d3c <f_mount+0x88>)
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d002      	beq.n	8007d1a <f_mount+0x66>
 8007d14:	79fb      	ldrb	r3, [r7, #7]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d001      	beq.n	8007d1e <f_mount+0x6a>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	e00a      	b.n	8007d34 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007d1e:	f107 010c 	add.w	r1, r7, #12
 8007d22:	f107 0308 	add.w	r3, r7, #8
 8007d26:	2200      	movs	r2, #0
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f7ff fd41 	bl	80077b0 <find_volume>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3720      	adds	r7, #32
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	2000084c 	.word	0x2000084c

08007d40 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d4c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007d50:	6018      	str	r0, [r3, #0]
 8007d52:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d56:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8007d5a:	6019      	str	r1, [r3, #0]
 8007d5c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d60:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007d64:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007d66:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d6a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d101      	bne.n	8007d78 <f_open+0x38>
 8007d74:	2309      	movs	r3, #9
 8007d76:	e295      	b.n	80082a4 <f_open+0x564>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007d78:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d7c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007d80:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007d84:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8007d88:	7812      	ldrb	r2, [r2, #0]
 8007d8a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007d8e:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8007d90:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d94:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007d98:	781a      	ldrb	r2, [r3, #0]
 8007d9a:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8007d9e:	f107 0308 	add.w	r3, r7, #8
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7ff fd04 	bl	80077b0 <find_volume>
 8007da8:	4603      	mov	r3, r0
 8007daa:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 8007dae:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	f040 8269 	bne.w	800828a <f_open+0x54a>
		dj.obj.fs = fs;
 8007db8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007dbc:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 8007dc0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007dc4:	f107 0214 	add.w	r2, r7, #20
 8007dc8:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8007dca:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007dce:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8007dd8:	4611      	mov	r1, r2
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7ff fbdc 	bl	8007598 <follow_path>
 8007de0:	4603      	mov	r3, r0
 8007de2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007de6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d11e      	bne.n	8007e2c <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007dee:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8007df2:	b25b      	sxtb	r3, r3
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	da03      	bge.n	8007e00 <f_open+0xc0>
				res = FR_INVALID_NAME;
 8007df8:	2306      	movs	r3, #6
 8007dfa:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007dfe:	e015      	b.n	8007e2c <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007e00:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e04:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	f023 0301 	bic.w	r3, r3, #1
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	bf14      	ite	ne
 8007e12:	2301      	movne	r3, #1
 8007e14:	2300      	moveq	r3, #0
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	461a      	mov	r2, r3
 8007e1a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8007e1e:	4611      	mov	r1, r2
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7fd ffcb 	bl	8005dbc <chk_lock>
 8007e26:	4603      	mov	r3, r0
 8007e28:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007e2c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e30:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	f003 031c 	and.w	r3, r3, #28
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f000 80a7 	beq.w	8007f8e <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 8007e40:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d01f      	beq.n	8007e88 <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007e48:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007e4c:	2b04      	cmp	r3, #4
 8007e4e:	d10e      	bne.n	8007e6e <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007e50:	f7fe f810 	bl	8005e74 <enq_lock>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d006      	beq.n	8007e68 <f_open+0x128>
 8007e5a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7ff f8ea 	bl	8007038 <dir_register>
 8007e64:	4603      	mov	r3, r0
 8007e66:	e000      	b.n	8007e6a <f_open+0x12a>
 8007e68:	2312      	movs	r3, #18
 8007e6a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007e6e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e72:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007e76:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007e7a:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8007e7e:	7812      	ldrb	r2, [r2, #0]
 8007e80:	f042 0208 	orr.w	r2, r2, #8
 8007e84:	701a      	strb	r2, [r3, #0]
 8007e86:	e015      	b.n	8007eb4 <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007e88:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8007e8c:	f003 0311 	and.w	r3, r3, #17
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d003      	beq.n	8007e9c <f_open+0x15c>
					res = FR_DENIED;
 8007e94:	2307      	movs	r3, #7
 8007e96:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007e9a:	e00b      	b.n	8007eb4 <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007e9c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007ea0:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	f003 0304 	and.w	r3, r3, #4
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d002      	beq.n	8007eb4 <f_open+0x174>
 8007eae:	2308      	movs	r3, #8
 8007eb0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007eb4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f040 8088 	bne.w	8007fce <f_open+0x28e>
 8007ebe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007ec2:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	f003 0308 	and.w	r3, r3, #8
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d07e      	beq.n	8007fce <f_open+0x28e>
				dw = GET_FATTIME();
 8007ed0:	f7fd fc0e 	bl	80056f0 <get_fattime>
 8007ed4:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007ed8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007edc:	330e      	adds	r3, #14
 8007ede:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7fd fec0 	bl	8005c68 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007ee8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007eec:	3316      	adds	r3, #22
 8007eee:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fd feb8 	bl	8005c68 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007ef8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007efc:	330b      	adds	r3, #11
 8007efe:	2220      	movs	r2, #32
 8007f00:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007f02:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007f06:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8007f0a:	4611      	mov	r1, r2
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fe fe0c 	bl	8006b2a <ld_clust>
 8007f12:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007f16:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007f1a:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8007f1e:	2200      	movs	r2, #0
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7fe fe21 	bl	8006b68 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007f26:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007f2a:	331c      	adds	r3, #28
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7fd fe9a 	bl	8005c68 <st_dword>
					fs->wflag = 1;
 8007f34:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007f38:	2201      	movs	r2, #1
 8007f3a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007f3c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d044      	beq.n	8007fce <f_open+0x28e>
						dw = fs->winsect;
 8007f44:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4a:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8007f4e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8007f52:	2200      	movs	r2, #0
 8007f54:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7fe fb2e 	bl	80065ba <remove_chain>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8007f64:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d130      	bne.n	8007fce <f_open+0x28e>
							res = move_window(fs, dw);
 8007f6c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007f70:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7fe f8d1 	bl	800611c <move_window>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007f80:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007f84:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007f88:	3a01      	subs	r2, #1
 8007f8a:	611a      	str	r2, [r3, #16]
 8007f8c:	e01f      	b.n	8007fce <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007f8e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d11b      	bne.n	8007fce <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007f96:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8007f9a:	f003 0310 	and.w	r3, r3, #16
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d003      	beq.n	8007faa <f_open+0x26a>
					res = FR_NO_FILE;
 8007fa2:	2304      	movs	r3, #4
 8007fa4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007fa8:	e011      	b.n	8007fce <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007faa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007fae:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	f003 0302 	and.w	r3, r3, #2
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d008      	beq.n	8007fce <f_open+0x28e>
 8007fbc:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8007fc0:	f003 0301 	and.w	r3, r3, #1
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d002      	beq.n	8007fce <f_open+0x28e>
						res = FR_DENIED;
 8007fc8:	2307      	movs	r3, #7
 8007fca:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8007fce:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d14a      	bne.n	800806c <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007fd6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007fda:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	f003 0308 	and.w	r3, r3, #8
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00b      	beq.n	8008000 <f_open+0x2c0>
				mode |= FA_MODIFIED;
 8007fe8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007fec:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007ff0:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007ff4:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8007ff8:	7812      	ldrb	r2, [r2, #0]
 8007ffa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ffe:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008000:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008006:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800800a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008012:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8008016:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800801a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008022:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008026:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	f023 0301 	bic.w	r3, r3, #1
 8008030:	2b00      	cmp	r3, #0
 8008032:	bf14      	ite	ne
 8008034:	2301      	movne	r3, #1
 8008036:	2300      	moveq	r3, #0
 8008038:	b2db      	uxtb	r3, r3
 800803a:	461a      	mov	r2, r3
 800803c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008040:	4611      	mov	r1, r2
 8008042:	4618      	mov	r0, r3
 8008044:	f7fd ff38 	bl	8005eb8 <inc_lock>
 8008048:	4602      	mov	r2, r0
 800804a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800804e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008056:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800805a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d102      	bne.n	800806c <f_open+0x32c>
 8008066:	2302      	movs	r3, #2
 8008068:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800806c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008070:	2b00      	cmp	r3, #0
 8008072:	f040 810a 	bne.w	800828a <f_open+0x54a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008076:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800807a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800807e:	4611      	mov	r1, r2
 8008080:	4618      	mov	r0, r3
 8008082:	f7fe fd52 	bl	8006b2a <ld_clust>
 8008086:	4602      	mov	r2, r0
 8008088:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800808c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008094:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8008098:	331c      	adds	r3, #28
 800809a:	4618      	mov	r0, r3
 800809c:	f7fd fda6 	bl	8005bec <ld_dword>
 80080a0:	4602      	mov	r2, r0
 80080a2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080a6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80080ae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080b2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2200      	movs	r2, #0
 80080ba:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80080bc:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80080c0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080c4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80080cc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80080d0:	88da      	ldrh	r2, [r3, #6]
 80080d2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080d6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80080de:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080e2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80080ec:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 80080f0:	7812      	ldrb	r2, [r2, #0]
 80080f2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80080f4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080f8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2200      	movs	r2, #0
 8008100:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008102:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008106:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2200      	movs	r2, #0
 800810e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008110:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008114:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2200      	movs	r2, #0
 800811c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800811e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008122:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	3330      	adds	r3, #48	; 0x30
 800812a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800812e:	2100      	movs	r1, #0
 8008130:	4618      	mov	r0, r3
 8008132:	f7fd fde6 	bl	8005d02 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008136:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800813a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	f003 0320 	and.w	r3, r3, #32
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 80a0 	beq.w	800828a <f_open+0x54a>
 800814a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800814e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	2b00      	cmp	r3, #0
 8008158:	f000 8097 	beq.w	800828a <f_open+0x54a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800815c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008160:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68da      	ldr	r2, [r3, #12]
 8008168:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800816c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008174:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008178:	895b      	ldrh	r3, [r3, #10]
 800817a:	025b      	lsls	r3, r3, #9
 800817c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008180:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008184:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008190:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008194:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80081a0:	e021      	b.n	80081e6 <f_open+0x4a6>
					clst = get_fat(&fp->obj, clst);
 80081a2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80081a6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7fe f86e 	bl	8006292 <get_fat>
 80081b6:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 80081ba:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d802      	bhi.n	80081c8 <f_open+0x488>
 80081c2:	2302      	movs	r3, #2
 80081c4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80081c8:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80081cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081d0:	d102      	bne.n	80081d8 <f_open+0x498>
 80081d2:	2301      	movs	r3, #1
 80081d4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80081d8:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80081dc:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80081e0:	1ad3      	subs	r3, r2, r3
 80081e2:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80081e6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d105      	bne.n	80081fa <f_open+0x4ba>
 80081ee:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80081f2:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d8d3      	bhi.n	80081a2 <f_open+0x462>
				}
				fp->clust = clst;
 80081fa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80081fe:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8008208:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800820a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800820e:	2b00      	cmp	r3, #0
 8008210:	d13b      	bne.n	800828a <f_open+0x54a>
 8008212:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8008216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800821a:	2b00      	cmp	r3, #0
 800821c:	d035      	beq.n	800828a <f_open+0x54a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800821e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008222:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8008226:	4618      	mov	r0, r3
 8008228:	f7fe f814 	bl	8006254 <clust2sect>
 800822c:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8008230:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008234:	2b00      	cmp	r3, #0
 8008236:	d103      	bne.n	8008240 <f_open+0x500>
						res = FR_INT_ERR;
 8008238:	2302      	movs	r3, #2
 800823a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800823e:	e024      	b.n	800828a <f_open+0x54a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008240:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8008244:	0a5a      	lsrs	r2, r3, #9
 8008246:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800824a:	441a      	add	r2, r3
 800824c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008250:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008258:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800825c:	7858      	ldrb	r0, [r3, #1]
 800825e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008262:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800826c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008270:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	6a1a      	ldr	r2, [r3, #32]
 8008278:	2301      	movs	r3, #1
 800827a:	f7fd fc41 	bl	8005b00 <disk_read>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d002      	beq.n	800828a <f_open+0x54a>
 8008284:	2301      	movs	r3, #1
 8008286:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800828a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800828e:	2b00      	cmp	r3, #0
 8008290:	d006      	beq.n	80082a0 <f_open+0x560>
 8008292:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008296:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2200      	movs	r2, #0
 800829e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80082a0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	f507 771a 	add.w	r7, r7, #616	; 0x268
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b08e      	sub	sp, #56	; 0x38
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	60f8      	str	r0, [r7, #12]
 80082b6:	60b9      	str	r1, [r7, #8]
 80082b8:	607a      	str	r2, [r7, #4]
 80082ba:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	2200      	movs	r2, #0
 80082c4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f107 0214 	add.w	r2, r7, #20
 80082cc:	4611      	mov	r1, r2
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7ff fcba 	bl	8007c48 <validate>
 80082d4:	4603      	mov	r3, r0
 80082d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80082da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d107      	bne.n	80082f2 <f_read+0x44>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	7d5b      	ldrb	r3, [r3, #21]
 80082e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80082ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d002      	beq.n	80082f8 <f_read+0x4a>
 80082f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80082f6:	e115      	b.n	8008524 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	7d1b      	ldrb	r3, [r3, #20]
 80082fc:	f003 0301 	and.w	r3, r3, #1
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <f_read+0x5a>
 8008304:	2307      	movs	r3, #7
 8008306:	e10d      	b.n	8008524 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	68da      	ldr	r2, [r3, #12]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	699b      	ldr	r3, [r3, #24]
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	6a3b      	ldr	r3, [r7, #32]
 8008318:	429a      	cmp	r2, r3
 800831a:	f240 80fe 	bls.w	800851a <f_read+0x26c>
 800831e:	6a3b      	ldr	r3, [r7, #32]
 8008320:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008322:	e0fa      	b.n	800851a <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800832c:	2b00      	cmp	r3, #0
 800832e:	f040 80c6 	bne.w	80084be <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	699b      	ldr	r3, [r3, #24]
 8008336:	0a5b      	lsrs	r3, r3, #9
 8008338:	697a      	ldr	r2, [r7, #20]
 800833a:	8952      	ldrh	r2, [r2, #10]
 800833c:	3a01      	subs	r2, #1
 800833e:	4013      	ands	r3, r2
 8008340:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d12f      	bne.n	80083a8 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	699b      	ldr	r3, [r3, #24]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d103      	bne.n	8008358 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	633b      	str	r3, [r7, #48]	; 0x30
 8008356:	e013      	b.n	8008380 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835c:	2b00      	cmp	r3, #0
 800835e:	d007      	beq.n	8008370 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	699b      	ldr	r3, [r3, #24]
 8008364:	4619      	mov	r1, r3
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f7fe fa24 	bl	80067b4 <clmt_clust>
 800836c:	6338      	str	r0, [r7, #48]	; 0x30
 800836e:	e007      	b.n	8008380 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	69db      	ldr	r3, [r3, #28]
 8008376:	4619      	mov	r1, r3
 8008378:	4610      	mov	r0, r2
 800837a:	f7fd ff8a 	bl	8006292 <get_fat>
 800837e:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008382:	2b01      	cmp	r3, #1
 8008384:	d804      	bhi.n	8008390 <f_read+0xe2>
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2202      	movs	r2, #2
 800838a:	755a      	strb	r2, [r3, #21]
 800838c:	2302      	movs	r3, #2
 800838e:	e0c9      	b.n	8008524 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008396:	d104      	bne.n	80083a2 <f_read+0xf4>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2201      	movs	r2, #1
 800839c:	755a      	strb	r2, [r3, #21]
 800839e:	2301      	movs	r3, #1
 80083a0:	e0c0      	b.n	8008524 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083a6:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80083a8:	697a      	ldr	r2, [r7, #20]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	69db      	ldr	r3, [r3, #28]
 80083ae:	4619      	mov	r1, r3
 80083b0:	4610      	mov	r0, r2
 80083b2:	f7fd ff4f 	bl	8006254 <clust2sect>
 80083b6:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80083b8:	69bb      	ldr	r3, [r7, #24]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d104      	bne.n	80083c8 <f_read+0x11a>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2202      	movs	r2, #2
 80083c2:	755a      	strb	r2, [r3, #21]
 80083c4:	2302      	movs	r3, #2
 80083c6:	e0ad      	b.n	8008524 <f_read+0x276>
			sect += csect;
 80083c8:	69ba      	ldr	r2, [r7, #24]
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	4413      	add	r3, r2
 80083ce:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	0a5b      	lsrs	r3, r3, #9
 80083d4:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80083d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d039      	beq.n	8008450 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80083dc:	69fa      	ldr	r2, [r7, #28]
 80083de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e0:	4413      	add	r3, r2
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	8952      	ldrh	r2, [r2, #10]
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d905      	bls.n	80083f6 <f_read+0x148>
					cc = fs->csize - csect;
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	895b      	ldrh	r3, [r3, #10]
 80083ee:	461a      	mov	r2, r3
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	1ad3      	subs	r3, r2, r3
 80083f4:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	7858      	ldrb	r0, [r3, #1]
 80083fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fc:	69ba      	ldr	r2, [r7, #24]
 80083fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008400:	f7fd fb7e 	bl	8005b00 <disk_read>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d004      	beq.n	8008414 <f_read+0x166>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2201      	movs	r2, #1
 800840e:	755a      	strb	r2, [r3, #21]
 8008410:	2301      	movs	r3, #1
 8008412:	e087      	b.n	8008524 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	7d1b      	ldrb	r3, [r3, #20]
 8008418:	b25b      	sxtb	r3, r3
 800841a:	2b00      	cmp	r3, #0
 800841c:	da14      	bge.n	8008448 <f_read+0x19a>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6a1a      	ldr	r2, [r3, #32]
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008428:	429a      	cmp	r2, r3
 800842a:	d90d      	bls.n	8008448 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6a1a      	ldr	r2, [r3, #32]
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	025b      	lsls	r3, r3, #9
 8008436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008438:	18d0      	adds	r0, r2, r3
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	3330      	adds	r3, #48	; 0x30
 800843e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008442:	4619      	mov	r1, r3
 8008444:	f7fd fc3c 	bl	8005cc0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844a:	025b      	lsls	r3, r3, #9
 800844c:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800844e:	e050      	b.n	80084f2 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6a1b      	ldr	r3, [r3, #32]
 8008454:	69ba      	ldr	r2, [r7, #24]
 8008456:	429a      	cmp	r2, r3
 8008458:	d02e      	beq.n	80084b8 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	7d1b      	ldrb	r3, [r3, #20]
 800845e:	b25b      	sxtb	r3, r3
 8008460:	2b00      	cmp	r3, #0
 8008462:	da18      	bge.n	8008496 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	7858      	ldrb	r0, [r3, #1]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6a1a      	ldr	r2, [r3, #32]
 8008472:	2301      	movs	r3, #1
 8008474:	f7fd fb64 	bl	8005b40 <disk_write>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d004      	beq.n	8008488 <f_read+0x1da>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2201      	movs	r2, #1
 8008482:	755a      	strb	r2, [r3, #21]
 8008484:	2301      	movs	r3, #1
 8008486:	e04d      	b.n	8008524 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	7d1b      	ldrb	r3, [r3, #20]
 800848c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008490:	b2da      	uxtb	r2, r3
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	7858      	ldrb	r0, [r3, #1]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80084a0:	2301      	movs	r3, #1
 80084a2:	69ba      	ldr	r2, [r7, #24]
 80084a4:	f7fd fb2c 	bl	8005b00 <disk_read>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d004      	beq.n	80084b8 <f_read+0x20a>
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2201      	movs	r2, #1
 80084b2:	755a      	strb	r2, [r3, #21]
 80084b4:	2301      	movs	r3, #1
 80084b6:	e035      	b.n	8008524 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	69ba      	ldr	r2, [r7, #24]
 80084bc:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	699b      	ldr	r3, [r3, #24]
 80084c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084c6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80084ca:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80084cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d901      	bls.n	80084d8 <f_read+0x22a>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	699b      	ldr	r3, [r3, #24]
 80084e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084e6:	4413      	add	r3, r2
 80084e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084ea:	4619      	mov	r1, r3
 80084ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084ee:	f7fd fbe7 	bl	8005cc0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80084f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f6:	4413      	add	r3, r2
 80084f8:	627b      	str	r3, [r7, #36]	; 0x24
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	699a      	ldr	r2, [r3, #24]
 80084fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008500:	441a      	add	r2, r3
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	619a      	str	r2, [r3, #24]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850c:	441a      	add	r2, r3
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	601a      	str	r2, [r3, #0]
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2b00      	cmp	r3, #0
 800851e:	f47f af01 	bne.w	8008324 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3738      	adds	r7, #56	; 0x38
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b08c      	sub	sp, #48	; 0x30
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	607a      	str	r2, [r7, #4]
 8008538:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	2200      	movs	r2, #0
 8008542:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f107 0210 	add.w	r2, r7, #16
 800854a:	4611      	mov	r1, r2
 800854c:	4618      	mov	r0, r3
 800854e:	f7ff fb7b 	bl	8007c48 <validate>
 8008552:	4603      	mov	r3, r0
 8008554:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008558:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800855c:	2b00      	cmp	r3, #0
 800855e:	d107      	bne.n	8008570 <f_write+0x44>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	7d5b      	ldrb	r3, [r3, #21]
 8008564:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008568:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800856c:	2b00      	cmp	r3, #0
 800856e:	d002      	beq.n	8008576 <f_write+0x4a>
 8008570:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008574:	e14b      	b.n	800880e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	7d1b      	ldrb	r3, [r3, #20]
 800857a:	f003 0302 	and.w	r3, r3, #2
 800857e:	2b00      	cmp	r3, #0
 8008580:	d101      	bne.n	8008586 <f_write+0x5a>
 8008582:	2307      	movs	r3, #7
 8008584:	e143      	b.n	800880e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	699a      	ldr	r2, [r3, #24]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	441a      	add	r2, r3
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	429a      	cmp	r2, r3
 8008594:	f080 812d 	bcs.w	80087f2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	699b      	ldr	r3, [r3, #24]
 800859c:	43db      	mvns	r3, r3
 800859e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80085a0:	e127      	b.n	80087f2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	f040 80e3 	bne.w	8008776 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	699b      	ldr	r3, [r3, #24]
 80085b4:	0a5b      	lsrs	r3, r3, #9
 80085b6:	693a      	ldr	r2, [r7, #16]
 80085b8:	8952      	ldrh	r2, [r2, #10]
 80085ba:	3a01      	subs	r2, #1
 80085bc:	4013      	ands	r3, r2
 80085be:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d143      	bne.n	800864e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d10c      	bne.n	80085e8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80085d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d11a      	bne.n	8008610 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2100      	movs	r1, #0
 80085de:	4618      	mov	r0, r3
 80085e0:	f7fe f850 	bl	8006684 <create_chain>
 80085e4:	62b8      	str	r0, [r7, #40]	; 0x28
 80085e6:	e013      	b.n	8008610 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d007      	beq.n	8008600 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	699b      	ldr	r3, [r3, #24]
 80085f4:	4619      	mov	r1, r3
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f7fe f8dc 	bl	80067b4 <clmt_clust>
 80085fc:	62b8      	str	r0, [r7, #40]	; 0x28
 80085fe:	e007      	b.n	8008610 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	69db      	ldr	r3, [r3, #28]
 8008606:	4619      	mov	r1, r3
 8008608:	4610      	mov	r0, r2
 800860a:	f7fe f83b 	bl	8006684 <create_chain>
 800860e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008612:	2b00      	cmp	r3, #0
 8008614:	f000 80f2 	beq.w	80087fc <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861a:	2b01      	cmp	r3, #1
 800861c:	d104      	bne.n	8008628 <f_write+0xfc>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2202      	movs	r2, #2
 8008622:	755a      	strb	r2, [r3, #21]
 8008624:	2302      	movs	r3, #2
 8008626:	e0f2      	b.n	800880e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800862e:	d104      	bne.n	800863a <f_write+0x10e>
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2201      	movs	r2, #1
 8008634:	755a      	strb	r2, [r3, #21]
 8008636:	2301      	movs	r3, #1
 8008638:	e0e9      	b.n	800880e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800863e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d102      	bne.n	800864e <f_write+0x122>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800864c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	7d1b      	ldrb	r3, [r3, #20]
 8008652:	b25b      	sxtb	r3, r3
 8008654:	2b00      	cmp	r3, #0
 8008656:	da18      	bge.n	800868a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	7858      	ldrb	r0, [r3, #1]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6a1a      	ldr	r2, [r3, #32]
 8008666:	2301      	movs	r3, #1
 8008668:	f7fd fa6a 	bl	8005b40 <disk_write>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d004      	beq.n	800867c <f_write+0x150>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2201      	movs	r2, #1
 8008676:	755a      	strb	r2, [r3, #21]
 8008678:	2301      	movs	r3, #1
 800867a:	e0c8      	b.n	800880e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	7d1b      	ldrb	r3, [r3, #20]
 8008680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008684:	b2da      	uxtb	r2, r3
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800868a:	693a      	ldr	r2, [r7, #16]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	69db      	ldr	r3, [r3, #28]
 8008690:	4619      	mov	r1, r3
 8008692:	4610      	mov	r0, r2
 8008694:	f7fd fdde 	bl	8006254 <clust2sect>
 8008698:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d104      	bne.n	80086aa <f_write+0x17e>
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2202      	movs	r2, #2
 80086a4:	755a      	strb	r2, [r3, #21]
 80086a6:	2302      	movs	r3, #2
 80086a8:	e0b1      	b.n	800880e <f_write+0x2e2>
			sect += csect;
 80086aa:	697a      	ldr	r2, [r7, #20]
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	4413      	add	r3, r2
 80086b0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	0a5b      	lsrs	r3, r3, #9
 80086b6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80086b8:	6a3b      	ldr	r3, [r7, #32]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d03c      	beq.n	8008738 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80086be:	69ba      	ldr	r2, [r7, #24]
 80086c0:	6a3b      	ldr	r3, [r7, #32]
 80086c2:	4413      	add	r3, r2
 80086c4:	693a      	ldr	r2, [r7, #16]
 80086c6:	8952      	ldrh	r2, [r2, #10]
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d905      	bls.n	80086d8 <f_write+0x1ac>
					cc = fs->csize - csect;
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	895b      	ldrh	r3, [r3, #10]
 80086d0:	461a      	mov	r2, r3
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	7858      	ldrb	r0, [r3, #1]
 80086dc:	6a3b      	ldr	r3, [r7, #32]
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	69f9      	ldr	r1, [r7, #28]
 80086e2:	f7fd fa2d 	bl	8005b40 <disk_write>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d004      	beq.n	80086f6 <f_write+0x1ca>
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2201      	movs	r2, #1
 80086f0:	755a      	strb	r2, [r3, #21]
 80086f2:	2301      	movs	r3, #1
 80086f4:	e08b      	b.n	800880e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6a1a      	ldr	r2, [r3, #32]
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	1ad3      	subs	r3, r2, r3
 80086fe:	6a3a      	ldr	r2, [r7, #32]
 8008700:	429a      	cmp	r2, r3
 8008702:	d915      	bls.n	8008730 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6a1a      	ldr	r2, [r3, #32]
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	025b      	lsls	r3, r3, #9
 8008714:	69fa      	ldr	r2, [r7, #28]
 8008716:	4413      	add	r3, r2
 8008718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800871c:	4619      	mov	r1, r3
 800871e:	f7fd facf 	bl	8005cc0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	7d1b      	ldrb	r3, [r3, #20]
 8008726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800872a:	b2da      	uxtb	r2, r3
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008730:	6a3b      	ldr	r3, [r7, #32]
 8008732:	025b      	lsls	r3, r3, #9
 8008734:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008736:	e03f      	b.n	80087b8 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6a1b      	ldr	r3, [r3, #32]
 800873c:	697a      	ldr	r2, [r7, #20]
 800873e:	429a      	cmp	r2, r3
 8008740:	d016      	beq.n	8008770 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	699a      	ldr	r2, [r3, #24]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800874a:	429a      	cmp	r2, r3
 800874c:	d210      	bcs.n	8008770 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	7858      	ldrb	r0, [r3, #1]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008758:	2301      	movs	r3, #1
 800875a:	697a      	ldr	r2, [r7, #20]
 800875c:	f7fd f9d0 	bl	8005b00 <disk_read>
 8008760:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008762:	2b00      	cmp	r3, #0
 8008764:	d004      	beq.n	8008770 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2201      	movs	r2, #1
 800876a:	755a      	strb	r2, [r3, #21]
 800876c:	2301      	movs	r3, #1
 800876e:	e04e      	b.n	800880e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	697a      	ldr	r2, [r7, #20]
 8008774:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800877e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008782:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	429a      	cmp	r2, r3
 800878a:	d901      	bls.n	8008790 <f_write+0x264>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	699b      	ldr	r3, [r3, #24]
 800879a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800879e:	4413      	add	r3, r2
 80087a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087a2:	69f9      	ldr	r1, [r7, #28]
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fd fa8b 	bl	8005cc0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	7d1b      	ldrb	r3, [r3, #20]
 80087ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80087b2:	b2da      	uxtb	r2, r3
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80087b8:	69fa      	ldr	r2, [r7, #28]
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	4413      	add	r3, r2
 80087be:	61fb      	str	r3, [r7, #28]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	699a      	ldr	r2, [r3, #24]
 80087c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c6:	441a      	add	r2, r3
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	619a      	str	r2, [r3, #24]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	68da      	ldr	r2, [r3, #12]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	699b      	ldr	r3, [r3, #24]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	bf38      	it	cc
 80087d8:	461a      	movcc	r2, r3
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	60da      	str	r2, [r3, #12]
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e4:	441a      	add	r2, r3
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	601a      	str	r2, [r3, #0]
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f47f aed4 	bne.w	80085a2 <f_write+0x76>
 80087fa:	e000      	b.n	80087fe <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80087fc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	7d1b      	ldrb	r3, [r3, #20]
 8008802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008806:	b2da      	uxtb	r2, r3
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3730      	adds	r7, #48	; 0x30
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b086      	sub	sp, #24
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f107 0208 	add.w	r2, r7, #8
 8008824:	4611      	mov	r1, r2
 8008826:	4618      	mov	r0, r3
 8008828:	f7ff fa0e 	bl	8007c48 <validate>
 800882c:	4603      	mov	r3, r0
 800882e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008830:	7dfb      	ldrb	r3, [r7, #23]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d168      	bne.n	8008908 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	7d1b      	ldrb	r3, [r3, #20]
 800883a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800883e:	2b00      	cmp	r3, #0
 8008840:	d062      	beq.n	8008908 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	7d1b      	ldrb	r3, [r3, #20]
 8008846:	b25b      	sxtb	r3, r3
 8008848:	2b00      	cmp	r3, #0
 800884a:	da15      	bge.n	8008878 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	7858      	ldrb	r0, [r3, #1]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6a1a      	ldr	r2, [r3, #32]
 800885a:	2301      	movs	r3, #1
 800885c:	f7fd f970 	bl	8005b40 <disk_write>
 8008860:	4603      	mov	r3, r0
 8008862:	2b00      	cmp	r3, #0
 8008864:	d001      	beq.n	800886a <f_sync+0x54>
 8008866:	2301      	movs	r3, #1
 8008868:	e04f      	b.n	800890a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	7d1b      	ldrb	r3, [r3, #20]
 800886e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008872:	b2da      	uxtb	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008878:	f7fc ff3a 	bl	80056f0 <get_fattime>
 800887c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008884:	4619      	mov	r1, r3
 8008886:	4610      	mov	r0, r2
 8008888:	f7fd fc48 	bl	800611c <move_window>
 800888c:	4603      	mov	r3, r0
 800888e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008890:	7dfb      	ldrb	r3, [r7, #23]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d138      	bne.n	8008908 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800889a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	330b      	adds	r3, #11
 80088a0:	781a      	ldrb	r2, [r3, #0]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	330b      	adds	r3, #11
 80088a6:	f042 0220 	orr.w	r2, r2, #32
 80088aa:	b2d2      	uxtb	r2, r2
 80088ac:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6818      	ldr	r0, [r3, #0]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	461a      	mov	r2, r3
 80088b8:	68f9      	ldr	r1, [r7, #12]
 80088ba:	f7fe f955 	bl	8006b68 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f103 021c 	add.w	r2, r3, #28
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	4619      	mov	r1, r3
 80088ca:	4610      	mov	r0, r2
 80088cc:	f7fd f9cc 	bl	8005c68 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	3316      	adds	r3, #22
 80088d4:	6939      	ldr	r1, [r7, #16]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7fd f9c6 	bl	8005c68 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	3312      	adds	r3, #18
 80088e0:	2100      	movs	r1, #0
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fd f9a5 	bl	8005c32 <st_word>
					fs->wflag = 1;
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	2201      	movs	r2, #1
 80088ec:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7fd fc41 	bl	8006178 <sync_fs>
 80088f6:	4603      	mov	r3, r0
 80088f8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	7d1b      	ldrb	r3, [r3, #20]
 80088fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008902:	b2da      	uxtb	r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008908:	7dfb      	ldrb	r3, [r7, #23]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3718      	adds	r7, #24
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008912:	b580      	push	{r7, lr}
 8008914:	b084      	sub	sp, #16
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f7ff ff7b 	bl	8008816 <f_sync>
 8008920:	4603      	mov	r3, r0
 8008922:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008924:	7bfb      	ldrb	r3, [r7, #15]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d118      	bne.n	800895c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f107 0208 	add.w	r2, r7, #8
 8008930:	4611      	mov	r1, r2
 8008932:	4618      	mov	r0, r3
 8008934:	f7ff f988 	bl	8007c48 <validate>
 8008938:	4603      	mov	r3, r0
 800893a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800893c:	7bfb      	ldrb	r3, [r7, #15]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10c      	bne.n	800895c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	4618      	mov	r0, r3
 8008948:	f7fd fb44 	bl	8005fd4 <dec_lock>
 800894c:	4603      	mov	r3, r0
 800894e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008950:	7bfb      	ldrb	r3, [r7, #15]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d102      	bne.n	800895c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800895c:	7bfb      	ldrb	r3, [r7, #15]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
	...

08008968 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8008968:	b590      	push	{r4, r7, lr}
 800896a:	b09d      	sub	sp, #116	; 0x74
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	607a      	str	r2, [r7, #4]
 8008972:	603b      	str	r3, [r7, #0]
 8008974:	460b      	mov	r3, r1
 8008976:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8008978:	2301      	movs	r3, #1
 800897a:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800897c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008980:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8008982:	f107 030c 	add.w	r3, r7, #12
 8008986:	4618      	mov	r0, r3
 8008988:	f7fe fe77 	bl	800767a <get_ldnumber>
 800898c:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800898e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008990:	2b00      	cmp	r3, #0
 8008992:	da02      	bge.n	800899a <f_mkfs+0x32>
 8008994:	230b      	movs	r3, #11
 8008996:	f000 bc0d 	b.w	80091b4 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800899a:	4a94      	ldr	r2, [pc, #592]	; (8008bec <f_mkfs+0x284>)
 800899c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800899e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d005      	beq.n	80089b2 <f_mkfs+0x4a>
 80089a6:	4a91      	ldr	r2, [pc, #580]	; (8008bec <f_mkfs+0x284>)
 80089a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089ae:	2200      	movs	r2, #0
 80089b0:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 80089b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089b4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 80089b8:	2300      	movs	r3, #0
 80089ba:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 80089be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7fd f876 	bl	8005ab4 <disk_initialize>
 80089c8:	4603      	mov	r3, r0
 80089ca:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 80089ce:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80089d2:	f003 0301 	and.w	r3, r3, #1
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d001      	beq.n	80089de <f_mkfs+0x76>
 80089da:	2303      	movs	r3, #3
 80089dc:	e3ea      	b.n	80091b4 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 80089de:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80089e2:	f003 0304 	and.w	r3, r3, #4
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d001      	beq.n	80089ee <f_mkfs+0x86>
 80089ea:	230a      	movs	r3, #10
 80089ec:	e3e2      	b.n	80091b4 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 80089ee:	f107 0214 	add.w	r2, r7, #20
 80089f2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80089f6:	2103      	movs	r1, #3
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7fd f8c1 	bl	8005b80 <disk_ioctl>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10c      	bne.n	8008a1e <f_mkfs+0xb6>
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d009      	beq.n	8008a1e <f_mkfs+0xb6>
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a10:	d805      	bhi.n	8008a1e <f_mkfs+0xb6>
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	1e5a      	subs	r2, r3, #1
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	4013      	ands	r3, r2
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d001      	beq.n	8008a22 <f_mkfs+0xba>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8008a22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a26:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d003      	beq.n	8008a36 <f_mkfs+0xce>
 8008a2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d309      	bcc.n	8008a4a <f_mkfs+0xe2>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a3c:	d805      	bhi.n	8008a4a <f_mkfs+0xe2>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	1e5a      	subs	r2, r3, #1
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4013      	ands	r3, r2
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d001      	beq.n	8008a4e <f_mkfs+0xe6>
 8008a4a:	2313      	movs	r3, #19
 8008a4c:	e3b2      	b.n	80091b4 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8008a4e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a56:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8008a5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008a5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a66:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8008a68:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a6c:	fb02 f303 	mul.w	r3, r2, r3
 8008a70:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8008a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d101      	bne.n	8008a7c <f_mkfs+0x114>
 8008a78:	230e      	movs	r3, #14
 8008a7a:	e39b      	b.n	80091b4 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8008a7c:	f107 0210 	add.w	r2, r7, #16
 8008a80:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008a84:	2101      	movs	r1, #1
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fd f87a 	bl	8005b80 <disk_ioctl>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d001      	beq.n	8008a96 <f_mkfs+0x12e>
 8008a92:	2301      	movs	r3, #1
 8008a94:	e38e      	b.n	80091b4 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8008a96:	7afb      	ldrb	r3, [r7, #11]
 8008a98:	f003 0308 	and.w	r3, r3, #8
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d001      	beq.n	8008aa4 <f_mkfs+0x13c>
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	e000      	b.n	8008aa6 <f_mkfs+0x13e>
 8008aa4:	233f      	movs	r3, #63	; 0x3f
 8008aa6:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d901      	bls.n	8008ab4 <f_mkfs+0x14c>
 8008ab0:	230e      	movs	r3, #14
 8008ab2:	e37f      	b.n	80091b4 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8008ab4:	693a      	ldr	r2, [r7, #16]
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	2b7f      	cmp	r3, #127	; 0x7f
 8008ac0:	d801      	bhi.n	8008ac6 <f_mkfs+0x15e>
 8008ac2:	230e      	movs	r3, #14
 8008ac4:	e376      	b.n	80091b4 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2b80      	cmp	r3, #128	; 0x80
 8008aca:	d901      	bls.n	8008ad0 <f_mkfs+0x168>
 8008acc:	2313      	movs	r3, #19
 8008ace:	e371      	b.n	80091b4 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8008ad0:	7afb      	ldrb	r3, [r7, #11]
 8008ad2:	f003 0302 	and.w	r3, r3, #2
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00d      	beq.n	8008af6 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8008ada:	7afb      	ldrb	r3, [r7, #11]
 8008adc:	f003 0307 	and.w	r3, r3, #7
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	d004      	beq.n	8008aee <f_mkfs+0x186>
 8008ae4:	7afb      	ldrb	r3, [r7, #11]
 8008ae6:	f003 0301 	and.w	r3, r3, #1
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d103      	bne.n	8008af6 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8008aee:	2303      	movs	r3, #3
 8008af0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008af4:	e009      	b.n	8008b0a <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8008af6:	7afb      	ldrb	r3, [r7, #11]
 8008af8:	f003 0301 	and.w	r3, r3, #1
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d101      	bne.n	8008b04 <f_mkfs+0x19c>
 8008b00:	2313      	movs	r3, #19
 8008b02:	e357      	b.n	80091b4 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8008b04:	2302      	movs	r3, #2
 8008b06:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8008b0e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008b12:	2b03      	cmp	r3, #3
 8008b14:	d13c      	bne.n	8008b90 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8008b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d11b      	bne.n	8008b54 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	0c5b      	lsrs	r3, r3, #17
 8008b20:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8008b22:	2300      	movs	r3, #0
 8008b24:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b26:	2301      	movs	r3, #1
 8008b28:	653b      	str	r3, [r7, #80]	; 0x50
 8008b2a:	e005      	b.n	8008b38 <f_mkfs+0x1d0>
 8008b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b2e:	3301      	adds	r3, #1
 8008b30:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b34:	005b      	lsls	r3, r3, #1
 8008b36:	653b      	str	r3, [r7, #80]	; 0x50
 8008b38:	4a2d      	ldr	r2, [pc, #180]	; (8008bf0 <f_mkfs+0x288>)
 8008b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d007      	beq.n	8008b54 <f_mkfs+0x1ec>
 8008b44:	4a2a      	ldr	r2, [pc, #168]	; (8008bf0 <f_mkfs+0x288>)
 8008b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d2eb      	bcs.n	8008b2c <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b5c:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8008b5e:	6a3b      	ldr	r3, [r7, #32]
 8008b60:	3302      	adds	r3, #2
 8008b62:	009a      	lsls	r2, r3, #2
 8008b64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008b66:	4413      	add	r3, r2
 8008b68:	1e5a      	subs	r2, r3, #1
 8008b6a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b70:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8008b72:	2320      	movs	r3, #32
 8008b74:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 8008b76:	2300      	movs	r3, #0
 8008b78:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8008b7a:	6a3b      	ldr	r3, [r7, #32]
 8008b7c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d903      	bls.n	8008b8c <f_mkfs+0x224>
 8008b84:	6a3b      	ldr	r3, [r7, #32]
 8008b86:	4a1b      	ldr	r2, [pc, #108]	; (8008bf4 <f_mkfs+0x28c>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d952      	bls.n	8008c32 <f_mkfs+0x2ca>
 8008b8c:	230e      	movs	r3, #14
 8008b8e:	e311      	b.n	80091b4 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8008b90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d11b      	bne.n	8008bce <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	0b1b      	lsrs	r3, r3, #12
 8008b9a:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	653b      	str	r3, [r7, #80]	; 0x50
 8008ba4:	e005      	b.n	8008bb2 <f_mkfs+0x24a>
 8008ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ba8:	3301      	adds	r3, #1
 8008baa:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bae:	005b      	lsls	r3, r3, #1
 8008bb0:	653b      	str	r3, [r7, #80]	; 0x50
 8008bb2:	4a11      	ldr	r2, [pc, #68]	; (8008bf8 <f_mkfs+0x290>)
 8008bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d007      	beq.n	8008bce <f_mkfs+0x266>
 8008bbe:	4a0e      	ldr	r2, [pc, #56]	; (8008bf8 <f_mkfs+0x290>)
 8008bc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d2eb      	bcs.n	8008ba6 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8008bce:	693a      	ldr	r2, [r7, #16]
 8008bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bd6:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8008bd8:	6a3b      	ldr	r3, [r7, #32]
 8008bda:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d90c      	bls.n	8008bfc <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8008be2:	6a3b      	ldr	r3, [r7, #32]
 8008be4:	3302      	adds	r3, #2
 8008be6:	005b      	lsls	r3, r3, #1
 8008be8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bea:	e012      	b.n	8008c12 <f_mkfs+0x2aa>
 8008bec:	2000084c 	.word	0x2000084c
 8008bf0:	08009e90 	.word	0x08009e90
 8008bf4:	0ffffff5 	.word	0x0ffffff5
 8008bf8:	08009ea0 	.word	0x08009ea0
				} else {
					fmt = FS_FAT12;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8008c02:	6a3a      	ldr	r2, [r7, #32]
 8008c04:	4613      	mov	r3, r2
 8008c06:	005b      	lsls	r3, r3, #1
 8008c08:	4413      	add	r3, r2
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	085b      	lsrs	r3, r3, #1
 8008c0e:	3303      	adds	r3, #3
 8008c10:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8008c12:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008c14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c16:	4413      	add	r3, r2
 8008c18:	1e5a      	subs	r2, r3, #1
 8008c1a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c20:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8008c22:	2301      	movs	r3, #1
 8008c24:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8008c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c28:	015a      	lsls	r2, r3, #5
 8008c2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c30:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8008c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c36:	4413      	add	r3, r2
 8008c38:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8008c3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c3e:	fb03 f202 	mul.w	r2, r3, r2
 8008c42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c44:	4413      	add	r3, r2
 8008c46:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008c48:	4413      	add	r3, r2
 8008c4a:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8008c4c:	697a      	ldr	r2, [r7, #20]
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	4413      	add	r3, r2
 8008c52:	1e5a      	subs	r2, r3, #1
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	425b      	negs	r3, r3
 8008c58:	401a      	ands	r2, r3
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	1ad3      	subs	r3, r2, r3
 8008c5e:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8008c60:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008c64:	2b03      	cmp	r3, #3
 8008c66:	d108      	bne.n	8008c7a <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8008c68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c6c:	4413      	add	r3, r2
 8008c6e:	657b      	str	r3, [r7, #84]	; 0x54
 8008c70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c74:	4413      	add	r3, r2
 8008c76:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c78:	e006      	b.n	8008c88 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8008c7a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c84:	4413      	add	r3, r2
 8008c86:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8008c88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c8a:	011a      	lsls	r2, r3, #4
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	441a      	add	r2, r3
 8008c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c92:	1ad2      	subs	r2, r2, r3
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d901      	bls.n	8008c9e <f_mkfs+0x336>
 8008c9a:	230e      	movs	r3, #14
 8008c9c:	e28a      	b.n	80091b4 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8008c9e:	693a      	ldr	r2, [r7, #16]
 8008ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ca2:	1ad2      	subs	r2, r2, r3
 8008ca4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ca6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ca8:	fb01 f303 	mul.w	r3, r1, r3
 8008cac:	1ad2      	subs	r2, r2, r3
 8008cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cb0:	1ad2      	subs	r2, r2, r3
 8008cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cb8:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8008cba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008cbe:	2b03      	cmp	r3, #3
 8008cc0:	d10f      	bne.n	8008ce2 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8008cc2:	6a3b      	ldr	r3, [r7, #32]
 8008cc4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d80a      	bhi.n	8008ce2 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d105      	bne.n	8008cde <f_mkfs+0x376>
 8008cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cd4:	085b      	lsrs	r3, r3, #1
 8008cd6:	607b      	str	r3, [r7, #4]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d144      	bne.n	8008d68 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8008cde:	230e      	movs	r3, #14
 8008ce0:	e268      	b.n	80091b4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8008ce2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d133      	bne.n	8008d52 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8008cea:	6a3b      	ldr	r3, [r7, #32]
 8008cec:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d91e      	bls.n	8008d32 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d107      	bne.n	8008d0a <f_mkfs+0x3a2>
 8008cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cfc:	005b      	lsls	r3, r3, #1
 8008cfe:	2b40      	cmp	r3, #64	; 0x40
 8008d00:	d803      	bhi.n	8008d0a <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8008d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d04:	005b      	lsls	r3, r3, #1
 8008d06:	607b      	str	r3, [r7, #4]
 8008d08:	e033      	b.n	8008d72 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8008d0a:	7afb      	ldrb	r3, [r7, #11]
 8008d0c:	f003 0302 	and.w	r3, r3, #2
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d003      	beq.n	8008d1c <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8008d14:	2303      	movs	r3, #3
 8008d16:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008d1a:	e02a      	b.n	8008d72 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d105      	bne.n	8008d2e <f_mkfs+0x3c6>
 8008d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d24:	005b      	lsls	r3, r3, #1
 8008d26:	607b      	str	r3, [r7, #4]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2b80      	cmp	r3, #128	; 0x80
 8008d2c:	d91e      	bls.n	8008d6c <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8008d2e:	230e      	movs	r3, #14
 8008d30:	e240      	b.n	80091b4 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8008d32:	6a3b      	ldr	r3, [r7, #32]
 8008d34:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d80a      	bhi.n	8008d52 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d105      	bne.n	8008d4e <f_mkfs+0x3e6>
 8008d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d44:	005b      	lsls	r3, r3, #1
 8008d46:	607b      	str	r3, [r7, #4]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2b80      	cmp	r3, #128	; 0x80
 8008d4c:	d910      	bls.n	8008d70 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8008d4e:	230e      	movs	r3, #14
 8008d50:	e230      	b.n	80091b4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8008d52:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d10c      	bne.n	8008d74 <f_mkfs+0x40c>
 8008d5a:	6a3b      	ldr	r3, [r7, #32]
 8008d5c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d907      	bls.n	8008d74 <f_mkfs+0x40c>
 8008d64:	230e      	movs	r3, #14
 8008d66:	e225      	b.n	80091b4 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8008d68:	bf00      	nop
 8008d6a:	e6ce      	b.n	8008b0a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8008d6c:	bf00      	nop
 8008d6e:	e6cc      	b.n	8008b0a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8008d70:	bf00      	nop
			pau = au;
 8008d72:	e6ca      	b.n	8008b0a <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8008d74:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8008d76:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008d78:	461a      	mov	r2, r3
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d7e:	f7fc ffc0 	bl	8005d02 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8008d82:	220b      	movs	r2, #11
 8008d84:	49b2      	ldr	r1, [pc, #712]	; (8009050 <f_mkfs+0x6e8>)
 8008d86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d88:	f7fc ff9a 	bl	8005cc0 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8008d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8e:	330b      	adds	r3, #11
 8008d90:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008d92:	4611      	mov	r1, r2
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7fc ff4c 	bl	8005c32 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8008d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9c:	330d      	adds	r3, #13
 8008d9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008da0:	b2d2      	uxtb	r2, r2
 8008da2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8008da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da6:	330e      	adds	r3, #14
 8008da8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008daa:	b292      	uxth	r2, r2
 8008dac:	4611      	mov	r1, r2
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7fc ff3f 	bl	8005c32 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8008db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db6:	3310      	adds	r3, #16
 8008db8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008dba:	b2d2      	uxtb	r2, r2
 8008dbc:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8008dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc0:	f103 0211 	add.w	r2, r3, #17
 8008dc4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008dc8:	2b03      	cmp	r3, #3
 8008dca:	d002      	beq.n	8008dd2 <f_mkfs+0x46a>
 8008dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	e000      	b.n	8008dd4 <f_mkfs+0x46c>
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	4610      	mov	r0, r2
 8008dd8:	f7fc ff2b 	bl	8005c32 <st_word>
		if (sz_vol < 0x10000) {
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008de2:	d208      	bcs.n	8008df6 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8008de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de6:	3313      	adds	r3, #19
 8008de8:	693a      	ldr	r2, [r7, #16]
 8008dea:	b292      	uxth	r2, r2
 8008dec:	4611      	mov	r1, r2
 8008dee:	4618      	mov	r0, r3
 8008df0:	f7fc ff1f 	bl	8005c32 <st_word>
 8008df4:	e006      	b.n	8008e04 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8008df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df8:	3320      	adds	r3, #32
 8008dfa:	693a      	ldr	r2, [r7, #16]
 8008dfc:	4611      	mov	r1, r2
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7fc ff32 	bl	8005c68 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8008e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e06:	3315      	adds	r3, #21
 8008e08:	22f8      	movs	r2, #248	; 0xf8
 8008e0a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8008e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0e:	3318      	adds	r3, #24
 8008e10:	213f      	movs	r1, #63	; 0x3f
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7fc ff0d 	bl	8005c32 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8008e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1a:	331a      	adds	r3, #26
 8008e1c:	21ff      	movs	r1, #255	; 0xff
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7fc ff07 	bl	8005c32 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8008e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e26:	331c      	adds	r3, #28
 8008e28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7fc ff1c 	bl	8005c68 <st_dword>
		if (fmt == FS_FAT32) {
 8008e30:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008e34:	2b03      	cmp	r3, #3
 8008e36:	d131      	bne.n	8008e9c <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8008e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3a:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8008e3e:	f7fc fc57 	bl	80056f0 <get_fattime>
 8008e42:	4603      	mov	r3, r0
 8008e44:	4619      	mov	r1, r3
 8008e46:	4620      	mov	r0, r4
 8008e48:	f7fc ff0e 	bl	8005c68 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8008e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4e:	3324      	adds	r3, #36	; 0x24
 8008e50:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7fc ff08 	bl	8005c68 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8008e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5a:	332c      	adds	r3, #44	; 0x2c
 8008e5c:	2102      	movs	r1, #2
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7fc ff02 	bl	8005c68 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8008e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e66:	3330      	adds	r3, #48	; 0x30
 8008e68:	2101      	movs	r1, #1
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7fc fee1 	bl	8005c32 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8008e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e72:	3332      	adds	r3, #50	; 0x32
 8008e74:	2106      	movs	r1, #6
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7fc fedb 	bl	8005c32 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8008e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7e:	3340      	adds	r3, #64	; 0x40
 8008e80:	2280      	movs	r2, #128	; 0x80
 8008e82:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8008e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e86:	3342      	adds	r3, #66	; 0x42
 8008e88:	2229      	movs	r2, #41	; 0x29
 8008e8a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8008e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8e:	3347      	adds	r3, #71	; 0x47
 8008e90:	2213      	movs	r2, #19
 8008e92:	4970      	ldr	r1, [pc, #448]	; (8009054 <f_mkfs+0x6ec>)
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7fc ff13 	bl	8005cc0 <mem_cpy>
 8008e9a:	e020      	b.n	8008ede <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8008e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9e:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8008ea2:	f7fc fc25 	bl	80056f0 <get_fattime>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f7fc fedc 	bl	8005c68 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8008eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb2:	3316      	adds	r3, #22
 8008eb4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008eb6:	b292      	uxth	r2, r2
 8008eb8:	4611      	mov	r1, r2
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7fc feb9 	bl	8005c32 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8008ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec2:	3324      	adds	r3, #36	; 0x24
 8008ec4:	2280      	movs	r2, #128	; 0x80
 8008ec6:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8008ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eca:	3326      	adds	r3, #38	; 0x26
 8008ecc:	2229      	movs	r2, #41	; 0x29
 8008ece:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8008ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed2:	332b      	adds	r3, #43	; 0x2b
 8008ed4:	2213      	movs	r2, #19
 8008ed6:	4960      	ldr	r1, [pc, #384]	; (8009058 <f_mkfs+0x6f0>)
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7fc fef1 	bl	8005cc0 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8008ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008ee4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7fc fea2 	bl	8005c32 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8008eee:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ef6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ef8:	f7fc fe22 	bl	8005b40 <disk_write>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d001      	beq.n	8008f06 <f_mkfs+0x59e>
 8008f02:	2301      	movs	r3, #1
 8008f04:	e156      	b.n	80091b4 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8008f06:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008f0a:	2b03      	cmp	r3, #3
 8008f0c:	d140      	bne.n	8008f90 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f10:	1d9a      	adds	r2, r3, #6
 8008f12:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8008f16:	2301      	movs	r3, #1
 8008f18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f1a:	f7fc fe11 	bl	8005b40 <disk_write>
			mem_set(buf, 0, ss);
 8008f1e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008f20:	461a      	mov	r2, r3
 8008f22:	2100      	movs	r1, #0
 8008f24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f26:	f7fc feec 	bl	8005d02 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8008f2a:	494c      	ldr	r1, [pc, #304]	; (800905c <f_mkfs+0x6f4>)
 8008f2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f2e:	f7fc fe9b 	bl	8005c68 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8008f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f34:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008f38:	4949      	ldr	r1, [pc, #292]	; (8009060 <f_mkfs+0x6f8>)
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7fc fe94 	bl	8005c68 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8008f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f42:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008f46:	6a3b      	ldr	r3, [r7, #32]
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	4610      	mov	r0, r2
 8008f4e:	f7fc fe8b 	bl	8005c68 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8008f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f54:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008f58:	2102      	movs	r1, #2
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7fc fe84 	bl	8005c68 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8008f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008f66:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fc fe61 	bl	8005c32 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8008f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f72:	1dda      	adds	r2, r3, #7
 8008f74:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8008f78:	2301      	movs	r3, #1
 8008f7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f7c:	f7fc fde0 	bl	8005b40 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8008f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f82:	1c5a      	adds	r2, r3, #1
 8008f84:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8008f88:	2301      	movs	r3, #1
 8008f8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f8c:	f7fc fdd8 	bl	8005b40 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8008f90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f92:	2100      	movs	r1, #0
 8008f94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f96:	f7fc feb4 	bl	8005d02 <mem_set>
		sect = b_fat;		/* FAT start sector */
 8008f9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f9c:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fa2:	e04b      	b.n	800903c <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8008fa4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008fa8:	2b03      	cmp	r3, #3
 8008faa:	d113      	bne.n	8008fd4 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8008fac:	f06f 0107 	mvn.w	r1, #7
 8008fb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fb2:	f7fc fe59 	bl	8005c68 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb8:	3304      	adds	r3, #4
 8008fba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7fc fe52 	bl	8005c68 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8008fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc6:	3308      	adds	r3, #8
 8008fc8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7fc fe4b 	bl	8005c68 <st_dword>
 8008fd2:	e00b      	b.n	8008fec <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8008fd4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d101      	bne.n	8008fe0 <f_mkfs+0x678>
 8008fdc:	4b21      	ldr	r3, [pc, #132]	; (8009064 <f_mkfs+0x6fc>)
 8008fde:	e001      	b.n	8008fe4 <f_mkfs+0x67c>
 8008fe0:	f06f 0307 	mvn.w	r3, #7
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fe8:	f7fc fe3e 	bl	8005c68 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8008fec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008fee:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8008ff0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	bf28      	it	cs
 8008ff8:	4613      	movcs	r3, r2
 8008ffa:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8008ffc:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8009000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009002:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009004:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009006:	f7fc fd9b 	bl	8005b40 <disk_write>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d001      	beq.n	8009014 <f_mkfs+0x6ac>
 8009010:	2301      	movs	r3, #1
 8009012:	e0cf      	b.n	80091b4 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8009014:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009016:	461a      	mov	r2, r3
 8009018:	2100      	movs	r1, #0
 800901a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800901c:	f7fc fe71 	bl	8005d02 <mem_set>
				sect += n; nsect -= n;
 8009020:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009024:	4413      	add	r3, r2
 8009026:	667b      	str	r3, [r7, #100]	; 0x64
 8009028:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800902a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8009030:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1dc      	bne.n	8008ff0 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8009036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009038:	3301      	adds	r3, #1
 800903a:	64bb      	str	r3, [r7, #72]	; 0x48
 800903c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800903e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009040:	429a      	cmp	r2, r3
 8009042:	d3af      	bcc.n	8008fa4 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8009044:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009048:	2b03      	cmp	r3, #3
 800904a:	d10d      	bne.n	8009068 <f_mkfs+0x700>
 800904c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800904e:	e00c      	b.n	800906a <f_mkfs+0x702>
 8009050:	08009da0 	.word	0x08009da0
 8009054:	08009dac 	.word	0x08009dac
 8009058:	08009dc0 	.word	0x08009dc0
 800905c:	41615252 	.word	0x41615252
 8009060:	61417272 	.word	0x61417272
 8009064:	00fffff8 	.word	0x00fffff8
 8009068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800906a:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800906c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800906e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009070:	4293      	cmp	r3, r2
 8009072:	bf28      	it	cs
 8009074:	4613      	movcs	r3, r2
 8009076:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8009078:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800907c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800907e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009080:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009082:	f7fc fd5d 	bl	8005b40 <disk_write>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d001      	beq.n	8009090 <f_mkfs+0x728>
 800908c:	2301      	movs	r3, #1
 800908e:	e091      	b.n	80091b4 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8009090:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009094:	4413      	add	r3, r2
 8009096:	667b      	str	r3, [r7, #100]	; 0x64
 8009098:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800909a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800909c:	1ad3      	subs	r3, r2, r3
 800909e:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 80090a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d1e2      	bne.n	800906c <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 80090a6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80090aa:	2b03      	cmp	r3, #3
 80090ac:	d103      	bne.n	80090b6 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 80090ae:	230c      	movs	r3, #12
 80090b0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80090b4:	e010      	b.n	80090d8 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090bc:	d303      	bcc.n	80090c6 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 80090be:	2306      	movs	r3, #6
 80090c0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80090c4:	e008      	b.n	80090d8 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 80090c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80090ca:	2b02      	cmp	r3, #2
 80090cc:	d101      	bne.n	80090d2 <f_mkfs+0x76a>
 80090ce:	2304      	movs	r3, #4
 80090d0:	e000      	b.n	80090d4 <f_mkfs+0x76c>
 80090d2:	2301      	movs	r3, #1
 80090d4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 80090d8:	7afb      	ldrb	r3, [r7, #11]
 80090da:	f003 0308 	and.w	r3, r3, #8
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d15b      	bne.n	800919a <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 80090e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80090e4:	461a      	mov	r2, r3
 80090e6:	2100      	movs	r1, #0
 80090e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090ea:	f7fc fe0a 	bl	8005d02 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 80090ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80090f4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7fc fd9a 	bl	8005c32 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 80090fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009100:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009104:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8009106:	69bb      	ldr	r3, [r7, #24]
 8009108:	2200      	movs	r2, #0
 800910a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800910c:	69bb      	ldr	r3, [r7, #24]
 800910e:	3301      	adds	r3, #1
 8009110:	2201      	movs	r2, #1
 8009112:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	3302      	adds	r3, #2
 8009118:	2201      	movs	r2, #1
 800911a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	3303      	adds	r3, #3
 8009120:	2200      	movs	r2, #0
 8009122:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	3304      	adds	r3, #4
 8009128:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800912c:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800912e:	693a      	ldr	r2, [r7, #16]
 8009130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009132:	441a      	add	r2, r3
 8009134:	4b21      	ldr	r3, [pc, #132]	; (80091bc <f_mkfs+0x854>)
 8009136:	fba3 1302 	umull	r1, r3, r3, r2
 800913a:	1ad2      	subs	r2, r2, r3
 800913c:	0852      	lsrs	r2, r2, #1
 800913e:	4413      	add	r3, r2
 8009140:	0b5b      	lsrs	r3, r3, #13
 8009142:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	3305      	adds	r3, #5
 8009148:	22fe      	movs	r2, #254	; 0xfe
 800914a:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800914c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800914e:	089b      	lsrs	r3, r3, #2
 8009150:	b2da      	uxtb	r2, r3
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	3306      	adds	r3, #6
 8009156:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800915a:	b2d2      	uxtb	r2, r2
 800915c:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	3307      	adds	r3, #7
 8009162:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009164:	b2d2      	uxtb	r2, r2
 8009166:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	3308      	adds	r3, #8
 800916c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800916e:	4618      	mov	r0, r3
 8009170:	f7fc fd7a 	bl	8005c68 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	330c      	adds	r3, #12
 8009178:	693a      	ldr	r2, [r7, #16]
 800917a:	4611      	mov	r1, r2
 800917c:	4618      	mov	r0, r3
 800917e:	f7fc fd73 	bl	8005c68 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8009182:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8009186:	2301      	movs	r3, #1
 8009188:	2200      	movs	r2, #0
 800918a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800918c:	f7fc fcd8 	bl	8005b40 <disk_write>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d001      	beq.n	800919a <f_mkfs+0x832>
 8009196:	2301      	movs	r3, #1
 8009198:	e00c      	b.n	80091b4 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800919a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800919e:	2200      	movs	r2, #0
 80091a0:	2100      	movs	r1, #0
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7fc fcec 	bl	8005b80 <disk_ioctl>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d001      	beq.n	80091b2 <f_mkfs+0x84a>
 80091ae:	2301      	movs	r3, #1
 80091b0:	e000      	b.n	80091b4 <f_mkfs+0x84c>

	return FR_OK;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3774      	adds	r7, #116	; 0x74
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd90      	pop	{r4, r7, pc}
 80091bc:	0515565b 	.word	0x0515565b

080091c0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b087      	sub	sp, #28
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	4613      	mov	r3, r2
 80091cc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80091ce:	2301      	movs	r3, #1
 80091d0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80091d2:	2300      	movs	r3, #0
 80091d4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80091d6:	4b1f      	ldr	r3, [pc, #124]	; (8009254 <FATFS_LinkDriverEx+0x94>)
 80091d8:	7a5b      	ldrb	r3, [r3, #9]
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d131      	bne.n	8009244 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80091e0:	4b1c      	ldr	r3, [pc, #112]	; (8009254 <FATFS_LinkDriverEx+0x94>)
 80091e2:	7a5b      	ldrb	r3, [r3, #9]
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	461a      	mov	r2, r3
 80091e8:	4b1a      	ldr	r3, [pc, #104]	; (8009254 <FATFS_LinkDriverEx+0x94>)
 80091ea:	2100      	movs	r1, #0
 80091ec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80091ee:	4b19      	ldr	r3, [pc, #100]	; (8009254 <FATFS_LinkDriverEx+0x94>)
 80091f0:	7a5b      	ldrb	r3, [r3, #9]
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	4a17      	ldr	r2, [pc, #92]	; (8009254 <FATFS_LinkDriverEx+0x94>)
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	4413      	add	r3, r2
 80091fa:	68fa      	ldr	r2, [r7, #12]
 80091fc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80091fe:	4b15      	ldr	r3, [pc, #84]	; (8009254 <FATFS_LinkDriverEx+0x94>)
 8009200:	7a5b      	ldrb	r3, [r3, #9]
 8009202:	b2db      	uxtb	r3, r3
 8009204:	461a      	mov	r2, r3
 8009206:	4b13      	ldr	r3, [pc, #76]	; (8009254 <FATFS_LinkDriverEx+0x94>)
 8009208:	4413      	add	r3, r2
 800920a:	79fa      	ldrb	r2, [r7, #7]
 800920c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800920e:	4b11      	ldr	r3, [pc, #68]	; (8009254 <FATFS_LinkDriverEx+0x94>)
 8009210:	7a5b      	ldrb	r3, [r3, #9]
 8009212:	b2db      	uxtb	r3, r3
 8009214:	1c5a      	adds	r2, r3, #1
 8009216:	b2d1      	uxtb	r1, r2
 8009218:	4a0e      	ldr	r2, [pc, #56]	; (8009254 <FATFS_LinkDriverEx+0x94>)
 800921a:	7251      	strb	r1, [r2, #9]
 800921c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800921e:	7dbb      	ldrb	r3, [r7, #22]
 8009220:	3330      	adds	r3, #48	; 0x30
 8009222:	b2da      	uxtb	r2, r3
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	3301      	adds	r3, #1
 800922c:	223a      	movs	r2, #58	; 0x3a
 800922e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	3302      	adds	r3, #2
 8009234:	222f      	movs	r2, #47	; 0x2f
 8009236:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	3303      	adds	r3, #3
 800923c:	2200      	movs	r2, #0
 800923e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009240:	2300      	movs	r3, #0
 8009242:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009244:	7dfb      	ldrb	r3, [r7, #23]
}
 8009246:	4618      	mov	r0, r3
 8009248:	371c      	adds	r7, #28
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	20000874 	.word	0x20000874

08009258 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009262:	2200      	movs	r2, #0
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f7ff ffaa 	bl	80091c0 <FATFS_LinkDriverEx>
 800926c:	4603      	mov	r3, r0
}
 800926e:	4618      	mov	r0, r3
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
	...

08009278 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	4603      	mov	r3, r0
 8009280:	6039      	str	r1, [r7, #0]
 8009282:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009284:	88fb      	ldrh	r3, [r7, #6]
 8009286:	2b7f      	cmp	r3, #127	; 0x7f
 8009288:	d802      	bhi.n	8009290 <ff_convert+0x18>
		c = chr;
 800928a:	88fb      	ldrh	r3, [r7, #6]
 800928c:	81fb      	strh	r3, [r7, #14]
 800928e:	e025      	b.n	80092dc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00b      	beq.n	80092ae <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009296:	88fb      	ldrh	r3, [r7, #6]
 8009298:	2bff      	cmp	r3, #255	; 0xff
 800929a:	d805      	bhi.n	80092a8 <ff_convert+0x30>
 800929c:	88fb      	ldrh	r3, [r7, #6]
 800929e:	3b80      	subs	r3, #128	; 0x80
 80092a0:	4a12      	ldr	r2, [pc, #72]	; (80092ec <ff_convert+0x74>)
 80092a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092a6:	e000      	b.n	80092aa <ff_convert+0x32>
 80092a8:	2300      	movs	r3, #0
 80092aa:	81fb      	strh	r3, [r7, #14]
 80092ac:	e016      	b.n	80092dc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80092ae:	2300      	movs	r3, #0
 80092b0:	81fb      	strh	r3, [r7, #14]
 80092b2:	e009      	b.n	80092c8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80092b4:	89fb      	ldrh	r3, [r7, #14]
 80092b6:	4a0d      	ldr	r2, [pc, #52]	; (80092ec <ff_convert+0x74>)
 80092b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092bc:	88fa      	ldrh	r2, [r7, #6]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d006      	beq.n	80092d0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80092c2:	89fb      	ldrh	r3, [r7, #14]
 80092c4:	3301      	adds	r3, #1
 80092c6:	81fb      	strh	r3, [r7, #14]
 80092c8:	89fb      	ldrh	r3, [r7, #14]
 80092ca:	2b7f      	cmp	r3, #127	; 0x7f
 80092cc:	d9f2      	bls.n	80092b4 <ff_convert+0x3c>
 80092ce:	e000      	b.n	80092d2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80092d0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80092d2:	89fb      	ldrh	r3, [r7, #14]
 80092d4:	3380      	adds	r3, #128	; 0x80
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80092dc:	89fb      	ldrh	r3, [r7, #14]
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3714      	adds	r7, #20
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop
 80092ec:	08009eb0 	.word	0x08009eb0

080092f0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b087      	sub	sp, #28
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	4603      	mov	r3, r0
 80092f8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80092fa:	88fb      	ldrh	r3, [r7, #6]
 80092fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009300:	d201      	bcs.n	8009306 <ff_wtoupper+0x16>
 8009302:	4b3e      	ldr	r3, [pc, #248]	; (80093fc <ff_wtoupper+0x10c>)
 8009304:	e000      	b.n	8009308 <ff_wtoupper+0x18>
 8009306:	4b3e      	ldr	r3, [pc, #248]	; (8009400 <ff_wtoupper+0x110>)
 8009308:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	1c9a      	adds	r2, r3, #2
 800930e:	617a      	str	r2, [r7, #20]
 8009310:	881b      	ldrh	r3, [r3, #0]
 8009312:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009314:	8a7b      	ldrh	r3, [r7, #18]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d068      	beq.n	80093ec <ff_wtoupper+0xfc>
 800931a:	88fa      	ldrh	r2, [r7, #6]
 800931c:	8a7b      	ldrh	r3, [r7, #18]
 800931e:	429a      	cmp	r2, r3
 8009320:	d364      	bcc.n	80093ec <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	1c9a      	adds	r2, r3, #2
 8009326:	617a      	str	r2, [r7, #20]
 8009328:	881b      	ldrh	r3, [r3, #0]
 800932a:	823b      	strh	r3, [r7, #16]
 800932c:	8a3b      	ldrh	r3, [r7, #16]
 800932e:	0a1b      	lsrs	r3, r3, #8
 8009330:	81fb      	strh	r3, [r7, #14]
 8009332:	8a3b      	ldrh	r3, [r7, #16]
 8009334:	b2db      	uxtb	r3, r3
 8009336:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009338:	88fa      	ldrh	r2, [r7, #6]
 800933a:	8a79      	ldrh	r1, [r7, #18]
 800933c:	8a3b      	ldrh	r3, [r7, #16]
 800933e:	440b      	add	r3, r1
 8009340:	429a      	cmp	r2, r3
 8009342:	da49      	bge.n	80093d8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8009344:	89fb      	ldrh	r3, [r7, #14]
 8009346:	2b08      	cmp	r3, #8
 8009348:	d84f      	bhi.n	80093ea <ff_wtoupper+0xfa>
 800934a:	a201      	add	r2, pc, #4	; (adr r2, 8009350 <ff_wtoupper+0x60>)
 800934c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009350:	08009375 	.word	0x08009375
 8009354:	08009387 	.word	0x08009387
 8009358:	0800939d 	.word	0x0800939d
 800935c:	080093a5 	.word	0x080093a5
 8009360:	080093ad 	.word	0x080093ad
 8009364:	080093b5 	.word	0x080093b5
 8009368:	080093bd 	.word	0x080093bd
 800936c:	080093c5 	.word	0x080093c5
 8009370:	080093cd 	.word	0x080093cd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009374:	88fa      	ldrh	r2, [r7, #6]
 8009376:	8a7b      	ldrh	r3, [r7, #18]
 8009378:	1ad3      	subs	r3, r2, r3
 800937a:	005b      	lsls	r3, r3, #1
 800937c:	697a      	ldr	r2, [r7, #20]
 800937e:	4413      	add	r3, r2
 8009380:	881b      	ldrh	r3, [r3, #0]
 8009382:	80fb      	strh	r3, [r7, #6]
 8009384:	e027      	b.n	80093d6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8009386:	88fa      	ldrh	r2, [r7, #6]
 8009388:	8a7b      	ldrh	r3, [r7, #18]
 800938a:	1ad3      	subs	r3, r2, r3
 800938c:	b29b      	uxth	r3, r3
 800938e:	f003 0301 	and.w	r3, r3, #1
 8009392:	b29b      	uxth	r3, r3
 8009394:	88fa      	ldrh	r2, [r7, #6]
 8009396:	1ad3      	subs	r3, r2, r3
 8009398:	80fb      	strh	r3, [r7, #6]
 800939a:	e01c      	b.n	80093d6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800939c:	88fb      	ldrh	r3, [r7, #6]
 800939e:	3b10      	subs	r3, #16
 80093a0:	80fb      	strh	r3, [r7, #6]
 80093a2:	e018      	b.n	80093d6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80093a4:	88fb      	ldrh	r3, [r7, #6]
 80093a6:	3b20      	subs	r3, #32
 80093a8:	80fb      	strh	r3, [r7, #6]
 80093aa:	e014      	b.n	80093d6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80093ac:	88fb      	ldrh	r3, [r7, #6]
 80093ae:	3b30      	subs	r3, #48	; 0x30
 80093b0:	80fb      	strh	r3, [r7, #6]
 80093b2:	e010      	b.n	80093d6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80093b4:	88fb      	ldrh	r3, [r7, #6]
 80093b6:	3b1a      	subs	r3, #26
 80093b8:	80fb      	strh	r3, [r7, #6]
 80093ba:	e00c      	b.n	80093d6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80093bc:	88fb      	ldrh	r3, [r7, #6]
 80093be:	3308      	adds	r3, #8
 80093c0:	80fb      	strh	r3, [r7, #6]
 80093c2:	e008      	b.n	80093d6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80093c4:	88fb      	ldrh	r3, [r7, #6]
 80093c6:	3b50      	subs	r3, #80	; 0x50
 80093c8:	80fb      	strh	r3, [r7, #6]
 80093ca:	e004      	b.n	80093d6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80093cc:	88fb      	ldrh	r3, [r7, #6]
 80093ce:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80093d2:	80fb      	strh	r3, [r7, #6]
 80093d4:	bf00      	nop
			}
			break;
 80093d6:	e008      	b.n	80093ea <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80093d8:	89fb      	ldrh	r3, [r7, #14]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d195      	bne.n	800930a <ff_wtoupper+0x1a>
 80093de:	8a3b      	ldrh	r3, [r7, #16]
 80093e0:	005b      	lsls	r3, r3, #1
 80093e2:	697a      	ldr	r2, [r7, #20]
 80093e4:	4413      	add	r3, r2
 80093e6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80093e8:	e78f      	b.n	800930a <ff_wtoupper+0x1a>
			break;
 80093ea:	bf00      	nop
	}

	return chr;
 80093ec:	88fb      	ldrh	r3, [r7, #6]
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	371c      	adds	r7, #28
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr
 80093fa:	bf00      	nop
 80093fc:	08009fb0 	.word	0x08009fb0
 8009400:	0800a1a4 	.word	0x0800a1a4

08009404 <__errno>:
 8009404:	4b01      	ldr	r3, [pc, #4]	; (800940c <__errno+0x8>)
 8009406:	6818      	ldr	r0, [r3, #0]
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	20000014 	.word	0x20000014

08009410 <__libc_init_array>:
 8009410:	b570      	push	{r4, r5, r6, lr}
 8009412:	4d0d      	ldr	r5, [pc, #52]	; (8009448 <__libc_init_array+0x38>)
 8009414:	4c0d      	ldr	r4, [pc, #52]	; (800944c <__libc_init_array+0x3c>)
 8009416:	1b64      	subs	r4, r4, r5
 8009418:	10a4      	asrs	r4, r4, #2
 800941a:	2600      	movs	r6, #0
 800941c:	42a6      	cmp	r6, r4
 800941e:	d109      	bne.n	8009434 <__libc_init_array+0x24>
 8009420:	4d0b      	ldr	r5, [pc, #44]	; (8009450 <__libc_init_array+0x40>)
 8009422:	4c0c      	ldr	r4, [pc, #48]	; (8009454 <__libc_init_array+0x44>)
 8009424:	f000 fc8e 	bl	8009d44 <_init>
 8009428:	1b64      	subs	r4, r4, r5
 800942a:	10a4      	asrs	r4, r4, #2
 800942c:	2600      	movs	r6, #0
 800942e:	42a6      	cmp	r6, r4
 8009430:	d105      	bne.n	800943e <__libc_init_array+0x2e>
 8009432:	bd70      	pop	{r4, r5, r6, pc}
 8009434:	f855 3b04 	ldr.w	r3, [r5], #4
 8009438:	4798      	blx	r3
 800943a:	3601      	adds	r6, #1
 800943c:	e7ee      	b.n	800941c <__libc_init_array+0xc>
 800943e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009442:	4798      	blx	r3
 8009444:	3601      	adds	r6, #1
 8009446:	e7f2      	b.n	800942e <__libc_init_array+0x1e>
 8009448:	0800a29c 	.word	0x0800a29c
 800944c:	0800a29c 	.word	0x0800a29c
 8009450:	0800a29c 	.word	0x0800a29c
 8009454:	0800a2a0 	.word	0x0800a2a0

08009458 <memset>:
 8009458:	4402      	add	r2, r0
 800945a:	4603      	mov	r3, r0
 800945c:	4293      	cmp	r3, r2
 800945e:	d100      	bne.n	8009462 <memset+0xa>
 8009460:	4770      	bx	lr
 8009462:	f803 1b01 	strb.w	r1, [r3], #1
 8009466:	e7f9      	b.n	800945c <memset+0x4>

08009468 <siprintf>:
 8009468:	b40e      	push	{r1, r2, r3}
 800946a:	b500      	push	{lr}
 800946c:	b09c      	sub	sp, #112	; 0x70
 800946e:	ab1d      	add	r3, sp, #116	; 0x74
 8009470:	9002      	str	r0, [sp, #8]
 8009472:	9006      	str	r0, [sp, #24]
 8009474:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009478:	4809      	ldr	r0, [pc, #36]	; (80094a0 <siprintf+0x38>)
 800947a:	9107      	str	r1, [sp, #28]
 800947c:	9104      	str	r1, [sp, #16]
 800947e:	4909      	ldr	r1, [pc, #36]	; (80094a4 <siprintf+0x3c>)
 8009480:	f853 2b04 	ldr.w	r2, [r3], #4
 8009484:	9105      	str	r1, [sp, #20]
 8009486:	6800      	ldr	r0, [r0, #0]
 8009488:	9301      	str	r3, [sp, #4]
 800948a:	a902      	add	r1, sp, #8
 800948c:	f000 f868 	bl	8009560 <_svfiprintf_r>
 8009490:	9b02      	ldr	r3, [sp, #8]
 8009492:	2200      	movs	r2, #0
 8009494:	701a      	strb	r2, [r3, #0]
 8009496:	b01c      	add	sp, #112	; 0x70
 8009498:	f85d eb04 	ldr.w	lr, [sp], #4
 800949c:	b003      	add	sp, #12
 800949e:	4770      	bx	lr
 80094a0:	20000014 	.word	0x20000014
 80094a4:	ffff0208 	.word	0xffff0208

080094a8 <__ssputs_r>:
 80094a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094ac:	688e      	ldr	r6, [r1, #8]
 80094ae:	429e      	cmp	r6, r3
 80094b0:	4682      	mov	sl, r0
 80094b2:	460c      	mov	r4, r1
 80094b4:	4690      	mov	r8, r2
 80094b6:	461f      	mov	r7, r3
 80094b8:	d838      	bhi.n	800952c <__ssputs_r+0x84>
 80094ba:	898a      	ldrh	r2, [r1, #12]
 80094bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80094c0:	d032      	beq.n	8009528 <__ssputs_r+0x80>
 80094c2:	6825      	ldr	r5, [r4, #0]
 80094c4:	6909      	ldr	r1, [r1, #16]
 80094c6:	eba5 0901 	sub.w	r9, r5, r1
 80094ca:	6965      	ldr	r5, [r4, #20]
 80094cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094d4:	3301      	adds	r3, #1
 80094d6:	444b      	add	r3, r9
 80094d8:	106d      	asrs	r5, r5, #1
 80094da:	429d      	cmp	r5, r3
 80094dc:	bf38      	it	cc
 80094de:	461d      	movcc	r5, r3
 80094e0:	0553      	lsls	r3, r2, #21
 80094e2:	d531      	bpl.n	8009548 <__ssputs_r+0xa0>
 80094e4:	4629      	mov	r1, r5
 80094e6:	f000 fb63 	bl	8009bb0 <_malloc_r>
 80094ea:	4606      	mov	r6, r0
 80094ec:	b950      	cbnz	r0, 8009504 <__ssputs_r+0x5c>
 80094ee:	230c      	movs	r3, #12
 80094f0:	f8ca 3000 	str.w	r3, [sl]
 80094f4:	89a3      	ldrh	r3, [r4, #12]
 80094f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094fa:	81a3      	strh	r3, [r4, #12]
 80094fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009504:	6921      	ldr	r1, [r4, #16]
 8009506:	464a      	mov	r2, r9
 8009508:	f000 fabe 	bl	8009a88 <memcpy>
 800950c:	89a3      	ldrh	r3, [r4, #12]
 800950e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009516:	81a3      	strh	r3, [r4, #12]
 8009518:	6126      	str	r6, [r4, #16]
 800951a:	6165      	str	r5, [r4, #20]
 800951c:	444e      	add	r6, r9
 800951e:	eba5 0509 	sub.w	r5, r5, r9
 8009522:	6026      	str	r6, [r4, #0]
 8009524:	60a5      	str	r5, [r4, #8]
 8009526:	463e      	mov	r6, r7
 8009528:	42be      	cmp	r6, r7
 800952a:	d900      	bls.n	800952e <__ssputs_r+0x86>
 800952c:	463e      	mov	r6, r7
 800952e:	6820      	ldr	r0, [r4, #0]
 8009530:	4632      	mov	r2, r6
 8009532:	4641      	mov	r1, r8
 8009534:	f000 fab6 	bl	8009aa4 <memmove>
 8009538:	68a3      	ldr	r3, [r4, #8]
 800953a:	1b9b      	subs	r3, r3, r6
 800953c:	60a3      	str	r3, [r4, #8]
 800953e:	6823      	ldr	r3, [r4, #0]
 8009540:	4433      	add	r3, r6
 8009542:	6023      	str	r3, [r4, #0]
 8009544:	2000      	movs	r0, #0
 8009546:	e7db      	b.n	8009500 <__ssputs_r+0x58>
 8009548:	462a      	mov	r2, r5
 800954a:	f000 fba5 	bl	8009c98 <_realloc_r>
 800954e:	4606      	mov	r6, r0
 8009550:	2800      	cmp	r0, #0
 8009552:	d1e1      	bne.n	8009518 <__ssputs_r+0x70>
 8009554:	6921      	ldr	r1, [r4, #16]
 8009556:	4650      	mov	r0, sl
 8009558:	f000 fabe 	bl	8009ad8 <_free_r>
 800955c:	e7c7      	b.n	80094ee <__ssputs_r+0x46>
	...

08009560 <_svfiprintf_r>:
 8009560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009564:	4698      	mov	r8, r3
 8009566:	898b      	ldrh	r3, [r1, #12]
 8009568:	061b      	lsls	r3, r3, #24
 800956a:	b09d      	sub	sp, #116	; 0x74
 800956c:	4607      	mov	r7, r0
 800956e:	460d      	mov	r5, r1
 8009570:	4614      	mov	r4, r2
 8009572:	d50e      	bpl.n	8009592 <_svfiprintf_r+0x32>
 8009574:	690b      	ldr	r3, [r1, #16]
 8009576:	b963      	cbnz	r3, 8009592 <_svfiprintf_r+0x32>
 8009578:	2140      	movs	r1, #64	; 0x40
 800957a:	f000 fb19 	bl	8009bb0 <_malloc_r>
 800957e:	6028      	str	r0, [r5, #0]
 8009580:	6128      	str	r0, [r5, #16]
 8009582:	b920      	cbnz	r0, 800958e <_svfiprintf_r+0x2e>
 8009584:	230c      	movs	r3, #12
 8009586:	603b      	str	r3, [r7, #0]
 8009588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800958c:	e0d1      	b.n	8009732 <_svfiprintf_r+0x1d2>
 800958e:	2340      	movs	r3, #64	; 0x40
 8009590:	616b      	str	r3, [r5, #20]
 8009592:	2300      	movs	r3, #0
 8009594:	9309      	str	r3, [sp, #36]	; 0x24
 8009596:	2320      	movs	r3, #32
 8009598:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800959c:	f8cd 800c 	str.w	r8, [sp, #12]
 80095a0:	2330      	movs	r3, #48	; 0x30
 80095a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800974c <_svfiprintf_r+0x1ec>
 80095a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095aa:	f04f 0901 	mov.w	r9, #1
 80095ae:	4623      	mov	r3, r4
 80095b0:	469a      	mov	sl, r3
 80095b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095b6:	b10a      	cbz	r2, 80095bc <_svfiprintf_r+0x5c>
 80095b8:	2a25      	cmp	r2, #37	; 0x25
 80095ba:	d1f9      	bne.n	80095b0 <_svfiprintf_r+0x50>
 80095bc:	ebba 0b04 	subs.w	fp, sl, r4
 80095c0:	d00b      	beq.n	80095da <_svfiprintf_r+0x7a>
 80095c2:	465b      	mov	r3, fp
 80095c4:	4622      	mov	r2, r4
 80095c6:	4629      	mov	r1, r5
 80095c8:	4638      	mov	r0, r7
 80095ca:	f7ff ff6d 	bl	80094a8 <__ssputs_r>
 80095ce:	3001      	adds	r0, #1
 80095d0:	f000 80aa 	beq.w	8009728 <_svfiprintf_r+0x1c8>
 80095d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095d6:	445a      	add	r2, fp
 80095d8:	9209      	str	r2, [sp, #36]	; 0x24
 80095da:	f89a 3000 	ldrb.w	r3, [sl]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	f000 80a2 	beq.w	8009728 <_svfiprintf_r+0x1c8>
 80095e4:	2300      	movs	r3, #0
 80095e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095ee:	f10a 0a01 	add.w	sl, sl, #1
 80095f2:	9304      	str	r3, [sp, #16]
 80095f4:	9307      	str	r3, [sp, #28]
 80095f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095fa:	931a      	str	r3, [sp, #104]	; 0x68
 80095fc:	4654      	mov	r4, sl
 80095fe:	2205      	movs	r2, #5
 8009600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009604:	4851      	ldr	r0, [pc, #324]	; (800974c <_svfiprintf_r+0x1ec>)
 8009606:	f7f6 fe03 	bl	8000210 <memchr>
 800960a:	9a04      	ldr	r2, [sp, #16]
 800960c:	b9d8      	cbnz	r0, 8009646 <_svfiprintf_r+0xe6>
 800960e:	06d0      	lsls	r0, r2, #27
 8009610:	bf44      	itt	mi
 8009612:	2320      	movmi	r3, #32
 8009614:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009618:	0711      	lsls	r1, r2, #28
 800961a:	bf44      	itt	mi
 800961c:	232b      	movmi	r3, #43	; 0x2b
 800961e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009622:	f89a 3000 	ldrb.w	r3, [sl]
 8009626:	2b2a      	cmp	r3, #42	; 0x2a
 8009628:	d015      	beq.n	8009656 <_svfiprintf_r+0xf6>
 800962a:	9a07      	ldr	r2, [sp, #28]
 800962c:	4654      	mov	r4, sl
 800962e:	2000      	movs	r0, #0
 8009630:	f04f 0c0a 	mov.w	ip, #10
 8009634:	4621      	mov	r1, r4
 8009636:	f811 3b01 	ldrb.w	r3, [r1], #1
 800963a:	3b30      	subs	r3, #48	; 0x30
 800963c:	2b09      	cmp	r3, #9
 800963e:	d94e      	bls.n	80096de <_svfiprintf_r+0x17e>
 8009640:	b1b0      	cbz	r0, 8009670 <_svfiprintf_r+0x110>
 8009642:	9207      	str	r2, [sp, #28]
 8009644:	e014      	b.n	8009670 <_svfiprintf_r+0x110>
 8009646:	eba0 0308 	sub.w	r3, r0, r8
 800964a:	fa09 f303 	lsl.w	r3, r9, r3
 800964e:	4313      	orrs	r3, r2
 8009650:	9304      	str	r3, [sp, #16]
 8009652:	46a2      	mov	sl, r4
 8009654:	e7d2      	b.n	80095fc <_svfiprintf_r+0x9c>
 8009656:	9b03      	ldr	r3, [sp, #12]
 8009658:	1d19      	adds	r1, r3, #4
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	9103      	str	r1, [sp, #12]
 800965e:	2b00      	cmp	r3, #0
 8009660:	bfbb      	ittet	lt
 8009662:	425b      	neglt	r3, r3
 8009664:	f042 0202 	orrlt.w	r2, r2, #2
 8009668:	9307      	strge	r3, [sp, #28]
 800966a:	9307      	strlt	r3, [sp, #28]
 800966c:	bfb8      	it	lt
 800966e:	9204      	strlt	r2, [sp, #16]
 8009670:	7823      	ldrb	r3, [r4, #0]
 8009672:	2b2e      	cmp	r3, #46	; 0x2e
 8009674:	d10c      	bne.n	8009690 <_svfiprintf_r+0x130>
 8009676:	7863      	ldrb	r3, [r4, #1]
 8009678:	2b2a      	cmp	r3, #42	; 0x2a
 800967a:	d135      	bne.n	80096e8 <_svfiprintf_r+0x188>
 800967c:	9b03      	ldr	r3, [sp, #12]
 800967e:	1d1a      	adds	r2, r3, #4
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	9203      	str	r2, [sp, #12]
 8009684:	2b00      	cmp	r3, #0
 8009686:	bfb8      	it	lt
 8009688:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800968c:	3402      	adds	r4, #2
 800968e:	9305      	str	r3, [sp, #20]
 8009690:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800975c <_svfiprintf_r+0x1fc>
 8009694:	7821      	ldrb	r1, [r4, #0]
 8009696:	2203      	movs	r2, #3
 8009698:	4650      	mov	r0, sl
 800969a:	f7f6 fdb9 	bl	8000210 <memchr>
 800969e:	b140      	cbz	r0, 80096b2 <_svfiprintf_r+0x152>
 80096a0:	2340      	movs	r3, #64	; 0x40
 80096a2:	eba0 000a 	sub.w	r0, r0, sl
 80096a6:	fa03 f000 	lsl.w	r0, r3, r0
 80096aa:	9b04      	ldr	r3, [sp, #16]
 80096ac:	4303      	orrs	r3, r0
 80096ae:	3401      	adds	r4, #1
 80096b0:	9304      	str	r3, [sp, #16]
 80096b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096b6:	4826      	ldr	r0, [pc, #152]	; (8009750 <_svfiprintf_r+0x1f0>)
 80096b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096bc:	2206      	movs	r2, #6
 80096be:	f7f6 fda7 	bl	8000210 <memchr>
 80096c2:	2800      	cmp	r0, #0
 80096c4:	d038      	beq.n	8009738 <_svfiprintf_r+0x1d8>
 80096c6:	4b23      	ldr	r3, [pc, #140]	; (8009754 <_svfiprintf_r+0x1f4>)
 80096c8:	bb1b      	cbnz	r3, 8009712 <_svfiprintf_r+0x1b2>
 80096ca:	9b03      	ldr	r3, [sp, #12]
 80096cc:	3307      	adds	r3, #7
 80096ce:	f023 0307 	bic.w	r3, r3, #7
 80096d2:	3308      	adds	r3, #8
 80096d4:	9303      	str	r3, [sp, #12]
 80096d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096d8:	4433      	add	r3, r6
 80096da:	9309      	str	r3, [sp, #36]	; 0x24
 80096dc:	e767      	b.n	80095ae <_svfiprintf_r+0x4e>
 80096de:	fb0c 3202 	mla	r2, ip, r2, r3
 80096e2:	460c      	mov	r4, r1
 80096e4:	2001      	movs	r0, #1
 80096e6:	e7a5      	b.n	8009634 <_svfiprintf_r+0xd4>
 80096e8:	2300      	movs	r3, #0
 80096ea:	3401      	adds	r4, #1
 80096ec:	9305      	str	r3, [sp, #20]
 80096ee:	4619      	mov	r1, r3
 80096f0:	f04f 0c0a 	mov.w	ip, #10
 80096f4:	4620      	mov	r0, r4
 80096f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096fa:	3a30      	subs	r2, #48	; 0x30
 80096fc:	2a09      	cmp	r2, #9
 80096fe:	d903      	bls.n	8009708 <_svfiprintf_r+0x1a8>
 8009700:	2b00      	cmp	r3, #0
 8009702:	d0c5      	beq.n	8009690 <_svfiprintf_r+0x130>
 8009704:	9105      	str	r1, [sp, #20]
 8009706:	e7c3      	b.n	8009690 <_svfiprintf_r+0x130>
 8009708:	fb0c 2101 	mla	r1, ip, r1, r2
 800970c:	4604      	mov	r4, r0
 800970e:	2301      	movs	r3, #1
 8009710:	e7f0      	b.n	80096f4 <_svfiprintf_r+0x194>
 8009712:	ab03      	add	r3, sp, #12
 8009714:	9300      	str	r3, [sp, #0]
 8009716:	462a      	mov	r2, r5
 8009718:	4b0f      	ldr	r3, [pc, #60]	; (8009758 <_svfiprintf_r+0x1f8>)
 800971a:	a904      	add	r1, sp, #16
 800971c:	4638      	mov	r0, r7
 800971e:	f3af 8000 	nop.w
 8009722:	1c42      	adds	r2, r0, #1
 8009724:	4606      	mov	r6, r0
 8009726:	d1d6      	bne.n	80096d6 <_svfiprintf_r+0x176>
 8009728:	89ab      	ldrh	r3, [r5, #12]
 800972a:	065b      	lsls	r3, r3, #25
 800972c:	f53f af2c 	bmi.w	8009588 <_svfiprintf_r+0x28>
 8009730:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009732:	b01d      	add	sp, #116	; 0x74
 8009734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009738:	ab03      	add	r3, sp, #12
 800973a:	9300      	str	r3, [sp, #0]
 800973c:	462a      	mov	r2, r5
 800973e:	4b06      	ldr	r3, [pc, #24]	; (8009758 <_svfiprintf_r+0x1f8>)
 8009740:	a904      	add	r1, sp, #16
 8009742:	4638      	mov	r0, r7
 8009744:	f000 f87a 	bl	800983c <_printf_i>
 8009748:	e7eb      	b.n	8009722 <_svfiprintf_r+0x1c2>
 800974a:	bf00      	nop
 800974c:	0800a260 	.word	0x0800a260
 8009750:	0800a26a 	.word	0x0800a26a
 8009754:	00000000 	.word	0x00000000
 8009758:	080094a9 	.word	0x080094a9
 800975c:	0800a266 	.word	0x0800a266

08009760 <_printf_common>:
 8009760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009764:	4616      	mov	r6, r2
 8009766:	4699      	mov	r9, r3
 8009768:	688a      	ldr	r2, [r1, #8]
 800976a:	690b      	ldr	r3, [r1, #16]
 800976c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009770:	4293      	cmp	r3, r2
 8009772:	bfb8      	it	lt
 8009774:	4613      	movlt	r3, r2
 8009776:	6033      	str	r3, [r6, #0]
 8009778:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800977c:	4607      	mov	r7, r0
 800977e:	460c      	mov	r4, r1
 8009780:	b10a      	cbz	r2, 8009786 <_printf_common+0x26>
 8009782:	3301      	adds	r3, #1
 8009784:	6033      	str	r3, [r6, #0]
 8009786:	6823      	ldr	r3, [r4, #0]
 8009788:	0699      	lsls	r1, r3, #26
 800978a:	bf42      	ittt	mi
 800978c:	6833      	ldrmi	r3, [r6, #0]
 800978e:	3302      	addmi	r3, #2
 8009790:	6033      	strmi	r3, [r6, #0]
 8009792:	6825      	ldr	r5, [r4, #0]
 8009794:	f015 0506 	ands.w	r5, r5, #6
 8009798:	d106      	bne.n	80097a8 <_printf_common+0x48>
 800979a:	f104 0a19 	add.w	sl, r4, #25
 800979e:	68e3      	ldr	r3, [r4, #12]
 80097a0:	6832      	ldr	r2, [r6, #0]
 80097a2:	1a9b      	subs	r3, r3, r2
 80097a4:	42ab      	cmp	r3, r5
 80097a6:	dc26      	bgt.n	80097f6 <_printf_common+0x96>
 80097a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80097ac:	1e13      	subs	r3, r2, #0
 80097ae:	6822      	ldr	r2, [r4, #0]
 80097b0:	bf18      	it	ne
 80097b2:	2301      	movne	r3, #1
 80097b4:	0692      	lsls	r2, r2, #26
 80097b6:	d42b      	bmi.n	8009810 <_printf_common+0xb0>
 80097b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097bc:	4649      	mov	r1, r9
 80097be:	4638      	mov	r0, r7
 80097c0:	47c0      	blx	r8
 80097c2:	3001      	adds	r0, #1
 80097c4:	d01e      	beq.n	8009804 <_printf_common+0xa4>
 80097c6:	6823      	ldr	r3, [r4, #0]
 80097c8:	68e5      	ldr	r5, [r4, #12]
 80097ca:	6832      	ldr	r2, [r6, #0]
 80097cc:	f003 0306 	and.w	r3, r3, #6
 80097d0:	2b04      	cmp	r3, #4
 80097d2:	bf08      	it	eq
 80097d4:	1aad      	subeq	r5, r5, r2
 80097d6:	68a3      	ldr	r3, [r4, #8]
 80097d8:	6922      	ldr	r2, [r4, #16]
 80097da:	bf0c      	ite	eq
 80097dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097e0:	2500      	movne	r5, #0
 80097e2:	4293      	cmp	r3, r2
 80097e4:	bfc4      	itt	gt
 80097e6:	1a9b      	subgt	r3, r3, r2
 80097e8:	18ed      	addgt	r5, r5, r3
 80097ea:	2600      	movs	r6, #0
 80097ec:	341a      	adds	r4, #26
 80097ee:	42b5      	cmp	r5, r6
 80097f0:	d11a      	bne.n	8009828 <_printf_common+0xc8>
 80097f2:	2000      	movs	r0, #0
 80097f4:	e008      	b.n	8009808 <_printf_common+0xa8>
 80097f6:	2301      	movs	r3, #1
 80097f8:	4652      	mov	r2, sl
 80097fa:	4649      	mov	r1, r9
 80097fc:	4638      	mov	r0, r7
 80097fe:	47c0      	blx	r8
 8009800:	3001      	adds	r0, #1
 8009802:	d103      	bne.n	800980c <_printf_common+0xac>
 8009804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800980c:	3501      	adds	r5, #1
 800980e:	e7c6      	b.n	800979e <_printf_common+0x3e>
 8009810:	18e1      	adds	r1, r4, r3
 8009812:	1c5a      	adds	r2, r3, #1
 8009814:	2030      	movs	r0, #48	; 0x30
 8009816:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800981a:	4422      	add	r2, r4
 800981c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009820:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009824:	3302      	adds	r3, #2
 8009826:	e7c7      	b.n	80097b8 <_printf_common+0x58>
 8009828:	2301      	movs	r3, #1
 800982a:	4622      	mov	r2, r4
 800982c:	4649      	mov	r1, r9
 800982e:	4638      	mov	r0, r7
 8009830:	47c0      	blx	r8
 8009832:	3001      	adds	r0, #1
 8009834:	d0e6      	beq.n	8009804 <_printf_common+0xa4>
 8009836:	3601      	adds	r6, #1
 8009838:	e7d9      	b.n	80097ee <_printf_common+0x8e>
	...

0800983c <_printf_i>:
 800983c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009840:	7e0f      	ldrb	r7, [r1, #24]
 8009842:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009844:	2f78      	cmp	r7, #120	; 0x78
 8009846:	4691      	mov	r9, r2
 8009848:	4680      	mov	r8, r0
 800984a:	460c      	mov	r4, r1
 800984c:	469a      	mov	sl, r3
 800984e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009852:	d807      	bhi.n	8009864 <_printf_i+0x28>
 8009854:	2f62      	cmp	r7, #98	; 0x62
 8009856:	d80a      	bhi.n	800986e <_printf_i+0x32>
 8009858:	2f00      	cmp	r7, #0
 800985a:	f000 80d8 	beq.w	8009a0e <_printf_i+0x1d2>
 800985e:	2f58      	cmp	r7, #88	; 0x58
 8009860:	f000 80a3 	beq.w	80099aa <_printf_i+0x16e>
 8009864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009868:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800986c:	e03a      	b.n	80098e4 <_printf_i+0xa8>
 800986e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009872:	2b15      	cmp	r3, #21
 8009874:	d8f6      	bhi.n	8009864 <_printf_i+0x28>
 8009876:	a101      	add	r1, pc, #4	; (adr r1, 800987c <_printf_i+0x40>)
 8009878:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800987c:	080098d5 	.word	0x080098d5
 8009880:	080098e9 	.word	0x080098e9
 8009884:	08009865 	.word	0x08009865
 8009888:	08009865 	.word	0x08009865
 800988c:	08009865 	.word	0x08009865
 8009890:	08009865 	.word	0x08009865
 8009894:	080098e9 	.word	0x080098e9
 8009898:	08009865 	.word	0x08009865
 800989c:	08009865 	.word	0x08009865
 80098a0:	08009865 	.word	0x08009865
 80098a4:	08009865 	.word	0x08009865
 80098a8:	080099f5 	.word	0x080099f5
 80098ac:	08009919 	.word	0x08009919
 80098b0:	080099d7 	.word	0x080099d7
 80098b4:	08009865 	.word	0x08009865
 80098b8:	08009865 	.word	0x08009865
 80098bc:	08009a17 	.word	0x08009a17
 80098c0:	08009865 	.word	0x08009865
 80098c4:	08009919 	.word	0x08009919
 80098c8:	08009865 	.word	0x08009865
 80098cc:	08009865 	.word	0x08009865
 80098d0:	080099df 	.word	0x080099df
 80098d4:	682b      	ldr	r3, [r5, #0]
 80098d6:	1d1a      	adds	r2, r3, #4
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	602a      	str	r2, [r5, #0]
 80098dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098e4:	2301      	movs	r3, #1
 80098e6:	e0a3      	b.n	8009a30 <_printf_i+0x1f4>
 80098e8:	6820      	ldr	r0, [r4, #0]
 80098ea:	6829      	ldr	r1, [r5, #0]
 80098ec:	0606      	lsls	r6, r0, #24
 80098ee:	f101 0304 	add.w	r3, r1, #4
 80098f2:	d50a      	bpl.n	800990a <_printf_i+0xce>
 80098f4:	680e      	ldr	r6, [r1, #0]
 80098f6:	602b      	str	r3, [r5, #0]
 80098f8:	2e00      	cmp	r6, #0
 80098fa:	da03      	bge.n	8009904 <_printf_i+0xc8>
 80098fc:	232d      	movs	r3, #45	; 0x2d
 80098fe:	4276      	negs	r6, r6
 8009900:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009904:	485e      	ldr	r0, [pc, #376]	; (8009a80 <_printf_i+0x244>)
 8009906:	230a      	movs	r3, #10
 8009908:	e019      	b.n	800993e <_printf_i+0x102>
 800990a:	680e      	ldr	r6, [r1, #0]
 800990c:	602b      	str	r3, [r5, #0]
 800990e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009912:	bf18      	it	ne
 8009914:	b236      	sxthne	r6, r6
 8009916:	e7ef      	b.n	80098f8 <_printf_i+0xbc>
 8009918:	682b      	ldr	r3, [r5, #0]
 800991a:	6820      	ldr	r0, [r4, #0]
 800991c:	1d19      	adds	r1, r3, #4
 800991e:	6029      	str	r1, [r5, #0]
 8009920:	0601      	lsls	r1, r0, #24
 8009922:	d501      	bpl.n	8009928 <_printf_i+0xec>
 8009924:	681e      	ldr	r6, [r3, #0]
 8009926:	e002      	b.n	800992e <_printf_i+0xf2>
 8009928:	0646      	lsls	r6, r0, #25
 800992a:	d5fb      	bpl.n	8009924 <_printf_i+0xe8>
 800992c:	881e      	ldrh	r6, [r3, #0]
 800992e:	4854      	ldr	r0, [pc, #336]	; (8009a80 <_printf_i+0x244>)
 8009930:	2f6f      	cmp	r7, #111	; 0x6f
 8009932:	bf0c      	ite	eq
 8009934:	2308      	moveq	r3, #8
 8009936:	230a      	movne	r3, #10
 8009938:	2100      	movs	r1, #0
 800993a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800993e:	6865      	ldr	r5, [r4, #4]
 8009940:	60a5      	str	r5, [r4, #8]
 8009942:	2d00      	cmp	r5, #0
 8009944:	bfa2      	ittt	ge
 8009946:	6821      	ldrge	r1, [r4, #0]
 8009948:	f021 0104 	bicge.w	r1, r1, #4
 800994c:	6021      	strge	r1, [r4, #0]
 800994e:	b90e      	cbnz	r6, 8009954 <_printf_i+0x118>
 8009950:	2d00      	cmp	r5, #0
 8009952:	d04d      	beq.n	80099f0 <_printf_i+0x1b4>
 8009954:	4615      	mov	r5, r2
 8009956:	fbb6 f1f3 	udiv	r1, r6, r3
 800995a:	fb03 6711 	mls	r7, r3, r1, r6
 800995e:	5dc7      	ldrb	r7, [r0, r7]
 8009960:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009964:	4637      	mov	r7, r6
 8009966:	42bb      	cmp	r3, r7
 8009968:	460e      	mov	r6, r1
 800996a:	d9f4      	bls.n	8009956 <_printf_i+0x11a>
 800996c:	2b08      	cmp	r3, #8
 800996e:	d10b      	bne.n	8009988 <_printf_i+0x14c>
 8009970:	6823      	ldr	r3, [r4, #0]
 8009972:	07de      	lsls	r6, r3, #31
 8009974:	d508      	bpl.n	8009988 <_printf_i+0x14c>
 8009976:	6923      	ldr	r3, [r4, #16]
 8009978:	6861      	ldr	r1, [r4, #4]
 800997a:	4299      	cmp	r1, r3
 800997c:	bfde      	ittt	le
 800997e:	2330      	movle	r3, #48	; 0x30
 8009980:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009984:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009988:	1b52      	subs	r2, r2, r5
 800998a:	6122      	str	r2, [r4, #16]
 800998c:	f8cd a000 	str.w	sl, [sp]
 8009990:	464b      	mov	r3, r9
 8009992:	aa03      	add	r2, sp, #12
 8009994:	4621      	mov	r1, r4
 8009996:	4640      	mov	r0, r8
 8009998:	f7ff fee2 	bl	8009760 <_printf_common>
 800999c:	3001      	adds	r0, #1
 800999e:	d14c      	bne.n	8009a3a <_printf_i+0x1fe>
 80099a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099a4:	b004      	add	sp, #16
 80099a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099aa:	4835      	ldr	r0, [pc, #212]	; (8009a80 <_printf_i+0x244>)
 80099ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80099b0:	6829      	ldr	r1, [r5, #0]
 80099b2:	6823      	ldr	r3, [r4, #0]
 80099b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80099b8:	6029      	str	r1, [r5, #0]
 80099ba:	061d      	lsls	r5, r3, #24
 80099bc:	d514      	bpl.n	80099e8 <_printf_i+0x1ac>
 80099be:	07df      	lsls	r7, r3, #31
 80099c0:	bf44      	itt	mi
 80099c2:	f043 0320 	orrmi.w	r3, r3, #32
 80099c6:	6023      	strmi	r3, [r4, #0]
 80099c8:	b91e      	cbnz	r6, 80099d2 <_printf_i+0x196>
 80099ca:	6823      	ldr	r3, [r4, #0]
 80099cc:	f023 0320 	bic.w	r3, r3, #32
 80099d0:	6023      	str	r3, [r4, #0]
 80099d2:	2310      	movs	r3, #16
 80099d4:	e7b0      	b.n	8009938 <_printf_i+0xfc>
 80099d6:	6823      	ldr	r3, [r4, #0]
 80099d8:	f043 0320 	orr.w	r3, r3, #32
 80099dc:	6023      	str	r3, [r4, #0]
 80099de:	2378      	movs	r3, #120	; 0x78
 80099e0:	4828      	ldr	r0, [pc, #160]	; (8009a84 <_printf_i+0x248>)
 80099e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80099e6:	e7e3      	b.n	80099b0 <_printf_i+0x174>
 80099e8:	0659      	lsls	r1, r3, #25
 80099ea:	bf48      	it	mi
 80099ec:	b2b6      	uxthmi	r6, r6
 80099ee:	e7e6      	b.n	80099be <_printf_i+0x182>
 80099f0:	4615      	mov	r5, r2
 80099f2:	e7bb      	b.n	800996c <_printf_i+0x130>
 80099f4:	682b      	ldr	r3, [r5, #0]
 80099f6:	6826      	ldr	r6, [r4, #0]
 80099f8:	6961      	ldr	r1, [r4, #20]
 80099fa:	1d18      	adds	r0, r3, #4
 80099fc:	6028      	str	r0, [r5, #0]
 80099fe:	0635      	lsls	r5, r6, #24
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	d501      	bpl.n	8009a08 <_printf_i+0x1cc>
 8009a04:	6019      	str	r1, [r3, #0]
 8009a06:	e002      	b.n	8009a0e <_printf_i+0x1d2>
 8009a08:	0670      	lsls	r0, r6, #25
 8009a0a:	d5fb      	bpl.n	8009a04 <_printf_i+0x1c8>
 8009a0c:	8019      	strh	r1, [r3, #0]
 8009a0e:	2300      	movs	r3, #0
 8009a10:	6123      	str	r3, [r4, #16]
 8009a12:	4615      	mov	r5, r2
 8009a14:	e7ba      	b.n	800998c <_printf_i+0x150>
 8009a16:	682b      	ldr	r3, [r5, #0]
 8009a18:	1d1a      	adds	r2, r3, #4
 8009a1a:	602a      	str	r2, [r5, #0]
 8009a1c:	681d      	ldr	r5, [r3, #0]
 8009a1e:	6862      	ldr	r2, [r4, #4]
 8009a20:	2100      	movs	r1, #0
 8009a22:	4628      	mov	r0, r5
 8009a24:	f7f6 fbf4 	bl	8000210 <memchr>
 8009a28:	b108      	cbz	r0, 8009a2e <_printf_i+0x1f2>
 8009a2a:	1b40      	subs	r0, r0, r5
 8009a2c:	6060      	str	r0, [r4, #4]
 8009a2e:	6863      	ldr	r3, [r4, #4]
 8009a30:	6123      	str	r3, [r4, #16]
 8009a32:	2300      	movs	r3, #0
 8009a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a38:	e7a8      	b.n	800998c <_printf_i+0x150>
 8009a3a:	6923      	ldr	r3, [r4, #16]
 8009a3c:	462a      	mov	r2, r5
 8009a3e:	4649      	mov	r1, r9
 8009a40:	4640      	mov	r0, r8
 8009a42:	47d0      	blx	sl
 8009a44:	3001      	adds	r0, #1
 8009a46:	d0ab      	beq.n	80099a0 <_printf_i+0x164>
 8009a48:	6823      	ldr	r3, [r4, #0]
 8009a4a:	079b      	lsls	r3, r3, #30
 8009a4c:	d413      	bmi.n	8009a76 <_printf_i+0x23a>
 8009a4e:	68e0      	ldr	r0, [r4, #12]
 8009a50:	9b03      	ldr	r3, [sp, #12]
 8009a52:	4298      	cmp	r0, r3
 8009a54:	bfb8      	it	lt
 8009a56:	4618      	movlt	r0, r3
 8009a58:	e7a4      	b.n	80099a4 <_printf_i+0x168>
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	4632      	mov	r2, r6
 8009a5e:	4649      	mov	r1, r9
 8009a60:	4640      	mov	r0, r8
 8009a62:	47d0      	blx	sl
 8009a64:	3001      	adds	r0, #1
 8009a66:	d09b      	beq.n	80099a0 <_printf_i+0x164>
 8009a68:	3501      	adds	r5, #1
 8009a6a:	68e3      	ldr	r3, [r4, #12]
 8009a6c:	9903      	ldr	r1, [sp, #12]
 8009a6e:	1a5b      	subs	r3, r3, r1
 8009a70:	42ab      	cmp	r3, r5
 8009a72:	dcf2      	bgt.n	8009a5a <_printf_i+0x21e>
 8009a74:	e7eb      	b.n	8009a4e <_printf_i+0x212>
 8009a76:	2500      	movs	r5, #0
 8009a78:	f104 0619 	add.w	r6, r4, #25
 8009a7c:	e7f5      	b.n	8009a6a <_printf_i+0x22e>
 8009a7e:	bf00      	nop
 8009a80:	0800a271 	.word	0x0800a271
 8009a84:	0800a282 	.word	0x0800a282

08009a88 <memcpy>:
 8009a88:	440a      	add	r2, r1
 8009a8a:	4291      	cmp	r1, r2
 8009a8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009a90:	d100      	bne.n	8009a94 <memcpy+0xc>
 8009a92:	4770      	bx	lr
 8009a94:	b510      	push	{r4, lr}
 8009a96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a9e:	4291      	cmp	r1, r2
 8009aa0:	d1f9      	bne.n	8009a96 <memcpy+0xe>
 8009aa2:	bd10      	pop	{r4, pc}

08009aa4 <memmove>:
 8009aa4:	4288      	cmp	r0, r1
 8009aa6:	b510      	push	{r4, lr}
 8009aa8:	eb01 0402 	add.w	r4, r1, r2
 8009aac:	d902      	bls.n	8009ab4 <memmove+0x10>
 8009aae:	4284      	cmp	r4, r0
 8009ab0:	4623      	mov	r3, r4
 8009ab2:	d807      	bhi.n	8009ac4 <memmove+0x20>
 8009ab4:	1e43      	subs	r3, r0, #1
 8009ab6:	42a1      	cmp	r1, r4
 8009ab8:	d008      	beq.n	8009acc <memmove+0x28>
 8009aba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009abe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ac2:	e7f8      	b.n	8009ab6 <memmove+0x12>
 8009ac4:	4402      	add	r2, r0
 8009ac6:	4601      	mov	r1, r0
 8009ac8:	428a      	cmp	r2, r1
 8009aca:	d100      	bne.n	8009ace <memmove+0x2a>
 8009acc:	bd10      	pop	{r4, pc}
 8009ace:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ad2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ad6:	e7f7      	b.n	8009ac8 <memmove+0x24>

08009ad8 <_free_r>:
 8009ad8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ada:	2900      	cmp	r1, #0
 8009adc:	d044      	beq.n	8009b68 <_free_r+0x90>
 8009ade:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ae2:	9001      	str	r0, [sp, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f1a1 0404 	sub.w	r4, r1, #4
 8009aea:	bfb8      	it	lt
 8009aec:	18e4      	addlt	r4, r4, r3
 8009aee:	f000 f913 	bl	8009d18 <__malloc_lock>
 8009af2:	4a1e      	ldr	r2, [pc, #120]	; (8009b6c <_free_r+0x94>)
 8009af4:	9801      	ldr	r0, [sp, #4]
 8009af6:	6813      	ldr	r3, [r2, #0]
 8009af8:	b933      	cbnz	r3, 8009b08 <_free_r+0x30>
 8009afa:	6063      	str	r3, [r4, #4]
 8009afc:	6014      	str	r4, [r2, #0]
 8009afe:	b003      	add	sp, #12
 8009b00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b04:	f000 b90e 	b.w	8009d24 <__malloc_unlock>
 8009b08:	42a3      	cmp	r3, r4
 8009b0a:	d908      	bls.n	8009b1e <_free_r+0x46>
 8009b0c:	6825      	ldr	r5, [r4, #0]
 8009b0e:	1961      	adds	r1, r4, r5
 8009b10:	428b      	cmp	r3, r1
 8009b12:	bf01      	itttt	eq
 8009b14:	6819      	ldreq	r1, [r3, #0]
 8009b16:	685b      	ldreq	r3, [r3, #4]
 8009b18:	1949      	addeq	r1, r1, r5
 8009b1a:	6021      	streq	r1, [r4, #0]
 8009b1c:	e7ed      	b.n	8009afa <_free_r+0x22>
 8009b1e:	461a      	mov	r2, r3
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	b10b      	cbz	r3, 8009b28 <_free_r+0x50>
 8009b24:	42a3      	cmp	r3, r4
 8009b26:	d9fa      	bls.n	8009b1e <_free_r+0x46>
 8009b28:	6811      	ldr	r1, [r2, #0]
 8009b2a:	1855      	adds	r5, r2, r1
 8009b2c:	42a5      	cmp	r5, r4
 8009b2e:	d10b      	bne.n	8009b48 <_free_r+0x70>
 8009b30:	6824      	ldr	r4, [r4, #0]
 8009b32:	4421      	add	r1, r4
 8009b34:	1854      	adds	r4, r2, r1
 8009b36:	42a3      	cmp	r3, r4
 8009b38:	6011      	str	r1, [r2, #0]
 8009b3a:	d1e0      	bne.n	8009afe <_free_r+0x26>
 8009b3c:	681c      	ldr	r4, [r3, #0]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	6053      	str	r3, [r2, #4]
 8009b42:	4421      	add	r1, r4
 8009b44:	6011      	str	r1, [r2, #0]
 8009b46:	e7da      	b.n	8009afe <_free_r+0x26>
 8009b48:	d902      	bls.n	8009b50 <_free_r+0x78>
 8009b4a:	230c      	movs	r3, #12
 8009b4c:	6003      	str	r3, [r0, #0]
 8009b4e:	e7d6      	b.n	8009afe <_free_r+0x26>
 8009b50:	6825      	ldr	r5, [r4, #0]
 8009b52:	1961      	adds	r1, r4, r5
 8009b54:	428b      	cmp	r3, r1
 8009b56:	bf04      	itt	eq
 8009b58:	6819      	ldreq	r1, [r3, #0]
 8009b5a:	685b      	ldreq	r3, [r3, #4]
 8009b5c:	6063      	str	r3, [r4, #4]
 8009b5e:	bf04      	itt	eq
 8009b60:	1949      	addeq	r1, r1, r5
 8009b62:	6021      	streq	r1, [r4, #0]
 8009b64:	6054      	str	r4, [r2, #4]
 8009b66:	e7ca      	b.n	8009afe <_free_r+0x26>
 8009b68:	b003      	add	sp, #12
 8009b6a:	bd30      	pop	{r4, r5, pc}
 8009b6c:	20000880 	.word	0x20000880

08009b70 <sbrk_aligned>:
 8009b70:	b570      	push	{r4, r5, r6, lr}
 8009b72:	4e0e      	ldr	r6, [pc, #56]	; (8009bac <sbrk_aligned+0x3c>)
 8009b74:	460c      	mov	r4, r1
 8009b76:	6831      	ldr	r1, [r6, #0]
 8009b78:	4605      	mov	r5, r0
 8009b7a:	b911      	cbnz	r1, 8009b82 <sbrk_aligned+0x12>
 8009b7c:	f000 f8bc 	bl	8009cf8 <_sbrk_r>
 8009b80:	6030      	str	r0, [r6, #0]
 8009b82:	4621      	mov	r1, r4
 8009b84:	4628      	mov	r0, r5
 8009b86:	f000 f8b7 	bl	8009cf8 <_sbrk_r>
 8009b8a:	1c43      	adds	r3, r0, #1
 8009b8c:	d00a      	beq.n	8009ba4 <sbrk_aligned+0x34>
 8009b8e:	1cc4      	adds	r4, r0, #3
 8009b90:	f024 0403 	bic.w	r4, r4, #3
 8009b94:	42a0      	cmp	r0, r4
 8009b96:	d007      	beq.n	8009ba8 <sbrk_aligned+0x38>
 8009b98:	1a21      	subs	r1, r4, r0
 8009b9a:	4628      	mov	r0, r5
 8009b9c:	f000 f8ac 	bl	8009cf8 <_sbrk_r>
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	d101      	bne.n	8009ba8 <sbrk_aligned+0x38>
 8009ba4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009ba8:	4620      	mov	r0, r4
 8009baa:	bd70      	pop	{r4, r5, r6, pc}
 8009bac:	20000884 	.word	0x20000884

08009bb0 <_malloc_r>:
 8009bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bb4:	1ccd      	adds	r5, r1, #3
 8009bb6:	f025 0503 	bic.w	r5, r5, #3
 8009bba:	3508      	adds	r5, #8
 8009bbc:	2d0c      	cmp	r5, #12
 8009bbe:	bf38      	it	cc
 8009bc0:	250c      	movcc	r5, #12
 8009bc2:	2d00      	cmp	r5, #0
 8009bc4:	4607      	mov	r7, r0
 8009bc6:	db01      	blt.n	8009bcc <_malloc_r+0x1c>
 8009bc8:	42a9      	cmp	r1, r5
 8009bca:	d905      	bls.n	8009bd8 <_malloc_r+0x28>
 8009bcc:	230c      	movs	r3, #12
 8009bce:	603b      	str	r3, [r7, #0]
 8009bd0:	2600      	movs	r6, #0
 8009bd2:	4630      	mov	r0, r6
 8009bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bd8:	4e2e      	ldr	r6, [pc, #184]	; (8009c94 <_malloc_r+0xe4>)
 8009bda:	f000 f89d 	bl	8009d18 <__malloc_lock>
 8009bde:	6833      	ldr	r3, [r6, #0]
 8009be0:	461c      	mov	r4, r3
 8009be2:	bb34      	cbnz	r4, 8009c32 <_malloc_r+0x82>
 8009be4:	4629      	mov	r1, r5
 8009be6:	4638      	mov	r0, r7
 8009be8:	f7ff ffc2 	bl	8009b70 <sbrk_aligned>
 8009bec:	1c43      	adds	r3, r0, #1
 8009bee:	4604      	mov	r4, r0
 8009bf0:	d14d      	bne.n	8009c8e <_malloc_r+0xde>
 8009bf2:	6834      	ldr	r4, [r6, #0]
 8009bf4:	4626      	mov	r6, r4
 8009bf6:	2e00      	cmp	r6, #0
 8009bf8:	d140      	bne.n	8009c7c <_malloc_r+0xcc>
 8009bfa:	6823      	ldr	r3, [r4, #0]
 8009bfc:	4631      	mov	r1, r6
 8009bfe:	4638      	mov	r0, r7
 8009c00:	eb04 0803 	add.w	r8, r4, r3
 8009c04:	f000 f878 	bl	8009cf8 <_sbrk_r>
 8009c08:	4580      	cmp	r8, r0
 8009c0a:	d13a      	bne.n	8009c82 <_malloc_r+0xd2>
 8009c0c:	6821      	ldr	r1, [r4, #0]
 8009c0e:	3503      	adds	r5, #3
 8009c10:	1a6d      	subs	r5, r5, r1
 8009c12:	f025 0503 	bic.w	r5, r5, #3
 8009c16:	3508      	adds	r5, #8
 8009c18:	2d0c      	cmp	r5, #12
 8009c1a:	bf38      	it	cc
 8009c1c:	250c      	movcc	r5, #12
 8009c1e:	4629      	mov	r1, r5
 8009c20:	4638      	mov	r0, r7
 8009c22:	f7ff ffa5 	bl	8009b70 <sbrk_aligned>
 8009c26:	3001      	adds	r0, #1
 8009c28:	d02b      	beq.n	8009c82 <_malloc_r+0xd2>
 8009c2a:	6823      	ldr	r3, [r4, #0]
 8009c2c:	442b      	add	r3, r5
 8009c2e:	6023      	str	r3, [r4, #0]
 8009c30:	e00e      	b.n	8009c50 <_malloc_r+0xa0>
 8009c32:	6822      	ldr	r2, [r4, #0]
 8009c34:	1b52      	subs	r2, r2, r5
 8009c36:	d41e      	bmi.n	8009c76 <_malloc_r+0xc6>
 8009c38:	2a0b      	cmp	r2, #11
 8009c3a:	d916      	bls.n	8009c6a <_malloc_r+0xba>
 8009c3c:	1961      	adds	r1, r4, r5
 8009c3e:	42a3      	cmp	r3, r4
 8009c40:	6025      	str	r5, [r4, #0]
 8009c42:	bf18      	it	ne
 8009c44:	6059      	strne	r1, [r3, #4]
 8009c46:	6863      	ldr	r3, [r4, #4]
 8009c48:	bf08      	it	eq
 8009c4a:	6031      	streq	r1, [r6, #0]
 8009c4c:	5162      	str	r2, [r4, r5]
 8009c4e:	604b      	str	r3, [r1, #4]
 8009c50:	4638      	mov	r0, r7
 8009c52:	f104 060b 	add.w	r6, r4, #11
 8009c56:	f000 f865 	bl	8009d24 <__malloc_unlock>
 8009c5a:	f026 0607 	bic.w	r6, r6, #7
 8009c5e:	1d23      	adds	r3, r4, #4
 8009c60:	1af2      	subs	r2, r6, r3
 8009c62:	d0b6      	beq.n	8009bd2 <_malloc_r+0x22>
 8009c64:	1b9b      	subs	r3, r3, r6
 8009c66:	50a3      	str	r3, [r4, r2]
 8009c68:	e7b3      	b.n	8009bd2 <_malloc_r+0x22>
 8009c6a:	6862      	ldr	r2, [r4, #4]
 8009c6c:	42a3      	cmp	r3, r4
 8009c6e:	bf0c      	ite	eq
 8009c70:	6032      	streq	r2, [r6, #0]
 8009c72:	605a      	strne	r2, [r3, #4]
 8009c74:	e7ec      	b.n	8009c50 <_malloc_r+0xa0>
 8009c76:	4623      	mov	r3, r4
 8009c78:	6864      	ldr	r4, [r4, #4]
 8009c7a:	e7b2      	b.n	8009be2 <_malloc_r+0x32>
 8009c7c:	4634      	mov	r4, r6
 8009c7e:	6876      	ldr	r6, [r6, #4]
 8009c80:	e7b9      	b.n	8009bf6 <_malloc_r+0x46>
 8009c82:	230c      	movs	r3, #12
 8009c84:	603b      	str	r3, [r7, #0]
 8009c86:	4638      	mov	r0, r7
 8009c88:	f000 f84c 	bl	8009d24 <__malloc_unlock>
 8009c8c:	e7a1      	b.n	8009bd2 <_malloc_r+0x22>
 8009c8e:	6025      	str	r5, [r4, #0]
 8009c90:	e7de      	b.n	8009c50 <_malloc_r+0xa0>
 8009c92:	bf00      	nop
 8009c94:	20000880 	.word	0x20000880

08009c98 <_realloc_r>:
 8009c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c9c:	4680      	mov	r8, r0
 8009c9e:	4614      	mov	r4, r2
 8009ca0:	460e      	mov	r6, r1
 8009ca2:	b921      	cbnz	r1, 8009cae <_realloc_r+0x16>
 8009ca4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ca8:	4611      	mov	r1, r2
 8009caa:	f7ff bf81 	b.w	8009bb0 <_malloc_r>
 8009cae:	b92a      	cbnz	r2, 8009cbc <_realloc_r+0x24>
 8009cb0:	f7ff ff12 	bl	8009ad8 <_free_r>
 8009cb4:	4625      	mov	r5, r4
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cbc:	f000 f838 	bl	8009d30 <_malloc_usable_size_r>
 8009cc0:	4284      	cmp	r4, r0
 8009cc2:	4607      	mov	r7, r0
 8009cc4:	d802      	bhi.n	8009ccc <_realloc_r+0x34>
 8009cc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009cca:	d812      	bhi.n	8009cf2 <_realloc_r+0x5a>
 8009ccc:	4621      	mov	r1, r4
 8009cce:	4640      	mov	r0, r8
 8009cd0:	f7ff ff6e 	bl	8009bb0 <_malloc_r>
 8009cd4:	4605      	mov	r5, r0
 8009cd6:	2800      	cmp	r0, #0
 8009cd8:	d0ed      	beq.n	8009cb6 <_realloc_r+0x1e>
 8009cda:	42bc      	cmp	r4, r7
 8009cdc:	4622      	mov	r2, r4
 8009cde:	4631      	mov	r1, r6
 8009ce0:	bf28      	it	cs
 8009ce2:	463a      	movcs	r2, r7
 8009ce4:	f7ff fed0 	bl	8009a88 <memcpy>
 8009ce8:	4631      	mov	r1, r6
 8009cea:	4640      	mov	r0, r8
 8009cec:	f7ff fef4 	bl	8009ad8 <_free_r>
 8009cf0:	e7e1      	b.n	8009cb6 <_realloc_r+0x1e>
 8009cf2:	4635      	mov	r5, r6
 8009cf4:	e7df      	b.n	8009cb6 <_realloc_r+0x1e>
	...

08009cf8 <_sbrk_r>:
 8009cf8:	b538      	push	{r3, r4, r5, lr}
 8009cfa:	4d06      	ldr	r5, [pc, #24]	; (8009d14 <_sbrk_r+0x1c>)
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	4604      	mov	r4, r0
 8009d00:	4608      	mov	r0, r1
 8009d02:	602b      	str	r3, [r5, #0]
 8009d04:	f7f7 fb14 	bl	8001330 <_sbrk>
 8009d08:	1c43      	adds	r3, r0, #1
 8009d0a:	d102      	bne.n	8009d12 <_sbrk_r+0x1a>
 8009d0c:	682b      	ldr	r3, [r5, #0]
 8009d0e:	b103      	cbz	r3, 8009d12 <_sbrk_r+0x1a>
 8009d10:	6023      	str	r3, [r4, #0]
 8009d12:	bd38      	pop	{r3, r4, r5, pc}
 8009d14:	20000888 	.word	0x20000888

08009d18 <__malloc_lock>:
 8009d18:	4801      	ldr	r0, [pc, #4]	; (8009d20 <__malloc_lock+0x8>)
 8009d1a:	f000 b811 	b.w	8009d40 <__retarget_lock_acquire_recursive>
 8009d1e:	bf00      	nop
 8009d20:	2000088c 	.word	0x2000088c

08009d24 <__malloc_unlock>:
 8009d24:	4801      	ldr	r0, [pc, #4]	; (8009d2c <__malloc_unlock+0x8>)
 8009d26:	f000 b80c 	b.w	8009d42 <__retarget_lock_release_recursive>
 8009d2a:	bf00      	nop
 8009d2c:	2000088c 	.word	0x2000088c

08009d30 <_malloc_usable_size_r>:
 8009d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d34:	1f18      	subs	r0, r3, #4
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	bfbc      	itt	lt
 8009d3a:	580b      	ldrlt	r3, [r1, r0]
 8009d3c:	18c0      	addlt	r0, r0, r3
 8009d3e:	4770      	bx	lr

08009d40 <__retarget_lock_acquire_recursive>:
 8009d40:	4770      	bx	lr

08009d42 <__retarget_lock_release_recursive>:
 8009d42:	4770      	bx	lr

08009d44 <_init>:
 8009d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d46:	bf00      	nop
 8009d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d4a:	bc08      	pop	{r3}
 8009d4c:	469e      	mov	lr, r3
 8009d4e:	4770      	bx	lr

08009d50 <_fini>:
 8009d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d52:	bf00      	nop
 8009d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d56:	bc08      	pop	{r3}
 8009d58:	469e      	mov	lr, r3
 8009d5a:	4770      	bx	lr
