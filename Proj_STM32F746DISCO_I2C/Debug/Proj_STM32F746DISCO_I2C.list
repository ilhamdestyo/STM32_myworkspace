
Proj_STM32F746DISCO_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e28  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001184  08003ff0  08003ff0  00013ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005174  08005174  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005174  08005174  00015174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800517c  0800517c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800517c  0800517c  0001517c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005180  08005180  00015180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  20000014  08005198  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08005198  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4a9  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c07  00000000  00000000  0002a4ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000920  00000000  00000000  0002c0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000828  00000000  00000000  0002ca18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024e54  00000000  00000000  0002d240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c238  00000000  00000000  00052094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1397  00000000  00000000  0005e2cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013f663  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023dc  00000000  00000000  0013f6b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000014 	.word	0x20000014
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003fd8 	.word	0x08003fd8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000018 	.word	0x20000018
 8000204:	08003fd8 	.word	0x08003fd8

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000510:	2003      	movs	r0, #3
 8000512:	f000 f92f 	bl	8000774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000516:	200f      	movs	r0, #15
 8000518:	f000 f806 	bl	8000528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800051c:	f003 f9fe 	bl	800391c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000520:	2300      	movs	r3, #0
}
 8000522:	4618      	mov	r0, r3
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_InitTick+0x54>)
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <HAL_InitTick+0x58>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	4619      	mov	r1, r3
 800053a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000542:	fbb2 f3f3 	udiv	r3, r2, r3
 8000546:	4618      	mov	r0, r3
 8000548:	f000 f93b 	bl	80007c2 <HAL_SYSTICK_Config>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000552:	2301      	movs	r3, #1
 8000554:	e00e      	b.n	8000574 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2b0f      	cmp	r3, #15
 800055a:	d80a      	bhi.n	8000572 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800055c:	2200      	movs	r2, #0
 800055e:	6879      	ldr	r1, [r7, #4]
 8000560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000564:	f000 f911 	bl	800078a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000568:	4a06      	ldr	r2, [pc, #24]	; (8000584 <HAL_InitTick+0x5c>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800056e:	2300      	movs	r3, #0
 8000570:	e000      	b.n	8000574 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
}
 8000574:	4618      	mov	r0, r3
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000010 	.word	0x20000010
 8000580:	20000004 	.word	0x20000004
 8000584:	20000000 	.word	0x20000000

08000588 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <HAL_IncTick+0x20>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	461a      	mov	r2, r3
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <HAL_IncTick+0x24>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4413      	add	r3, r2
 8000598:	4a04      	ldr	r2, [pc, #16]	; (80005ac <HAL_IncTick+0x24>)
 800059a:	6013      	str	r3, [r2, #0]
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000004 	.word	0x20000004
 80005ac:	20000030 	.word	0x20000030

080005b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  return uwTick;
 80005b4:	4b03      	ldr	r3, [pc, #12]	; (80005c4 <HAL_GetTick+0x14>)
 80005b6:	681b      	ldr	r3, [r3, #0]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000030 	.word	0x20000030

080005c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005d0:	f7ff ffee 	bl	80005b0 <HAL_GetTick>
 80005d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005e0:	d005      	beq.n	80005ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <HAL_Delay+0x44>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	461a      	mov	r2, r3
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4413      	add	r3, r2
 80005ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005ee:	bf00      	nop
 80005f0:	f7ff ffde 	bl	80005b0 <HAL_GetTick>
 80005f4:	4602      	mov	r2, r0
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	68fa      	ldr	r2, [r7, #12]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d8f7      	bhi.n	80005f0 <HAL_Delay+0x28>
  {
  }
}
 8000600:	bf00      	nop
 8000602:	bf00      	nop
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000004 	.word	0x20000004

08000610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f003 0307 	and.w	r3, r3, #7
 800061e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000620:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <__NVIC_SetPriorityGrouping+0x40>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000626:	68ba      	ldr	r2, [r7, #8]
 8000628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800062c:	4013      	ands	r3, r2
 800062e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <__NVIC_SetPriorityGrouping+0x44>)
 800063a:	4313      	orrs	r3, r2
 800063c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800063e:	4a04      	ldr	r2, [pc, #16]	; (8000650 <__NVIC_SetPriorityGrouping+0x40>)
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	60d3      	str	r3, [r2, #12]
}
 8000644:	bf00      	nop
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00
 8000654:	05fa0000 	.word	0x05fa0000

08000658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <__NVIC_GetPriorityGrouping+0x18>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	0a1b      	lsrs	r3, r3, #8
 8000662:	f003 0307 	and.w	r3, r3, #7
}
 8000666:	4618      	mov	r0, r3
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	6039      	str	r1, [r7, #0]
 800067e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000684:	2b00      	cmp	r3, #0
 8000686:	db0a      	blt.n	800069e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	b2da      	uxtb	r2, r3
 800068c:	490c      	ldr	r1, [pc, #48]	; (80006c0 <__NVIC_SetPriority+0x4c>)
 800068e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000692:	0112      	lsls	r2, r2, #4
 8000694:	b2d2      	uxtb	r2, r2
 8000696:	440b      	add	r3, r1
 8000698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800069c:	e00a      	b.n	80006b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	b2da      	uxtb	r2, r3
 80006a2:	4908      	ldr	r1, [pc, #32]	; (80006c4 <__NVIC_SetPriority+0x50>)
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	f003 030f 	and.w	r3, r3, #15
 80006aa:	3b04      	subs	r3, #4
 80006ac:	0112      	lsls	r2, r2, #4
 80006ae:	b2d2      	uxtb	r2, r2
 80006b0:	440b      	add	r3, r1
 80006b2:	761a      	strb	r2, [r3, #24]
}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	e000e100 	.word	0xe000e100
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b089      	sub	sp, #36	; 0x24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	f003 0307 	and.w	r3, r3, #7
 80006da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006dc:	69fb      	ldr	r3, [r7, #28]
 80006de:	f1c3 0307 	rsb	r3, r3, #7
 80006e2:	2b04      	cmp	r3, #4
 80006e4:	bf28      	it	cs
 80006e6:	2304      	movcs	r3, #4
 80006e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	3304      	adds	r3, #4
 80006ee:	2b06      	cmp	r3, #6
 80006f0:	d902      	bls.n	80006f8 <NVIC_EncodePriority+0x30>
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	3b03      	subs	r3, #3
 80006f6:	e000      	b.n	80006fa <NVIC_EncodePriority+0x32>
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000700:	69bb      	ldr	r3, [r7, #24]
 8000702:	fa02 f303 	lsl.w	r3, r2, r3
 8000706:	43da      	mvns	r2, r3
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	401a      	ands	r2, r3
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000710:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	fa01 f303 	lsl.w	r3, r1, r3
 800071a:	43d9      	mvns	r1, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000720:	4313      	orrs	r3, r2
         );
}
 8000722:	4618      	mov	r0, r3
 8000724:	3724      	adds	r7, #36	; 0x24
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
	...

08000730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3b01      	subs	r3, #1
 800073c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000740:	d301      	bcc.n	8000746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000742:	2301      	movs	r3, #1
 8000744:	e00f      	b.n	8000766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000746:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <SysTick_Config+0x40>)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3b01      	subs	r3, #1
 800074c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800074e:	210f      	movs	r1, #15
 8000750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000754:	f7ff ff8e 	bl	8000674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <SysTick_Config+0x40>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075e:	4b04      	ldr	r3, [pc, #16]	; (8000770 <SysTick_Config+0x40>)
 8000760:	2207      	movs	r2, #7
 8000762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000764:	2300      	movs	r3, #0
}
 8000766:	4618      	mov	r0, r3
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	e000e010 	.word	0xe000e010

08000774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f7ff ff47 	bl	8000610 <__NVIC_SetPriorityGrouping>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800078a:	b580      	push	{r7, lr}
 800078c:	b086      	sub	sp, #24
 800078e:	af00      	add	r7, sp, #0
 8000790:	4603      	mov	r3, r0
 8000792:	60b9      	str	r1, [r7, #8]
 8000794:	607a      	str	r2, [r7, #4]
 8000796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800079c:	f7ff ff5c 	bl	8000658 <__NVIC_GetPriorityGrouping>
 80007a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	68b9      	ldr	r1, [r7, #8]
 80007a6:	6978      	ldr	r0, [r7, #20]
 80007a8:	f7ff ff8e 	bl	80006c8 <NVIC_EncodePriority>
 80007ac:	4602      	mov	r2, r0
 80007ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007b2:	4611      	mov	r1, r2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ff5d 	bl	8000674 <__NVIC_SetPriority>
}
 80007ba:	bf00      	nop
 80007bc:	3718      	adds	r7, #24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f7ff ffb0 	bl	8000730 <SysTick_Config>
 80007d0:	4603      	mov	r3, r0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007dc:	b480      	push	{r7}
 80007de:	b089      	sub	sp, #36	; 0x24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
 80007fa:	e175      	b.n	8000ae8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80007fc:	2201      	movs	r2, #1
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	fa02 f303 	lsl.w	r3, r2, r3
 8000804:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	697a      	ldr	r2, [r7, #20]
 800080c:	4013      	ands	r3, r2
 800080e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000810:	693a      	ldr	r2, [r7, #16]
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	429a      	cmp	r2, r3
 8000816:	f040 8164 	bne.w	8000ae2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	f003 0303 	and.w	r3, r3, #3
 8000822:	2b01      	cmp	r3, #1
 8000824:	d005      	beq.n	8000832 <HAL_GPIO_Init+0x56>
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	f003 0303 	and.w	r3, r3, #3
 800082e:	2b02      	cmp	r3, #2
 8000830:	d130      	bne.n	8000894 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	689b      	ldr	r3, [r3, #8]
 8000836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000838:	69fb      	ldr	r3, [r7, #28]
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	2203      	movs	r2, #3
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	43db      	mvns	r3, r3
 8000844:	69ba      	ldr	r2, [r7, #24]
 8000846:	4013      	ands	r3, r2
 8000848:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	68da      	ldr	r2, [r3, #12]
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	fa02 f303 	lsl.w	r3, r2, r3
 8000856:	69ba      	ldr	r2, [r7, #24]
 8000858:	4313      	orrs	r3, r2
 800085a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	69ba      	ldr	r2, [r7, #24]
 8000860:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000868:	2201      	movs	r2, #1
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	fa02 f303 	lsl.w	r3, r2, r3
 8000870:	43db      	mvns	r3, r3
 8000872:	69ba      	ldr	r2, [r7, #24]
 8000874:	4013      	ands	r3, r2
 8000876:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	091b      	lsrs	r3, r3, #4
 800087e:	f003 0201 	and.w	r2, r3, #1
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	69ba      	ldr	r2, [r7, #24]
 800088a:	4313      	orrs	r3, r2
 800088c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	69ba      	ldr	r2, [r7, #24]
 8000892:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	f003 0303 	and.w	r3, r3, #3
 800089c:	2b03      	cmp	r3, #3
 800089e:	d017      	beq.n	80008d0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	2203      	movs	r2, #3
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	43db      	mvns	r3, r3
 80008b2:	69ba      	ldr	r2, [r7, #24]
 80008b4:	4013      	ands	r3, r2
 80008b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	689a      	ldr	r2, [r3, #8]
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	69ba      	ldr	r2, [r7, #24]
 80008c6:	4313      	orrs	r3, r2
 80008c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	69ba      	ldr	r2, [r7, #24]
 80008ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	f003 0303 	and.w	r3, r3, #3
 80008d8:	2b02      	cmp	r3, #2
 80008da:	d123      	bne.n	8000924 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	08da      	lsrs	r2, r3, #3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3208      	adds	r2, #8
 80008e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	f003 0307 	and.w	r3, r3, #7
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	220f      	movs	r2, #15
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	43db      	mvns	r3, r3
 80008fa:	69ba      	ldr	r2, [r7, #24]
 80008fc:	4013      	ands	r3, r2
 80008fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	691a      	ldr	r2, [r3, #16]
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	f003 0307 	and.w	r3, r3, #7
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	69ba      	ldr	r2, [r7, #24]
 8000912:	4313      	orrs	r3, r2
 8000914:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	08da      	lsrs	r2, r3, #3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3208      	adds	r2, #8
 800091e:	69b9      	ldr	r1, [r7, #24]
 8000920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	2203      	movs	r2, #3
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	43db      	mvns	r3, r3
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	4013      	ands	r3, r2
 800093a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	f003 0203 	and.w	r2, r3, #3
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	69ba      	ldr	r2, [r7, #24]
 800094e:	4313      	orrs	r3, r2
 8000950:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000960:	2b00      	cmp	r3, #0
 8000962:	f000 80be 	beq.w	8000ae2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	4b66      	ldr	r3, [pc, #408]	; (8000b00 <HAL_GPIO_Init+0x324>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	4a65      	ldr	r2, [pc, #404]	; (8000b00 <HAL_GPIO_Init+0x324>)
 800096c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000970:	6453      	str	r3, [r2, #68]	; 0x44
 8000972:	4b63      	ldr	r3, [pc, #396]	; (8000b00 <HAL_GPIO_Init+0x324>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800097e:	4a61      	ldr	r2, [pc, #388]	; (8000b04 <HAL_GPIO_Init+0x328>)
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	089b      	lsrs	r3, r3, #2
 8000984:	3302      	adds	r3, #2
 8000986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800098a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	f003 0303 	and.w	r3, r3, #3
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	220f      	movs	r2, #15
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43db      	mvns	r3, r3
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	4013      	ands	r3, r2
 80009a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a58      	ldr	r2, [pc, #352]	; (8000b08 <HAL_GPIO_Init+0x32c>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d037      	beq.n	8000a1a <HAL_GPIO_Init+0x23e>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a57      	ldr	r2, [pc, #348]	; (8000b0c <HAL_GPIO_Init+0x330>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d031      	beq.n	8000a16 <HAL_GPIO_Init+0x23a>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a56      	ldr	r2, [pc, #344]	; (8000b10 <HAL_GPIO_Init+0x334>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d02b      	beq.n	8000a12 <HAL_GPIO_Init+0x236>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a55      	ldr	r2, [pc, #340]	; (8000b14 <HAL_GPIO_Init+0x338>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d025      	beq.n	8000a0e <HAL_GPIO_Init+0x232>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a54      	ldr	r2, [pc, #336]	; (8000b18 <HAL_GPIO_Init+0x33c>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d01f      	beq.n	8000a0a <HAL_GPIO_Init+0x22e>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a53      	ldr	r2, [pc, #332]	; (8000b1c <HAL_GPIO_Init+0x340>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d019      	beq.n	8000a06 <HAL_GPIO_Init+0x22a>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a52      	ldr	r2, [pc, #328]	; (8000b20 <HAL_GPIO_Init+0x344>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d013      	beq.n	8000a02 <HAL_GPIO_Init+0x226>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a51      	ldr	r2, [pc, #324]	; (8000b24 <HAL_GPIO_Init+0x348>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d00d      	beq.n	80009fe <HAL_GPIO_Init+0x222>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a50      	ldr	r2, [pc, #320]	; (8000b28 <HAL_GPIO_Init+0x34c>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d007      	beq.n	80009fa <HAL_GPIO_Init+0x21e>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a4f      	ldr	r2, [pc, #316]	; (8000b2c <HAL_GPIO_Init+0x350>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d101      	bne.n	80009f6 <HAL_GPIO_Init+0x21a>
 80009f2:	2309      	movs	r3, #9
 80009f4:	e012      	b.n	8000a1c <HAL_GPIO_Init+0x240>
 80009f6:	230a      	movs	r3, #10
 80009f8:	e010      	b.n	8000a1c <HAL_GPIO_Init+0x240>
 80009fa:	2308      	movs	r3, #8
 80009fc:	e00e      	b.n	8000a1c <HAL_GPIO_Init+0x240>
 80009fe:	2307      	movs	r3, #7
 8000a00:	e00c      	b.n	8000a1c <HAL_GPIO_Init+0x240>
 8000a02:	2306      	movs	r3, #6
 8000a04:	e00a      	b.n	8000a1c <HAL_GPIO_Init+0x240>
 8000a06:	2305      	movs	r3, #5
 8000a08:	e008      	b.n	8000a1c <HAL_GPIO_Init+0x240>
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	e006      	b.n	8000a1c <HAL_GPIO_Init+0x240>
 8000a0e:	2303      	movs	r3, #3
 8000a10:	e004      	b.n	8000a1c <HAL_GPIO_Init+0x240>
 8000a12:	2302      	movs	r3, #2
 8000a14:	e002      	b.n	8000a1c <HAL_GPIO_Init+0x240>
 8000a16:	2301      	movs	r3, #1
 8000a18:	e000      	b.n	8000a1c <HAL_GPIO_Init+0x240>
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	69fa      	ldr	r2, [r7, #28]
 8000a1e:	f002 0203 	and.w	r2, r2, #3
 8000a22:	0092      	lsls	r2, r2, #2
 8000a24:	4093      	lsls	r3, r2
 8000a26:	69ba      	ldr	r2, [r7, #24]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000a2c:	4935      	ldr	r1, [pc, #212]	; (8000b04 <HAL_GPIO_Init+0x328>)
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	089b      	lsrs	r3, r3, #2
 8000a32:	3302      	adds	r3, #2
 8000a34:	69ba      	ldr	r2, [r7, #24]
 8000a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a3a:	4b3d      	ldr	r3, [pc, #244]	; (8000b30 <HAL_GPIO_Init+0x354>)
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	43db      	mvns	r3, r3
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	4013      	ands	r3, r2
 8000a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d003      	beq.n	8000a5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000a56:	69ba      	ldr	r2, [r7, #24]
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a5e:	4a34      	ldr	r2, [pc, #208]	; (8000b30 <HAL_GPIO_Init+0x354>)
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a64:	4b32      	ldr	r3, [pc, #200]	; (8000b30 <HAL_GPIO_Init+0x354>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	4013      	ands	r3, r2
 8000a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d003      	beq.n	8000a88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000a80:	69ba      	ldr	r2, [r7, #24]
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a88:	4a29      	ldr	r2, [pc, #164]	; (8000b30 <HAL_GPIO_Init+0x354>)
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000a8e:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <HAL_GPIO_Init+0x354>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	43db      	mvns	r3, r3
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d003      	beq.n	8000ab2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000aaa:	69ba      	ldr	r2, [r7, #24]
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ab2:	4a1f      	ldr	r2, [pc, #124]	; (8000b30 <HAL_GPIO_Init+0x354>)
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <HAL_GPIO_Init+0x354>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	69ba      	ldr	r2, [r7, #24]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d003      	beq.n	8000adc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000ad4:	69ba      	ldr	r2, [r7, #24]
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000adc:	4a14      	ldr	r2, [pc, #80]	; (8000b30 <HAL_GPIO_Init+0x354>)
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	61fb      	str	r3, [r7, #28]
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	2b0f      	cmp	r3, #15
 8000aec:	f67f ae86 	bls.w	80007fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000af0:	bf00      	nop
 8000af2:	bf00      	nop
 8000af4:	3724      	adds	r7, #36	; 0x24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40013800 	.word	0x40013800
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	40020400 	.word	0x40020400
 8000b10:	40020800 	.word	0x40020800
 8000b14:	40020c00 	.word	0x40020c00
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40021400 	.word	0x40021400
 8000b20:	40021800 	.word	0x40021800
 8000b24:	40021c00 	.word	0x40021c00
 8000b28:	40022000 	.word	0x40022000
 8000b2c:	40022400 	.word	0x40022400
 8000b30:	40013c00 	.word	0x40013c00

08000b34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d101      	bne.n	8000b46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e07f      	b.n	8000c46 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d106      	bne.n	8000b60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2200      	movs	r2, #0
 8000b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f002 ff02 	bl	8003964 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2224      	movs	r2, #36	; 0x24
 8000b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f022 0201 	bic.w	r2, r2, #1
 8000b76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	685a      	ldr	r2, [r3, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000b84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	689a      	ldr	r2, [r3, #8]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	68db      	ldr	r3, [r3, #12]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d107      	bne.n	8000bae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	689a      	ldr	r2, [r3, #8]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	e006      	b.n	8000bbc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	689a      	ldr	r2, [r3, #8]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000bba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d104      	bne.n	8000bce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bcc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	6859      	ldr	r1, [r3, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <HAL_I2C_Init+0x11c>)
 8000bda:	430b      	orrs	r3, r1
 8000bdc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	68da      	ldr	r2, [r3, #12]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000bec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	691a      	ldr	r2, [r3, #16]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	430a      	orrs	r2, r1
 8000c06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	69d9      	ldr	r1, [r3, #28]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6a1a      	ldr	r2, [r3, #32]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	430a      	orrs	r2, r1
 8000c16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f042 0201 	orr.w	r2, r2, #1
 8000c26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2220      	movs	r2, #32
 8000c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	02008000 	.word	0x02008000

08000c54 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af02      	add	r7, sp, #8
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	607a      	str	r2, [r7, #4]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	460b      	mov	r3, r1
 8000c62:	817b      	strh	r3, [r7, #10]
 8000c64:	4613      	mov	r3, r2
 8000c66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2b20      	cmp	r3, #32
 8000c72:	f040 80da 	bne.w	8000e2a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d101      	bne.n	8000c84 <HAL_I2C_Master_Transmit+0x30>
 8000c80:	2302      	movs	r3, #2
 8000c82:	e0d3      	b.n	8000e2c <HAL_I2C_Master_Transmit+0x1d8>
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2201      	movs	r2, #1
 8000c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000c8c:	f7ff fc90 	bl	80005b0 <HAL_GetTick>
 8000c90:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	2319      	movs	r3, #25
 8000c98:	2201      	movs	r2, #1
 8000c9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c9e:	68f8      	ldr	r0, [r7, #12]
 8000ca0:	f000 f9f8 	bl	8001094 <I2C_WaitOnFlagUntilTimeout>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e0be      	b.n	8000e2c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	2221      	movs	r2, #33	; 0x21
 8000cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2210      	movs	r2, #16
 8000cba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	893a      	ldrh	r2, [r7, #8]
 8000cce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	2bff      	cmp	r3, #255	; 0xff
 8000cde:	d90e      	bls.n	8000cfe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	22ff      	movs	r2, #255	; 0xff
 8000ce4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	8979      	ldrh	r1, [r7, #10]
 8000cee:	4b51      	ldr	r3, [pc, #324]	; (8000e34 <HAL_I2C_Master_Transmit+0x1e0>)
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cf6:	68f8      	ldr	r0, [r7, #12]
 8000cf8:	f000 fb68 	bl	80013cc <I2C_TransferConfig>
 8000cfc:	e06c      	b.n	8000dd8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	8979      	ldrh	r1, [r7, #10]
 8000d10:	4b48      	ldr	r3, [pc, #288]	; (8000e34 <HAL_I2C_Master_Transmit+0x1e0>)
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d18:	68f8      	ldr	r0, [r7, #12]
 8000d1a:	f000 fb57 	bl	80013cc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8000d1e:	e05b      	b.n	8000dd8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d20:	697a      	ldr	r2, [r7, #20]
 8000d22:	6a39      	ldr	r1, [r7, #32]
 8000d24:	68f8      	ldr	r0, [r7, #12]
 8000d26:	f000 f9f5 	bl	8001114 <I2C_WaitOnTXISFlagUntilTimeout>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	e07b      	b.n	8000e2c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d38:	781a      	ldrb	r2, [r3, #0]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d44:	1c5a      	adds	r2, r3, #1
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	3b01      	subs	r3, #1
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d034      	beq.n	8000dd8 <HAL_I2C_Master_Transmit+0x184>
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d130      	bne.n	8000dd8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	9300      	str	r3, [sp, #0]
 8000d7a:	6a3b      	ldr	r3, [r7, #32]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2180      	movs	r1, #128	; 0x80
 8000d80:	68f8      	ldr	r0, [r7, #12]
 8000d82:	f000 f987 	bl	8001094 <I2C_WaitOnFlagUntilTimeout>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e04d      	b.n	8000e2c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	2bff      	cmp	r3, #255	; 0xff
 8000d98:	d90e      	bls.n	8000db8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	22ff      	movs	r2, #255	; 0xff
 8000d9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	8979      	ldrh	r1, [r7, #10]
 8000da8:	2300      	movs	r3, #0
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000db0:	68f8      	ldr	r0, [r7, #12]
 8000db2:	f000 fb0b 	bl	80013cc <I2C_TransferConfig>
 8000db6:	e00f      	b.n	8000dd8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	8979      	ldrh	r1, [r7, #10]
 8000dca:	2300      	movs	r3, #0
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dd2:	68f8      	ldr	r0, [r7, #12]
 8000dd4:	f000 fafa 	bl	80013cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d19e      	bne.n	8000d20 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	6a39      	ldr	r1, [r7, #32]
 8000de6:	68f8      	ldr	r0, [r7, #12]
 8000de8:	f000 f9d4 	bl	8001194 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e01a      	b.n	8000e2c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2220      	movs	r2, #32
 8000dfc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6859      	ldr	r1, [r3, #4]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <HAL_I2C_Master_Transmit+0x1e4>)
 8000e0a:	400b      	ands	r3, r1
 8000e0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	2220      	movs	r2, #32
 8000e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	2200      	movs	r2, #0
 8000e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	e000      	b.n	8000e2c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8000e2a:	2302      	movs	r3, #2
  }
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	80002000 	.word	0x80002000
 8000e38:	fe00e800 	.word	0xfe00e800

08000e3c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	; 0x28
 8000e40:	af02      	add	r7, sp, #8
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2b20      	cmp	r3, #32
 8000e5a:	f040 80ef 	bne.w	800103c <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e6c:	d101      	bne.n	8000e72 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	e0e5      	b.n	800103e <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d101      	bne.n	8000e80 <HAL_I2C_IsDeviceReady+0x44>
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	e0de      	b.n	800103e <HAL_I2C_IsDeviceReady+0x202>
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2201      	movs	r2, #1
 8000e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2224      	movs	r2, #36	; 0x24
 8000e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2200      	movs	r2, #0
 8000e94:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d105      	bne.n	8000eaa <HAL_I2C_IsDeviceReady+0x6e>
 8000e9e:	897b      	ldrh	r3, [r7, #10]
 8000ea0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000ea4:	4b68      	ldr	r3, [pc, #416]	; (8001048 <HAL_I2C_IsDeviceReady+0x20c>)
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	e004      	b.n	8000eb4 <HAL_I2C_IsDeviceReady+0x78>
 8000eaa:	897b      	ldrh	r3, [r7, #10]
 8000eac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000eb0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8000eb4:	68fa      	ldr	r2, [r7, #12]
 8000eb6:	6812      	ldr	r2, [r2, #0]
 8000eb8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8000eba:	f7ff fb79 	bl	80005b0 <HAL_GetTick>
 8000ebe:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	f003 0320 	and.w	r3, r3, #32
 8000eca:	2b20      	cmp	r3, #32
 8000ecc:	bf0c      	ite	eq
 8000ece:	2301      	moveq	r3, #1
 8000ed0:	2300      	movne	r3, #0
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	f003 0310 	and.w	r3, r3, #16
 8000ee0:	2b10      	cmp	r3, #16
 8000ee2:	bf0c      	ite	eq
 8000ee4:	2301      	moveq	r3, #1
 8000ee6:	2300      	movne	r3, #0
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8000eec:	e034      	b.n	8000f58 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ef4:	d01a      	beq.n	8000f2c <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000ef6:	f7ff fb5b 	bl	80005b0 <HAL_GetTick>
 8000efa:	4602      	mov	r2, r0
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	683a      	ldr	r2, [r7, #0]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d302      	bcc.n	8000f0c <HAL_I2C_IsDeviceReady+0xd0>
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d10f      	bne.n	8000f2c <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2220      	movs	r2, #32
 8000f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f18:	f043 0220 	orr.w	r2, r3, #32
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e088      	b.n	800103e <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	f003 0320 	and.w	r3, r3, #32
 8000f36:	2b20      	cmp	r3, #32
 8000f38:	bf0c      	ite	eq
 8000f3a:	2301      	moveq	r3, #1
 8000f3c:	2300      	movne	r3, #0
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f003 0310 	and.w	r3, r3, #16
 8000f4c:	2b10      	cmp	r3, #16
 8000f4e:	bf0c      	ite	eq
 8000f50:	2301      	moveq	r3, #1
 8000f52:	2300      	movne	r3, #0
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8000f58:	7ffb      	ldrb	r3, [r7, #31]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d102      	bne.n	8000f64 <HAL_I2C_IsDeviceReady+0x128>
 8000f5e:	7fbb      	ldrb	r3, [r7, #30]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d0c4      	beq.n	8000eee <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	f003 0310 	and.w	r3, r3, #16
 8000f6e:	2b10      	cmp	r3, #16
 8000f70:	d01a      	beq.n	8000fa8 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2120      	movs	r1, #32
 8000f7c:	68f8      	ldr	r0, [r7, #12]
 8000f7e:	f000 f889 	bl	8001094 <I2C_WaitOnFlagUntilTimeout>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e058      	b.n	800103e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2220      	movs	r2, #32
 8000f92:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	2220      	movs	r2, #32
 8000f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	e04a      	b.n	800103e <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2120      	movs	r1, #32
 8000fb2:	68f8      	ldr	r0, [r7, #12]
 8000fb4:	f000 f86e 	bl	8001094 <I2C_WaitOnFlagUntilTimeout>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e03d      	b.n	800103e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2210      	movs	r2, #16
 8000fc8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2220      	movs	r2, #32
 8000fd0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d118      	bne.n	800100c <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	685a      	ldr	r2, [r3, #4]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000fe8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2120      	movs	r1, #32
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f000 f84d 	bl	8001094 <I2C_WaitOnFlagUntilTimeout>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e01c      	b.n	800103e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2220      	movs	r2, #32
 800100a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	3301      	adds	r3, #1
 8001010:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	429a      	cmp	r2, r3
 8001018:	f63f af3d 	bhi.w	8000e96 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2220      	movs	r2, #32
 8001020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001028:	f043 0220 	orr.w	r2, r3, #32
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e000      	b.n	800103e <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 800103c:	2302      	movs	r3, #2
  }
}
 800103e:	4618      	mov	r0, r3
 8001040:	3720      	adds	r7, #32
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	02002000 	.word	0x02002000

0800104c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	2b02      	cmp	r3, #2
 8001060:	d103      	bne.n	800106a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2200      	movs	r2, #0
 8001068:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	2b01      	cmp	r3, #1
 8001076:	d007      	beq.n	8001088 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	699a      	ldr	r2, [r3, #24]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f042 0201 	orr.w	r2, r2, #1
 8001086:	619a      	str	r2, [r3, #24]
  }
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	4613      	mov	r3, r2
 80010a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80010a4:	e022      	b.n	80010ec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010ac:	d01e      	beq.n	80010ec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80010ae:	f7ff fa7f 	bl	80005b0 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d302      	bcc.n	80010c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d113      	bne.n	80010ec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c8:	f043 0220 	orr.w	r2, r3, #32
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2220      	movs	r2, #32
 80010d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e00f      	b.n	800110c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	699a      	ldr	r2, [r3, #24]
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	4013      	ands	r3, r2
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	bf0c      	ite	eq
 80010fc:	2301      	moveq	r3, #1
 80010fe:	2300      	movne	r3, #0
 8001100:	b2db      	uxtb	r3, r3
 8001102:	461a      	mov	r2, r3
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	429a      	cmp	r2, r3
 8001108:	d0cd      	beq.n	80010a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001120:	e02c      	b.n	800117c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	68b9      	ldr	r1, [r7, #8]
 8001126:	68f8      	ldr	r0, [r7, #12]
 8001128:	f000 f870 	bl	800120c <I2C_IsErrorOccurred>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e02a      	b.n	800118c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800113c:	d01e      	beq.n	800117c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800113e:	f7ff fa37 	bl	80005b0 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	68ba      	ldr	r2, [r7, #8]
 800114a:	429a      	cmp	r2, r3
 800114c:	d302      	bcc.n	8001154 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d113      	bne.n	800117c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001158:	f043 0220 	orr.w	r2, r3, #32
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2220      	movs	r2, #32
 8001164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e007      	b.n	800118c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b02      	cmp	r3, #2
 8001188:	d1cb      	bne.n	8001122 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80011a0:	e028      	b.n	80011f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	68f8      	ldr	r0, [r7, #12]
 80011a8:	f000 f830 	bl	800120c <I2C_IsErrorOccurred>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e026      	b.n	8001204 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011b6:	f7ff f9fb 	bl	80005b0 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	68ba      	ldr	r2, [r7, #8]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d302      	bcc.n	80011cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d113      	bne.n	80011f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d0:	f043 0220 	orr.w	r2, r3, #32
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2220      	movs	r2, #32
 80011dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e007      	b.n	8001204 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	f003 0320 	and.w	r3, r3, #32
 80011fe:	2b20      	cmp	r3, #32
 8001200:	d1cf      	bne.n	80011a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001218:	2300      	movs	r3, #0
 800121a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	f003 0310 	and.w	r3, r3, #16
 8001234:	2b00      	cmp	r3, #0
 8001236:	d068      	beq.n	800130a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2210      	movs	r2, #16
 800123e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001240:	e049      	b.n	80012d6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001248:	d045      	beq.n	80012d6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800124a:	f7ff f9b1 	bl	80005b0 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	68ba      	ldr	r2, [r7, #8]
 8001256:	429a      	cmp	r2, r3
 8001258:	d302      	bcc.n	8001260 <I2C_IsErrorOccurred+0x54>
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d13a      	bne.n	80012d6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001272:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800127e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001282:	d121      	bne.n	80012c8 <I2C_IsErrorOccurred+0xbc>
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800128a:	d01d      	beq.n	80012c8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800128c:	7cfb      	ldrb	r3, [r7, #19]
 800128e:	2b20      	cmp	r3, #32
 8001290:	d01a      	beq.n	80012c8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012a0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80012a2:	f7ff f985 	bl	80005b0 <HAL_GetTick>
 80012a6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80012a8:	e00e      	b.n	80012c8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80012aa:	f7ff f981 	bl	80005b0 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b19      	cmp	r3, #25
 80012b6:	d907      	bls.n	80012c8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80012b8:	6a3b      	ldr	r3, [r7, #32]
 80012ba:	f043 0320 	orr.w	r3, r3, #32
 80012be:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80012c6:	e006      	b.n	80012d6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	f003 0320 	and.w	r3, r3, #32
 80012d2:	2b20      	cmp	r3, #32
 80012d4:	d1e9      	bne.n	80012aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	f003 0320 	and.w	r3, r3, #32
 80012e0:	2b20      	cmp	r3, #32
 80012e2:	d003      	beq.n	80012ec <I2C_IsErrorOccurred+0xe0>
 80012e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0aa      	beq.n	8001242 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80012ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d103      	bne.n	80012fc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2220      	movs	r2, #32
 80012fa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80012fc:	6a3b      	ldr	r3, [r7, #32]
 80012fe:	f043 0304 	orr.w	r3, r3, #4
 8001302:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001318:	2b00      	cmp	r3, #0
 800131a:	d00b      	beq.n	8001334 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800131c:	6a3b      	ldr	r3, [r7, #32]
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f44f 7280 	mov.w	r2, #256	; 0x100
 800132c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00b      	beq.n	8001356 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800133e:	6a3b      	ldr	r3, [r7, #32]
 8001340:	f043 0308 	orr.w	r3, r3, #8
 8001344:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800134e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800135c:	2b00      	cmp	r3, #0
 800135e:	d00b      	beq.n	8001378 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001360:	6a3b      	ldr	r3, [r7, #32]
 8001362:	f043 0302 	orr.w	r3, r3, #2
 8001366:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001370:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001378:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800137c:	2b00      	cmp	r3, #0
 800137e:	d01c      	beq.n	80013ba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001380:	68f8      	ldr	r0, [r7, #12]
 8001382:	f7ff fe63 	bl	800104c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	6859      	ldr	r1, [r3, #4]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <I2C_IsErrorOccurred+0x1bc>)
 8001392:	400b      	ands	r3, r1
 8001394:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800139a:	6a3b      	ldr	r3, [r7, #32]
 800139c:	431a      	orrs	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2220      	movs	r2, #32
 80013a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80013ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3728      	adds	r7, #40	; 0x28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	fe00e800 	.word	0xfe00e800

080013cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b087      	sub	sp, #28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	460b      	mov	r3, r1
 80013d8:	817b      	strh	r3, [r7, #10]
 80013da:	4613      	mov	r3, r2
 80013dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80013de:	897b      	ldrh	r3, [r7, #10]
 80013e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80013e4:	7a7b      	ldrb	r3, [r7, #9]
 80013e6:	041b      	lsls	r3, r3, #16
 80013e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80013ec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80013f2:	6a3b      	ldr	r3, [r7, #32]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013fa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	0d5b      	lsrs	r3, r3, #21
 8001406:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800140a:	4b08      	ldr	r3, [pc, #32]	; (800142c <I2C_TransferConfig+0x60>)
 800140c:	430b      	orrs	r3, r1
 800140e:	43db      	mvns	r3, r3
 8001410:	ea02 0103 	and.w	r1, r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	430a      	orrs	r2, r1
 800141c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800141e:	bf00      	nop
 8001420:	371c      	adds	r7, #28
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	03ff63ff 	.word	0x03ff63ff

08001430 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b20      	cmp	r3, #32
 8001444:	d138      	bne.n	80014b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800144c:	2b01      	cmp	r3, #1
 800144e:	d101      	bne.n	8001454 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001450:	2302      	movs	r3, #2
 8001452:	e032      	b.n	80014ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2224      	movs	r2, #36	; 0x24
 8001460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f022 0201 	bic.w	r2, r2, #1
 8001472:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001482:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6819      	ldr	r1, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	430a      	orrs	r2, r1
 8001492:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f042 0201 	orr.w	r2, r2, #1
 80014a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2220      	movs	r2, #32
 80014a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	e000      	b.n	80014ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80014b8:	2302      	movs	r3, #2
  }
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b085      	sub	sp, #20
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
 80014ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b20      	cmp	r3, #32
 80014da:	d139      	bne.n	8001550 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d101      	bne.n	80014ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80014e6:	2302      	movs	r3, #2
 80014e8:	e033      	b.n	8001552 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2224      	movs	r2, #36	; 0x24
 80014f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 0201 	bic.w	r2, r2, #1
 8001508:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001518:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	4313      	orrs	r3, r2
 8001522:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0201 	orr.w	r2, r2, #1
 800153a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2220      	movs	r2, #32
 8001540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	e000      	b.n	8001552 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001550:	2302      	movs	r3, #2
  }
}
 8001552:	4618      	mov	r0, r3
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	4a22      	ldr	r2, [pc, #136]	; (80015f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001574:	6413      	str	r3, [r2, #64]	; 0x40
 8001576:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001582:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a1d      	ldr	r2, [pc, #116]	; (80015fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800158e:	f7ff f80f 	bl	80005b0 <HAL_GetTick>
 8001592:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001594:	e009      	b.n	80015aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001596:	f7ff f80b 	bl	80005b0 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015a4:	d901      	bls.n	80015aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e022      	b.n	80015f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015aa:	4b14      	ldr	r3, [pc, #80]	; (80015fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b6:	d1ee      	bne.n	8001596 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80015b8:	4b10      	ldr	r3, [pc, #64]	; (80015fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0f      	ldr	r2, [pc, #60]	; (80015fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80015be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015c4:	f7fe fff4 	bl	80005b0 <HAL_GetTick>
 80015c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015ca:	e009      	b.n	80015e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015cc:	f7fe fff0 	bl	80005b0 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015da:	d901      	bls.n	80015e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e007      	b.n	80015f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015ec:	d1ee      	bne.n	80015cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40007000 	.word	0x40007000

08001600 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001608:	2300      	movs	r3, #0
 800160a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e291      	b.n	8001b3a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 8087 	beq.w	8001732 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001624:	4b96      	ldr	r3, [pc, #600]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 030c 	and.w	r3, r3, #12
 800162c:	2b04      	cmp	r3, #4
 800162e:	d00c      	beq.n	800164a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001630:	4b93      	ldr	r3, [pc, #588]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 030c 	and.w	r3, r3, #12
 8001638:	2b08      	cmp	r3, #8
 800163a:	d112      	bne.n	8001662 <HAL_RCC_OscConfig+0x62>
 800163c:	4b90      	ldr	r3, [pc, #576]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001644:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001648:	d10b      	bne.n	8001662 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800164a:	4b8d      	ldr	r3, [pc, #564]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d06c      	beq.n	8001730 <HAL_RCC_OscConfig+0x130>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d168      	bne.n	8001730 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e26b      	b.n	8001b3a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800166a:	d106      	bne.n	800167a <HAL_RCC_OscConfig+0x7a>
 800166c:	4b84      	ldr	r3, [pc, #528]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a83      	ldr	r2, [pc, #524]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 8001672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	e02e      	b.n	80016d8 <HAL_RCC_OscConfig+0xd8>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10c      	bne.n	800169c <HAL_RCC_OscConfig+0x9c>
 8001682:	4b7f      	ldr	r3, [pc, #508]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a7e      	ldr	r2, [pc, #504]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 8001688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	4b7c      	ldr	r3, [pc, #496]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a7b      	ldr	r2, [pc, #492]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 8001694:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	e01d      	b.n	80016d8 <HAL_RCC_OscConfig+0xd8>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016a4:	d10c      	bne.n	80016c0 <HAL_RCC_OscConfig+0xc0>
 80016a6:	4b76      	ldr	r3, [pc, #472]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a75      	ldr	r2, [pc, #468]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 80016ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	4b73      	ldr	r3, [pc, #460]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a72      	ldr	r2, [pc, #456]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 80016b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	e00b      	b.n	80016d8 <HAL_RCC_OscConfig+0xd8>
 80016c0:	4b6f      	ldr	r3, [pc, #444]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a6e      	ldr	r2, [pc, #440]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 80016c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	4b6c      	ldr	r3, [pc, #432]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a6b      	ldr	r2, [pc, #428]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 80016d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d013      	beq.n	8001708 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e0:	f7fe ff66 	bl	80005b0 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e8:	f7fe ff62 	bl	80005b0 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b64      	cmp	r3, #100	; 0x64
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e21f      	b.n	8001b3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fa:	4b61      	ldr	r3, [pc, #388]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0f0      	beq.n	80016e8 <HAL_RCC_OscConfig+0xe8>
 8001706:	e014      	b.n	8001732 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001708:	f7fe ff52 	bl	80005b0 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001710:	f7fe ff4e 	bl	80005b0 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b64      	cmp	r3, #100	; 0x64
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e20b      	b.n	8001b3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001722:	4b57      	ldr	r3, [pc, #348]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0x110>
 800172e:	e000      	b.n	8001732 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d069      	beq.n	8001812 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800173e:	4b50      	ldr	r3, [pc, #320]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00b      	beq.n	8001762 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800174a:	4b4d      	ldr	r3, [pc, #308]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
 8001752:	2b08      	cmp	r3, #8
 8001754:	d11c      	bne.n	8001790 <HAL_RCC_OscConfig+0x190>
 8001756:	4b4a      	ldr	r3, [pc, #296]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d116      	bne.n	8001790 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001762:	4b47      	ldr	r3, [pc, #284]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d005      	beq.n	800177a <HAL_RCC_OscConfig+0x17a>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d001      	beq.n	800177a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e1df      	b.n	8001b3a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177a:	4b41      	ldr	r3, [pc, #260]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	493d      	ldr	r1, [pc, #244]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 800178a:	4313      	orrs	r3, r2
 800178c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800178e:	e040      	b.n	8001812 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d023      	beq.n	80017e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001798:	4b39      	ldr	r3, [pc, #228]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a38      	ldr	r2, [pc, #224]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a4:	f7fe ff04 	bl	80005b0 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ac:	f7fe ff00 	bl	80005b0 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e1bd      	b.n	8001b3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017be:	4b30      	ldr	r3, [pc, #192]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f0      	beq.n	80017ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ca:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	4929      	ldr	r1, [pc, #164]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	600b      	str	r3, [r1, #0]
 80017de:	e018      	b.n	8001812 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017e0:	4b27      	ldr	r3, [pc, #156]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a26      	ldr	r2, [pc, #152]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 80017e6:	f023 0301 	bic.w	r3, r3, #1
 80017ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ec:	f7fe fee0 	bl	80005b0 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f4:	f7fe fedc 	bl	80005b0 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e199      	b.n	8001b3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001806:	4b1e      	ldr	r3, [pc, #120]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	2b00      	cmp	r3, #0
 800181c:	d038      	beq.n	8001890 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d019      	beq.n	800185a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001826:	4b16      	ldr	r3, [pc, #88]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 8001828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800182a:	4a15      	ldr	r2, [pc, #84]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001832:	f7fe febd 	bl	80005b0 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800183a:	f7fe feb9 	bl	80005b0 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e176      	b.n	8001b3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 800184e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x23a>
 8001858:	e01a      	b.n	8001890 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800185a:	4b09      	ldr	r3, [pc, #36]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 800185c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800185e:	4a08      	ldr	r2, [pc, #32]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 8001860:	f023 0301 	bic.w	r3, r3, #1
 8001864:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001866:	f7fe fea3 	bl	80005b0 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800186c:	e00a      	b.n	8001884 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800186e:	f7fe fe9f 	bl	80005b0 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d903      	bls.n	8001884 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e15c      	b.n	8001b3a <HAL_RCC_OscConfig+0x53a>
 8001880:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001884:	4b91      	ldr	r3, [pc, #580]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 8001886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1ee      	bne.n	800186e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 80a4 	beq.w	80019e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800189e:	4b8b      	ldr	r3, [pc, #556]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10d      	bne.n	80018c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80018aa:	4b88      	ldr	r3, [pc, #544]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	4a87      	ldr	r2, [pc, #540]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 80018b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b4:	6413      	str	r3, [r2, #64]	; 0x40
 80018b6:	4b85      	ldr	r3, [pc, #532]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018c2:	2301      	movs	r3, #1
 80018c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018c6:	4b82      	ldr	r3, [pc, #520]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d118      	bne.n	8001904 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80018d2:	4b7f      	ldr	r3, [pc, #508]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a7e      	ldr	r2, [pc, #504]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 80018d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018de:	f7fe fe67 	bl	80005b0 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e6:	f7fe fe63 	bl	80005b0 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b64      	cmp	r3, #100	; 0x64
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e120      	b.n	8001b3a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018f8:	4b75      	ldr	r3, [pc, #468]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d106      	bne.n	800191a <HAL_RCC_OscConfig+0x31a>
 800190c:	4b6f      	ldr	r3, [pc, #444]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 800190e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001910:	4a6e      	ldr	r2, [pc, #440]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6713      	str	r3, [r2, #112]	; 0x70
 8001918:	e02d      	b.n	8001976 <HAL_RCC_OscConfig+0x376>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10c      	bne.n	800193c <HAL_RCC_OscConfig+0x33c>
 8001922:	4b6a      	ldr	r3, [pc, #424]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 8001924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001926:	4a69      	ldr	r2, [pc, #420]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 8001928:	f023 0301 	bic.w	r3, r3, #1
 800192c:	6713      	str	r3, [r2, #112]	; 0x70
 800192e:	4b67      	ldr	r3, [pc, #412]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 8001930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001932:	4a66      	ldr	r2, [pc, #408]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 8001934:	f023 0304 	bic.w	r3, r3, #4
 8001938:	6713      	str	r3, [r2, #112]	; 0x70
 800193a:	e01c      	b.n	8001976 <HAL_RCC_OscConfig+0x376>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b05      	cmp	r3, #5
 8001942:	d10c      	bne.n	800195e <HAL_RCC_OscConfig+0x35e>
 8001944:	4b61      	ldr	r3, [pc, #388]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 8001946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001948:	4a60      	ldr	r2, [pc, #384]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 800194a:	f043 0304 	orr.w	r3, r3, #4
 800194e:	6713      	str	r3, [r2, #112]	; 0x70
 8001950:	4b5e      	ldr	r3, [pc, #376]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 8001952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001954:	4a5d      	ldr	r2, [pc, #372]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	6713      	str	r3, [r2, #112]	; 0x70
 800195c:	e00b      	b.n	8001976 <HAL_RCC_OscConfig+0x376>
 800195e:	4b5b      	ldr	r3, [pc, #364]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 8001960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001962:	4a5a      	ldr	r2, [pc, #360]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	6713      	str	r3, [r2, #112]	; 0x70
 800196a:	4b58      	ldr	r3, [pc, #352]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 800196c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196e:	4a57      	ldr	r2, [pc, #348]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 8001970:	f023 0304 	bic.w	r3, r3, #4
 8001974:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d015      	beq.n	80019aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197e:	f7fe fe17 	bl	80005b0 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001984:	e00a      	b.n	800199c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001986:	f7fe fe13 	bl	80005b0 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	f241 3288 	movw	r2, #5000	; 0x1388
 8001994:	4293      	cmp	r3, r2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e0ce      	b.n	8001b3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800199c:	4b4b      	ldr	r3, [pc, #300]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 800199e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0ee      	beq.n	8001986 <HAL_RCC_OscConfig+0x386>
 80019a8:	e014      	b.n	80019d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019aa:	f7fe fe01 	bl	80005b0 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b0:	e00a      	b.n	80019c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b2:	f7fe fdfd 	bl	80005b0 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e0b8      	b.n	8001b3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c8:	4b40      	ldr	r3, [pc, #256]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 80019ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1ee      	bne.n	80019b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019d4:	7dfb      	ldrb	r3, [r7, #23]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d105      	bne.n	80019e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019da:	4b3c      	ldr	r3, [pc, #240]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	4a3b      	ldr	r2, [pc, #236]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 80019e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 80a4 	beq.w	8001b38 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019f0:	4b36      	ldr	r3, [pc, #216]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 030c 	and.w	r3, r3, #12
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	d06b      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d149      	bne.n	8001a98 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a04:	4b31      	ldr	r3, [pc, #196]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a30      	ldr	r2, [pc, #192]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 8001a0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a10:	f7fe fdce 	bl	80005b0 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a18:	f7fe fdca 	bl	80005b0 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e087      	b.n	8001b3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2a:	4b28      	ldr	r3, [pc, #160]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69da      	ldr	r2, [r3, #28]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	019b      	lsls	r3, r3, #6
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4c:	085b      	lsrs	r3, r3, #1
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	041b      	lsls	r3, r3, #16
 8001a52:	431a      	orrs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a58:	061b      	lsls	r3, r3, #24
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	4a1b      	ldr	r2, [pc, #108]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 8001a5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a62:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a64:	4b19      	ldr	r3, [pc, #100]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a18      	ldr	r2, [pc, #96]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 8001a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a70:	f7fe fd9e 	bl	80005b0 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a78:	f7fe fd9a 	bl	80005b0 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e057      	b.n	8001b3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0x478>
 8001a96:	e04f      	b.n	8001b38 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 8001a9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa4:	f7fe fd84 	bl	80005b0 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aac:	f7fe fd80 	bl	80005b0 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e03d      	b.n	8001b3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001abe:	4b03      	ldr	r3, [pc, #12]	; (8001acc <HAL_RCC_OscConfig+0x4cc>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_OscConfig+0x4ac>
 8001aca:	e035      	b.n	8001b38 <HAL_RCC_OscConfig+0x538>
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001ad4:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <HAL_RCC_OscConfig+0x544>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d028      	beq.n	8001b34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d121      	bne.n	8001b34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d11a      	bne.n	8001b34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b04:	4013      	ands	r3, r2
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b0a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d111      	bne.n	8001b34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1a:	085b      	lsrs	r3, r3, #1
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d107      	bne.n	8001b34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d001      	beq.n	8001b38 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e000      	b.n	8001b3a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800

08001b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e0d0      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b60:	4b6a      	ldr	r3, [pc, #424]	; (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 030f 	and.w	r3, r3, #15
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d910      	bls.n	8001b90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6e:	4b67      	ldr	r3, [pc, #412]	; (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 020f 	bic.w	r2, r3, #15
 8001b76:	4965      	ldr	r1, [pc, #404]	; (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7e:	4b63      	ldr	r3, [pc, #396]	; (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e0b8      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d020      	beq.n	8001bde <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ba8:	4b59      	ldr	r3, [pc, #356]	; (8001d10 <HAL_RCC_ClockConfig+0x1c8>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	4a58      	ldr	r2, [pc, #352]	; (8001d10 <HAL_RCC_ClockConfig+0x1c8>)
 8001bae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0308 	and.w	r3, r3, #8
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d005      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bc0:	4b53      	ldr	r3, [pc, #332]	; (8001d10 <HAL_RCC_ClockConfig+0x1c8>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	4a52      	ldr	r2, [pc, #328]	; (8001d10 <HAL_RCC_ClockConfig+0x1c8>)
 8001bc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bcc:	4b50      	ldr	r3, [pc, #320]	; (8001d10 <HAL_RCC_ClockConfig+0x1c8>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	494d      	ldr	r1, [pc, #308]	; (8001d10 <HAL_RCC_ClockConfig+0x1c8>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d040      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d107      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf2:	4b47      	ldr	r3, [pc, #284]	; (8001d10 <HAL_RCC_ClockConfig+0x1c8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d115      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e07f      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d107      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c0a:	4b41      	ldr	r3, [pc, #260]	; (8001d10 <HAL_RCC_ClockConfig+0x1c8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d109      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e073      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1a:	4b3d      	ldr	r3, [pc, #244]	; (8001d10 <HAL_RCC_ClockConfig+0x1c8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e06b      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c2a:	4b39      	ldr	r3, [pc, #228]	; (8001d10 <HAL_RCC_ClockConfig+0x1c8>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f023 0203 	bic.w	r2, r3, #3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	4936      	ldr	r1, [pc, #216]	; (8001d10 <HAL_RCC_ClockConfig+0x1c8>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c3c:	f7fe fcb8 	bl	80005b0 <HAL_GetTick>
 8001c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c42:	e00a      	b.n	8001c5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c44:	f7fe fcb4 	bl	80005b0 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e053      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5a:	4b2d      	ldr	r3, [pc, #180]	; (8001d10 <HAL_RCC_ClockConfig+0x1c8>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 020c 	and.w	r2, r3, #12
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d1eb      	bne.n	8001c44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c6c:	4b27      	ldr	r3, [pc, #156]	; (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 030f 	and.w	r3, r3, #15
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d210      	bcs.n	8001c9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7a:	4b24      	ldr	r3, [pc, #144]	; (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 020f 	bic.w	r2, r3, #15
 8001c82:	4922      	ldr	r1, [pc, #136]	; (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8a:	4b20      	ldr	r3, [pc, #128]	; (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d001      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e032      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d008      	beq.n	8001cba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <HAL_RCC_ClockConfig+0x1c8>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	4916      	ldr	r1, [pc, #88]	; (8001d10 <HAL_RCC_ClockConfig+0x1c8>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d009      	beq.n	8001cda <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cc6:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_RCC_ClockConfig+0x1c8>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	490e      	ldr	r1, [pc, #56]	; (8001d10 <HAL_RCC_ClockConfig+0x1c8>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cda:	f000 f821 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	091b      	lsrs	r3, r3, #4
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	490a      	ldr	r1, [pc, #40]	; (8001d14 <HAL_RCC_ClockConfig+0x1cc>)
 8001cec:	5ccb      	ldrb	r3, [r1, r3]
 8001cee:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf2:	4a09      	ldr	r2, [pc, #36]	; (8001d18 <HAL_RCC_ClockConfig+0x1d0>)
 8001cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_RCC_ClockConfig+0x1d4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fc14 	bl	8000528 <HAL_InitTick>

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40023c00 	.word	0x40023c00
 8001d10:	40023800 	.word	0x40023800
 8001d14:	08005164 	.word	0x08005164
 8001d18:	20000010 	.word	0x20000010
 8001d1c:	20000000 	.word	0x20000000

08001d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d24:	b090      	sub	sp, #64	; 0x40
 8001d26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d30:	2300      	movs	r3, #0
 8001d32:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d38:	4b59      	ldr	r3, [pc, #356]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 030c 	and.w	r3, r3, #12
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d00d      	beq.n	8001d60 <HAL_RCC_GetSysClockFreq+0x40>
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	f200 80a1 	bhi.w	8001e8c <HAL_RCC_GetSysClockFreq+0x16c>
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d002      	beq.n	8001d54 <HAL_RCC_GetSysClockFreq+0x34>
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d003      	beq.n	8001d5a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d52:	e09b      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d54:	4b53      	ldr	r3, [pc, #332]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d56:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d58:	e09b      	b.n	8001e92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d5a:	4b53      	ldr	r3, [pc, #332]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d5e:	e098      	b.n	8001e92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d60:	4b4f      	ldr	r3, [pc, #316]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d68:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001d6a:	4b4d      	ldr	r3, [pc, #308]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d028      	beq.n	8001dc8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d76:	4b4a      	ldr	r3, [pc, #296]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	099b      	lsrs	r3, r3, #6
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	623b      	str	r3, [r7, #32]
 8001d80:	627a      	str	r2, [r7, #36]	; 0x24
 8001d82:	6a3b      	ldr	r3, [r7, #32]
 8001d84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4b47      	ldr	r3, [pc, #284]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d8c:	fb03 f201 	mul.w	r2, r3, r1
 8001d90:	2300      	movs	r3, #0
 8001d92:	fb00 f303 	mul.w	r3, r0, r3
 8001d96:	4413      	add	r3, r2
 8001d98:	4a43      	ldr	r2, [pc, #268]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d9a:	fba0 1202 	umull	r1, r2, r0, r2
 8001d9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001da0:	460a      	mov	r2, r1
 8001da2:	62ba      	str	r2, [r7, #40]	; 0x28
 8001da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001da6:	4413      	add	r3, r2
 8001da8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dac:	2200      	movs	r2, #0
 8001dae:	61bb      	str	r3, [r7, #24]
 8001db0:	61fa      	str	r2, [r7, #28]
 8001db2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001db6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001dba:	f7fe fa25 	bl	8000208 <__aeabi_uldivmod>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dc6:	e053      	b.n	8001e70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dc8:	4b35      	ldr	r3, [pc, #212]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	099b      	lsrs	r3, r3, #6
 8001dce:	2200      	movs	r2, #0
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	617a      	str	r2, [r7, #20]
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001dda:	f04f 0b00 	mov.w	fp, #0
 8001dde:	4652      	mov	r2, sl
 8001de0:	465b      	mov	r3, fp
 8001de2:	f04f 0000 	mov.w	r0, #0
 8001de6:	f04f 0100 	mov.w	r1, #0
 8001dea:	0159      	lsls	r1, r3, #5
 8001dec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001df0:	0150      	lsls	r0, r2, #5
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	ebb2 080a 	subs.w	r8, r2, sl
 8001dfa:	eb63 090b 	sbc.w	r9, r3, fp
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001e0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001e0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001e12:	ebb2 0408 	subs.w	r4, r2, r8
 8001e16:	eb63 0509 	sbc.w	r5, r3, r9
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	00eb      	lsls	r3, r5, #3
 8001e24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e28:	00e2      	lsls	r2, r4, #3
 8001e2a:	4614      	mov	r4, r2
 8001e2c:	461d      	mov	r5, r3
 8001e2e:	eb14 030a 	adds.w	r3, r4, sl
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	eb45 030b 	adc.w	r3, r5, fp
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	f04f 0300 	mov.w	r3, #0
 8001e42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e46:	4629      	mov	r1, r5
 8001e48:	028b      	lsls	r3, r1, #10
 8001e4a:	4621      	mov	r1, r4
 8001e4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e50:	4621      	mov	r1, r4
 8001e52:	028a      	lsls	r2, r1, #10
 8001e54:	4610      	mov	r0, r2
 8001e56:	4619      	mov	r1, r3
 8001e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	60fa      	str	r2, [r7, #12]
 8001e60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e64:	f7fe f9d0 	bl	8000208 <__aeabi_uldivmod>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	0c1b      	lsrs	r3, r3, #16
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001e80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e8a:	e002      	b.n	8001e92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e8e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3740      	adds	r7, #64	; 0x40
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	00f42400 	.word	0x00f42400
 8001ea8:	017d7840 	.word	0x017d7840

08001eac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d012      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ed4:	4b69      	ldr	r3, [pc, #420]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	4a68      	ldr	r2, [pc, #416]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eda:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ede:	6093      	str	r3, [r2, #8]
 8001ee0:	4b66      	ldr	r3, [pc, #408]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee8:	4964      	ldr	r1, [pc, #400]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d017      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f06:	4b5d      	ldr	r3, [pc, #372]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f14:	4959      	ldr	r1, [pc, #356]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f24:	d101      	bne.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001f26:	2301      	movs	r3, #1
 8001f28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001f32:	2301      	movs	r3, #1
 8001f34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d017      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f42:	4b4e      	ldr	r3, [pc, #312]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	494a      	ldr	r1, [pc, #296]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f60:	d101      	bne.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001f62:	2301      	movs	r3, #1
 8001f64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 808b 	beq.w	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f90:	4b3a      	ldr	r3, [pc, #232]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	4a39      	ldr	r2, [pc, #228]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9c:	4b37      	ldr	r3, [pc, #220]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001fa8:	4b35      	ldr	r3, [pc, #212]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a34      	ldr	r2, [pc, #208]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fb4:	f7fe fafc 	bl	80005b0 <HAL_GetTick>
 8001fb8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fbc:	f7fe faf8 	bl	80005b0 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b64      	cmp	r3, #100	; 0x64
 8001fc8:	d901      	bls.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e357      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001fce:	4b2c      	ldr	r3, [pc, #176]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0f0      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fda:	4b28      	ldr	r3, [pc, #160]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d035      	beq.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d02e      	beq.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ff8:	4b20      	ldr	r3, [pc, #128]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002000:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002002:	4b1e      	ldr	r3, [pc, #120]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002006:	4a1d      	ldr	r2, [pc, #116]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800200c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800200e:	4b1b      	ldr	r3, [pc, #108]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002012:	4a1a      	ldr	r2, [pc, #104]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002018:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800201a:	4a18      	ldr	r2, [pc, #96]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002020:	4b16      	ldr	r3, [pc, #88]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b01      	cmp	r3, #1
 800202a:	d114      	bne.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202c:	f7fe fac0 	bl	80005b0 <HAL_GetTick>
 8002030:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002032:	e00a      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002034:	f7fe fabc 	bl	80005b0 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002042:	4293      	cmp	r3, r2
 8002044:	d901      	bls.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e319      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800204a:	4b0c      	ldr	r3, [pc, #48]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800204c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0ee      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800205e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002062:	d111      	bne.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002070:	4b04      	ldr	r3, [pc, #16]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002072:	400b      	ands	r3, r1
 8002074:	4901      	ldr	r1, [pc, #4]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002076:	4313      	orrs	r3, r2
 8002078:	608b      	str	r3, [r1, #8]
 800207a:	e00b      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800207c:	40023800 	.word	0x40023800
 8002080:	40007000 	.word	0x40007000
 8002084:	0ffffcff 	.word	0x0ffffcff
 8002088:	4baa      	ldr	r3, [pc, #680]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4aa9      	ldr	r2, [pc, #676]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800208e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002092:	6093      	str	r3, [r2, #8]
 8002094:	4ba7      	ldr	r3, [pc, #668]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002096:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020a0:	49a4      	ldr	r1, [pc, #656]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d010      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80020b2:	4ba0      	ldr	r3, [pc, #640]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020b8:	4a9e      	ldr	r2, [pc, #632]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80020c2:	4b9c      	ldr	r3, [pc, #624]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020cc:	4999      	ldr	r1, [pc, #612]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00a      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020e0:	4b94      	ldr	r3, [pc, #592]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020ee:	4991      	ldr	r1, [pc, #580]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00a      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002102:	4b8c      	ldr	r3, [pc, #560]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002108:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002110:	4988      	ldr	r1, [pc, #544]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002112:	4313      	orrs	r3, r2
 8002114:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00a      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002124:	4b83      	ldr	r3, [pc, #524]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002132:	4980      	ldr	r1, [pc, #512]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002134:	4313      	orrs	r3, r2
 8002136:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00a      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002146:	4b7b      	ldr	r3, [pc, #492]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002154:	4977      	ldr	r1, [pc, #476]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002156:	4313      	orrs	r3, r2
 8002158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00a      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002168:	4b72      	ldr	r3, [pc, #456]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800216a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216e:	f023 0203 	bic.w	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	496f      	ldr	r1, [pc, #444]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002178:	4313      	orrs	r3, r2
 800217a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00a      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800218a:	4b6a      	ldr	r3, [pc, #424]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800218c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002190:	f023 020c 	bic.w	r2, r3, #12
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002198:	4966      	ldr	r1, [pc, #408]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800219a:	4313      	orrs	r3, r2
 800219c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00a      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021ac:	4b61      	ldr	r3, [pc, #388]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ba:	495e      	ldr	r1, [pc, #376]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00a      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021ce:	4b59      	ldr	r3, [pc, #356]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021dc:	4955      	ldr	r1, [pc, #340]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00a      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021f0:	4b50      	ldr	r3, [pc, #320]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fe:	494d      	ldr	r1, [pc, #308]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002200:	4313      	orrs	r3, r2
 8002202:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00a      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002212:	4b48      	ldr	r3, [pc, #288]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002218:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002220:	4944      	ldr	r1, [pc, #272]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002222:	4313      	orrs	r3, r2
 8002224:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00a      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002234:	4b3f      	ldr	r3, [pc, #252]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002242:	493c      	ldr	r1, [pc, #240]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002244:	4313      	orrs	r3, r2
 8002246:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00a      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002256:	4b37      	ldr	r3, [pc, #220]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002264:	4933      	ldr	r1, [pc, #204]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002266:	4313      	orrs	r3, r2
 8002268:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00a      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002278:	4b2e      	ldr	r3, [pc, #184]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800227a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002286:	492b      	ldr	r1, [pc, #172]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002288:	4313      	orrs	r3, r2
 800228a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d011      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800229a:	4b26      	ldr	r3, [pc, #152]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800229c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022a8:	4922      	ldr	r1, [pc, #136]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022b8:	d101      	bne.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80022ba:	2301      	movs	r3, #1
 80022bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80022ca:	2301      	movs	r3, #1
 80022cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00a      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022da:	4b16      	ldr	r3, [pc, #88]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022e8:	4912      	ldr	r1, [pc, #72]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00b      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022fc:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002302:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800230c:	4909      	ldr	r1, [pc, #36]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d006      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 80d9 	beq.w	80024da <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002328:	4b02      	ldr	r3, [pc, #8]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a01      	ldr	r2, [pc, #4]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800232e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002332:	e001      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002334:	40023800 	.word	0x40023800
 8002338:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800233a:	f7fe f939 	bl	80005b0 <HAL_GetTick>
 800233e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002340:	e008      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002342:	f7fe f935 	bl	80005b0 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b64      	cmp	r3, #100	; 0x64
 800234e:	d901      	bls.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e194      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002354:	4b6c      	ldr	r3, [pc, #432]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1f0      	bne.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d021      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002370:	2b00      	cmp	r3, #0
 8002372:	d11d      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002374:	4b64      	ldr	r3, [pc, #400]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002376:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800237a:	0c1b      	lsrs	r3, r3, #16
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002382:	4b61      	ldr	r3, [pc, #388]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002388:	0e1b      	lsrs	r3, r3, #24
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	019a      	lsls	r2, r3, #6
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	041b      	lsls	r3, r3, #16
 800239a:	431a      	orrs	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	061b      	lsls	r3, r3, #24
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	071b      	lsls	r3, r3, #28
 80023a8:	4957      	ldr	r1, [pc, #348]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d004      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023c4:	d00a      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d02e      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023da:	d129      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80023dc:	4b4a      	ldr	r3, [pc, #296]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023e2:	0c1b      	lsrs	r3, r3, #16
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80023ea:	4b47      	ldr	r3, [pc, #284]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023f0:	0f1b      	lsrs	r3, r3, #28
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	019a      	lsls	r2, r3, #6
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	041b      	lsls	r3, r3, #16
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	061b      	lsls	r3, r3, #24
 800240a:	431a      	orrs	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	071b      	lsls	r3, r3, #28
 8002410:	493d      	ldr	r1, [pc, #244]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002412:	4313      	orrs	r3, r2
 8002414:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002418:	4b3b      	ldr	r3, [pc, #236]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800241a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800241e:	f023 021f 	bic.w	r2, r3, #31
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	3b01      	subs	r3, #1
 8002428:	4937      	ldr	r1, [pc, #220]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800242a:	4313      	orrs	r3, r2
 800242c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d01d      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800243c:	4b32      	ldr	r3, [pc, #200]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800243e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002442:	0e1b      	lsrs	r3, r3, #24
 8002444:	f003 030f 	and.w	r3, r3, #15
 8002448:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800244a:	4b2f      	ldr	r3, [pc, #188]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800244c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002450:	0f1b      	lsrs	r3, r3, #28
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	019a      	lsls	r2, r3, #6
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	041b      	lsls	r3, r3, #16
 8002464:	431a      	orrs	r2, r3
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	061b      	lsls	r3, r3, #24
 800246a:	431a      	orrs	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	071b      	lsls	r3, r3, #28
 8002470:	4925      	ldr	r1, [pc, #148]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d011      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	019a      	lsls	r2, r3, #6
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	061b      	lsls	r3, r3, #24
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	071b      	lsls	r3, r3, #28
 80024a0:	4919      	ldr	r1, [pc, #100]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80024a8:	4b17      	ldr	r3, [pc, #92]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a16      	ldr	r2, [pc, #88]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024b4:	f7fe f87c 	bl	80005b0 <HAL_GetTick>
 80024b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024bc:	f7fe f878 	bl	80005b0 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	; 0x64
 80024c8:	d901      	bls.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e0d7      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024ce:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	f040 80cd 	bne.w	800267c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80024e2:	4b09      	ldr	r3, [pc, #36]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a08      	ldr	r2, [pc, #32]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024ee:	f7fe f85f 	bl	80005b0 <HAL_GetTick>
 80024f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024f4:	e00a      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80024f6:	f7fe f85b 	bl	80005b0 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b64      	cmp	r3, #100	; 0x64
 8002502:	d903      	bls.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e0ba      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002508:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800250c:	4b5e      	ldr	r3, [pc, #376]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002518:	d0ed      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252a:	2b00      	cmp	r3, #0
 800252c:	d009      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002536:	2b00      	cmp	r3, #0
 8002538:	d02e      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	2b00      	cmp	r3, #0
 8002540:	d12a      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002542:	4b51      	ldr	r3, [pc, #324]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002548:	0c1b      	lsrs	r3, r3, #16
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002550:	4b4d      	ldr	r3, [pc, #308]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002556:	0f1b      	lsrs	r3, r3, #28
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	019a      	lsls	r2, r3, #6
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	041b      	lsls	r3, r3, #16
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	061b      	lsls	r3, r3, #24
 8002570:	431a      	orrs	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	071b      	lsls	r3, r3, #28
 8002576:	4944      	ldr	r1, [pc, #272]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002578:	4313      	orrs	r3, r2
 800257a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800257e:	4b42      	ldr	r3, [pc, #264]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002584:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	3b01      	subs	r3, #1
 800258e:	021b      	lsls	r3, r3, #8
 8002590:	493d      	ldr	r1, [pc, #244]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002592:	4313      	orrs	r3, r2
 8002594:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d022      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025ac:	d11d      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025ae:	4b36      	ldr	r3, [pc, #216]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b4:	0e1b      	lsrs	r3, r3, #24
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80025bc:	4b32      	ldr	r3, [pc, #200]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c2:	0f1b      	lsrs	r3, r3, #28
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	019a      	lsls	r2, r3, #6
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	041b      	lsls	r3, r3, #16
 80025d6:	431a      	orrs	r2, r3
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	061b      	lsls	r3, r3, #24
 80025dc:	431a      	orrs	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	071b      	lsls	r3, r3, #28
 80025e2:	4929      	ldr	r1, [pc, #164]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d028      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025f6:	4b24      	ldr	r3, [pc, #144]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fc:	0e1b      	lsrs	r3, r3, #24
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002604:	4b20      	ldr	r3, [pc, #128]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260a:	0c1b      	lsrs	r3, r3, #16
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	019a      	lsls	r2, r3, #6
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	041b      	lsls	r3, r3, #16
 800261c:	431a      	orrs	r2, r3
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	061b      	lsls	r3, r3, #24
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	071b      	lsls	r3, r3, #28
 800262a:	4917      	ldr	r1, [pc, #92]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800262c:	4313      	orrs	r3, r2
 800262e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002632:	4b15      	ldr	r3, [pc, #84]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002638:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	4911      	ldr	r1, [pc, #68]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002642:	4313      	orrs	r3, r2
 8002644:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002648:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a0e      	ldr	r2, [pc, #56]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800264e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002652:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002654:	f7fd ffac 	bl	80005b0 <HAL_GetTick>
 8002658:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800265a:	e008      	b.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800265c:	f7fd ffa8 	bl	80005b0 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b64      	cmp	r3, #100	; 0x64
 8002668:	d901      	bls.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e007      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800266e:	4b06      	ldr	r3, [pc, #24]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002676:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800267a:	d1ef      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3720      	adds	r7, #32
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40023800 	.word	0x40023800

0800268c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002692:	f7fd ff3b 	bl	800050c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002696:	f000 f88f 	bl	80027b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800269a:	f000 f93b 	bl	8002914 <MX_GPIO_Init>
  MX_I2C1_Init();
 800269e:	f000 f8f9 	bl	8002894 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init(); //initialize
 80026a2:	f000 fadf 	bl	8002c64 <SSD1306_Init>

  SSD1306_GotoXY (0,0);
 80026a6:	2100      	movs	r1, #0
 80026a8:	2000      	movs	r0, #0
 80026aa:	f000 fc45 	bl	8002f38 <SSD1306_GotoXY>
  SSD1306_Puts ("Delameta", &Font_11x18, 1);
 80026ae:	2201      	movs	r2, #1
 80026b0:	493d      	ldr	r1, [pc, #244]	; (80027a8 <main+0x11c>)
 80026b2:	483e      	ldr	r0, [pc, #248]	; (80027ac <main+0x120>)
 80026b4:	f000 fcd6 	bl	8003064 <SSD1306_Puts>
  SSD1306_GotoXY (10, 30);
 80026b8:	211e      	movs	r1, #30
 80026ba:	200a      	movs	r0, #10
 80026bc:	f000 fc3c 	bl	8002f38 <SSD1306_GotoXY>
  SSD1306_Puts ("  Bilano  )", &Font_11x18, 1);
 80026c0:	2201      	movs	r2, #1
 80026c2:	4939      	ldr	r1, [pc, #228]	; (80027a8 <main+0x11c>)
 80026c4:	483a      	ldr	r0, [pc, #232]	; (80027b0 <main+0x124>)
 80026c6:	f000 fccd 	bl	8003064 <SSD1306_Puts>
  SSD1306_UpdateScreen(); //display
 80026ca:	f000 fb8f 	bl	8002dec <SSD1306_UpdateScreen>

  HAL_Delay (2000);
 80026ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80026d2:	f7fd ff79 	bl	80005c8 <HAL_Delay>


  SSD1306_ScrollRight(0,7);  // scroll entire screen
 80026d6:	2107      	movs	r1, #7
 80026d8:	2000      	movs	r0, #0
 80026da:	f000 f950 	bl	800297e <SSD1306_ScrollRight>
  HAL_Delay(2000);  // 2 sec
 80026de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80026e2:	f7fd ff71 	bl	80005c8 <HAL_Delay>

  SSD1306_ScrollLeft(0,7);  // scroll entire screen
 80026e6:	2107      	movs	r1, #7
 80026e8:	2000      	movs	r0, #0
 80026ea:	f000 f97e 	bl	80029ea <SSD1306_ScrollLeft>
  HAL_Delay(2000);  // 2 sec
 80026ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80026f2:	f7fd ff69 	bl	80005c8 <HAL_Delay>

  SSD1306_Stopscroll();
 80026f6:	f000 fa2e 	bl	8002b56 <SSD1306_Stopscroll>
  SSD1306_Clear();
 80026fa:	f001 f86c 	bl	80037d6 <SSD1306_Clear>

  SSD1306_DrawBitmap(0,0,prototype, 128, 64, 1);
 80026fe:	2301      	movs	r3, #1
 8002700:	9301      	str	r3, [sp, #4]
 8002702:	2340      	movs	r3, #64	; 0x40
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	2380      	movs	r3, #128	; 0x80
 8002708:	4a2a      	ldr	r2, [pc, #168]	; (80027b4 <main+0x128>)
 800270a:	2100      	movs	r1, #0
 800270c:	2000      	movs	r0, #0
 800270e:	f000 fa41 	bl	8002b94 <SSD1306_DrawBitmap>
  SSD1306_UpdateScreen();
 8002712:	f000 fb6b 	bl	8002dec <SSD1306_UpdateScreen>

  HAL_Delay(2000);
 8002716:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800271a:	f7fd ff55 	bl	80005c8 <HAL_Delay>

  SSD1306_ScrollRight(0x00, 0x0f);    // scroll entire screen right
 800271e:	210f      	movs	r1, #15
 8002720:	2000      	movs	r0, #0
 8002722:	f000 f92c 	bl	800297e <SSD1306_ScrollRight>

  HAL_Delay (2000);
 8002726:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800272a:	f7fd ff4d 	bl	80005c8 <HAL_Delay>

  SSD1306_ScrollLeft(0x00, 0x0f);  // scroll entire screen left
 800272e:	210f      	movs	r1, #15
 8002730:	2000      	movs	r0, #0
 8002732:	f000 f95a 	bl	80029ea <SSD1306_ScrollLeft>

  HAL_Delay (2000);
 8002736:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800273a:	f7fd ff45 	bl	80005c8 <HAL_Delay>

  SSD1306_Scrolldiagright(0x00, 0x0f);  // scroll entire screen diagonal right
 800273e:	210f      	movs	r1, #15
 8002740:	2000      	movs	r0, #0
 8002742:	f000 f988 	bl	8002a56 <SSD1306_Scrolldiagright>

  HAL_Delay (2000);
 8002746:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800274a:	f7fd ff3d 	bl	80005c8 <HAL_Delay>

  SSD1306_Scrolldiagleft(0x00, 0x0f);  // scroll entire screen diagonal left
 800274e:	210f      	movs	r1, #15
 8002750:	2000      	movs	r0, #0
 8002752:	f000 f9c0 	bl	8002ad6 <SSD1306_Scrolldiagleft>

  HAL_Delay (2000);
 8002756:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800275a:	f7fd ff35 	bl	80005c8 <HAL_Delay>

  SSD1306_Stopscroll();   // stop scrolling. If not done, screen will keep on scrolling
 800275e:	f000 f9fa 	bl	8002b56 <SSD1306_Stopscroll>


  SSD1306_InvertDisplay(1);   // invert the display
 8002762:	2001      	movs	r0, #1
 8002764:	f000 fa00 	bl	8002b68 <SSD1306_InvertDisplay>

  HAL_Delay(2000);
 8002768:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800276c:	f7fd ff2c 	bl	80005c8 <HAL_Delay>

  SSD1306_InvertDisplay(0);  // normalize the display
 8002770:	2000      	movs	r0, #0
 8002772:	f000 f9f9 	bl	8002b68 <SSD1306_InvertDisplay>
//

  HAL_Delay(2000);
 8002776:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800277a:	f7fd ff25 	bl	80005c8 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  TestLines (1);
 800277e:	2001      	movs	r0, #1
 8002780:	f001 f98c 	bl	8003a9c <TestLines>
	  TestRectangles (1);
 8002784:	2001      	movs	r0, #1
 8002786:	f001 faa0 	bl	8003cca <TestRectangles>
	  TestFilledRectangles (1);
 800278a:	2001      	movs	r0, #1
 800278c:	f001 fad0 	bl	8003d30 <TestFilledRectangles>
	  TestFilledCircles(8, 1);
 8002790:	2101      	movs	r1, #1
 8002792:	2008      	movs	r0, #8
 8002794:	f001 fb04 	bl	8003da0 <TestFilledCircles>
	  TestCircles(8, 1);
 8002798:	2101      	movs	r1, #1
 800279a:	2008      	movs	r0, #8
 800279c:	f001 fb3b 	bl	8003e16 <TestCircles>
	  TestTriangles(1);
 80027a0:	2001      	movs	r0, #1
 80027a2:	f001 fb75 	bl	8003e90 <TestTriangles>
	  TestLines (1);
 80027a6:	e7ea      	b.n	800277e <main+0xf2>
 80027a8:	20000008 	.word	0x20000008
 80027ac:	08003ff0 	.word	0x08003ff0
 80027b0:	08003ffc 	.word	0x08003ffc
 80027b4:	08004d64 	.word	0x08004d64

080027b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b094      	sub	sp, #80	; 0x50
 80027bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027be:	f107 0320 	add.w	r3, r7, #32
 80027c2:	2230      	movs	r2, #48	; 0x30
 80027c4:	2100      	movs	r1, #0
 80027c6:	4618      	mov	r0, r3
 80027c8:	f001 fbfe 	bl	8003fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027cc:	f107 030c 	add.w	r3, r7, #12
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027dc:	4b2b      	ldr	r3, [pc, #172]	; (800288c <SystemClock_Config+0xd4>)
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	4a2a      	ldr	r2, [pc, #168]	; (800288c <SystemClock_Config+0xd4>)
 80027e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e6:	6413      	str	r3, [r2, #64]	; 0x40
 80027e8:	4b28      	ldr	r3, [pc, #160]	; (800288c <SystemClock_Config+0xd4>)
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027f4:	4b26      	ldr	r3, [pc, #152]	; (8002890 <SystemClock_Config+0xd8>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a25      	ldr	r2, [pc, #148]	; (8002890 <SystemClock_Config+0xd8>)
 80027fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	4b23      	ldr	r3, [pc, #140]	; (8002890 <SystemClock_Config+0xd8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002808:	607b      	str	r3, [r7, #4]
 800280a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800280c:	2301      	movs	r3, #1
 800280e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002810:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002816:	2302      	movs	r3, #2
 8002818:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800281a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800281e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002820:	2319      	movs	r3, #25
 8002822:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002824:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8002828:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800282a:	2302      	movs	r3, #2
 800282c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800282e:	2309      	movs	r3, #9
 8002830:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002832:	f107 0320 	add.w	r3, r7, #32
 8002836:	4618      	mov	r0, r3
 8002838:	f7fe fee2 	bl	8001600 <HAL_RCC_OscConfig>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002842:	f000 f897 	bl	8002974 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002846:	f7fe fe8b 	bl	8001560 <HAL_PWREx_EnableOverDrive>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002850:	f000 f890 	bl	8002974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002854:	230f      	movs	r3, #15
 8002856:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002858:	2302      	movs	r3, #2
 800285a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002860:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002864:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800286a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800286c:	f107 030c 	add.w	r3, r7, #12
 8002870:	2107      	movs	r1, #7
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff f968 	bl	8001b48 <HAL_RCC_ClockConfig>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800287e:	f000 f879 	bl	8002974 <Error_Handler>
  }
}
 8002882:	bf00      	nop
 8002884:	3750      	adds	r7, #80	; 0x50
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40023800 	.word	0x40023800
 8002890:	40007000 	.word	0x40007000

08002894 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002898:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <MX_I2C1_Init+0x74>)
 800289a:	4a1c      	ldr	r2, [pc, #112]	; (800290c <MX_I2C1_Init+0x78>)
 800289c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 800289e:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <MX_I2C1_Init+0x74>)
 80028a0:	4a1b      	ldr	r2, [pc, #108]	; (8002910 <MX_I2C1_Init+0x7c>)
 80028a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80028a4:	4b18      	ldr	r3, [pc, #96]	; (8002908 <MX_I2C1_Init+0x74>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028aa:	4b17      	ldr	r3, [pc, #92]	; (8002908 <MX_I2C1_Init+0x74>)
 80028ac:	2201      	movs	r2, #1
 80028ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028b0:	4b15      	ldr	r3, [pc, #84]	; (8002908 <MX_I2C1_Init+0x74>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80028b6:	4b14      	ldr	r3, [pc, #80]	; (8002908 <MX_I2C1_Init+0x74>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80028bc:	4b12      	ldr	r3, [pc, #72]	; (8002908 <MX_I2C1_Init+0x74>)
 80028be:	2200      	movs	r2, #0
 80028c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028c2:	4b11      	ldr	r3, [pc, #68]	; (8002908 <MX_I2C1_Init+0x74>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028c8:	4b0f      	ldr	r3, [pc, #60]	; (8002908 <MX_I2C1_Init+0x74>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028ce:	480e      	ldr	r0, [pc, #56]	; (8002908 <MX_I2C1_Init+0x74>)
 80028d0:	f7fe f930 	bl	8000b34 <HAL_I2C_Init>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80028da:	f000 f84b 	bl	8002974 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80028de:	2100      	movs	r1, #0
 80028e0:	4809      	ldr	r0, [pc, #36]	; (8002908 <MX_I2C1_Init+0x74>)
 80028e2:	f7fe fda5 	bl	8001430 <HAL_I2CEx_ConfigAnalogFilter>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80028ec:	f000 f842 	bl	8002974 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80028f0:	2100      	movs	r1, #0
 80028f2:	4805      	ldr	r0, [pc, #20]	; (8002908 <MX_I2C1_Init+0x74>)
 80028f4:	f7fe fde7 	bl	80014c6 <HAL_I2CEx_ConfigDigitalFilter>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80028fe:	f000 f839 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000034 	.word	0x20000034
 800290c:	40005400 	.word	0x40005400
 8002910:	6000030d 	.word	0x6000030d

08002914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800291a:	4b15      	ldr	r3, [pc, #84]	; (8002970 <MX_GPIO_Init+0x5c>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	4a14      	ldr	r2, [pc, #80]	; (8002970 <MX_GPIO_Init+0x5c>)
 8002920:	f043 0302 	orr.w	r3, r3, #2
 8002924:	6313      	str	r3, [r2, #48]	; 0x30
 8002926:	4b12      	ldr	r3, [pc, #72]	; (8002970 <MX_GPIO_Init+0x5c>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002932:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <MX_GPIO_Init+0x5c>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	4a0e      	ldr	r2, [pc, #56]	; (8002970 <MX_GPIO_Init+0x5c>)
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	6313      	str	r3, [r2, #48]	; 0x30
 800293e:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <MX_GPIO_Init+0x5c>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <MX_GPIO_Init+0x5c>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	4a08      	ldr	r2, [pc, #32]	; (8002970 <MX_GPIO_Init+0x5c>)
 8002950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002954:	6313      	str	r3, [r2, #48]	; 0x30
 8002956:	4b06      	ldr	r3, [pc, #24]	; (8002970 <MX_GPIO_Init+0x5c>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295e:	607b      	str	r3, [r7, #4]
 8002960:	687b      	ldr	r3, [r7, #4]

}
 8002962:	bf00      	nop
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40023800 	.word	0x40023800

08002974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002978:	b672      	cpsid	i
}
 800297a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800297c:	e7fe      	b.n	800297c <Error_Handler+0x8>

0800297e <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	4603      	mov	r3, r0
 8002986:	460a      	mov	r2, r1
 8002988:	71fb      	strb	r3, [r7, #7]
 800298a:	4613      	mov	r3, r2
 800298c:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 800298e:	2226      	movs	r2, #38	; 0x26
 8002990:	2100      	movs	r1, #0
 8002992:	2078      	movs	r0, #120	; 0x78
 8002994:	f000 ffa4 	bl	80038e0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8002998:	2200      	movs	r2, #0
 800299a:	2100      	movs	r1, #0
 800299c:	2078      	movs	r0, #120	; 0x78
 800299e:	f000 ff9f 	bl	80038e0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	461a      	mov	r2, r3
 80029a6:	2100      	movs	r1, #0
 80029a8:	2078      	movs	r0, #120	; 0x78
 80029aa:	f000 ff99 	bl	80038e0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 80029ae:	2200      	movs	r2, #0
 80029b0:	2100      	movs	r1, #0
 80029b2:	2078      	movs	r0, #120	; 0x78
 80029b4:	f000 ff94 	bl	80038e0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 80029b8:	79bb      	ldrb	r3, [r7, #6]
 80029ba:	461a      	mov	r2, r3
 80029bc:	2100      	movs	r1, #0
 80029be:	2078      	movs	r0, #120	; 0x78
 80029c0:	f000 ff8e 	bl	80038e0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 80029c4:	2200      	movs	r2, #0
 80029c6:	2100      	movs	r1, #0
 80029c8:	2078      	movs	r0, #120	; 0x78
 80029ca:	f000 ff89 	bl	80038e0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 80029ce:	22ff      	movs	r2, #255	; 0xff
 80029d0:	2100      	movs	r1, #0
 80029d2:	2078      	movs	r0, #120	; 0x78
 80029d4:	f000 ff84 	bl	80038e0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 80029d8:	222f      	movs	r2, #47	; 0x2f
 80029da:	2100      	movs	r1, #0
 80029dc:	2078      	movs	r0, #120	; 0x78
 80029de:	f000 ff7f 	bl	80038e0 <ssd1306_I2C_Write>
}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	4603      	mov	r3, r0
 80029f2:	460a      	mov	r2, r1
 80029f4:	71fb      	strb	r3, [r7, #7]
 80029f6:	4613      	mov	r3, r2
 80029f8:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 80029fa:	2227      	movs	r2, #39	; 0x27
 80029fc:	2100      	movs	r1, #0
 80029fe:	2078      	movs	r0, #120	; 0x78
 8002a00:	f000 ff6e 	bl	80038e0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8002a04:	2200      	movs	r2, #0
 8002a06:	2100      	movs	r1, #0
 8002a08:	2078      	movs	r0, #120	; 0x78
 8002a0a:	f000 ff69 	bl	80038e0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	461a      	mov	r2, r3
 8002a12:	2100      	movs	r1, #0
 8002a14:	2078      	movs	r0, #120	; 0x78
 8002a16:	f000 ff63 	bl	80038e0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	2078      	movs	r0, #120	; 0x78
 8002a20:	f000 ff5e 	bl	80038e0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8002a24:	79bb      	ldrb	r3, [r7, #6]
 8002a26:	461a      	mov	r2, r3
 8002a28:	2100      	movs	r1, #0
 8002a2a:	2078      	movs	r0, #120	; 0x78
 8002a2c:	f000 ff58 	bl	80038e0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8002a30:	2200      	movs	r2, #0
 8002a32:	2100      	movs	r1, #0
 8002a34:	2078      	movs	r0, #120	; 0x78
 8002a36:	f000 ff53 	bl	80038e0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8002a3a:	22ff      	movs	r2, #255	; 0xff
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	2078      	movs	r0, #120	; 0x78
 8002a40:	f000 ff4e 	bl	80038e0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8002a44:	222f      	movs	r2, #47	; 0x2f
 8002a46:	2100      	movs	r1, #0
 8002a48:	2078      	movs	r0, #120	; 0x78
 8002a4a:	f000 ff49 	bl	80038e0 <ssd1306_I2C_Write>
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <SSD1306_Scrolldiagright>:


void SSD1306_Scrolldiagright(uint8_t start_row, uint8_t end_row)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	460a      	mov	r2, r1
 8002a60:	71fb      	strb	r3, [r7, #7]
 8002a62:	4613      	mov	r3, r2
 8002a64:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND(SSD1306_SET_VERTICAL_SCROLL_AREA);  // sect the area
 8002a66:	22a3      	movs	r2, #163	; 0xa3
 8002a68:	2100      	movs	r1, #0
 8002a6a:	2078      	movs	r0, #120	; 0x78
 8002a6c:	f000 ff38 	bl	80038e0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);   // write dummy
 8002a70:	2200      	movs	r2, #0
 8002a72:	2100      	movs	r1, #0
 8002a74:	2078      	movs	r0, #120	; 0x78
 8002a76:	f000 ff33 	bl	80038e0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(SSD1306_HEIGHT);
 8002a7a:	2240      	movs	r2, #64	; 0x40
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	2078      	movs	r0, #120	; 0x78
 8002a80:	f000 ff2e 	bl	80038e0 <ssd1306_I2C_Write>

  SSD1306_WRITECOMMAND(SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL);
 8002a84:	2229      	movs	r2, #41	; 0x29
 8002a86:	2100      	movs	r1, #0
 8002a88:	2078      	movs	r0, #120	; 0x78
 8002a8a:	f000 ff29 	bl	80038e0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2100      	movs	r1, #0
 8002a92:	2078      	movs	r0, #120	; 0x78
 8002a94:	f000 ff24 	bl	80038e0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	2078      	movs	r0, #120	; 0x78
 8002aa0:	f000 ff1e 	bl	80038e0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	2078      	movs	r0, #120	; 0x78
 8002aaa:	f000 ff19 	bl	80038e0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);
 8002aae:	79bb      	ldrb	r3, [r7, #6]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	2078      	movs	r0, #120	; 0x78
 8002ab6:	f000 ff13 	bl	80038e0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x01);
 8002aba:	2201      	movs	r2, #1
 8002abc:	2100      	movs	r1, #0
 8002abe:	2078      	movs	r0, #120	; 0x78
 8002ac0:	f000 ff0e 	bl	80038e0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
 8002ac4:	222f      	movs	r2, #47	; 0x2f
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	2078      	movs	r0, #120	; 0x78
 8002aca:	f000 ff09 	bl	80038e0 <ssd1306_I2C_Write>
}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <SSD1306_Scrolldiagleft>:


void SSD1306_Scrolldiagleft(uint8_t start_row, uint8_t end_row)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b082      	sub	sp, #8
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	4603      	mov	r3, r0
 8002ade:	460a      	mov	r2, r1
 8002ae0:	71fb      	strb	r3, [r7, #7]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND(SSD1306_SET_VERTICAL_SCROLL_AREA);  // sect the area
 8002ae6:	22a3      	movs	r2, #163	; 0xa3
 8002ae8:	2100      	movs	r1, #0
 8002aea:	2078      	movs	r0, #120	; 0x78
 8002aec:	f000 fef8 	bl	80038e0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);   // write dummy
 8002af0:	2200      	movs	r2, #0
 8002af2:	2100      	movs	r1, #0
 8002af4:	2078      	movs	r0, #120	; 0x78
 8002af6:	f000 fef3 	bl	80038e0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(SSD1306_HEIGHT);
 8002afa:	2240      	movs	r2, #64	; 0x40
 8002afc:	2100      	movs	r1, #0
 8002afe:	2078      	movs	r0, #120	; 0x78
 8002b00:	f000 feee 	bl	80038e0 <ssd1306_I2C_Write>

  SSD1306_WRITECOMMAND(SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL);
 8002b04:	222a      	movs	r2, #42	; 0x2a
 8002b06:	2100      	movs	r1, #0
 8002b08:	2078      	movs	r0, #120	; 0x78
 8002b0a:	f000 fee9 	bl	80038e0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2100      	movs	r1, #0
 8002b12:	2078      	movs	r0, #120	; 0x78
 8002b14:	f000 fee4 	bl	80038e0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);
 8002b18:	79fb      	ldrb	r3, [r7, #7]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	2078      	movs	r0, #120	; 0x78
 8002b20:	f000 fede 	bl	80038e0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8002b24:	2200      	movs	r2, #0
 8002b26:	2100      	movs	r1, #0
 8002b28:	2078      	movs	r0, #120	; 0x78
 8002b2a:	f000 fed9 	bl	80038e0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);
 8002b2e:	79bb      	ldrb	r3, [r7, #6]
 8002b30:	461a      	mov	r2, r3
 8002b32:	2100      	movs	r1, #0
 8002b34:	2078      	movs	r0, #120	; 0x78
 8002b36:	f000 fed3 	bl	80038e0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x01);
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	2078      	movs	r0, #120	; 0x78
 8002b40:	f000 fece 	bl	80038e0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
 8002b44:	222f      	movs	r2, #47	; 0x2f
 8002b46:	2100      	movs	r1, #0
 8002b48:	2078      	movs	r0, #120	; 0x78
 8002b4a:	f000 fec9 	bl	80038e0 <ssd1306_I2C_Write>
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <SSD1306_Stopscroll>:


void SSD1306_Stopscroll(void)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002b5a:	222e      	movs	r2, #46	; 0x2e
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	2078      	movs	r0, #120	; 0x78
 8002b60:	f000 febe 	bl	80038e0 <ssd1306_I2C_Write>
}
 8002b64:	bf00      	nop
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <SSD1306_InvertDisplay>:



void SSD1306_InvertDisplay (int i)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d005      	beq.n	8002b82 <SSD1306_InvertDisplay+0x1a>
 8002b76:	22a7      	movs	r2, #167	; 0xa7
 8002b78:	2100      	movs	r1, #0
 8002b7a:	2078      	movs	r0, #120	; 0x78
 8002b7c:	f000 feb0 	bl	80038e0 <ssd1306_I2C_Write>

  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}
 8002b80:	e004      	b.n	8002b8c <SSD1306_InvertDisplay+0x24>
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
 8002b82:	22a6      	movs	r2, #166	; 0xa6
 8002b84:	2100      	movs	r1, #0
 8002b86:	2078      	movs	r0, #120	; 0x78
 8002b88:	f000 feaa 	bl	80038e0 <ssd1306_I2C_Write>
}
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <SSD1306_DrawBitmap>:


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60ba      	str	r2, [r7, #8]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	81fb      	strh	r3, [r7, #14]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	81bb      	strh	r3, [r7, #12]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002baa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bae:	3307      	adds	r3, #7
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	da00      	bge.n	8002bb6 <SSD1306_DrawBitmap+0x22>
 8002bb4:	3307      	adds	r3, #7
 8002bb6:	10db      	asrs	r3, r3, #3
 8002bb8:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	82bb      	strh	r3, [r7, #20]
 8002bc2:	e044      	b.n	8002c4e <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	827b      	strh	r3, [r7, #18]
 8002bc8:	e02f      	b.n	8002c2a <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8002bca:	8a7b      	ldrh	r3, [r7, #18]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8002bd4:	7dfb      	ldrb	r3, [r7, #23]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	75fb      	strb	r3, [r7, #23]
 8002bda:	e012      	b.n	8002c02 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002bdc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002be0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002be4:	fb03 f202 	mul.w	r2, r3, r2
 8002be8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	da00      	bge.n	8002bf2 <SSD1306_DrawBitmap+0x5e>
 8002bf0:	3307      	adds	r3, #7
 8002bf2:	10db      	asrs	r3, r3, #3
 8002bf4:	b21b      	sxth	r3, r3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8002c02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	da09      	bge.n	8002c1e <SSD1306_DrawBitmap+0x8a>
 8002c0a:	89fa      	ldrh	r2, [r7, #14]
 8002c0c:	8a7b      	ldrh	r3, [r7, #18]
 8002c0e:	4413      	add	r3, r2
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	89b9      	ldrh	r1, [r7, #12]
 8002c14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 f92d 	bl	8002e78 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8002c1e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3301      	adds	r3, #1
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	827b      	strh	r3, [r7, #18]
 8002c2a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002c2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	dbc9      	blt.n	8002bca <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8002c36:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	82bb      	strh	r3, [r7, #20]
 8002c42:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	3301      	adds	r3, #1
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	81bb      	strh	r3, [r7, #12]
 8002c4e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002c52:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	dbb4      	blt.n	8002bc4 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8002c5a:	bf00      	nop
 8002c5c:	bf00      	nop
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <SSD1306_Init>:


uint8_t SSD1306_Init(void) {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002c6a:	f000 fdbd 	bl	80037e8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002c6e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002c72:	2201      	movs	r2, #1
 8002c74:	2178      	movs	r1, #120	; 0x78
 8002c76:	485b      	ldr	r0, [pc, #364]	; (8002de4 <SSD1306_Init+0x180>)
 8002c78:	f7fe f8e0 	bl	8000e3c <HAL_I2C_IsDeviceReady>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002c82:	2300      	movs	r3, #0
 8002c84:	e0a9      	b.n	8002dda <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8002c86:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002c8a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002c8c:	e002      	b.n	8002c94 <SSD1306_Init+0x30>
		p--;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3b01      	subs	r3, #1
 8002c92:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f9      	bne.n	8002c8e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002c9a:	22ae      	movs	r2, #174	; 0xae
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	2078      	movs	r0, #120	; 0x78
 8002ca0:	f000 fe1e 	bl	80038e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	2078      	movs	r0, #120	; 0x78
 8002caa:	f000 fe19 	bl	80038e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002cae:	2210      	movs	r2, #16
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	2078      	movs	r0, #120	; 0x78
 8002cb4:	f000 fe14 	bl	80038e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002cb8:	22b0      	movs	r2, #176	; 0xb0
 8002cba:	2100      	movs	r1, #0
 8002cbc:	2078      	movs	r0, #120	; 0x78
 8002cbe:	f000 fe0f 	bl	80038e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002cc2:	22c8      	movs	r2, #200	; 0xc8
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	2078      	movs	r0, #120	; 0x78
 8002cc8:	f000 fe0a 	bl	80038e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2100      	movs	r1, #0
 8002cd0:	2078      	movs	r0, #120	; 0x78
 8002cd2:	f000 fe05 	bl	80038e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002cd6:	2210      	movs	r2, #16
 8002cd8:	2100      	movs	r1, #0
 8002cda:	2078      	movs	r0, #120	; 0x78
 8002cdc:	f000 fe00 	bl	80038e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002ce0:	2240      	movs	r2, #64	; 0x40
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	2078      	movs	r0, #120	; 0x78
 8002ce6:	f000 fdfb 	bl	80038e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002cea:	2281      	movs	r2, #129	; 0x81
 8002cec:	2100      	movs	r1, #0
 8002cee:	2078      	movs	r0, #120	; 0x78
 8002cf0:	f000 fdf6 	bl	80038e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002cf4:	22ff      	movs	r2, #255	; 0xff
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	2078      	movs	r0, #120	; 0x78
 8002cfa:	f000 fdf1 	bl	80038e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002cfe:	22a1      	movs	r2, #161	; 0xa1
 8002d00:	2100      	movs	r1, #0
 8002d02:	2078      	movs	r0, #120	; 0x78
 8002d04:	f000 fdec 	bl	80038e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002d08:	22a6      	movs	r2, #166	; 0xa6
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	2078      	movs	r0, #120	; 0x78
 8002d0e:	f000 fde7 	bl	80038e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002d12:	22a8      	movs	r2, #168	; 0xa8
 8002d14:	2100      	movs	r1, #0
 8002d16:	2078      	movs	r0, #120	; 0x78
 8002d18:	f000 fde2 	bl	80038e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002d1c:	223f      	movs	r2, #63	; 0x3f
 8002d1e:	2100      	movs	r1, #0
 8002d20:	2078      	movs	r0, #120	; 0x78
 8002d22:	f000 fddd 	bl	80038e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002d26:	22a4      	movs	r2, #164	; 0xa4
 8002d28:	2100      	movs	r1, #0
 8002d2a:	2078      	movs	r0, #120	; 0x78
 8002d2c:	f000 fdd8 	bl	80038e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002d30:	22d3      	movs	r2, #211	; 0xd3
 8002d32:	2100      	movs	r1, #0
 8002d34:	2078      	movs	r0, #120	; 0x78
 8002d36:	f000 fdd3 	bl	80038e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	2078      	movs	r0, #120	; 0x78
 8002d40:	f000 fdce 	bl	80038e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002d44:	22d5      	movs	r2, #213	; 0xd5
 8002d46:	2100      	movs	r1, #0
 8002d48:	2078      	movs	r0, #120	; 0x78
 8002d4a:	f000 fdc9 	bl	80038e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002d4e:	22f0      	movs	r2, #240	; 0xf0
 8002d50:	2100      	movs	r1, #0
 8002d52:	2078      	movs	r0, #120	; 0x78
 8002d54:	f000 fdc4 	bl	80038e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002d58:	22d9      	movs	r2, #217	; 0xd9
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	2078      	movs	r0, #120	; 0x78
 8002d5e:	f000 fdbf 	bl	80038e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002d62:	2222      	movs	r2, #34	; 0x22
 8002d64:	2100      	movs	r1, #0
 8002d66:	2078      	movs	r0, #120	; 0x78
 8002d68:	f000 fdba 	bl	80038e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002d6c:	22da      	movs	r2, #218	; 0xda
 8002d6e:	2100      	movs	r1, #0
 8002d70:	2078      	movs	r0, #120	; 0x78
 8002d72:	f000 fdb5 	bl	80038e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002d76:	2212      	movs	r2, #18
 8002d78:	2100      	movs	r1, #0
 8002d7a:	2078      	movs	r0, #120	; 0x78
 8002d7c:	f000 fdb0 	bl	80038e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002d80:	22db      	movs	r2, #219	; 0xdb
 8002d82:	2100      	movs	r1, #0
 8002d84:	2078      	movs	r0, #120	; 0x78
 8002d86:	f000 fdab 	bl	80038e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	2078      	movs	r0, #120	; 0x78
 8002d90:	f000 fda6 	bl	80038e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002d94:	228d      	movs	r2, #141	; 0x8d
 8002d96:	2100      	movs	r1, #0
 8002d98:	2078      	movs	r0, #120	; 0x78
 8002d9a:	f000 fda1 	bl	80038e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002d9e:	2214      	movs	r2, #20
 8002da0:	2100      	movs	r1, #0
 8002da2:	2078      	movs	r0, #120	; 0x78
 8002da4:	f000 fd9c 	bl	80038e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002da8:	22af      	movs	r2, #175	; 0xaf
 8002daa:	2100      	movs	r1, #0
 8002dac:	2078      	movs	r0, #120	; 0x78
 8002dae:	f000 fd97 	bl	80038e0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002db2:	222e      	movs	r2, #46	; 0x2e
 8002db4:	2100      	movs	r1, #0
 8002db6:	2078      	movs	r0, #120	; 0x78
 8002db8:	f000 fd92 	bl	80038e0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	f000 f843 	bl	8002e48 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002dc2:	f000 f813 	bl	8002dec <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002dc6:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <SSD1306_Init+0x184>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002dcc:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <SSD1306_Init+0x184>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002dd2:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <SSD1306_Init+0x184>)
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002dd8:	2301      	movs	r3, #1
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000034 	.word	0x20000034
 8002de8:	20000488 	.word	0x20000488

08002dec <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002df2:	2300      	movs	r3, #0
 8002df4:	71fb      	strb	r3, [r7, #7]
 8002df6:	e01d      	b.n	8002e34 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002df8:	79fb      	ldrb	r3, [r7, #7]
 8002dfa:	3b50      	subs	r3, #80	; 0x50
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	461a      	mov	r2, r3
 8002e00:	2100      	movs	r1, #0
 8002e02:	2078      	movs	r0, #120	; 0x78
 8002e04:	f000 fd6c 	bl	80038e0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002e08:	2200      	movs	r2, #0
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	2078      	movs	r0, #120	; 0x78
 8002e0e:	f000 fd67 	bl	80038e0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002e12:	2210      	movs	r2, #16
 8002e14:	2100      	movs	r1, #0
 8002e16:	2078      	movs	r0, #120	; 0x78
 8002e18:	f000 fd62 	bl	80038e0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	01db      	lsls	r3, r3, #7
 8002e20:	4a08      	ldr	r2, [pc, #32]	; (8002e44 <SSD1306_UpdateScreen+0x58>)
 8002e22:	441a      	add	r2, r3
 8002e24:	2380      	movs	r3, #128	; 0x80
 8002e26:	2140      	movs	r1, #64	; 0x40
 8002e28:	2078      	movs	r0, #120	; 0x78
 8002e2a:	f000 fcf3 	bl	8003814 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	3301      	adds	r3, #1
 8002e32:	71fb      	strb	r3, [r7, #7]
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	2b07      	cmp	r3, #7
 8002e38:	d9de      	bls.n	8002df8 <SSD1306_UpdateScreen+0xc>
	}
}
 8002e3a:	bf00      	nop
 8002e3c:	bf00      	nop
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	20000088 	.word	0x20000088

08002e48 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <SSD1306_Fill+0x14>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	e000      	b.n	8002e5e <SSD1306_Fill+0x16>
 8002e5c:	23ff      	movs	r3, #255	; 0xff
 8002e5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e62:	4619      	mov	r1, r3
 8002e64:	4803      	ldr	r0, [pc, #12]	; (8002e74 <SSD1306_Fill+0x2c>)
 8002e66:	f001 f8af 	bl	8003fc8 <memset>
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	20000088 	.word	0x20000088

08002e78 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	80fb      	strh	r3, [r7, #6]
 8002e82:	460b      	mov	r3, r1
 8002e84:	80bb      	strh	r3, [r7, #4]
 8002e86:	4613      	mov	r3, r2
 8002e88:	70fb      	strb	r3, [r7, #3]
	if (
 8002e8a:	88fb      	ldrh	r3, [r7, #6]
 8002e8c:	2b7f      	cmp	r3, #127	; 0x7f
 8002e8e:	d848      	bhi.n	8002f22 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002e90:	88bb      	ldrh	r3, [r7, #4]
 8002e92:	2b3f      	cmp	r3, #63	; 0x3f
 8002e94:	d845      	bhi.n	8002f22 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002e96:	4b26      	ldr	r3, [pc, #152]	; (8002f30 <SSD1306_DrawPixel+0xb8>)
 8002e98:	791b      	ldrb	r3, [r3, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d006      	beq.n	8002eac <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002e9e:	78fb      	ldrb	r3, [r7, #3]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	bf0c      	ite	eq
 8002ea4:	2301      	moveq	r3, #1
 8002ea6:	2300      	movne	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002eac:	78fb      	ldrb	r3, [r7, #3]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d11a      	bne.n	8002ee8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002eb2:	88fa      	ldrh	r2, [r7, #6]
 8002eb4:	88bb      	ldrh	r3, [r7, #4]
 8002eb6:	08db      	lsrs	r3, r3, #3
 8002eb8:	b298      	uxth	r0, r3
 8002eba:	4603      	mov	r3, r0
 8002ebc:	01db      	lsls	r3, r3, #7
 8002ebe:	4413      	add	r3, r2
 8002ec0:	4a1c      	ldr	r2, [pc, #112]	; (8002f34 <SSD1306_DrawPixel+0xbc>)
 8002ec2:	5cd3      	ldrb	r3, [r2, r3]
 8002ec4:	b25a      	sxtb	r2, r3
 8002ec6:	88bb      	ldrh	r3, [r7, #4]
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	2101      	movs	r1, #1
 8002ece:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed2:	b25b      	sxtb	r3, r3
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	b259      	sxtb	r1, r3
 8002ed8:	88fa      	ldrh	r2, [r7, #6]
 8002eda:	4603      	mov	r3, r0
 8002edc:	01db      	lsls	r3, r3, #7
 8002ede:	4413      	add	r3, r2
 8002ee0:	b2c9      	uxtb	r1, r1
 8002ee2:	4a14      	ldr	r2, [pc, #80]	; (8002f34 <SSD1306_DrawPixel+0xbc>)
 8002ee4:	54d1      	strb	r1, [r2, r3]
 8002ee6:	e01d      	b.n	8002f24 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002ee8:	88fa      	ldrh	r2, [r7, #6]
 8002eea:	88bb      	ldrh	r3, [r7, #4]
 8002eec:	08db      	lsrs	r3, r3, #3
 8002eee:	b298      	uxth	r0, r3
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	01db      	lsls	r3, r3, #7
 8002ef4:	4413      	add	r3, r2
 8002ef6:	4a0f      	ldr	r2, [pc, #60]	; (8002f34 <SSD1306_DrawPixel+0xbc>)
 8002ef8:	5cd3      	ldrb	r3, [r2, r3]
 8002efa:	b25a      	sxtb	r2, r3
 8002efc:	88bb      	ldrh	r3, [r7, #4]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	2101      	movs	r1, #1
 8002f04:	fa01 f303 	lsl.w	r3, r1, r3
 8002f08:	b25b      	sxtb	r3, r3
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	b25b      	sxtb	r3, r3
 8002f0e:	4013      	ands	r3, r2
 8002f10:	b259      	sxtb	r1, r3
 8002f12:	88fa      	ldrh	r2, [r7, #6]
 8002f14:	4603      	mov	r3, r0
 8002f16:	01db      	lsls	r3, r3, #7
 8002f18:	4413      	add	r3, r2
 8002f1a:	b2c9      	uxtb	r1, r1
 8002f1c:	4a05      	ldr	r2, [pc, #20]	; (8002f34 <SSD1306_DrawPixel+0xbc>)
 8002f1e:	54d1      	strb	r1, [r2, r3]
 8002f20:	e000      	b.n	8002f24 <SSD1306_DrawPixel+0xac>
		return;
 8002f22:	bf00      	nop
	}
}
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	20000488 	.word	0x20000488
 8002f34:	20000088 	.word	0x20000088

08002f38 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	460a      	mov	r2, r1
 8002f42:	80fb      	strh	r3, [r7, #6]
 8002f44:	4613      	mov	r3, r2
 8002f46:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002f48:	4a05      	ldr	r2, [pc, #20]	; (8002f60 <SSD1306_GotoXY+0x28>)
 8002f4a:	88fb      	ldrh	r3, [r7, #6]
 8002f4c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002f4e:	4a04      	ldr	r2, [pc, #16]	; (8002f60 <SSD1306_GotoXY+0x28>)
 8002f50:	88bb      	ldrh	r3, [r7, #4]
 8002f52:	8053      	strh	r3, [r2, #2]
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	20000488 	.word	0x20000488

08002f64 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	6039      	str	r1, [r7, #0]
 8002f6e:	71fb      	strb	r3, [r7, #7]
 8002f70:	4613      	mov	r3, r2
 8002f72:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002f74:	4b3a      	ldr	r3, [pc, #232]	; (8003060 <SSD1306_Putc+0xfc>)
 8002f76:	881b      	ldrh	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	4413      	add	r3, r2
	if (
 8002f80:	2b7f      	cmp	r3, #127	; 0x7f
 8002f82:	dc07      	bgt.n	8002f94 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002f84:	4b36      	ldr	r3, [pc, #216]	; (8003060 <SSD1306_Putc+0xfc>)
 8002f86:	885b      	ldrh	r3, [r3, #2]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	785b      	ldrb	r3, [r3, #1]
 8002f8e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002f90:	2b3f      	cmp	r3, #63	; 0x3f
 8002f92:	dd01      	ble.n	8002f98 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002f94:	2300      	movs	r3, #0
 8002f96:	e05e      	b.n	8003056 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002f98:	2300      	movs	r3, #0
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	e04b      	b.n	8003036 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	3b20      	subs	r3, #32
 8002fa6:	6839      	ldr	r1, [r7, #0]
 8002fa8:	7849      	ldrb	r1, [r1, #1]
 8002faa:	fb01 f303 	mul.w	r3, r1, r3
 8002fae:	4619      	mov	r1, r3
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	440b      	add	r3, r1
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	4413      	add	r3, r2
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	e030      	b.n	8003024 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d010      	beq.n	8002ff4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002fd2:	4b23      	ldr	r3, [pc, #140]	; (8003060 <SSD1306_Putc+0xfc>)
 8002fd4:	881a      	ldrh	r2, [r3, #0]
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	4413      	add	r3, r2
 8002fdc:	b298      	uxth	r0, r3
 8002fde:	4b20      	ldr	r3, [pc, #128]	; (8003060 <SSD1306_Putc+0xfc>)
 8002fe0:	885a      	ldrh	r2, [r3, #2]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	79ba      	ldrb	r2, [r7, #6]
 8002fec:	4619      	mov	r1, r3
 8002fee:	f7ff ff43 	bl	8002e78 <SSD1306_DrawPixel>
 8002ff2:	e014      	b.n	800301e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002ff4:	4b1a      	ldr	r3, [pc, #104]	; (8003060 <SSD1306_Putc+0xfc>)
 8002ff6:	881a      	ldrh	r2, [r3, #0]
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	b298      	uxth	r0, r3
 8003000:	4b17      	ldr	r3, [pc, #92]	; (8003060 <SSD1306_Putc+0xfc>)
 8003002:	885a      	ldrh	r2, [r3, #2]
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	b29b      	uxth	r3, r3
 8003008:	4413      	add	r3, r2
 800300a:	b299      	uxth	r1, r3
 800300c:	79bb      	ldrb	r3, [r7, #6]
 800300e:	2b00      	cmp	r3, #0
 8003010:	bf0c      	ite	eq
 8003012:	2301      	moveq	r3, #1
 8003014:	2300      	movne	r3, #0
 8003016:	b2db      	uxtb	r3, r3
 8003018:	461a      	mov	r2, r3
 800301a:	f7ff ff2d 	bl	8002e78 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	3301      	adds	r3, #1
 8003022:	613b      	str	r3, [r7, #16]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	461a      	mov	r2, r3
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	4293      	cmp	r3, r2
 800302e:	d3c8      	bcc.n	8002fc2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	3301      	adds	r3, #1
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	785b      	ldrb	r3, [r3, #1]
 800303a:	461a      	mov	r2, r3
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	4293      	cmp	r3, r2
 8003040:	d3ad      	bcc.n	8002f9e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8003042:	4b07      	ldr	r3, [pc, #28]	; (8003060 <SSD1306_Putc+0xfc>)
 8003044:	881a      	ldrh	r2, [r3, #0]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	b29b      	uxth	r3, r3
 800304c:	4413      	add	r3, r2
 800304e:	b29a      	uxth	r2, r3
 8003050:	4b03      	ldr	r3, [pc, #12]	; (8003060 <SSD1306_Putc+0xfc>)
 8003052:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8003054:	79fb      	ldrb	r3, [r7, #7]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	20000488 	.word	0x20000488

08003064 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	4613      	mov	r3, r2
 8003070:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8003072:	e012      	b.n	800309a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	79fa      	ldrb	r2, [r7, #7]
 800307a:	68b9      	ldr	r1, [r7, #8]
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff ff71 	bl	8002f64 <SSD1306_Putc>
 8003082:	4603      	mov	r3, r0
 8003084:	461a      	mov	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d002      	beq.n	8003094 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	e008      	b.n	80030a6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	3301      	adds	r3, #1
 8003098:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1e8      	bne.n	8003074 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	781b      	ldrb	r3, [r3, #0]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80030ae:	b590      	push	{r4, r7, lr}
 80030b0:	b087      	sub	sp, #28
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	4604      	mov	r4, r0
 80030b6:	4608      	mov	r0, r1
 80030b8:	4611      	mov	r1, r2
 80030ba:	461a      	mov	r2, r3
 80030bc:	4623      	mov	r3, r4
 80030be:	80fb      	strh	r3, [r7, #6]
 80030c0:	4603      	mov	r3, r0
 80030c2:	80bb      	strh	r3, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	807b      	strh	r3, [r7, #2]
 80030c8:	4613      	mov	r3, r2
 80030ca:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 80030cc:	88fb      	ldrh	r3, [r7, #6]
 80030ce:	2b7f      	cmp	r3, #127	; 0x7f
 80030d0:	d901      	bls.n	80030d6 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 80030d2:	237f      	movs	r3, #127	; 0x7f
 80030d4:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 80030d6:	887b      	ldrh	r3, [r7, #2]
 80030d8:	2b7f      	cmp	r3, #127	; 0x7f
 80030da:	d901      	bls.n	80030e0 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 80030dc:	237f      	movs	r3, #127	; 0x7f
 80030de:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 80030e0:	88bb      	ldrh	r3, [r7, #4]
 80030e2:	2b3f      	cmp	r3, #63	; 0x3f
 80030e4:	d901      	bls.n	80030ea <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 80030e6:	233f      	movs	r3, #63	; 0x3f
 80030e8:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 80030ea:	883b      	ldrh	r3, [r7, #0]
 80030ec:	2b3f      	cmp	r3, #63	; 0x3f
 80030ee:	d901      	bls.n	80030f4 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 80030f0:	233f      	movs	r3, #63	; 0x3f
 80030f2:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 80030f4:	88fa      	ldrh	r2, [r7, #6]
 80030f6:	887b      	ldrh	r3, [r7, #2]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d205      	bcs.n	8003108 <SSD1306_DrawLine+0x5a>
 80030fc:	887a      	ldrh	r2, [r7, #2]
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	b29b      	uxth	r3, r3
 8003104:	b21b      	sxth	r3, r3
 8003106:	e004      	b.n	8003112 <SSD1306_DrawLine+0x64>
 8003108:	88fa      	ldrh	r2, [r7, #6]
 800310a:	887b      	ldrh	r3, [r7, #2]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	b29b      	uxth	r3, r3
 8003110:	b21b      	sxth	r3, r3
 8003112:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8003114:	88ba      	ldrh	r2, [r7, #4]
 8003116:	883b      	ldrh	r3, [r7, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d205      	bcs.n	8003128 <SSD1306_DrawLine+0x7a>
 800311c:	883a      	ldrh	r2, [r7, #0]
 800311e:	88bb      	ldrh	r3, [r7, #4]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	b29b      	uxth	r3, r3
 8003124:	b21b      	sxth	r3, r3
 8003126:	e004      	b.n	8003132 <SSD1306_DrawLine+0x84>
 8003128:	88ba      	ldrh	r2, [r7, #4]
 800312a:	883b      	ldrh	r3, [r7, #0]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	b29b      	uxth	r3, r3
 8003130:	b21b      	sxth	r3, r3
 8003132:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8003134:	88fa      	ldrh	r2, [r7, #6]
 8003136:	887b      	ldrh	r3, [r7, #2]
 8003138:	429a      	cmp	r2, r3
 800313a:	d201      	bcs.n	8003140 <SSD1306_DrawLine+0x92>
 800313c:	2301      	movs	r3, #1
 800313e:	e001      	b.n	8003144 <SSD1306_DrawLine+0x96>
 8003140:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003144:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8003146:	88ba      	ldrh	r2, [r7, #4]
 8003148:	883b      	ldrh	r3, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d201      	bcs.n	8003152 <SSD1306_DrawLine+0xa4>
 800314e:	2301      	movs	r3, #1
 8003150:	e001      	b.n	8003156 <SSD1306_DrawLine+0xa8>
 8003152:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003156:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8003158:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800315c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003160:	429a      	cmp	r2, r3
 8003162:	dd07      	ble.n	8003174 <SSD1306_DrawLine+0xc6>
 8003164:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003168:	2b00      	cmp	r3, #0
 800316a:	da00      	bge.n	800316e <SSD1306_DrawLine+0xc0>
 800316c:	3301      	adds	r3, #1
 800316e:	105b      	asrs	r3, r3, #1
 8003170:	b21b      	sxth	r3, r3
 8003172:	e007      	b.n	8003184 <SSD1306_DrawLine+0xd6>
 8003174:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003178:	2b00      	cmp	r3, #0
 800317a:	da00      	bge.n	800317e <SSD1306_DrawLine+0xd0>
 800317c:	3301      	adds	r3, #1
 800317e:	105b      	asrs	r3, r3, #1
 8003180:	425b      	negs	r3, r3
 8003182:	b21b      	sxth	r3, r3
 8003184:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8003186:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d129      	bne.n	80031e2 <SSD1306_DrawLine+0x134>
		if (y1 < y0) {
 800318e:	883a      	ldrh	r2, [r7, #0]
 8003190:	88bb      	ldrh	r3, [r7, #4]
 8003192:	429a      	cmp	r2, r3
 8003194:	d205      	bcs.n	80031a2 <SSD1306_DrawLine+0xf4>
			tmp = y1;
 8003196:	883b      	ldrh	r3, [r7, #0]
 8003198:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800319a:	88bb      	ldrh	r3, [r7, #4]
 800319c:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800319e:	893b      	ldrh	r3, [r7, #8]
 80031a0:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80031a2:	887a      	ldrh	r2, [r7, #2]
 80031a4:	88fb      	ldrh	r3, [r7, #6]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d205      	bcs.n	80031b6 <SSD1306_DrawLine+0x108>
			tmp = x1;
 80031aa:	887b      	ldrh	r3, [r7, #2]
 80031ac:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80031ae:	88fb      	ldrh	r3, [r7, #6]
 80031b0:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80031b2:	893b      	ldrh	r3, [r7, #8]
 80031b4:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80031b6:	88bb      	ldrh	r3, [r7, #4]
 80031b8:	82bb      	strh	r3, [r7, #20]
 80031ba:	e00c      	b.n	80031d6 <SSD1306_DrawLine+0x128>
			SSD1306_DrawPixel(x0, i, c);
 80031bc:	8ab9      	ldrh	r1, [r7, #20]
 80031be:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80031c2:	88fb      	ldrh	r3, [r7, #6]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff fe57 	bl	8002e78 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80031ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	3301      	adds	r3, #1
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	82bb      	strh	r3, [r7, #20]
 80031d6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80031da:	883b      	ldrh	r3, [r7, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	dded      	ble.n	80031bc <SSD1306_DrawLine+0x10e>
		}
		
		/* Return from function */
		return;
 80031e0:	e05f      	b.n	80032a2 <SSD1306_DrawLine+0x1f4>
	}
	
	if (dy == 0) {
 80031e2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d129      	bne.n	800323e <SSD1306_DrawLine+0x190>
		if (y1 < y0) {
 80031ea:	883a      	ldrh	r2, [r7, #0]
 80031ec:	88bb      	ldrh	r3, [r7, #4]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d205      	bcs.n	80031fe <SSD1306_DrawLine+0x150>
			tmp = y1;
 80031f2:	883b      	ldrh	r3, [r7, #0]
 80031f4:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80031f6:	88bb      	ldrh	r3, [r7, #4]
 80031f8:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80031fa:	893b      	ldrh	r3, [r7, #8]
 80031fc:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80031fe:	887a      	ldrh	r2, [r7, #2]
 8003200:	88fb      	ldrh	r3, [r7, #6]
 8003202:	429a      	cmp	r2, r3
 8003204:	d205      	bcs.n	8003212 <SSD1306_DrawLine+0x164>
			tmp = x1;
 8003206:	887b      	ldrh	r3, [r7, #2]
 8003208:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800320a:	88fb      	ldrh	r3, [r7, #6]
 800320c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800320e:	893b      	ldrh	r3, [r7, #8]
 8003210:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8003212:	88fb      	ldrh	r3, [r7, #6]
 8003214:	82bb      	strh	r3, [r7, #20]
 8003216:	e00c      	b.n	8003232 <SSD1306_DrawLine+0x184>
			SSD1306_DrawPixel(i, y0, c);
 8003218:	8abb      	ldrh	r3, [r7, #20]
 800321a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800321e:	88b9      	ldrh	r1, [r7, #4]
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff fe29 	bl	8002e78 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8003226:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800322a:	b29b      	uxth	r3, r3
 800322c:	3301      	adds	r3, #1
 800322e:	b29b      	uxth	r3, r3
 8003230:	82bb      	strh	r3, [r7, #20]
 8003232:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003236:	887b      	ldrh	r3, [r7, #2]
 8003238:	429a      	cmp	r2, r3
 800323a:	dded      	ble.n	8003218 <SSD1306_DrawLine+0x16a>
		}
		
		/* Return from function */
		return;
 800323c:	e031      	b.n	80032a2 <SSD1306_DrawLine+0x1f4>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 800323e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003242:	88b9      	ldrh	r1, [r7, #4]
 8003244:	88fb      	ldrh	r3, [r7, #6]
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff fe16 	bl	8002e78 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 800324c:	88fa      	ldrh	r2, [r7, #6]
 800324e:	887b      	ldrh	r3, [r7, #2]
 8003250:	429a      	cmp	r2, r3
 8003252:	d103      	bne.n	800325c <SSD1306_DrawLine+0x1ae>
 8003254:	88ba      	ldrh	r2, [r7, #4]
 8003256:	883b      	ldrh	r3, [r7, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d021      	beq.n	80032a0 <SSD1306_DrawLine+0x1f2>
			break;
		}
		e2 = err; 
 800325c:	8afb      	ldrh	r3, [r7, #22]
 800325e:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8003260:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003264:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003268:	425b      	negs	r3, r3
 800326a:	429a      	cmp	r2, r3
 800326c:	dd08      	ble.n	8003280 <SSD1306_DrawLine+0x1d2>
			err -= dy;
 800326e:	8afa      	ldrh	r2, [r7, #22]
 8003270:	8a3b      	ldrh	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	b29b      	uxth	r3, r3
 8003276:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8003278:	89fa      	ldrh	r2, [r7, #14]
 800327a:	88fb      	ldrh	r3, [r7, #6]
 800327c:	4413      	add	r3, r2
 800327e:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8003280:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003284:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003288:	429a      	cmp	r2, r3
 800328a:	dad8      	bge.n	800323e <SSD1306_DrawLine+0x190>
			err += dx;
 800328c:	8afa      	ldrh	r2, [r7, #22]
 800328e:	8a7b      	ldrh	r3, [r7, #18]
 8003290:	4413      	add	r3, r2
 8003292:	b29b      	uxth	r3, r3
 8003294:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8003296:	89ba      	ldrh	r2, [r7, #12]
 8003298:	88bb      	ldrh	r3, [r7, #4]
 800329a:	4413      	add	r3, r2
 800329c:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 800329e:	e7ce      	b.n	800323e <SSD1306_DrawLine+0x190>
			break;
 80032a0:	bf00      	nop
		} 
	}
}
 80032a2:	371c      	adds	r7, #28
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd90      	pop	{r4, r7, pc}

080032a8 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 80032a8:	b590      	push	{r4, r7, lr}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af02      	add	r7, sp, #8
 80032ae:	4604      	mov	r4, r0
 80032b0:	4608      	mov	r0, r1
 80032b2:	4611      	mov	r1, r2
 80032b4:	461a      	mov	r2, r3
 80032b6:	4623      	mov	r3, r4
 80032b8:	80fb      	strh	r3, [r7, #6]
 80032ba:	4603      	mov	r3, r0
 80032bc:	80bb      	strh	r3, [r7, #4]
 80032be:	460b      	mov	r3, r1
 80032c0:	807b      	strh	r3, [r7, #2]
 80032c2:	4613      	mov	r3, r2
 80032c4:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 80032c6:	88fb      	ldrh	r3, [r7, #6]
 80032c8:	2b7f      	cmp	r3, #127	; 0x7f
 80032ca:	d853      	bhi.n	8003374 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 80032cc:	88bb      	ldrh	r3, [r7, #4]
 80032ce:	2b3f      	cmp	r3, #63	; 0x3f
 80032d0:	d850      	bhi.n	8003374 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 80032d2:	88fa      	ldrh	r2, [r7, #6]
 80032d4:	887b      	ldrh	r3, [r7, #2]
 80032d6:	4413      	add	r3, r2
 80032d8:	2b7f      	cmp	r3, #127	; 0x7f
 80032da:	dd03      	ble.n	80032e4 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 80032dc:	88fb      	ldrh	r3, [r7, #6]
 80032de:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80032e2:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 80032e4:	88ba      	ldrh	r2, [r7, #4]
 80032e6:	883b      	ldrh	r3, [r7, #0]
 80032e8:	4413      	add	r3, r2
 80032ea:	2b3f      	cmp	r3, #63	; 0x3f
 80032ec:	dd03      	ble.n	80032f6 <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 80032ee:	88bb      	ldrh	r3, [r7, #4]
 80032f0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80032f4:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 80032f6:	88fa      	ldrh	r2, [r7, #6]
 80032f8:	887b      	ldrh	r3, [r7, #2]
 80032fa:	4413      	add	r3, r2
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	88bc      	ldrh	r4, [r7, #4]
 8003300:	88b9      	ldrh	r1, [r7, #4]
 8003302:	88f8      	ldrh	r0, [r7, #6]
 8003304:	7e3b      	ldrb	r3, [r7, #24]
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	4623      	mov	r3, r4
 800330a:	f7ff fed0 	bl	80030ae <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 800330e:	88ba      	ldrh	r2, [r7, #4]
 8003310:	883b      	ldrh	r3, [r7, #0]
 8003312:	4413      	add	r3, r2
 8003314:	b299      	uxth	r1, r3
 8003316:	88fa      	ldrh	r2, [r7, #6]
 8003318:	887b      	ldrh	r3, [r7, #2]
 800331a:	4413      	add	r3, r2
 800331c:	b29c      	uxth	r4, r3
 800331e:	88ba      	ldrh	r2, [r7, #4]
 8003320:	883b      	ldrh	r3, [r7, #0]
 8003322:	4413      	add	r3, r2
 8003324:	b29a      	uxth	r2, r3
 8003326:	88f8      	ldrh	r0, [r7, #6]
 8003328:	7e3b      	ldrb	r3, [r7, #24]
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	4613      	mov	r3, r2
 800332e:	4622      	mov	r2, r4
 8003330:	f7ff febd 	bl	80030ae <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8003334:	88ba      	ldrh	r2, [r7, #4]
 8003336:	883b      	ldrh	r3, [r7, #0]
 8003338:	4413      	add	r3, r2
 800333a:	b29c      	uxth	r4, r3
 800333c:	88fa      	ldrh	r2, [r7, #6]
 800333e:	88b9      	ldrh	r1, [r7, #4]
 8003340:	88f8      	ldrh	r0, [r7, #6]
 8003342:	7e3b      	ldrb	r3, [r7, #24]
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	4623      	mov	r3, r4
 8003348:	f7ff feb1 	bl	80030ae <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 800334c:	88fa      	ldrh	r2, [r7, #6]
 800334e:	887b      	ldrh	r3, [r7, #2]
 8003350:	4413      	add	r3, r2
 8003352:	b298      	uxth	r0, r3
 8003354:	88fa      	ldrh	r2, [r7, #6]
 8003356:	887b      	ldrh	r3, [r7, #2]
 8003358:	4413      	add	r3, r2
 800335a:	b29c      	uxth	r4, r3
 800335c:	88ba      	ldrh	r2, [r7, #4]
 800335e:	883b      	ldrh	r3, [r7, #0]
 8003360:	4413      	add	r3, r2
 8003362:	b29a      	uxth	r2, r3
 8003364:	88b9      	ldrh	r1, [r7, #4]
 8003366:	7e3b      	ldrb	r3, [r7, #24]
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	4613      	mov	r3, r2
 800336c:	4622      	mov	r2, r4
 800336e:	f7ff fe9e 	bl	80030ae <SSD1306_DrawLine>
 8003372:	e000      	b.n	8003376 <SSD1306_DrawRectangle+0xce>
		return;
 8003374:	bf00      	nop
}
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	bd90      	pop	{r4, r7, pc}

0800337c <SSD1306_DrawFilledRectangle>:

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 800337c:	b590      	push	{r4, r7, lr}
 800337e:	b087      	sub	sp, #28
 8003380:	af02      	add	r7, sp, #8
 8003382:	4604      	mov	r4, r0
 8003384:	4608      	mov	r0, r1
 8003386:	4611      	mov	r1, r2
 8003388:	461a      	mov	r2, r3
 800338a:	4623      	mov	r3, r4
 800338c:	80fb      	strh	r3, [r7, #6]
 800338e:	4603      	mov	r3, r0
 8003390:	80bb      	strh	r3, [r7, #4]
 8003392:	460b      	mov	r3, r1
 8003394:	807b      	strh	r3, [r7, #2]
 8003396:	4613      	mov	r3, r2
 8003398:	803b      	strh	r3, [r7, #0]
	uint8_t i;
	
	/* Check input parameters */
	if (
 800339a:	88fb      	ldrh	r3, [r7, #6]
 800339c:	2b7f      	cmp	r3, #127	; 0x7f
 800339e:	d836      	bhi.n	800340e <SSD1306_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 80033a0:	88bb      	ldrh	r3, [r7, #4]
 80033a2:	2b3f      	cmp	r3, #63	; 0x3f
 80033a4:	d833      	bhi.n	800340e <SSD1306_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 80033a6:	88fa      	ldrh	r2, [r7, #6]
 80033a8:	887b      	ldrh	r3, [r7, #2]
 80033aa:	4413      	add	r3, r2
 80033ac:	2b7f      	cmp	r3, #127	; 0x7f
 80033ae:	dd03      	ble.n	80033b8 <SSD1306_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 80033b0:	88fb      	ldrh	r3, [r7, #6]
 80033b2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80033b6:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 80033b8:	88ba      	ldrh	r2, [r7, #4]
 80033ba:	883b      	ldrh	r3, [r7, #0]
 80033bc:	4413      	add	r3, r2
 80033be:	2b3f      	cmp	r3, #63	; 0x3f
 80033c0:	dd03      	ble.n	80033ca <SSD1306_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 80033c2:	88bb      	ldrh	r3, [r7, #4]
 80033c4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80033c8:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 80033ca:	2300      	movs	r3, #0
 80033cc:	73fb      	strb	r3, [r7, #15]
 80033ce:	e018      	b.n	8003402 <SSD1306_DrawFilledRectangle+0x86>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	88bb      	ldrh	r3, [r7, #4]
 80033d6:	4413      	add	r3, r2
 80033d8:	b299      	uxth	r1, r3
 80033da:	88fa      	ldrh	r2, [r7, #6]
 80033dc:	887b      	ldrh	r3, [r7, #2]
 80033de:	4413      	add	r3, r2
 80033e0:	b29c      	uxth	r4, r3
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	88bb      	ldrh	r3, [r7, #4]
 80033e8:	4413      	add	r3, r2
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	88f8      	ldrh	r0, [r7, #6]
 80033ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	4613      	mov	r3, r2
 80033f6:	4622      	mov	r2, r4
 80033f8:	f7ff fe59 	bl	80030ae <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
 80033fe:	3301      	adds	r3, #1
 8003400:	73fb      	strb	r3, [r7, #15]
 8003402:	7bfb      	ldrb	r3, [r7, #15]
 8003404:	b29b      	uxth	r3, r3
 8003406:	883a      	ldrh	r2, [r7, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d2e1      	bcs.n	80033d0 <SSD1306_DrawFilledRectangle+0x54>
 800340c:	e000      	b.n	8003410 <SSD1306_DrawFilledRectangle+0x94>
		return;
 800340e:	bf00      	nop
	}
}
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	bd90      	pop	{r4, r7, pc}

08003416 <SSD1306_DrawTriangle>:

void SSD1306_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, SSD1306_COLOR_t color) {
 8003416:	b590      	push	{r4, r7, lr}
 8003418:	b085      	sub	sp, #20
 800341a:	af02      	add	r7, sp, #8
 800341c:	4604      	mov	r4, r0
 800341e:	4608      	mov	r0, r1
 8003420:	4611      	mov	r1, r2
 8003422:	461a      	mov	r2, r3
 8003424:	4623      	mov	r3, r4
 8003426:	80fb      	strh	r3, [r7, #6]
 8003428:	4603      	mov	r3, r0
 800342a:	80bb      	strh	r3, [r7, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	807b      	strh	r3, [r7, #2]
 8003430:	4613      	mov	r3, r2
 8003432:	803b      	strh	r3, [r7, #0]
	/* Draw lines */
	SSD1306_DrawLine(x1, y1, x2, y2, color);
 8003434:	883c      	ldrh	r4, [r7, #0]
 8003436:	887a      	ldrh	r2, [r7, #2]
 8003438:	88b9      	ldrh	r1, [r7, #4]
 800343a:	88f8      	ldrh	r0, [r7, #6]
 800343c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	4623      	mov	r3, r4
 8003444:	f7ff fe33 	bl	80030ae <SSD1306_DrawLine>
	SSD1306_DrawLine(x2, y2, x3, y3, color);
 8003448:	8bbc      	ldrh	r4, [r7, #28]
 800344a:	8b3a      	ldrh	r2, [r7, #24]
 800344c:	8839      	ldrh	r1, [r7, #0]
 800344e:	8878      	ldrh	r0, [r7, #2]
 8003450:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	4623      	mov	r3, r4
 8003458:	f7ff fe29 	bl	80030ae <SSD1306_DrawLine>
	SSD1306_DrawLine(x3, y3, x1, y1, color);
 800345c:	88bc      	ldrh	r4, [r7, #4]
 800345e:	88fa      	ldrh	r2, [r7, #6]
 8003460:	8bb9      	ldrh	r1, [r7, #28]
 8003462:	8b38      	ldrh	r0, [r7, #24]
 8003464:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	4623      	mov	r3, r4
 800346c:	f7ff fe1f 	bl	80030ae <SSD1306_DrawLine>
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	bd90      	pop	{r4, r7, pc}

08003478 <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8003478:	b590      	push	{r4, r7, lr}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
 800347e:	4604      	mov	r4, r0
 8003480:	4608      	mov	r0, r1
 8003482:	4611      	mov	r1, r2
 8003484:	461a      	mov	r2, r3
 8003486:	4623      	mov	r3, r4
 8003488:	80fb      	strh	r3, [r7, #6]
 800348a:	4603      	mov	r3, r0
 800348c:	80bb      	strh	r3, [r7, #4]
 800348e:	460b      	mov	r3, r1
 8003490:	807b      	strh	r3, [r7, #2]
 8003492:	4613      	mov	r3, r2
 8003494:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8003496:	887b      	ldrh	r3, [r7, #2]
 8003498:	f1c3 0301 	rsb	r3, r3, #1
 800349c:	b29b      	uxth	r3, r3
 800349e:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80034a0:	2301      	movs	r3, #1
 80034a2:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80034a4:	887b      	ldrh	r3, [r7, #2]
 80034a6:	461a      	mov	r2, r3
 80034a8:	03d2      	lsls	r2, r2, #15
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80034b2:	2300      	movs	r3, #0
 80034b4:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80034b6:	887b      	ldrh	r3, [r7, #2]
 80034b8:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 80034ba:	88f8      	ldrh	r0, [r7, #6]
 80034bc:	88ba      	ldrh	r2, [r7, #4]
 80034be:	887b      	ldrh	r3, [r7, #2]
 80034c0:	4413      	add	r3, r2
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	787a      	ldrb	r2, [r7, #1]
 80034c6:	4619      	mov	r1, r3
 80034c8:	f7ff fcd6 	bl	8002e78 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 80034cc:	88f8      	ldrh	r0, [r7, #6]
 80034ce:	88ba      	ldrh	r2, [r7, #4]
 80034d0:	887b      	ldrh	r3, [r7, #2]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	787a      	ldrb	r2, [r7, #1]
 80034d8:	4619      	mov	r1, r3
 80034da:	f7ff fccd 	bl	8002e78 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 80034de:	88fa      	ldrh	r2, [r7, #6]
 80034e0:	887b      	ldrh	r3, [r7, #2]
 80034e2:	4413      	add	r3, r2
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	88b9      	ldrh	r1, [r7, #4]
 80034e8:	787a      	ldrb	r2, [r7, #1]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff fcc4 	bl	8002e78 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 80034f0:	88fa      	ldrh	r2, [r7, #6]
 80034f2:	887b      	ldrh	r3, [r7, #2]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	88b9      	ldrh	r1, [r7, #4]
 80034fa:	787a      	ldrb	r2, [r7, #1]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff fcbb 	bl	8002e78 <SSD1306_DrawPixel>

    while (x < y) {
 8003502:	e081      	b.n	8003608 <SSD1306_DrawCircle+0x190>
        if (f >= 0) {
 8003504:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003508:	2b00      	cmp	r3, #0
 800350a:	db0e      	blt.n	800352a <SSD1306_DrawCircle+0xb2>
            y--;
 800350c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003510:	b29b      	uxth	r3, r3
 8003512:	3b01      	subs	r3, #1
 8003514:	b29b      	uxth	r3, r3
 8003516:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8003518:	8a7b      	ldrh	r3, [r7, #18]
 800351a:	3302      	adds	r3, #2
 800351c:	b29b      	uxth	r3, r3
 800351e:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8003520:	8afa      	ldrh	r2, [r7, #22]
 8003522:	8a7b      	ldrh	r3, [r7, #18]
 8003524:	4413      	add	r3, r2
 8003526:	b29b      	uxth	r3, r3
 8003528:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800352a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800352e:	b29b      	uxth	r3, r3
 8003530:	3301      	adds	r3, #1
 8003532:	b29b      	uxth	r3, r3
 8003534:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8003536:	8abb      	ldrh	r3, [r7, #20]
 8003538:	3302      	adds	r3, #2
 800353a:	b29b      	uxth	r3, r3
 800353c:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 800353e:	8afa      	ldrh	r2, [r7, #22]
 8003540:	8abb      	ldrh	r3, [r7, #20]
 8003542:	4413      	add	r3, r2
 8003544:	b29b      	uxth	r3, r3
 8003546:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 8003548:	88fa      	ldrh	r2, [r7, #6]
 800354a:	8a3b      	ldrh	r3, [r7, #16]
 800354c:	4413      	add	r3, r2
 800354e:	b298      	uxth	r0, r3
 8003550:	88ba      	ldrh	r2, [r7, #4]
 8003552:	89fb      	ldrh	r3, [r7, #14]
 8003554:	4413      	add	r3, r2
 8003556:	b29b      	uxth	r3, r3
 8003558:	787a      	ldrb	r2, [r7, #1]
 800355a:	4619      	mov	r1, r3
 800355c:	f7ff fc8c 	bl	8002e78 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 8003560:	88fa      	ldrh	r2, [r7, #6]
 8003562:	8a3b      	ldrh	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	b298      	uxth	r0, r3
 8003568:	88ba      	ldrh	r2, [r7, #4]
 800356a:	89fb      	ldrh	r3, [r7, #14]
 800356c:	4413      	add	r3, r2
 800356e:	b29b      	uxth	r3, r3
 8003570:	787a      	ldrb	r2, [r7, #1]
 8003572:	4619      	mov	r1, r3
 8003574:	f7ff fc80 	bl	8002e78 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 8003578:	88fa      	ldrh	r2, [r7, #6]
 800357a:	8a3b      	ldrh	r3, [r7, #16]
 800357c:	4413      	add	r3, r2
 800357e:	b298      	uxth	r0, r3
 8003580:	88ba      	ldrh	r2, [r7, #4]
 8003582:	89fb      	ldrh	r3, [r7, #14]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	b29b      	uxth	r3, r3
 8003588:	787a      	ldrb	r2, [r7, #1]
 800358a:	4619      	mov	r1, r3
 800358c:	f7ff fc74 	bl	8002e78 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 8003590:	88fa      	ldrh	r2, [r7, #6]
 8003592:	8a3b      	ldrh	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	b298      	uxth	r0, r3
 8003598:	88ba      	ldrh	r2, [r7, #4]
 800359a:	89fb      	ldrh	r3, [r7, #14]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	b29b      	uxth	r3, r3
 80035a0:	787a      	ldrb	r2, [r7, #1]
 80035a2:	4619      	mov	r1, r3
 80035a4:	f7ff fc68 	bl	8002e78 <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 80035a8:	88fa      	ldrh	r2, [r7, #6]
 80035aa:	89fb      	ldrh	r3, [r7, #14]
 80035ac:	4413      	add	r3, r2
 80035ae:	b298      	uxth	r0, r3
 80035b0:	88ba      	ldrh	r2, [r7, #4]
 80035b2:	8a3b      	ldrh	r3, [r7, #16]
 80035b4:	4413      	add	r3, r2
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	787a      	ldrb	r2, [r7, #1]
 80035ba:	4619      	mov	r1, r3
 80035bc:	f7ff fc5c 	bl	8002e78 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 80035c0:	88fa      	ldrh	r2, [r7, #6]
 80035c2:	89fb      	ldrh	r3, [r7, #14]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	b298      	uxth	r0, r3
 80035c8:	88ba      	ldrh	r2, [r7, #4]
 80035ca:	8a3b      	ldrh	r3, [r7, #16]
 80035cc:	4413      	add	r3, r2
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	787a      	ldrb	r2, [r7, #1]
 80035d2:	4619      	mov	r1, r3
 80035d4:	f7ff fc50 	bl	8002e78 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 80035d8:	88fa      	ldrh	r2, [r7, #6]
 80035da:	89fb      	ldrh	r3, [r7, #14]
 80035dc:	4413      	add	r3, r2
 80035de:	b298      	uxth	r0, r3
 80035e0:	88ba      	ldrh	r2, [r7, #4]
 80035e2:	8a3b      	ldrh	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	787a      	ldrb	r2, [r7, #1]
 80035ea:	4619      	mov	r1, r3
 80035ec:	f7ff fc44 	bl	8002e78 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 80035f0:	88fa      	ldrh	r2, [r7, #6]
 80035f2:	89fb      	ldrh	r3, [r7, #14]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	b298      	uxth	r0, r3
 80035f8:	88ba      	ldrh	r2, [r7, #4]
 80035fa:	8a3b      	ldrh	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	b29b      	uxth	r3, r3
 8003600:	787a      	ldrb	r2, [r7, #1]
 8003602:	4619      	mov	r1, r3
 8003604:	f7ff fc38 	bl	8002e78 <SSD1306_DrawPixel>
    while (x < y) {
 8003608:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800360c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003610:	429a      	cmp	r2, r3
 8003612:	f6ff af77 	blt.w	8003504 <SSD1306_DrawCircle+0x8c>
    }
}
 8003616:	bf00      	nop
 8003618:	bf00      	nop
 800361a:	371c      	adds	r7, #28
 800361c:	46bd      	mov	sp, r7
 800361e:	bd90      	pop	{r4, r7, pc}

08003620 <SSD1306_DrawFilledCircle>:

void SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8003620:	b590      	push	{r4, r7, lr}
 8003622:	b089      	sub	sp, #36	; 0x24
 8003624:	af02      	add	r7, sp, #8
 8003626:	4604      	mov	r4, r0
 8003628:	4608      	mov	r0, r1
 800362a:	4611      	mov	r1, r2
 800362c:	461a      	mov	r2, r3
 800362e:	4623      	mov	r3, r4
 8003630:	80fb      	strh	r3, [r7, #6]
 8003632:	4603      	mov	r3, r0
 8003634:	80bb      	strh	r3, [r7, #4]
 8003636:	460b      	mov	r3, r1
 8003638:	807b      	strh	r3, [r7, #2]
 800363a:	4613      	mov	r3, r2
 800363c:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 800363e:	887b      	ldrh	r3, [r7, #2]
 8003640:	f1c3 0301 	rsb	r3, r3, #1
 8003644:	b29b      	uxth	r3, r3
 8003646:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8003648:	2301      	movs	r3, #1
 800364a:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 800364c:	887b      	ldrh	r3, [r7, #2]
 800364e:	461a      	mov	r2, r3
 8003650:	03d2      	lsls	r2, r2, #15
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	b29b      	uxth	r3, r3
 8003658:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800365a:	2300      	movs	r3, #0
 800365c:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800365e:	887b      	ldrh	r3, [r7, #2]
 8003660:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8003662:	88f8      	ldrh	r0, [r7, #6]
 8003664:	88ba      	ldrh	r2, [r7, #4]
 8003666:	887b      	ldrh	r3, [r7, #2]
 8003668:	4413      	add	r3, r2
 800366a:	b29b      	uxth	r3, r3
 800366c:	787a      	ldrb	r2, [r7, #1]
 800366e:	4619      	mov	r1, r3
 8003670:	f7ff fc02 	bl	8002e78 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8003674:	88f8      	ldrh	r0, [r7, #6]
 8003676:	88ba      	ldrh	r2, [r7, #4]
 8003678:	887b      	ldrh	r3, [r7, #2]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	b29b      	uxth	r3, r3
 800367e:	787a      	ldrb	r2, [r7, #1]
 8003680:	4619      	mov	r1, r3
 8003682:	f7ff fbf9 	bl	8002e78 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8003686:	88fa      	ldrh	r2, [r7, #6]
 8003688:	887b      	ldrh	r3, [r7, #2]
 800368a:	4413      	add	r3, r2
 800368c:	b29b      	uxth	r3, r3
 800368e:	88b9      	ldrh	r1, [r7, #4]
 8003690:	787a      	ldrb	r2, [r7, #1]
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff fbf0 	bl	8002e78 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8003698:	88fa      	ldrh	r2, [r7, #6]
 800369a:	887b      	ldrh	r3, [r7, #2]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	b29b      	uxth	r3, r3
 80036a0:	88b9      	ldrh	r1, [r7, #4]
 80036a2:	787a      	ldrb	r2, [r7, #1]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff fbe7 	bl	8002e78 <SSD1306_DrawPixel>
    SSD1306_DrawLine(x0 - r, y0, x0 + r, y0, c);
 80036aa:	88fa      	ldrh	r2, [r7, #6]
 80036ac:	887b      	ldrh	r3, [r7, #2]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	b298      	uxth	r0, r3
 80036b2:	88b9      	ldrh	r1, [r7, #4]
 80036b4:	88fa      	ldrh	r2, [r7, #6]
 80036b6:	887b      	ldrh	r3, [r7, #2]
 80036b8:	4413      	add	r3, r2
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	88bc      	ldrh	r4, [r7, #4]
 80036be:	787b      	ldrb	r3, [r7, #1]
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	4623      	mov	r3, r4
 80036c4:	f7ff fcf3 	bl	80030ae <SSD1306_DrawLine>

    while (x < y) {
 80036c8:	e079      	b.n	80037be <SSD1306_DrawFilledCircle+0x19e>
        if (f >= 0) {
 80036ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	db0e      	blt.n	80036f0 <SSD1306_DrawFilledCircle+0xd0>
            y--;
 80036d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29b      	uxth	r3, r3
 80036dc:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80036de:	8a7b      	ldrh	r3, [r7, #18]
 80036e0:	3302      	adds	r3, #2
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80036e6:	8afa      	ldrh	r2, [r7, #22]
 80036e8:	8a7b      	ldrh	r3, [r7, #18]
 80036ea:	4413      	add	r3, r2
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80036f0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	3301      	adds	r3, #1
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80036fc:	8abb      	ldrh	r3, [r7, #20]
 80036fe:	3302      	adds	r3, #2
 8003700:	b29b      	uxth	r3, r3
 8003702:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8003704:	8afa      	ldrh	r2, [r7, #22]
 8003706:	8abb      	ldrh	r3, [r7, #20]
 8003708:	4413      	add	r3, r2
 800370a:	b29b      	uxth	r3, r3
 800370c:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 800370e:	88fa      	ldrh	r2, [r7, #6]
 8003710:	8a3b      	ldrh	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	b298      	uxth	r0, r3
 8003716:	88ba      	ldrh	r2, [r7, #4]
 8003718:	89fb      	ldrh	r3, [r7, #14]
 800371a:	4413      	add	r3, r2
 800371c:	b299      	uxth	r1, r3
 800371e:	88fa      	ldrh	r2, [r7, #6]
 8003720:	8a3b      	ldrh	r3, [r7, #16]
 8003722:	4413      	add	r3, r2
 8003724:	b29c      	uxth	r4, r3
 8003726:	88ba      	ldrh	r2, [r7, #4]
 8003728:	89fb      	ldrh	r3, [r7, #14]
 800372a:	4413      	add	r3, r2
 800372c:	b29a      	uxth	r2, r3
 800372e:	787b      	ldrb	r3, [r7, #1]
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	4613      	mov	r3, r2
 8003734:	4622      	mov	r2, r4
 8003736:	f7ff fcba 	bl	80030ae <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 800373a:	88fa      	ldrh	r2, [r7, #6]
 800373c:	8a3b      	ldrh	r3, [r7, #16]
 800373e:	4413      	add	r3, r2
 8003740:	b298      	uxth	r0, r3
 8003742:	88ba      	ldrh	r2, [r7, #4]
 8003744:	89fb      	ldrh	r3, [r7, #14]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	b299      	uxth	r1, r3
 800374a:	88fa      	ldrh	r2, [r7, #6]
 800374c:	8a3b      	ldrh	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	b29c      	uxth	r4, r3
 8003752:	88ba      	ldrh	r2, [r7, #4]
 8003754:	89fb      	ldrh	r3, [r7, #14]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	b29a      	uxth	r2, r3
 800375a:	787b      	ldrb	r3, [r7, #1]
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	4613      	mov	r3, r2
 8003760:	4622      	mov	r2, r4
 8003762:	f7ff fca4 	bl	80030ae <SSD1306_DrawLine>

        SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 8003766:	88fa      	ldrh	r2, [r7, #6]
 8003768:	89fb      	ldrh	r3, [r7, #14]
 800376a:	4413      	add	r3, r2
 800376c:	b298      	uxth	r0, r3
 800376e:	88ba      	ldrh	r2, [r7, #4]
 8003770:	8a3b      	ldrh	r3, [r7, #16]
 8003772:	4413      	add	r3, r2
 8003774:	b299      	uxth	r1, r3
 8003776:	88fa      	ldrh	r2, [r7, #6]
 8003778:	89fb      	ldrh	r3, [r7, #14]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	b29c      	uxth	r4, r3
 800377e:	88ba      	ldrh	r2, [r7, #4]
 8003780:	8a3b      	ldrh	r3, [r7, #16]
 8003782:	4413      	add	r3, r2
 8003784:	b29a      	uxth	r2, r3
 8003786:	787b      	ldrb	r3, [r7, #1]
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	4613      	mov	r3, r2
 800378c:	4622      	mov	r2, r4
 800378e:	f7ff fc8e 	bl	80030ae <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 8003792:	88fa      	ldrh	r2, [r7, #6]
 8003794:	89fb      	ldrh	r3, [r7, #14]
 8003796:	4413      	add	r3, r2
 8003798:	b298      	uxth	r0, r3
 800379a:	88ba      	ldrh	r2, [r7, #4]
 800379c:	8a3b      	ldrh	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	b299      	uxth	r1, r3
 80037a2:	88fa      	ldrh	r2, [r7, #6]
 80037a4:	89fb      	ldrh	r3, [r7, #14]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	b29c      	uxth	r4, r3
 80037aa:	88ba      	ldrh	r2, [r7, #4]
 80037ac:	8a3b      	ldrh	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	787b      	ldrb	r3, [r7, #1]
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	4613      	mov	r3, r2
 80037b8:	4622      	mov	r2, r4
 80037ba:	f7ff fc78 	bl	80030ae <SSD1306_DrawLine>
    while (x < y) {
 80037be:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80037c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	f6ff af7f 	blt.w	80036ca <SSD1306_DrawFilledCircle+0xaa>
    }
}
 80037cc:	bf00      	nop
 80037ce:	bf00      	nop
 80037d0:	371c      	adds	r7, #28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd90      	pop	{r4, r7, pc}

080037d6 <SSD1306_Clear>:
 


void SSD1306_Clear (void)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80037da:	2000      	movs	r0, #0
 80037dc:	f7ff fb34 	bl	8002e48 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80037e0:	f7ff fb04 	bl	8002dec <SSD1306_UpdateScreen>
}
 80037e4:	bf00      	nop
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80037ee:	4b08      	ldr	r3, [pc, #32]	; (8003810 <ssd1306_I2C_Init+0x28>)
 80037f0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80037f2:	e002      	b.n	80037fa <ssd1306_I2C_Init+0x12>
		p--;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3b01      	subs	r3, #1
 80037f8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1f9      	bne.n	80037f4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8003800:	bf00      	nop
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	0003d090 	.word	0x0003d090

08003814 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003814:	b590      	push	{r4, r7, lr}
 8003816:	b0c7      	sub	sp, #284	; 0x11c
 8003818:	af02      	add	r7, sp, #8
 800381a:	4604      	mov	r4, r0
 800381c:	4608      	mov	r0, r1
 800381e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8003822:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8003826:	600a      	str	r2, [r1, #0]
 8003828:	4619      	mov	r1, r3
 800382a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800382e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8003832:	4622      	mov	r2, r4
 8003834:	701a      	strb	r2, [r3, #0]
 8003836:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800383a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800383e:	4602      	mov	r2, r0
 8003840:	701a      	strb	r2, [r3, #0]
 8003842:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003846:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800384a:	460a      	mov	r2, r1
 800384c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800384e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003852:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003856:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800385a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800385e:	7812      	ldrb	r2, [r2, #0]
 8003860:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8003862:	2300      	movs	r3, #0
 8003864:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003868:	e015      	b.n	8003896 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800386a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800386e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003872:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	441a      	add	r2, r3
 800387a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800387e:	3301      	adds	r3, #1
 8003880:	7811      	ldrb	r1, [r2, #0]
 8003882:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003886:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800388a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800388c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003890:	3301      	adds	r3, #1
 8003892:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003896:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800389a:	b29b      	uxth	r3, r3
 800389c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80038a0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80038a4:	8812      	ldrh	r2, [r2, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d8df      	bhi.n	800386a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80038aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80038ae:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	b299      	uxth	r1, r3
 80038b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80038ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	3301      	adds	r3, #1
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	f107 020c 	add.w	r2, r7, #12
 80038c8:	200a      	movs	r0, #10
 80038ca:	9000      	str	r0, [sp, #0]
 80038cc:	4803      	ldr	r0, [pc, #12]	; (80038dc <ssd1306_I2C_WriteMulti+0xc8>)
 80038ce:	f7fd f9c1 	bl	8000c54 <HAL_I2C_Master_Transmit>
}
 80038d2:	bf00      	nop
 80038d4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd90      	pop	{r4, r7, pc}
 80038dc:	20000034 	.word	0x20000034

080038e0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af02      	add	r7, sp, #8
 80038e6:	4603      	mov	r3, r0
 80038e8:	71fb      	strb	r3, [r7, #7]
 80038ea:	460b      	mov	r3, r1
 80038ec:	71bb      	strb	r3, [r7, #6]
 80038ee:	4613      	mov	r3, r2
 80038f0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80038f2:	79bb      	ldrb	r3, [r7, #6]
 80038f4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80038f6:	797b      	ldrb	r3, [r7, #5]
 80038f8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80038fa:	79fb      	ldrb	r3, [r7, #7]
 80038fc:	b299      	uxth	r1, r3
 80038fe:	f107 020c 	add.w	r2, r7, #12
 8003902:	230a      	movs	r3, #10
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	2302      	movs	r3, #2
 8003908:	4803      	ldr	r0, [pc, #12]	; (8003918 <ssd1306_I2C_Write+0x38>)
 800390a:	f7fd f9a3 	bl	8000c54 <HAL_I2C_Master_Transmit>
}
 800390e:	bf00      	nop
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20000034 	.word	0x20000034

0800391c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003922:	4b0f      	ldr	r3, [pc, #60]	; (8003960 <HAL_MspInit+0x44>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	4a0e      	ldr	r2, [pc, #56]	; (8003960 <HAL_MspInit+0x44>)
 8003928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800392c:	6413      	str	r3, [r2, #64]	; 0x40
 800392e:	4b0c      	ldr	r3, [pc, #48]	; (8003960 <HAL_MspInit+0x44>)
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003936:	607b      	str	r3, [r7, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800393a:	4b09      	ldr	r3, [pc, #36]	; (8003960 <HAL_MspInit+0x44>)
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	4a08      	ldr	r2, [pc, #32]	; (8003960 <HAL_MspInit+0x44>)
 8003940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003944:	6453      	str	r3, [r2, #68]	; 0x44
 8003946:	4b06      	ldr	r3, [pc, #24]	; (8003960 <HAL_MspInit+0x44>)
 8003948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	40023800 	.word	0x40023800

08003964 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b0aa      	sub	sp, #168	; 0xa8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800396c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	605a      	str	r2, [r3, #4]
 8003976:	609a      	str	r2, [r3, #8]
 8003978:	60da      	str	r2, [r3, #12]
 800397a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800397c:	f107 0310 	add.w	r3, r7, #16
 8003980:	2284      	movs	r2, #132	; 0x84
 8003982:	2100      	movs	r1, #0
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fb1f 	bl	8003fc8 <memset>
  if(hi2c->Instance==I2C1)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a22      	ldr	r2, [pc, #136]	; (8003a18 <HAL_I2C_MspInit+0xb4>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d13c      	bne.n	8003a0e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003994:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003998:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800399a:	2300      	movs	r3, #0
 800399c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800399e:	f107 0310 	add.w	r3, r7, #16
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fe fa82 	bl	8001eac <HAL_RCCEx_PeriphCLKConfig>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80039ae:	f7fe ffe1 	bl	8002974 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039b2:	4b1a      	ldr	r3, [pc, #104]	; (8003a1c <HAL_I2C_MspInit+0xb8>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	4a19      	ldr	r2, [pc, #100]	; (8003a1c <HAL_I2C_MspInit+0xb8>)
 80039b8:	f043 0302 	orr.w	r3, r3, #2
 80039bc:	6313      	str	r3, [r2, #48]	; 0x30
 80039be:	4b17      	ldr	r3, [pc, #92]	; (8003a1c <HAL_I2C_MspInit+0xb8>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80039ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80039ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039d2:	2312      	movs	r3, #18
 80039d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d8:	2300      	movs	r3, #0
 80039da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039de:	2303      	movs	r3, #3
 80039e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80039e4:	2304      	movs	r3, #4
 80039e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80039ee:	4619      	mov	r1, r3
 80039f0:	480b      	ldr	r0, [pc, #44]	; (8003a20 <HAL_I2C_MspInit+0xbc>)
 80039f2:	f7fc fef3 	bl	80007dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80039f6:	4b09      	ldr	r3, [pc, #36]	; (8003a1c <HAL_I2C_MspInit+0xb8>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	4a08      	ldr	r2, [pc, #32]	; (8003a1c <HAL_I2C_MspInit+0xb8>)
 80039fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a00:	6413      	str	r3, [r2, #64]	; 0x40
 8003a02:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <HAL_I2C_MspInit+0xb8>)
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a0a:	60bb      	str	r3, [r7, #8]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003a0e:	bf00      	nop
 8003a10:	37a8      	adds	r7, #168	; 0xa8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40005400 	.word	0x40005400
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	40020400 	.word	0x40020400

08003a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a28:	e7fe      	b.n	8003a28 <NMI_Handler+0x4>

08003a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a2e:	e7fe      	b.n	8003a2e <HardFault_Handler+0x4>

08003a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a34:	e7fe      	b.n	8003a34 <MemManage_Handler+0x4>

08003a36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a36:	b480      	push	{r7}
 8003a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a3a:	e7fe      	b.n	8003a3a <BusFault_Handler+0x4>

08003a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a40:	e7fe      	b.n	8003a40 <UsageFault_Handler+0x4>

08003a42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a42:	b480      	push	{r7}
 8003a44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a46:	bf00      	nop
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a54:	bf00      	nop
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a62:	bf00      	nop
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a70:	f7fc fd8a 	bl	8000588 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a74:	bf00      	nop
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a7c:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <SystemInit+0x20>)
 8003a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a82:	4a05      	ldr	r2, [pc, #20]	; (8003a98 <SystemInit+0x20>)
 8003a84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a8c:	bf00      	nop
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	e000ed00 	.word	0xe000ed00

08003a9c <TestLines>:
#include "ssd1306.h"

#define min(a, b) (((a) < (b)) ? (a) : (b))

void TestLines(uint8_t color)
{
 8003a9c:	b590      	push	{r4, r7, lr}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af02      	add	r7, sp, #8
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	71fb      	strb	r3, [r7, #7]
    uint8_t x1, y1, x2, y2;

    SSD1306_Clear ();
 8003aa6:	f7ff fe96 	bl	80037d6 <SSD1306_Clear>

    x1 = y1 = 0;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	737b      	strb	r3, [r7, #13]
 8003aae:	7b7b      	ldrb	r3, [r7, #13]
 8003ab0:	733b      	strb	r3, [r7, #12]
    y2    = SSD1306_HEIGHT - 1;
 8003ab2:	233f      	movs	r3, #63	; 0x3f
 8003ab4:	73bb      	strb	r3, [r7, #14]
    for (x2 = 0; x2 < SSD1306_WIDTH; x2 += 6)
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	73fb      	strb	r3, [r7, #15]
 8003aba:	e014      	b.n	8003ae6 <TestLines+0x4a>
    	{
    		SSD1306_DrawLine(x1, y1, x2, y2, color);
 8003abc:	7b3b      	ldrb	r3, [r7, #12]
 8003abe:	b298      	uxth	r0, r3
 8003ac0:	7b7b      	ldrb	r3, [r7, #13]
 8003ac2:	b299      	uxth	r1, r3
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	7bbb      	ldrb	r3, [r7, #14]
 8003aca:	b29c      	uxth	r4, r3
 8003acc:	79fb      	ldrb	r3, [r7, #7]
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	4623      	mov	r3, r4
 8003ad2:	f7ff faec 	bl	80030ae <SSD1306_DrawLine>
    		HAL_Delay(1);
 8003ad6:	2001      	movs	r0, #1
 8003ad8:	f7fc fd76 	bl	80005c8 <HAL_Delay>
    		SSD1306_UpdateScreen();
 8003adc:	f7ff f986 	bl	8002dec <SSD1306_UpdateScreen>
    for (x2 = 0; x2 < SSD1306_WIDTH; x2 += 6)
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
 8003ae2:	3306      	adds	r3, #6
 8003ae4:	73fb      	strb	r3, [r7, #15]
 8003ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	dae6      	bge.n	8003abc <TestLines+0x20>
    	}
    x2    = SSD1306_WIDTH - 1;
 8003aee:	237f      	movs	r3, #127	; 0x7f
 8003af0:	73fb      	strb	r3, [r7, #15]
    for (y2 = 0; y2 < SSD1306_HEIGHT; y2 += 6)
 8003af2:	2300      	movs	r3, #0
 8003af4:	73bb      	strb	r3, [r7, #14]
 8003af6:	e014      	b.n	8003b22 <TestLines+0x86>
    	{
    		SSD1306_DrawLine(x1, y1, x2, y2, color);
 8003af8:	7b3b      	ldrb	r3, [r7, #12]
 8003afa:	b298      	uxth	r0, r3
 8003afc:	7b7b      	ldrb	r3, [r7, #13]
 8003afe:	b299      	uxth	r1, r3
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	7bbb      	ldrb	r3, [r7, #14]
 8003b06:	b29c      	uxth	r4, r3
 8003b08:	79fb      	ldrb	r3, [r7, #7]
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	4623      	mov	r3, r4
 8003b0e:	f7ff face 	bl	80030ae <SSD1306_DrawLine>
    		HAL_Delay(1);
 8003b12:	2001      	movs	r0, #1
 8003b14:	f7fc fd58 	bl	80005c8 <HAL_Delay>
    		SSD1306_UpdateScreen();
 8003b18:	f7ff f968 	bl	8002dec <SSD1306_UpdateScreen>
    for (y2 = 0; y2 < SSD1306_HEIGHT; y2 += 6)
 8003b1c:	7bbb      	ldrb	r3, [r7, #14]
 8003b1e:	3306      	adds	r3, #6
 8003b20:	73bb      	strb	r3, [r7, #14]
 8003b22:	7bbb      	ldrb	r3, [r7, #14]
 8003b24:	2b3f      	cmp	r3, #63	; 0x3f
 8003b26:	d9e7      	bls.n	8003af8 <TestLines+0x5c>
    	}

    HAL_Delay(10);
 8003b28:	200a      	movs	r0, #10
 8003b2a:	f7fc fd4d 	bl	80005c8 <HAL_Delay>


    SSD1306_Clear ();
 8003b2e:	f7ff fe52 	bl	80037d6 <SSD1306_Clear>

    x1    = SSD1306_WIDTH - 1;
 8003b32:	237f      	movs	r3, #127	; 0x7f
 8003b34:	733b      	strb	r3, [r7, #12]
    y1    = 0;
 8003b36:	2300      	movs	r3, #0
 8003b38:	737b      	strb	r3, [r7, #13]
    y2    = SSD1306_HEIGHT - 1;
 8003b3a:	233f      	movs	r3, #63	; 0x3f
 8003b3c:	73bb      	strb	r3, [r7, #14]
    for (x2 = 0; x2 < SSD1306_WIDTH; x2 += 6)
 8003b3e:	2300      	movs	r3, #0
 8003b40:	73fb      	strb	r3, [r7, #15]
 8003b42:	e014      	b.n	8003b6e <TestLines+0xd2>
    	{
    		SSD1306_DrawLine(x1, y1, x2, y2, color);
 8003b44:	7b3b      	ldrb	r3, [r7, #12]
 8003b46:	b298      	uxth	r0, r3
 8003b48:	7b7b      	ldrb	r3, [r7, #13]
 8003b4a:	b299      	uxth	r1, r3
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	7bbb      	ldrb	r3, [r7, #14]
 8003b52:	b29c      	uxth	r4, r3
 8003b54:	79fb      	ldrb	r3, [r7, #7]
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	4623      	mov	r3, r4
 8003b5a:	f7ff faa8 	bl	80030ae <SSD1306_DrawLine>
    		SSD1306_UpdateScreen();
 8003b5e:	f7ff f945 	bl	8002dec <SSD1306_UpdateScreen>
    		HAL_Delay(1);
 8003b62:	2001      	movs	r0, #1
 8003b64:	f7fc fd30 	bl	80005c8 <HAL_Delay>
    for (x2 = 0; x2 < SSD1306_WIDTH; x2 += 6)
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
 8003b6a:	3306      	adds	r3, #6
 8003b6c:	73fb      	strb	r3, [r7, #15]
 8003b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	dae6      	bge.n	8003b44 <TestLines+0xa8>
    	}
    x2    = 0;
 8003b76:	2300      	movs	r3, #0
 8003b78:	73fb      	strb	r3, [r7, #15]
    for (y2 = 0; y2 < SSD1306_HEIGHT; y2 += 6)
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	73bb      	strb	r3, [r7, #14]
 8003b7e:	e014      	b.n	8003baa <TestLines+0x10e>
    	{
    		SSD1306_DrawLine(x1, y1, x2, y2, color);
 8003b80:	7b3b      	ldrb	r3, [r7, #12]
 8003b82:	b298      	uxth	r0, r3
 8003b84:	7b7b      	ldrb	r3, [r7, #13]
 8003b86:	b299      	uxth	r1, r3
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	7bbb      	ldrb	r3, [r7, #14]
 8003b8e:	b29c      	uxth	r4, r3
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	4623      	mov	r3, r4
 8003b96:	f7ff fa8a 	bl	80030ae <SSD1306_DrawLine>
    		SSD1306_UpdateScreen();
 8003b9a:	f7ff f927 	bl	8002dec <SSD1306_UpdateScreen>
    		HAL_Delay(1);
 8003b9e:	2001      	movs	r0, #1
 8003ba0:	f7fc fd12 	bl	80005c8 <HAL_Delay>
    for (y2 = 0; y2 < SSD1306_HEIGHT; y2 += 6)
 8003ba4:	7bbb      	ldrb	r3, [r7, #14]
 8003ba6:	3306      	adds	r3, #6
 8003ba8:	73bb      	strb	r3, [r7, #14]
 8003baa:	7bbb      	ldrb	r3, [r7, #14]
 8003bac:	2b3f      	cmp	r3, #63	; 0x3f
 8003bae:	d9e7      	bls.n	8003b80 <TestLines+0xe4>
    	}

    HAL_Delay(10);
 8003bb0:	200a      	movs	r0, #10
 8003bb2:	f7fc fd09 	bl	80005c8 <HAL_Delay>


    SSD1306_Clear ();
 8003bb6:	f7ff fe0e 	bl	80037d6 <SSD1306_Clear>

    x1    = 0;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	733b      	strb	r3, [r7, #12]
    y1    = SSD1306_HEIGHT - 1;
 8003bbe:	233f      	movs	r3, #63	; 0x3f
 8003bc0:	737b      	strb	r3, [r7, #13]
    y2    = 0;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	73bb      	strb	r3, [r7, #14]
    for (x2 = 0; x2 < SSD1306_WIDTH; x2 += 6)
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	73fb      	strb	r3, [r7, #15]
 8003bca:	e014      	b.n	8003bf6 <TestLines+0x15a>
    {
    	SSD1306_DrawLine(x1, y1, x2, y2, color);
 8003bcc:	7b3b      	ldrb	r3, [r7, #12]
 8003bce:	b298      	uxth	r0, r3
 8003bd0:	7b7b      	ldrb	r3, [r7, #13]
 8003bd2:	b299      	uxth	r1, r3
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	7bbb      	ldrb	r3, [r7, #14]
 8003bda:	b29c      	uxth	r4, r3
 8003bdc:	79fb      	ldrb	r3, [r7, #7]
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	4623      	mov	r3, r4
 8003be2:	f7ff fa64 	bl	80030ae <SSD1306_DrawLine>
    	HAL_Delay(1);
 8003be6:	2001      	movs	r0, #1
 8003be8:	f7fc fcee 	bl	80005c8 <HAL_Delay>
    	SSD1306_UpdateScreen();
 8003bec:	f7ff f8fe 	bl	8002dec <SSD1306_UpdateScreen>
    for (x2 = 0; x2 < SSD1306_WIDTH; x2 += 6)
 8003bf0:	7bfb      	ldrb	r3, [r7, #15]
 8003bf2:	3306      	adds	r3, #6
 8003bf4:	73fb      	strb	r3, [r7, #15]
 8003bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	dae6      	bge.n	8003bcc <TestLines+0x130>
    }
    x2    = SSD1306_WIDTH - 1;
 8003bfe:	237f      	movs	r3, #127	; 0x7f
 8003c00:	73fb      	strb	r3, [r7, #15]
    for (y2 = 0; y2 < SSD1306_HEIGHT; y2 += 6)
 8003c02:	2300      	movs	r3, #0
 8003c04:	73bb      	strb	r3, [r7, #14]
 8003c06:	e014      	b.n	8003c32 <TestLines+0x196>
    	{
    		SSD1306_DrawLine(x1, y1, x2, y2, color);
 8003c08:	7b3b      	ldrb	r3, [r7, #12]
 8003c0a:	b298      	uxth	r0, r3
 8003c0c:	7b7b      	ldrb	r3, [r7, #13]
 8003c0e:	b299      	uxth	r1, r3
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	7bbb      	ldrb	r3, [r7, #14]
 8003c16:	b29c      	uxth	r4, r3
 8003c18:	79fb      	ldrb	r3, [r7, #7]
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	4623      	mov	r3, r4
 8003c1e:	f7ff fa46 	bl	80030ae <SSD1306_DrawLine>
    		HAL_Delay(1);
 8003c22:	2001      	movs	r0, #1
 8003c24:	f7fc fcd0 	bl	80005c8 <HAL_Delay>
    		SSD1306_UpdateScreen();
 8003c28:	f7ff f8e0 	bl	8002dec <SSD1306_UpdateScreen>
    for (y2 = 0; y2 < SSD1306_HEIGHT; y2 += 6)
 8003c2c:	7bbb      	ldrb	r3, [r7, #14]
 8003c2e:	3306      	adds	r3, #6
 8003c30:	73bb      	strb	r3, [r7, #14]
 8003c32:	7bbb      	ldrb	r3, [r7, #14]
 8003c34:	2b3f      	cmp	r3, #63	; 0x3f
 8003c36:	d9e7      	bls.n	8003c08 <TestLines+0x16c>
    	}

    HAL_Delay(10);
 8003c38:	200a      	movs	r0, #10
 8003c3a:	f7fc fcc5 	bl	80005c8 <HAL_Delay>


    SSD1306_Clear ();
 8003c3e:	f7ff fdca 	bl	80037d6 <SSD1306_Clear>

    x1    = SSD1306_WIDTH - 1;
 8003c42:	237f      	movs	r3, #127	; 0x7f
 8003c44:	733b      	strb	r3, [r7, #12]
    y1    = SSD1306_HEIGHT - 1;
 8003c46:	233f      	movs	r3, #63	; 0x3f
 8003c48:	737b      	strb	r3, [r7, #13]
    y2    = 0;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	73bb      	strb	r3, [r7, #14]
    for (x2 = 0; x2 < SSD1306_WIDTH; x2 += 6)
 8003c4e:	2300      	movs	r3, #0
 8003c50:	73fb      	strb	r3, [r7, #15]
 8003c52:	e014      	b.n	8003c7e <TestLines+0x1e2>
    	{
    		SSD1306_DrawLine(x1, y1, x2, y2, color);
 8003c54:	7b3b      	ldrb	r3, [r7, #12]
 8003c56:	b298      	uxth	r0, r3
 8003c58:	7b7b      	ldrb	r3, [r7, #13]
 8003c5a:	b299      	uxth	r1, r3
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	7bbb      	ldrb	r3, [r7, #14]
 8003c62:	b29c      	uxth	r4, r3
 8003c64:	79fb      	ldrb	r3, [r7, #7]
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	4623      	mov	r3, r4
 8003c6a:	f7ff fa20 	bl	80030ae <SSD1306_DrawLine>
    		HAL_Delay(1);
 8003c6e:	2001      	movs	r0, #1
 8003c70:	f7fc fcaa 	bl	80005c8 <HAL_Delay>
    		SSD1306_UpdateScreen();
 8003c74:	f7ff f8ba 	bl	8002dec <SSD1306_UpdateScreen>
    for (x2 = 0; x2 < SSD1306_WIDTH; x2 += 6)
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
 8003c7a:	3306      	adds	r3, #6
 8003c7c:	73fb      	strb	r3, [r7, #15]
 8003c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	dae6      	bge.n	8003c54 <TestLines+0x1b8>
    	}
    x2    = 0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	73fb      	strb	r3, [r7, #15]
    for (y2 = 0; y2 < SSD1306_HEIGHT; y2 += 6)
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	73bb      	strb	r3, [r7, #14]
 8003c8e:	e014      	b.n	8003cba <TestLines+0x21e>
    	{
    		SSD1306_DrawLine(x1, y1, x2, y2, color);
 8003c90:	7b3b      	ldrb	r3, [r7, #12]
 8003c92:	b298      	uxth	r0, r3
 8003c94:	7b7b      	ldrb	r3, [r7, #13]
 8003c96:	b299      	uxth	r1, r3
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	7bbb      	ldrb	r3, [r7, #14]
 8003c9e:	b29c      	uxth	r4, r3
 8003ca0:	79fb      	ldrb	r3, [r7, #7]
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	4623      	mov	r3, r4
 8003ca6:	f7ff fa02 	bl	80030ae <SSD1306_DrawLine>
    		HAL_Delay(1);
 8003caa:	2001      	movs	r0, #1
 8003cac:	f7fc fc8c 	bl	80005c8 <HAL_Delay>
    		SSD1306_UpdateScreen();
 8003cb0:	f7ff f89c 	bl	8002dec <SSD1306_UpdateScreen>
    for (y2 = 0; y2 < SSD1306_HEIGHT; y2 += 6)
 8003cb4:	7bbb      	ldrb	r3, [r7, #14]
 8003cb6:	3306      	adds	r3, #6
 8003cb8:	73bb      	strb	r3, [r7, #14]
 8003cba:	7bbb      	ldrb	r3, [r7, #14]
 8003cbc:	2b3f      	cmp	r3, #63	; 0x3f
 8003cbe:	d9e7      	bls.n	8003c90 <TestLines+0x1f4>
    	}
}
 8003cc0:	bf00      	nop
 8003cc2:	bf00      	nop
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd90      	pop	{r4, r7, pc}

08003cca <TestRectangles>:


void TestRectangles (uint8_t color)
{
 8003cca:	b590      	push	{r4, r7, lr}
 8003ccc:	b087      	sub	sp, #28
 8003cce:	af02      	add	r7, sp, #8
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	71fb      	strb	r3, [r7, #7]
    uint8_t n, i, i2;

    SSD1306_Clear ();
 8003cd4:	f7ff fd7f 	bl	80037d6 <SSD1306_Clear>

    n = min(SSD1306_WIDTH, SSD1306_HEIGHT);
 8003cd8:	2340      	movs	r3, #64	; 0x40
 8003cda:	73bb      	strb	r3, [r7, #14]

    for (i = 2; i < n; i += 6)
 8003cdc:	2302      	movs	r3, #2
 8003cde:	73fb      	strb	r3, [r7, #15]
 8003ce0:	e01d      	b.n	8003d1e <TestRectangles+0x54>
    {
        i2 = i / 2;
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
 8003ce4:	085b      	lsrs	r3, r3, #1
 8003ce6:	737b      	strb	r3, [r7, #13]
        SSD1306_DrawRectangle((SSD1306_WIDTH/2) - i2, (SSD1306_HEIGHT/2) - i2, i, i, color);
 8003ce8:	7b7b      	ldrb	r3, [r7, #13]
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003cf0:	b298      	uxth	r0, r3
 8003cf2:	7b7b      	ldrb	r3, [r7, #13]
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	f1c3 0320 	rsb	r3, r3, #32
 8003cfa:	b299      	uxth	r1, r3
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
 8003d02:	b29c      	uxth	r4, r3
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	4623      	mov	r3, r4
 8003d0a:	f7ff facd 	bl	80032a8 <SSD1306_DrawRectangle>
        SSD1306_UpdateScreen();
 8003d0e:	f7ff f86d 	bl	8002dec <SSD1306_UpdateScreen>
        HAL_Delay (10);
 8003d12:	200a      	movs	r0, #10
 8003d14:	f7fc fc58 	bl	80005c8 <HAL_Delay>
    for (i = 2; i < n; i += 6)
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
 8003d1a:	3306      	adds	r3, #6
 8003d1c:	73fb      	strb	r3, [r7, #15]
 8003d1e:	7bfa      	ldrb	r2, [r7, #15]
 8003d20:	7bbb      	ldrb	r3, [r7, #14]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d3dd      	bcc.n	8003ce2 <TestRectangles+0x18>
    }
}
 8003d26:	bf00      	nop
 8003d28:	bf00      	nop
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd90      	pop	{r4, r7, pc}

08003d30 <TestFilledRectangles>:

void TestFilledRectangles (uint8_t color)
{
 8003d30:	b590      	push	{r4, r7, lr}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	4603      	mov	r3, r0
 8003d38:	71fb      	strb	r3, [r7, #7]
    uint8_t n, i, i2,
            cx = SSD1306_WIDTH / 2 - 1,
 8003d3a:	233f      	movs	r3, #63	; 0x3f
 8003d3c:	73bb      	strb	r3, [r7, #14]
            cy = SSD1306_HEIGHT / 2 - 1;
 8003d3e:	231f      	movs	r3, #31
 8003d40:	737b      	strb	r3, [r7, #13]

    SSD1306_Clear ();
 8003d42:	f7ff fd48 	bl	80037d6 <SSD1306_Clear>

    n = min(SSD1306_WIDTH, SSD1306_HEIGHT);
 8003d46:	2340      	movs	r3, #64	; 0x40
 8003d48:	733b      	strb	r3, [r7, #12]
    for (i = n; i > 0; i -= 6)
 8003d4a:	7b3b      	ldrb	r3, [r7, #12]
 8003d4c:	73fb      	strb	r3, [r7, #15]
 8003d4e:	e01f      	b.n	8003d90 <TestFilledRectangles+0x60>
    {
        i2    = i / 2;
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	085b      	lsrs	r3, r3, #1
 8003d54:	72fb      	strb	r3, [r7, #11]
        SSD1306_DrawFilledRectangle(cx - i2, cy - i2, i, i, color);
 8003d56:	7bbb      	ldrb	r3, [r7, #14]
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	7afb      	ldrb	r3, [r7, #11]
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	b298      	uxth	r0, r3
 8003d62:	7b7b      	ldrb	r3, [r7, #13]
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	7afb      	ldrb	r3, [r7, #11]
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	b299      	uxth	r1, r3
 8003d6e:	7bfb      	ldrb	r3, [r7, #15]
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
 8003d74:	b29c      	uxth	r4, r3
 8003d76:	79fb      	ldrb	r3, [r7, #7]
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	4623      	mov	r3, r4
 8003d7c:	f7ff fafe 	bl	800337c <SSD1306_DrawFilledRectangle>
        SSD1306_UpdateScreen();
 8003d80:	f7ff f834 	bl	8002dec <SSD1306_UpdateScreen>
        HAL_Delay (10);
 8003d84:	200a      	movs	r0, #10
 8003d86:	f7fc fc1f 	bl	80005c8 <HAL_Delay>
    for (i = n; i > 0; i -= 6)
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
 8003d8c:	3b06      	subs	r3, #6
 8003d8e:	73fb      	strb	r3, [r7, #15]
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1dc      	bne.n	8003d50 <TestFilledRectangles+0x20>
    }
}
 8003d96:	bf00      	nop
 8003d98:	bf00      	nop
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd90      	pop	{r4, r7, pc}

08003da0 <TestFilledCircles>:

void TestFilledCircles(uint8_t radius, uint16_t color)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	4603      	mov	r3, r0
 8003da8:	460a      	mov	r2, r1
 8003daa:	71fb      	strb	r3, [r7, #7]
 8003dac:	4613      	mov	r3, r2
 8003dae:	80bb      	strh	r3, [r7, #4]
    uint8_t x, y, w = SSD1306_WIDTH, h = SSD1306_HEIGHT, r2 = radius * 2;
 8003db0:	2380      	movs	r3, #128	; 0x80
 8003db2:	737b      	strb	r3, [r7, #13]
 8003db4:	2340      	movs	r3, #64	; 0x40
 8003db6:	733b      	strb	r3, [r7, #12]
 8003db8:	79fb      	ldrb	r3, [r7, #7]
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	72fb      	strb	r3, [r7, #11]

    SSD1306_Clear ();
 8003dbe:	f7ff fd0a 	bl	80037d6 <SSD1306_Clear>

    for (x = radius; x < w; x += r2)
 8003dc2:	79fb      	ldrb	r3, [r7, #7]
 8003dc4:	73fb      	strb	r3, [r7, #15]
 8003dc6:	e01d      	b.n	8003e04 <TestFilledCircles+0x64>
    {
        for (y = radius; y < h; y += r2)
 8003dc8:	79fb      	ldrb	r3, [r7, #7]
 8003dca:	73bb      	strb	r3, [r7, #14]
 8003dcc:	e012      	b.n	8003df4 <TestFilledCircles+0x54>
        {
            SSD1306_DrawFilledCircle(x, y, radius, color);
 8003dce:	7bfb      	ldrb	r3, [r7, #15]
 8003dd0:	b218      	sxth	r0, r3
 8003dd2:	7bbb      	ldrb	r3, [r7, #14]
 8003dd4:	b219      	sxth	r1, r3
 8003dd6:	79fb      	ldrb	r3, [r7, #7]
 8003dd8:	b21a      	sxth	r2, r3
 8003dda:	88bb      	ldrh	r3, [r7, #4]
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	f7ff fc1f 	bl	8003620 <SSD1306_DrawFilledCircle>
            SSD1306_UpdateScreen();
 8003de2:	f7ff f803 	bl	8002dec <SSD1306_UpdateScreen>
            HAL_Delay (10);
 8003de6:	200a      	movs	r0, #10
 8003de8:	f7fc fbee 	bl	80005c8 <HAL_Delay>
        for (y = radius; y < h; y += r2)
 8003dec:	7bba      	ldrb	r2, [r7, #14]
 8003dee:	7afb      	ldrb	r3, [r7, #11]
 8003df0:	4413      	add	r3, r2
 8003df2:	73bb      	strb	r3, [r7, #14]
 8003df4:	7bba      	ldrb	r2, [r7, #14]
 8003df6:	7b3b      	ldrb	r3, [r7, #12]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d3e8      	bcc.n	8003dce <TestFilledCircles+0x2e>
    for (x = radius; x < w; x += r2)
 8003dfc:	7bfa      	ldrb	r2, [r7, #15]
 8003dfe:	7afb      	ldrb	r3, [r7, #11]
 8003e00:	4413      	add	r3, r2
 8003e02:	73fb      	strb	r3, [r7, #15]
 8003e04:	7bfa      	ldrb	r2, [r7, #15]
 8003e06:	7b7b      	ldrb	r3, [r7, #13]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d3dd      	bcc.n	8003dc8 <TestFilledCircles+0x28>
        }
    }
}
 8003e0c:	bf00      	nop
 8003e0e:	bf00      	nop
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <TestCircles>:

void TestCircles(uint8_t radius, uint16_t color)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b084      	sub	sp, #16
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	460a      	mov	r2, r1
 8003e20:	71fb      	strb	r3, [r7, #7]
 8003e22:	4613      	mov	r3, r2
 8003e24:	80bb      	strh	r3, [r7, #4]
	SSD1306_Clear ();
 8003e26:	f7ff fcd6 	bl	80037d6 <SSD1306_Clear>

	uint8_t x, y, r2 = radius * 2,
 8003e2a:	79fb      	ldrb	r3, [r7, #7]
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	737b      	strb	r3, [r7, #13]
            w = SSD1306_WIDTH + radius,
 8003e30:	79fb      	ldrb	r3, [r7, #7]
 8003e32:	3b80      	subs	r3, #128	; 0x80
 8003e34:	733b      	strb	r3, [r7, #12]
            h = SSD1306_HEIGHT + radius;
 8003e36:	79fb      	ldrb	r3, [r7, #7]
 8003e38:	3340      	adds	r3, #64	; 0x40
 8003e3a:	72fb      	strb	r3, [r7, #11]

    for (x = 0; x < w; x += r2)
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	73fb      	strb	r3, [r7, #15]
 8003e40:	e01d      	b.n	8003e7e <TestCircles+0x68>
    {
        for (y = 0; y < h; y += r2)
 8003e42:	2300      	movs	r3, #0
 8003e44:	73bb      	strb	r3, [r7, #14]
 8003e46:	e012      	b.n	8003e6e <TestCircles+0x58>
        {
            SSD1306_DrawCircle(x, y, radius, color);
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	b218      	sxth	r0, r3
 8003e4c:	7bbb      	ldrb	r3, [r7, #14]
 8003e4e:	b219      	sxth	r1, r3
 8003e50:	79fb      	ldrb	r3, [r7, #7]
 8003e52:	b21a      	sxth	r2, r3
 8003e54:	88bb      	ldrh	r3, [r7, #4]
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	f7ff fb0e 	bl	8003478 <SSD1306_DrawCircle>
            SSD1306_UpdateScreen();
 8003e5c:	f7fe ffc6 	bl	8002dec <SSD1306_UpdateScreen>
            HAL_Delay (10);
 8003e60:	200a      	movs	r0, #10
 8003e62:	f7fc fbb1 	bl	80005c8 <HAL_Delay>
        for (y = 0; y < h; y += r2)
 8003e66:	7bba      	ldrb	r2, [r7, #14]
 8003e68:	7b7b      	ldrb	r3, [r7, #13]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	73bb      	strb	r3, [r7, #14]
 8003e6e:	7bba      	ldrb	r2, [r7, #14]
 8003e70:	7afb      	ldrb	r3, [r7, #11]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d3e8      	bcc.n	8003e48 <TestCircles+0x32>
    for (x = 0; x < w; x += r2)
 8003e76:	7bfa      	ldrb	r2, [r7, #15]
 8003e78:	7b7b      	ldrb	r3, [r7, #13]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	73fb      	strb	r3, [r7, #15]
 8003e7e:	7bfa      	ldrb	r2, [r7, #15]
 8003e80:	7b3b      	ldrb	r3, [r7, #12]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d3dd      	bcc.n	8003e42 <TestCircles+0x2c>
        }
    }
}
 8003e86:	bf00      	nop
 8003e88:	bf00      	nop
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <TestTriangles>:

void TestTriangles(uint8_t color)
{
 8003e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e92:	b089      	sub	sp, #36	; 0x24
 8003e94:	af04      	add	r7, sp, #16
 8003e96:	4603      	mov	r3, r0
 8003e98:	71fb      	strb	r3, [r7, #7]
    uint8_t n, i, cx = SSD1306_WIDTH  / 2 - 1,
 8003e9a:	233f      	movs	r3, #63	; 0x3f
 8003e9c:	73bb      	strb	r3, [r7, #14]
            cy = SSD1306_HEIGHT / 2 - 1;
 8003e9e:	231f      	movs	r3, #31
 8003ea0:	737b      	strb	r3, [r7, #13]

    SSD1306_Clear ();
 8003ea2:	f7ff fc98 	bl	80037d6 <SSD1306_Clear>

    n = min(cx, cy);
 8003ea6:	7b7a      	ldrb	r2, [r7, #13]
 8003ea8:	7bbb      	ldrb	r3, [r7, #14]
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	bf28      	it	cs
 8003eae:	4613      	movcs	r3, r2
 8003eb0:	733b      	strb	r3, [r7, #12]
    for (i = 0; i < n; i += 5)
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	73fb      	strb	r3, [r7, #15]
 8003eb6:	e030      	b.n	8003f1a <TestTriangles+0x8a>
    {
        SSD1306_DrawTriangle(cx , cy - i, cx - i, cy + i, cx + i, cy + i, color);
 8003eb8:	7bbb      	ldrb	r3, [r7, #14]
 8003eba:	b298      	uxth	r0, r3
 8003ebc:	7b7b      	ldrb	r3, [r7, #13]
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	b29c      	uxth	r4, r3
 8003ec8:	7bbb      	ldrb	r3, [r7, #14]
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	b29d      	uxth	r5, r3
 8003ed4:	7b7b      	ldrb	r3, [r7, #13]
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	7bfb      	ldrb	r3, [r7, #15]
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	4413      	add	r3, r2
 8003ede:	b29e      	uxth	r6, r3
 8003ee0:	7bbb      	ldrb	r3, [r7, #14]
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	4413      	add	r3, r2
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	7b7a      	ldrb	r2, [r7, #13]
 8003eee:	b291      	uxth	r1, r2
 8003ef0:	7bfa      	ldrb	r2, [r7, #15]
 8003ef2:	b292      	uxth	r2, r2
 8003ef4:	440a      	add	r2, r1
 8003ef6:	b292      	uxth	r2, r2
 8003ef8:	79f9      	ldrb	r1, [r7, #7]
 8003efa:	9102      	str	r1, [sp, #8]
 8003efc:	9201      	str	r2, [sp, #4]
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	4633      	mov	r3, r6
 8003f02:	462a      	mov	r2, r5
 8003f04:	4621      	mov	r1, r4
 8003f06:	f7ff fa86 	bl	8003416 <SSD1306_DrawTriangle>
        SSD1306_UpdateScreen();
 8003f0a:	f7fe ff6f 	bl	8002dec <SSD1306_UpdateScreen>
        HAL_Delay (10);
 8003f0e:	200a      	movs	r0, #10
 8003f10:	f7fc fb5a 	bl	80005c8 <HAL_Delay>
    for (i = 0; i < n; i += 5)
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
 8003f16:	3305      	adds	r3, #5
 8003f18:	73fb      	strb	r3, [r7, #15]
 8003f1a:	7bfa      	ldrb	r2, [r7, #15]
 8003f1c:	7b3b      	ldrb	r3, [r7, #12]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d3ca      	bcc.n	8003eb8 <TestTriangles+0x28>
    }

}
 8003f22:	bf00      	nop
 8003f24:	bf00      	nop
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003f2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f30:	480d      	ldr	r0, [pc, #52]	; (8003f68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003f32:	490e      	ldr	r1, [pc, #56]	; (8003f6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003f34:	4a0e      	ldr	r2, [pc, #56]	; (8003f70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f38:	e002      	b.n	8003f40 <LoopCopyDataInit>

08003f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f3e:	3304      	adds	r3, #4

08003f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f44:	d3f9      	bcc.n	8003f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f46:	4a0b      	ldr	r2, [pc, #44]	; (8003f74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003f48:	4c0b      	ldr	r4, [pc, #44]	; (8003f78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f4c:	e001      	b.n	8003f52 <LoopFillZerobss>

08003f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f50:	3204      	adds	r2, #4

08003f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f54:	d3fb      	bcc.n	8003f4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003f56:	f7ff fd8f 	bl	8003a78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f5a:	f000 f811 	bl	8003f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f5e:	f7fe fb95 	bl	800268c <main>
  bx  lr    
 8003f62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f64:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f6c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8003f70:	08005184 	.word	0x08005184
  ldr r2, =_sbss
 8003f74:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8003f78:	20000490 	.word	0x20000490

08003f7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f7c:	e7fe      	b.n	8003f7c <ADC_IRQHandler>
	...

08003f80 <__libc_init_array>:
 8003f80:	b570      	push	{r4, r5, r6, lr}
 8003f82:	4d0d      	ldr	r5, [pc, #52]	; (8003fb8 <__libc_init_array+0x38>)
 8003f84:	4c0d      	ldr	r4, [pc, #52]	; (8003fbc <__libc_init_array+0x3c>)
 8003f86:	1b64      	subs	r4, r4, r5
 8003f88:	10a4      	asrs	r4, r4, #2
 8003f8a:	2600      	movs	r6, #0
 8003f8c:	42a6      	cmp	r6, r4
 8003f8e:	d109      	bne.n	8003fa4 <__libc_init_array+0x24>
 8003f90:	4d0b      	ldr	r5, [pc, #44]	; (8003fc0 <__libc_init_array+0x40>)
 8003f92:	4c0c      	ldr	r4, [pc, #48]	; (8003fc4 <__libc_init_array+0x44>)
 8003f94:	f000 f820 	bl	8003fd8 <_init>
 8003f98:	1b64      	subs	r4, r4, r5
 8003f9a:	10a4      	asrs	r4, r4, #2
 8003f9c:	2600      	movs	r6, #0
 8003f9e:	42a6      	cmp	r6, r4
 8003fa0:	d105      	bne.n	8003fae <__libc_init_array+0x2e>
 8003fa2:	bd70      	pop	{r4, r5, r6, pc}
 8003fa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fa8:	4798      	blx	r3
 8003faa:	3601      	adds	r6, #1
 8003fac:	e7ee      	b.n	8003f8c <__libc_init_array+0xc>
 8003fae:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fb2:	4798      	blx	r3
 8003fb4:	3601      	adds	r6, #1
 8003fb6:	e7f2      	b.n	8003f9e <__libc_init_array+0x1e>
 8003fb8:	0800517c 	.word	0x0800517c
 8003fbc:	0800517c 	.word	0x0800517c
 8003fc0:	0800517c 	.word	0x0800517c
 8003fc4:	08005180 	.word	0x08005180

08003fc8 <memset>:
 8003fc8:	4402      	add	r2, r0
 8003fca:	4603      	mov	r3, r0
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d100      	bne.n	8003fd2 <memset+0xa>
 8003fd0:	4770      	bx	lr
 8003fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8003fd6:	e7f9      	b.n	8003fcc <memset+0x4>

08003fd8 <_init>:
 8003fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fda:	bf00      	nop
 8003fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fde:	bc08      	pop	{r3}
 8003fe0:	469e      	mov	lr, r3
 8003fe2:	4770      	bx	lr

08003fe4 <_fini>:
 8003fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe6:	bf00      	nop
 8003fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fea:	bc08      	pop	{r3}
 8003fec:	469e      	mov	lr, r3
 8003fee:	4770      	bx	lr
