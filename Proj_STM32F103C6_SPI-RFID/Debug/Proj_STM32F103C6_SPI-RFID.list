
Proj_STM32F103C6_SPI-RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e30  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  08004f3c  08004f3c  00014f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005238  08005238  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005238  08005238  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005238  08005238  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005238  08005238  00015238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800523c  0800523c  0001523c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000070  080052b0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  080052b0  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1a7  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ed  00000000  00000000  0002e240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  00030630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb8  00000000  00000000  000315d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001926e  00000000  00000000  00032488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff90  00000000  00000000  0004b6f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c57e  00000000  00000000  0005b686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7c04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a1c  00000000  00000000  000e7c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004f24 	.word	0x08004f24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004f24 	.word	0x08004f24

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <string_compare>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t string_compare(char array1[], char array2[], uint16_t length)
{
 800015c:	b480      	push	{r7}
 800015e:	b087      	sub	sp, #28
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	4613      	mov	r3, r2
 8000168:	80fb      	strh	r3, [r7, #6]
	 uint8_t comVAR=0, i;
 800016a:	2300      	movs	r3, #0
 800016c:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 800016e:	2300      	movs	r3, #0
 8000170:	75bb      	strb	r3, [r7, #22]
 8000172:	e012      	b.n	800019a <string_compare+0x3e>
	   	{
	   		  if(array1[i]==array2[i])
 8000174:	7dbb      	ldrb	r3, [r7, #22]
 8000176:	68fa      	ldr	r2, [r7, #12]
 8000178:	4413      	add	r3, r2
 800017a:	781a      	ldrb	r2, [r3, #0]
 800017c:	7dbb      	ldrb	r3, [r7, #22]
 800017e:	68b9      	ldr	r1, [r7, #8]
 8000180:	440b      	add	r3, r1
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	429a      	cmp	r2, r3
 8000186:	d103      	bne.n	8000190 <string_compare+0x34>
	   	  		  comVAR++;
 8000188:	7dfb      	ldrb	r3, [r7, #23]
 800018a:	3301      	adds	r3, #1
 800018c:	75fb      	strb	r3, [r7, #23]
 800018e:	e001      	b.n	8000194 <string_compare+0x38>
	   	  	  else comVAR=0;
 8000190:	2300      	movs	r3, #0
 8000192:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 8000194:	7dbb      	ldrb	r3, [r7, #22]
 8000196:	3301      	adds	r3, #1
 8000198:	75bb      	strb	r3, [r7, #22]
 800019a:	7dbb      	ldrb	r3, [r7, #22]
 800019c:	b29b      	uxth	r3, r3
 800019e:	88fa      	ldrh	r2, [r7, #6]
 80001a0:	429a      	cmp	r2, r3
 80001a2:	d8e7      	bhi.n	8000174 <string_compare+0x18>
	   	}
	 if (comVAR==length)
 80001a4:	7dfb      	ldrb	r3, [r7, #23]
 80001a6:	b29b      	uxth	r3, r3
 80001a8:	88fa      	ldrh	r2, [r7, #6]
 80001aa:	429a      	cmp	r2, r3
 80001ac:	d101      	bne.n	80001b2 <string_compare+0x56>
		 	return 1;
 80001ae:	2301      	movs	r3, #1
 80001b0:	e000      	b.n	80001b4 <string_compare+0x58>
	 else 	return 0;
 80001b2:	2300      	movs	r3, #0
}
 80001b4:	4618      	mov	r0, r3
 80001b6:	371c      	adds	r7, #28
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr
	...

080001c0 <Message_handler>:

void Message_handler()
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
	if(string_compare(buffer, "LED ON", strlen("LED ON")))
 80001c4:	2206      	movs	r2, #6
 80001c6:	4927      	ldr	r1, [pc, #156]	; (8000264 <Message_handler+0xa4>)
 80001c8:	4827      	ldr	r0, [pc, #156]	; (8000268 <Message_handler+0xa8>)
 80001ca:	f7ff ffc7 	bl	800015c <string_compare>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d00d      	beq.n	80001f0 <Message_handler+0x30>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 80001d4:	2200      	movs	r2, #0
 80001d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001da:	4824      	ldr	r0, [pc, #144]	; (800026c <Message_handler+0xac>)
 80001dc:	f001 fdf2 	bl	8001dc4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, (uint8_t*)"LED is ON.\n", strlen("LED is ON.\n"), 500);
 80001e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80001e4:	220b      	movs	r2, #11
 80001e6:	4922      	ldr	r1, [pc, #136]	; (8000270 <Message_handler+0xb0>)
 80001e8:	4822      	ldr	r0, [pc, #136]	; (8000274 <Message_handler+0xb4>)
 80001ea:	f003 f8d6 	bl	800339a <HAL_UART_Transmit>
 80001ee:	e02c      	b.n	800024a <Message_handler+0x8a>
	}else
	if(string_compare(buffer, "LED OFF", strlen("LED OFF")))
 80001f0:	2207      	movs	r2, #7
 80001f2:	4921      	ldr	r1, [pc, #132]	; (8000278 <Message_handler+0xb8>)
 80001f4:	481c      	ldr	r0, [pc, #112]	; (8000268 <Message_handler+0xa8>)
 80001f6:	f7ff ffb1 	bl	800015c <string_compare>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d00d      	beq.n	800021c <Message_handler+0x5c>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8000200:	2201      	movs	r2, #1
 8000202:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000206:	4819      	ldr	r0, [pc, #100]	; (800026c <Message_handler+0xac>)
 8000208:	f001 fddc 	bl	8001dc4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, (uint8_t*)"LED is OFF.\n", strlen("LED is OFF.\n"), 500);
 800020c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000210:	220c      	movs	r2, #12
 8000212:	491a      	ldr	r1, [pc, #104]	; (800027c <Message_handler+0xbc>)
 8000214:	4817      	ldr	r0, [pc, #92]	; (8000274 <Message_handler+0xb4>)
 8000216:	f003 f8c0 	bl	800339a <HAL_UART_Transmit>
 800021a:	e016      	b.n	800024a <Message_handler+0x8a>
	}else
	{
		strcat(buffer, "\n");
 800021c:	4812      	ldr	r0, [pc, #72]	; (8000268 <Message_handler+0xa8>)
 800021e:	f7ff ff95 	bl	800014c <strlen>
 8000222:	4603      	mov	r3, r0
 8000224:	461a      	mov	r2, r3
 8000226:	4b10      	ldr	r3, [pc, #64]	; (8000268 <Message_handler+0xa8>)
 8000228:	4413      	add	r3, r2
 800022a:	4915      	ldr	r1, [pc, #84]	; (8000280 <Message_handler+0xc0>)
 800022c:	461a      	mov	r2, r3
 800022e:	460b      	mov	r3, r1
 8000230:	881b      	ldrh	r3, [r3, #0]
 8000232:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 500);
 8000234:	480c      	ldr	r0, [pc, #48]	; (8000268 <Message_handler+0xa8>)
 8000236:	f7ff ff89 	bl	800014c <strlen>
 800023a:	4603      	mov	r3, r0
 800023c:	b29a      	uxth	r2, r3
 800023e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000242:	4909      	ldr	r1, [pc, #36]	; (8000268 <Message_handler+0xa8>)
 8000244:	480b      	ldr	r0, [pc, #44]	; (8000274 <Message_handler+0xb4>)
 8000246:	f003 f8a8 	bl	800339a <HAL_UART_Transmit>
	}

	memset(buffer, 0, sizeof(buffer));
 800024a:	2232      	movs	r2, #50	; 0x32
 800024c:	2100      	movs	r1, #0
 800024e:	4806      	ldr	r0, [pc, #24]	; (8000268 <Message_handler+0xa8>)
 8000250:	f003 fdfa 	bl	8003e48 <memset>
	buffer_index = 0;
 8000254:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <Message_handler+0xc4>)
 8000256:	2200      	movs	r2, #0
 8000258:	701a      	strb	r2, [r3, #0]
	timer_count = 0;
 800025a:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <Message_handler+0xc8>)
 800025c:	2200      	movs	r2, #0
 800025e:	701a      	strb	r2, [r3, #0]
}
 8000260:	bf00      	nop
 8000262:	bd80      	pop	{r7, pc}
 8000264:	08004f3c 	.word	0x08004f3c
 8000268:	200002c4 	.word	0x200002c4
 800026c:	40011000 	.word	0x40011000
 8000270:	08004f44 	.word	0x08004f44
 8000274:	20000170 	.word	0x20000170
 8000278:	08004f50 	.word	0x08004f50
 800027c:	08004f58 	.word	0x08004f58
 8000280:	08004f68 	.word	0x08004f68
 8000284:	200002f7 	.word	0x200002f7
 8000288:	200002f6 	.word	0x200002f6

0800028c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b088      	sub	sp, #32
 8000290:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000292:	f001 f9d7 	bl	8001644 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000296:	f000 f889 	bl	80003ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029a:	f000 f9a5 	bl	80005e8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800029e:	f000 f8cb 	bl	8000438 <MX_SPI1_Init>
  MX_TIM2_Init();
 80002a2:	f000 f8ff 	bl	80004a4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80002a6:	f000 f975 	bl	8000594 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80002aa:	f000 f949 	bl	8000540 <MX_USART1_UART_Init>
//      	HAL_Delay(250);
//      }
//    }
//    PN532_SamConfiguration(&pn532);

  printf("Hello!\r\n");
 80002ae:	4835      	ldr	r0, [pc, #212]	; (8000384 <main+0xf8>)
 80002b0:	f003 fe6c 	bl	8003f8c <puts>
  PN532 pn532;
  PN532_SPI_Init(&pn532);
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 ff26 	bl	8001108 <PN532_SPI_Init>
  //PN532_I2C_Init(&pn532);
  PN532_GetFirmwareVersion(&pn532, buff);
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	4932      	ldr	r1, [pc, #200]	; (8000388 <main+0xfc>)
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 fd2f 	bl	8000d24 <PN532_GetFirmwareVersion>
  if (PN532_GetFirmwareVersion(&pn532, buff) == PN532_STATUS_OK) {
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	492f      	ldr	r1, [pc, #188]	; (8000388 <main+0xfc>)
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 fd2a 	bl	8000d24 <PN532_GetFirmwareVersion>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d110      	bne.n	80002f8 <main+0x6c>
    printf("Found PN532 with firmware version: %d.%d\r\n", buff[1], buff[2]);
 80002d6:	4b2c      	ldr	r3, [pc, #176]	; (8000388 <main+0xfc>)
 80002d8:	785b      	ldrb	r3, [r3, #1]
 80002da:	4619      	mov	r1, r3
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <main+0xfc>)
 80002de:	789b      	ldrb	r3, [r3, #2]
 80002e0:	461a      	mov	r2, r3
 80002e2:	482a      	ldr	r0, [pc, #168]	; (800038c <main+0x100>)
 80002e4:	f003 fdb8 	bl	8003e58 <iprintf>
  } else {
    return -1;
  }
  PN532_SamConfiguration(&pn532);
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 fd3e 	bl	8000d6c <PN532_SamConfiguration>
  printf("Waiting for RFID/NFC card...\r\n");
 80002f0:	4827      	ldr	r0, [pc, #156]	; (8000390 <main+0x104>)
 80002f2:	f003 fe4b 	bl	8003f8c <puts>
 80002f6:	e002      	b.n	80002fe <main+0x72>
    return -1;
 80002f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80002fc:	e03d      	b.n	800037a <main+0xee>
//	    	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 500);
//	    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
//	    	HAL_Delay(1000);
//	    }
	    // Check if a card is available to read
	    uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 80002fe:	1d38      	adds	r0, r7, #4
 8000300:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000304:	2200      	movs	r2, #0
 8000306:	4923      	ldr	r1, [pc, #140]	; (8000394 <main+0x108>)
 8000308:	f000 fd52 	bl	8000db0 <PN532_ReadPassiveTarget>
 800030c:	4603      	mov	r3, r0
 800030e:	4a22      	ldr	r2, [pc, #136]	; (8000398 <main+0x10c>)
 8000310:	6013      	str	r3, [r2, #0]
	    if (uid_len == PN532_STATUS_ERROR) {
 8000312:	4b21      	ldr	r3, [pc, #132]	; (8000398 <main+0x10c>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800031a:	d103      	bne.n	8000324 <main+0x98>
	      printf(".");
 800031c:	202e      	movs	r0, #46	; 0x2e
 800031e:	f003 fdb3 	bl	8003e88 <putchar>
 8000322:	e7ec      	b.n	80002fe <main+0x72>
	    } else {
	      printf("Found card with UID: ");
 8000324:	481d      	ldr	r0, [pc, #116]	; (800039c <main+0x110>)
 8000326:	f003 fd97 	bl	8003e58 <iprintf>
	      for (uint8_t i = 0; i < uid_len; i++) {
 800032a:	2300      	movs	r3, #0
 800032c:	77fb      	strb	r3, [r7, #31]
 800032e:	e01b      	b.n	8000368 <main+0xdc>
	        printf("%02x ", uid[i]);
 8000330:	7ffb      	ldrb	r3, [r7, #31]
 8000332:	4a18      	ldr	r2, [pc, #96]	; (8000394 <main+0x108>)
 8000334:	5cd3      	ldrb	r3, [r2, r3]
 8000336:	4619      	mov	r1, r3
 8000338:	4819      	ldr	r0, [pc, #100]	; (80003a0 <main+0x114>)
 800033a:	f003 fd8d 	bl	8003e58 <iprintf>
	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 800033e:	2201      	movs	r2, #1
 8000340:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000344:	4817      	ldr	r0, [pc, #92]	; (80003a4 <main+0x118>)
 8000346:	f001 fd3d 	bl	8001dc4 <HAL_GPIO_WritePin>
	        HAL_Delay(250);
 800034a:	20fa      	movs	r0, #250	; 0xfa
 800034c:	f001 f9dc 	bl	8001708 <HAL_Delay>
	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000356:	4813      	ldr	r0, [pc, #76]	; (80003a4 <main+0x118>)
 8000358:	f001 fd34 	bl	8001dc4 <HAL_GPIO_WritePin>
	        HAL_Delay(250);
 800035c:	20fa      	movs	r0, #250	; 0xfa
 800035e:	f001 f9d3 	bl	8001708 <HAL_Delay>
	      for (uint8_t i = 0; i < uid_len; i++) {
 8000362:	7ffb      	ldrb	r3, [r7, #31]
 8000364:	3301      	adds	r3, #1
 8000366:	77fb      	strb	r3, [r7, #31]
 8000368:	7ffa      	ldrb	r2, [r7, #31]
 800036a:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <main+0x10c>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	429a      	cmp	r2, r3
 8000370:	dbde      	blt.n	8000330 <main+0xa4>
	      }
	      printf("\r\n");
 8000372:	480d      	ldr	r0, [pc, #52]	; (80003a8 <main+0x11c>)
 8000374:	f003 fe0a 	bl	8003f8c <puts>
	    uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 8000378:	e7c1      	b.n	80002fe <main+0x72>
	    }
  }
  /* USER CODE END 3 */
}
 800037a:	4618      	mov	r0, r3
 800037c:	3720      	adds	r7, #32
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	08004f6c 	.word	0x08004f6c
 8000388:	200001b4 	.word	0x200001b4
 800038c:	08004f74 	.word	0x08004f74
 8000390:	08004fa0 	.word	0x08004fa0
 8000394:	200002b4 	.word	0x200002b4
 8000398:	200002c0 	.word	0x200002c0
 800039c:	08004fc0 	.word	0x08004fc0
 80003a0:	08004fd8 	.word	0x08004fd8
 80003a4:	40011000 	.word	0x40011000
 80003a8:	08004fe0 	.word	0x08004fe0

080003ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b090      	sub	sp, #64	; 0x40
 80003b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b2:	f107 0318 	add.w	r3, r7, #24
 80003b6:	2228      	movs	r2, #40	; 0x28
 80003b8:	2100      	movs	r1, #0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f003 fd44 	bl	8003e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]
 80003cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003ce:	2301      	movs	r3, #1
 80003d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003dc:	2301      	movs	r3, #1
 80003de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e0:	2302      	movs	r3, #2
 80003e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f0:	f107 0318 	add.w	r3, r7, #24
 80003f4:	4618      	mov	r0, r3
 80003f6:	f001 fcfd 	bl	8001df4 <HAL_RCC_OscConfig>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000400:	f000 f994 	bl	800072c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000404:	230f      	movs	r3, #15
 8000406:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000408:	2302      	movs	r3, #2
 800040a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040c:	2300      	movs	r3, #0
 800040e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000414:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000416:	2300      	movs	r3, #0
 8000418:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2102      	movs	r1, #2
 800041e:	4618      	mov	r0, r3
 8000420:	f001 ff6a 	bl	80022f8 <HAL_RCC_ClockConfig>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800042a:	f000 f97f 	bl	800072c <Error_Handler>
  }
}
 800042e:	bf00      	nop
 8000430:	3740      	adds	r7, #64	; 0x40
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
	...

08000438 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800043c:	4b17      	ldr	r3, [pc, #92]	; (800049c <MX_SPI1_Init+0x64>)
 800043e:	4a18      	ldr	r2, [pc, #96]	; (80004a0 <MX_SPI1_Init+0x68>)
 8000440:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000442:	4b16      	ldr	r3, [pc, #88]	; (800049c <MX_SPI1_Init+0x64>)
 8000444:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000448:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800044a:	4b14      	ldr	r3, [pc, #80]	; (800049c <MX_SPI1_Init+0x64>)
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000450:	4b12      	ldr	r3, [pc, #72]	; (800049c <MX_SPI1_Init+0x64>)
 8000452:	2200      	movs	r2, #0
 8000454:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000456:	4b11      	ldr	r3, [pc, #68]	; (800049c <MX_SPI1_Init+0x64>)
 8000458:	2200      	movs	r2, #0
 800045a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800045c:	4b0f      	ldr	r3, [pc, #60]	; (800049c <MX_SPI1_Init+0x64>)
 800045e:	2200      	movs	r2, #0
 8000460:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000462:	4b0e      	ldr	r3, [pc, #56]	; (800049c <MX_SPI1_Init+0x64>)
 8000464:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000468:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800046a:	4b0c      	ldr	r3, [pc, #48]	; (800049c <MX_SPI1_Init+0x64>)
 800046c:	2220      	movs	r2, #32
 800046e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000470:	4b0a      	ldr	r3, [pc, #40]	; (800049c <MX_SPI1_Init+0x64>)
 8000472:	2280      	movs	r2, #128	; 0x80
 8000474:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000476:	4b09      	ldr	r3, [pc, #36]	; (800049c <MX_SPI1_Init+0x64>)
 8000478:	2200      	movs	r2, #0
 800047a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800047c:	4b07      	ldr	r3, [pc, #28]	; (800049c <MX_SPI1_Init+0x64>)
 800047e:	2200      	movs	r2, #0
 8000480:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000482:	4b06      	ldr	r3, [pc, #24]	; (800049c <MX_SPI1_Init+0x64>)
 8000484:	220a      	movs	r2, #10
 8000486:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000488:	4804      	ldr	r0, [pc, #16]	; (800049c <MX_SPI1_Init+0x64>)
 800048a:	f002 f8cd 	bl	8002628 <HAL_SPI_Init>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000494:	f000 f94a 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000498:	bf00      	nop
 800049a:	bd80      	pop	{r7, pc}
 800049c:	2000008c 	.word	0x2000008c
 80004a0:	40013000 	.word	0x40013000

080004a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b086      	sub	sp, #24
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004aa:	f107 0308 	add.w	r3, r7, #8
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
 80004b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b8:	463b      	mov	r3, r7
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
 80004be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004c0:	4b1e      	ldr	r3, [pc, #120]	; (800053c <MX_TIM2_Init+0x98>)
 80004c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 80004c8:	4b1c      	ldr	r3, [pc, #112]	; (800053c <MX_TIM2_Init+0x98>)
 80004ca:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 80004ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d0:	4b1a      	ldr	r3, [pc, #104]	; (800053c <MX_TIM2_Init+0x98>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 80004d6:	4b19      	ldr	r3, [pc, #100]	; (800053c <MX_TIM2_Init+0x98>)
 80004d8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80004dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004de:	4b17      	ldr	r3, [pc, #92]	; (800053c <MX_TIM2_Init+0x98>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004e4:	4b15      	ldr	r3, [pc, #84]	; (800053c <MX_TIM2_Init+0x98>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004ea:	4814      	ldr	r0, [pc, #80]	; (800053c <MX_TIM2_Init+0x98>)
 80004ec:	f002 fb68 	bl	8002bc0 <HAL_TIM_Base_Init>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80004f6:	f000 f919 	bl	800072c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000500:	f107 0308 	add.w	r3, r7, #8
 8000504:	4619      	mov	r1, r3
 8000506:	480d      	ldr	r0, [pc, #52]	; (800053c <MX_TIM2_Init+0x98>)
 8000508:	f002 fcb1 	bl	8002e6e <HAL_TIM_ConfigClockSource>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000512:	f000 f90b 	bl	800072c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000516:	2300      	movs	r3, #0
 8000518:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800051a:	2300      	movs	r3, #0
 800051c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800051e:	463b      	mov	r3, r7
 8000520:	4619      	mov	r1, r3
 8000522:	4806      	ldr	r0, [pc, #24]	; (800053c <MX_TIM2_Init+0x98>)
 8000524:	f002 fe82 	bl	800322c <HAL_TIMEx_MasterConfigSynchronization>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800052e:	f000 f8fd 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000532:	bf00      	nop
 8000534:	3718      	adds	r7, #24
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	200000e4 	.word	0x200000e4

08000540 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <MX_USART1_UART_Init+0x4c>)
 8000546:	4a12      	ldr	r2, [pc, #72]	; (8000590 <MX_USART1_UART_Init+0x50>)
 8000548:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800054a:	4b10      	ldr	r3, [pc, #64]	; (800058c <MX_USART1_UART_Init+0x4c>)
 800054c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000550:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <MX_USART1_UART_Init+0x4c>)
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000558:	4b0c      	ldr	r3, [pc, #48]	; (800058c <MX_USART1_UART_Init+0x4c>)
 800055a:	2200      	movs	r2, #0
 800055c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <MX_USART1_UART_Init+0x4c>)
 8000560:	2200      	movs	r2, #0
 8000562:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000564:	4b09      	ldr	r3, [pc, #36]	; (800058c <MX_USART1_UART_Init+0x4c>)
 8000566:	220c      	movs	r2, #12
 8000568:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800056a:	4b08      	ldr	r3, [pc, #32]	; (800058c <MX_USART1_UART_Init+0x4c>)
 800056c:	2200      	movs	r2, #0
 800056e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <MX_USART1_UART_Init+0x4c>)
 8000572:	2200      	movs	r2, #0
 8000574:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000576:	4805      	ldr	r0, [pc, #20]	; (800058c <MX_USART1_UART_Init+0x4c>)
 8000578:	f002 fec2 	bl	8003300 <HAL_UART_Init>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000582:	f000 f8d3 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	2000012c 	.word	0x2000012c
 8000590:	40013800 	.word	0x40013800

08000594 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000598:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <MX_USART2_UART_Init+0x4c>)
 800059a:	4a12      	ldr	r2, [pc, #72]	; (80005e4 <MX_USART2_UART_Init+0x50>)
 800059c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800059e:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <MX_USART2_UART_Init+0x4c>)
 80005a0:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80005a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <MX_USART2_UART_Init+0x4c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <MX_USART2_UART_Init+0x4c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <MX_USART2_UART_Init+0x4c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005b8:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <MX_USART2_UART_Init+0x4c>)
 80005ba:	220c      	movs	r2, #12
 80005bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <MX_USART2_UART_Init+0x4c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <MX_USART2_UART_Init+0x4c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ca:	4805      	ldr	r0, [pc, #20]	; (80005e0 <MX_USART2_UART_Init+0x4c>)
 80005cc:	f002 fe98 	bl	8003300 <HAL_UART_Init>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005d6:	f000 f8a9 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000170 	.word	0x20000170
 80005e4:	40004400 	.word	0x40004400

080005e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 0310 	add.w	r3, r7, #16
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fc:	4b3e      	ldr	r3, [pc, #248]	; (80006f8 <MX_GPIO_Init+0x110>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	4a3d      	ldr	r2, [pc, #244]	; (80006f8 <MX_GPIO_Init+0x110>)
 8000602:	f043 0310 	orr.w	r3, r3, #16
 8000606:	6193      	str	r3, [r2, #24]
 8000608:	4b3b      	ldr	r3, [pc, #236]	; (80006f8 <MX_GPIO_Init+0x110>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	f003 0310 	and.w	r3, r3, #16
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000614:	4b38      	ldr	r3, [pc, #224]	; (80006f8 <MX_GPIO_Init+0x110>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	4a37      	ldr	r2, [pc, #220]	; (80006f8 <MX_GPIO_Init+0x110>)
 800061a:	f043 0320 	orr.w	r3, r3, #32
 800061e:	6193      	str	r3, [r2, #24]
 8000620:	4b35      	ldr	r3, [pc, #212]	; (80006f8 <MX_GPIO_Init+0x110>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	f003 0320 	and.w	r3, r3, #32
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062c:	4b32      	ldr	r3, [pc, #200]	; (80006f8 <MX_GPIO_Init+0x110>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a31      	ldr	r2, [pc, #196]	; (80006f8 <MX_GPIO_Init+0x110>)
 8000632:	f043 0304 	orr.w	r3, r3, #4
 8000636:	6193      	str	r3, [r2, #24]
 8000638:	4b2f      	ldr	r3, [pc, #188]	; (80006f8 <MX_GPIO_Init+0x110>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f003 0304 	and.w	r3, r3, #4
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000644:	4b2c      	ldr	r3, [pc, #176]	; (80006f8 <MX_GPIO_Init+0x110>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a2b      	ldr	r2, [pc, #172]	; (80006f8 <MX_GPIO_Init+0x110>)
 800064a:	f043 0308 	orr.w	r3, r3, #8
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b29      	ldr	r3, [pc, #164]	; (80006f8 <MX_GPIO_Init+0x110>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0308 	and.w	r3, r3, #8
 8000658:	603b      	str	r3, [r7, #0]
 800065a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000662:	4826      	ldr	r0, [pc, #152]	; (80006fc <MX_GPIO_Init+0x114>)
 8000664:	f001 fbae 	bl	8001dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_SSpin_Pin|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	f641 0110 	movw	r1, #6160	; 0x1810
 800066e:	4824      	ldr	r0, [pc, #144]	; (8000700 <MX_GPIO_Init+0x118>)
 8000670:	f001 fba8 	bl	8001dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	2101      	movs	r1, #1
 8000678:	4822      	ldr	r0, [pc, #136]	; (8000704 <MX_GPIO_Init+0x11c>)
 800067a:	f001 fba3 	bl	8001dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800067e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000682:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000684:	2301      	movs	r3, #1
 8000686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068c:	2302      	movs	r3, #2
 800068e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	4619      	mov	r1, r3
 8000696:	4819      	ldr	r0, [pc, #100]	; (80006fc <MX_GPIO_Init+0x114>)
 8000698:	f001 fa18 	bl	8001acc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SSpin_Pin PA11 PA12 */
  GPIO_InitStruct.Pin = SPI1_SSpin_Pin|GPIO_PIN_11|GPIO_PIN_12;
 800069c:	f641 0310 	movw	r3, #6160	; 0x1810
 80006a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a2:	2301      	movs	r3, #1
 80006a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	2302      	movs	r3, #2
 80006ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	f107 0310 	add.w	r3, r7, #16
 80006b2:	4619      	mov	r1, r3
 80006b4:	4812      	ldr	r0, [pc, #72]	; (8000700 <MX_GPIO_Init+0x118>)
 80006b6:	f001 fa09 	bl	8001acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ba:	2301      	movs	r3, #1
 80006bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006be:	2301      	movs	r3, #1
 80006c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	2302      	movs	r3, #2
 80006c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ca:	f107 0310 	add.w	r3, r7, #16
 80006ce:	4619      	mov	r1, r3
 80006d0:	480c      	ldr	r0, [pc, #48]	; (8000704 <MX_GPIO_Init+0x11c>)
 80006d2:	f001 f9fb 	bl	8001acc <HAL_GPIO_Init>

  /*Configure GPIO pins : RFID_IRQ_Pin button_Pin */
  GPIO_InitStruct.Pin = RFID_IRQ_Pin|button_Pin;
 80006d6:	f248 0302 	movw	r3, #32770	; 0x8002
 80006da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e4:	f107 0310 	add.w	r3, r7, #16
 80006e8:	4619      	mov	r1, r3
 80006ea:	4806      	ldr	r0, [pc, #24]	; (8000704 <MX_GPIO_Init+0x11c>)
 80006ec:	f001 f9ee 	bl	8001acc <HAL_GPIO_Init>

}
 80006f0:	bf00      	nop
 80006f2:	3720      	adds	r7, #32
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40021000 	.word	0x40021000
 80006fc:	40011000 	.word	0x40011000
 8000700:	40010800 	.word	0x40010800
 8000704:	40010c00 	.word	0x40010c00

08000708 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000710:	1d39      	adds	r1, r7, #4
 8000712:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000716:	2201      	movs	r2, #1
 8000718:	4803      	ldr	r0, [pc, #12]	; (8000728 <__io_putchar+0x20>)
 800071a:	f002 fe3e 	bl	800339a <HAL_UART_Transmit>
  return ch;
 800071e:	687b      	ldr	r3, [r7, #4]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000170 	.word	0x20000170

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	e7fe      	b.n	8000734 <Error_Handler+0x8>

08000736 <PN532_WriteFrame>:
/**
  * @brief: Write a frame to the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns -1 if there is an error parsing the frame.
  */
int PN532_WriteFrame(PN532* pn532, uint8_t* data, uint16_t length) {
 8000736:	b580      	push	{r7, lr}
 8000738:	b0c8      	sub	sp, #288	; 0x120
 800073a:	af00      	add	r7, sp, #0
 800073c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000740:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000744:	6018      	str	r0, [r3, #0]
 8000746:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800074a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800074e:	6019      	str	r1, [r3, #0]
 8000750:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000754:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000758:	801a      	strh	r2, [r3, #0]
    if (length > PN532_FRAME_MAX_LENGTH || length < 1) {
 800075a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800075e:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000762:	881b      	ldrh	r3, [r3, #0]
 8000764:	2bff      	cmp	r3, #255	; 0xff
 8000766:	d806      	bhi.n	8000776 <PN532_WriteFrame+0x40>
 8000768:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800076c:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d102      	bne.n	800077c <PN532_WriteFrame+0x46>
        return PN532_STATUS_ERROR; // Data must be array of 1 to 255 bytes.
 8000776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800077a:	e0aa      	b.n	80008d2 <PN532_WriteFrame+0x19c>
    // - Command bytes
    // - Checksum
    // - Postamble (0x00)

    uint8_t frame[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    frame[0] = PN532_PREAMBLE;
 8000782:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000786:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]
    frame[1] = PN532_STARTCODE1;
 800078e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000792:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000796:	2200      	movs	r2, #0
 8000798:	705a      	strb	r2, [r3, #1]
    frame[2] = PN532_STARTCODE2;
 800079a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800079e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80007a2:	22ff      	movs	r2, #255	; 0xff
 80007a4:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; i++) {
 80007a6:	2300      	movs	r3, #0
 80007a8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80007ac:	e010      	b.n	80007d0 <PN532_WriteFrame+0x9a>
        checksum += frame[i];
 80007ae:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80007b2:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80007b6:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80007ba:	5cd2      	ldrb	r2, [r2, r3]
 80007bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80007c0:	4413      	add	r3, r2
 80007c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < 3; i++) {
 80007c6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80007ca:	3301      	adds	r3, #1
 80007cc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80007d0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80007d4:	2b02      	cmp	r3, #2
 80007d6:	d9ea      	bls.n	80007ae <PN532_WriteFrame+0x78>
    }
    frame[3] = length & 0xFF;
 80007d8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80007dc:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80007e0:	881b      	ldrh	r3, [r3, #0]
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80007e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80007ec:	70da      	strb	r2, [r3, #3]
    frame[4] = (~length + 1) & 0xFF;
 80007ee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80007f2:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80007f6:	881b      	ldrh	r3, [r3, #0]
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	425b      	negs	r3, r3
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000802:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000806:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < length; i++) {
 8000808:	2300      	movs	r3, #0
 800080a:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 800080e:	e023      	b.n	8000858 <PN532_WriteFrame+0x122>
        frame[5 + i] = data[i];
 8000810:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000814:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000818:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800081c:	6812      	ldr	r2, [r2, #0]
 800081e:	441a      	add	r2, r3
 8000820:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000824:	3305      	adds	r3, #5
 8000826:	7811      	ldrb	r1, [r2, #0]
 8000828:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800082c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000830:	54d1      	strb	r1, [r2, r3]
        checksum += data[i];
 8000832:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000836:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800083a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800083e:	6812      	ldr	r2, [r2, #0]
 8000840:	4413      	add	r3, r2
 8000842:	781a      	ldrb	r2, [r3, #0]
 8000844:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000848:	4413      	add	r3, r2
 800084a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < length; i++) {
 800084e:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000852:	3301      	adds	r3, #1
 8000854:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000858:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800085c:	b29b      	uxth	r3, r3
 800085e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000862:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 8000866:	8812      	ldrh	r2, [r2, #0]
 8000868:	429a      	cmp	r2, r3
 800086a:	d8d1      	bhi.n	8000810 <PN532_WriteFrame+0xda>
    }
    frame[length + 5] = ~checksum & 0xFF;
 800086c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000870:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	3305      	adds	r3, #5
 8000878:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 800087c:	43d2      	mvns	r2, r2
 800087e:	b2d1      	uxtb	r1, r2
 8000880:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000884:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000888:	54d1      	strb	r1, [r2, r3]
    frame[length + 6] = PN532_POSTAMBLE;
 800088a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800088e:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	3306      	adds	r3, #6
 8000896:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800089a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800089e:	2100      	movs	r1, #0
 80008a0:	54d1      	strb	r1, [r2, r3]
    if (pn532->write_data(frame, length + 7) != PN532_STATUS_OK) {
 80008a2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80008a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80008b2:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 80008b6:	8812      	ldrh	r2, [r2, #0]
 80008b8:	3207      	adds	r2, #7
 80008ba:	b291      	uxth	r1, r2
 80008bc:	f107 0214 	add.w	r2, r7, #20
 80008c0:	4610      	mov	r0, r2
 80008c2:	4798      	blx	r3
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d002      	beq.n	80008d0 <PN532_WriteFrame+0x19a>
        return PN532_STATUS_ERROR;
 80008ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008ce:	e000      	b.n	80008d2 <PN532_WriteFrame+0x19c>
    }
    return PN532_STATUS_OK;
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <PN532_ReadFrame>:
/**
  * @brief: Read a response frame from the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns frame length or -1 if there is an error parsing the frame.
  */
int PN532_ReadFrame(PN532* pn532, uint8_t* response, uint16_t length) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b0c8      	sub	sp, #288	; 0x120
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80008e6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80008ea:	6018      	str	r0, [r3, #0]
 80008ec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80008f0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80008f4:	6019      	str	r1, [r3, #0]
 80008f6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80008fa:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80008fe:	801a      	strh	r2, [r3, #0]
    uint8_t buff[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    // Read frame with expected length of data.
    pn532->read_data(buff, length + 7);
 8000906:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800090a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000916:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 800091a:	8812      	ldrh	r2, [r2, #0]
 800091c:	3207      	adds	r2, #7
 800091e:	b291      	uxth	r1, r2
 8000920:	f107 0214 	add.w	r2, r7, #20
 8000924:	4610      	mov	r0, r2
 8000926:	4798      	blx	r3
    // Swallow all the 0x00 values that preceed 0xFF.
    uint8_t offset = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    while (buff[offset] == 0x00) {
 800092e:	e019      	b.n	8000964 <PN532_ReadFrame+0x88>
        offset += 1;
 8000930:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000934:	3301      	adds	r3, #1
 8000936:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
        if (offset >= length + 8){
 800093a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800093e:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	1dda      	adds	r2, r3, #7
 8000946:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800094a:	429a      	cmp	r2, r3
 800094c:	da0a      	bge.n	8000964 <PN532_ReadFrame+0x88>
            pn532->log("Response frame preamble does not contain 0x00FF!");
 800094e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000952:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	485b      	ldr	r0, [pc, #364]	; (8000ac8 <PN532_ReadFrame+0x1ec>)
 800095c:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 800095e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000962:	e0ab      	b.n	8000abc <PN532_ReadFrame+0x1e0>
    while (buff[offset] == 0x00) {
 8000964:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000968:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800096c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000970:	5cd3      	ldrb	r3, [r2, r3]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d0dc      	beq.n	8000930 <PN532_ReadFrame+0x54>
        }
    }
    if (buff[offset] != 0xFF) {
 8000976:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800097a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800097e:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000982:	5cd3      	ldrb	r3, [r2, r3]
 8000984:	2bff      	cmp	r3, #255	; 0xff
 8000986:	d00a      	beq.n	800099e <PN532_ReadFrame+0xc2>
        pn532->log("Response frame preamble does not contain 0x00FF!");
 8000988:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800098c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	484c      	ldr	r0, [pc, #304]	; (8000ac8 <PN532_ReadFrame+0x1ec>)
 8000996:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800099c:	e08e      	b.n	8000abc <PN532_ReadFrame+0x1e0>
    }
    offset += 1;
 800099e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80009a2:	3301      	adds	r3, #1
 80009a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    if (offset >= length + 8) {
 80009a8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80009ac:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	1dda      	adds	r2, r3, #7
 80009b4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80009b8:	429a      	cmp	r2, r3
 80009ba:	da0a      	bge.n	80009d2 <PN532_ReadFrame+0xf6>
        pn532->log("Response contains no data!");
 80009bc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80009c0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	695b      	ldr	r3, [r3, #20]
 80009c8:	4840      	ldr	r0, [pc, #256]	; (8000acc <PN532_ReadFrame+0x1f0>)
 80009ca:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80009cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009d0:	e074      	b.n	8000abc <PN532_ReadFrame+0x1e0>
    }
    // Check length & length checksum match.
    uint8_t frame_len = buff[offset];
 80009d2:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80009d6:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80009da:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80009de:	5cd3      	ldrb	r3, [r2, r3]
 80009e0:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    if (((frame_len + buff[offset+1]) & 0xFF) != 0) {
 80009e4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80009e8:	3301      	adds	r3, #1
 80009ea:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80009ee:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80009f2:	5cd2      	ldrb	r2, [r2, r3]
 80009f4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80009f8:	4413      	add	r3, r2
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d00a      	beq.n	8000a16 <PN532_ReadFrame+0x13a>
        pn532->log("Response length checksum did not match length!");
 8000a00:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000a04:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	695b      	ldr	r3, [r3, #20]
 8000a0c:	4830      	ldr	r0, [pc, #192]	; (8000ad0 <PN532_ReadFrame+0x1f4>)
 8000a0e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000a10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a14:	e052      	b.n	8000abc <PN532_ReadFrame+0x1e0>
    }
    // Check frame checksum value matches bytes.
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8000a16:	2300      	movs	r3, #0
 8000a18:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000a1c:	e014      	b.n	8000a48 <PN532_ReadFrame+0x16c>
        checksum += buff[offset + 2 + i];
 8000a1e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000a22:	1c9a      	adds	r2, r3, #2
 8000a24:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000a28:	4413      	add	r3, r2
 8000a2a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000a2e:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000a32:	5cd2      	ldrb	r2, [r2, r3]
 8000a34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000a38:	4413      	add	r3, r2
 8000a3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8000a3e:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000a42:	3301      	adds	r3, #1
 8000a44:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000a48:	f897 211b 	ldrb.w	r2, [r7, #283]	; 0x11b
 8000a4c:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d2e4      	bcs.n	8000a1e <PN532_ReadFrame+0x142>
    }
    checksum &= 0xFF;
    if (checksum != 0) {
 8000a54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d00a      	beq.n	8000a72 <PN532_ReadFrame+0x196>
        pn532->log("Response checksum did not match expected checksum");
 8000a5c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000a60:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	695b      	ldr	r3, [r3, #20]
 8000a68:	481a      	ldr	r0, [pc, #104]	; (8000ad4 <PN532_ReadFrame+0x1f8>)
 8000a6a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000a6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a70:	e024      	b.n	8000abc <PN532_ReadFrame+0x1e0>
    }
    // Return frame data.
    for (uint8_t i = 0; i < frame_len; i++) {
 8000a72:	2300      	movs	r3, #0
 8000a74:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 8000a78:	e018      	b.n	8000aac <PN532_ReadFrame+0x1d0>
        response[i] = buff[offset + 2 + i];
 8000a7a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000a7e:	1c9a      	adds	r2, r3, #2
 8000a80:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8000a84:	441a      	add	r2, r3
 8000a86:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8000a8a:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8000a8e:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 8000a92:	6809      	ldr	r1, [r1, #0]
 8000a94:	440b      	add	r3, r1
 8000a96:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8000a9a:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8000a9e:	5c8a      	ldrb	r2, [r1, r2]
 8000aa0:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame_len; i++) {
 8000aa2:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 8000aac:	f897 211c 	ldrb.w	r2, [r7, #284]	; 0x11c
 8000ab0:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d3e0      	bcc.n	8000a7a <PN532_ReadFrame+0x19e>
    }
    return frame_len;
 8000ab8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	08004fe4 	.word	0x08004fe4
 8000acc:	08005018 	.word	0x08005018
 8000ad0:	08005034 	.word	0x08005034
 8000ad4:	08005064 	.word	0x08005064

08000ad8 <PN532_CallFunction>:
    uint8_t* response,
    uint16_t response_length,
    uint8_t* params,
    uint16_t params_length,
    uint32_t timeout
) {
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b0c7      	sub	sp, #284	; 0x11c
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8000ae2:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 8000ae6:	6020      	str	r0, [r4, #0]
 8000ae8:	4608      	mov	r0, r1
 8000aea:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000aee:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 8000af2:	600a      	str	r2, [r1, #0]
 8000af4:	4619      	mov	r1, r3
 8000af6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000afa:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8000afe:	4602      	mov	r2, r0
 8000b00:	701a      	strb	r2, [r3, #0]
 8000b02:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000b06:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000b0a:	460a      	mov	r2, r1
 8000b0c:	801a      	strh	r2, [r3, #0]
    // Build frame data with command and parameters.
    uint8_t buff[PN532_FRAME_MAX_LENGTH];
    buff[0] = PN532_HOSTTOPN532;
 8000b0e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000b12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000b16:	22d4      	movs	r2, #212	; 0xd4
 8000b18:	701a      	strb	r2, [r3, #0]
    buff[1] = command & 0xFF;
 8000b1a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000b1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000b22:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000b26:	f2a2 120d 	subw	r2, r2, #269	; 0x10d
 8000b2a:	7812      	ldrb	r2, [r2, #0]
 8000b2c:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < params_length; i++) {
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000b34:	e012      	b.n	8000b5c <PN532_CallFunction+0x84>
        buff[2 + i] = params[i];
 8000b36:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000b3a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000b3e:	441a      	add	r2, r3
 8000b40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000b44:	3302      	adds	r3, #2
 8000b46:	7811      	ldrb	r1, [r2, #0]
 8000b48:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000b4c:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000b50:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < params_length; i++) {
 8000b52:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000b56:	3301      	adds	r3, #1
 8000b58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000b5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d8e5      	bhi.n	8000b36 <PN532_CallFunction+0x5e>
    }
    // Send frame and wait for response.
    if (PN532_WriteFrame(pn532, buff, params_length + 2) != PN532_STATUS_OK) {
 8000b6a:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 8000b6e:	3302      	adds	r3, #2
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	f107 0110 	add.w	r1, r7, #16
 8000b76:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000b7a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b7e:	6818      	ldr	r0, [r3, #0]
 8000b80:	f7ff fdd9 	bl	8000736 <PN532_WriteFrame>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d011      	beq.n	8000bae <PN532_CallFunction+0xd6>
        pn532->wakeup();
 8000b8a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000b8e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	691b      	ldr	r3, [r3, #16]
 8000b96:	4798      	blx	r3
        pn532->log("Trying to wakeup");
 8000b98:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000b9c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	695b      	ldr	r3, [r3, #20]
 8000ba4:	485b      	ldr	r0, [pc, #364]	; (8000d14 <PN532_CallFunction+0x23c>)
 8000ba6:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000ba8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bac:	e0ac      	b.n	8000d08 <PN532_CallFunction+0x230>
    }
    if (!pn532->wait_ready(timeout)) {
 8000bae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000bb2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000bbe:	4798      	blx	r3
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	f083 0301 	eor.w	r3, r3, #1
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d002      	beq.n	8000bd2 <PN532_CallFunction+0xfa>
        return PN532_STATUS_ERROR;
 8000bcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bd0:	e09a      	b.n	8000d08 <PN532_CallFunction+0x230>
    }
    // Verify ACK response and wait to be ready for function response.
    pn532->read_data(buff, sizeof(PN532_ACK));
 8000bd2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000bd6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f107 0210 	add.w	r2, r7, #16
 8000be2:	2106      	movs	r1, #6
 8000be4:	4610      	mov	r0, r2
 8000be6:	4798      	blx	r3
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8000be8:	2300      	movs	r3, #0
 8000bea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8000bee:	e01c      	b.n	8000c2a <PN532_CallFunction+0x152>
        if (PN532_ACK[i] != buff[i]) {
 8000bf0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000bf4:	4a48      	ldr	r2, [pc, #288]	; (8000d18 <PN532_CallFunction+0x240>)
 8000bf6:	5cd2      	ldrb	r2, [r2, r3]
 8000bf8:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000bfc:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000c00:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8000c04:	5ccb      	ldrb	r3, [r1, r3]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d00a      	beq.n	8000c20 <PN532_CallFunction+0x148>
            pn532->log("Did not receive expected ACK from PN532!");
 8000c0a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000c0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	4841      	ldr	r0, [pc, #260]	; (8000d1c <PN532_CallFunction+0x244>)
 8000c18:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c1e:	e073      	b.n	8000d08 <PN532_CallFunction+0x230>
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8000c20:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000c24:	3301      	adds	r3, #1
 8000c26:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8000c2a:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000c2e:	2b05      	cmp	r3, #5
 8000c30:	d9de      	bls.n	8000bf0 <PN532_CallFunction+0x118>
        }
    }
    if (!pn532->wait_ready(timeout)) {
 8000c32:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000c36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000c42:	4798      	blx	r3
 8000c44:	4603      	mov	r3, r0
 8000c46:	f083 0301 	eor.w	r3, r3, #1
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d002      	beq.n	8000c56 <PN532_CallFunction+0x17e>
        return PN532_STATUS_ERROR;
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c54:	e058      	b.n	8000d08 <PN532_CallFunction+0x230>
    }
    // Read response bytes.
    int frame_len = PN532_ReadFrame(pn532, buff, response_length + 2);
 8000c56:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000c5a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	3302      	adds	r3, #2
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	f107 0110 	add.w	r1, r7, #16
 8000c68:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000c6c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000c70:	6818      	ldr	r0, [r3, #0]
 8000c72:	f7ff fe33 	bl	80008dc <PN532_ReadFrame>
 8000c76:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    // Check that response is for the called function.
    if (! ((buff[0] == PN532_PN532TOHOST) && (buff[1] == (command+1)))) {
 8000c7a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000c7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2bd5      	cmp	r3, #213	; 0xd5
 8000c86:	d10d      	bne.n	8000ca4 <PN532_CallFunction+0x1cc>
 8000c88:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000c8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000c90:	785b      	ldrb	r3, [r3, #1]
 8000c92:	461a      	mov	r2, r3
 8000c94:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000c98:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d00a      	beq.n	8000cba <PN532_CallFunction+0x1e2>
        pn532->log("Received unexpected command response!");
 8000ca4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000ca8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	695b      	ldr	r3, [r3, #20]
 8000cb0:	481b      	ldr	r0, [pc, #108]	; (8000d20 <PN532_CallFunction+0x248>)
 8000cb2:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000cb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cb8:	e026      	b.n	8000d08 <PN532_CallFunction+0x230>
    }
    // Return response data.
    for (uint8_t i = 0; i < response_length; i++) {
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8000cc0:	e015      	b.n	8000cee <PN532_CallFunction+0x216>
        response[i] = buff[i + 2];
 8000cc2:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000cc6:	1c9a      	adds	r2, r3, #2
 8000cc8:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000ccc:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000cd0:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 8000cd4:	6809      	ldr	r1, [r1, #0]
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000cdc:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8000ce0:	5c8a      	ldrb	r2, [r1, r2]
 8000ce2:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < response_length; i++) {
 8000ce4:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000ce8:	3301      	adds	r3, #1
 8000cea:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8000cee:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000cf8:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000cfc:	8812      	ldrh	r2, [r2, #0]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d8df      	bhi.n	8000cc2 <PN532_CallFunction+0x1ea>
    }
    // The the number of bytes read
    return frame_len - 2;
 8000d02:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000d06:	3b02      	subs	r3, #2
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd90      	pop	{r4, r7, pc}
 8000d12:	bf00      	nop
 8000d14:	08005098 	.word	0x08005098
 8000d18:	08005180 	.word	0x08005180
 8000d1c:	080050ac 	.word	0x080050ac
 8000d20:	080050d8 	.word	0x080050d8

08000d24 <PN532_GetFirmwareVersion>:

/**
  * @brief: Call PN532 GetFirmwareVersion function and return a buff with the IC,
  *  Ver, Rev, and Support values.
  */
int PN532_GetFirmwareVersion(PN532* pn532, uint8_t* version) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af04      	add	r7, sp, #16
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
    // length of version: 4
    if (PN532_CallFunction(pn532, PN532_COMMAND_GETFIRMWAREVERSION,
 8000d2e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d32:	9302      	str	r3, [sp, #8]
 8000d34:	2300      	movs	r3, #0
 8000d36:	9301      	str	r3, [sp, #4]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	683a      	ldr	r2, [r7, #0]
 8000d40:	2102      	movs	r1, #2
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff fec8 	bl	8000ad8 <PN532_CallFunction>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d4e:	d106      	bne.n	8000d5e <PN532_GetFirmwareVersion+0x3a>
                           version, 4, NULL, 0, 500) == PN532_STATUS_ERROR) {
        pn532->log("Failed to detect the PN532");
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	695b      	ldr	r3, [r3, #20]
 8000d54:	4804      	ldr	r0, [pc, #16]	; (8000d68 <PN532_GetFirmwareVersion+0x44>)
 8000d56:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000d58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d5c:	e000      	b.n	8000d60 <PN532_GetFirmwareVersion+0x3c>
    }
    return PN532_STATUS_OK;
 8000d5e:	2300      	movs	r3, #0
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	08005100 	.word	0x08005100

08000d6c <PN532_SamConfiguration>:

/**
  * @brief: Configure the PN532 to read MiFare cards.
  */
int PN532_SamConfiguration(PN532* pn532) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af04      	add	r7, sp, #16
 8000d72:	6078      	str	r0, [r7, #4]
    // - 0x01, normal mode
    // - 0x14, timeout 50ms * 20 = 1 second
    // - 0x01, use IRQ pin
    // Note that no other verification is necessary as call_function will
    // check the command was executed as expected.
    uint8_t params[] = {0x01, 0x14, 0x01};
 8000d74:	4a0d      	ldr	r2, [pc, #52]	; (8000dac <PN532_SamConfiguration+0x40>)
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	6812      	ldr	r2, [r2, #0]
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	8019      	strh	r1, [r3, #0]
 8000d80:	3302      	adds	r3, #2
 8000d82:	0c12      	lsrs	r2, r2, #16
 8000d84:	701a      	strb	r2, [r3, #0]
    PN532_CallFunction(pn532, PN532_COMMAND_SAMCONFIGURATION,
 8000d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8a:	9302      	str	r3, [sp, #8]
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	9301      	str	r3, [sp, #4]
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	2300      	movs	r3, #0
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2114      	movs	r1, #20
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff fe9b 	bl	8000ad8 <PN532_CallFunction>
                       NULL, 0, params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    return PN532_STATUS_OK;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	0800511c 	.word	0x0800511c

08000db0 <PN532_ReadPassiveTarget>:
int PN532_ReadPassiveTarget(
    PN532* pn532,
    uint8_t* response,
    uint8_t card_baud,
    uint32_t timeout
) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b090      	sub	sp, #64	; 0x40
 8000db4:	af04      	add	r7, sp, #16
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	71fb      	strb	r3, [r7, #7]
    // Send passive read command for 1 card.  Expect at most a 7 byte UUID.
    uint8_t params[] = {0x01, card_baud};
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    uint8_t buff[19];
    int length = PN532_CallFunction(pn532, PN532_COMMAND_INLISTPASSIVETARGET,
 8000dcc:	f107 0210 	add.w	r2, r7, #16
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	9302      	str	r3, [sp, #8]
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	9301      	str	r3, [sp, #4]
 8000dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	2313      	movs	r3, #19
 8000de0:	214a      	movs	r1, #74	; 0x4a
 8000de2:	68f8      	ldr	r0, [r7, #12]
 8000de4:	f7ff fe78 	bl	8000ad8 <PN532_CallFunction>
 8000de8:	62b8      	str	r0, [r7, #40]	; 0x28
                        buff, sizeof(buff), params, sizeof(params), timeout);
    if (length < 0) {
 8000dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	da02      	bge.n	8000df6 <PN532_ReadPassiveTarget+0x46>
        return PN532_STATUS_ERROR; // No card found
 8000df0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000df4:	e02e      	b.n	8000e54 <PN532_ReadPassiveTarget+0xa4>
    }
    // Check only 1 card with up to a 7 byte UID is present.
    if (buff[0] != 0x01) {
 8000df6:	7c3b      	ldrb	r3, [r7, #16]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d006      	beq.n	8000e0a <PN532_ReadPassiveTarget+0x5a>
        pn532->log("More than one card detected!");
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	4816      	ldr	r0, [pc, #88]	; (8000e5c <PN532_ReadPassiveTarget+0xac>)
 8000e02:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000e04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e08:	e024      	b.n	8000e54 <PN532_ReadPassiveTarget+0xa4>
    }
    if (buff[5] > 7) {
 8000e0a:	7d7b      	ldrb	r3, [r7, #21]
 8000e0c:	2b07      	cmp	r3, #7
 8000e0e:	d906      	bls.n	8000e1e <PN532_ReadPassiveTarget+0x6e>
        pn532->log("Found card with unexpectedly long UID!");
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	695b      	ldr	r3, [r3, #20]
 8000e14:	4812      	ldr	r0, [pc, #72]	; (8000e60 <PN532_ReadPassiveTarget+0xb0>)
 8000e16:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000e18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e1c:	e01a      	b.n	8000e54 <PN532_ReadPassiveTarget+0xa4>
    }
    for (uint8_t i = 0; i < buff[5]; i++) {
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000e24:	e010      	b.n	8000e48 <PN532_ReadPassiveTarget+0x98>
        response[i] = buff[6 + i];
 8000e26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e2a:	1d9a      	adds	r2, r3, #6
 8000e2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e30:	68b9      	ldr	r1, [r7, #8]
 8000e32:	440b      	add	r3, r1
 8000e34:	3230      	adds	r2, #48	; 0x30
 8000e36:	443a      	add	r2, r7
 8000e38:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8000e3c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < buff[5]; i++) {
 8000e3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e42:	3301      	adds	r3, #1
 8000e44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000e48:	7d7b      	ldrb	r3, [r7, #21]
 8000e4a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d3e9      	bcc.n	8000e26 <PN532_ReadPassiveTarget+0x76>
    }
    return buff[5];
 8000e52:	7d7b      	ldrb	r3, [r7, #21]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3730      	adds	r7, #48	; 0x30
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	08005120 	.word	0x08005120
 8000e60:	08005140 	.word	0x08005140

08000e64 <PN532_Reset>:
extern SPI_HandleTypeDef hspi1;

/**************************************************************************
 * Reset and Log implements
 **************************************************************************/
int PN532_Reset(void) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e6e:	480e      	ldr	r0, [pc, #56]	; (8000ea8 <PN532_Reset+0x44>)
 8000e70:	f000 ffa8 	bl	8001dc4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000e74:	2064      	movs	r0, #100	; 0x64
 8000e76:	f000 fc47 	bl	8001708 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e80:	4809      	ldr	r0, [pc, #36]	; (8000ea8 <PN532_Reset+0x44>)
 8000e82:	f000 ff9f 	bl	8001dc4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000e86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e8a:	f000 fc3d 	bl	8001708 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000e8e:	2201      	movs	r2, #1
 8000e90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e94:	4804      	ldr	r0, [pc, #16]	; (8000ea8 <PN532_Reset+0x44>)
 8000e96:	f000 ff95 	bl	8001dc4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000e9a:	2064      	movs	r0, #100	; 0x64
 8000e9c:	f000 fc34 	bl	8001708 <HAL_Delay>
    return PN532_STATUS_OK;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40010800 	.word	0x40010800

08000eac <PN532_Log>:

void PN532_Log(const char* log) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
    printf("%s\r\n", log);
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <PN532_Log+0x18>)
 8000eb8:	f002 ffce 	bl	8003e58 <iprintf>
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	08005168 	.word	0x08005168

08000ec8 <spi_rw>:
        num >>= 1;
    }
    return result;
}

void spi_rw(uint8_t* data, uint8_t count) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af02      	add	r7, sp, #8
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	480d      	ldr	r0, [pc, #52]	; (8000f10 <spi_rw+0x48>)
 8000eda:	f000 ff73 	bl	8001dc4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f000 fc12 	bl	8001708 <HAL_Delay>
    HAL_SPI_TransmitReceive(&hspi1, data, data, count, _SPI_TIMEOUT);
    for (uint8_t i = 0; i < count; i++) {
        data[i] = reverse_bit(data[i]);
    }
#else
    HAL_SPI_TransmitReceive(&hspi1, data, data, count, _SPI_TIMEOUT);
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	220a      	movs	r2, #10
 8000eea:	9200      	str	r2, [sp, #0]
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	4808      	ldr	r0, [pc, #32]	; (8000f14 <spi_rw+0x4c>)
 8000ef2:	f001 fc1d 	bl	8002730 <HAL_SPI_TransmitReceive>
#endif
    HAL_Delay(1);
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f000 fc06 	bl	8001708 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000efc:	2201      	movs	r2, #1
 8000efe:	2101      	movs	r1, #1
 8000f00:	4803      	ldr	r0, [pc, #12]	; (8000f10 <spi_rw+0x48>)
 8000f02:	f000 ff5f 	bl	8001dc4 <HAL_GPIO_WritePin>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40010c00 	.word	0x40010c00
 8000f14:	2000008c 	.word	0x2000008c

08000f18 <PN532_SPI_ReadData>:

int PN532_SPI_ReadData(uint8_t* data, uint16_t count) {
 8000f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f1c:	b087      	sub	sp, #28
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	460b      	mov	r3, r1
 8000f24:	807b      	strh	r3, [r7, #2]
 8000f26:	466b      	mov	r3, sp
 8000f28:	461e      	mov	r6, r3
    uint8_t frame[count + 1];
 8000f2a:	887b      	ldrh	r3, [r7, #2]
 8000f2c:	1c59      	adds	r1, r3, #1
 8000f2e:	1e4b      	subs	r3, r1, #1
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	460a      	mov	r2, r1
 8000f34:	2300      	movs	r3, #0
 8000f36:	4690      	mov	r8, r2
 8000f38:	4699      	mov	r9, r3
 8000f3a:	f04f 0200 	mov.w	r2, #0
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000f46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000f4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f4e:	460a      	mov	r2, r1
 8000f50:	2300      	movs	r3, #0
 8000f52:	4614      	mov	r4, r2
 8000f54:	461d      	mov	r5, r3
 8000f56:	f04f 0200 	mov.w	r2, #0
 8000f5a:	f04f 0300 	mov.w	r3, #0
 8000f5e:	00eb      	lsls	r3, r5, #3
 8000f60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f64:	00e2      	lsls	r2, r4, #3
 8000f66:	460b      	mov	r3, r1
 8000f68:	3307      	adds	r3, #7
 8000f6a:	08db      	lsrs	r3, r3, #3
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	ebad 0d03 	sub.w	sp, sp, r3
 8000f72:	466b      	mov	r3, sp
 8000f74:	3300      	adds	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAREAD;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	701a      	strb	r2, [r3, #0]
    HAL_Delay(5);
 8000f7e:	2005      	movs	r0, #5
 8000f80:	f000 fbc2 	bl	8001708 <HAL_Delay>
    spi_rw(frame, count + 1);
 8000f84:	887b      	ldrh	r3, [r7, #2]
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	3301      	adds	r3, #1
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	68f8      	ldr	r0, [r7, #12]
 8000f90:	f7ff ff9a 	bl	8000ec8 <spi_rw>
    for (uint8_t i = 0; i < count; i++) {
 8000f94:	2300      	movs	r3, #0
 8000f96:	75fb      	strb	r3, [r7, #23]
 8000f98:	e00a      	b.n	8000fb0 <PN532_SPI_ReadData+0x98>
        data[i] = frame[i + 1];
 8000f9a:	7dfb      	ldrb	r3, [r7, #23]
 8000f9c:	1c5a      	adds	r2, r3, #1
 8000f9e:	7dfb      	ldrb	r3, [r7, #23]
 8000fa0:	6879      	ldr	r1, [r7, #4]
 8000fa2:	440b      	add	r3, r1
 8000fa4:	68f9      	ldr	r1, [r7, #12]
 8000fa6:	5c8a      	ldrb	r2, [r1, r2]
 8000fa8:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 8000faa:	7dfb      	ldrb	r3, [r7, #23]
 8000fac:	3301      	adds	r3, #1
 8000fae:	75fb      	strb	r3, [r7, #23]
 8000fb0:	7dfb      	ldrb	r3, [r7, #23]
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	887a      	ldrh	r2, [r7, #2]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d8ef      	bhi.n	8000f9a <PN532_SPI_ReadData+0x82>
    }
    return PN532_STATUS_OK;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	46b5      	mov	sp, r6
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	371c      	adds	r7, #28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000fc8 <PN532_SPI_WriteData>:

int PN532_SPI_WriteData(uint8_t *data, uint16_t count) {
 8000fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fcc:	b087      	sub	sp, #28
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	807b      	strh	r3, [r7, #2]
 8000fd6:	466b      	mov	r3, sp
 8000fd8:	461e      	mov	r6, r3
    uint8_t frame[count + 1];
 8000fda:	887b      	ldrh	r3, [r7, #2]
 8000fdc:	1c59      	adds	r1, r3, #1
 8000fde:	1e4b      	subs	r3, r1, #1
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	460a      	mov	r2, r1
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	4690      	mov	r8, r2
 8000fe8:	4699      	mov	r9, r3
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	f04f 0300 	mov.w	r3, #0
 8000ff2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ff6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ffa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ffe:	460a      	mov	r2, r1
 8001000:	2300      	movs	r3, #0
 8001002:	4614      	mov	r4, r2
 8001004:	461d      	mov	r5, r3
 8001006:	f04f 0200 	mov.w	r2, #0
 800100a:	f04f 0300 	mov.w	r3, #0
 800100e:	00eb      	lsls	r3, r5, #3
 8001010:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001014:	00e2      	lsls	r2, r4, #3
 8001016:	460b      	mov	r3, r1
 8001018:	3307      	adds	r3, #7
 800101a:	08db      	lsrs	r3, r3, #3
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	ebad 0d03 	sub.w	sp, sp, r3
 8001022:	466b      	mov	r3, sp
 8001024:	3300      	adds	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAWRITE;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2201      	movs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 800102e:	2300      	movs	r3, #0
 8001030:	75fb      	strb	r3, [r7, #23]
 8001032:	e00a      	b.n	800104a <PN532_SPI_WriteData+0x82>
        frame[i + 1] = data[i];
 8001034:	7dfb      	ldrb	r3, [r7, #23]
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	441a      	add	r2, r3
 800103a:	7dfb      	ldrb	r3, [r7, #23]
 800103c:	3301      	adds	r3, #1
 800103e:	7811      	ldrb	r1, [r2, #0]
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < count; i++) {
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	3301      	adds	r3, #1
 8001048:	75fb      	strb	r3, [r7, #23]
 800104a:	7dfb      	ldrb	r3, [r7, #23]
 800104c:	b29b      	uxth	r3, r3
 800104e:	887a      	ldrh	r2, [r7, #2]
 8001050:	429a      	cmp	r2, r3
 8001052:	d8ef      	bhi.n	8001034 <PN532_SPI_WriteData+0x6c>
    }
    spi_rw(frame, count + 1);
 8001054:	887b      	ldrh	r3, [r7, #2]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	3301      	adds	r3, #1
 800105a:	b2db      	uxtb	r3, r3
 800105c:	4619      	mov	r1, r3
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f7ff ff32 	bl	8000ec8 <spi_rw>
    return PN532_STATUS_OK;
 8001064:	2300      	movs	r3, #0
 8001066:	46b5      	mov	sp, r6
}
 8001068:	4618      	mov	r0, r3
 800106a:	371c      	adds	r7, #28
 800106c:	46bd      	mov	sp, r7
 800106e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001072 <PN532_SPI_WaitReady>:

bool PN532_SPI_WaitReady(uint32_t timeout) {
 8001072:	b580      	push	{r7, lr}
 8001074:	b084      	sub	sp, #16
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
    uint8_t status[] = {_SPI_STATREAD, 0x00};
 800107a:	2302      	movs	r3, #2
 800107c:	813b      	strh	r3, [r7, #8]
    uint32_t tickstart = HAL_GetTick();
 800107e:	f000 fb39 	bl	80016f4 <HAL_GetTick>
 8001082:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - tickstart < timeout) {
 8001084:	e010      	b.n	80010a8 <PN532_SPI_WaitReady+0x36>
        HAL_Delay(10);
 8001086:	200a      	movs	r0, #10
 8001088:	f000 fb3e 	bl	8001708 <HAL_Delay>
        spi_rw(status, sizeof(status));
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	2102      	movs	r1, #2
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ff18 	bl	8000ec8 <spi_rw>
        if (status[1] == _SPI_READY) {
 8001098:	7a7b      	ldrb	r3, [r7, #9]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d101      	bne.n	80010a2 <PN532_SPI_WaitReady+0x30>
            return true;
 800109e:	2301      	movs	r3, #1
 80010a0:	e00b      	b.n	80010ba <PN532_SPI_WaitReady+0x48>
        } else {
            HAL_Delay(5);
 80010a2:	2005      	movs	r0, #5
 80010a4:	f000 fb30 	bl	8001708 <HAL_Delay>
    while (HAL_GetTick() - tickstart < timeout) {
 80010a8:	f000 fb24 	bl	80016f4 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d8e6      	bhi.n	8001086 <PN532_SPI_WaitReady+0x14>
        }
    }
    return false;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <PN532_SPI_Wakeup>:

int PN532_SPI_Wakeup(void) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
    // Send any special commands/data to wake up PN532
    uint8_t data[] = {0x00};
 80010ca:	2300      	movs	r3, #0
 80010cc:	713b      	strb	r3, [r7, #4]
    HAL_Delay(1000);
 80010ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010d2:	f000 fb19 	bl	8001708 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2101      	movs	r1, #1
 80010da:	480a      	ldr	r0, [pc, #40]	; (8001104 <PN532_SPI_Wakeup+0x40>)
 80010dc:	f000 fe72 	bl	8001dc4 <HAL_GPIO_WritePin>
    HAL_Delay(2); // T_osc_start
 80010e0:	2002      	movs	r0, #2
 80010e2:	f000 fb11 	bl	8001708 <HAL_Delay>
    spi_rw(data, 1);
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2101      	movs	r1, #1
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff feec 	bl	8000ec8 <spi_rw>
    HAL_Delay(1000);
 80010f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010f4:	f000 fb08 	bl	8001708 <HAL_Delay>
    return PN532_STATUS_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40010c00 	.word	0x40010c00

08001108 <PN532_SPI_Init>:

void PN532_SPI_Init(PN532* pn532) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
    // init the pn532 functions
    pn532->reset =  PN532_Reset;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a0c      	ldr	r2, [pc, #48]	; (8001144 <PN532_SPI_Init+0x3c>)
 8001114:	601a      	str	r2, [r3, #0]
    pn532->read_data = PN532_SPI_ReadData;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <PN532_SPI_Init+0x40>)
 800111a:	605a      	str	r2, [r3, #4]
    pn532->write_data = PN532_SPI_WriteData;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a0b      	ldr	r2, [pc, #44]	; (800114c <PN532_SPI_Init+0x44>)
 8001120:	609a      	str	r2, [r3, #8]
    pn532->wait_ready = PN532_SPI_WaitReady;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <PN532_SPI_Init+0x48>)
 8001126:	60da      	str	r2, [r3, #12]
    pn532->wakeup = PN532_SPI_Wakeup;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <PN532_SPI_Init+0x4c>)
 800112c:	611a      	str	r2, [r3, #16]
    pn532->log = PN532_Log;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a09      	ldr	r2, [pc, #36]	; (8001158 <PN532_SPI_Init+0x50>)
 8001132:	615a      	str	r2, [r3, #20]

    // hardware wakeup
    pn532->wakeup();
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	4798      	blx	r3
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	08000e65 	.word	0x08000e65
 8001148:	08000f19 	.word	0x08000f19
 800114c:	08000fc9 	.word	0x08000fc9
 8001150:	08001073 	.word	0x08001073
 8001154:	080010c5 	.word	0x080010c5
 8001158:	08000ead 	.word	0x08000ead

0800115c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <HAL_MspInit+0x5c>)
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <HAL_MspInit+0x5c>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6193      	str	r3, [r2, #24]
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_MspInit+0x5c>)
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <HAL_MspInit+0x5c>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	4a0e      	ldr	r2, [pc, #56]	; (80011b8 <HAL_MspInit+0x5c>)
 8001180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001184:	61d3      	str	r3, [r2, #28]
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <HAL_MspInit+0x5c>)
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <HAL_MspInit+0x60>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	4a04      	ldr	r2, [pc, #16]	; (80011bc <HAL_MspInit+0x60>)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ae:	bf00      	nop
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40010000 	.word	0x40010000

080011c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a1b      	ldr	r2, [pc, #108]	; (8001248 <HAL_SPI_MspInit+0x88>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d12f      	bne.n	8001240 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011e0:	4b1a      	ldr	r3, [pc, #104]	; (800124c <HAL_SPI_MspInit+0x8c>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	4a19      	ldr	r2, [pc, #100]	; (800124c <HAL_SPI_MspInit+0x8c>)
 80011e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011ea:	6193      	str	r3, [r2, #24]
 80011ec:	4b17      	ldr	r3, [pc, #92]	; (800124c <HAL_SPI_MspInit+0x8c>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f8:	4b14      	ldr	r3, [pc, #80]	; (800124c <HAL_SPI_MspInit+0x8c>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	4a13      	ldr	r2, [pc, #76]	; (800124c <HAL_SPI_MspInit+0x8c>)
 80011fe:	f043 0304 	orr.w	r3, r3, #4
 8001202:	6193      	str	r3, [r2, #24]
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <HAL_SPI_MspInit+0x8c>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001210:	23a0      	movs	r3, #160	; 0xa0
 8001212:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001218:	2303      	movs	r3, #3
 800121a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	4619      	mov	r1, r3
 8001222:	480b      	ldr	r0, [pc, #44]	; (8001250 <HAL_SPI_MspInit+0x90>)
 8001224:	f000 fc52 	bl	8001acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001228:	2340      	movs	r3, #64	; 0x40
 800122a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	4619      	mov	r1, r3
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <HAL_SPI_MspInit+0x90>)
 800123c:	f000 fc46 	bl	8001acc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001240:	bf00      	nop
 8001242:	3720      	adds	r7, #32
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40013000 	.word	0x40013000
 800124c:	40021000 	.word	0x40021000
 8001250:	40010800 	.word	0x40010800

08001254 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001264:	d113      	bne.n	800128e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <HAL_TIM_Base_MspInit+0x44>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <HAL_TIM_Base_MspInit+0x44>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	61d3      	str	r3, [r2, #28]
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <HAL_TIM_Base_MspInit+0x44>)
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	201c      	movs	r0, #28
 8001284:	f000 fb3b 	bl	80018fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001288:	201c      	movs	r0, #28
 800128a:	f000 fb54 	bl	8001936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000

0800129c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0318 	add.w	r3, r7, #24
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a3f      	ldr	r2, [pc, #252]	; (80013b4 <HAL_UART_MspInit+0x118>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d13a      	bne.n	8001332 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012bc:	4b3e      	ldr	r3, [pc, #248]	; (80013b8 <HAL_UART_MspInit+0x11c>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	4a3d      	ldr	r2, [pc, #244]	; (80013b8 <HAL_UART_MspInit+0x11c>)
 80012c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c6:	6193      	str	r3, [r2, #24]
 80012c8:	4b3b      	ldr	r3, [pc, #236]	; (80013b8 <HAL_UART_MspInit+0x11c>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d4:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <HAL_UART_MspInit+0x11c>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	4a37      	ldr	r2, [pc, #220]	; (80013b8 <HAL_UART_MspInit+0x11c>)
 80012da:	f043 0304 	orr.w	r3, r3, #4
 80012de:	6193      	str	r3, [r2, #24]
 80012e0:	4b35      	ldr	r3, [pc, #212]	; (80013b8 <HAL_UART_MspInit+0x11c>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	f003 0304 	and.w	r3, r3, #4
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f6:	2303      	movs	r3, #3
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fa:	f107 0318 	add.w	r3, r7, #24
 80012fe:	4619      	mov	r1, r3
 8001300:	482e      	ldr	r0, [pc, #184]	; (80013bc <HAL_UART_MspInit+0x120>)
 8001302:	f000 fbe3 	bl	8001acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001306:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800130a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001314:	f107 0318 	add.w	r3, r7, #24
 8001318:	4619      	mov	r1, r3
 800131a:	4828      	ldr	r0, [pc, #160]	; (80013bc <HAL_UART_MspInit+0x120>)
 800131c:	f000 fbd6 	bl	8001acc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	2100      	movs	r1, #0
 8001324:	2025      	movs	r0, #37	; 0x25
 8001326:	f000 faea 	bl	80018fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800132a:	2025      	movs	r0, #37	; 0x25
 800132c:	f000 fb03 	bl	8001936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001330:	e03c      	b.n	80013ac <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a22      	ldr	r2, [pc, #136]	; (80013c0 <HAL_UART_MspInit+0x124>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d137      	bne.n	80013ac <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 800133c:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <HAL_UART_MspInit+0x11c>)
 800133e:	69db      	ldr	r3, [r3, #28]
 8001340:	4a1d      	ldr	r2, [pc, #116]	; (80013b8 <HAL_UART_MspInit+0x11c>)
 8001342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001346:	61d3      	str	r3, [r2, #28]
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <HAL_UART_MspInit+0x11c>)
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001354:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <HAL_UART_MspInit+0x11c>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	4a17      	ldr	r2, [pc, #92]	; (80013b8 <HAL_UART_MspInit+0x11c>)
 800135a:	f043 0304 	orr.w	r3, r3, #4
 800135e:	6193      	str	r3, [r2, #24]
 8001360:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <HAL_UART_MspInit+0x11c>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800136c:	2304      	movs	r3, #4
 800136e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001374:	2303      	movs	r3, #3
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f107 0318 	add.w	r3, r7, #24
 800137c:	4619      	mov	r1, r3
 800137e:	480f      	ldr	r0, [pc, #60]	; (80013bc <HAL_UART_MspInit+0x120>)
 8001380:	f000 fba4 	bl	8001acc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001384:	2308      	movs	r3, #8
 8001386:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001390:	f107 0318 	add.w	r3, r7, #24
 8001394:	4619      	mov	r1, r3
 8001396:	4809      	ldr	r0, [pc, #36]	; (80013bc <HAL_UART_MspInit+0x120>)
 8001398:	f000 fb98 	bl	8001acc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800139c:	2200      	movs	r2, #0
 800139e:	2100      	movs	r1, #0
 80013a0:	2026      	movs	r0, #38	; 0x26
 80013a2:	f000 faac 	bl	80018fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013a6:	2026      	movs	r0, #38	; 0x26
 80013a8:	f000 fac5 	bl	8001936 <HAL_NVIC_EnableIRQ>
}
 80013ac:	bf00      	nop
 80013ae:	3728      	adds	r7, #40	; 0x28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40013800 	.word	0x40013800
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40010800 	.word	0x40010800
 80013c0:	40004400 	.word	0x40004400

080013c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <NMI_Handler+0x4>

080013ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <HardFault_Handler+0x4>

080013d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <MemManage_Handler+0x4>

080013d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013da:	e7fe      	b.n	80013da <BusFault_Handler+0x4>

080013dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <UsageFault_Handler+0x4>

080013e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr

080013ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr

080013fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr

08001406 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800140a:	f000 f961 	bl	80016d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(strlen(buffer)>0)
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <TIM2_IRQHandler+0x30>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d005      	beq.n	800142c <TIM2_IRQHandler+0x18>
			timer_count++;
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <TIM2_IRQHandler+0x34>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	3301      	adds	r3, #1
 8001426:	b2da      	uxtb	r2, r3
 8001428:	4b07      	ldr	r3, [pc, #28]	; (8001448 <TIM2_IRQHandler+0x34>)
 800142a:	701a      	strb	r2, [r3, #0]

		if(timer_count>5)
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <TIM2_IRQHandler+0x34>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b05      	cmp	r3, #5
 8001432:	d901      	bls.n	8001438 <TIM2_IRQHandler+0x24>
			Message_handler();
 8001434:	f7fe fec4 	bl	80001c0 <Message_handler>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001438:	4804      	ldr	r0, [pc, #16]	; (800144c <TIM2_IRQHandler+0x38>)
 800143a:	f001 fc10 	bl	8002c5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200002c4 	.word	0x200002c4
 8001448:	200002f6 	.word	0x200002f6
 800144c:	200000e4 	.word	0x200000e4

08001450 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001454:	4802      	ldr	r0, [pc, #8]	; (8001460 <USART1_IRQHandler+0x10>)
 8001456:	f002 f8d5 	bl	8003604 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	2000012c 	.word	0x2000012c

08001464 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_Receive(&huart2, (uint8_t*)&buffer[buffer_index++], 1, 10);
 8001468:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <USART2_IRQHandler+0x3c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	b2d1      	uxtb	r1, r2
 8001470:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <USART2_IRQHandler+0x3c>)
 8001472:	7011      	strb	r1, [r2, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <USART2_IRQHandler+0x40>)
 8001478:	18d1      	adds	r1, r2, r3
 800147a:	230a      	movs	r3, #10
 800147c:	2201      	movs	r2, #1
 800147e:	480a      	ldr	r0, [pc, #40]	; (80014a8 <USART2_IRQHandler+0x44>)
 8001480:	f002 f81d 	bl	80034be <HAL_UART_Receive>

	if(buffer[buffer_index-1] == '\n')
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <USART2_IRQHandler+0x3c>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	3b01      	subs	r3, #1
 800148a:	4a06      	ldr	r2, [pc, #24]	; (80014a4 <USART2_IRQHandler+0x40>)
 800148c:	5cd3      	ldrb	r3, [r2, r3]
 800148e:	2b0a      	cmp	r3, #10
 8001490:	d101      	bne.n	8001496 <USART2_IRQHandler+0x32>
		Message_handler();
 8001492:	f7fe fe95 	bl	80001c0 <Message_handler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001496:	4804      	ldr	r0, [pc, #16]	; (80014a8 <USART2_IRQHandler+0x44>)
 8001498:	f002 f8b4 	bl	8003604 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200002f7 	.word	0x200002f7
 80014a4:	200002c4 	.word	0x200002c4
 80014a8:	20000170 	.word	0x20000170

080014ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	e00a      	b.n	80014d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014be:	f3af 8000 	nop.w
 80014c2:	4601      	mov	r1, r0
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	60ba      	str	r2, [r7, #8]
 80014ca:	b2ca      	uxtb	r2, r1
 80014cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	3301      	adds	r3, #1
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	697a      	ldr	r2, [r7, #20]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	429a      	cmp	r2, r3
 80014da:	dbf0      	blt.n	80014be <_read+0x12>
	}

return len;
 80014dc:	687b      	ldr	r3, [r7, #4]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b086      	sub	sp, #24
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	60f8      	str	r0, [r7, #12]
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	e009      	b.n	800150c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	60ba      	str	r2, [r7, #8]
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f901 	bl	8000708 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	3301      	adds	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	429a      	cmp	r2, r3
 8001512:	dbf1      	blt.n	80014f8 <_write+0x12>
	}
	return len;
 8001514:	687b      	ldr	r3, [r7, #4]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <_close>:

int _close(int file)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
	return -1;
 8001526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001544:	605a      	str	r2, [r3, #4]
	return 0;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr

08001552 <_isatty>:

int _isatty(int file)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
	return 1;
 800155a:	2301      	movs	r3, #1
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr

08001566 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001566:	b480      	push	{r7}
 8001568:	b085      	sub	sp, #20
 800156a:	af00      	add	r7, sp, #0
 800156c:	60f8      	str	r0, [r7, #12]
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
	return 0;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
	...

08001580 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001588:	4a14      	ldr	r2, [pc, #80]	; (80015dc <_sbrk+0x5c>)
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <_sbrk+0x60>)
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001594:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <_sbrk+0x64>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d102      	bne.n	80015a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <_sbrk+0x64>)
 800159e:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <_sbrk+0x68>)
 80015a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a2:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <_sbrk+0x64>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d207      	bcs.n	80015c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b0:	f002 fc20 	bl	8003df4 <__errno>
 80015b4:	4603      	mov	r3, r0
 80015b6:	220c      	movs	r2, #12
 80015b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015be:	e009      	b.n	80015d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <_sbrk+0x64>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015c6:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <_sbrk+0x64>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	4a05      	ldr	r2, [pc, #20]	; (80015e4 <_sbrk+0x64>)
 80015d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015d2:	68fb      	ldr	r3, [r7, #12]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20002800 	.word	0x20002800
 80015e0:	00000400 	.word	0x00000400
 80015e4:	200002f8 	.word	0x200002f8
 80015e8:	20000310 	.word	0x20000310

080015ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015f8:	480c      	ldr	r0, [pc, #48]	; (800162c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015fa:	490d      	ldr	r1, [pc, #52]	; (8001630 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015fc:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001600:	e002      	b.n	8001608 <LoopCopyDataInit>

08001602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001606:	3304      	adds	r3, #4

08001608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800160c:	d3f9      	bcc.n	8001602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160e:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001610:	4c0a      	ldr	r4, [pc, #40]	; (800163c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001614:	e001      	b.n	800161a <LoopFillZerobss>

08001616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001618:	3204      	adds	r2, #4

0800161a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800161c:	d3fb      	bcc.n	8001616 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800161e:	f7ff ffe5 	bl	80015ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001622:	f002 fbed 	bl	8003e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001626:	f7fe fe31 	bl	800028c <main>
  bx lr
 800162a:	4770      	bx	lr
  ldr r0, =_sdata
 800162c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001630:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001634:	08005240 	.word	0x08005240
  ldr r2, =_sbss
 8001638:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800163c:	20000310 	.word	0x20000310

08001640 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001640:	e7fe      	b.n	8001640 <ADC1_2_IRQHandler>
	...

08001644 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <HAL_Init+0x28>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a07      	ldr	r2, [pc, #28]	; (800166c <HAL_Init+0x28>)
 800164e:	f043 0310 	orr.w	r3, r3, #16
 8001652:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001654:	2003      	movs	r0, #3
 8001656:	f000 f947 	bl	80018e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800165a:	200f      	movs	r0, #15
 800165c:	f000 f808 	bl	8001670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001660:	f7ff fd7c 	bl	800115c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40022000 	.word	0x40022000

08001670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_InitTick+0x54>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_InitTick+0x58>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	4619      	mov	r1, r3
 8001682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001686:	fbb3 f3f1 	udiv	r3, r3, r1
 800168a:	fbb2 f3f3 	udiv	r3, r2, r3
 800168e:	4618      	mov	r0, r3
 8001690:	f000 f95f 	bl	8001952 <HAL_SYSTICK_Config>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e00e      	b.n	80016bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b0f      	cmp	r3, #15
 80016a2:	d80a      	bhi.n	80016ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a4:	2200      	movs	r2, #0
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016ac:	f000 f927 	bl	80018fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b0:	4a06      	ldr	r2, [pc, #24]	; (80016cc <HAL_InitTick+0x5c>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e000      	b.n	80016bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000000 	.word	0x20000000
 80016c8:	20000008 	.word	0x20000008
 80016cc:	20000004 	.word	0x20000004

080016d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <HAL_IncTick+0x1c>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <HAL_IncTick+0x20>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	4a03      	ldr	r2, [pc, #12]	; (80016f0 <HAL_IncTick+0x20>)
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	20000008 	.word	0x20000008
 80016f0:	200002fc 	.word	0x200002fc

080016f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return uwTick;
 80016f8:	4b02      	ldr	r3, [pc, #8]	; (8001704 <HAL_GetTick+0x10>)
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	200002fc 	.word	0x200002fc

08001708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001710:	f7ff fff0 	bl	80016f4 <HAL_GetTick>
 8001714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001720:	d005      	beq.n	800172e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <HAL_Delay+0x44>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4413      	add	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800172e:	bf00      	nop
 8001730:	f7ff ffe0 	bl	80016f4 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	429a      	cmp	r2, r3
 800173e:	d8f7      	bhi.n	8001730 <HAL_Delay+0x28>
  {
  }
}
 8001740:	bf00      	nop
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000008 	.word	0x20000008

08001750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <__NVIC_SetPriorityGrouping+0x44>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800176c:	4013      	ands	r3, r2
 800176e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001778:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800177c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001782:	4a04      	ldr	r2, [pc, #16]	; (8001794 <__NVIC_SetPriorityGrouping+0x44>)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	60d3      	str	r3, [r2, #12]
}
 8001788:	bf00      	nop
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800179c:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <__NVIC_GetPriorityGrouping+0x18>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	0a1b      	lsrs	r3, r3, #8
 80017a2:	f003 0307 	and.w	r3, r3, #7
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	db0b      	blt.n	80017de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	f003 021f 	and.w	r2, r3, #31
 80017cc:	4906      	ldr	r1, [pc, #24]	; (80017e8 <__NVIC_EnableIRQ+0x34>)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	095b      	lsrs	r3, r3, #5
 80017d4:	2001      	movs	r0, #1
 80017d6:	fa00 f202 	lsl.w	r2, r0, r2
 80017da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	e000e100 	.word	0xe000e100

080017ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	6039      	str	r1, [r7, #0]
 80017f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	db0a      	blt.n	8001816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	b2da      	uxtb	r2, r3
 8001804:	490c      	ldr	r1, [pc, #48]	; (8001838 <__NVIC_SetPriority+0x4c>)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	0112      	lsls	r2, r2, #4
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	440b      	add	r3, r1
 8001810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001814:	e00a      	b.n	800182c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4908      	ldr	r1, [pc, #32]	; (800183c <__NVIC_SetPriority+0x50>)
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	3b04      	subs	r3, #4
 8001824:	0112      	lsls	r2, r2, #4
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	440b      	add	r3, r1
 800182a:	761a      	strb	r2, [r3, #24]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000e100 	.word	0xe000e100
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001840:	b480      	push	{r7}
 8001842:	b089      	sub	sp, #36	; 0x24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f1c3 0307 	rsb	r3, r3, #7
 800185a:	2b04      	cmp	r3, #4
 800185c:	bf28      	it	cs
 800185e:	2304      	movcs	r3, #4
 8001860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3304      	adds	r3, #4
 8001866:	2b06      	cmp	r3, #6
 8001868:	d902      	bls.n	8001870 <NVIC_EncodePriority+0x30>
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3b03      	subs	r3, #3
 800186e:	e000      	b.n	8001872 <NVIC_EncodePriority+0x32>
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001874:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43da      	mvns	r2, r3
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	401a      	ands	r2, r3
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001888:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	fa01 f303 	lsl.w	r3, r1, r3
 8001892:	43d9      	mvns	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	4313      	orrs	r3, r2
         );
}
 800189a:	4618      	mov	r0, r3
 800189c:	3724      	adds	r7, #36	; 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b4:	d301      	bcc.n	80018ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b6:	2301      	movs	r3, #1
 80018b8:	e00f      	b.n	80018da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ba:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <SysTick_Config+0x40>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c2:	210f      	movs	r1, #15
 80018c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018c8:	f7ff ff90 	bl	80017ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <SysTick_Config+0x40>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d2:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <SysTick_Config+0x40>)
 80018d4:	2207      	movs	r2, #7
 80018d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	e000e010 	.word	0xe000e010

080018e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ff2d 	bl	8001750 <__NVIC_SetPriorityGrouping>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018fe:	b580      	push	{r7, lr}
 8001900:	b086      	sub	sp, #24
 8001902:	af00      	add	r7, sp, #0
 8001904:	4603      	mov	r3, r0
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
 800190a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001910:	f7ff ff42 	bl	8001798 <__NVIC_GetPriorityGrouping>
 8001914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	68b9      	ldr	r1, [r7, #8]
 800191a:	6978      	ldr	r0, [r7, #20]
 800191c:	f7ff ff90 	bl	8001840 <NVIC_EncodePriority>
 8001920:	4602      	mov	r2, r0
 8001922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001926:	4611      	mov	r1, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff5f 	bl	80017ec <__NVIC_SetPriority>
}
 800192e:	bf00      	nop
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff35 	bl	80017b4 <__NVIC_EnableIRQ>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff ffa2 	bl	80018a4 <SysTick_Config>
 8001960:	4603      	mov	r3, r0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800196a:	b480      	push	{r7}
 800196c:	b085      	sub	sp, #20
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800197c:	2b02      	cmp	r3, #2
 800197e:	d008      	beq.n	8001992 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2204      	movs	r2, #4
 8001984:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e020      	b.n	80019d4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 020e 	bic.w	r2, r2, #14
 80019a0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0201 	bic.w	r2, r2, #1
 80019b0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ba:	2101      	movs	r1, #1
 80019bc:	fa01 f202 	lsl.w	r2, r1, r2
 80019c0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
	...

080019e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d005      	beq.n	8001a02 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2204      	movs	r2, #4
 80019fa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	73fb      	strb	r3, [r7, #15]
 8001a00:	e051      	b.n	8001aa6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 020e 	bic.w	r2, r2, #14
 8001a10:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0201 	bic.w	r2, r2, #1
 8001a20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a22      	ldr	r2, [pc, #136]	; (8001ab0 <HAL_DMA_Abort_IT+0xd0>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d029      	beq.n	8001a80 <HAL_DMA_Abort_IT+0xa0>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a20      	ldr	r2, [pc, #128]	; (8001ab4 <HAL_DMA_Abort_IT+0xd4>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d022      	beq.n	8001a7c <HAL_DMA_Abort_IT+0x9c>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a1f      	ldr	r2, [pc, #124]	; (8001ab8 <HAL_DMA_Abort_IT+0xd8>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d01a      	beq.n	8001a76 <HAL_DMA_Abort_IT+0x96>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a1d      	ldr	r2, [pc, #116]	; (8001abc <HAL_DMA_Abort_IT+0xdc>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d012      	beq.n	8001a70 <HAL_DMA_Abort_IT+0x90>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a1c      	ldr	r2, [pc, #112]	; (8001ac0 <HAL_DMA_Abort_IT+0xe0>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d00a      	beq.n	8001a6a <HAL_DMA_Abort_IT+0x8a>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a1a      	ldr	r2, [pc, #104]	; (8001ac4 <HAL_DMA_Abort_IT+0xe4>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d102      	bne.n	8001a64 <HAL_DMA_Abort_IT+0x84>
 8001a5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a62:	e00e      	b.n	8001a82 <HAL_DMA_Abort_IT+0xa2>
 8001a64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a68:	e00b      	b.n	8001a82 <HAL_DMA_Abort_IT+0xa2>
 8001a6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a6e:	e008      	b.n	8001a82 <HAL_DMA_Abort_IT+0xa2>
 8001a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a74:	e005      	b.n	8001a82 <HAL_DMA_Abort_IT+0xa2>
 8001a76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a7a:	e002      	b.n	8001a82 <HAL_DMA_Abort_IT+0xa2>
 8001a7c:	2310      	movs	r3, #16
 8001a7e:	e000      	b.n	8001a82 <HAL_DMA_Abort_IT+0xa2>
 8001a80:	2301      	movs	r3, #1
 8001a82:	4a11      	ldr	r2, [pc, #68]	; (8001ac8 <HAL_DMA_Abort_IT+0xe8>)
 8001a84:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	4798      	blx	r3
    } 
  }
  return status;
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40020008 	.word	0x40020008
 8001ab4:	4002001c 	.word	0x4002001c
 8001ab8:	40020030 	.word	0x40020030
 8001abc:	40020044 	.word	0x40020044
 8001ac0:	40020058 	.word	0x40020058
 8001ac4:	4002006c 	.word	0x4002006c
 8001ac8:	40020000 	.word	0x40020000

08001acc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b08b      	sub	sp, #44	; 0x2c
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ada:	2300      	movs	r3, #0
 8001adc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ade:	e161      	b.n	8001da4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	69fa      	ldr	r2, [r7, #28]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	f040 8150 	bne.w	8001d9e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	4a97      	ldr	r2, [pc, #604]	; (8001d60 <HAL_GPIO_Init+0x294>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d05e      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
 8001b08:	4a95      	ldr	r2, [pc, #596]	; (8001d60 <HAL_GPIO_Init+0x294>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d875      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b0e:	4a95      	ldr	r2, [pc, #596]	; (8001d64 <HAL_GPIO_Init+0x298>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d058      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
 8001b14:	4a93      	ldr	r2, [pc, #588]	; (8001d64 <HAL_GPIO_Init+0x298>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d86f      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b1a:	4a93      	ldr	r2, [pc, #588]	; (8001d68 <HAL_GPIO_Init+0x29c>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d052      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
 8001b20:	4a91      	ldr	r2, [pc, #580]	; (8001d68 <HAL_GPIO_Init+0x29c>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d869      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b26:	4a91      	ldr	r2, [pc, #580]	; (8001d6c <HAL_GPIO_Init+0x2a0>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d04c      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
 8001b2c:	4a8f      	ldr	r2, [pc, #572]	; (8001d6c <HAL_GPIO_Init+0x2a0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d863      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b32:	4a8f      	ldr	r2, [pc, #572]	; (8001d70 <HAL_GPIO_Init+0x2a4>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d046      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
 8001b38:	4a8d      	ldr	r2, [pc, #564]	; (8001d70 <HAL_GPIO_Init+0x2a4>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d85d      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b3e:	2b12      	cmp	r3, #18
 8001b40:	d82a      	bhi.n	8001b98 <HAL_GPIO_Init+0xcc>
 8001b42:	2b12      	cmp	r3, #18
 8001b44:	d859      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b46:	a201      	add	r2, pc, #4	; (adr r2, 8001b4c <HAL_GPIO_Init+0x80>)
 8001b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b4c:	08001bc7 	.word	0x08001bc7
 8001b50:	08001ba1 	.word	0x08001ba1
 8001b54:	08001bb3 	.word	0x08001bb3
 8001b58:	08001bf5 	.word	0x08001bf5
 8001b5c:	08001bfb 	.word	0x08001bfb
 8001b60:	08001bfb 	.word	0x08001bfb
 8001b64:	08001bfb 	.word	0x08001bfb
 8001b68:	08001bfb 	.word	0x08001bfb
 8001b6c:	08001bfb 	.word	0x08001bfb
 8001b70:	08001bfb 	.word	0x08001bfb
 8001b74:	08001bfb 	.word	0x08001bfb
 8001b78:	08001bfb 	.word	0x08001bfb
 8001b7c:	08001bfb 	.word	0x08001bfb
 8001b80:	08001bfb 	.word	0x08001bfb
 8001b84:	08001bfb 	.word	0x08001bfb
 8001b88:	08001bfb 	.word	0x08001bfb
 8001b8c:	08001bfb 	.word	0x08001bfb
 8001b90:	08001ba9 	.word	0x08001ba9
 8001b94:	08001bbd 	.word	0x08001bbd
 8001b98:	4a76      	ldr	r2, [pc, #472]	; (8001d74 <HAL_GPIO_Init+0x2a8>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d013      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b9e:	e02c      	b.n	8001bfa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	623b      	str	r3, [r7, #32]
          break;
 8001ba6:	e029      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	3304      	adds	r3, #4
 8001bae:	623b      	str	r3, [r7, #32]
          break;
 8001bb0:	e024      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	3308      	adds	r3, #8
 8001bb8:	623b      	str	r3, [r7, #32]
          break;
 8001bba:	e01f      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	330c      	adds	r3, #12
 8001bc2:	623b      	str	r3, [r7, #32]
          break;
 8001bc4:	e01a      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d102      	bne.n	8001bd4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bce:	2304      	movs	r3, #4
 8001bd0:	623b      	str	r3, [r7, #32]
          break;
 8001bd2:	e013      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d105      	bne.n	8001be8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bdc:	2308      	movs	r3, #8
 8001bde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69fa      	ldr	r2, [r7, #28]
 8001be4:	611a      	str	r2, [r3, #16]
          break;
 8001be6:	e009      	b.n	8001bfc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001be8:	2308      	movs	r3, #8
 8001bea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69fa      	ldr	r2, [r7, #28]
 8001bf0:	615a      	str	r2, [r3, #20]
          break;
 8001bf2:	e003      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	623b      	str	r3, [r7, #32]
          break;
 8001bf8:	e000      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          break;
 8001bfa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	2bff      	cmp	r3, #255	; 0xff
 8001c00:	d801      	bhi.n	8001c06 <HAL_GPIO_Init+0x13a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	e001      	b.n	8001c0a <HAL_GPIO_Init+0x13e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	2bff      	cmp	r3, #255	; 0xff
 8001c10:	d802      	bhi.n	8001c18 <HAL_GPIO_Init+0x14c>
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	e002      	b.n	8001c1e <HAL_GPIO_Init+0x152>
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	3b08      	subs	r3, #8
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	210f      	movs	r1, #15
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	401a      	ands	r2, r3
 8001c30:	6a39      	ldr	r1, [r7, #32]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	fa01 f303 	lsl.w	r3, r1, r3
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 80a9 	beq.w	8001d9e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c4c:	4b4a      	ldr	r3, [pc, #296]	; (8001d78 <HAL_GPIO_Init+0x2ac>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	4a49      	ldr	r2, [pc, #292]	; (8001d78 <HAL_GPIO_Init+0x2ac>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6193      	str	r3, [r2, #24]
 8001c58:	4b47      	ldr	r3, [pc, #284]	; (8001d78 <HAL_GPIO_Init+0x2ac>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c64:	4a45      	ldr	r2, [pc, #276]	; (8001d7c <HAL_GPIO_Init+0x2b0>)
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	089b      	lsrs	r3, r3, #2
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	220f      	movs	r2, #15
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	4013      	ands	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a3d      	ldr	r2, [pc, #244]	; (8001d80 <HAL_GPIO_Init+0x2b4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d00d      	beq.n	8001cac <HAL_GPIO_Init+0x1e0>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a3c      	ldr	r2, [pc, #240]	; (8001d84 <HAL_GPIO_Init+0x2b8>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d007      	beq.n	8001ca8 <HAL_GPIO_Init+0x1dc>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a3b      	ldr	r2, [pc, #236]	; (8001d88 <HAL_GPIO_Init+0x2bc>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d101      	bne.n	8001ca4 <HAL_GPIO_Init+0x1d8>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e004      	b.n	8001cae <HAL_GPIO_Init+0x1e2>
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e002      	b.n	8001cae <HAL_GPIO_Init+0x1e2>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <HAL_GPIO_Init+0x1e2>
 8001cac:	2300      	movs	r3, #0
 8001cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb0:	f002 0203 	and.w	r2, r2, #3
 8001cb4:	0092      	lsls	r2, r2, #2
 8001cb6:	4093      	lsls	r3, r2
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cbe:	492f      	ldr	r1, [pc, #188]	; (8001d7c <HAL_GPIO_Init+0x2b0>)
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	089b      	lsrs	r3, r3, #2
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d006      	beq.n	8001ce6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cd8:	4b2c      	ldr	r3, [pc, #176]	; (8001d8c <HAL_GPIO_Init+0x2c0>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	492b      	ldr	r1, [pc, #172]	; (8001d8c <HAL_GPIO_Init+0x2c0>)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	600b      	str	r3, [r1, #0]
 8001ce4:	e006      	b.n	8001cf4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ce6:	4b29      	ldr	r3, [pc, #164]	; (8001d8c <HAL_GPIO_Init+0x2c0>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	4927      	ldr	r1, [pc, #156]	; (8001d8c <HAL_GPIO_Init+0x2c0>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d006      	beq.n	8001d0e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d00:	4b22      	ldr	r3, [pc, #136]	; (8001d8c <HAL_GPIO_Init+0x2c0>)
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	4921      	ldr	r1, [pc, #132]	; (8001d8c <HAL_GPIO_Init+0x2c0>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	604b      	str	r3, [r1, #4]
 8001d0c:	e006      	b.n	8001d1c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d0e:	4b1f      	ldr	r3, [pc, #124]	; (8001d8c <HAL_GPIO_Init+0x2c0>)
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	491d      	ldr	r1, [pc, #116]	; (8001d8c <HAL_GPIO_Init+0x2c0>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d006      	beq.n	8001d36 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d28:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <HAL_GPIO_Init+0x2c0>)
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	4917      	ldr	r1, [pc, #92]	; (8001d8c <HAL_GPIO_Init+0x2c0>)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	608b      	str	r3, [r1, #8]
 8001d34:	e006      	b.n	8001d44 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <HAL_GPIO_Init+0x2c0>)
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	4913      	ldr	r1, [pc, #76]	; (8001d8c <HAL_GPIO_Init+0x2c0>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d01f      	beq.n	8001d90 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d50:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <HAL_GPIO_Init+0x2c0>)
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	490d      	ldr	r1, [pc, #52]	; (8001d8c <HAL_GPIO_Init+0x2c0>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	60cb      	str	r3, [r1, #12]
 8001d5c:	e01f      	b.n	8001d9e <HAL_GPIO_Init+0x2d2>
 8001d5e:	bf00      	nop
 8001d60:	10320000 	.word	0x10320000
 8001d64:	10310000 	.word	0x10310000
 8001d68:	10220000 	.word	0x10220000
 8001d6c:	10210000 	.word	0x10210000
 8001d70:	10120000 	.word	0x10120000
 8001d74:	10110000 	.word	0x10110000
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40010000 	.word	0x40010000
 8001d80:	40010800 	.word	0x40010800
 8001d84:	40010c00 	.word	0x40010c00
 8001d88:	40011000 	.word	0x40011000
 8001d8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_GPIO_Init+0x2f4>)
 8001d92:	68da      	ldr	r2, [r3, #12]
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	4909      	ldr	r1, [pc, #36]	; (8001dc0 <HAL_GPIO_Init+0x2f4>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	3301      	adds	r3, #1
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	fa22 f303 	lsr.w	r3, r2, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f47f ae96 	bne.w	8001ae0 <HAL_GPIO_Init+0x14>
  }
}
 8001db4:	bf00      	nop
 8001db6:	bf00      	nop
 8001db8:	372c      	adds	r7, #44	; 0x2c
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr
 8001dc0:	40010400 	.word	0x40010400

08001dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	807b      	strh	r3, [r7, #2]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dd4:	787b      	ldrb	r3, [r7, #1]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dda:	887a      	ldrh	r2, [r7, #2]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001de0:	e003      	b.n	8001dea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001de2:	887b      	ldrh	r3, [r7, #2]
 8001de4:	041a      	lsls	r2, r3, #16
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	611a      	str	r2, [r3, #16]
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e272      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 8087 	beq.w	8001f22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e14:	4b92      	ldr	r3, [pc, #584]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 030c 	and.w	r3, r3, #12
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d00c      	beq.n	8001e3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e20:	4b8f      	ldr	r3, [pc, #572]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 030c 	and.w	r3, r3, #12
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d112      	bne.n	8001e52 <HAL_RCC_OscConfig+0x5e>
 8001e2c:	4b8c      	ldr	r3, [pc, #560]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e38:	d10b      	bne.n	8001e52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3a:	4b89      	ldr	r3, [pc, #548]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d06c      	beq.n	8001f20 <HAL_RCC_OscConfig+0x12c>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d168      	bne.n	8001f20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e24c      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e5a:	d106      	bne.n	8001e6a <HAL_RCC_OscConfig+0x76>
 8001e5c:	4b80      	ldr	r3, [pc, #512]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a7f      	ldr	r2, [pc, #508]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	e02e      	b.n	8001ec8 <HAL_RCC_OscConfig+0xd4>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10c      	bne.n	8001e8c <HAL_RCC_OscConfig+0x98>
 8001e72:	4b7b      	ldr	r3, [pc, #492]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a7a      	ldr	r2, [pc, #488]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	4b78      	ldr	r3, [pc, #480]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a77      	ldr	r2, [pc, #476]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	e01d      	b.n	8001ec8 <HAL_RCC_OscConfig+0xd4>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e94:	d10c      	bne.n	8001eb0 <HAL_RCC_OscConfig+0xbc>
 8001e96:	4b72      	ldr	r3, [pc, #456]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a71      	ldr	r2, [pc, #452]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	4b6f      	ldr	r3, [pc, #444]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a6e      	ldr	r2, [pc, #440]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	e00b      	b.n	8001ec8 <HAL_RCC_OscConfig+0xd4>
 8001eb0:	4b6b      	ldr	r3, [pc, #428]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a6a      	ldr	r2, [pc, #424]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	4b68      	ldr	r3, [pc, #416]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a67      	ldr	r2, [pc, #412]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d013      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed0:	f7ff fc10 	bl	80016f4 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed8:	f7ff fc0c 	bl	80016f4 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b64      	cmp	r3, #100	; 0x64
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e200      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eea:	4b5d      	ldr	r3, [pc, #372]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0xe4>
 8001ef6:	e014      	b.n	8001f22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7ff fbfc 	bl	80016f4 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f00:	f7ff fbf8 	bl	80016f4 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b64      	cmp	r3, #100	; 0x64
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e1ec      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f12:	4b53      	ldr	r3, [pc, #332]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x10c>
 8001f1e:	e000      	b.n	8001f22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d063      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f2e:	4b4c      	ldr	r3, [pc, #304]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 030c 	and.w	r3, r3, #12
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00b      	beq.n	8001f52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f3a:	4b49      	ldr	r3, [pc, #292]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	2b08      	cmp	r3, #8
 8001f44:	d11c      	bne.n	8001f80 <HAL_RCC_OscConfig+0x18c>
 8001f46:	4b46      	ldr	r3, [pc, #280]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d116      	bne.n	8001f80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f52:	4b43      	ldr	r3, [pc, #268]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d005      	beq.n	8001f6a <HAL_RCC_OscConfig+0x176>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d001      	beq.n	8001f6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e1c0      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6a:	4b3d      	ldr	r3, [pc, #244]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4939      	ldr	r1, [pc, #228]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7e:	e03a      	b.n	8001ff6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d020      	beq.n	8001fca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f88:	4b36      	ldr	r3, [pc, #216]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8e:	f7ff fbb1 	bl	80016f4 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f96:	f7ff fbad 	bl	80016f4 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e1a1      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa8:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0f0      	beq.n	8001f96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb4:	4b2a      	ldr	r3, [pc, #168]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	4927      	ldr	r1, [pc, #156]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	600b      	str	r3, [r1, #0]
 8001fc8:	e015      	b.n	8001ff6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fca:	4b26      	ldr	r3, [pc, #152]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7ff fb90 	bl	80016f4 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd8:	f7ff fb8c 	bl	80016f4 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e180      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fea:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d03a      	beq.n	8002078 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d019      	beq.n	800203e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800200a:	4b17      	ldr	r3, [pc, #92]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 800200c:	2201      	movs	r2, #1
 800200e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002010:	f7ff fb70 	bl	80016f4 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002018:	f7ff fb6c 	bl	80016f4 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e160      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202a:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f0      	beq.n	8002018 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002036:	2001      	movs	r0, #1
 8002038:	f000 fad8 	bl	80025ec <RCC_Delay>
 800203c:	e01c      	b.n	8002078 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800203e:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002044:	f7ff fb56 	bl	80016f4 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800204a:	e00f      	b.n	800206c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800204c:	f7ff fb52 	bl	80016f4 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d908      	bls.n	800206c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e146      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
 8002064:	42420000 	.word	0x42420000
 8002068:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800206c:	4b92      	ldr	r3, [pc, #584]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1e9      	bne.n	800204c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 80a6 	beq.w	80021d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002086:	2300      	movs	r3, #0
 8002088:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800208a:	4b8b      	ldr	r3, [pc, #556]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10d      	bne.n	80020b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002096:	4b88      	ldr	r3, [pc, #544]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	4a87      	ldr	r2, [pc, #540]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 800209c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a0:	61d3      	str	r3, [r2, #28]
 80020a2:	4b85      	ldr	r3, [pc, #532]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ae:	2301      	movs	r3, #1
 80020b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b2:	4b82      	ldr	r3, [pc, #520]	; (80022bc <HAL_RCC_OscConfig+0x4c8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d118      	bne.n	80020f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020be:	4b7f      	ldr	r3, [pc, #508]	; (80022bc <HAL_RCC_OscConfig+0x4c8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a7e      	ldr	r2, [pc, #504]	; (80022bc <HAL_RCC_OscConfig+0x4c8>)
 80020c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ca:	f7ff fb13 	bl	80016f4 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d2:	f7ff fb0f 	bl	80016f4 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b64      	cmp	r3, #100	; 0x64
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e103      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e4:	4b75      	ldr	r3, [pc, #468]	; (80022bc <HAL_RCC_OscConfig+0x4c8>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d106      	bne.n	8002106 <HAL_RCC_OscConfig+0x312>
 80020f8:	4b6f      	ldr	r3, [pc, #444]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	4a6e      	ldr	r2, [pc, #440]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6213      	str	r3, [r2, #32]
 8002104:	e02d      	b.n	8002162 <HAL_RCC_OscConfig+0x36e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10c      	bne.n	8002128 <HAL_RCC_OscConfig+0x334>
 800210e:	4b6a      	ldr	r3, [pc, #424]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	4a69      	ldr	r2, [pc, #420]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 8002114:	f023 0301 	bic.w	r3, r3, #1
 8002118:	6213      	str	r3, [r2, #32]
 800211a:	4b67      	ldr	r3, [pc, #412]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	4a66      	ldr	r2, [pc, #408]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 8002120:	f023 0304 	bic.w	r3, r3, #4
 8002124:	6213      	str	r3, [r2, #32]
 8002126:	e01c      	b.n	8002162 <HAL_RCC_OscConfig+0x36e>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2b05      	cmp	r3, #5
 800212e:	d10c      	bne.n	800214a <HAL_RCC_OscConfig+0x356>
 8002130:	4b61      	ldr	r3, [pc, #388]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	4a60      	ldr	r2, [pc, #384]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 8002136:	f043 0304 	orr.w	r3, r3, #4
 800213a:	6213      	str	r3, [r2, #32]
 800213c:	4b5e      	ldr	r3, [pc, #376]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	4a5d      	ldr	r2, [pc, #372]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6213      	str	r3, [r2, #32]
 8002148:	e00b      	b.n	8002162 <HAL_RCC_OscConfig+0x36e>
 800214a:	4b5b      	ldr	r3, [pc, #364]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	4a5a      	ldr	r2, [pc, #360]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 8002150:	f023 0301 	bic.w	r3, r3, #1
 8002154:	6213      	str	r3, [r2, #32]
 8002156:	4b58      	ldr	r3, [pc, #352]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	4a57      	ldr	r2, [pc, #348]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 800215c:	f023 0304 	bic.w	r3, r3, #4
 8002160:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d015      	beq.n	8002196 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216a:	f7ff fac3 	bl	80016f4 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002170:	e00a      	b.n	8002188 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002172:	f7ff fabf 	bl	80016f4 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002180:	4293      	cmp	r3, r2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e0b1      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002188:	4b4b      	ldr	r3, [pc, #300]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0ee      	beq.n	8002172 <HAL_RCC_OscConfig+0x37e>
 8002194:	e014      	b.n	80021c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002196:	f7ff faad 	bl	80016f4 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219c:	e00a      	b.n	80021b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219e:	f7ff faa9 	bl	80016f4 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e09b      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b4:	4b40      	ldr	r3, [pc, #256]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1ee      	bne.n	800219e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021c0:	7dfb      	ldrb	r3, [r7, #23]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d105      	bne.n	80021d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c6:	4b3c      	ldr	r3, [pc, #240]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	4a3b      	ldr	r2, [pc, #236]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 80021cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 8087 	beq.w	80022ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021dc:	4b36      	ldr	r3, [pc, #216]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 030c 	and.w	r3, r3, #12
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d061      	beq.n	80022ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d146      	bne.n	800227e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f0:	4b33      	ldr	r3, [pc, #204]	; (80022c0 <HAL_RCC_OscConfig+0x4cc>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f6:	f7ff fa7d 	bl	80016f4 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fe:	f7ff fa79 	bl	80016f4 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e06d      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002210:	4b29      	ldr	r3, [pc, #164]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f0      	bne.n	80021fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002224:	d108      	bne.n	8002238 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002226:	4b24      	ldr	r3, [pc, #144]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	4921      	ldr	r1, [pc, #132]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 8002234:	4313      	orrs	r3, r2
 8002236:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002238:	4b1f      	ldr	r3, [pc, #124]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a19      	ldr	r1, [r3, #32]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	430b      	orrs	r3, r1
 800224a:	491b      	ldr	r1, [pc, #108]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 800224c:	4313      	orrs	r3, r2
 800224e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002250:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <HAL_RCC_OscConfig+0x4cc>)
 8002252:	2201      	movs	r2, #1
 8002254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002256:	f7ff fa4d 	bl	80016f4 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225e:	f7ff fa49 	bl	80016f4 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e03d      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0f0      	beq.n	800225e <HAL_RCC_OscConfig+0x46a>
 800227c:	e035      	b.n	80022ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227e:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <HAL_RCC_OscConfig+0x4cc>)
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002284:	f7ff fa36 	bl	80016f4 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228c:	f7ff fa32 	bl	80016f4 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e026      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229e:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x498>
 80022aa:	e01e      	b.n	80022ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d107      	bne.n	80022c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e019      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40007000 	.word	0x40007000
 80022c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCC_OscConfig+0x500>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d106      	bne.n	80022e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d001      	beq.n	80022ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000

080022f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0d0      	b.n	80024ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800230c:	4b6a      	ldr	r3, [pc, #424]	; (80024b8 <HAL_RCC_ClockConfig+0x1c0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d910      	bls.n	800233c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231a:	4b67      	ldr	r3, [pc, #412]	; (80024b8 <HAL_RCC_ClockConfig+0x1c0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 0207 	bic.w	r2, r3, #7
 8002322:	4965      	ldr	r1, [pc, #404]	; (80024b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	4313      	orrs	r3, r2
 8002328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232a:	4b63      	ldr	r3, [pc, #396]	; (80024b8 <HAL_RCC_ClockConfig+0x1c0>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d001      	beq.n	800233c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0b8      	b.n	80024ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d020      	beq.n	800238a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002354:	4b59      	ldr	r3, [pc, #356]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	4a58      	ldr	r2, [pc, #352]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800235e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800236c:	4b53      	ldr	r3, [pc, #332]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	4a52      	ldr	r2, [pc, #328]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002372:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002376:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002378:	4b50      	ldr	r3, [pc, #320]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	494d      	ldr	r1, [pc, #308]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002386:	4313      	orrs	r3, r2
 8002388:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d040      	beq.n	8002418 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d107      	bne.n	80023ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239e:	4b47      	ldr	r3, [pc, #284]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d115      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e07f      	b.n	80024ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d107      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b6:	4b41      	ldr	r3, [pc, #260]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d109      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e073      	b.n	80024ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c6:	4b3d      	ldr	r3, [pc, #244]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e06b      	b.n	80024ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023d6:	4b39      	ldr	r3, [pc, #228]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f023 0203 	bic.w	r2, r3, #3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	4936      	ldr	r1, [pc, #216]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023e8:	f7ff f984 	bl	80016f4 <HAL_GetTick>
 80023ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ee:	e00a      	b.n	8002406 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f0:	f7ff f980 	bl	80016f4 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fe:	4293      	cmp	r3, r2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e053      	b.n	80024ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002406:	4b2d      	ldr	r3, [pc, #180]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 020c 	and.w	r2, r3, #12
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	429a      	cmp	r2, r3
 8002416:	d1eb      	bne.n	80023f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002418:	4b27      	ldr	r3, [pc, #156]	; (80024b8 <HAL_RCC_ClockConfig+0x1c0>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d210      	bcs.n	8002448 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002426:	4b24      	ldr	r3, [pc, #144]	; (80024b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 0207 	bic.w	r2, r3, #7
 800242e:	4922      	ldr	r1, [pc, #136]	; (80024b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	4313      	orrs	r3, r2
 8002434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002436:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d001      	beq.n	8002448 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e032      	b.n	80024ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002454:	4b19      	ldr	r3, [pc, #100]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	4916      	ldr	r1, [pc, #88]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002462:	4313      	orrs	r3, r2
 8002464:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d009      	beq.n	8002486 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002472:	4b12      	ldr	r3, [pc, #72]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	490e      	ldr	r1, [pc, #56]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002482:	4313      	orrs	r3, r2
 8002484:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002486:	f000 f821 	bl	80024cc <HAL_RCC_GetSysClockFreq>
 800248a:	4602      	mov	r2, r0
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	091b      	lsrs	r3, r3, #4
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	490a      	ldr	r1, [pc, #40]	; (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002498:	5ccb      	ldrb	r3, [r1, r3]
 800249a:	fa22 f303 	lsr.w	r3, r2, r3
 800249e:	4a09      	ldr	r2, [pc, #36]	; (80024c4 <HAL_RCC_ClockConfig+0x1cc>)
 80024a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024a2:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <HAL_RCC_ClockConfig+0x1d0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff f8e2 	bl	8001670 <HAL_InitTick>

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40022000 	.word	0x40022000
 80024bc:	40021000 	.word	0x40021000
 80024c0:	08005188 	.word	0x08005188
 80024c4:	20000000 	.word	0x20000000
 80024c8:	20000004 	.word	0x20000004

080024cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024cc:	b490      	push	{r4, r7}
 80024ce:	b08a      	sub	sp, #40	; 0x28
 80024d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024d2:	4b29      	ldr	r3, [pc, #164]	; (8002578 <HAL_RCC_GetSysClockFreq+0xac>)
 80024d4:	1d3c      	adds	r4, r7, #4
 80024d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024dc:	f240 2301 	movw	r3, #513	; 0x201
 80024e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	2300      	movs	r3, #0
 80024e8:	61bb      	str	r3, [r7, #24]
 80024ea:	2300      	movs	r3, #0
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024f6:	4b21      	ldr	r3, [pc, #132]	; (800257c <HAL_RCC_GetSysClockFreq+0xb0>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	2b04      	cmp	r3, #4
 8002504:	d002      	beq.n	800250c <HAL_RCC_GetSysClockFreq+0x40>
 8002506:	2b08      	cmp	r3, #8
 8002508:	d003      	beq.n	8002512 <HAL_RCC_GetSysClockFreq+0x46>
 800250a:	e02b      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800250c:	4b1c      	ldr	r3, [pc, #112]	; (8002580 <HAL_RCC_GetSysClockFreq+0xb4>)
 800250e:	623b      	str	r3, [r7, #32]
      break;
 8002510:	e02b      	b.n	800256a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	0c9b      	lsrs	r3, r3, #18
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	3328      	adds	r3, #40	; 0x28
 800251c:	443b      	add	r3, r7
 800251e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002522:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d012      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800252e:	4b13      	ldr	r3, [pc, #76]	; (800257c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	0c5b      	lsrs	r3, r3, #17
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	3328      	adds	r3, #40	; 0x28
 800253a:	443b      	add	r3, r7
 800253c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002540:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	4a0e      	ldr	r2, [pc, #56]	; (8002580 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002546:	fb03 f202 	mul.w	r2, r3, r2
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
 8002552:	e004      	b.n	800255e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	4a0b      	ldr	r2, [pc, #44]	; (8002584 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002558:	fb02 f303 	mul.w	r3, r2, r3
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	623b      	str	r3, [r7, #32]
      break;
 8002562:	e002      	b.n	800256a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002564:	4b06      	ldr	r3, [pc, #24]	; (8002580 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002566:	623b      	str	r3, [r7, #32]
      break;
 8002568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800256a:	6a3b      	ldr	r3, [r7, #32]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3728      	adds	r7, #40	; 0x28
 8002570:	46bd      	mov	sp, r7
 8002572:	bc90      	pop	{r4, r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	08005170 	.word	0x08005170
 800257c:	40021000 	.word	0x40021000
 8002580:	007a1200 	.word	0x007a1200
 8002584:	003d0900 	.word	0x003d0900

08002588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800258c:	4b02      	ldr	r3, [pc, #8]	; (8002598 <HAL_RCC_GetHCLKFreq+0x10>)
 800258e:	681b      	ldr	r3, [r3, #0]
}
 8002590:	4618      	mov	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr
 8002598:	20000000 	.word	0x20000000

0800259c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025a0:	f7ff fff2 	bl	8002588 <HAL_RCC_GetHCLKFreq>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	0a1b      	lsrs	r3, r3, #8
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	4903      	ldr	r1, [pc, #12]	; (80025c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025b2:	5ccb      	ldrb	r3, [r1, r3]
 80025b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40021000 	.word	0x40021000
 80025c0:	08005198 	.word	0x08005198

080025c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025c8:	f7ff ffde 	bl	8002588 <HAL_RCC_GetHCLKFreq>
 80025cc:	4602      	mov	r2, r0
 80025ce:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	0adb      	lsrs	r3, r3, #11
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	4903      	ldr	r1, [pc, #12]	; (80025e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025da:	5ccb      	ldrb	r3, [r1, r3]
 80025dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40021000 	.word	0x40021000
 80025e8:	08005198 	.word	0x08005198

080025ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025f4:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <RCC_Delay+0x34>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a0a      	ldr	r2, [pc, #40]	; (8002624 <RCC_Delay+0x38>)
 80025fa:	fba2 2303 	umull	r2, r3, r2, r3
 80025fe:	0a5b      	lsrs	r3, r3, #9
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	fb02 f303 	mul.w	r3, r2, r3
 8002606:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002608:	bf00      	nop
  }
  while (Delay --);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1e5a      	subs	r2, r3, #1
 800260e:	60fa      	str	r2, [r7, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1f9      	bne.n	8002608 <RCC_Delay+0x1c>
}
 8002614:	bf00      	nop
 8002616:	bf00      	nop
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr
 8002620:	20000000 	.word	0x20000000
 8002624:	10624dd3 	.word	0x10624dd3

08002628 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e076      	b.n	8002728 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	2b00      	cmp	r3, #0
 8002640:	d108      	bne.n	8002654 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800264a:	d009      	beq.n	8002660 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	61da      	str	r2, [r3, #28]
 8002652:	e005      	b.n	8002660 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d106      	bne.n	8002680 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7fe fda0 	bl	80011c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002696:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	431a      	orrs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026d0:	431a      	orrs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e4:	ea42 0103 	orr.w	r1, r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	0c1a      	lsrs	r2, r3, #16
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f002 0204 	and.w	r2, r2, #4
 8002706:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	69da      	ldr	r2, [r3, #28]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002716:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08c      	sub	sp, #48	; 0x30
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
 800273c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800273e:	2301      	movs	r3, #1
 8002740:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002742:	2300      	movs	r3, #0
 8002744:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_SPI_TransmitReceive+0x26>
 8002752:	2302      	movs	r3, #2
 8002754:	e18a      	b.n	8002a6c <HAL_SPI_TransmitReceive+0x33c>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800275e:	f7fe ffc9 	bl	80016f4 <HAL_GetTick>
 8002762:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800276a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002774:	887b      	ldrh	r3, [r7, #2]
 8002776:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002778:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800277c:	2b01      	cmp	r3, #1
 800277e:	d00f      	beq.n	80027a0 <HAL_SPI_TransmitReceive+0x70>
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002786:	d107      	bne.n	8002798 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d103      	bne.n	8002798 <HAL_SPI_TransmitReceive+0x68>
 8002790:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002794:	2b04      	cmp	r3, #4
 8002796:	d003      	beq.n	80027a0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002798:	2302      	movs	r3, #2
 800279a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800279e:	e15b      	b.n	8002a58 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d005      	beq.n	80027b2 <HAL_SPI_TransmitReceive+0x82>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <HAL_SPI_TransmitReceive+0x82>
 80027ac:	887b      	ldrh	r3, [r7, #2]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d103      	bne.n	80027ba <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80027b8:	e14e      	b.n	8002a58 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d003      	beq.n	80027ce <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2205      	movs	r2, #5
 80027ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	887a      	ldrh	r2, [r7, #2]
 80027de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	887a      	ldrh	r2, [r7, #2]
 80027e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	887a      	ldrh	r2, [r7, #2]
 80027f0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	887a      	ldrh	r2, [r7, #2]
 80027f6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280e:	2b40      	cmp	r3, #64	; 0x40
 8002810:	d007      	beq.n	8002822 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002820:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800282a:	d178      	bne.n	800291e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d002      	beq.n	800283a <HAL_SPI_TransmitReceive+0x10a>
 8002834:	8b7b      	ldrh	r3, [r7, #26]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d166      	bne.n	8002908 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	881a      	ldrh	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	1c9a      	adds	r2, r3, #2
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002854:	b29b      	uxth	r3, r3
 8002856:	3b01      	subs	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800285e:	e053      	b.n	8002908 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b02      	cmp	r3, #2
 800286c:	d11b      	bne.n	80028a6 <HAL_SPI_TransmitReceive+0x176>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002872:	b29b      	uxth	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d016      	beq.n	80028a6 <HAL_SPI_TransmitReceive+0x176>
 8002878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287a:	2b01      	cmp	r3, #1
 800287c:	d113      	bne.n	80028a6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	881a      	ldrh	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	1c9a      	adds	r2, r3, #2
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002898:	b29b      	uxth	r3, r3
 800289a:	3b01      	subs	r3, #1
 800289c:	b29a      	uxth	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d119      	bne.n	80028e8 <HAL_SPI_TransmitReceive+0x1b8>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d014      	beq.n	80028e8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68da      	ldr	r2, [r3, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c8:	b292      	uxth	r2, r2
 80028ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d0:	1c9a      	adds	r2, r3, #2
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028da:	b29b      	uxth	r3, r3
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028e4:	2301      	movs	r3, #1
 80028e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80028e8:	f7fe ff04 	bl	80016f4 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d807      	bhi.n	8002908 <HAL_SPI_TransmitReceive+0x1d8>
 80028f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028fe:	d003      	beq.n	8002908 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002906:	e0a7      	b.n	8002a58 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800290c:	b29b      	uxth	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1a6      	bne.n	8002860 <HAL_SPI_TransmitReceive+0x130>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002916:	b29b      	uxth	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1a1      	bne.n	8002860 <HAL_SPI_TransmitReceive+0x130>
 800291c:	e07c      	b.n	8002a18 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d002      	beq.n	800292c <HAL_SPI_TransmitReceive+0x1fc>
 8002926:	8b7b      	ldrh	r3, [r7, #26]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d16b      	bne.n	8002a04 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	330c      	adds	r3, #12
 8002936:	7812      	ldrb	r2, [r2, #0]
 8002938:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002948:	b29b      	uxth	r3, r3
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002952:	e057      	b.n	8002a04 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b02      	cmp	r3, #2
 8002960:	d11c      	bne.n	800299c <HAL_SPI_TransmitReceive+0x26c>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002966:	b29b      	uxth	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d017      	beq.n	800299c <HAL_SPI_TransmitReceive+0x26c>
 800296c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296e:	2b01      	cmp	r3, #1
 8002970:	d114      	bne.n	800299c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	330c      	adds	r3, #12
 800297c:	7812      	ldrb	r2, [r2, #0]
 800297e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800298e:	b29b      	uxth	r3, r3
 8002990:	3b01      	subs	r3, #1
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d119      	bne.n	80029de <HAL_SPI_TransmitReceive+0x2ae>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d014      	beq.n	80029de <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029da:	2301      	movs	r3, #1
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80029de:	f7fe fe89 	bl	80016f4 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d803      	bhi.n	80029f6 <HAL_SPI_TransmitReceive+0x2c6>
 80029ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029f4:	d102      	bne.n	80029fc <HAL_SPI_TransmitReceive+0x2cc>
 80029f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d103      	bne.n	8002a04 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002a02:	e029      	b.n	8002a58 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1a2      	bne.n	8002954 <HAL_SPI_TransmitReceive+0x224>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d19d      	bne.n	8002954 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 f8b1 	bl	8002b84 <SPI_EndRxTxTransaction>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d006      	beq.n	8002a36 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2220      	movs	r2, #32
 8002a32:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002a34:	e010      	b.n	8002a58 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10b      	bne.n	8002a56 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	e000      	b.n	8002a58 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002a56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3730      	adds	r7, #48	; 0x30
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	603b      	str	r3, [r7, #0]
 8002a80:	4613      	mov	r3, r2
 8002a82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a84:	f7fe fe36 	bl	80016f4 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8c:	1a9b      	subs	r3, r3, r2
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	4413      	add	r3, r2
 8002a92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a94:	f7fe fe2e 	bl	80016f4 <HAL_GetTick>
 8002a98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a9a:	4b39      	ldr	r3, [pc, #228]	; (8002b80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	015b      	lsls	r3, r3, #5
 8002aa0:	0d1b      	lsrs	r3, r3, #20
 8002aa2:	69fa      	ldr	r2, [r7, #28]
 8002aa4:	fb02 f303 	mul.w	r3, r2, r3
 8002aa8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002aaa:	e054      	b.n	8002b56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ab2:	d050      	beq.n	8002b56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ab4:	f7fe fe1e 	bl	80016f4 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	69fa      	ldr	r2, [r7, #28]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d902      	bls.n	8002aca <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d13d      	bne.n	8002b46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ad8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ae2:	d111      	bne.n	8002b08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aec:	d004      	beq.n	8002af8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002af6:	d107      	bne.n	8002b08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b10:	d10f      	bne.n	8002b32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e017      	b.n	8002b76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	bf0c      	ite	eq
 8002b66:	2301      	moveq	r3, #1
 8002b68:	2300      	movne	r3, #0
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d19b      	bne.n	8002aac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3720      	adds	r7, #32
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000000 	.word	0x20000000

08002b84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af02      	add	r7, sp, #8
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2200      	movs	r2, #0
 8002b98:	2180      	movs	r1, #128	; 0x80
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f7ff ff6a 	bl	8002a74 <SPI_WaitFlagStateUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d007      	beq.n	8002bb6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002baa:	f043 0220 	orr.w	r2, r3, #32
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e000      	b.n	8002bb8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e041      	b.n	8002c56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7fe fb34 	bl	8001254 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4610      	mov	r0, r2
 8002c00:	f000 fa26 	bl	8003050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d122      	bne.n	8002cba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d11b      	bne.n	8002cba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f06f 0202 	mvn.w	r2, #2
 8002c8a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f9ba 	bl	800301a <HAL_TIM_IC_CaptureCallback>
 8002ca6:	e005      	b.n	8002cb4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f9ad 	bl	8003008 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f9bc 	bl	800302c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d122      	bne.n	8002d0e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f003 0304 	and.w	r3, r3, #4
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d11b      	bne.n	8002d0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f06f 0204 	mvn.w	r2, #4
 8002cde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f990 	bl	800301a <HAL_TIM_IC_CaptureCallback>
 8002cfa:	e005      	b.n	8002d08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f983 	bl	8003008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f992 	bl	800302c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d122      	bne.n	8002d62 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d11b      	bne.n	8002d62 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f06f 0208 	mvn.w	r2, #8
 8002d32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2204      	movs	r2, #4
 8002d38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f966 	bl	800301a <HAL_TIM_IC_CaptureCallback>
 8002d4e:	e005      	b.n	8002d5c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f959 	bl	8003008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f968 	bl	800302c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	f003 0310 	and.w	r3, r3, #16
 8002d6c:	2b10      	cmp	r3, #16
 8002d6e:	d122      	bne.n	8002db6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	2b10      	cmp	r3, #16
 8002d7c:	d11b      	bne.n	8002db6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f06f 0210 	mvn.w	r2, #16
 8002d86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2208      	movs	r2, #8
 8002d8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f93c 	bl	800301a <HAL_TIM_IC_CaptureCallback>
 8002da2:	e005      	b.n	8002db0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f92f 	bl	8003008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f93e 	bl	800302c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d10e      	bne.n	8002de2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d107      	bne.n	8002de2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f06f 0201 	mvn.w	r2, #1
 8002dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f90a 	bl	8002ff6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dec:	2b80      	cmp	r3, #128	; 0x80
 8002dee:	d10e      	bne.n	8002e0e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfa:	2b80      	cmp	r3, #128	; 0x80
 8002dfc:	d107      	bne.n	8002e0e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 fa70 	bl	80032ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e18:	2b40      	cmp	r3, #64	; 0x40
 8002e1a:	d10e      	bne.n	8002e3a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e26:	2b40      	cmp	r3, #64	; 0x40
 8002e28:	d107      	bne.n	8002e3a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f902 	bl	800303e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	2b20      	cmp	r3, #32
 8002e46:	d10e      	bne.n	8002e66 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	f003 0320 	and.w	r3, r3, #32
 8002e52:	2b20      	cmp	r3, #32
 8002e54:	d107      	bne.n	8002e66 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f06f 0220 	mvn.w	r2, #32
 8002e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 fa3b 	bl	80032dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b084      	sub	sp, #16
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d101      	bne.n	8002e86 <HAL_TIM_ConfigClockSource+0x18>
 8002e82:	2302      	movs	r3, #2
 8002e84:	e0b3      	b.n	8002fee <HAL_TIM_ConfigClockSource+0x180>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2202      	movs	r2, #2
 8002e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ea4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eac:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ebe:	d03e      	beq.n	8002f3e <HAL_TIM_ConfigClockSource+0xd0>
 8002ec0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ec4:	f200 8087 	bhi.w	8002fd6 <HAL_TIM_ConfigClockSource+0x168>
 8002ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ecc:	f000 8085 	beq.w	8002fda <HAL_TIM_ConfigClockSource+0x16c>
 8002ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed4:	d87f      	bhi.n	8002fd6 <HAL_TIM_ConfigClockSource+0x168>
 8002ed6:	2b70      	cmp	r3, #112	; 0x70
 8002ed8:	d01a      	beq.n	8002f10 <HAL_TIM_ConfigClockSource+0xa2>
 8002eda:	2b70      	cmp	r3, #112	; 0x70
 8002edc:	d87b      	bhi.n	8002fd6 <HAL_TIM_ConfigClockSource+0x168>
 8002ede:	2b60      	cmp	r3, #96	; 0x60
 8002ee0:	d050      	beq.n	8002f84 <HAL_TIM_ConfigClockSource+0x116>
 8002ee2:	2b60      	cmp	r3, #96	; 0x60
 8002ee4:	d877      	bhi.n	8002fd6 <HAL_TIM_ConfigClockSource+0x168>
 8002ee6:	2b50      	cmp	r3, #80	; 0x50
 8002ee8:	d03c      	beq.n	8002f64 <HAL_TIM_ConfigClockSource+0xf6>
 8002eea:	2b50      	cmp	r3, #80	; 0x50
 8002eec:	d873      	bhi.n	8002fd6 <HAL_TIM_ConfigClockSource+0x168>
 8002eee:	2b40      	cmp	r3, #64	; 0x40
 8002ef0:	d058      	beq.n	8002fa4 <HAL_TIM_ConfigClockSource+0x136>
 8002ef2:	2b40      	cmp	r3, #64	; 0x40
 8002ef4:	d86f      	bhi.n	8002fd6 <HAL_TIM_ConfigClockSource+0x168>
 8002ef6:	2b30      	cmp	r3, #48	; 0x30
 8002ef8:	d064      	beq.n	8002fc4 <HAL_TIM_ConfigClockSource+0x156>
 8002efa:	2b30      	cmp	r3, #48	; 0x30
 8002efc:	d86b      	bhi.n	8002fd6 <HAL_TIM_ConfigClockSource+0x168>
 8002efe:	2b20      	cmp	r3, #32
 8002f00:	d060      	beq.n	8002fc4 <HAL_TIM_ConfigClockSource+0x156>
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d867      	bhi.n	8002fd6 <HAL_TIM_ConfigClockSource+0x168>
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d05c      	beq.n	8002fc4 <HAL_TIM_ConfigClockSource+0x156>
 8002f0a:	2b10      	cmp	r3, #16
 8002f0c:	d05a      	beq.n	8002fc4 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002f0e:	e062      	b.n	8002fd6 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6818      	ldr	r0, [r3, #0]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	6899      	ldr	r1, [r3, #8]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f000 f965 	bl	80031ee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f32:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	609a      	str	r2, [r3, #8]
      break;
 8002f3c:	e04e      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6818      	ldr	r0, [r3, #0]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	6899      	ldr	r1, [r3, #8]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f000 f94e 	bl	80031ee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f60:	609a      	str	r2, [r3, #8]
      break;
 8002f62:	e03b      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	6859      	ldr	r1, [r3, #4]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	461a      	mov	r2, r3
 8002f72:	f000 f8c5 	bl	8003100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2150      	movs	r1, #80	; 0x50
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 f91c 	bl	80031ba <TIM_ITRx_SetConfig>
      break;
 8002f82:	e02b      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6818      	ldr	r0, [r3, #0]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	6859      	ldr	r1, [r3, #4]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	461a      	mov	r2, r3
 8002f92:	f000 f8e3 	bl	800315c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2160      	movs	r1, #96	; 0x60
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 f90c 	bl	80031ba <TIM_ITRx_SetConfig>
      break;
 8002fa2:	e01b      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6818      	ldr	r0, [r3, #0]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	6859      	ldr	r1, [r3, #4]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	f000 f8a5 	bl	8003100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2140      	movs	r1, #64	; 0x40
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 f8fc 	bl	80031ba <TIM_ITRx_SetConfig>
      break;
 8002fc2:	e00b      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4610      	mov	r0, r2
 8002fd0:	f000 f8f3 	bl	80031ba <TIM_ITRx_SetConfig>
        break;
 8002fd4:	e002      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fd6:	bf00      	nop
 8002fd8:	e000      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr

08003008 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr

0800301a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr

0800302c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr

0800303e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr

08003050 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a25      	ldr	r2, [pc, #148]	; (80030f8 <TIM_Base_SetConfig+0xa8>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d007      	beq.n	8003078 <TIM_Base_SetConfig+0x28>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800306e:	d003      	beq.n	8003078 <TIM_Base_SetConfig+0x28>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a22      	ldr	r2, [pc, #136]	; (80030fc <TIM_Base_SetConfig+0xac>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d108      	bne.n	800308a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	4313      	orrs	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a1a      	ldr	r2, [pc, #104]	; (80030f8 <TIM_Base_SetConfig+0xa8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d007      	beq.n	80030a2 <TIM_Base_SetConfig+0x52>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003098:	d003      	beq.n	80030a2 <TIM_Base_SetConfig+0x52>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a17      	ldr	r2, [pc, #92]	; (80030fc <TIM_Base_SetConfig+0xac>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d108      	bne.n	80030b4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a07      	ldr	r2, [pc, #28]	; (80030f8 <TIM_Base_SetConfig+0xa8>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d103      	bne.n	80030e8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	615a      	str	r2, [r3, #20]
}
 80030ee:	bf00      	nop
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr
 80030f8:	40012c00 	.word	0x40012c00
 80030fc:	40000400 	.word	0x40000400

08003100 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	f023 0201 	bic.w	r2, r3, #1
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800312a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f023 030a 	bic.w	r3, r3, #10
 800313c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	4313      	orrs	r3, r2
 8003144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	621a      	str	r2, [r3, #32]
}
 8003152:	bf00      	nop
 8003154:	371c      	adds	r7, #28
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr

0800315c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	f023 0210 	bic.w	r2, r3, #16
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003186:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	031b      	lsls	r3, r3, #12
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	4313      	orrs	r3, r2
 8003190:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003198:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	621a      	str	r2, [r3, #32]
}
 80031b0:	bf00      	nop
 80031b2:	371c      	adds	r7, #28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr

080031ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b085      	sub	sp, #20
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
 80031c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	f043 0307 	orr.w	r3, r3, #7
 80031dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	609a      	str	r2, [r3, #8]
}
 80031e4:	bf00      	nop
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc80      	pop	{r7}
 80031ec:	4770      	bx	lr

080031ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b087      	sub	sp, #28
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	60f8      	str	r0, [r7, #12]
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	607a      	str	r2, [r7, #4]
 80031fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003208:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	021a      	lsls	r2, r3, #8
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	431a      	orrs	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	4313      	orrs	r3, r2
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	4313      	orrs	r3, r2
 800321a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	609a      	str	r2, [r3, #8]
}
 8003222:	bf00      	nop
 8003224:	371c      	adds	r7, #28
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr

0800322c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800323c:	2b01      	cmp	r3, #1
 800323e:	d101      	bne.n	8003244 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003240:	2302      	movs	r3, #2
 8003242:	e041      	b.n	80032c8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a14      	ldr	r2, [pc, #80]	; (80032d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d009      	beq.n	800329c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003290:	d004      	beq.n	800329c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a10      	ldr	r2, [pc, #64]	; (80032d8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d10c      	bne.n	80032b6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40012c00 	.word	0x40012c00
 80032d8:	40000400 	.word	0x40000400

080032dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr

080032ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr

08003300 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e03f      	b.n	8003392 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d106      	bne.n	800332c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7fd ffb8 	bl	800129c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2224      	movs	r2, #36	; 0x24
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003342:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 fcc7 	bl	8003cd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	691a      	ldr	r2, [r3, #16]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003358:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695a      	ldr	r2, [r3, #20]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003368:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003378:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b08a      	sub	sp, #40	; 0x28
 800339e:	af02      	add	r7, sp, #8
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	603b      	str	r3, [r7, #0]
 80033a6:	4613      	mov	r3, r2
 80033a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b20      	cmp	r3, #32
 80033b8:	d17c      	bne.n	80034b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <HAL_UART_Transmit+0x2c>
 80033c0:	88fb      	ldrh	r3, [r7, #6]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e075      	b.n	80034b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_UART_Transmit+0x3e>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e06e      	b.n	80034b6 <HAL_UART_Transmit+0x11c>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2221      	movs	r2, #33	; 0x21
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033ee:	f7fe f981 	bl	80016f4 <HAL_GetTick>
 80033f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	88fa      	ldrh	r2, [r7, #6]
 80033f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	88fa      	ldrh	r2, [r7, #6]
 80033fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003408:	d108      	bne.n	800341c <HAL_UART_Transmit+0x82>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d104      	bne.n	800341c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003412:	2300      	movs	r3, #0
 8003414:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	61bb      	str	r3, [r7, #24]
 800341a:	e003      	b.n	8003424 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003420:	2300      	movs	r3, #0
 8003422:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800342c:	e02a      	b.n	8003484 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2200      	movs	r2, #0
 8003436:	2180      	movs	r1, #128	; 0x80
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 fab3 	bl	80039a4 <UART_WaitOnFlagUntilTimeout>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e036      	b.n	80034b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10b      	bne.n	8003466 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	461a      	mov	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800345c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	3302      	adds	r3, #2
 8003462:	61bb      	str	r3, [r7, #24]
 8003464:	e007      	b.n	8003476 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	781a      	ldrb	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	3301      	adds	r3, #1
 8003474:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003488:	b29b      	uxth	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1cf      	bne.n	800342e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2200      	movs	r2, #0
 8003496:	2140      	movs	r1, #64	; 0x40
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 fa83 	bl	80039a4 <UART_WaitOnFlagUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e006      	b.n	80034b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	e000      	b.n	80034b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80034b4:	2302      	movs	r3, #2
  }
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3720      	adds	r7, #32
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b08a      	sub	sp, #40	; 0x28
 80034c2:	af02      	add	r7, sp, #8
 80034c4:	60f8      	str	r0, [r7, #12]
 80034c6:	60b9      	str	r1, [r7, #8]
 80034c8:	603b      	str	r3, [r7, #0]
 80034ca:	4613      	mov	r3, r2
 80034cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b20      	cmp	r3, #32
 80034dc:	f040 808c 	bne.w	80035f8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <HAL_UART_Receive+0x2e>
 80034e6:	88fb      	ldrh	r3, [r7, #6]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e084      	b.n	80035fa <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d101      	bne.n	80034fe <HAL_UART_Receive+0x40>
 80034fa:	2302      	movs	r3, #2
 80034fc:	e07d      	b.n	80035fa <HAL_UART_Receive+0x13c>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2222      	movs	r2, #34	; 0x22
 8003510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800351a:	f7fe f8eb 	bl	80016f4 <HAL_GetTick>
 800351e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	88fa      	ldrh	r2, [r7, #6]
 8003524:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	88fa      	ldrh	r2, [r7, #6]
 800352a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003534:	d108      	bne.n	8003548 <HAL_UART_Receive+0x8a>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d104      	bne.n	8003548 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800353e:	2300      	movs	r3, #0
 8003540:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	61bb      	str	r3, [r7, #24]
 8003546:	e003      	b.n	8003550 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800354c:	2300      	movs	r3, #0
 800354e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003558:	e043      	b.n	80035e2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2200      	movs	r2, #0
 8003562:	2120      	movs	r1, #32
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 fa1d 	bl	80039a4 <UART_WaitOnFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e042      	b.n	80035fa <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10c      	bne.n	8003594 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	b29b      	uxth	r3, r3
 8003582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003586:	b29a      	uxth	r2, r3
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	3302      	adds	r3, #2
 8003590:	61bb      	str	r3, [r7, #24]
 8003592:	e01f      	b.n	80035d4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800359c:	d007      	beq.n	80035ae <HAL_UART_Receive+0xf0>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10a      	bne.n	80035bc <HAL_UART_Receive+0xfe>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	701a      	strb	r2, [r3, #0]
 80035ba:	e008      	b.n	80035ce <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3301      	adds	r3, #1
 80035d2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035d8:	b29b      	uxth	r3, r3
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1b6      	bne.n	800355a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	e000      	b.n	80035fa <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80035f8:	2302      	movs	r3, #2
  }
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3720      	adds	r7, #32
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
	...

08003604 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08a      	sub	sp, #40	; 0x28
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003624:	2300      	movs	r3, #0
 8003626:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10d      	bne.n	8003656 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	f003 0320 	and.w	r3, r3, #32
 8003640:	2b00      	cmp	r3, #0
 8003642:	d008      	beq.n	8003656 <HAL_UART_IRQHandler+0x52>
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	f003 0320 	and.w	r3, r3, #32
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fa99 	bl	8003b86 <UART_Receive_IT>
      return;
 8003654:	e17b      	b.n	800394e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 80b1 	beq.w	80037c0 <HAL_UART_IRQHandler+0x1bc>
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d105      	bne.n	8003674 <HAL_UART_IRQHandler+0x70>
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 80a6 	beq.w	80037c0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <HAL_UART_IRQHandler+0x90>
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	f043 0201 	orr.w	r2, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00a      	beq.n	80036b4 <HAL_UART_IRQHandler+0xb0>
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d005      	beq.n	80036b4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	f043 0202 	orr.w	r2, r3, #2
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <HAL_UART_IRQHandler+0xd0>
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d005      	beq.n	80036d4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	f043 0204 	orr.w	r2, r3, #4
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00f      	beq.n	80036fe <HAL_UART_IRQHandler+0xfa>
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	f003 0320 	and.w	r3, r3, #32
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d104      	bne.n	80036f2 <HAL_UART_IRQHandler+0xee>
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d005      	beq.n	80036fe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f043 0208 	orr.w	r2, r3, #8
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 811e 	beq.w	8003944 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	f003 0320 	and.w	r3, r3, #32
 800370e:	2b00      	cmp	r3, #0
 8003710:	d007      	beq.n	8003722 <HAL_UART_IRQHandler+0x11e>
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	f003 0320 	and.w	r3, r3, #32
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 fa32 	bl	8003b86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372c:	2b00      	cmp	r3, #0
 800372e:	bf14      	ite	ne
 8003730:	2301      	movne	r3, #1
 8003732:	2300      	moveq	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	f003 0308 	and.w	r3, r3, #8
 8003740:	2b00      	cmp	r3, #0
 8003742:	d102      	bne.n	800374a <HAL_UART_IRQHandler+0x146>
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d031      	beq.n	80037ae <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f974 	bl	8003a38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375a:	2b00      	cmp	r3, #0
 800375c:	d023      	beq.n	80037a6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695a      	ldr	r2, [r3, #20]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800376c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003772:	2b00      	cmp	r3, #0
 8003774:	d013      	beq.n	800379e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377a:	4a76      	ldr	r2, [pc, #472]	; (8003954 <HAL_UART_IRQHandler+0x350>)
 800377c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003782:	4618      	mov	r0, r3
 8003784:	f7fe f92c 	bl	80019e0 <HAL_DMA_Abort_IT>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d016      	beq.n	80037bc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003798:	4610      	mov	r0, r2
 800379a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800379c:	e00e      	b.n	80037bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f8ec 	bl	800397c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a4:	e00a      	b.n	80037bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f8e8 	bl	800397c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ac:	e006      	b.n	80037bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f8e4 	bl	800397c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80037ba:	e0c3      	b.n	8003944 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037bc:	bf00      	nop
    return;
 80037be:	e0c1      	b.n	8003944 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	f040 80a1 	bne.w	800390c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 809b 	beq.w	800390c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	f003 0310 	and.w	r3, r3, #16
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 8095 	beq.w	800390c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037e2:	2300      	movs	r3, #0
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003802:	2b00      	cmp	r3, #0
 8003804:	d04e      	beq.n	80038a4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003810:	8a3b      	ldrh	r3, [r7, #16]
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 8098 	beq.w	8003948 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800381c:	8a3a      	ldrh	r2, [r7, #16]
 800381e:	429a      	cmp	r2, r3
 8003820:	f080 8092 	bcs.w	8003948 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	8a3a      	ldrh	r2, [r7, #16]
 8003828:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	2b20      	cmp	r3, #32
 8003832:	d02b      	beq.n	800388c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003842:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695a      	ldr	r2, [r3, #20]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0201 	bic.w	r2, r2, #1
 8003852:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	695a      	ldr	r2, [r3, #20]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003862:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0210 	bic.w	r2, r2, #16
 8003880:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003886:	4618      	mov	r0, r3
 8003888:	f7fe f86f 	bl	800196a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003894:	b29b      	uxth	r3, r3
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	b29b      	uxth	r3, r3
 800389a:	4619      	mov	r1, r3
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f876 	bl	800398e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80038a2:	e051      	b.n	8003948 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d047      	beq.n	800394c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80038bc:	8a7b      	ldrh	r3, [r7, #18]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d044      	beq.n	800394c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038d0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695a      	ldr	r2, [r3, #20]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0201 	bic.w	r2, r2, #1
 80038e0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0210 	bic.w	r2, r2, #16
 80038fe:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003900:	8a7b      	ldrh	r3, [r7, #18]
 8003902:	4619      	mov	r1, r3
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f842 	bl	800398e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800390a:	e01f      	b.n	800394c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003912:	2b00      	cmp	r3, #0
 8003914:	d008      	beq.n	8003928 <HAL_UART_IRQHandler+0x324>
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f8c9 	bl	8003ab8 <UART_Transmit_IT>
    return;
 8003926:	e012      	b.n	800394e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00d      	beq.n	800394e <HAL_UART_IRQHandler+0x34a>
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003938:	2b00      	cmp	r3, #0
 800393a:	d008      	beq.n	800394e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f90a 	bl	8003b56 <UART_EndTransmit_IT>
    return;
 8003942:	e004      	b.n	800394e <HAL_UART_IRQHandler+0x34a>
    return;
 8003944:	bf00      	nop
 8003946:	e002      	b.n	800394e <HAL_UART_IRQHandler+0x34a>
      return;
 8003948:	bf00      	nop
 800394a:	e000      	b.n	800394e <HAL_UART_IRQHandler+0x34a>
      return;
 800394c:	bf00      	nop
  }
}
 800394e:	3728      	adds	r7, #40	; 0x28
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	08003a91 	.word	0x08003a91

08003958 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr

0800396a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr

0800397c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	4770      	bx	lr

0800398e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	460b      	mov	r3, r1
 8003998:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr

080039a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	603b      	str	r3, [r7, #0]
 80039b0:	4613      	mov	r3, r2
 80039b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039b4:	e02c      	b.n	8003a10 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039bc:	d028      	beq.n	8003a10 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d007      	beq.n	80039d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80039c4:	f7fd fe96 	bl	80016f4 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d21d      	bcs.n	8003a10 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039e2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695a      	ldr	r2, [r3, #20]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0201 	bic.w	r2, r2, #1
 80039f2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e00f      	b.n	8003a30 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	bf0c      	ite	eq
 8003a20:	2301      	moveq	r3, #1
 8003a22:	2300      	movne	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	461a      	mov	r2, r3
 8003a28:	79fb      	ldrb	r3, [r7, #7]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d0c3      	beq.n	80039b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a4e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695a      	ldr	r2, [r3, #20]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0201 	bic.w	r2, r2, #1
 8003a5e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d107      	bne.n	8003a78 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0210 	bic.w	r2, r2, #16
 8003a76:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bc80      	pop	{r7}
 8003a8e:	4770      	bx	lr

08003a90 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f7ff ff66 	bl	800397c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ab0:	bf00      	nop
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b21      	cmp	r3, #33	; 0x21
 8003aca:	d13e      	bne.n	8003b4a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad4:	d114      	bne.n	8003b00 <UART_Transmit_IT+0x48>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d110      	bne.n	8003b00 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003af2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	1c9a      	adds	r2, r3, #2
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	621a      	str	r2, [r3, #32]
 8003afe:	e008      	b.n	8003b12 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	1c59      	adds	r1, r3, #1
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6211      	str	r1, [r2, #32]
 8003b0a:	781a      	ldrb	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	4619      	mov	r1, r3
 8003b20:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10f      	bne.n	8003b46 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68da      	ldr	r2, [r3, #12]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b34:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68da      	ldr	r2, [r3, #12]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b44:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	e000      	b.n	8003b4c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b4a:	2302      	movs	r3, #2
  }
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr

08003b56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b082      	sub	sp, #8
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68da      	ldr	r2, [r3, #12]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2220      	movs	r2, #32
 8003b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff feee 	bl	8003958 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b086      	sub	sp, #24
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b22      	cmp	r3, #34	; 0x22
 8003b98:	f040 8099 	bne.w	8003cce <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba4:	d117      	bne.n	8003bd6 <UART_Receive_IT+0x50>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d113      	bne.n	8003bd6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bce:	1c9a      	adds	r2, r3, #2
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	629a      	str	r2, [r3, #40]	; 0x28
 8003bd4:	e026      	b.n	8003c24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bda:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be8:	d007      	beq.n	8003bfa <UART_Receive_IT+0x74>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10a      	bne.n	8003c08 <UART_Receive_IT+0x82>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	701a      	strb	r2, [r3, #0]
 8003c06:	e008      	b.n	8003c1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	4619      	mov	r1, r3
 8003c32:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d148      	bne.n	8003cca <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0220 	bic.w	r2, r2, #32
 8003c46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	695a      	ldr	r2, [r3, #20]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0201 	bic.w	r2, r2, #1
 8003c66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d123      	bne.n	8003cc0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0210 	bic.w	r2, r2, #16
 8003c8c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0310 	and.w	r3, r3, #16
 8003c98:	2b10      	cmp	r3, #16
 8003c9a:	d10a      	bne.n	8003cb2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7ff fe68 	bl	800398e <HAL_UARTEx_RxEventCallback>
 8003cbe:	e002      	b.n	8003cc6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff fe52 	bl	800396a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	e002      	b.n	8003cd0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	e000      	b.n	8003cd0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003cce:	2302      	movs	r3, #2
  }
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003d12:	f023 030c 	bic.w	r3, r3, #12
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6812      	ldr	r2, [r2, #0]
 8003d1a:	68b9      	ldr	r1, [r7, #8]
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699a      	ldr	r2, [r3, #24]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a2c      	ldr	r2, [pc, #176]	; (8003dec <UART_SetConfig+0x114>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d103      	bne.n	8003d48 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d40:	f7fe fc40 	bl	80025c4 <HAL_RCC_GetPCLK2Freq>
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	e002      	b.n	8003d4e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d48:	f7fe fc28 	bl	800259c <HAL_RCC_GetPCLK1Freq>
 8003d4c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4613      	mov	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	009a      	lsls	r2, r3, #2
 8003d58:	441a      	add	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d64:	4a22      	ldr	r2, [pc, #136]	; (8003df0 <UART_SetConfig+0x118>)
 8003d66:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6a:	095b      	lsrs	r3, r3, #5
 8003d6c:	0119      	lsls	r1, r3, #4
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	4613      	mov	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	009a      	lsls	r2, r3, #2
 8003d78:	441a      	add	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d84:	4b1a      	ldr	r3, [pc, #104]	; (8003df0 <UART_SetConfig+0x118>)
 8003d86:	fba3 0302 	umull	r0, r3, r3, r2
 8003d8a:	095b      	lsrs	r3, r3, #5
 8003d8c:	2064      	movs	r0, #100	; 0x64
 8003d8e:	fb00 f303 	mul.w	r3, r0, r3
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	3332      	adds	r3, #50	; 0x32
 8003d98:	4a15      	ldr	r2, [pc, #84]	; (8003df0 <UART_SetConfig+0x118>)
 8003d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003da4:	4419      	add	r1, r3
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4613      	mov	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	009a      	lsls	r2, r3, #2
 8003db0:	441a      	add	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dbc:	4b0c      	ldr	r3, [pc, #48]	; (8003df0 <UART_SetConfig+0x118>)
 8003dbe:	fba3 0302 	umull	r0, r3, r3, r2
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	2064      	movs	r0, #100	; 0x64
 8003dc6:	fb00 f303 	mul.w	r3, r0, r3
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	3332      	adds	r3, #50	; 0x32
 8003dd0:	4a07      	ldr	r2, [pc, #28]	; (8003df0 <UART_SetConfig+0x118>)
 8003dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd6:	095b      	lsrs	r3, r3, #5
 8003dd8:	f003 020f 	and.w	r2, r3, #15
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	440a      	add	r2, r1
 8003de2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003de4:	bf00      	nop
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40013800 	.word	0x40013800
 8003df0:	51eb851f 	.word	0x51eb851f

08003df4 <__errno>:
 8003df4:	4b01      	ldr	r3, [pc, #4]	; (8003dfc <__errno+0x8>)
 8003df6:	6818      	ldr	r0, [r3, #0]
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	2000000c 	.word	0x2000000c

08003e00 <__libc_init_array>:
 8003e00:	b570      	push	{r4, r5, r6, lr}
 8003e02:	2600      	movs	r6, #0
 8003e04:	4d0c      	ldr	r5, [pc, #48]	; (8003e38 <__libc_init_array+0x38>)
 8003e06:	4c0d      	ldr	r4, [pc, #52]	; (8003e3c <__libc_init_array+0x3c>)
 8003e08:	1b64      	subs	r4, r4, r5
 8003e0a:	10a4      	asrs	r4, r4, #2
 8003e0c:	42a6      	cmp	r6, r4
 8003e0e:	d109      	bne.n	8003e24 <__libc_init_array+0x24>
 8003e10:	f001 f888 	bl	8004f24 <_init>
 8003e14:	2600      	movs	r6, #0
 8003e16:	4d0a      	ldr	r5, [pc, #40]	; (8003e40 <__libc_init_array+0x40>)
 8003e18:	4c0a      	ldr	r4, [pc, #40]	; (8003e44 <__libc_init_array+0x44>)
 8003e1a:	1b64      	subs	r4, r4, r5
 8003e1c:	10a4      	asrs	r4, r4, #2
 8003e1e:	42a6      	cmp	r6, r4
 8003e20:	d105      	bne.n	8003e2e <__libc_init_array+0x2e>
 8003e22:	bd70      	pop	{r4, r5, r6, pc}
 8003e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e28:	4798      	blx	r3
 8003e2a:	3601      	adds	r6, #1
 8003e2c:	e7ee      	b.n	8003e0c <__libc_init_array+0xc>
 8003e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e32:	4798      	blx	r3
 8003e34:	3601      	adds	r6, #1
 8003e36:	e7f2      	b.n	8003e1e <__libc_init_array+0x1e>
 8003e38:	08005238 	.word	0x08005238
 8003e3c:	08005238 	.word	0x08005238
 8003e40:	08005238 	.word	0x08005238
 8003e44:	0800523c 	.word	0x0800523c

08003e48 <memset>:
 8003e48:	4603      	mov	r3, r0
 8003e4a:	4402      	add	r2, r0
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d100      	bne.n	8003e52 <memset+0xa>
 8003e50:	4770      	bx	lr
 8003e52:	f803 1b01 	strb.w	r1, [r3], #1
 8003e56:	e7f9      	b.n	8003e4c <memset+0x4>

08003e58 <iprintf>:
 8003e58:	b40f      	push	{r0, r1, r2, r3}
 8003e5a:	4b0a      	ldr	r3, [pc, #40]	; (8003e84 <iprintf+0x2c>)
 8003e5c:	b513      	push	{r0, r1, r4, lr}
 8003e5e:	681c      	ldr	r4, [r3, #0]
 8003e60:	b124      	cbz	r4, 8003e6c <iprintf+0x14>
 8003e62:	69a3      	ldr	r3, [r4, #24]
 8003e64:	b913      	cbnz	r3, 8003e6c <iprintf+0x14>
 8003e66:	4620      	mov	r0, r4
 8003e68:	f000 fa6e 	bl	8004348 <__sinit>
 8003e6c:	ab05      	add	r3, sp, #20
 8003e6e:	4620      	mov	r0, r4
 8003e70:	9a04      	ldr	r2, [sp, #16]
 8003e72:	68a1      	ldr	r1, [r4, #8]
 8003e74:	9301      	str	r3, [sp, #4]
 8003e76:	f000 fc71 	bl	800475c <_vfiprintf_r>
 8003e7a:	b002      	add	sp, #8
 8003e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e80:	b004      	add	sp, #16
 8003e82:	4770      	bx	lr
 8003e84:	2000000c 	.word	0x2000000c

08003e88 <putchar>:
 8003e88:	b538      	push	{r3, r4, r5, lr}
 8003e8a:	4b08      	ldr	r3, [pc, #32]	; (8003eac <putchar+0x24>)
 8003e8c:	4605      	mov	r5, r0
 8003e8e:	681c      	ldr	r4, [r3, #0]
 8003e90:	b124      	cbz	r4, 8003e9c <putchar+0x14>
 8003e92:	69a3      	ldr	r3, [r4, #24]
 8003e94:	b913      	cbnz	r3, 8003e9c <putchar+0x14>
 8003e96:	4620      	mov	r0, r4
 8003e98:	f000 fa56 	bl	8004348 <__sinit>
 8003e9c:	4629      	mov	r1, r5
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	68a2      	ldr	r2, [r4, #8]
 8003ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ea6:	f000 bf1f 	b.w	8004ce8 <_putc_r>
 8003eaa:	bf00      	nop
 8003eac:	2000000c 	.word	0x2000000c

08003eb0 <_puts_r>:
 8003eb0:	b570      	push	{r4, r5, r6, lr}
 8003eb2:	460e      	mov	r6, r1
 8003eb4:	4605      	mov	r5, r0
 8003eb6:	b118      	cbz	r0, 8003ec0 <_puts_r+0x10>
 8003eb8:	6983      	ldr	r3, [r0, #24]
 8003eba:	b90b      	cbnz	r3, 8003ec0 <_puts_r+0x10>
 8003ebc:	f000 fa44 	bl	8004348 <__sinit>
 8003ec0:	69ab      	ldr	r3, [r5, #24]
 8003ec2:	68ac      	ldr	r4, [r5, #8]
 8003ec4:	b913      	cbnz	r3, 8003ecc <_puts_r+0x1c>
 8003ec6:	4628      	mov	r0, r5
 8003ec8:	f000 fa3e 	bl	8004348 <__sinit>
 8003ecc:	4b2c      	ldr	r3, [pc, #176]	; (8003f80 <_puts_r+0xd0>)
 8003ece:	429c      	cmp	r4, r3
 8003ed0:	d120      	bne.n	8003f14 <_puts_r+0x64>
 8003ed2:	686c      	ldr	r4, [r5, #4]
 8003ed4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ed6:	07db      	lsls	r3, r3, #31
 8003ed8:	d405      	bmi.n	8003ee6 <_puts_r+0x36>
 8003eda:	89a3      	ldrh	r3, [r4, #12]
 8003edc:	0598      	lsls	r0, r3, #22
 8003ede:	d402      	bmi.n	8003ee6 <_puts_r+0x36>
 8003ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ee2:	f000 facf 	bl	8004484 <__retarget_lock_acquire_recursive>
 8003ee6:	89a3      	ldrh	r3, [r4, #12]
 8003ee8:	0719      	lsls	r1, r3, #28
 8003eea:	d51d      	bpl.n	8003f28 <_puts_r+0x78>
 8003eec:	6923      	ldr	r3, [r4, #16]
 8003eee:	b1db      	cbz	r3, 8003f28 <_puts_r+0x78>
 8003ef0:	3e01      	subs	r6, #1
 8003ef2:	68a3      	ldr	r3, [r4, #8]
 8003ef4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	60a3      	str	r3, [r4, #8]
 8003efc:	bb39      	cbnz	r1, 8003f4e <_puts_r+0x9e>
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	da38      	bge.n	8003f74 <_puts_r+0xc4>
 8003f02:	4622      	mov	r2, r4
 8003f04:	210a      	movs	r1, #10
 8003f06:	4628      	mov	r0, r5
 8003f08:	f000 f848 	bl	8003f9c <__swbuf_r>
 8003f0c:	3001      	adds	r0, #1
 8003f0e:	d011      	beq.n	8003f34 <_puts_r+0x84>
 8003f10:	250a      	movs	r5, #10
 8003f12:	e011      	b.n	8003f38 <_puts_r+0x88>
 8003f14:	4b1b      	ldr	r3, [pc, #108]	; (8003f84 <_puts_r+0xd4>)
 8003f16:	429c      	cmp	r4, r3
 8003f18:	d101      	bne.n	8003f1e <_puts_r+0x6e>
 8003f1a:	68ac      	ldr	r4, [r5, #8]
 8003f1c:	e7da      	b.n	8003ed4 <_puts_r+0x24>
 8003f1e:	4b1a      	ldr	r3, [pc, #104]	; (8003f88 <_puts_r+0xd8>)
 8003f20:	429c      	cmp	r4, r3
 8003f22:	bf08      	it	eq
 8003f24:	68ec      	ldreq	r4, [r5, #12]
 8003f26:	e7d5      	b.n	8003ed4 <_puts_r+0x24>
 8003f28:	4621      	mov	r1, r4
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	f000 f888 	bl	8004040 <__swsetup_r>
 8003f30:	2800      	cmp	r0, #0
 8003f32:	d0dd      	beq.n	8003ef0 <_puts_r+0x40>
 8003f34:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003f38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f3a:	07da      	lsls	r2, r3, #31
 8003f3c:	d405      	bmi.n	8003f4a <_puts_r+0x9a>
 8003f3e:	89a3      	ldrh	r3, [r4, #12]
 8003f40:	059b      	lsls	r3, r3, #22
 8003f42:	d402      	bmi.n	8003f4a <_puts_r+0x9a>
 8003f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f46:	f000 fa9e 	bl	8004486 <__retarget_lock_release_recursive>
 8003f4a:	4628      	mov	r0, r5
 8003f4c:	bd70      	pop	{r4, r5, r6, pc}
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	da04      	bge.n	8003f5c <_puts_r+0xac>
 8003f52:	69a2      	ldr	r2, [r4, #24]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	dc06      	bgt.n	8003f66 <_puts_r+0xb6>
 8003f58:	290a      	cmp	r1, #10
 8003f5a:	d004      	beq.n	8003f66 <_puts_r+0xb6>
 8003f5c:	6823      	ldr	r3, [r4, #0]
 8003f5e:	1c5a      	adds	r2, r3, #1
 8003f60:	6022      	str	r2, [r4, #0]
 8003f62:	7019      	strb	r1, [r3, #0]
 8003f64:	e7c5      	b.n	8003ef2 <_puts_r+0x42>
 8003f66:	4622      	mov	r2, r4
 8003f68:	4628      	mov	r0, r5
 8003f6a:	f000 f817 	bl	8003f9c <__swbuf_r>
 8003f6e:	3001      	adds	r0, #1
 8003f70:	d1bf      	bne.n	8003ef2 <_puts_r+0x42>
 8003f72:	e7df      	b.n	8003f34 <_puts_r+0x84>
 8003f74:	250a      	movs	r5, #10
 8003f76:	6823      	ldr	r3, [r4, #0]
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	6022      	str	r2, [r4, #0]
 8003f7c:	701d      	strb	r5, [r3, #0]
 8003f7e:	e7db      	b.n	8003f38 <_puts_r+0x88>
 8003f80:	080051c4 	.word	0x080051c4
 8003f84:	080051e4 	.word	0x080051e4
 8003f88:	080051a4 	.word	0x080051a4

08003f8c <puts>:
 8003f8c:	4b02      	ldr	r3, [pc, #8]	; (8003f98 <puts+0xc>)
 8003f8e:	4601      	mov	r1, r0
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	f7ff bf8d 	b.w	8003eb0 <_puts_r>
 8003f96:	bf00      	nop
 8003f98:	2000000c 	.word	0x2000000c

08003f9c <__swbuf_r>:
 8003f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9e:	460e      	mov	r6, r1
 8003fa0:	4614      	mov	r4, r2
 8003fa2:	4605      	mov	r5, r0
 8003fa4:	b118      	cbz	r0, 8003fae <__swbuf_r+0x12>
 8003fa6:	6983      	ldr	r3, [r0, #24]
 8003fa8:	b90b      	cbnz	r3, 8003fae <__swbuf_r+0x12>
 8003faa:	f000 f9cd 	bl	8004348 <__sinit>
 8003fae:	4b21      	ldr	r3, [pc, #132]	; (8004034 <__swbuf_r+0x98>)
 8003fb0:	429c      	cmp	r4, r3
 8003fb2:	d12b      	bne.n	800400c <__swbuf_r+0x70>
 8003fb4:	686c      	ldr	r4, [r5, #4]
 8003fb6:	69a3      	ldr	r3, [r4, #24]
 8003fb8:	60a3      	str	r3, [r4, #8]
 8003fba:	89a3      	ldrh	r3, [r4, #12]
 8003fbc:	071a      	lsls	r2, r3, #28
 8003fbe:	d52f      	bpl.n	8004020 <__swbuf_r+0x84>
 8003fc0:	6923      	ldr	r3, [r4, #16]
 8003fc2:	b36b      	cbz	r3, 8004020 <__swbuf_r+0x84>
 8003fc4:	6923      	ldr	r3, [r4, #16]
 8003fc6:	6820      	ldr	r0, [r4, #0]
 8003fc8:	b2f6      	uxtb	r6, r6
 8003fca:	1ac0      	subs	r0, r0, r3
 8003fcc:	6963      	ldr	r3, [r4, #20]
 8003fce:	4637      	mov	r7, r6
 8003fd0:	4283      	cmp	r3, r0
 8003fd2:	dc04      	bgt.n	8003fde <__swbuf_r+0x42>
 8003fd4:	4621      	mov	r1, r4
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	f000 f922 	bl	8004220 <_fflush_r>
 8003fdc:	bb30      	cbnz	r0, 800402c <__swbuf_r+0x90>
 8003fde:	68a3      	ldr	r3, [r4, #8]
 8003fe0:	3001      	adds	r0, #1
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	60a3      	str	r3, [r4, #8]
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	1c5a      	adds	r2, r3, #1
 8003fea:	6022      	str	r2, [r4, #0]
 8003fec:	701e      	strb	r6, [r3, #0]
 8003fee:	6963      	ldr	r3, [r4, #20]
 8003ff0:	4283      	cmp	r3, r0
 8003ff2:	d004      	beq.n	8003ffe <__swbuf_r+0x62>
 8003ff4:	89a3      	ldrh	r3, [r4, #12]
 8003ff6:	07db      	lsls	r3, r3, #31
 8003ff8:	d506      	bpl.n	8004008 <__swbuf_r+0x6c>
 8003ffa:	2e0a      	cmp	r6, #10
 8003ffc:	d104      	bne.n	8004008 <__swbuf_r+0x6c>
 8003ffe:	4621      	mov	r1, r4
 8004000:	4628      	mov	r0, r5
 8004002:	f000 f90d 	bl	8004220 <_fflush_r>
 8004006:	b988      	cbnz	r0, 800402c <__swbuf_r+0x90>
 8004008:	4638      	mov	r0, r7
 800400a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800400c:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <__swbuf_r+0x9c>)
 800400e:	429c      	cmp	r4, r3
 8004010:	d101      	bne.n	8004016 <__swbuf_r+0x7a>
 8004012:	68ac      	ldr	r4, [r5, #8]
 8004014:	e7cf      	b.n	8003fb6 <__swbuf_r+0x1a>
 8004016:	4b09      	ldr	r3, [pc, #36]	; (800403c <__swbuf_r+0xa0>)
 8004018:	429c      	cmp	r4, r3
 800401a:	bf08      	it	eq
 800401c:	68ec      	ldreq	r4, [r5, #12]
 800401e:	e7ca      	b.n	8003fb6 <__swbuf_r+0x1a>
 8004020:	4621      	mov	r1, r4
 8004022:	4628      	mov	r0, r5
 8004024:	f000 f80c 	bl	8004040 <__swsetup_r>
 8004028:	2800      	cmp	r0, #0
 800402a:	d0cb      	beq.n	8003fc4 <__swbuf_r+0x28>
 800402c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004030:	e7ea      	b.n	8004008 <__swbuf_r+0x6c>
 8004032:	bf00      	nop
 8004034:	080051c4 	.word	0x080051c4
 8004038:	080051e4 	.word	0x080051e4
 800403c:	080051a4 	.word	0x080051a4

08004040 <__swsetup_r>:
 8004040:	4b32      	ldr	r3, [pc, #200]	; (800410c <__swsetup_r+0xcc>)
 8004042:	b570      	push	{r4, r5, r6, lr}
 8004044:	681d      	ldr	r5, [r3, #0]
 8004046:	4606      	mov	r6, r0
 8004048:	460c      	mov	r4, r1
 800404a:	b125      	cbz	r5, 8004056 <__swsetup_r+0x16>
 800404c:	69ab      	ldr	r3, [r5, #24]
 800404e:	b913      	cbnz	r3, 8004056 <__swsetup_r+0x16>
 8004050:	4628      	mov	r0, r5
 8004052:	f000 f979 	bl	8004348 <__sinit>
 8004056:	4b2e      	ldr	r3, [pc, #184]	; (8004110 <__swsetup_r+0xd0>)
 8004058:	429c      	cmp	r4, r3
 800405a:	d10f      	bne.n	800407c <__swsetup_r+0x3c>
 800405c:	686c      	ldr	r4, [r5, #4]
 800405e:	89a3      	ldrh	r3, [r4, #12]
 8004060:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004064:	0719      	lsls	r1, r3, #28
 8004066:	d42c      	bmi.n	80040c2 <__swsetup_r+0x82>
 8004068:	06dd      	lsls	r5, r3, #27
 800406a:	d411      	bmi.n	8004090 <__swsetup_r+0x50>
 800406c:	2309      	movs	r3, #9
 800406e:	6033      	str	r3, [r6, #0]
 8004070:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004078:	81a3      	strh	r3, [r4, #12]
 800407a:	e03e      	b.n	80040fa <__swsetup_r+0xba>
 800407c:	4b25      	ldr	r3, [pc, #148]	; (8004114 <__swsetup_r+0xd4>)
 800407e:	429c      	cmp	r4, r3
 8004080:	d101      	bne.n	8004086 <__swsetup_r+0x46>
 8004082:	68ac      	ldr	r4, [r5, #8]
 8004084:	e7eb      	b.n	800405e <__swsetup_r+0x1e>
 8004086:	4b24      	ldr	r3, [pc, #144]	; (8004118 <__swsetup_r+0xd8>)
 8004088:	429c      	cmp	r4, r3
 800408a:	bf08      	it	eq
 800408c:	68ec      	ldreq	r4, [r5, #12]
 800408e:	e7e6      	b.n	800405e <__swsetup_r+0x1e>
 8004090:	0758      	lsls	r0, r3, #29
 8004092:	d512      	bpl.n	80040ba <__swsetup_r+0x7a>
 8004094:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004096:	b141      	cbz	r1, 80040aa <__swsetup_r+0x6a>
 8004098:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800409c:	4299      	cmp	r1, r3
 800409e:	d002      	beq.n	80040a6 <__swsetup_r+0x66>
 80040a0:	4630      	mov	r0, r6
 80040a2:	f000 fa57 	bl	8004554 <_free_r>
 80040a6:	2300      	movs	r3, #0
 80040a8:	6363      	str	r3, [r4, #52]	; 0x34
 80040aa:	89a3      	ldrh	r3, [r4, #12]
 80040ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80040b0:	81a3      	strh	r3, [r4, #12]
 80040b2:	2300      	movs	r3, #0
 80040b4:	6063      	str	r3, [r4, #4]
 80040b6:	6923      	ldr	r3, [r4, #16]
 80040b8:	6023      	str	r3, [r4, #0]
 80040ba:	89a3      	ldrh	r3, [r4, #12]
 80040bc:	f043 0308 	orr.w	r3, r3, #8
 80040c0:	81a3      	strh	r3, [r4, #12]
 80040c2:	6923      	ldr	r3, [r4, #16]
 80040c4:	b94b      	cbnz	r3, 80040da <__swsetup_r+0x9a>
 80040c6:	89a3      	ldrh	r3, [r4, #12]
 80040c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80040cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040d0:	d003      	beq.n	80040da <__swsetup_r+0x9a>
 80040d2:	4621      	mov	r1, r4
 80040d4:	4630      	mov	r0, r6
 80040d6:	f000 f9fd 	bl	80044d4 <__smakebuf_r>
 80040da:	89a0      	ldrh	r0, [r4, #12]
 80040dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040e0:	f010 0301 	ands.w	r3, r0, #1
 80040e4:	d00a      	beq.n	80040fc <__swsetup_r+0xbc>
 80040e6:	2300      	movs	r3, #0
 80040e8:	60a3      	str	r3, [r4, #8]
 80040ea:	6963      	ldr	r3, [r4, #20]
 80040ec:	425b      	negs	r3, r3
 80040ee:	61a3      	str	r3, [r4, #24]
 80040f0:	6923      	ldr	r3, [r4, #16]
 80040f2:	b943      	cbnz	r3, 8004106 <__swsetup_r+0xc6>
 80040f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80040f8:	d1ba      	bne.n	8004070 <__swsetup_r+0x30>
 80040fa:	bd70      	pop	{r4, r5, r6, pc}
 80040fc:	0781      	lsls	r1, r0, #30
 80040fe:	bf58      	it	pl
 8004100:	6963      	ldrpl	r3, [r4, #20]
 8004102:	60a3      	str	r3, [r4, #8]
 8004104:	e7f4      	b.n	80040f0 <__swsetup_r+0xb0>
 8004106:	2000      	movs	r0, #0
 8004108:	e7f7      	b.n	80040fa <__swsetup_r+0xba>
 800410a:	bf00      	nop
 800410c:	2000000c 	.word	0x2000000c
 8004110:	080051c4 	.word	0x080051c4
 8004114:	080051e4 	.word	0x080051e4
 8004118:	080051a4 	.word	0x080051a4

0800411c <__sflush_r>:
 800411c:	898a      	ldrh	r2, [r1, #12]
 800411e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004120:	4605      	mov	r5, r0
 8004122:	0710      	lsls	r0, r2, #28
 8004124:	460c      	mov	r4, r1
 8004126:	d457      	bmi.n	80041d8 <__sflush_r+0xbc>
 8004128:	684b      	ldr	r3, [r1, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	dc04      	bgt.n	8004138 <__sflush_r+0x1c>
 800412e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004130:	2b00      	cmp	r3, #0
 8004132:	dc01      	bgt.n	8004138 <__sflush_r+0x1c>
 8004134:	2000      	movs	r0, #0
 8004136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004138:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800413a:	2e00      	cmp	r6, #0
 800413c:	d0fa      	beq.n	8004134 <__sflush_r+0x18>
 800413e:	2300      	movs	r3, #0
 8004140:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004144:	682f      	ldr	r7, [r5, #0]
 8004146:	602b      	str	r3, [r5, #0]
 8004148:	d032      	beq.n	80041b0 <__sflush_r+0x94>
 800414a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800414c:	89a3      	ldrh	r3, [r4, #12]
 800414e:	075a      	lsls	r2, r3, #29
 8004150:	d505      	bpl.n	800415e <__sflush_r+0x42>
 8004152:	6863      	ldr	r3, [r4, #4]
 8004154:	1ac0      	subs	r0, r0, r3
 8004156:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004158:	b10b      	cbz	r3, 800415e <__sflush_r+0x42>
 800415a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800415c:	1ac0      	subs	r0, r0, r3
 800415e:	2300      	movs	r3, #0
 8004160:	4602      	mov	r2, r0
 8004162:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004164:	4628      	mov	r0, r5
 8004166:	6a21      	ldr	r1, [r4, #32]
 8004168:	47b0      	blx	r6
 800416a:	1c43      	adds	r3, r0, #1
 800416c:	89a3      	ldrh	r3, [r4, #12]
 800416e:	d106      	bne.n	800417e <__sflush_r+0x62>
 8004170:	6829      	ldr	r1, [r5, #0]
 8004172:	291d      	cmp	r1, #29
 8004174:	d82c      	bhi.n	80041d0 <__sflush_r+0xb4>
 8004176:	4a29      	ldr	r2, [pc, #164]	; (800421c <__sflush_r+0x100>)
 8004178:	40ca      	lsrs	r2, r1
 800417a:	07d6      	lsls	r6, r2, #31
 800417c:	d528      	bpl.n	80041d0 <__sflush_r+0xb4>
 800417e:	2200      	movs	r2, #0
 8004180:	6062      	str	r2, [r4, #4]
 8004182:	6922      	ldr	r2, [r4, #16]
 8004184:	04d9      	lsls	r1, r3, #19
 8004186:	6022      	str	r2, [r4, #0]
 8004188:	d504      	bpl.n	8004194 <__sflush_r+0x78>
 800418a:	1c42      	adds	r2, r0, #1
 800418c:	d101      	bne.n	8004192 <__sflush_r+0x76>
 800418e:	682b      	ldr	r3, [r5, #0]
 8004190:	b903      	cbnz	r3, 8004194 <__sflush_r+0x78>
 8004192:	6560      	str	r0, [r4, #84]	; 0x54
 8004194:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004196:	602f      	str	r7, [r5, #0]
 8004198:	2900      	cmp	r1, #0
 800419a:	d0cb      	beq.n	8004134 <__sflush_r+0x18>
 800419c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041a0:	4299      	cmp	r1, r3
 80041a2:	d002      	beq.n	80041aa <__sflush_r+0x8e>
 80041a4:	4628      	mov	r0, r5
 80041a6:	f000 f9d5 	bl	8004554 <_free_r>
 80041aa:	2000      	movs	r0, #0
 80041ac:	6360      	str	r0, [r4, #52]	; 0x34
 80041ae:	e7c2      	b.n	8004136 <__sflush_r+0x1a>
 80041b0:	6a21      	ldr	r1, [r4, #32]
 80041b2:	2301      	movs	r3, #1
 80041b4:	4628      	mov	r0, r5
 80041b6:	47b0      	blx	r6
 80041b8:	1c41      	adds	r1, r0, #1
 80041ba:	d1c7      	bne.n	800414c <__sflush_r+0x30>
 80041bc:	682b      	ldr	r3, [r5, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0c4      	beq.n	800414c <__sflush_r+0x30>
 80041c2:	2b1d      	cmp	r3, #29
 80041c4:	d001      	beq.n	80041ca <__sflush_r+0xae>
 80041c6:	2b16      	cmp	r3, #22
 80041c8:	d101      	bne.n	80041ce <__sflush_r+0xb2>
 80041ca:	602f      	str	r7, [r5, #0]
 80041cc:	e7b2      	b.n	8004134 <__sflush_r+0x18>
 80041ce:	89a3      	ldrh	r3, [r4, #12]
 80041d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041d4:	81a3      	strh	r3, [r4, #12]
 80041d6:	e7ae      	b.n	8004136 <__sflush_r+0x1a>
 80041d8:	690f      	ldr	r7, [r1, #16]
 80041da:	2f00      	cmp	r7, #0
 80041dc:	d0aa      	beq.n	8004134 <__sflush_r+0x18>
 80041de:	0793      	lsls	r3, r2, #30
 80041e0:	bf18      	it	ne
 80041e2:	2300      	movne	r3, #0
 80041e4:	680e      	ldr	r6, [r1, #0]
 80041e6:	bf08      	it	eq
 80041e8:	694b      	ldreq	r3, [r1, #20]
 80041ea:	1bf6      	subs	r6, r6, r7
 80041ec:	600f      	str	r7, [r1, #0]
 80041ee:	608b      	str	r3, [r1, #8]
 80041f0:	2e00      	cmp	r6, #0
 80041f2:	dd9f      	ble.n	8004134 <__sflush_r+0x18>
 80041f4:	4633      	mov	r3, r6
 80041f6:	463a      	mov	r2, r7
 80041f8:	4628      	mov	r0, r5
 80041fa:	6a21      	ldr	r1, [r4, #32]
 80041fc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004200:	47e0      	blx	ip
 8004202:	2800      	cmp	r0, #0
 8004204:	dc06      	bgt.n	8004214 <__sflush_r+0xf8>
 8004206:	89a3      	ldrh	r3, [r4, #12]
 8004208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800420c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004210:	81a3      	strh	r3, [r4, #12]
 8004212:	e790      	b.n	8004136 <__sflush_r+0x1a>
 8004214:	4407      	add	r7, r0
 8004216:	1a36      	subs	r6, r6, r0
 8004218:	e7ea      	b.n	80041f0 <__sflush_r+0xd4>
 800421a:	bf00      	nop
 800421c:	20400001 	.word	0x20400001

08004220 <_fflush_r>:
 8004220:	b538      	push	{r3, r4, r5, lr}
 8004222:	690b      	ldr	r3, [r1, #16]
 8004224:	4605      	mov	r5, r0
 8004226:	460c      	mov	r4, r1
 8004228:	b913      	cbnz	r3, 8004230 <_fflush_r+0x10>
 800422a:	2500      	movs	r5, #0
 800422c:	4628      	mov	r0, r5
 800422e:	bd38      	pop	{r3, r4, r5, pc}
 8004230:	b118      	cbz	r0, 800423a <_fflush_r+0x1a>
 8004232:	6983      	ldr	r3, [r0, #24]
 8004234:	b90b      	cbnz	r3, 800423a <_fflush_r+0x1a>
 8004236:	f000 f887 	bl	8004348 <__sinit>
 800423a:	4b14      	ldr	r3, [pc, #80]	; (800428c <_fflush_r+0x6c>)
 800423c:	429c      	cmp	r4, r3
 800423e:	d11b      	bne.n	8004278 <_fflush_r+0x58>
 8004240:	686c      	ldr	r4, [r5, #4]
 8004242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0ef      	beq.n	800422a <_fflush_r+0xa>
 800424a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800424c:	07d0      	lsls	r0, r2, #31
 800424e:	d404      	bmi.n	800425a <_fflush_r+0x3a>
 8004250:	0599      	lsls	r1, r3, #22
 8004252:	d402      	bmi.n	800425a <_fflush_r+0x3a>
 8004254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004256:	f000 f915 	bl	8004484 <__retarget_lock_acquire_recursive>
 800425a:	4628      	mov	r0, r5
 800425c:	4621      	mov	r1, r4
 800425e:	f7ff ff5d 	bl	800411c <__sflush_r>
 8004262:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004264:	4605      	mov	r5, r0
 8004266:	07da      	lsls	r2, r3, #31
 8004268:	d4e0      	bmi.n	800422c <_fflush_r+0xc>
 800426a:	89a3      	ldrh	r3, [r4, #12]
 800426c:	059b      	lsls	r3, r3, #22
 800426e:	d4dd      	bmi.n	800422c <_fflush_r+0xc>
 8004270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004272:	f000 f908 	bl	8004486 <__retarget_lock_release_recursive>
 8004276:	e7d9      	b.n	800422c <_fflush_r+0xc>
 8004278:	4b05      	ldr	r3, [pc, #20]	; (8004290 <_fflush_r+0x70>)
 800427a:	429c      	cmp	r4, r3
 800427c:	d101      	bne.n	8004282 <_fflush_r+0x62>
 800427e:	68ac      	ldr	r4, [r5, #8]
 8004280:	e7df      	b.n	8004242 <_fflush_r+0x22>
 8004282:	4b04      	ldr	r3, [pc, #16]	; (8004294 <_fflush_r+0x74>)
 8004284:	429c      	cmp	r4, r3
 8004286:	bf08      	it	eq
 8004288:	68ec      	ldreq	r4, [r5, #12]
 800428a:	e7da      	b.n	8004242 <_fflush_r+0x22>
 800428c:	080051c4 	.word	0x080051c4
 8004290:	080051e4 	.word	0x080051e4
 8004294:	080051a4 	.word	0x080051a4

08004298 <std>:
 8004298:	2300      	movs	r3, #0
 800429a:	b510      	push	{r4, lr}
 800429c:	4604      	mov	r4, r0
 800429e:	e9c0 3300 	strd	r3, r3, [r0]
 80042a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042a6:	6083      	str	r3, [r0, #8]
 80042a8:	8181      	strh	r1, [r0, #12]
 80042aa:	6643      	str	r3, [r0, #100]	; 0x64
 80042ac:	81c2      	strh	r2, [r0, #14]
 80042ae:	6183      	str	r3, [r0, #24]
 80042b0:	4619      	mov	r1, r3
 80042b2:	2208      	movs	r2, #8
 80042b4:	305c      	adds	r0, #92	; 0x5c
 80042b6:	f7ff fdc7 	bl	8003e48 <memset>
 80042ba:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <std+0x38>)
 80042bc:	6224      	str	r4, [r4, #32]
 80042be:	6263      	str	r3, [r4, #36]	; 0x24
 80042c0:	4b04      	ldr	r3, [pc, #16]	; (80042d4 <std+0x3c>)
 80042c2:	62a3      	str	r3, [r4, #40]	; 0x28
 80042c4:	4b04      	ldr	r3, [pc, #16]	; (80042d8 <std+0x40>)
 80042c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042c8:	4b04      	ldr	r3, [pc, #16]	; (80042dc <std+0x44>)
 80042ca:	6323      	str	r3, [r4, #48]	; 0x30
 80042cc:	bd10      	pop	{r4, pc}
 80042ce:	bf00      	nop
 80042d0:	08004d99 	.word	0x08004d99
 80042d4:	08004dbb 	.word	0x08004dbb
 80042d8:	08004df3 	.word	0x08004df3
 80042dc:	08004e17 	.word	0x08004e17

080042e0 <_cleanup_r>:
 80042e0:	4901      	ldr	r1, [pc, #4]	; (80042e8 <_cleanup_r+0x8>)
 80042e2:	f000 b8af 	b.w	8004444 <_fwalk_reent>
 80042e6:	bf00      	nop
 80042e8:	08004221 	.word	0x08004221

080042ec <__sfmoreglue>:
 80042ec:	2268      	movs	r2, #104	; 0x68
 80042ee:	b570      	push	{r4, r5, r6, lr}
 80042f0:	1e4d      	subs	r5, r1, #1
 80042f2:	4355      	muls	r5, r2
 80042f4:	460e      	mov	r6, r1
 80042f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80042fa:	f000 f993 	bl	8004624 <_malloc_r>
 80042fe:	4604      	mov	r4, r0
 8004300:	b140      	cbz	r0, 8004314 <__sfmoreglue+0x28>
 8004302:	2100      	movs	r1, #0
 8004304:	e9c0 1600 	strd	r1, r6, [r0]
 8004308:	300c      	adds	r0, #12
 800430a:	60a0      	str	r0, [r4, #8]
 800430c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004310:	f7ff fd9a 	bl	8003e48 <memset>
 8004314:	4620      	mov	r0, r4
 8004316:	bd70      	pop	{r4, r5, r6, pc}

08004318 <__sfp_lock_acquire>:
 8004318:	4801      	ldr	r0, [pc, #4]	; (8004320 <__sfp_lock_acquire+0x8>)
 800431a:	f000 b8b3 	b.w	8004484 <__retarget_lock_acquire_recursive>
 800431e:	bf00      	nop
 8004320:	20000301 	.word	0x20000301

08004324 <__sfp_lock_release>:
 8004324:	4801      	ldr	r0, [pc, #4]	; (800432c <__sfp_lock_release+0x8>)
 8004326:	f000 b8ae 	b.w	8004486 <__retarget_lock_release_recursive>
 800432a:	bf00      	nop
 800432c:	20000301 	.word	0x20000301

08004330 <__sinit_lock_acquire>:
 8004330:	4801      	ldr	r0, [pc, #4]	; (8004338 <__sinit_lock_acquire+0x8>)
 8004332:	f000 b8a7 	b.w	8004484 <__retarget_lock_acquire_recursive>
 8004336:	bf00      	nop
 8004338:	20000302 	.word	0x20000302

0800433c <__sinit_lock_release>:
 800433c:	4801      	ldr	r0, [pc, #4]	; (8004344 <__sinit_lock_release+0x8>)
 800433e:	f000 b8a2 	b.w	8004486 <__retarget_lock_release_recursive>
 8004342:	bf00      	nop
 8004344:	20000302 	.word	0x20000302

08004348 <__sinit>:
 8004348:	b510      	push	{r4, lr}
 800434a:	4604      	mov	r4, r0
 800434c:	f7ff fff0 	bl	8004330 <__sinit_lock_acquire>
 8004350:	69a3      	ldr	r3, [r4, #24]
 8004352:	b11b      	cbz	r3, 800435c <__sinit+0x14>
 8004354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004358:	f7ff bff0 	b.w	800433c <__sinit_lock_release>
 800435c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004360:	6523      	str	r3, [r4, #80]	; 0x50
 8004362:	4b13      	ldr	r3, [pc, #76]	; (80043b0 <__sinit+0x68>)
 8004364:	4a13      	ldr	r2, [pc, #76]	; (80043b4 <__sinit+0x6c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	62a2      	str	r2, [r4, #40]	; 0x28
 800436a:	42a3      	cmp	r3, r4
 800436c:	bf08      	it	eq
 800436e:	2301      	moveq	r3, #1
 8004370:	4620      	mov	r0, r4
 8004372:	bf08      	it	eq
 8004374:	61a3      	streq	r3, [r4, #24]
 8004376:	f000 f81f 	bl	80043b8 <__sfp>
 800437a:	6060      	str	r0, [r4, #4]
 800437c:	4620      	mov	r0, r4
 800437e:	f000 f81b 	bl	80043b8 <__sfp>
 8004382:	60a0      	str	r0, [r4, #8]
 8004384:	4620      	mov	r0, r4
 8004386:	f000 f817 	bl	80043b8 <__sfp>
 800438a:	2200      	movs	r2, #0
 800438c:	2104      	movs	r1, #4
 800438e:	60e0      	str	r0, [r4, #12]
 8004390:	6860      	ldr	r0, [r4, #4]
 8004392:	f7ff ff81 	bl	8004298 <std>
 8004396:	2201      	movs	r2, #1
 8004398:	2109      	movs	r1, #9
 800439a:	68a0      	ldr	r0, [r4, #8]
 800439c:	f7ff ff7c 	bl	8004298 <std>
 80043a0:	2202      	movs	r2, #2
 80043a2:	2112      	movs	r1, #18
 80043a4:	68e0      	ldr	r0, [r4, #12]
 80043a6:	f7ff ff77 	bl	8004298 <std>
 80043aa:	2301      	movs	r3, #1
 80043ac:	61a3      	str	r3, [r4, #24]
 80043ae:	e7d1      	b.n	8004354 <__sinit+0xc>
 80043b0:	080051a0 	.word	0x080051a0
 80043b4:	080042e1 	.word	0x080042e1

080043b8 <__sfp>:
 80043b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ba:	4607      	mov	r7, r0
 80043bc:	f7ff ffac 	bl	8004318 <__sfp_lock_acquire>
 80043c0:	4b1e      	ldr	r3, [pc, #120]	; (800443c <__sfp+0x84>)
 80043c2:	681e      	ldr	r6, [r3, #0]
 80043c4:	69b3      	ldr	r3, [r6, #24]
 80043c6:	b913      	cbnz	r3, 80043ce <__sfp+0x16>
 80043c8:	4630      	mov	r0, r6
 80043ca:	f7ff ffbd 	bl	8004348 <__sinit>
 80043ce:	3648      	adds	r6, #72	; 0x48
 80043d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80043d4:	3b01      	subs	r3, #1
 80043d6:	d503      	bpl.n	80043e0 <__sfp+0x28>
 80043d8:	6833      	ldr	r3, [r6, #0]
 80043da:	b30b      	cbz	r3, 8004420 <__sfp+0x68>
 80043dc:	6836      	ldr	r6, [r6, #0]
 80043de:	e7f7      	b.n	80043d0 <__sfp+0x18>
 80043e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80043e4:	b9d5      	cbnz	r5, 800441c <__sfp+0x64>
 80043e6:	4b16      	ldr	r3, [pc, #88]	; (8004440 <__sfp+0x88>)
 80043e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80043ec:	60e3      	str	r3, [r4, #12]
 80043ee:	6665      	str	r5, [r4, #100]	; 0x64
 80043f0:	f000 f847 	bl	8004482 <__retarget_lock_init_recursive>
 80043f4:	f7ff ff96 	bl	8004324 <__sfp_lock_release>
 80043f8:	2208      	movs	r2, #8
 80043fa:	4629      	mov	r1, r5
 80043fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004400:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004404:	6025      	str	r5, [r4, #0]
 8004406:	61a5      	str	r5, [r4, #24]
 8004408:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800440c:	f7ff fd1c 	bl	8003e48 <memset>
 8004410:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004414:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004418:	4620      	mov	r0, r4
 800441a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800441c:	3468      	adds	r4, #104	; 0x68
 800441e:	e7d9      	b.n	80043d4 <__sfp+0x1c>
 8004420:	2104      	movs	r1, #4
 8004422:	4638      	mov	r0, r7
 8004424:	f7ff ff62 	bl	80042ec <__sfmoreglue>
 8004428:	4604      	mov	r4, r0
 800442a:	6030      	str	r0, [r6, #0]
 800442c:	2800      	cmp	r0, #0
 800442e:	d1d5      	bne.n	80043dc <__sfp+0x24>
 8004430:	f7ff ff78 	bl	8004324 <__sfp_lock_release>
 8004434:	230c      	movs	r3, #12
 8004436:	603b      	str	r3, [r7, #0]
 8004438:	e7ee      	b.n	8004418 <__sfp+0x60>
 800443a:	bf00      	nop
 800443c:	080051a0 	.word	0x080051a0
 8004440:	ffff0001 	.word	0xffff0001

08004444 <_fwalk_reent>:
 8004444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004448:	4606      	mov	r6, r0
 800444a:	4688      	mov	r8, r1
 800444c:	2700      	movs	r7, #0
 800444e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004452:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004456:	f1b9 0901 	subs.w	r9, r9, #1
 800445a:	d505      	bpl.n	8004468 <_fwalk_reent+0x24>
 800445c:	6824      	ldr	r4, [r4, #0]
 800445e:	2c00      	cmp	r4, #0
 8004460:	d1f7      	bne.n	8004452 <_fwalk_reent+0xe>
 8004462:	4638      	mov	r0, r7
 8004464:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004468:	89ab      	ldrh	r3, [r5, #12]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d907      	bls.n	800447e <_fwalk_reent+0x3a>
 800446e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004472:	3301      	adds	r3, #1
 8004474:	d003      	beq.n	800447e <_fwalk_reent+0x3a>
 8004476:	4629      	mov	r1, r5
 8004478:	4630      	mov	r0, r6
 800447a:	47c0      	blx	r8
 800447c:	4307      	orrs	r7, r0
 800447e:	3568      	adds	r5, #104	; 0x68
 8004480:	e7e9      	b.n	8004456 <_fwalk_reent+0x12>

08004482 <__retarget_lock_init_recursive>:
 8004482:	4770      	bx	lr

08004484 <__retarget_lock_acquire_recursive>:
 8004484:	4770      	bx	lr

08004486 <__retarget_lock_release_recursive>:
 8004486:	4770      	bx	lr

08004488 <__swhatbuf_r>:
 8004488:	b570      	push	{r4, r5, r6, lr}
 800448a:	460e      	mov	r6, r1
 800448c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004490:	4614      	mov	r4, r2
 8004492:	2900      	cmp	r1, #0
 8004494:	461d      	mov	r5, r3
 8004496:	b096      	sub	sp, #88	; 0x58
 8004498:	da08      	bge.n	80044ac <__swhatbuf_r+0x24>
 800449a:	2200      	movs	r2, #0
 800449c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80044a0:	602a      	str	r2, [r5, #0]
 80044a2:	061a      	lsls	r2, r3, #24
 80044a4:	d410      	bmi.n	80044c8 <__swhatbuf_r+0x40>
 80044a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044aa:	e00e      	b.n	80044ca <__swhatbuf_r+0x42>
 80044ac:	466a      	mov	r2, sp
 80044ae:	f000 fcd9 	bl	8004e64 <_fstat_r>
 80044b2:	2800      	cmp	r0, #0
 80044b4:	dbf1      	blt.n	800449a <__swhatbuf_r+0x12>
 80044b6:	9a01      	ldr	r2, [sp, #4]
 80044b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80044bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80044c0:	425a      	negs	r2, r3
 80044c2:	415a      	adcs	r2, r3
 80044c4:	602a      	str	r2, [r5, #0]
 80044c6:	e7ee      	b.n	80044a6 <__swhatbuf_r+0x1e>
 80044c8:	2340      	movs	r3, #64	; 0x40
 80044ca:	2000      	movs	r0, #0
 80044cc:	6023      	str	r3, [r4, #0]
 80044ce:	b016      	add	sp, #88	; 0x58
 80044d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080044d4 <__smakebuf_r>:
 80044d4:	898b      	ldrh	r3, [r1, #12]
 80044d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80044d8:	079d      	lsls	r5, r3, #30
 80044da:	4606      	mov	r6, r0
 80044dc:	460c      	mov	r4, r1
 80044de:	d507      	bpl.n	80044f0 <__smakebuf_r+0x1c>
 80044e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80044e4:	6023      	str	r3, [r4, #0]
 80044e6:	6123      	str	r3, [r4, #16]
 80044e8:	2301      	movs	r3, #1
 80044ea:	6163      	str	r3, [r4, #20]
 80044ec:	b002      	add	sp, #8
 80044ee:	bd70      	pop	{r4, r5, r6, pc}
 80044f0:	466a      	mov	r2, sp
 80044f2:	ab01      	add	r3, sp, #4
 80044f4:	f7ff ffc8 	bl	8004488 <__swhatbuf_r>
 80044f8:	9900      	ldr	r1, [sp, #0]
 80044fa:	4605      	mov	r5, r0
 80044fc:	4630      	mov	r0, r6
 80044fe:	f000 f891 	bl	8004624 <_malloc_r>
 8004502:	b948      	cbnz	r0, 8004518 <__smakebuf_r+0x44>
 8004504:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004508:	059a      	lsls	r2, r3, #22
 800450a:	d4ef      	bmi.n	80044ec <__smakebuf_r+0x18>
 800450c:	f023 0303 	bic.w	r3, r3, #3
 8004510:	f043 0302 	orr.w	r3, r3, #2
 8004514:	81a3      	strh	r3, [r4, #12]
 8004516:	e7e3      	b.n	80044e0 <__smakebuf_r+0xc>
 8004518:	4b0d      	ldr	r3, [pc, #52]	; (8004550 <__smakebuf_r+0x7c>)
 800451a:	62b3      	str	r3, [r6, #40]	; 0x28
 800451c:	89a3      	ldrh	r3, [r4, #12]
 800451e:	6020      	str	r0, [r4, #0]
 8004520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004524:	81a3      	strh	r3, [r4, #12]
 8004526:	9b00      	ldr	r3, [sp, #0]
 8004528:	6120      	str	r0, [r4, #16]
 800452a:	6163      	str	r3, [r4, #20]
 800452c:	9b01      	ldr	r3, [sp, #4]
 800452e:	b15b      	cbz	r3, 8004548 <__smakebuf_r+0x74>
 8004530:	4630      	mov	r0, r6
 8004532:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004536:	f000 fca7 	bl	8004e88 <_isatty_r>
 800453a:	b128      	cbz	r0, 8004548 <__smakebuf_r+0x74>
 800453c:	89a3      	ldrh	r3, [r4, #12]
 800453e:	f023 0303 	bic.w	r3, r3, #3
 8004542:	f043 0301 	orr.w	r3, r3, #1
 8004546:	81a3      	strh	r3, [r4, #12]
 8004548:	89a0      	ldrh	r0, [r4, #12]
 800454a:	4305      	orrs	r5, r0
 800454c:	81a5      	strh	r5, [r4, #12]
 800454e:	e7cd      	b.n	80044ec <__smakebuf_r+0x18>
 8004550:	080042e1 	.word	0x080042e1

08004554 <_free_r>:
 8004554:	b538      	push	{r3, r4, r5, lr}
 8004556:	4605      	mov	r5, r0
 8004558:	2900      	cmp	r1, #0
 800455a:	d040      	beq.n	80045de <_free_r+0x8a>
 800455c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004560:	1f0c      	subs	r4, r1, #4
 8004562:	2b00      	cmp	r3, #0
 8004564:	bfb8      	it	lt
 8004566:	18e4      	addlt	r4, r4, r3
 8004568:	f000 fcbe 	bl	8004ee8 <__malloc_lock>
 800456c:	4a1c      	ldr	r2, [pc, #112]	; (80045e0 <_free_r+0x8c>)
 800456e:	6813      	ldr	r3, [r2, #0]
 8004570:	b933      	cbnz	r3, 8004580 <_free_r+0x2c>
 8004572:	6063      	str	r3, [r4, #4]
 8004574:	6014      	str	r4, [r2, #0]
 8004576:	4628      	mov	r0, r5
 8004578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800457c:	f000 bcba 	b.w	8004ef4 <__malloc_unlock>
 8004580:	42a3      	cmp	r3, r4
 8004582:	d908      	bls.n	8004596 <_free_r+0x42>
 8004584:	6820      	ldr	r0, [r4, #0]
 8004586:	1821      	adds	r1, r4, r0
 8004588:	428b      	cmp	r3, r1
 800458a:	bf01      	itttt	eq
 800458c:	6819      	ldreq	r1, [r3, #0]
 800458e:	685b      	ldreq	r3, [r3, #4]
 8004590:	1809      	addeq	r1, r1, r0
 8004592:	6021      	streq	r1, [r4, #0]
 8004594:	e7ed      	b.n	8004572 <_free_r+0x1e>
 8004596:	461a      	mov	r2, r3
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	b10b      	cbz	r3, 80045a0 <_free_r+0x4c>
 800459c:	42a3      	cmp	r3, r4
 800459e:	d9fa      	bls.n	8004596 <_free_r+0x42>
 80045a0:	6811      	ldr	r1, [r2, #0]
 80045a2:	1850      	adds	r0, r2, r1
 80045a4:	42a0      	cmp	r0, r4
 80045a6:	d10b      	bne.n	80045c0 <_free_r+0x6c>
 80045a8:	6820      	ldr	r0, [r4, #0]
 80045aa:	4401      	add	r1, r0
 80045ac:	1850      	adds	r0, r2, r1
 80045ae:	4283      	cmp	r3, r0
 80045b0:	6011      	str	r1, [r2, #0]
 80045b2:	d1e0      	bne.n	8004576 <_free_r+0x22>
 80045b4:	6818      	ldr	r0, [r3, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	4401      	add	r1, r0
 80045ba:	6011      	str	r1, [r2, #0]
 80045bc:	6053      	str	r3, [r2, #4]
 80045be:	e7da      	b.n	8004576 <_free_r+0x22>
 80045c0:	d902      	bls.n	80045c8 <_free_r+0x74>
 80045c2:	230c      	movs	r3, #12
 80045c4:	602b      	str	r3, [r5, #0]
 80045c6:	e7d6      	b.n	8004576 <_free_r+0x22>
 80045c8:	6820      	ldr	r0, [r4, #0]
 80045ca:	1821      	adds	r1, r4, r0
 80045cc:	428b      	cmp	r3, r1
 80045ce:	bf01      	itttt	eq
 80045d0:	6819      	ldreq	r1, [r3, #0]
 80045d2:	685b      	ldreq	r3, [r3, #4]
 80045d4:	1809      	addeq	r1, r1, r0
 80045d6:	6021      	streq	r1, [r4, #0]
 80045d8:	6063      	str	r3, [r4, #4]
 80045da:	6054      	str	r4, [r2, #4]
 80045dc:	e7cb      	b.n	8004576 <_free_r+0x22>
 80045de:	bd38      	pop	{r3, r4, r5, pc}
 80045e0:	20000304 	.word	0x20000304

080045e4 <sbrk_aligned>:
 80045e4:	b570      	push	{r4, r5, r6, lr}
 80045e6:	4e0e      	ldr	r6, [pc, #56]	; (8004620 <sbrk_aligned+0x3c>)
 80045e8:	460c      	mov	r4, r1
 80045ea:	6831      	ldr	r1, [r6, #0]
 80045ec:	4605      	mov	r5, r0
 80045ee:	b911      	cbnz	r1, 80045f6 <sbrk_aligned+0x12>
 80045f0:	f000 fbc2 	bl	8004d78 <_sbrk_r>
 80045f4:	6030      	str	r0, [r6, #0]
 80045f6:	4621      	mov	r1, r4
 80045f8:	4628      	mov	r0, r5
 80045fa:	f000 fbbd 	bl	8004d78 <_sbrk_r>
 80045fe:	1c43      	adds	r3, r0, #1
 8004600:	d00a      	beq.n	8004618 <sbrk_aligned+0x34>
 8004602:	1cc4      	adds	r4, r0, #3
 8004604:	f024 0403 	bic.w	r4, r4, #3
 8004608:	42a0      	cmp	r0, r4
 800460a:	d007      	beq.n	800461c <sbrk_aligned+0x38>
 800460c:	1a21      	subs	r1, r4, r0
 800460e:	4628      	mov	r0, r5
 8004610:	f000 fbb2 	bl	8004d78 <_sbrk_r>
 8004614:	3001      	adds	r0, #1
 8004616:	d101      	bne.n	800461c <sbrk_aligned+0x38>
 8004618:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800461c:	4620      	mov	r0, r4
 800461e:	bd70      	pop	{r4, r5, r6, pc}
 8004620:	20000308 	.word	0x20000308

08004624 <_malloc_r>:
 8004624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004628:	1ccd      	adds	r5, r1, #3
 800462a:	f025 0503 	bic.w	r5, r5, #3
 800462e:	3508      	adds	r5, #8
 8004630:	2d0c      	cmp	r5, #12
 8004632:	bf38      	it	cc
 8004634:	250c      	movcc	r5, #12
 8004636:	2d00      	cmp	r5, #0
 8004638:	4607      	mov	r7, r0
 800463a:	db01      	blt.n	8004640 <_malloc_r+0x1c>
 800463c:	42a9      	cmp	r1, r5
 800463e:	d905      	bls.n	800464c <_malloc_r+0x28>
 8004640:	230c      	movs	r3, #12
 8004642:	2600      	movs	r6, #0
 8004644:	603b      	str	r3, [r7, #0]
 8004646:	4630      	mov	r0, r6
 8004648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800464c:	4e2e      	ldr	r6, [pc, #184]	; (8004708 <_malloc_r+0xe4>)
 800464e:	f000 fc4b 	bl	8004ee8 <__malloc_lock>
 8004652:	6833      	ldr	r3, [r6, #0]
 8004654:	461c      	mov	r4, r3
 8004656:	bb34      	cbnz	r4, 80046a6 <_malloc_r+0x82>
 8004658:	4629      	mov	r1, r5
 800465a:	4638      	mov	r0, r7
 800465c:	f7ff ffc2 	bl	80045e4 <sbrk_aligned>
 8004660:	1c43      	adds	r3, r0, #1
 8004662:	4604      	mov	r4, r0
 8004664:	d14d      	bne.n	8004702 <_malloc_r+0xde>
 8004666:	6834      	ldr	r4, [r6, #0]
 8004668:	4626      	mov	r6, r4
 800466a:	2e00      	cmp	r6, #0
 800466c:	d140      	bne.n	80046f0 <_malloc_r+0xcc>
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	4631      	mov	r1, r6
 8004672:	4638      	mov	r0, r7
 8004674:	eb04 0803 	add.w	r8, r4, r3
 8004678:	f000 fb7e 	bl	8004d78 <_sbrk_r>
 800467c:	4580      	cmp	r8, r0
 800467e:	d13a      	bne.n	80046f6 <_malloc_r+0xd2>
 8004680:	6821      	ldr	r1, [r4, #0]
 8004682:	3503      	adds	r5, #3
 8004684:	1a6d      	subs	r5, r5, r1
 8004686:	f025 0503 	bic.w	r5, r5, #3
 800468a:	3508      	adds	r5, #8
 800468c:	2d0c      	cmp	r5, #12
 800468e:	bf38      	it	cc
 8004690:	250c      	movcc	r5, #12
 8004692:	4638      	mov	r0, r7
 8004694:	4629      	mov	r1, r5
 8004696:	f7ff ffa5 	bl	80045e4 <sbrk_aligned>
 800469a:	3001      	adds	r0, #1
 800469c:	d02b      	beq.n	80046f6 <_malloc_r+0xd2>
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	442b      	add	r3, r5
 80046a2:	6023      	str	r3, [r4, #0]
 80046a4:	e00e      	b.n	80046c4 <_malloc_r+0xa0>
 80046a6:	6822      	ldr	r2, [r4, #0]
 80046a8:	1b52      	subs	r2, r2, r5
 80046aa:	d41e      	bmi.n	80046ea <_malloc_r+0xc6>
 80046ac:	2a0b      	cmp	r2, #11
 80046ae:	d916      	bls.n	80046de <_malloc_r+0xba>
 80046b0:	1961      	adds	r1, r4, r5
 80046b2:	42a3      	cmp	r3, r4
 80046b4:	6025      	str	r5, [r4, #0]
 80046b6:	bf18      	it	ne
 80046b8:	6059      	strne	r1, [r3, #4]
 80046ba:	6863      	ldr	r3, [r4, #4]
 80046bc:	bf08      	it	eq
 80046be:	6031      	streq	r1, [r6, #0]
 80046c0:	5162      	str	r2, [r4, r5]
 80046c2:	604b      	str	r3, [r1, #4]
 80046c4:	4638      	mov	r0, r7
 80046c6:	f104 060b 	add.w	r6, r4, #11
 80046ca:	f000 fc13 	bl	8004ef4 <__malloc_unlock>
 80046ce:	f026 0607 	bic.w	r6, r6, #7
 80046d2:	1d23      	adds	r3, r4, #4
 80046d4:	1af2      	subs	r2, r6, r3
 80046d6:	d0b6      	beq.n	8004646 <_malloc_r+0x22>
 80046d8:	1b9b      	subs	r3, r3, r6
 80046da:	50a3      	str	r3, [r4, r2]
 80046dc:	e7b3      	b.n	8004646 <_malloc_r+0x22>
 80046de:	6862      	ldr	r2, [r4, #4]
 80046e0:	42a3      	cmp	r3, r4
 80046e2:	bf0c      	ite	eq
 80046e4:	6032      	streq	r2, [r6, #0]
 80046e6:	605a      	strne	r2, [r3, #4]
 80046e8:	e7ec      	b.n	80046c4 <_malloc_r+0xa0>
 80046ea:	4623      	mov	r3, r4
 80046ec:	6864      	ldr	r4, [r4, #4]
 80046ee:	e7b2      	b.n	8004656 <_malloc_r+0x32>
 80046f0:	4634      	mov	r4, r6
 80046f2:	6876      	ldr	r6, [r6, #4]
 80046f4:	e7b9      	b.n	800466a <_malloc_r+0x46>
 80046f6:	230c      	movs	r3, #12
 80046f8:	4638      	mov	r0, r7
 80046fa:	603b      	str	r3, [r7, #0]
 80046fc:	f000 fbfa 	bl	8004ef4 <__malloc_unlock>
 8004700:	e7a1      	b.n	8004646 <_malloc_r+0x22>
 8004702:	6025      	str	r5, [r4, #0]
 8004704:	e7de      	b.n	80046c4 <_malloc_r+0xa0>
 8004706:	bf00      	nop
 8004708:	20000304 	.word	0x20000304

0800470c <__sfputc_r>:
 800470c:	6893      	ldr	r3, [r2, #8]
 800470e:	b410      	push	{r4}
 8004710:	3b01      	subs	r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	6093      	str	r3, [r2, #8]
 8004716:	da07      	bge.n	8004728 <__sfputc_r+0x1c>
 8004718:	6994      	ldr	r4, [r2, #24]
 800471a:	42a3      	cmp	r3, r4
 800471c:	db01      	blt.n	8004722 <__sfputc_r+0x16>
 800471e:	290a      	cmp	r1, #10
 8004720:	d102      	bne.n	8004728 <__sfputc_r+0x1c>
 8004722:	bc10      	pop	{r4}
 8004724:	f7ff bc3a 	b.w	8003f9c <__swbuf_r>
 8004728:	6813      	ldr	r3, [r2, #0]
 800472a:	1c58      	adds	r0, r3, #1
 800472c:	6010      	str	r0, [r2, #0]
 800472e:	7019      	strb	r1, [r3, #0]
 8004730:	4608      	mov	r0, r1
 8004732:	bc10      	pop	{r4}
 8004734:	4770      	bx	lr

08004736 <__sfputs_r>:
 8004736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004738:	4606      	mov	r6, r0
 800473a:	460f      	mov	r7, r1
 800473c:	4614      	mov	r4, r2
 800473e:	18d5      	adds	r5, r2, r3
 8004740:	42ac      	cmp	r4, r5
 8004742:	d101      	bne.n	8004748 <__sfputs_r+0x12>
 8004744:	2000      	movs	r0, #0
 8004746:	e007      	b.n	8004758 <__sfputs_r+0x22>
 8004748:	463a      	mov	r2, r7
 800474a:	4630      	mov	r0, r6
 800474c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004750:	f7ff ffdc 	bl	800470c <__sfputc_r>
 8004754:	1c43      	adds	r3, r0, #1
 8004756:	d1f3      	bne.n	8004740 <__sfputs_r+0xa>
 8004758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800475c <_vfiprintf_r>:
 800475c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004760:	460d      	mov	r5, r1
 8004762:	4614      	mov	r4, r2
 8004764:	4698      	mov	r8, r3
 8004766:	4606      	mov	r6, r0
 8004768:	b09d      	sub	sp, #116	; 0x74
 800476a:	b118      	cbz	r0, 8004774 <_vfiprintf_r+0x18>
 800476c:	6983      	ldr	r3, [r0, #24]
 800476e:	b90b      	cbnz	r3, 8004774 <_vfiprintf_r+0x18>
 8004770:	f7ff fdea 	bl	8004348 <__sinit>
 8004774:	4b89      	ldr	r3, [pc, #548]	; (800499c <_vfiprintf_r+0x240>)
 8004776:	429d      	cmp	r5, r3
 8004778:	d11b      	bne.n	80047b2 <_vfiprintf_r+0x56>
 800477a:	6875      	ldr	r5, [r6, #4]
 800477c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800477e:	07d9      	lsls	r1, r3, #31
 8004780:	d405      	bmi.n	800478e <_vfiprintf_r+0x32>
 8004782:	89ab      	ldrh	r3, [r5, #12]
 8004784:	059a      	lsls	r2, r3, #22
 8004786:	d402      	bmi.n	800478e <_vfiprintf_r+0x32>
 8004788:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800478a:	f7ff fe7b 	bl	8004484 <__retarget_lock_acquire_recursive>
 800478e:	89ab      	ldrh	r3, [r5, #12]
 8004790:	071b      	lsls	r3, r3, #28
 8004792:	d501      	bpl.n	8004798 <_vfiprintf_r+0x3c>
 8004794:	692b      	ldr	r3, [r5, #16]
 8004796:	b9eb      	cbnz	r3, 80047d4 <_vfiprintf_r+0x78>
 8004798:	4629      	mov	r1, r5
 800479a:	4630      	mov	r0, r6
 800479c:	f7ff fc50 	bl	8004040 <__swsetup_r>
 80047a0:	b1c0      	cbz	r0, 80047d4 <_vfiprintf_r+0x78>
 80047a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047a4:	07dc      	lsls	r4, r3, #31
 80047a6:	d50e      	bpl.n	80047c6 <_vfiprintf_r+0x6a>
 80047a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047ac:	b01d      	add	sp, #116	; 0x74
 80047ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047b2:	4b7b      	ldr	r3, [pc, #492]	; (80049a0 <_vfiprintf_r+0x244>)
 80047b4:	429d      	cmp	r5, r3
 80047b6:	d101      	bne.n	80047bc <_vfiprintf_r+0x60>
 80047b8:	68b5      	ldr	r5, [r6, #8]
 80047ba:	e7df      	b.n	800477c <_vfiprintf_r+0x20>
 80047bc:	4b79      	ldr	r3, [pc, #484]	; (80049a4 <_vfiprintf_r+0x248>)
 80047be:	429d      	cmp	r5, r3
 80047c0:	bf08      	it	eq
 80047c2:	68f5      	ldreq	r5, [r6, #12]
 80047c4:	e7da      	b.n	800477c <_vfiprintf_r+0x20>
 80047c6:	89ab      	ldrh	r3, [r5, #12]
 80047c8:	0598      	lsls	r0, r3, #22
 80047ca:	d4ed      	bmi.n	80047a8 <_vfiprintf_r+0x4c>
 80047cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047ce:	f7ff fe5a 	bl	8004486 <__retarget_lock_release_recursive>
 80047d2:	e7e9      	b.n	80047a8 <_vfiprintf_r+0x4c>
 80047d4:	2300      	movs	r3, #0
 80047d6:	9309      	str	r3, [sp, #36]	; 0x24
 80047d8:	2320      	movs	r3, #32
 80047da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047de:	2330      	movs	r3, #48	; 0x30
 80047e0:	f04f 0901 	mov.w	r9, #1
 80047e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80047e8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80049a8 <_vfiprintf_r+0x24c>
 80047ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047f0:	4623      	mov	r3, r4
 80047f2:	469a      	mov	sl, r3
 80047f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047f8:	b10a      	cbz	r2, 80047fe <_vfiprintf_r+0xa2>
 80047fa:	2a25      	cmp	r2, #37	; 0x25
 80047fc:	d1f9      	bne.n	80047f2 <_vfiprintf_r+0x96>
 80047fe:	ebba 0b04 	subs.w	fp, sl, r4
 8004802:	d00b      	beq.n	800481c <_vfiprintf_r+0xc0>
 8004804:	465b      	mov	r3, fp
 8004806:	4622      	mov	r2, r4
 8004808:	4629      	mov	r1, r5
 800480a:	4630      	mov	r0, r6
 800480c:	f7ff ff93 	bl	8004736 <__sfputs_r>
 8004810:	3001      	adds	r0, #1
 8004812:	f000 80aa 	beq.w	800496a <_vfiprintf_r+0x20e>
 8004816:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004818:	445a      	add	r2, fp
 800481a:	9209      	str	r2, [sp, #36]	; 0x24
 800481c:	f89a 3000 	ldrb.w	r3, [sl]
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 80a2 	beq.w	800496a <_vfiprintf_r+0x20e>
 8004826:	2300      	movs	r3, #0
 8004828:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800482c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004830:	f10a 0a01 	add.w	sl, sl, #1
 8004834:	9304      	str	r3, [sp, #16]
 8004836:	9307      	str	r3, [sp, #28]
 8004838:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800483c:	931a      	str	r3, [sp, #104]	; 0x68
 800483e:	4654      	mov	r4, sl
 8004840:	2205      	movs	r2, #5
 8004842:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004846:	4858      	ldr	r0, [pc, #352]	; (80049a8 <_vfiprintf_r+0x24c>)
 8004848:	f000 fb40 	bl	8004ecc <memchr>
 800484c:	9a04      	ldr	r2, [sp, #16]
 800484e:	b9d8      	cbnz	r0, 8004888 <_vfiprintf_r+0x12c>
 8004850:	06d1      	lsls	r1, r2, #27
 8004852:	bf44      	itt	mi
 8004854:	2320      	movmi	r3, #32
 8004856:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800485a:	0713      	lsls	r3, r2, #28
 800485c:	bf44      	itt	mi
 800485e:	232b      	movmi	r3, #43	; 0x2b
 8004860:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004864:	f89a 3000 	ldrb.w	r3, [sl]
 8004868:	2b2a      	cmp	r3, #42	; 0x2a
 800486a:	d015      	beq.n	8004898 <_vfiprintf_r+0x13c>
 800486c:	4654      	mov	r4, sl
 800486e:	2000      	movs	r0, #0
 8004870:	f04f 0c0a 	mov.w	ip, #10
 8004874:	9a07      	ldr	r2, [sp, #28]
 8004876:	4621      	mov	r1, r4
 8004878:	f811 3b01 	ldrb.w	r3, [r1], #1
 800487c:	3b30      	subs	r3, #48	; 0x30
 800487e:	2b09      	cmp	r3, #9
 8004880:	d94e      	bls.n	8004920 <_vfiprintf_r+0x1c4>
 8004882:	b1b0      	cbz	r0, 80048b2 <_vfiprintf_r+0x156>
 8004884:	9207      	str	r2, [sp, #28]
 8004886:	e014      	b.n	80048b2 <_vfiprintf_r+0x156>
 8004888:	eba0 0308 	sub.w	r3, r0, r8
 800488c:	fa09 f303 	lsl.w	r3, r9, r3
 8004890:	4313      	orrs	r3, r2
 8004892:	46a2      	mov	sl, r4
 8004894:	9304      	str	r3, [sp, #16]
 8004896:	e7d2      	b.n	800483e <_vfiprintf_r+0xe2>
 8004898:	9b03      	ldr	r3, [sp, #12]
 800489a:	1d19      	adds	r1, r3, #4
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	9103      	str	r1, [sp, #12]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	bfbb      	ittet	lt
 80048a4:	425b      	neglt	r3, r3
 80048a6:	f042 0202 	orrlt.w	r2, r2, #2
 80048aa:	9307      	strge	r3, [sp, #28]
 80048ac:	9307      	strlt	r3, [sp, #28]
 80048ae:	bfb8      	it	lt
 80048b0:	9204      	strlt	r2, [sp, #16]
 80048b2:	7823      	ldrb	r3, [r4, #0]
 80048b4:	2b2e      	cmp	r3, #46	; 0x2e
 80048b6:	d10c      	bne.n	80048d2 <_vfiprintf_r+0x176>
 80048b8:	7863      	ldrb	r3, [r4, #1]
 80048ba:	2b2a      	cmp	r3, #42	; 0x2a
 80048bc:	d135      	bne.n	800492a <_vfiprintf_r+0x1ce>
 80048be:	9b03      	ldr	r3, [sp, #12]
 80048c0:	3402      	adds	r4, #2
 80048c2:	1d1a      	adds	r2, r3, #4
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	9203      	str	r2, [sp, #12]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	bfb8      	it	lt
 80048cc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80048d0:	9305      	str	r3, [sp, #20]
 80048d2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80049ac <_vfiprintf_r+0x250>
 80048d6:	2203      	movs	r2, #3
 80048d8:	4650      	mov	r0, sl
 80048da:	7821      	ldrb	r1, [r4, #0]
 80048dc:	f000 faf6 	bl	8004ecc <memchr>
 80048e0:	b140      	cbz	r0, 80048f4 <_vfiprintf_r+0x198>
 80048e2:	2340      	movs	r3, #64	; 0x40
 80048e4:	eba0 000a 	sub.w	r0, r0, sl
 80048e8:	fa03 f000 	lsl.w	r0, r3, r0
 80048ec:	9b04      	ldr	r3, [sp, #16]
 80048ee:	3401      	adds	r4, #1
 80048f0:	4303      	orrs	r3, r0
 80048f2:	9304      	str	r3, [sp, #16]
 80048f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048f8:	2206      	movs	r2, #6
 80048fa:	482d      	ldr	r0, [pc, #180]	; (80049b0 <_vfiprintf_r+0x254>)
 80048fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004900:	f000 fae4 	bl	8004ecc <memchr>
 8004904:	2800      	cmp	r0, #0
 8004906:	d03f      	beq.n	8004988 <_vfiprintf_r+0x22c>
 8004908:	4b2a      	ldr	r3, [pc, #168]	; (80049b4 <_vfiprintf_r+0x258>)
 800490a:	bb1b      	cbnz	r3, 8004954 <_vfiprintf_r+0x1f8>
 800490c:	9b03      	ldr	r3, [sp, #12]
 800490e:	3307      	adds	r3, #7
 8004910:	f023 0307 	bic.w	r3, r3, #7
 8004914:	3308      	adds	r3, #8
 8004916:	9303      	str	r3, [sp, #12]
 8004918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800491a:	443b      	add	r3, r7
 800491c:	9309      	str	r3, [sp, #36]	; 0x24
 800491e:	e767      	b.n	80047f0 <_vfiprintf_r+0x94>
 8004920:	460c      	mov	r4, r1
 8004922:	2001      	movs	r0, #1
 8004924:	fb0c 3202 	mla	r2, ip, r2, r3
 8004928:	e7a5      	b.n	8004876 <_vfiprintf_r+0x11a>
 800492a:	2300      	movs	r3, #0
 800492c:	f04f 0c0a 	mov.w	ip, #10
 8004930:	4619      	mov	r1, r3
 8004932:	3401      	adds	r4, #1
 8004934:	9305      	str	r3, [sp, #20]
 8004936:	4620      	mov	r0, r4
 8004938:	f810 2b01 	ldrb.w	r2, [r0], #1
 800493c:	3a30      	subs	r2, #48	; 0x30
 800493e:	2a09      	cmp	r2, #9
 8004940:	d903      	bls.n	800494a <_vfiprintf_r+0x1ee>
 8004942:	2b00      	cmp	r3, #0
 8004944:	d0c5      	beq.n	80048d2 <_vfiprintf_r+0x176>
 8004946:	9105      	str	r1, [sp, #20]
 8004948:	e7c3      	b.n	80048d2 <_vfiprintf_r+0x176>
 800494a:	4604      	mov	r4, r0
 800494c:	2301      	movs	r3, #1
 800494e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004952:	e7f0      	b.n	8004936 <_vfiprintf_r+0x1da>
 8004954:	ab03      	add	r3, sp, #12
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	462a      	mov	r2, r5
 800495a:	4630      	mov	r0, r6
 800495c:	4b16      	ldr	r3, [pc, #88]	; (80049b8 <_vfiprintf_r+0x25c>)
 800495e:	a904      	add	r1, sp, #16
 8004960:	f3af 8000 	nop.w
 8004964:	4607      	mov	r7, r0
 8004966:	1c78      	adds	r0, r7, #1
 8004968:	d1d6      	bne.n	8004918 <_vfiprintf_r+0x1bc>
 800496a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800496c:	07d9      	lsls	r1, r3, #31
 800496e:	d405      	bmi.n	800497c <_vfiprintf_r+0x220>
 8004970:	89ab      	ldrh	r3, [r5, #12]
 8004972:	059a      	lsls	r2, r3, #22
 8004974:	d402      	bmi.n	800497c <_vfiprintf_r+0x220>
 8004976:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004978:	f7ff fd85 	bl	8004486 <__retarget_lock_release_recursive>
 800497c:	89ab      	ldrh	r3, [r5, #12]
 800497e:	065b      	lsls	r3, r3, #25
 8004980:	f53f af12 	bmi.w	80047a8 <_vfiprintf_r+0x4c>
 8004984:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004986:	e711      	b.n	80047ac <_vfiprintf_r+0x50>
 8004988:	ab03      	add	r3, sp, #12
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	462a      	mov	r2, r5
 800498e:	4630      	mov	r0, r6
 8004990:	4b09      	ldr	r3, [pc, #36]	; (80049b8 <_vfiprintf_r+0x25c>)
 8004992:	a904      	add	r1, sp, #16
 8004994:	f000 f882 	bl	8004a9c <_printf_i>
 8004998:	e7e4      	b.n	8004964 <_vfiprintf_r+0x208>
 800499a:	bf00      	nop
 800499c:	080051c4 	.word	0x080051c4
 80049a0:	080051e4 	.word	0x080051e4
 80049a4:	080051a4 	.word	0x080051a4
 80049a8:	08005204 	.word	0x08005204
 80049ac:	0800520a 	.word	0x0800520a
 80049b0:	0800520e 	.word	0x0800520e
 80049b4:	00000000 	.word	0x00000000
 80049b8:	08004737 	.word	0x08004737

080049bc <_printf_common>:
 80049bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049c0:	4616      	mov	r6, r2
 80049c2:	4699      	mov	r9, r3
 80049c4:	688a      	ldr	r2, [r1, #8]
 80049c6:	690b      	ldr	r3, [r1, #16]
 80049c8:	4607      	mov	r7, r0
 80049ca:	4293      	cmp	r3, r2
 80049cc:	bfb8      	it	lt
 80049ce:	4613      	movlt	r3, r2
 80049d0:	6033      	str	r3, [r6, #0]
 80049d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049d6:	460c      	mov	r4, r1
 80049d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049dc:	b10a      	cbz	r2, 80049e2 <_printf_common+0x26>
 80049de:	3301      	adds	r3, #1
 80049e0:	6033      	str	r3, [r6, #0]
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	0699      	lsls	r1, r3, #26
 80049e6:	bf42      	ittt	mi
 80049e8:	6833      	ldrmi	r3, [r6, #0]
 80049ea:	3302      	addmi	r3, #2
 80049ec:	6033      	strmi	r3, [r6, #0]
 80049ee:	6825      	ldr	r5, [r4, #0]
 80049f0:	f015 0506 	ands.w	r5, r5, #6
 80049f4:	d106      	bne.n	8004a04 <_printf_common+0x48>
 80049f6:	f104 0a19 	add.w	sl, r4, #25
 80049fa:	68e3      	ldr	r3, [r4, #12]
 80049fc:	6832      	ldr	r2, [r6, #0]
 80049fe:	1a9b      	subs	r3, r3, r2
 8004a00:	42ab      	cmp	r3, r5
 8004a02:	dc28      	bgt.n	8004a56 <_printf_common+0x9a>
 8004a04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a08:	1e13      	subs	r3, r2, #0
 8004a0a:	6822      	ldr	r2, [r4, #0]
 8004a0c:	bf18      	it	ne
 8004a0e:	2301      	movne	r3, #1
 8004a10:	0692      	lsls	r2, r2, #26
 8004a12:	d42d      	bmi.n	8004a70 <_printf_common+0xb4>
 8004a14:	4649      	mov	r1, r9
 8004a16:	4638      	mov	r0, r7
 8004a18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a1c:	47c0      	blx	r8
 8004a1e:	3001      	adds	r0, #1
 8004a20:	d020      	beq.n	8004a64 <_printf_common+0xa8>
 8004a22:	6823      	ldr	r3, [r4, #0]
 8004a24:	68e5      	ldr	r5, [r4, #12]
 8004a26:	f003 0306 	and.w	r3, r3, #6
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	bf18      	it	ne
 8004a2e:	2500      	movne	r5, #0
 8004a30:	6832      	ldr	r2, [r6, #0]
 8004a32:	f04f 0600 	mov.w	r6, #0
 8004a36:	68a3      	ldr	r3, [r4, #8]
 8004a38:	bf08      	it	eq
 8004a3a:	1aad      	subeq	r5, r5, r2
 8004a3c:	6922      	ldr	r2, [r4, #16]
 8004a3e:	bf08      	it	eq
 8004a40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a44:	4293      	cmp	r3, r2
 8004a46:	bfc4      	itt	gt
 8004a48:	1a9b      	subgt	r3, r3, r2
 8004a4a:	18ed      	addgt	r5, r5, r3
 8004a4c:	341a      	adds	r4, #26
 8004a4e:	42b5      	cmp	r5, r6
 8004a50:	d11a      	bne.n	8004a88 <_printf_common+0xcc>
 8004a52:	2000      	movs	r0, #0
 8004a54:	e008      	b.n	8004a68 <_printf_common+0xac>
 8004a56:	2301      	movs	r3, #1
 8004a58:	4652      	mov	r2, sl
 8004a5a:	4649      	mov	r1, r9
 8004a5c:	4638      	mov	r0, r7
 8004a5e:	47c0      	blx	r8
 8004a60:	3001      	adds	r0, #1
 8004a62:	d103      	bne.n	8004a6c <_printf_common+0xb0>
 8004a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a6c:	3501      	adds	r5, #1
 8004a6e:	e7c4      	b.n	80049fa <_printf_common+0x3e>
 8004a70:	2030      	movs	r0, #48	; 0x30
 8004a72:	18e1      	adds	r1, r4, r3
 8004a74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a78:	1c5a      	adds	r2, r3, #1
 8004a7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a7e:	4422      	add	r2, r4
 8004a80:	3302      	adds	r3, #2
 8004a82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a86:	e7c5      	b.n	8004a14 <_printf_common+0x58>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	4622      	mov	r2, r4
 8004a8c:	4649      	mov	r1, r9
 8004a8e:	4638      	mov	r0, r7
 8004a90:	47c0      	blx	r8
 8004a92:	3001      	adds	r0, #1
 8004a94:	d0e6      	beq.n	8004a64 <_printf_common+0xa8>
 8004a96:	3601      	adds	r6, #1
 8004a98:	e7d9      	b.n	8004a4e <_printf_common+0x92>
	...

08004a9c <_printf_i>:
 8004a9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa0:	7e0f      	ldrb	r7, [r1, #24]
 8004aa2:	4691      	mov	r9, r2
 8004aa4:	2f78      	cmp	r7, #120	; 0x78
 8004aa6:	4680      	mov	r8, r0
 8004aa8:	460c      	mov	r4, r1
 8004aaa:	469a      	mov	sl, r3
 8004aac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004aae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ab2:	d807      	bhi.n	8004ac4 <_printf_i+0x28>
 8004ab4:	2f62      	cmp	r7, #98	; 0x62
 8004ab6:	d80a      	bhi.n	8004ace <_printf_i+0x32>
 8004ab8:	2f00      	cmp	r7, #0
 8004aba:	f000 80d9 	beq.w	8004c70 <_printf_i+0x1d4>
 8004abe:	2f58      	cmp	r7, #88	; 0x58
 8004ac0:	f000 80a4 	beq.w	8004c0c <_printf_i+0x170>
 8004ac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ac8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004acc:	e03a      	b.n	8004b44 <_printf_i+0xa8>
 8004ace:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ad2:	2b15      	cmp	r3, #21
 8004ad4:	d8f6      	bhi.n	8004ac4 <_printf_i+0x28>
 8004ad6:	a101      	add	r1, pc, #4	; (adr r1, 8004adc <_printf_i+0x40>)
 8004ad8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004adc:	08004b35 	.word	0x08004b35
 8004ae0:	08004b49 	.word	0x08004b49
 8004ae4:	08004ac5 	.word	0x08004ac5
 8004ae8:	08004ac5 	.word	0x08004ac5
 8004aec:	08004ac5 	.word	0x08004ac5
 8004af0:	08004ac5 	.word	0x08004ac5
 8004af4:	08004b49 	.word	0x08004b49
 8004af8:	08004ac5 	.word	0x08004ac5
 8004afc:	08004ac5 	.word	0x08004ac5
 8004b00:	08004ac5 	.word	0x08004ac5
 8004b04:	08004ac5 	.word	0x08004ac5
 8004b08:	08004c57 	.word	0x08004c57
 8004b0c:	08004b79 	.word	0x08004b79
 8004b10:	08004c39 	.word	0x08004c39
 8004b14:	08004ac5 	.word	0x08004ac5
 8004b18:	08004ac5 	.word	0x08004ac5
 8004b1c:	08004c79 	.word	0x08004c79
 8004b20:	08004ac5 	.word	0x08004ac5
 8004b24:	08004b79 	.word	0x08004b79
 8004b28:	08004ac5 	.word	0x08004ac5
 8004b2c:	08004ac5 	.word	0x08004ac5
 8004b30:	08004c41 	.word	0x08004c41
 8004b34:	682b      	ldr	r3, [r5, #0]
 8004b36:	1d1a      	adds	r2, r3, #4
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	602a      	str	r2, [r5, #0]
 8004b3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b44:	2301      	movs	r3, #1
 8004b46:	e0a4      	b.n	8004c92 <_printf_i+0x1f6>
 8004b48:	6820      	ldr	r0, [r4, #0]
 8004b4a:	6829      	ldr	r1, [r5, #0]
 8004b4c:	0606      	lsls	r6, r0, #24
 8004b4e:	f101 0304 	add.w	r3, r1, #4
 8004b52:	d50a      	bpl.n	8004b6a <_printf_i+0xce>
 8004b54:	680e      	ldr	r6, [r1, #0]
 8004b56:	602b      	str	r3, [r5, #0]
 8004b58:	2e00      	cmp	r6, #0
 8004b5a:	da03      	bge.n	8004b64 <_printf_i+0xc8>
 8004b5c:	232d      	movs	r3, #45	; 0x2d
 8004b5e:	4276      	negs	r6, r6
 8004b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b64:	230a      	movs	r3, #10
 8004b66:	485e      	ldr	r0, [pc, #376]	; (8004ce0 <_printf_i+0x244>)
 8004b68:	e019      	b.n	8004b9e <_printf_i+0x102>
 8004b6a:	680e      	ldr	r6, [r1, #0]
 8004b6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b70:	602b      	str	r3, [r5, #0]
 8004b72:	bf18      	it	ne
 8004b74:	b236      	sxthne	r6, r6
 8004b76:	e7ef      	b.n	8004b58 <_printf_i+0xbc>
 8004b78:	682b      	ldr	r3, [r5, #0]
 8004b7a:	6820      	ldr	r0, [r4, #0]
 8004b7c:	1d19      	adds	r1, r3, #4
 8004b7e:	6029      	str	r1, [r5, #0]
 8004b80:	0601      	lsls	r1, r0, #24
 8004b82:	d501      	bpl.n	8004b88 <_printf_i+0xec>
 8004b84:	681e      	ldr	r6, [r3, #0]
 8004b86:	e002      	b.n	8004b8e <_printf_i+0xf2>
 8004b88:	0646      	lsls	r6, r0, #25
 8004b8a:	d5fb      	bpl.n	8004b84 <_printf_i+0xe8>
 8004b8c:	881e      	ldrh	r6, [r3, #0]
 8004b8e:	2f6f      	cmp	r7, #111	; 0x6f
 8004b90:	bf0c      	ite	eq
 8004b92:	2308      	moveq	r3, #8
 8004b94:	230a      	movne	r3, #10
 8004b96:	4852      	ldr	r0, [pc, #328]	; (8004ce0 <_printf_i+0x244>)
 8004b98:	2100      	movs	r1, #0
 8004b9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b9e:	6865      	ldr	r5, [r4, #4]
 8004ba0:	2d00      	cmp	r5, #0
 8004ba2:	bfa8      	it	ge
 8004ba4:	6821      	ldrge	r1, [r4, #0]
 8004ba6:	60a5      	str	r5, [r4, #8]
 8004ba8:	bfa4      	itt	ge
 8004baa:	f021 0104 	bicge.w	r1, r1, #4
 8004bae:	6021      	strge	r1, [r4, #0]
 8004bb0:	b90e      	cbnz	r6, 8004bb6 <_printf_i+0x11a>
 8004bb2:	2d00      	cmp	r5, #0
 8004bb4:	d04d      	beq.n	8004c52 <_printf_i+0x1b6>
 8004bb6:	4615      	mov	r5, r2
 8004bb8:	fbb6 f1f3 	udiv	r1, r6, r3
 8004bbc:	fb03 6711 	mls	r7, r3, r1, r6
 8004bc0:	5dc7      	ldrb	r7, [r0, r7]
 8004bc2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004bc6:	4637      	mov	r7, r6
 8004bc8:	42bb      	cmp	r3, r7
 8004bca:	460e      	mov	r6, r1
 8004bcc:	d9f4      	bls.n	8004bb8 <_printf_i+0x11c>
 8004bce:	2b08      	cmp	r3, #8
 8004bd0:	d10b      	bne.n	8004bea <_printf_i+0x14e>
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	07de      	lsls	r6, r3, #31
 8004bd6:	d508      	bpl.n	8004bea <_printf_i+0x14e>
 8004bd8:	6923      	ldr	r3, [r4, #16]
 8004bda:	6861      	ldr	r1, [r4, #4]
 8004bdc:	4299      	cmp	r1, r3
 8004bde:	bfde      	ittt	le
 8004be0:	2330      	movle	r3, #48	; 0x30
 8004be2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004be6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004bea:	1b52      	subs	r2, r2, r5
 8004bec:	6122      	str	r2, [r4, #16]
 8004bee:	464b      	mov	r3, r9
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	4640      	mov	r0, r8
 8004bf4:	f8cd a000 	str.w	sl, [sp]
 8004bf8:	aa03      	add	r2, sp, #12
 8004bfa:	f7ff fedf 	bl	80049bc <_printf_common>
 8004bfe:	3001      	adds	r0, #1
 8004c00:	d14c      	bne.n	8004c9c <_printf_i+0x200>
 8004c02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c06:	b004      	add	sp, #16
 8004c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c0c:	4834      	ldr	r0, [pc, #208]	; (8004ce0 <_printf_i+0x244>)
 8004c0e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c12:	6829      	ldr	r1, [r5, #0]
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c1a:	6029      	str	r1, [r5, #0]
 8004c1c:	061d      	lsls	r5, r3, #24
 8004c1e:	d514      	bpl.n	8004c4a <_printf_i+0x1ae>
 8004c20:	07df      	lsls	r7, r3, #31
 8004c22:	bf44      	itt	mi
 8004c24:	f043 0320 	orrmi.w	r3, r3, #32
 8004c28:	6023      	strmi	r3, [r4, #0]
 8004c2a:	b91e      	cbnz	r6, 8004c34 <_printf_i+0x198>
 8004c2c:	6823      	ldr	r3, [r4, #0]
 8004c2e:	f023 0320 	bic.w	r3, r3, #32
 8004c32:	6023      	str	r3, [r4, #0]
 8004c34:	2310      	movs	r3, #16
 8004c36:	e7af      	b.n	8004b98 <_printf_i+0xfc>
 8004c38:	6823      	ldr	r3, [r4, #0]
 8004c3a:	f043 0320 	orr.w	r3, r3, #32
 8004c3e:	6023      	str	r3, [r4, #0]
 8004c40:	2378      	movs	r3, #120	; 0x78
 8004c42:	4828      	ldr	r0, [pc, #160]	; (8004ce4 <_printf_i+0x248>)
 8004c44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c48:	e7e3      	b.n	8004c12 <_printf_i+0x176>
 8004c4a:	0659      	lsls	r1, r3, #25
 8004c4c:	bf48      	it	mi
 8004c4e:	b2b6      	uxthmi	r6, r6
 8004c50:	e7e6      	b.n	8004c20 <_printf_i+0x184>
 8004c52:	4615      	mov	r5, r2
 8004c54:	e7bb      	b.n	8004bce <_printf_i+0x132>
 8004c56:	682b      	ldr	r3, [r5, #0]
 8004c58:	6826      	ldr	r6, [r4, #0]
 8004c5a:	1d18      	adds	r0, r3, #4
 8004c5c:	6961      	ldr	r1, [r4, #20]
 8004c5e:	6028      	str	r0, [r5, #0]
 8004c60:	0635      	lsls	r5, r6, #24
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	d501      	bpl.n	8004c6a <_printf_i+0x1ce>
 8004c66:	6019      	str	r1, [r3, #0]
 8004c68:	e002      	b.n	8004c70 <_printf_i+0x1d4>
 8004c6a:	0670      	lsls	r0, r6, #25
 8004c6c:	d5fb      	bpl.n	8004c66 <_printf_i+0x1ca>
 8004c6e:	8019      	strh	r1, [r3, #0]
 8004c70:	2300      	movs	r3, #0
 8004c72:	4615      	mov	r5, r2
 8004c74:	6123      	str	r3, [r4, #16]
 8004c76:	e7ba      	b.n	8004bee <_printf_i+0x152>
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	1d1a      	adds	r2, r3, #4
 8004c7e:	602a      	str	r2, [r5, #0]
 8004c80:	681d      	ldr	r5, [r3, #0]
 8004c82:	6862      	ldr	r2, [r4, #4]
 8004c84:	4628      	mov	r0, r5
 8004c86:	f000 f921 	bl	8004ecc <memchr>
 8004c8a:	b108      	cbz	r0, 8004c90 <_printf_i+0x1f4>
 8004c8c:	1b40      	subs	r0, r0, r5
 8004c8e:	6060      	str	r0, [r4, #4]
 8004c90:	6863      	ldr	r3, [r4, #4]
 8004c92:	6123      	str	r3, [r4, #16]
 8004c94:	2300      	movs	r3, #0
 8004c96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c9a:	e7a8      	b.n	8004bee <_printf_i+0x152>
 8004c9c:	462a      	mov	r2, r5
 8004c9e:	4649      	mov	r1, r9
 8004ca0:	4640      	mov	r0, r8
 8004ca2:	6923      	ldr	r3, [r4, #16]
 8004ca4:	47d0      	blx	sl
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	d0ab      	beq.n	8004c02 <_printf_i+0x166>
 8004caa:	6823      	ldr	r3, [r4, #0]
 8004cac:	079b      	lsls	r3, r3, #30
 8004cae:	d413      	bmi.n	8004cd8 <_printf_i+0x23c>
 8004cb0:	68e0      	ldr	r0, [r4, #12]
 8004cb2:	9b03      	ldr	r3, [sp, #12]
 8004cb4:	4298      	cmp	r0, r3
 8004cb6:	bfb8      	it	lt
 8004cb8:	4618      	movlt	r0, r3
 8004cba:	e7a4      	b.n	8004c06 <_printf_i+0x16a>
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	4632      	mov	r2, r6
 8004cc0:	4649      	mov	r1, r9
 8004cc2:	4640      	mov	r0, r8
 8004cc4:	47d0      	blx	sl
 8004cc6:	3001      	adds	r0, #1
 8004cc8:	d09b      	beq.n	8004c02 <_printf_i+0x166>
 8004cca:	3501      	adds	r5, #1
 8004ccc:	68e3      	ldr	r3, [r4, #12]
 8004cce:	9903      	ldr	r1, [sp, #12]
 8004cd0:	1a5b      	subs	r3, r3, r1
 8004cd2:	42ab      	cmp	r3, r5
 8004cd4:	dcf2      	bgt.n	8004cbc <_printf_i+0x220>
 8004cd6:	e7eb      	b.n	8004cb0 <_printf_i+0x214>
 8004cd8:	2500      	movs	r5, #0
 8004cda:	f104 0619 	add.w	r6, r4, #25
 8004cde:	e7f5      	b.n	8004ccc <_printf_i+0x230>
 8004ce0:	08005215 	.word	0x08005215
 8004ce4:	08005226 	.word	0x08005226

08004ce8 <_putc_r>:
 8004ce8:	b570      	push	{r4, r5, r6, lr}
 8004cea:	460d      	mov	r5, r1
 8004cec:	4614      	mov	r4, r2
 8004cee:	4606      	mov	r6, r0
 8004cf0:	b118      	cbz	r0, 8004cfa <_putc_r+0x12>
 8004cf2:	6983      	ldr	r3, [r0, #24]
 8004cf4:	b90b      	cbnz	r3, 8004cfa <_putc_r+0x12>
 8004cf6:	f7ff fb27 	bl	8004348 <__sinit>
 8004cfa:	4b1c      	ldr	r3, [pc, #112]	; (8004d6c <_putc_r+0x84>)
 8004cfc:	429c      	cmp	r4, r3
 8004cfe:	d124      	bne.n	8004d4a <_putc_r+0x62>
 8004d00:	6874      	ldr	r4, [r6, #4]
 8004d02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d04:	07d8      	lsls	r0, r3, #31
 8004d06:	d405      	bmi.n	8004d14 <_putc_r+0x2c>
 8004d08:	89a3      	ldrh	r3, [r4, #12]
 8004d0a:	0599      	lsls	r1, r3, #22
 8004d0c:	d402      	bmi.n	8004d14 <_putc_r+0x2c>
 8004d0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d10:	f7ff fbb8 	bl	8004484 <__retarget_lock_acquire_recursive>
 8004d14:	68a3      	ldr	r3, [r4, #8]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	60a3      	str	r3, [r4, #8]
 8004d1c:	da05      	bge.n	8004d2a <_putc_r+0x42>
 8004d1e:	69a2      	ldr	r2, [r4, #24]
 8004d20:	4293      	cmp	r3, r2
 8004d22:	db1c      	blt.n	8004d5e <_putc_r+0x76>
 8004d24:	b2eb      	uxtb	r3, r5
 8004d26:	2b0a      	cmp	r3, #10
 8004d28:	d019      	beq.n	8004d5e <_putc_r+0x76>
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	6022      	str	r2, [r4, #0]
 8004d30:	701d      	strb	r5, [r3, #0]
 8004d32:	b2ed      	uxtb	r5, r5
 8004d34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d36:	07da      	lsls	r2, r3, #31
 8004d38:	d405      	bmi.n	8004d46 <_putc_r+0x5e>
 8004d3a:	89a3      	ldrh	r3, [r4, #12]
 8004d3c:	059b      	lsls	r3, r3, #22
 8004d3e:	d402      	bmi.n	8004d46 <_putc_r+0x5e>
 8004d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d42:	f7ff fba0 	bl	8004486 <__retarget_lock_release_recursive>
 8004d46:	4628      	mov	r0, r5
 8004d48:	bd70      	pop	{r4, r5, r6, pc}
 8004d4a:	4b09      	ldr	r3, [pc, #36]	; (8004d70 <_putc_r+0x88>)
 8004d4c:	429c      	cmp	r4, r3
 8004d4e:	d101      	bne.n	8004d54 <_putc_r+0x6c>
 8004d50:	68b4      	ldr	r4, [r6, #8]
 8004d52:	e7d6      	b.n	8004d02 <_putc_r+0x1a>
 8004d54:	4b07      	ldr	r3, [pc, #28]	; (8004d74 <_putc_r+0x8c>)
 8004d56:	429c      	cmp	r4, r3
 8004d58:	bf08      	it	eq
 8004d5a:	68f4      	ldreq	r4, [r6, #12]
 8004d5c:	e7d1      	b.n	8004d02 <_putc_r+0x1a>
 8004d5e:	4629      	mov	r1, r5
 8004d60:	4622      	mov	r2, r4
 8004d62:	4630      	mov	r0, r6
 8004d64:	f7ff f91a 	bl	8003f9c <__swbuf_r>
 8004d68:	4605      	mov	r5, r0
 8004d6a:	e7e3      	b.n	8004d34 <_putc_r+0x4c>
 8004d6c:	080051c4 	.word	0x080051c4
 8004d70:	080051e4 	.word	0x080051e4
 8004d74:	080051a4 	.word	0x080051a4

08004d78 <_sbrk_r>:
 8004d78:	b538      	push	{r3, r4, r5, lr}
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	4d05      	ldr	r5, [pc, #20]	; (8004d94 <_sbrk_r+0x1c>)
 8004d7e:	4604      	mov	r4, r0
 8004d80:	4608      	mov	r0, r1
 8004d82:	602b      	str	r3, [r5, #0]
 8004d84:	f7fc fbfc 	bl	8001580 <_sbrk>
 8004d88:	1c43      	adds	r3, r0, #1
 8004d8a:	d102      	bne.n	8004d92 <_sbrk_r+0x1a>
 8004d8c:	682b      	ldr	r3, [r5, #0]
 8004d8e:	b103      	cbz	r3, 8004d92 <_sbrk_r+0x1a>
 8004d90:	6023      	str	r3, [r4, #0]
 8004d92:	bd38      	pop	{r3, r4, r5, pc}
 8004d94:	2000030c 	.word	0x2000030c

08004d98 <__sread>:
 8004d98:	b510      	push	{r4, lr}
 8004d9a:	460c      	mov	r4, r1
 8004d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004da0:	f000 f8ae 	bl	8004f00 <_read_r>
 8004da4:	2800      	cmp	r0, #0
 8004da6:	bfab      	itete	ge
 8004da8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004daa:	89a3      	ldrhlt	r3, [r4, #12]
 8004dac:	181b      	addge	r3, r3, r0
 8004dae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004db2:	bfac      	ite	ge
 8004db4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004db6:	81a3      	strhlt	r3, [r4, #12]
 8004db8:	bd10      	pop	{r4, pc}

08004dba <__swrite>:
 8004dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dbe:	461f      	mov	r7, r3
 8004dc0:	898b      	ldrh	r3, [r1, #12]
 8004dc2:	4605      	mov	r5, r0
 8004dc4:	05db      	lsls	r3, r3, #23
 8004dc6:	460c      	mov	r4, r1
 8004dc8:	4616      	mov	r6, r2
 8004dca:	d505      	bpl.n	8004dd8 <__swrite+0x1e>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dd4:	f000 f868 	bl	8004ea8 <_lseek_r>
 8004dd8:	89a3      	ldrh	r3, [r4, #12]
 8004dda:	4632      	mov	r2, r6
 8004ddc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004de0:	81a3      	strh	r3, [r4, #12]
 8004de2:	4628      	mov	r0, r5
 8004de4:	463b      	mov	r3, r7
 8004de6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dee:	f000 b817 	b.w	8004e20 <_write_r>

08004df2 <__sseek>:
 8004df2:	b510      	push	{r4, lr}
 8004df4:	460c      	mov	r4, r1
 8004df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dfa:	f000 f855 	bl	8004ea8 <_lseek_r>
 8004dfe:	1c43      	adds	r3, r0, #1
 8004e00:	89a3      	ldrh	r3, [r4, #12]
 8004e02:	bf15      	itete	ne
 8004e04:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e0e:	81a3      	strheq	r3, [r4, #12]
 8004e10:	bf18      	it	ne
 8004e12:	81a3      	strhne	r3, [r4, #12]
 8004e14:	bd10      	pop	{r4, pc}

08004e16 <__sclose>:
 8004e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e1a:	f000 b813 	b.w	8004e44 <_close_r>
	...

08004e20 <_write_r>:
 8004e20:	b538      	push	{r3, r4, r5, lr}
 8004e22:	4604      	mov	r4, r0
 8004e24:	4608      	mov	r0, r1
 8004e26:	4611      	mov	r1, r2
 8004e28:	2200      	movs	r2, #0
 8004e2a:	4d05      	ldr	r5, [pc, #20]	; (8004e40 <_write_r+0x20>)
 8004e2c:	602a      	str	r2, [r5, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f7fc fb59 	bl	80014e6 <_write>
 8004e34:	1c43      	adds	r3, r0, #1
 8004e36:	d102      	bne.n	8004e3e <_write_r+0x1e>
 8004e38:	682b      	ldr	r3, [r5, #0]
 8004e3a:	b103      	cbz	r3, 8004e3e <_write_r+0x1e>
 8004e3c:	6023      	str	r3, [r4, #0]
 8004e3e:	bd38      	pop	{r3, r4, r5, pc}
 8004e40:	2000030c 	.word	0x2000030c

08004e44 <_close_r>:
 8004e44:	b538      	push	{r3, r4, r5, lr}
 8004e46:	2300      	movs	r3, #0
 8004e48:	4d05      	ldr	r5, [pc, #20]	; (8004e60 <_close_r+0x1c>)
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	4608      	mov	r0, r1
 8004e4e:	602b      	str	r3, [r5, #0]
 8004e50:	f7fc fb65 	bl	800151e <_close>
 8004e54:	1c43      	adds	r3, r0, #1
 8004e56:	d102      	bne.n	8004e5e <_close_r+0x1a>
 8004e58:	682b      	ldr	r3, [r5, #0]
 8004e5a:	b103      	cbz	r3, 8004e5e <_close_r+0x1a>
 8004e5c:	6023      	str	r3, [r4, #0]
 8004e5e:	bd38      	pop	{r3, r4, r5, pc}
 8004e60:	2000030c 	.word	0x2000030c

08004e64 <_fstat_r>:
 8004e64:	b538      	push	{r3, r4, r5, lr}
 8004e66:	2300      	movs	r3, #0
 8004e68:	4d06      	ldr	r5, [pc, #24]	; (8004e84 <_fstat_r+0x20>)
 8004e6a:	4604      	mov	r4, r0
 8004e6c:	4608      	mov	r0, r1
 8004e6e:	4611      	mov	r1, r2
 8004e70:	602b      	str	r3, [r5, #0]
 8004e72:	f7fc fb5f 	bl	8001534 <_fstat>
 8004e76:	1c43      	adds	r3, r0, #1
 8004e78:	d102      	bne.n	8004e80 <_fstat_r+0x1c>
 8004e7a:	682b      	ldr	r3, [r5, #0]
 8004e7c:	b103      	cbz	r3, 8004e80 <_fstat_r+0x1c>
 8004e7e:	6023      	str	r3, [r4, #0]
 8004e80:	bd38      	pop	{r3, r4, r5, pc}
 8004e82:	bf00      	nop
 8004e84:	2000030c 	.word	0x2000030c

08004e88 <_isatty_r>:
 8004e88:	b538      	push	{r3, r4, r5, lr}
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	4d05      	ldr	r5, [pc, #20]	; (8004ea4 <_isatty_r+0x1c>)
 8004e8e:	4604      	mov	r4, r0
 8004e90:	4608      	mov	r0, r1
 8004e92:	602b      	str	r3, [r5, #0]
 8004e94:	f7fc fb5d 	bl	8001552 <_isatty>
 8004e98:	1c43      	adds	r3, r0, #1
 8004e9a:	d102      	bne.n	8004ea2 <_isatty_r+0x1a>
 8004e9c:	682b      	ldr	r3, [r5, #0]
 8004e9e:	b103      	cbz	r3, 8004ea2 <_isatty_r+0x1a>
 8004ea0:	6023      	str	r3, [r4, #0]
 8004ea2:	bd38      	pop	{r3, r4, r5, pc}
 8004ea4:	2000030c 	.word	0x2000030c

08004ea8 <_lseek_r>:
 8004ea8:	b538      	push	{r3, r4, r5, lr}
 8004eaa:	4604      	mov	r4, r0
 8004eac:	4608      	mov	r0, r1
 8004eae:	4611      	mov	r1, r2
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	4d05      	ldr	r5, [pc, #20]	; (8004ec8 <_lseek_r+0x20>)
 8004eb4:	602a      	str	r2, [r5, #0]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	f7fc fb55 	bl	8001566 <_lseek>
 8004ebc:	1c43      	adds	r3, r0, #1
 8004ebe:	d102      	bne.n	8004ec6 <_lseek_r+0x1e>
 8004ec0:	682b      	ldr	r3, [r5, #0]
 8004ec2:	b103      	cbz	r3, 8004ec6 <_lseek_r+0x1e>
 8004ec4:	6023      	str	r3, [r4, #0]
 8004ec6:	bd38      	pop	{r3, r4, r5, pc}
 8004ec8:	2000030c 	.word	0x2000030c

08004ecc <memchr>:
 8004ecc:	4603      	mov	r3, r0
 8004ece:	b510      	push	{r4, lr}
 8004ed0:	b2c9      	uxtb	r1, r1
 8004ed2:	4402      	add	r2, r0
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	d101      	bne.n	8004ede <memchr+0x12>
 8004eda:	2000      	movs	r0, #0
 8004edc:	e003      	b.n	8004ee6 <memchr+0x1a>
 8004ede:	7804      	ldrb	r4, [r0, #0]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	428c      	cmp	r4, r1
 8004ee4:	d1f6      	bne.n	8004ed4 <memchr+0x8>
 8004ee6:	bd10      	pop	{r4, pc}

08004ee8 <__malloc_lock>:
 8004ee8:	4801      	ldr	r0, [pc, #4]	; (8004ef0 <__malloc_lock+0x8>)
 8004eea:	f7ff bacb 	b.w	8004484 <__retarget_lock_acquire_recursive>
 8004eee:	bf00      	nop
 8004ef0:	20000300 	.word	0x20000300

08004ef4 <__malloc_unlock>:
 8004ef4:	4801      	ldr	r0, [pc, #4]	; (8004efc <__malloc_unlock+0x8>)
 8004ef6:	f7ff bac6 	b.w	8004486 <__retarget_lock_release_recursive>
 8004efa:	bf00      	nop
 8004efc:	20000300 	.word	0x20000300

08004f00 <_read_r>:
 8004f00:	b538      	push	{r3, r4, r5, lr}
 8004f02:	4604      	mov	r4, r0
 8004f04:	4608      	mov	r0, r1
 8004f06:	4611      	mov	r1, r2
 8004f08:	2200      	movs	r2, #0
 8004f0a:	4d05      	ldr	r5, [pc, #20]	; (8004f20 <_read_r+0x20>)
 8004f0c:	602a      	str	r2, [r5, #0]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	f7fc facc 	bl	80014ac <_read>
 8004f14:	1c43      	adds	r3, r0, #1
 8004f16:	d102      	bne.n	8004f1e <_read_r+0x1e>
 8004f18:	682b      	ldr	r3, [r5, #0]
 8004f1a:	b103      	cbz	r3, 8004f1e <_read_r+0x1e>
 8004f1c:	6023      	str	r3, [r4, #0]
 8004f1e:	bd38      	pop	{r3, r4, r5, pc}
 8004f20:	2000030c 	.word	0x2000030c

08004f24 <_init>:
 8004f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f26:	bf00      	nop
 8004f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f2a:	bc08      	pop	{r3}
 8004f2c:	469e      	mov	lr, r3
 8004f2e:	4770      	bx	lr

08004f30 <_fini>:
 8004f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f32:	bf00      	nop
 8004f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f36:	bc08      	pop	{r3}
 8004f38:	469e      	mov	lr, r3
 8004f3a:	4770      	bx	lr
