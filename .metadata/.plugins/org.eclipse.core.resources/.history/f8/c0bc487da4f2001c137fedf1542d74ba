/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "fatfs.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "string.h"
#include "stdio.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

CRC_HandleTypeDef hcrc;

DMA2D_HandleTypeDef hdma2d;

LTDC_HandleTypeDef hltdc;

SD_HandleTypeDef hsd1;

UART_HandleTypeDef huart1;

SDRAM_HandleTypeDef hsdram1;

/* USER CODE BEGIN PV */
FRESULT res;
 FATFS SDFatFs;
 FIL MyFile;
 char *temp = NULL;
 char buffrd[30][10];
 char buffrd1[30][10];
 char* data ;
 //uint32_t byteswritten, bytesread;
 int number_data;
 int datainput_1[],datainput_2[],datainput_3[];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void PeriphCommonClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_CRC_Init(void);
static void MX_DMA2D_Init(void);
static void MX_FMC_Init(void);
static void MX_SDMMC1_SD_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_LTDC_Init(void);
/* USER CODE BEGIN PFP */
void Error1(void);
void Error2(void);
void Soal1();
void Soal2();
void Soal3();
void Soal4();
void Soal5();
void loading();

void get_data_from_rawdata();
void save_data_file(char *namafile, dataInput datatulis);
enum _bool {
	false = 0,
	true = 1
};
typedef enum _bool boolean;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char key[64];
char buffer[64];
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_CRC_Init();
  MX_DMA2D_Init();
  MX_FMC_Init();
  MX_SDMMC1_SD_Init();
  MX_USART1_UART_Init();
  MX_FATFS_Init();
  MX_LTDC_Init();
  /* USER CODE BEGIN 2 */
  BSP_SDRAM_Init(); /* Initializes the SDRAM device */
  __HAL_RCC_CRC_CLK_ENABLE(); /* Enable the CRC Module */

  BSP_TS_Init(480, 272);

  BSP_LCD_Init();
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
  BSP_LCD_DisplayOn();

  BSP_LCD_SelectLayer(0);
  BSP_LCD_Clear(LCD_COLOR_MAGENTA);
  BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"CHOOSE YOUR MENU ON GTK", CENTER_MODE);

    res = BSP_SD_Init();
    if(res != FR_OK){
    	Error1();
    }

    res = f_mount(&SDFatFs, "", 1);
    if(res != FR_OK){
    	Error1();
    }

    res = f_open(&MyFile, "data.txt", FA_READ);
    if(res != FR_OK){
    	Error2();
    }

    int i = 0;	// Variabel i dengan nilai = 0
    int j = 0;	// Variabel j dengan nilai = 0
    for(i =0;i<4;i++){
       	f_gets(temp, 10 , &MyFile);
          	strcpy(dataraw[i], shift_trim(temp));

          	if(strlen(dataraw[i])>=0){
          			j++;
          			strcpy(dataraw[j], shift_trim(temp));
            	 }
        }
        	 if(res != FR_OK){
        		 Error2();
        	 	 }
        f_close(&MyFile);
        number_data = j;

        	 if(strlen(dataraw[number_data]) == strlen(dataraw[number_data-1])){
            	 number_data=j-1;
        	 	 }
        	 else{number_data = j;}

        get_data_from_rawdata();
        res = f_mount(&SDFatFs, "", 1);
        	 if(res != FR_OK){
            	 Error1();
        	 	 }

        res = f_open(&MyFile, "data.txt", FA_READ);
        	 if(res != FR_OK){
            	Error2();
            	 }
        for(int i =0;i<4;i++){
       	 	 f_gets(buffrd[i], sizeof buffrd, &MyFile);
       	 	 strcpy(buffrd1[i], buffrd[i]);
            }


    	for (int i = 0; i < 4; i++){
    	data = replaceWordInString(buffrd1[i], "\n", " ");
    	strcpy(buffrd1[i], data);
    	 }

        f_close(&MyFile);


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive(&huart1, (uint8_t *)&buffer, sizeof(buffer), 200);
	 	  if(buffer[0] != '\0'){
	 			  memset(key, '\0', 64);
	 			  memcpy(key, buffer, 64);

	 			 	 if (key[0] == 'T'){
	 			 		  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_SET);
						  BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
						  BSP_LCD_SetBackColor(LCD_COLOR_DARKGREEN);
						  BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"LED NYALA", CENTER_MODE);
//						  HAL_Delay(1000);
//						  NVIC_SystemReset();
	 			 	 }
	 			 	  else if(key[0] == 'F'){
	 			 		  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
						  BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
						  BSP_LCD_SetBackColor(LCD_COLOR_DARKGREEN);
						  BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"LED MATI", CENTER_MODE);
//						  HAL_Delay(1000);
//						  NVIC_SystemReset();
	 			 	  }
	 			 	  else if(key[0] == '1'){
	 			 		Soal1();
	 			 		HAL_Delay(1000);
	 			 		NVIC_SystemReset();
	 			 	  }else if(key[0] == '2'){
	 	 			 	 BSP_LCD_Clear(LCD_COLOR_WHITE);
						 BSP_LCD_SetBackColor(LCD_COLOR_CYAN);
	 	 			 	 BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"halo", CENTER_MODE);
//	 	 			 	 HAL_Delay(1000);
//	 	 			 	 NVIC_SystemReset();
	 			 	  }
	 	  }// if(buffer[0] != '\0')
	 	  memset(buffer, '\0', 64);
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 400;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
  PeriphClkInitStruct.PLLSAIDivQ = 1;
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{

  /* USER CODE BEGIN CRC_Init 0 */

  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}

/**
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{

  /* USER CODE BEGIN DMA2D_Init 0 */

  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
  hdma2d.Init.Mode = DMA2D_M2M;
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
  hdma2d.Init.OutputOffset = 0;
  hdma2d.LayerCfg[1].InputOffset = 0;
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
  hdma2d.LayerCfg[1].InputAlpha = 0;
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}

/**
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
  hltdc.Init.HorizontalSync = 7;
  hltdc.Init.VerticalSync = 3;
  hltdc.Init.AccumulatedHBP = 14;
  hltdc.Init.AccumulatedVBP = 5;
  hltdc.Init.AccumulatedActiveW = 654;
  hltdc.Init.AccumulatedActiveH = 485;
  hltdc.Init.TotalWidth = 660;
  hltdc.Init.TotalHeigh = 487;
  hltdc.Init.Backcolor.Blue = 0;
  hltdc.Init.Backcolor.Green = 0;
  hltdc.Init.Backcolor.Red = 0;
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
  {
    Error_Handler();
  }
  pLayerCfg.WindowX0 = 0;
  pLayerCfg.WindowX1 = 0;
  pLayerCfg.WindowY0 = 0;
  pLayerCfg.WindowY1 = 0;
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
  pLayerCfg.Alpha = 0;
  pLayerCfg.Alpha0 = 0;
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
  pLayerCfg.FBStartAdress = 0;
  pLayerCfg.ImageWidth = 0;
  pLayerCfg.ImageHeight = 0;
  pLayerCfg.Backcolor.Blue = 0;
  pLayerCfg.Backcolor.Green = 0;
  pLayerCfg.Backcolor.Red = 0;
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
  {
    Error_Handler();
  }
  pLayerCfg1.WindowX0 = 0;
  pLayerCfg1.WindowX1 = 0;
  pLayerCfg1.WindowY0 = 0;
  pLayerCfg1.WindowY1 = 0;
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
  pLayerCfg1.Alpha = 0;
  pLayerCfg1.Alpha0 = 0;
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
  pLayerCfg1.FBStartAdress = 0;
  pLayerCfg1.ImageWidth = 0;
  pLayerCfg1.ImageHeight = 0;
  pLayerCfg1.Backcolor.Blue = 0;
  pLayerCfg1.Backcolor.Green = 0;
  pLayerCfg1.Backcolor.Red = 0;
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}

/**
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{

  /* USER CODE BEGIN SDMMC1_Init 0 */

  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 0;
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/* FMC initialization function */
static void MX_FMC_Init(void)
{

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};

  /* USER CODE BEGIN FMC_Init 1 */

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
  SdramTiming.ExitSelfRefreshDelay = 16;
  SdramTiming.SelfRefreshTime = 16;
  SdramTiming.RowCycleDelay = 16;
  SdramTiming.WriteRecoveryTime = 16;
  SdramTiming.RPDelay = 16;
  SdramTiming.RCDDelay = 16;

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
  {
    Error_Handler( );
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOJ_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOK_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
void Error1(){
	BSP_LCD_Clear(LCD_COLOR_BLUE);
	while(1){
		BSP_LCD_DisplayStringAt(0, 41, (uint8_t *)"SDCard NO DETECTED!", CENTER_MODE);
		HAL_Delay(500);
		BSP_LCD_DisplayStringAt(0, 91, (uint8_t *)"PLEASE INSERT SDCARD", CENTER_MODE);
		HAL_Delay(500);
		BSP_LCD_DisplayStringAt(0, 131, (uint8_t *)"RESET AFTER THAT", CENTER_MODE);
	}
}

void Error2(){
	BSP_LCD_Clear(LCD_COLOR_BLUE);
	while(1){
		BSP_LCD_DisplayStringAt(0, 51, (uint8_t *)"NO DATA DETECTED", CENTER_MODE);
		HAL_Delay(500);
		BSP_LCD_DisplayStringAt(0, 91, (uint8_t *)"PLEASE INSERT DATA", CENTER_MODE);
		HAL_Delay(500);
		BSP_LCD_DisplayStringAt(0, 131, (uint8_t *)"AND RESTART", CENTER_MODE);
	}

}

void Soal1(){
	for (int i = 0; i < 4; i++){
	data = replaceWordInString(buffrd[i], ",", " ");
	strcpy(buffrd[i], data);
	 }

 	for (int i = 0; i < 4; i++){
 	data = replaceWordInString(buffrd[i], "\n", " ");
 	strcpy(buffrd[i], data);
 	}
 	BSP_LCD_Clear(LCD_COLOR_WHITE);
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
	BSP_LCD_DisplayStringAt(0, 90, (uint8_t *)"BERHASIL CONVERT SOAL1", CENTER_MODE);
	BSP_LCD_DisplayStringAt(0, 110, (uint8_t *)"dan SIMPAN", CENTER_MODE);
//	int j = 60;
//	for(int i = 0;i<4;i++){
//	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
//	BSP_LCD_DisplayStringAt(20, j, (uint8_t *)buffrd[i], LEFT_MODE);
//	j += 40;
//	}
	res = f_mount(&SDFatFS, "", 1);
		if(res != FR_OK){
				Error1();
			}
	res = f_open(&MyFile, "data_copy1.txt", FA_CREATE_ALWAYS | FA_WRITE);
		if(res != FR_OK){
				Error1();
			}
	for(int i = 0; i <4;i++){
			f_printf(&MyFile, "%s\n", buffrd[i]);
		}
	f_close(&MyFile);
	f_mount(0, "", 1);

//	HAL_Delay(1500);
//	loading();
//	BSP_LCD_Clear(LCD_COLOR_WHITE);
}

void Soal2(){
	dataInput dataBaca;			//membuat struct dengan nama dataBaca
	dataBaca.Input1 = calloc(100,sizeof(char));	//alokasi memori
	dataBaca.Input2 = calloc(100,sizeof(char));	//alokasi memori
	dataBaca.Input3 = calloc(100,sizeof(char));	//alokasi memori

	for(int i=0;i<number_data+1;i++){		//perulangan sebanyak number data+1
		dataBaca.Input1[i]=IntToStr(datainput_1[i]);//mengkonversi int ke string
		dataBaca.Input2[i]=",";	//input2 isinya ','
		dataBaca.Input3[i]=IntToStr(datainput_3[i]);//mengkonversi int ke string
	}
	dataBaca.ndata = number_data;  //Mengisi int dataBaca.ndata dengan numer data

	save_data_file("data_copy2.txt",dataBaca);	//menyimpan data ke file baru

	BSP_LCD_Clear(LCD_COLOR_WHITE);
	BSP_LCD_SetBackColor(LCD_COLOR_LIGHTRED);
	BSP_LCD_DisplayStringAt(0, 1, (uint8_t *)"PLEASE WAIT", CENTER_MODE);


	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
	BSP_LCD_DisplayStringAt(20, 60, (uint8_t *)dataBaca.Input1[0], LEFT_MODE);
	BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)dataBaca.Input1[1], LEFT_MODE);
	BSP_LCD_DisplayStringAt(20, 140, (uint8_t *)dataBaca.Input1[2], LEFT_MODE);
	BSP_LCD_DisplayStringAt(20, 180, (uint8_t *)dataBaca.Input1[3], LEFT_MODE);

	BSP_LCD_DisplayStringAt(40, 60, (uint8_t *)dataBaca.Input2[0], LEFT_MODE);
	BSP_LCD_DisplayStringAt(40, 100, (uint8_t *)dataBaca.Input2[1], LEFT_MODE);
	BSP_LCD_DisplayStringAt(40, 140, (uint8_t *)dataBaca.Input2[2], LEFT_MODE);
	BSP_LCD_DisplayStringAt(40, 180, (uint8_t *)dataBaca.Input2[3], LEFT_MODE);

	BSP_LCD_DisplayStringAt(60, 60, (uint8_t *)dataBaca.Input3[0], LEFT_MODE);
	BSP_LCD_DisplayStringAt(60, 100, (uint8_t *)dataBaca.Input3[1], LEFT_MODE);
	BSP_LCD_DisplayStringAt(60, 140, (uint8_t *)dataBaca.Input3[2], LEFT_MODE);
	BSP_LCD_DisplayStringAt(60, 180, (uint8_t *)dataBaca.Input3[3], LEFT_MODE);
	free(dataBaca.Input1),dataBaca.Input1=NULL;	//membebaskan memori
	free(dataBaca.Input2),dataBaca.Input2=NULL; //membebaskan memori
	free(dataBaca.Input3),dataBaca.Input3=NULL; //membebaskan memori


	HAL_Delay(1500);
	loading();
	BSP_LCD_Clear(LCD_COLOR_BLUE);
}

void Soal3(){
	dataInput dataBaca;			//membuat struct dengan nama dataBaca
				dataBaca.Input1 = calloc(9999,sizeof(char));	//alokasi memori
				dataBaca.Input2 = calloc(9999,sizeof(char));	//alokasi memori
				dataBaca.Input3 = calloc(9999,sizeof(char));	//alokasi memori
				int count1=-1;		//int untuk menampung angka genap
				int count2=-1;		//int untuk menampung angka ganjil
				for(int i=0;i<number_data+1;i++){	//perulangan sebanyak number data+1
					if(isGanjil(datainput_1[i])==0){	//jika modulus datainput 1==0 maka count1+1
						count1++;						//dan mengisi dataBaca.Input1
						dataBaca.Input1[count1] = IntToStr(datainput_1[i]);
					}
					if(isGanjil(datainput_2[i])==0){	//jika modulus datainput 2==0 maka count1+1
						count1++;						//dan mengisi dataBaca.Input1
						dataBaca.Input1[count1] = IntToStr(datainput_2[i]);
					}
					if(isGanjil(datainput_3[i])==0){	//jika modulus datainput 3==0 maka count1+1
						count1++;						//dan mengisi dataBaca.Input1
						dataBaca.Input1[count1] = IntToStr(datainput_3[i]);
					}

					if(isGanjil(datainput_1[i])==1){	//jika modulus datainput 1==1 maka count2+1
						count2++;						//dan mengisi dataBaca.Input2
						dataBaca.Input2[count2] = IntToStr(datainput_1[i]);
					}
					if(isGanjil(datainput_2[i])==1){	//jika modulus datainput 2==1 maka count2+1
						count2++;						//dan mengisi dataBaca.Input2
						dataBaca.Input2[count2] = IntToStr(datainput_2[i]);
					}
					if(isGanjil(datainput_3[i])==1){	//jika modulus datainput 3==1 maka count2+1
						count2++;						//dan mengisi dataBaca.Input2
						dataBaca.Input2[count2] = IntToStr(datainput_3[i]);
					}
				}

				dataBaca.ndata = (count1 > count2 ? count1 : count2); //Mengisi int dataBaca.ndata dengan count 1
										//	jika count1 lebih besar dari count2 jika tidak maka diisi dengan count2

				for(int i=0;i<dataBaca.ndata+1;i++){
					if(dataBaca.Input1[i]==NULL){dataBaca.Input1[i]="";}//jika dataBaca.Input1 == NULL maka dataBaca.Input1 berisi ""
					if(dataBaca.Input2[i]==NULL){dataBaca.Input2[i]="";}//jika dataBaca.Input2 == NULL maka dataBaca.Input2 berisi ""
					dataBaca.Input3[i]="";			// mengganti dataBaca.Input3 dengan ""
				}

				save_data_file("data_copy3.txt",dataBaca); //menyimpan data ke file yang baru
				BSP_LCD_Clear(LCD_COLOR_WHITE);
				BSP_LCD_SetBackColor(LCD_COLOR_LIGHTRED);
				BSP_LCD_DisplayStringAt(0, 1, (uint8_t *)"PLEASE WAIT", CENTER_MODE);


				int j = 60;

				for (int i = 0;i<7;i++){
				BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
				BSP_LCD_DisplayStringAt(20, j, (uint8_t *)dataBaca.Input1[i], LEFT_MODE);
			    BSP_LCD_DisplayStringAt(40, j, (uint8_t *)dataBaca.Input2[i], LEFT_MODE);
			    j += 20;

				}

			    free(dataBaca.Input1),dataBaca.Input1=NULL;//membebaskan memori
				free(dataBaca.Input2),dataBaca.Input2=NULL;//membebaskan memori
				free(dataBaca.Input3),dataBaca.Input3=NULL;//membebaskan memori


				HAL_Delay(1500);
				loading();
				BSP_LCD_Clear(LCD_COLOR_BLUE);
}

void Soal4(){
	  dataInput dataBaca;			//membuat struct dengan nama dataBaca
	  	dataBaca.Input1 = calloc(9999,sizeof(char));	//alokasi memori
	  	dataBaca.Input2 = calloc(9999,sizeof(char));	//alokasi memori
	  	dataBaca.Input3 = calloc(9999,sizeof(char));	//alokasi memori

	  	int count=-1;
	  	for(int i=0;i<number_data+1;i++){ //perulangan sebanyak number data +1
	  		count++;		//count + 1
	  		dataBaca.Input1[count]=IntToStr(datainput_1[i]);	//Mengisi databaca.Input1
	  		count++;		//count + 1
	  		dataBaca.Input1[count]=IntToStr(datainput_2[i]);	//Mengisi databaca.Input1
	  		count++;		//count + 1
	  		dataBaca.Input1[count]=IntToStr(datainput_3[i]);	//Mengisi databaca.Input1
	  	}
	  	dataBaca.ndata = count;
	  	for(int i=0;i<dataBaca.ndata+1;i++){
	  		if(dataBaca.Input1[i]==NULL){dataBaca.Input1[i]="";} //jika dataBaca.Input1 == NULL maka dataBaca.Input1 berisi ""
	  		dataBaca.Input2[i]=""; //mengganti dataBaca.Input2 dengan ""
	  		dataBaca.Input3[i]=""; // mengganti dataBaca.Input3 dengan ""
	  	}

	  	save_data_file("data_copy4.txt",dataBaca);	//menyimpan data ke file baru
	  	BSP_LCD_Clear(LCD_COLOR_WHITE);
	  	BSP_LCD_SetBackColor(LCD_COLOR_LIGHTRED);
	  	BSP_LCD_DisplayStringAt(0, 1, (uint8_t *)"PLEASE WAIT", CENTER_MODE);
	  	int j=30;
	  	for(int i=0;i<12;i++){
	  		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
	  		BSP_LCD_DisplayStringAt(20, j, (uint8_t *)dataBaca.Input1[i], LEFT_MODE);
	  		j = j + 20;
	  	}

	  	free(dataBaca.Input1),dataBaca.Input1=NULL;	//membebaskan memori
	  	free(dataBaca.Input2),dataBaca.Input2=NULL; //membebaskan memori
	  	free(dataBaca.Input3),dataBaca.Input3=NULL; //membebaskan memori


	  	HAL_Delay(1500);
	  	loading();
	  	BSP_LCD_Clear(LCD_COLOR_BLUE);
}

void Soal5(){
	dataInput dataBaca;			//membuat struct dengan nama dataBaca
				dataBaca.Input1 = calloc(9999,sizeof(char));	//alokasi memori
				dataBaca.Input2 = calloc(9999,sizeof(char));	//alokasi memori
				dataBaca.Input3 = calloc(9999,sizeof(char));	//alokasi memori

				int count=-1;
				for(int i=0;i<number_data+1;i++){ //perulangan sebanyak number data +1
					count++;		//count + 1
					dataBaca.Input1[count]=IntToStr(datainput_1[i]);	//Mengisi databaca.Input1
					count++;		//count + 1
					dataBaca.Input1[count]=IntToStr(datainput_2[i]);	//Mengisi databaca.Input1
					count++;		//count + 1
					dataBaca.Input1[count]=IntToStr(datainput_3[i]);	//Mengisi databaca.Input1
				}
				dataBaca.ndata = count;
				for(int i=0;i<dataBaca.ndata+1;i++){
					if(dataBaca.Input1[i]==NULL){dataBaca.Input1[i]="";} //jika dataBaca.Input1 == NULL maka dataBaca.Input1 berisi ""
					dataBaca.Input2[i]=""; //mengganti dataBaca.Input2 dengan ""
					dataBaca.Input3[i]=""; //mengganti dataBaca.Input3 dengan ""

					if(isGanjil(atoi(dataBaca.Input1[i]))==1 && atoi(dataBaca.Input1[i]) > 5){dataBaca.Input1[i]="ganjil > 5";}
					else if(isGanjil(atoi(dataBaca.Input1[i]))==0 && atoi(dataBaca.Input1[i]) > 5){dataBaca.Input1[i]="genap > 5";}
					else{dataBaca.Input1[i]=dataBaca.Input1[i];}
					//jika modulus dataBaca.Input1==1 dan dataBaca.Input1>5 maka dataBaca.Input1 = "ganjil > 5"
					//dan jika modulus dataBaca.Input1==0 dan dataBaca.Input1>5 maka dataBaca.Input1 = "genap > 5"
					//kalau tidak maka dataBaca.Input1 = dataBaca.Input1
				}

				save_data_file("data_copy5.txt",dataBaca);	//menyimpan data ke file baru
				BSP_LCD_Clear(LCD_COLOR_WHITE);
				BSP_LCD_SetBackColor(LCD_COLOR_LIGHTRED);
				BSP_LCD_DisplayStringAt(0, 1, (uint8_t *)"PLEASE WAIT", RIGHT_MODE);
				int j=5;
				for(int i=0;i<12;i++){
				BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
				BSP_LCD_DisplayStringAt(20, j, (uint8_t *)dataBaca.Input1[i], LEFT_MODE);
				j = j + 22;
				}
				free(dataBaca.Input1),dataBaca.Input1=NULL;	//membebaskan memori
				free(dataBaca.Input2),dataBaca.Input2=NULL; //membebaskan memori
				free(dataBaca.Input3),dataBaca.Input3=NULL; //membebaskan memori


				HAL_Delay(1500);
				loading();
				BSP_LCD_Clear(LCD_COLOR_BLUE);
}

void get_data_from_rawdata(){
	char *datain1,*datain2,*datain3;
	datain1 = calloc(100,sizeof(char));
	datain2 = calloc(100,sizeof(char));
	datain3 = calloc(100,sizeof(char));
	for(int i=0;i<number_data+1;i++){
		txtResult = replaceWordInString(dataraw[i],","," ");
		sscanf(txtResult,"%s  %s  %s ",datain1,datain2, datain3);
		datainput_1[i] = atoi(datain1);
		datainput_2[i] = atoi(datain2);
		datainput_3[i] = atoi(datain3);
		free(txtResult),txtResult=NULL;
	}
	free(datain1),datain1=NULL;
	free(datain2),datain2=NULL;
	free(datain3),datain3=NULL;
}


void save_data_file(char *namafile, dataInput datatulis){
	res = f_mount(&SDFatFS, "", 1);
		if(res != FR_OK){
				Error1();
			}
	res = f_open(&MyFile, namafile, FA_CREATE_ALWAYS | FA_WRITE);
		if(res != FR_OK){
				Error2();
			}
	for (int i = 0;i < (datatulis.ndata+1);i++){
		f_printf(&MyFile, "%s %s %s \n",  datatulis.Input1[i], datatulis.Input2[i],datatulis.Input3[i]);
	}

	f_close(&MyFile);
	f_mount(0, "", 1);
}

void loading(){
	BSP_LCD_Clear(LCD_COLOR_MAGENTA);
	BSP_LCD_SetBackColor(LCD_COLOR_MAGENTA);
	BSP_LCD_DisplayStringAt(0, 110, (uint8_t *)"WRITING DATA", CENTER_MODE);
	int j=-120;
	for(int i = 0; i<13;i++){
		BSP_LCD_DisplayStringAt(j, 135, (uint8_t *)"#", CENTER_MODE);
		j = j + 20;
		HAL_Delay(150);
	}
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
